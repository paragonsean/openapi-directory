/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplyRecoveryPointInput;
import org.openapitools.client.model.DisableProtectionInput;
import org.openapitools.client.model.EnableProtectionInput;
import org.openapitools.client.model.PlannedFailoverInput;
import org.openapitools.client.model.ReplicationProtectedItem;
import org.openapitools.client.model.ReplicationProtectedItemCollection;
import org.openapitools.client.model.ReverseReplicationInput;
import org.openapitools.client.model.TestFailoverCleanupInput;
import org.openapitools.client.model.TestFailoverInput;
import org.openapitools.client.model.UnplannedFailoverInput;
import org.openapitools.client.model.UpdateMobilityServiceRequest;
import org.openapitools.client.model.UpdateReplicationProtectedItemInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReplicationProtectedItemsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReplicationProtectedItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReplicationProtectedItemsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for replicationProtectedItemsApplyRecoveryPoint
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The ARM fabric name. (required)
     * @param protectionContainerName The protection container name. (required)
     * @param replicatedProtectedItemName The replicated protected item&#39;s name. (required)
     * @param applyRecoveryPointInput The ApplyRecoveryPointInput. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsApplyRecoveryPointCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, ApplyRecoveryPointInput applyRecoveryPointInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applyRecoveryPointInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/applyRecoveryPoint"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicatedProtectedItemName" + "}", localVarApiClient.escapeString(replicatedProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsApplyRecoveryPointValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, ApplyRecoveryPointInput applyRecoveryPointInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsApplyRecoveryPoint(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsApplyRecoveryPoint(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsApplyRecoveryPoint(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsApplyRecoveryPoint(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsApplyRecoveryPoint(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsApplyRecoveryPoint(Async)");
        }

        // verify the required parameter 'replicatedProtectedItemName' is set
        if (replicatedProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsApplyRecoveryPoint(Async)");
        }

        // verify the required parameter 'applyRecoveryPointInput' is set
        if (applyRecoveryPointInput == null) {
            throw new ApiException("Missing the required parameter 'applyRecoveryPointInput' when calling replicationProtectedItemsApplyRecoveryPoint(Async)");
        }

        return replicationProtectedItemsApplyRecoveryPointCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput, _callback);

    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The ARM fabric name. (required)
     * @param protectionContainerName The protection container name. (required)
     * @param replicatedProtectedItemName The replicated protected item&#39;s name. (required)
     * @param applyRecoveryPointInput The ApplyRecoveryPointInput. (required)
     * @return ReplicationProtectedItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItem replicationProtectedItemsApplyRecoveryPoint(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, ApplyRecoveryPointInput applyRecoveryPointInput) throws ApiException {
        ApiResponse<ReplicationProtectedItem> localVarResp = replicationProtectedItemsApplyRecoveryPointWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput);
        return localVarResp.getData();
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The ARM fabric name. (required)
     * @param protectionContainerName The protection container name. (required)
     * @param replicatedProtectedItemName The replicated protected item&#39;s name. (required)
     * @param applyRecoveryPointInput The ApplyRecoveryPointInput. (required)
     * @return ApiResponse&lt;ReplicationProtectedItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItem> replicationProtectedItemsApplyRecoveryPointWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, ApplyRecoveryPointInput applyRecoveryPointInput) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsApplyRecoveryPointValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change or apply recovery point. (asynchronously)
     * The operation to change the recovery point of a failed over replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The ARM fabric name. (required)
     * @param protectionContainerName The protection container name. (required)
     * @param replicatedProtectedItemName The replicated protected item&#39;s name. (required)
     * @param applyRecoveryPointInput The ApplyRecoveryPointInput. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsApplyRecoveryPointAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, ApplyRecoveryPointInput applyRecoveryPointInput, final ApiCallback<ReplicationProtectedItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsApplyRecoveryPointValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsCreate
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Name of the fabric. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName A name for the replication protected item. (required)
     * @param input Enable Protection Input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsCreateCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, EnableProtectionInput input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicatedProtectedItemName" + "}", localVarApiClient.escapeString(replicatedProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsCreateValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, EnableProtectionInput input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsCreate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsCreate(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsCreate(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsCreate(Async)");
        }

        // verify the required parameter 'replicatedProtectedItemName' is set
        if (replicatedProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsCreate(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling replicationProtectedItemsCreate(Async)");
        }

        return replicationProtectedItemsCreateCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, input, _callback);

    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Name of the fabric. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName A name for the replication protected item. (required)
     * @param input Enable Protection Input. (required)
     * @return ReplicationProtectedItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItem replicationProtectedItemsCreate(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, EnableProtectionInput input) throws ApiException {
        ApiResponse<ReplicationProtectedItem> localVarResp = replicationProtectedItemsCreateWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, input);
        return localVarResp.getData();
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Name of the fabric. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName A name for the replication protected item. (required)
     * @param input Enable Protection Input. (required)
     * @return ApiResponse&lt;ReplicationProtectedItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItem> replicationProtectedItemsCreateWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, EnableProtectionInput input) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, input, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enables protection. (asynchronously)
     * The operation to create an ASR replication protected item (Enable replication).
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Name of the fabric. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName A name for the replication protected item. (required)
     * @param input Enable Protection Input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsCreateAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, EnableProtectionInput input, final ApiCallback<ReplicationProtectedItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, input, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsDelete
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param disableProtectionInput Disable protection input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsDeleteCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, DisableProtectionInput disableProtectionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableProtectionInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/remove"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicatedProtectedItemName" + "}", localVarApiClient.escapeString(replicatedProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsDeleteValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, DisableProtectionInput disableProtectionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsDelete(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsDelete(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsDelete(Async)");
        }

        // verify the required parameter 'replicatedProtectedItemName' is set
        if (replicatedProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsDelete(Async)");
        }

        // verify the required parameter 'disableProtectionInput' is set
        if (disableProtectionInput == null) {
            throw new ApiException("Missing the required parameter 'disableProtectionInput' when calling replicationProtectedItemsDelete(Async)");
        }

        return replicationProtectedItemsDeleteCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput, _callback);

    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param disableProtectionInput Disable protection input. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void replicationProtectedItemsDelete(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, DisableProtectionInput disableProtectionInput) throws ApiException {
        replicationProtectedItemsDeleteWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput);
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param disableProtectionInput Disable protection input. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replicationProtectedItemsDeleteWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, DisableProtectionInput disableProtectionInput) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disables protection. (asynchronously)
     * The operation to disable replication on a replication protected item. This will also remove the item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param disableProtectionInput Disable protection input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsDeleteAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, DisableProtectionInput disableProtectionInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsFailoverCommit
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsFailoverCommitCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/failoverCommit"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicatedProtectedItemName" + "}", localVarApiClient.escapeString(replicatedProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsFailoverCommitValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsFailoverCommit(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsFailoverCommit(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsFailoverCommit(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsFailoverCommit(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsFailoverCommit(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsFailoverCommit(Async)");
        }

        // verify the required parameter 'replicatedProtectedItemName' is set
        if (replicatedProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsFailoverCommit(Async)");
        }

        return replicationProtectedItemsFailoverCommitCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, _callback);

    }

    /**
     * Execute commit failover
     * Operation to commit the failover of the replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @return ReplicationProtectedItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItem replicationProtectedItemsFailoverCommit(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName) throws ApiException {
        ApiResponse<ReplicationProtectedItem> localVarResp = replicationProtectedItemsFailoverCommitWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName);
        return localVarResp.getData();
    }

    /**
     * Execute commit failover
     * Operation to commit the failover of the replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @return ApiResponse&lt;ReplicationProtectedItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItem> replicationProtectedItemsFailoverCommitWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsFailoverCommitValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute commit failover (asynchronously)
     * Operation to commit the failover of the replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsFailoverCommitAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ApiCallback<ReplicationProtectedItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsFailoverCommitValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsGet
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric unique name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsGetCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicatedProtectedItemName" + "}", localVarApiClient.escapeString(replicatedProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsGetValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsGet(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsGet(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsGet(Async)");
        }

        // verify the required parameter 'replicatedProtectedItemName' is set
        if (replicatedProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsGet(Async)");
        }

        return replicationProtectedItemsGetCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, _callback);

    }

    /**
     * Gets the details of a Replication protected item.
     * Gets the details of an ASR replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric unique name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @return ReplicationProtectedItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItem replicationProtectedItemsGet(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName) throws ApiException {
        ApiResponse<ReplicationProtectedItem> localVarResp = replicationProtectedItemsGetWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName);
        return localVarResp.getData();
    }

    /**
     * Gets the details of a Replication protected item.
     * Gets the details of an ASR replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric unique name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @return ApiResponse&lt;ReplicationProtectedItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItem> replicationProtectedItemsGetWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the details of a Replication protected item. (asynchronously)
     * Gets the details of an ASR replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric unique name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsGetAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ApiCallback<ReplicationProtectedItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsList
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param skipToken The pagination token. Possible values: \&quot;FabricId\&quot; or \&quot;FabricId_CloudId\&quot; or null (optional)
     * @param $filter OData filter options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsListCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String skipToken, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectedItems"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipToken", skipToken));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsListValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String skipToken, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsList(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsList(Async)");
        }

        return replicationProtectedItemsListCall(apiVersion, resourceName, resourceGroupName, subscriptionId, skipToken, $filter, _callback);

    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param skipToken The pagination token. Possible values: \&quot;FabricId\&quot; or \&quot;FabricId_CloudId\&quot; or null (optional)
     * @param $filter OData filter options. (optional)
     * @return ReplicationProtectedItemCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItemCollection replicationProtectedItemsList(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String skipToken, String $filter) throws ApiException {
        ApiResponse<ReplicationProtectedItemCollection> localVarResp = replicationProtectedItemsListWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, skipToken, $filter);
        return localVarResp.getData();
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param skipToken The pagination token. Possible values: \&quot;FabricId\&quot; or \&quot;FabricId_CloudId\&quot; or null (optional)
     * @param $filter OData filter options. (optional)
     * @return ApiResponse&lt;ReplicationProtectedItemCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItemCollection> replicationProtectedItemsListWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String skipToken, String $filter) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, skipToken, $filter, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItemCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of replication protected items. (asynchronously)
     * Gets the list of ASR replication protected items in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param skipToken The pagination token. Possible values: \&quot;FabricId\&quot; or \&quot;FabricId_CloudId\&quot; or null (optional)
     * @param $filter OData filter options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsListAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String skipToken, String $filter, final ApiCallback<ReplicationProtectedItemCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, skipToken, $filter, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItemCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsListByReplicationProtectionContainers
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsListByReplicationProtectionContainersCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsListByReplicationProtectionContainersValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsListByReplicationProtectionContainers(Async)");
        }

        return replicationProtectedItemsListByReplicationProtectionContainersCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, _callback);

    }

    /**
     * Gets the list of Replication protected items.
     * Gets the list of ASR replication protected items in the protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @return ReplicationProtectedItemCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItemCollection replicationProtectedItemsListByReplicationProtectionContainers(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName) throws ApiException {
        ApiResponse<ReplicationProtectedItemCollection> localVarResp = replicationProtectedItemsListByReplicationProtectionContainersWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName);
        return localVarResp.getData();
    }

    /**
     * Gets the list of Replication protected items.
     * Gets the list of ASR replication protected items in the protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @return ApiResponse&lt;ReplicationProtectedItemCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItemCollection> replicationProtectedItemsListByReplicationProtectionContainersWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsListByReplicationProtectionContainersValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItemCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of Replication protected items. (asynchronously)
     * Gets the list of ASR replication protected items in the protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsListByReplicationProtectionContainersAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback<ReplicationProtectedItemCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsListByReplicationProtectionContainersValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItemCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsPlannedFailover
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param failoverInput Disable protection input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsPlannedFailoverCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, PlannedFailoverInput failoverInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failoverInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/plannedFailover"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicatedProtectedItemName" + "}", localVarApiClient.escapeString(replicatedProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsPlannedFailoverValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, PlannedFailoverInput failoverInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsPlannedFailover(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsPlannedFailover(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsPlannedFailover(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsPlannedFailover(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsPlannedFailover(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsPlannedFailover(Async)");
        }

        // verify the required parameter 'replicatedProtectedItemName' is set
        if (replicatedProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsPlannedFailover(Async)");
        }

        // verify the required parameter 'failoverInput' is set
        if (failoverInput == null) {
            throw new ApiException("Missing the required parameter 'failoverInput' when calling replicationProtectedItemsPlannedFailover(Async)");
        }

        return replicationProtectedItemsPlannedFailoverCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, _callback);

    }

    /**
     * Execute planned failover
     * Operation to initiate a planned failover of the replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param failoverInput Disable protection input. (required)
     * @return ReplicationProtectedItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItem replicationProtectedItemsPlannedFailover(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, PlannedFailoverInput failoverInput) throws ApiException {
        ApiResponse<ReplicationProtectedItem> localVarResp = replicationProtectedItemsPlannedFailoverWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput);
        return localVarResp.getData();
    }

    /**
     * Execute planned failover
     * Operation to initiate a planned failover of the replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param failoverInput Disable protection input. (required)
     * @return ApiResponse&lt;ReplicationProtectedItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItem> replicationProtectedItemsPlannedFailoverWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, PlannedFailoverInput failoverInput) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsPlannedFailoverValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute planned failover (asynchronously)
     * Operation to initiate a planned failover of the replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param failoverInput Disable protection input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsPlannedFailoverAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, PlannedFailoverInput failoverInput, final ApiCallback<ReplicationProtectedItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsPlannedFailoverValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsPurge
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsPurgeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicatedProtectedItemName" + "}", localVarApiClient.escapeString(replicatedProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsPurgeValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsPurge(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsPurge(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsPurge(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsPurge(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsPurge(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsPurge(Async)");
        }

        // verify the required parameter 'replicatedProtectedItemName' is set
        if (replicatedProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsPurge(Async)");
        }

        return replicationProtectedItemsPurgeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, _callback);

    }

    /**
     * Purges protection.
     * The operation to delete or purge a replication protected item. This operation will force delete the replication protected item. Use the remove operation on replication protected item to perform a clean disable replication for the item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void replicationProtectedItemsPurge(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName) throws ApiException {
        replicationProtectedItemsPurgeWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName);
    }

    /**
     * Purges protection.
     * The operation to delete or purge a replication protected item. This operation will force delete the replication protected item. Use the remove operation on replication protected item to perform a clean disable replication for the item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replicationProtectedItemsPurgeWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsPurgeValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Purges protection. (asynchronously)
     * The operation to delete or purge a replication protected item. This operation will force delete the replication protected item. Use the remove operation on replication protected item to perform a clean disable replication for the item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsPurgeAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsPurgeValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsRepairReplication
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The name of the fabric. (required)
     * @param protectionContainerName The name of the container. (required)
     * @param replicatedProtectedItemName The name of the replication protected item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsRepairReplicationCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/repairReplication"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicatedProtectedItemName" + "}", localVarApiClient.escapeString(replicatedProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsRepairReplicationValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsRepairReplication(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsRepairReplication(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsRepairReplication(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsRepairReplication(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsRepairReplication(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsRepairReplication(Async)");
        }

        // verify the required parameter 'replicatedProtectedItemName' is set
        if (replicatedProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsRepairReplication(Async)");
        }

        return replicationProtectedItemsRepairReplicationCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, _callback);

    }

    /**
     * Resynchronize or repair replication.
     * The operation to start resynchronize/repair replication for a replication protected item requiring resynchronization.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The name of the fabric. (required)
     * @param protectionContainerName The name of the container. (required)
     * @param replicatedProtectedItemName The name of the replication protected item. (required)
     * @return ReplicationProtectedItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItem replicationProtectedItemsRepairReplication(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName) throws ApiException {
        ApiResponse<ReplicationProtectedItem> localVarResp = replicationProtectedItemsRepairReplicationWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName);
        return localVarResp.getData();
    }

    /**
     * Resynchronize or repair replication.
     * The operation to start resynchronize/repair replication for a replication protected item requiring resynchronization.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The name of the fabric. (required)
     * @param protectionContainerName The name of the container. (required)
     * @param replicatedProtectedItemName The name of the replication protected item. (required)
     * @return ApiResponse&lt;ReplicationProtectedItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItem> replicationProtectedItemsRepairReplicationWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsRepairReplicationValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resynchronize or repair replication. (asynchronously)
     * The operation to start resynchronize/repair replication for a replication protected item requiring resynchronization.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The name of the fabric. (required)
     * @param protectionContainerName The name of the container. (required)
     * @param replicatedProtectedItemName The name of the replication protected item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsRepairReplicationAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ApiCallback<ReplicationProtectedItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsRepairReplicationValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsReprotect
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param rrInput Disable protection input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsReprotectCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, ReverseReplicationInput rrInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rrInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/reProtect"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicatedProtectedItemName" + "}", localVarApiClient.escapeString(replicatedProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsReprotectValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, ReverseReplicationInput rrInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsReprotect(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsReprotect(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsReprotect(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsReprotect(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsReprotect(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsReprotect(Async)");
        }

        // verify the required parameter 'replicatedProtectedItemName' is set
        if (replicatedProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsReprotect(Async)");
        }

        // verify the required parameter 'rrInput' is set
        if (rrInput == null) {
            throw new ApiException("Missing the required parameter 'rrInput' when calling replicationProtectedItemsReprotect(Async)");
        }

        return replicationProtectedItemsReprotectCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, rrInput, _callback);

    }

    /**
     * Execute Reverse Replication\\Reprotect
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param rrInput Disable protection input. (required)
     * @return ReplicationProtectedItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItem replicationProtectedItemsReprotect(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, ReverseReplicationInput rrInput) throws ApiException {
        ApiResponse<ReplicationProtectedItem> localVarResp = replicationProtectedItemsReprotectWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, rrInput);
        return localVarResp.getData();
    }

    /**
     * Execute Reverse Replication\\Reprotect
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param rrInput Disable protection input. (required)
     * @return ApiResponse&lt;ReplicationProtectedItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItem> replicationProtectedItemsReprotectWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, ReverseReplicationInput rrInput) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsReprotectValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, rrInput, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute Reverse Replication\\Reprotect (asynchronously)
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param rrInput Disable protection input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsReprotectAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, ReverseReplicationInput rrInput, final ApiCallback<ReplicationProtectedItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsReprotectValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, rrInput, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsTestFailover
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param failoverInput Test failover input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsTestFailoverCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverInput failoverInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failoverInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailover"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicatedProtectedItemName" + "}", localVarApiClient.escapeString(replicatedProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsTestFailoverValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverInput failoverInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsTestFailover(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsTestFailover(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsTestFailover(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsTestFailover(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsTestFailover(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsTestFailover(Async)");
        }

        // verify the required parameter 'replicatedProtectedItemName' is set
        if (replicatedProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsTestFailover(Async)");
        }

        // verify the required parameter 'failoverInput' is set
        if (failoverInput == null) {
            throw new ApiException("Missing the required parameter 'failoverInput' when calling replicationProtectedItemsTestFailover(Async)");
        }

        return replicationProtectedItemsTestFailoverCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, _callback);

    }

    /**
     * Execute test failover
     * Operation to perform a test failover of the replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param failoverInput Test failover input. (required)
     * @return ReplicationProtectedItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItem replicationProtectedItemsTestFailover(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverInput failoverInput) throws ApiException {
        ApiResponse<ReplicationProtectedItem> localVarResp = replicationProtectedItemsTestFailoverWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput);
        return localVarResp.getData();
    }

    /**
     * Execute test failover
     * Operation to perform a test failover of the replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param failoverInput Test failover input. (required)
     * @return ApiResponse&lt;ReplicationProtectedItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItem> replicationProtectedItemsTestFailoverWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverInput failoverInput) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsTestFailoverValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute test failover (asynchronously)
     * Operation to perform a test failover of the replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param failoverInput Test failover input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsTestFailoverAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverInput failoverInput, final ApiCallback<ReplicationProtectedItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsTestFailoverValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsTestFailoverCleanup
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param cleanupInput Test failover cleanup input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsTestFailoverCleanupCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInput cleanupInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cleanupInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailoverCleanup"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicatedProtectedItemName" + "}", localVarApiClient.escapeString(replicatedProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsTestFailoverCleanupValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInput cleanupInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsTestFailoverCleanup(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsTestFailoverCleanup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsTestFailoverCleanup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsTestFailoverCleanup(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsTestFailoverCleanup(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsTestFailoverCleanup(Async)");
        }

        // verify the required parameter 'replicatedProtectedItemName' is set
        if (replicatedProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsTestFailoverCleanup(Async)");
        }

        // verify the required parameter 'cleanupInput' is set
        if (cleanupInput == null) {
            throw new ApiException("Missing the required parameter 'cleanupInput' when calling replicationProtectedItemsTestFailoverCleanup(Async)");
        }

        return replicationProtectedItemsTestFailoverCleanupCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, cleanupInput, _callback);

    }

    /**
     * Execute test failover cleanup.
     * Operation to clean up the test failover of a replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param cleanupInput Test failover cleanup input. (required)
     * @return ReplicationProtectedItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItem replicationProtectedItemsTestFailoverCleanup(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInput cleanupInput) throws ApiException {
        ApiResponse<ReplicationProtectedItem> localVarResp = replicationProtectedItemsTestFailoverCleanupWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, cleanupInput);
        return localVarResp.getData();
    }

    /**
     * Execute test failover cleanup.
     * Operation to clean up the test failover of a replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param cleanupInput Test failover cleanup input. (required)
     * @return ApiResponse&lt;ReplicationProtectedItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItem> replicationProtectedItemsTestFailoverCleanupWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInput cleanupInput) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsTestFailoverCleanupValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, cleanupInput, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute test failover cleanup. (asynchronously)
     * Operation to clean up the test failover of a replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param cleanupInput Test failover cleanup input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsTestFailoverCleanupAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInput cleanupInput, final ApiCallback<ReplicationProtectedItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsTestFailoverCleanupValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, cleanupInput, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsUnplannedFailover
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param failoverInput Disable protection input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsUnplannedFailoverCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, UnplannedFailoverInput failoverInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failoverInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/unplannedFailover"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicatedProtectedItemName" + "}", localVarApiClient.escapeString(replicatedProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsUnplannedFailoverValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, UnplannedFailoverInput failoverInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsUnplannedFailover(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsUnplannedFailover(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsUnplannedFailover(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsUnplannedFailover(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsUnplannedFailover(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsUnplannedFailover(Async)");
        }

        // verify the required parameter 'replicatedProtectedItemName' is set
        if (replicatedProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsUnplannedFailover(Async)");
        }

        // verify the required parameter 'failoverInput' is set
        if (failoverInput == null) {
            throw new ApiException("Missing the required parameter 'failoverInput' when calling replicationProtectedItemsUnplannedFailover(Async)");
        }

        return replicationProtectedItemsUnplannedFailoverCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, _callback);

    }

    /**
     * Execute unplanned failover
     * Operation to initiate a failover of the replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param failoverInput Disable protection input. (required)
     * @return ReplicationProtectedItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItem replicationProtectedItemsUnplannedFailover(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, UnplannedFailoverInput failoverInput) throws ApiException {
        ApiResponse<ReplicationProtectedItem> localVarResp = replicationProtectedItemsUnplannedFailoverWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput);
        return localVarResp.getData();
    }

    /**
     * Execute unplanned failover
     * Operation to initiate a failover of the replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param failoverInput Disable protection input. (required)
     * @return ApiResponse&lt;ReplicationProtectedItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItem> replicationProtectedItemsUnplannedFailoverWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, UnplannedFailoverInput failoverInput) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsUnplannedFailoverValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute unplanned failover (asynchronously)
     * Operation to initiate a failover of the replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param failoverInput Disable protection input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsUnplannedFailoverAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, UnplannedFailoverInput failoverInput, final ApiCallback<ReplicationProtectedItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsUnplannedFailoverValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsUpdate
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param updateProtectionInput Update protection input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsUpdateCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, UpdateReplicationProtectedItemInput updateProtectionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProtectionInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicatedProtectedItemName" + "}", localVarApiClient.escapeString(replicatedProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsUpdateValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, UpdateReplicationProtectedItemInput updateProtectionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsUpdate(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsUpdate(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsUpdate(Async)");
        }

        // verify the required parameter 'replicatedProtectedItemName' is set
        if (replicatedProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsUpdate(Async)");
        }

        // verify the required parameter 'updateProtectionInput' is set
        if (updateProtectionInput == null) {
            throw new ApiException("Missing the required parameter 'updateProtectionInput' when calling replicationProtectedItemsUpdate(Async)");
        }

        return replicationProtectedItemsUpdateCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput, _callback);

    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param updateProtectionInput Update protection input. (required)
     * @return ReplicationProtectedItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItem replicationProtectedItemsUpdate(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, UpdateReplicationProtectedItemInput updateProtectionInput) throws ApiException {
        ApiResponse<ReplicationProtectedItem> localVarResp = replicationProtectedItemsUpdateWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput);
        return localVarResp.getData();
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param updateProtectionInput Update protection input. (required)
     * @return ApiResponse&lt;ReplicationProtectedItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItem> replicationProtectedItemsUpdateWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, UpdateReplicationProtectedItemInput updateProtectionInput) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsUpdateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates protection. (asynchronously)
     * The operation to update the recovery settings of an ASR replication protected item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param replicatedProtectedItemName Replication protected item name. (required)
     * @param updateProtectionInput Update protection input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsUpdateAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicatedProtectedItemName, UpdateReplicationProtectedItemInput updateProtectionInput, final ApiCallback<ReplicationProtectedItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsUpdateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectedItemsUpdateMobilityService
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The name of the fabric containing the protected item. (required)
     * @param protectionContainerName The name of the container containing the protected item. (required)
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated. (required)
     * @param updateMobilityServiceRequest Request to update the mobility service on the protected item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsUpdateMobilityServiceCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicationProtectedItemName, UpdateMobilityServiceRequest updateMobilityServiceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMobilityServiceRequest;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicationProtectedItemName}/updateMobilityService"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "replicationProtectedItemName" + "}", localVarApiClient.escapeString(replicationProtectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectedItemsUpdateMobilityServiceValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicationProtectedItemName, UpdateMobilityServiceRequest updateMobilityServiceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsUpdateMobilityService(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectedItemsUpdateMobilityService(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsUpdateMobilityService(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsUpdateMobilityService(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectedItemsUpdateMobilityService(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsUpdateMobilityService(Async)");
        }

        // verify the required parameter 'replicationProtectedItemName' is set
        if (replicationProtectedItemName == null) {
            throw new ApiException("Missing the required parameter 'replicationProtectedItemName' when calling replicationProtectedItemsUpdateMobilityService(Async)");
        }

        // verify the required parameter 'updateMobilityServiceRequest' is set
        if (updateMobilityServiceRequest == null) {
            throw new ApiException("Missing the required parameter 'updateMobilityServiceRequest' when calling replicationProtectedItemsUpdateMobilityService(Async)");
        }

        return replicationProtectedItemsUpdateMobilityServiceCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicationProtectedItemName, updateMobilityServiceRequest, _callback);

    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The name of the fabric containing the protected item. (required)
     * @param protectionContainerName The name of the container containing the protected item. (required)
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated. (required)
     * @param updateMobilityServiceRequest Request to update the mobility service on the protected item. (required)
     * @return ReplicationProtectedItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationProtectedItem replicationProtectedItemsUpdateMobilityService(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicationProtectedItemName, UpdateMobilityServiceRequest updateMobilityServiceRequest) throws ApiException {
        ApiResponse<ReplicationProtectedItem> localVarResp = replicationProtectedItemsUpdateMobilityServiceWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicationProtectedItemName, updateMobilityServiceRequest);
        return localVarResp.getData();
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The name of the fabric containing the protected item. (required)
     * @param protectionContainerName The name of the container containing the protected item. (required)
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated. (required)
     * @param updateMobilityServiceRequest Request to update the mobility service on the protected item. (required)
     * @return ApiResponse&lt;ReplicationProtectedItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationProtectedItem> replicationProtectedItemsUpdateMobilityServiceWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicationProtectedItemName, UpdateMobilityServiceRequest updateMobilityServiceRequest) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectedItemsUpdateMobilityServiceValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicationProtectedItemName, updateMobilityServiceRequest, null);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the mobility service on a protected item. (asynchronously)
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The name of the fabric containing the protected item. (required)
     * @param protectionContainerName The name of the container containing the protected item. (required)
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated. (required)
     * @param updateMobilityServiceRequest Request to update the mobility service on the protected item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectedItemsUpdateMobilityServiceAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String replicationProtectedItemName, UpdateMobilityServiceRequest updateMobilityServiceRequest, final ApiCallback<ReplicationProtectedItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectedItemsUpdateMobilityServiceValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicationProtectedItemName, updateMobilityServiceRequest, _callback);
        Type localVarReturnType = new TypeToken<ReplicationProtectedItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
