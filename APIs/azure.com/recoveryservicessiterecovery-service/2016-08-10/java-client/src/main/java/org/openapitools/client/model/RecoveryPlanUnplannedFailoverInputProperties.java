/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecoveryPlanProviderSpecificFailoverInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Recovery plan unplanned failover input properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecoveryPlanUnplannedFailoverInputProperties {
  /**
   * The failover direction.
   */
  @JsonAdapter(FailoverDirectionEnum.Adapter.class)
  public enum FailoverDirectionEnum {
    PRIMARY_TO_RECOVERY("PrimaryToRecovery"),
    
    RECOVERY_TO_PRIMARY("RecoveryToPrimary");

    private String value;

    FailoverDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FailoverDirectionEnum fromValue(String value) {
      for (FailoverDirectionEnum b : FailoverDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FailoverDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailoverDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailoverDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FailoverDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FailoverDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAILOVER_DIRECTION = "failoverDirection";
  @SerializedName(SERIALIZED_NAME_FAILOVER_DIRECTION)
  private FailoverDirectionEnum failoverDirection;

  public static final String SERIALIZED_NAME_PROVIDER_SPECIFIC_DETAILS = "providerSpecificDetails";
  @SerializedName(SERIALIZED_NAME_PROVIDER_SPECIFIC_DETAILS)
  private List<RecoveryPlanProviderSpecificFailoverInput> providerSpecificDetails = new ArrayList<>();

  /**
   * A value indicating whether source site operations are required.
   */
  @JsonAdapter(SourceSiteOperationsEnum.Adapter.class)
  public enum SourceSiteOperationsEnum {
    REQUIRED("Required"),
    
    NOT_REQUIRED("NotRequired");

    private String value;

    SourceSiteOperationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceSiteOperationsEnum fromValue(String value) {
      for (SourceSiteOperationsEnum b : SourceSiteOperationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceSiteOperationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceSiteOperationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceSiteOperationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceSiteOperationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceSiteOperationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_SITE_OPERATIONS = "sourceSiteOperations";
  @SerializedName(SERIALIZED_NAME_SOURCE_SITE_OPERATIONS)
  private SourceSiteOperationsEnum sourceSiteOperations;

  public RecoveryPlanUnplannedFailoverInputProperties() {
  }

  public RecoveryPlanUnplannedFailoverInputProperties failoverDirection(FailoverDirectionEnum failoverDirection) {
    this.failoverDirection = failoverDirection;
    return this;
  }

  /**
   * The failover direction.
   * @return failoverDirection
   */
  @javax.annotation.Nonnull
  public FailoverDirectionEnum getFailoverDirection() {
    return failoverDirection;
  }

  public void setFailoverDirection(FailoverDirectionEnum failoverDirection) {
    this.failoverDirection = failoverDirection;
  }


  public RecoveryPlanUnplannedFailoverInputProperties providerSpecificDetails(List<RecoveryPlanProviderSpecificFailoverInput> providerSpecificDetails) {
    this.providerSpecificDetails = providerSpecificDetails;
    return this;
  }

  public RecoveryPlanUnplannedFailoverInputProperties addProviderSpecificDetailsItem(RecoveryPlanProviderSpecificFailoverInput providerSpecificDetailsItem) {
    if (this.providerSpecificDetails == null) {
      this.providerSpecificDetails = new ArrayList<>();
    }
    this.providerSpecificDetails.add(providerSpecificDetailsItem);
    return this;
  }

  /**
   * The provider specific properties.
   * @return providerSpecificDetails
   */
  @javax.annotation.Nullable
  public List<RecoveryPlanProviderSpecificFailoverInput> getProviderSpecificDetails() {
    return providerSpecificDetails;
  }

  public void setProviderSpecificDetails(List<RecoveryPlanProviderSpecificFailoverInput> providerSpecificDetails) {
    this.providerSpecificDetails = providerSpecificDetails;
  }


  public RecoveryPlanUnplannedFailoverInputProperties sourceSiteOperations(SourceSiteOperationsEnum sourceSiteOperations) {
    this.sourceSiteOperations = sourceSiteOperations;
    return this;
  }

  /**
   * A value indicating whether source site operations are required.
   * @return sourceSiteOperations
   */
  @javax.annotation.Nonnull
  public SourceSiteOperationsEnum getSourceSiteOperations() {
    return sourceSiteOperations;
  }

  public void setSourceSiteOperations(SourceSiteOperationsEnum sourceSiteOperations) {
    this.sourceSiteOperations = sourceSiteOperations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecoveryPlanUnplannedFailoverInputProperties recoveryPlanUnplannedFailoverInputProperties = (RecoveryPlanUnplannedFailoverInputProperties) o;
    return Objects.equals(this.failoverDirection, recoveryPlanUnplannedFailoverInputProperties.failoverDirection) &&
        Objects.equals(this.providerSpecificDetails, recoveryPlanUnplannedFailoverInputProperties.providerSpecificDetails) &&
        Objects.equals(this.sourceSiteOperations, recoveryPlanUnplannedFailoverInputProperties.sourceSiteOperations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failoverDirection, providerSpecificDetails, sourceSiteOperations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecoveryPlanUnplannedFailoverInputProperties {\n");
    sb.append("    failoverDirection: ").append(toIndentedString(failoverDirection)).append("\n");
    sb.append("    providerSpecificDetails: ").append(toIndentedString(providerSpecificDetails)).append("\n");
    sb.append("    sourceSiteOperations: ").append(toIndentedString(sourceSiteOperations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failoverDirection");
    openapiFields.add("providerSpecificDetails");
    openapiFields.add("sourceSiteOperations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("failoverDirection");
    openapiRequiredFields.add("sourceSiteOperations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecoveryPlanUnplannedFailoverInputProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecoveryPlanUnplannedFailoverInputProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecoveryPlanUnplannedFailoverInputProperties is not found in the empty JSON string", RecoveryPlanUnplannedFailoverInputProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecoveryPlanUnplannedFailoverInputProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecoveryPlanUnplannedFailoverInputProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecoveryPlanUnplannedFailoverInputProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("failoverDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failoverDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failoverDirection").toString()));
      }
      // validate the required field `failoverDirection`
      FailoverDirectionEnum.validateJsonElement(jsonObj.get("failoverDirection"));
      if (jsonObj.get("providerSpecificDetails") != null && !jsonObj.get("providerSpecificDetails").isJsonNull()) {
        JsonArray jsonArrayproviderSpecificDetails = jsonObj.getAsJsonArray("providerSpecificDetails");
        if (jsonArrayproviderSpecificDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("providerSpecificDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `providerSpecificDetails` to be an array in the JSON string but got `%s`", jsonObj.get("providerSpecificDetails").toString()));
          }

          // validate the optional field `providerSpecificDetails` (array)
          for (int i = 0; i < jsonArrayproviderSpecificDetails.size(); i++) {
            RecoveryPlanProviderSpecificFailoverInput.validateJsonElement(jsonArrayproviderSpecificDetails.get(i));
          };
        }
      }
      if (!jsonObj.get("sourceSiteOperations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceSiteOperations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceSiteOperations").toString()));
      }
      // validate the required field `sourceSiteOperations`
      SourceSiteOperationsEnum.validateJsonElement(jsonObj.get("sourceSiteOperations"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecoveryPlanUnplannedFailoverInputProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecoveryPlanUnplannedFailoverInputProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecoveryPlanUnplannedFailoverInputProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecoveryPlanUnplannedFailoverInputProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RecoveryPlanUnplannedFailoverInputProperties>() {
           @Override
           public void write(JsonWriter out, RecoveryPlanUnplannedFailoverInputProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecoveryPlanUnplannedFailoverInputProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecoveryPlanUnplannedFailoverInputProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecoveryPlanUnplannedFailoverInputProperties
   * @throws IOException if the JSON string is invalid with respect to RecoveryPlanUnplannedFailoverInputProperties
   */
  public static RecoveryPlanUnplannedFailoverInputProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecoveryPlanUnplannedFailoverInputProperties.class);
  }

  /**
   * Convert an instance of RecoveryPlanUnplannedFailoverInputProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

