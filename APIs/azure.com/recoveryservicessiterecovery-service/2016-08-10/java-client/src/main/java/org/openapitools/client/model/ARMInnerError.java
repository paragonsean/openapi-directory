/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MethodCallStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ARM internal error class for providing additional debug data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ARMInnerError {
  public static final String SERIALIZED_NAME_CLOUD_ID = "cloudId";
  @SerializedName(SERIALIZED_NAME_CLOUD_ID)
  private String cloudId;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_FABRIC_ID = "fabricId";
  @SerializedName(SERIALIZED_NAME_FABRIC_ID)
  private String fabricId;

  public static final String SERIALIZED_NAME_H_V_CLUSTER_ID = "hVClusterId";
  @SerializedName(SERIALIZED_NAME_H_V_CLUSTER_ID)
  private String hVClusterId;

  public static final String SERIALIZED_NAME_H_V_HOST_ID = "hVHostId";
  @SerializedName(SERIALIZED_NAME_H_V_HOST_ID)
  private String hVHostId;

  public static final String SERIALIZED_NAME_LIVE_ID = "liveId";
  @SerializedName(SERIALIZED_NAME_LIVE_ID)
  private String liveId;

  public static final String SERIALIZED_NAME_METHOD_STATUS = "methodStatus";
  @SerializedName(SERIALIZED_NAME_METHOD_STATUS)
  private MethodCallStatus methodStatus;

  public static final String SERIALIZED_NAME_NETWORK_ID = "networkId";
  @SerializedName(SERIALIZED_NAME_NETWORK_ID)
  private String networkId;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public static final String SERIALIZED_NAME_SERIALIZED_S_R_S_LOG_CONTEXT = "serializedSRSLogContext";
  @SerializedName(SERIALIZED_NAME_SERIALIZED_S_R_S_LOG_CONTEXT)
  private String serializedSRSLogContext;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TRACE = "trace";
  @SerializedName(SERIALIZED_NAME_TRACE)
  private String trace;

  public static final String SERIALIZED_NAME_VM_ID = "vmId";
  @SerializedName(SERIALIZED_NAME_VM_ID)
  private String vmId;

  public ARMInnerError() {
  }

  public ARMInnerError cloudId(String cloudId) {
    this.cloudId = cloudId;
    return this;
  }

  /**
   * Gets cloud Id in exception.
   * @return cloudId
   */
  @javax.annotation.Nullable
  public String getCloudId() {
    return cloudId;
  }

  public void setCloudId(String cloudId) {
    this.cloudId = cloudId;
  }


  public ARMInnerError containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * Gets container Id of the caller.
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public ARMInnerError fabricId(String fabricId) {
    this.fabricId = fabricId;
    return this;
  }

  /**
   * Gets Fabric Id.
   * @return fabricId
   */
  @javax.annotation.Nullable
  public String getFabricId() {
    return fabricId;
  }

  public void setFabricId(String fabricId) {
    this.fabricId = fabricId;
  }


  public ARMInnerError hVClusterId(String hVClusterId) {
    this.hVClusterId = hVClusterId;
    return this;
  }

  /**
   * Gets hyperV cluster Id.
   * @return hVClusterId
   */
  @javax.annotation.Nullable
  public String gethVClusterId() {
    return hVClusterId;
  }

  public void sethVClusterId(String hVClusterId) {
    this.hVClusterId = hVClusterId;
  }


  public ARMInnerError hVHostId(String hVHostId) {
    this.hVHostId = hVHostId;
    return this;
  }

  /**
   * Gets hyperV host ID.
   * @return hVHostId
   */
  @javax.annotation.Nullable
  public String gethVHostId() {
    return hVHostId;
  }

  public void sethVHostId(String hVHostId) {
    this.hVHostId = hVHostId;
  }


  public ARMInnerError liveId(String liveId) {
    this.liveId = liveId;
    return this;
  }

  /**
   * Gets Live Id of the caller.
   * @return liveId
   */
  @javax.annotation.Nullable
  public String getLiveId() {
    return liveId;
  }

  public void setLiveId(String liveId) {
    this.liveId = liveId;
  }


  public ARMInnerError methodStatus(MethodCallStatus methodStatus) {
    this.methodStatus = methodStatus;
    return this;
  }

  /**
   * Get methodStatus
   * @return methodStatus
   */
  @javax.annotation.Nullable
  public MethodCallStatus getMethodStatus() {
    return methodStatus;
  }

  public void setMethodStatus(MethodCallStatus methodStatus) {
    this.methodStatus = methodStatus;
  }


  public ARMInnerError networkId(String networkId) {
    this.networkId = networkId;
    return this;
  }

  /**
   * Gets network Id.
   * @return networkId
   */
  @javax.annotation.Nullable
  public String getNetworkId() {
    return networkId;
  }

  public void setNetworkId(String networkId) {
    this.networkId = networkId;
  }


  public ARMInnerError resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Gets resource id used in the call.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public ARMInnerError resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Gets caller resource name.
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public ARMInnerError serializedSRSLogContext(String serializedSRSLogContext) {
    this.serializedSRSLogContext = serializedSRSLogContext;
    return this;
  }

  /**
   * Gets serialized SRS log context.
   * @return serializedSRSLogContext
   */
  @javax.annotation.Nullable
  public String getSerializedSRSLogContext() {
    return serializedSRSLogContext;
  }

  public void setSerializedSRSLogContext(String serializedSRSLogContext) {
    this.serializedSRSLogContext = serializedSRSLogContext;
  }


  public ARMInnerError source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Gets exception source.
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public ARMInnerError subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Gets subscription Id.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public ARMInnerError trace(String trace) {
    this.trace = trace;
    return this;
  }

  /**
   * Gets complete stack trace of the exception.
   * @return trace
   */
  @javax.annotation.Nullable
  public String getTrace() {
    return trace;
  }

  public void setTrace(String trace) {
    this.trace = trace;
  }


  public ARMInnerError vmId(String vmId) {
    this.vmId = vmId;
    return this;
  }

  /**
   * Gets Vm Id.
   * @return vmId
   */
  @javax.annotation.Nullable
  public String getVmId() {
    return vmId;
  }

  public void setVmId(String vmId) {
    this.vmId = vmId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ARMInnerError arMInnerError = (ARMInnerError) o;
    return Objects.equals(this.cloudId, arMInnerError.cloudId) &&
        Objects.equals(this.containerId, arMInnerError.containerId) &&
        Objects.equals(this.fabricId, arMInnerError.fabricId) &&
        Objects.equals(this.hVClusterId, arMInnerError.hVClusterId) &&
        Objects.equals(this.hVHostId, arMInnerError.hVHostId) &&
        Objects.equals(this.liveId, arMInnerError.liveId) &&
        Objects.equals(this.methodStatus, arMInnerError.methodStatus) &&
        Objects.equals(this.networkId, arMInnerError.networkId) &&
        Objects.equals(this.resourceId, arMInnerError.resourceId) &&
        Objects.equals(this.resourceName, arMInnerError.resourceName) &&
        Objects.equals(this.serializedSRSLogContext, arMInnerError.serializedSRSLogContext) &&
        Objects.equals(this.source, arMInnerError.source) &&
        Objects.equals(this.subscriptionId, arMInnerError.subscriptionId) &&
        Objects.equals(this.trace, arMInnerError.trace) &&
        Objects.equals(this.vmId, arMInnerError.vmId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudId, containerId, fabricId, hVClusterId, hVHostId, liveId, methodStatus, networkId, resourceId, resourceName, serializedSRSLogContext, source, subscriptionId, trace, vmId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ARMInnerError {\n");
    sb.append("    cloudId: ").append(toIndentedString(cloudId)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    fabricId: ").append(toIndentedString(fabricId)).append("\n");
    sb.append("    hVClusterId: ").append(toIndentedString(hVClusterId)).append("\n");
    sb.append("    hVHostId: ").append(toIndentedString(hVHostId)).append("\n");
    sb.append("    liveId: ").append(toIndentedString(liveId)).append("\n");
    sb.append("    methodStatus: ").append(toIndentedString(methodStatus)).append("\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    serializedSRSLogContext: ").append(toIndentedString(serializedSRSLogContext)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    trace: ").append(toIndentedString(trace)).append("\n");
    sb.append("    vmId: ").append(toIndentedString(vmId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudId");
    openapiFields.add("containerId");
    openapiFields.add("fabricId");
    openapiFields.add("hVClusterId");
    openapiFields.add("hVHostId");
    openapiFields.add("liveId");
    openapiFields.add("methodStatus");
    openapiFields.add("networkId");
    openapiFields.add("resourceId");
    openapiFields.add("resourceName");
    openapiFields.add("serializedSRSLogContext");
    openapiFields.add("source");
    openapiFields.add("subscriptionId");
    openapiFields.add("trace");
    openapiFields.add("vmId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ARMInnerError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ARMInnerError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ARMInnerError is not found in the empty JSON string", ARMInnerError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ARMInnerError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ARMInnerError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cloudId") != null && !jsonObj.get("cloudId").isJsonNull()) && !jsonObj.get("cloudId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudId").toString()));
      }
      if ((jsonObj.get("containerId") != null && !jsonObj.get("containerId").isJsonNull()) && !jsonObj.get("containerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerId").toString()));
      }
      if ((jsonObj.get("fabricId") != null && !jsonObj.get("fabricId").isJsonNull()) && !jsonObj.get("fabricId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fabricId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fabricId").toString()));
      }
      if ((jsonObj.get("hVClusterId") != null && !jsonObj.get("hVClusterId").isJsonNull()) && !jsonObj.get("hVClusterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hVClusterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hVClusterId").toString()));
      }
      if ((jsonObj.get("hVHostId") != null && !jsonObj.get("hVHostId").isJsonNull()) && !jsonObj.get("hVHostId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hVHostId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hVHostId").toString()));
      }
      if ((jsonObj.get("liveId") != null && !jsonObj.get("liveId").isJsonNull()) && !jsonObj.get("liveId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liveId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liveId").toString()));
      }
      // validate the optional field `methodStatus`
      if (jsonObj.get("methodStatus") != null && !jsonObj.get("methodStatus").isJsonNull()) {
        MethodCallStatus.validateJsonElement(jsonObj.get("methodStatus"));
      }
      if ((jsonObj.get("networkId") != null && !jsonObj.get("networkId").isJsonNull()) && !jsonObj.get("networkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkId").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
      if ((jsonObj.get("serializedSRSLogContext") != null && !jsonObj.get("serializedSRSLogContext").isJsonNull()) && !jsonObj.get("serializedSRSLogContext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serializedSRSLogContext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serializedSRSLogContext").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("trace") != null && !jsonObj.get("trace").isJsonNull()) && !jsonObj.get("trace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trace").toString()));
      }
      if ((jsonObj.get("vmId") != null && !jsonObj.get("vmId").isJsonNull()) && !jsonObj.get("vmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ARMInnerError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ARMInnerError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ARMInnerError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ARMInnerError.class));

       return (TypeAdapter<T>) new TypeAdapter<ARMInnerError>() {
           @Override
           public void write(JsonWriter out, ARMInnerError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ARMInnerError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ARMInnerError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ARMInnerError
   * @throws IOException if the JSON string is invalid with respect to ARMInnerError
   */
  public static ARMInnerError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ARMInnerError.class);
  }

  /**
   * Convert an instance of ARMInnerError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

