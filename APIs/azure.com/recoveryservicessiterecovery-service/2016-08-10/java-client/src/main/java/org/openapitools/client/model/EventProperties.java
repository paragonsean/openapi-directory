/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventProviderSpecificDetails;
import org.openapitools.client.model.EventSpecificDetails;
import org.openapitools.client.model.HealthError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a monitoring event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventProperties {
  public static final String SERIALIZED_NAME_AFFECTED_OBJECT_FRIENDLY_NAME = "affectedObjectFriendlyName";
  @SerializedName(SERIALIZED_NAME_AFFECTED_OBJECT_FRIENDLY_NAME)
  private String affectedObjectFriendlyName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_CODE = "eventCode";
  @SerializedName(SERIALIZED_NAME_EVENT_CODE)
  private String eventCode;

  public static final String SERIALIZED_NAME_EVENT_SPECIFIC_DETAILS = "eventSpecificDetails";
  @SerializedName(SERIALIZED_NAME_EVENT_SPECIFIC_DETAILS)
  private EventSpecificDetails eventSpecificDetails;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_FABRIC_ID = "fabricId";
  @SerializedName(SERIALIZED_NAME_FABRIC_ID)
  private String fabricId;

  public static final String SERIALIZED_NAME_HEALTH_ERRORS = "healthErrors";
  @SerializedName(SERIALIZED_NAME_HEALTH_ERRORS)
  private List<HealthError> healthErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER_SPECIFIC_DETAILS = "providerSpecificDetails";
  @SerializedName(SERIALIZED_NAME_PROVIDER_SPECIFIC_DETAILS)
  private EventProviderSpecificDetails providerSpecificDetails;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public static final String SERIALIZED_NAME_TIME_OF_OCCURRENCE = "timeOfOccurrence";
  @SerializedName(SERIALIZED_NAME_TIME_OF_OCCURRENCE)
  private OffsetDateTime timeOfOccurrence;

  public EventProperties() {
  }

  public EventProperties affectedObjectFriendlyName(String affectedObjectFriendlyName) {
    this.affectedObjectFriendlyName = affectedObjectFriendlyName;
    return this;
  }

  /**
   * The friendly name of the source of the event on which it is raised (for example, VM, VMM etc).
   * @return affectedObjectFriendlyName
   */
  @javax.annotation.Nullable
  public String getAffectedObjectFriendlyName() {
    return affectedObjectFriendlyName;
  }

  public void setAffectedObjectFriendlyName(String affectedObjectFriendlyName) {
    this.affectedObjectFriendlyName = affectedObjectFriendlyName;
  }


  public EventProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The event name.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EventProperties eventCode(String eventCode) {
    this.eventCode = eventCode;
    return this;
  }

  /**
   * The Id of the monitoring event.
   * @return eventCode
   */
  @javax.annotation.Nullable
  public String getEventCode() {
    return eventCode;
  }

  public void setEventCode(String eventCode) {
    this.eventCode = eventCode;
  }


  public EventProperties eventSpecificDetails(EventSpecificDetails eventSpecificDetails) {
    this.eventSpecificDetails = eventSpecificDetails;
    return this;
  }

  /**
   * Get eventSpecificDetails
   * @return eventSpecificDetails
   */
  @javax.annotation.Nullable
  public EventSpecificDetails getEventSpecificDetails() {
    return eventSpecificDetails;
  }

  public void setEventSpecificDetails(EventSpecificDetails eventSpecificDetails) {
    this.eventSpecificDetails = eventSpecificDetails;
  }


  public EventProperties eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The type of the event. for example: VM Health, Server Health, Job Failure etc.
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public EventProperties fabricId(String fabricId) {
    this.fabricId = fabricId;
    return this;
  }

  /**
   * The ARM ID of the fabric.
   * @return fabricId
   */
  @javax.annotation.Nullable
  public String getFabricId() {
    return fabricId;
  }

  public void setFabricId(String fabricId) {
    this.fabricId = fabricId;
  }


  public EventProperties healthErrors(List<HealthError> healthErrors) {
    this.healthErrors = healthErrors;
    return this;
  }

  public EventProperties addHealthErrorsItem(HealthError healthErrorsItem) {
    if (this.healthErrors == null) {
      this.healthErrors = new ArrayList<>();
    }
    this.healthErrors.add(healthErrorsItem);
    return this;
  }

  /**
   * The list of errors / warnings capturing details associated with the issue(s).
   * @return healthErrors
   */
  @javax.annotation.Nullable
  public List<HealthError> getHealthErrors() {
    return healthErrors;
  }

  public void setHealthErrors(List<HealthError> healthErrors) {
    this.healthErrors = healthErrors;
  }


  public EventProperties providerSpecificDetails(EventProviderSpecificDetails providerSpecificDetails) {
    this.providerSpecificDetails = providerSpecificDetails;
    return this;
  }

  /**
   * Get providerSpecificDetails
   * @return providerSpecificDetails
   */
  @javax.annotation.Nullable
  public EventProviderSpecificDetails getProviderSpecificDetails() {
    return providerSpecificDetails;
  }

  public void setProviderSpecificDetails(EventProviderSpecificDetails providerSpecificDetails) {
    this.providerSpecificDetails = providerSpecificDetails;
  }


  public EventProperties severity(String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * The severity of the event.
   * @return severity
   */
  @javax.annotation.Nullable
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public EventProperties timeOfOccurrence(OffsetDateTime timeOfOccurrence) {
    this.timeOfOccurrence = timeOfOccurrence;
    return this;
  }

  /**
   * The time of occurrence of the event.
   * @return timeOfOccurrence
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeOfOccurrence() {
    return timeOfOccurrence;
  }

  public void setTimeOfOccurrence(OffsetDateTime timeOfOccurrence) {
    this.timeOfOccurrence = timeOfOccurrence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventProperties eventProperties = (EventProperties) o;
    return Objects.equals(this.affectedObjectFriendlyName, eventProperties.affectedObjectFriendlyName) &&
        Objects.equals(this.description, eventProperties.description) &&
        Objects.equals(this.eventCode, eventProperties.eventCode) &&
        Objects.equals(this.eventSpecificDetails, eventProperties.eventSpecificDetails) &&
        Objects.equals(this.eventType, eventProperties.eventType) &&
        Objects.equals(this.fabricId, eventProperties.fabricId) &&
        Objects.equals(this.healthErrors, eventProperties.healthErrors) &&
        Objects.equals(this.providerSpecificDetails, eventProperties.providerSpecificDetails) &&
        Objects.equals(this.severity, eventProperties.severity) &&
        Objects.equals(this.timeOfOccurrence, eventProperties.timeOfOccurrence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedObjectFriendlyName, description, eventCode, eventSpecificDetails, eventType, fabricId, healthErrors, providerSpecificDetails, severity, timeOfOccurrence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventProperties {\n");
    sb.append("    affectedObjectFriendlyName: ").append(toIndentedString(affectedObjectFriendlyName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventCode: ").append(toIndentedString(eventCode)).append("\n");
    sb.append("    eventSpecificDetails: ").append(toIndentedString(eventSpecificDetails)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    fabricId: ").append(toIndentedString(fabricId)).append("\n");
    sb.append("    healthErrors: ").append(toIndentedString(healthErrors)).append("\n");
    sb.append("    providerSpecificDetails: ").append(toIndentedString(providerSpecificDetails)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    timeOfOccurrence: ").append(toIndentedString(timeOfOccurrence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affectedObjectFriendlyName");
    openapiFields.add("description");
    openapiFields.add("eventCode");
    openapiFields.add("eventSpecificDetails");
    openapiFields.add("eventType");
    openapiFields.add("fabricId");
    openapiFields.add("healthErrors");
    openapiFields.add("providerSpecificDetails");
    openapiFields.add("severity");
    openapiFields.add("timeOfOccurrence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventProperties is not found in the empty JSON string", EventProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("affectedObjectFriendlyName") != null && !jsonObj.get("affectedObjectFriendlyName").isJsonNull()) && !jsonObj.get("affectedObjectFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affectedObjectFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affectedObjectFriendlyName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("eventCode") != null && !jsonObj.get("eventCode").isJsonNull()) && !jsonObj.get("eventCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventCode").toString()));
      }
      // validate the optional field `eventSpecificDetails`
      if (jsonObj.get("eventSpecificDetails") != null && !jsonObj.get("eventSpecificDetails").isJsonNull()) {
        EventSpecificDetails.validateJsonElement(jsonObj.get("eventSpecificDetails"));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if ((jsonObj.get("fabricId") != null && !jsonObj.get("fabricId").isJsonNull()) && !jsonObj.get("fabricId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fabricId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fabricId").toString()));
      }
      if (jsonObj.get("healthErrors") != null && !jsonObj.get("healthErrors").isJsonNull()) {
        JsonArray jsonArrayhealthErrors = jsonObj.getAsJsonArray("healthErrors");
        if (jsonArrayhealthErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("healthErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `healthErrors` to be an array in the JSON string but got `%s`", jsonObj.get("healthErrors").toString()));
          }

          // validate the optional field `healthErrors` (array)
          for (int i = 0; i < jsonArrayhealthErrors.size(); i++) {
            HealthError.validateJsonElement(jsonArrayhealthErrors.get(i));
          };
        }
      }
      // validate the optional field `providerSpecificDetails`
      if (jsonObj.get("providerSpecificDetails") != null && !jsonObj.get("providerSpecificDetails").isJsonNull()) {
        EventProviderSpecificDetails.validateJsonElement(jsonObj.get("providerSpecificDetails"));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<EventProperties>() {
           @Override
           public void write(JsonWriter out, EventProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventProperties
   * @throws IOException if the JSON string is invalid with respect to EventProperties
   */
  public static EventProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventProperties.class);
  }

  /**
   * Convert an instance of EventProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

