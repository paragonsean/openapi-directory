/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProviderSpecificFailoverInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provider specific input for InMage failover.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InMageFailoverProviderInput extends ProviderSpecificFailoverInput {
  public static final String SERIALIZED_NAME_RECOVERY_POINT_ID = "recoveryPointId";
  @SerializedName(SERIALIZED_NAME_RECOVERY_POINT_ID)
  private String recoveryPointId;

  /**
   * The recovery point type. Values from LatestTime, LatestTag or Custom. In the case of custom, the recovery point provided by RecoveryPointId will be used. In the other two cases, recovery point id will be ignored.
   */
  @JsonAdapter(RecoveryPointTypeEnum.Adapter.class)
  public enum RecoveryPointTypeEnum {
    LATEST_TIME("LatestTime"),
    
    LATEST_TAG("LatestTag"),
    
    CUSTOM("Custom");

    private String value;

    RecoveryPointTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecoveryPointTypeEnum fromValue(String value) {
      for (RecoveryPointTypeEnum b : RecoveryPointTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecoveryPointTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecoveryPointTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecoveryPointTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecoveryPointTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecoveryPointTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECOVERY_POINT_TYPE = "recoveryPointType";
  @SerializedName(SERIALIZED_NAME_RECOVERY_POINT_TYPE)
  private RecoveryPointTypeEnum recoveryPointType;

  public InMageFailoverProviderInput() {
    this.instanceType = this.getClass().getSimpleName();
  }

  public InMageFailoverProviderInput recoveryPointId(String recoveryPointId) {
    this.recoveryPointId = recoveryPointId;
    return this;
  }

  /**
   * The recovery point id to be passed to failover to a particular recovery point. In case of latest recovery point, null should be passed.
   * @return recoveryPointId
   */
  @javax.annotation.Nullable
  public String getRecoveryPointId() {
    return recoveryPointId;
  }

  public void setRecoveryPointId(String recoveryPointId) {
    this.recoveryPointId = recoveryPointId;
  }


  public InMageFailoverProviderInput recoveryPointType(RecoveryPointTypeEnum recoveryPointType) {
    this.recoveryPointType = recoveryPointType;
    return this;
  }

  /**
   * The recovery point type. Values from LatestTime, LatestTag or Custom. In the case of custom, the recovery point provided by RecoveryPointId will be used. In the other two cases, recovery point id will be ignored.
   * @return recoveryPointType
   */
  @javax.annotation.Nullable
  public RecoveryPointTypeEnum getRecoveryPointType() {
    return recoveryPointType;
  }

  public void setRecoveryPointType(RecoveryPointTypeEnum recoveryPointType) {
    this.recoveryPointType = recoveryPointType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InMageFailoverProviderInput inMageFailoverProviderInput = (InMageFailoverProviderInput) o;
    return Objects.equals(this.recoveryPointId, inMageFailoverProviderInput.recoveryPointId) &&
        Objects.equals(this.recoveryPointType, inMageFailoverProviderInput.recoveryPointType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recoveryPointId, recoveryPointType, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InMageFailoverProviderInput {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    recoveryPointId: ").append(toIndentedString(recoveryPointId)).append("\n");
    sb.append("    recoveryPointType: ").append(toIndentedString(recoveryPointType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InMageFailoverProviderInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InMageFailoverProviderInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InMageFailoverProviderInput is not found in the empty JSON string", InMageFailoverProviderInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InMageFailoverProviderInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InMageFailoverProviderInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InMageFailoverProviderInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InMageFailoverProviderInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InMageFailoverProviderInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InMageFailoverProviderInput.class));

       return (TypeAdapter<T>) new TypeAdapter<InMageFailoverProviderInput>() {
           @Override
           public void write(JsonWriter out, InMageFailoverProviderInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InMageFailoverProviderInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InMageFailoverProviderInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InMageFailoverProviderInput
   * @throws IOException if the JSON string is invalid with respect to InMageFailoverProviderInput
   */
  public static InMageFailoverProviderInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InMageFailoverProviderInput.class);
  }

  /**
   * Convert an instance of InMageFailoverProviderInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

