/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HealthError;
import org.openapitools.client.model.IdentityInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Recovery services provider properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecoveryServicesProviderProperties {
  public static final String SERIALIZED_NAME_ALLOWED_SCENARIOS = "allowedScenarios";
  @SerializedName(SERIALIZED_NAME_ALLOWED_SCENARIOS)
  private List<String> allowedScenarios = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connectionStatus";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private String connectionStatus;

  public static final String SERIALIZED_NAME_DRA_IDENTIFIER = "draIdentifier";
  @SerializedName(SERIALIZED_NAME_DRA_IDENTIFIER)
  private String draIdentifier;

  public static final String SERIALIZED_NAME_FABRIC_FRIENDLY_NAME = "fabricFriendlyName";
  @SerializedName(SERIALIZED_NAME_FABRIC_FRIENDLY_NAME)
  private String fabricFriendlyName;

  public static final String SERIALIZED_NAME_FABRIC_TYPE = "fabricType";
  @SerializedName(SERIALIZED_NAME_FABRIC_TYPE)
  private String fabricType;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_HEALTH_ERROR_DETAILS = "healthErrorDetails";
  @SerializedName(SERIALIZED_NAME_HEALTH_ERROR_DETAILS)
  private List<HealthError> healthErrorDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTITY_DETAILS = "identityDetails";
  @SerializedName(SERIALIZED_NAME_IDENTITY_DETAILS)
  private IdentityInformation identityDetails;

  public static final String SERIALIZED_NAME_LAST_HEART_BEAT = "lastHeartBeat";
  @SerializedName(SERIALIZED_NAME_LAST_HEART_BEAT)
  private OffsetDateTime lastHeartBeat;

  public static final String SERIALIZED_NAME_PROTECTED_ITEM_COUNT = "protectedItemCount";
  @SerializedName(SERIALIZED_NAME_PROTECTED_ITEM_COUNT)
  private Integer protectedItemCount;

  public static final String SERIALIZED_NAME_PROVIDER_VERSION = "providerVersion";
  @SerializedName(SERIALIZED_NAME_PROVIDER_VERSION)
  private String providerVersion;

  public static final String SERIALIZED_NAME_PROVIDER_VERSION_EXPIRY_DATE = "providerVersionExpiryDate";
  @SerializedName(SERIALIZED_NAME_PROVIDER_VERSION_EXPIRY_DATE)
  private OffsetDateTime providerVersionExpiryDate;

  public static final String SERIALIZED_NAME_PROVIDER_VERSION_STATE = "providerVersionState";
  @SerializedName(SERIALIZED_NAME_PROVIDER_VERSION_STATE)
  private String providerVersionState;

  public static final String SERIALIZED_NAME_SERVER_VERSION = "serverVersion";
  @SerializedName(SERIALIZED_NAME_SERVER_VERSION)
  private String serverVersion;

  public RecoveryServicesProviderProperties() {
  }

  public RecoveryServicesProviderProperties allowedScenarios(List<String> allowedScenarios) {
    this.allowedScenarios = allowedScenarios;
    return this;
  }

  public RecoveryServicesProviderProperties addAllowedScenariosItem(String allowedScenariosItem) {
    if (this.allowedScenarios == null) {
      this.allowedScenarios = new ArrayList<>();
    }
    this.allowedScenarios.add(allowedScenariosItem);
    return this;
  }

  /**
   * The scenarios allowed on this provider.
   * @return allowedScenarios
   */
  @javax.annotation.Nullable
  public List<String> getAllowedScenarios() {
    return allowedScenarios;
  }

  public void setAllowedScenarios(List<String> allowedScenarios) {
    this.allowedScenarios = allowedScenarios;
  }


  public RecoveryServicesProviderProperties connectionStatus(String connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

  /**
   * A value indicating whether DRA is responsive.
   * @return connectionStatus
   */
  @javax.annotation.Nullable
  public String getConnectionStatus() {
    return connectionStatus;
  }

  public void setConnectionStatus(String connectionStatus) {
    this.connectionStatus = connectionStatus;
  }


  public RecoveryServicesProviderProperties draIdentifier(String draIdentifier) {
    this.draIdentifier = draIdentifier;
    return this;
  }

  /**
   * The DRA Id.
   * @return draIdentifier
   */
  @javax.annotation.Nullable
  public String getDraIdentifier() {
    return draIdentifier;
  }

  public void setDraIdentifier(String draIdentifier) {
    this.draIdentifier = draIdentifier;
  }


  public RecoveryServicesProviderProperties fabricFriendlyName(String fabricFriendlyName) {
    this.fabricFriendlyName = fabricFriendlyName;
    return this;
  }

  /**
   * The fabric friendly name.
   * @return fabricFriendlyName
   */
  @javax.annotation.Nullable
  public String getFabricFriendlyName() {
    return fabricFriendlyName;
  }

  public void setFabricFriendlyName(String fabricFriendlyName) {
    this.fabricFriendlyName = fabricFriendlyName;
  }


  public RecoveryServicesProviderProperties fabricType(String fabricType) {
    this.fabricType = fabricType;
    return this;
  }

  /**
   * Type of the site.
   * @return fabricType
   */
  @javax.annotation.Nullable
  public String getFabricType() {
    return fabricType;
  }

  public void setFabricType(String fabricType) {
    this.fabricType = fabricType;
  }


  public RecoveryServicesProviderProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Friendly name of the DRA.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public RecoveryServicesProviderProperties healthErrorDetails(List<HealthError> healthErrorDetails) {
    this.healthErrorDetails = healthErrorDetails;
    return this;
  }

  public RecoveryServicesProviderProperties addHealthErrorDetailsItem(HealthError healthErrorDetailsItem) {
    if (this.healthErrorDetails == null) {
      this.healthErrorDetails = new ArrayList<>();
    }
    this.healthErrorDetails.add(healthErrorDetailsItem);
    return this;
  }

  /**
   * The recovery services provider health error details.
   * @return healthErrorDetails
   */
  @javax.annotation.Nullable
  public List<HealthError> getHealthErrorDetails() {
    return healthErrorDetails;
  }

  public void setHealthErrorDetails(List<HealthError> healthErrorDetails) {
    this.healthErrorDetails = healthErrorDetails;
  }


  public RecoveryServicesProviderProperties identityDetails(IdentityInformation identityDetails) {
    this.identityDetails = identityDetails;
    return this;
  }

  /**
   * Get identityDetails
   * @return identityDetails
   */
  @javax.annotation.Nullable
  public IdentityInformation getIdentityDetails() {
    return identityDetails;
  }

  public void setIdentityDetails(IdentityInformation identityDetails) {
    this.identityDetails = identityDetails;
  }


  public RecoveryServicesProviderProperties lastHeartBeat(OffsetDateTime lastHeartBeat) {
    this.lastHeartBeat = lastHeartBeat;
    return this;
  }

  /**
   * Time when last heartbeat was sent by the DRA.
   * @return lastHeartBeat
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastHeartBeat() {
    return lastHeartBeat;
  }

  public void setLastHeartBeat(OffsetDateTime lastHeartBeat) {
    this.lastHeartBeat = lastHeartBeat;
  }


  public RecoveryServicesProviderProperties protectedItemCount(Integer protectedItemCount) {
    this.protectedItemCount = protectedItemCount;
    return this;
  }

  /**
   * Number of protected VMs currently managed by the DRA.
   * @return protectedItemCount
   */
  @javax.annotation.Nullable
  public Integer getProtectedItemCount() {
    return protectedItemCount;
  }

  public void setProtectedItemCount(Integer protectedItemCount) {
    this.protectedItemCount = protectedItemCount;
  }


  public RecoveryServicesProviderProperties providerVersion(String providerVersion) {
    this.providerVersion = providerVersion;
    return this;
  }

  /**
   * The provider version.
   * @return providerVersion
   */
  @javax.annotation.Nullable
  public String getProviderVersion() {
    return providerVersion;
  }

  public void setProviderVersion(String providerVersion) {
    this.providerVersion = providerVersion;
  }


  public RecoveryServicesProviderProperties providerVersionExpiryDate(OffsetDateTime providerVersionExpiryDate) {
    this.providerVersionExpiryDate = providerVersionExpiryDate;
    return this;
  }

  /**
   * Expiry date if the version is deprecated.
   * @return providerVersionExpiryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProviderVersionExpiryDate() {
    return providerVersionExpiryDate;
  }

  public void setProviderVersionExpiryDate(OffsetDateTime providerVersionExpiryDate) {
    this.providerVersionExpiryDate = providerVersionExpiryDate;
  }


  public RecoveryServicesProviderProperties providerVersionState(String providerVersionState) {
    this.providerVersionState = providerVersionState;
    return this;
  }

  /**
   * DRA version status.
   * @return providerVersionState
   */
  @javax.annotation.Nullable
  public String getProviderVersionState() {
    return providerVersionState;
  }

  public void setProviderVersionState(String providerVersionState) {
    this.providerVersionState = providerVersionState;
  }


  public RecoveryServicesProviderProperties serverVersion(String serverVersion) {
    this.serverVersion = serverVersion;
    return this;
  }

  /**
   * The fabric provider.
   * @return serverVersion
   */
  @javax.annotation.Nullable
  public String getServerVersion() {
    return serverVersion;
  }

  public void setServerVersion(String serverVersion) {
    this.serverVersion = serverVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecoveryServicesProviderProperties recoveryServicesProviderProperties = (RecoveryServicesProviderProperties) o;
    return Objects.equals(this.allowedScenarios, recoveryServicesProviderProperties.allowedScenarios) &&
        Objects.equals(this.connectionStatus, recoveryServicesProviderProperties.connectionStatus) &&
        Objects.equals(this.draIdentifier, recoveryServicesProviderProperties.draIdentifier) &&
        Objects.equals(this.fabricFriendlyName, recoveryServicesProviderProperties.fabricFriendlyName) &&
        Objects.equals(this.fabricType, recoveryServicesProviderProperties.fabricType) &&
        Objects.equals(this.friendlyName, recoveryServicesProviderProperties.friendlyName) &&
        Objects.equals(this.healthErrorDetails, recoveryServicesProviderProperties.healthErrorDetails) &&
        Objects.equals(this.identityDetails, recoveryServicesProviderProperties.identityDetails) &&
        Objects.equals(this.lastHeartBeat, recoveryServicesProviderProperties.lastHeartBeat) &&
        Objects.equals(this.protectedItemCount, recoveryServicesProviderProperties.protectedItemCount) &&
        Objects.equals(this.providerVersion, recoveryServicesProviderProperties.providerVersion) &&
        Objects.equals(this.providerVersionExpiryDate, recoveryServicesProviderProperties.providerVersionExpiryDate) &&
        Objects.equals(this.providerVersionState, recoveryServicesProviderProperties.providerVersionState) &&
        Objects.equals(this.serverVersion, recoveryServicesProviderProperties.serverVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedScenarios, connectionStatus, draIdentifier, fabricFriendlyName, fabricType, friendlyName, healthErrorDetails, identityDetails, lastHeartBeat, protectedItemCount, providerVersion, providerVersionExpiryDate, providerVersionState, serverVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecoveryServicesProviderProperties {\n");
    sb.append("    allowedScenarios: ").append(toIndentedString(allowedScenarios)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    draIdentifier: ").append(toIndentedString(draIdentifier)).append("\n");
    sb.append("    fabricFriendlyName: ").append(toIndentedString(fabricFriendlyName)).append("\n");
    sb.append("    fabricType: ").append(toIndentedString(fabricType)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    healthErrorDetails: ").append(toIndentedString(healthErrorDetails)).append("\n");
    sb.append("    identityDetails: ").append(toIndentedString(identityDetails)).append("\n");
    sb.append("    lastHeartBeat: ").append(toIndentedString(lastHeartBeat)).append("\n");
    sb.append("    protectedItemCount: ").append(toIndentedString(protectedItemCount)).append("\n");
    sb.append("    providerVersion: ").append(toIndentedString(providerVersion)).append("\n");
    sb.append("    providerVersionExpiryDate: ").append(toIndentedString(providerVersionExpiryDate)).append("\n");
    sb.append("    providerVersionState: ").append(toIndentedString(providerVersionState)).append("\n");
    sb.append("    serverVersion: ").append(toIndentedString(serverVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedScenarios");
    openapiFields.add("connectionStatus");
    openapiFields.add("draIdentifier");
    openapiFields.add("fabricFriendlyName");
    openapiFields.add("fabricType");
    openapiFields.add("friendlyName");
    openapiFields.add("healthErrorDetails");
    openapiFields.add("identityDetails");
    openapiFields.add("lastHeartBeat");
    openapiFields.add("protectedItemCount");
    openapiFields.add("providerVersion");
    openapiFields.add("providerVersionExpiryDate");
    openapiFields.add("providerVersionState");
    openapiFields.add("serverVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecoveryServicesProviderProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecoveryServicesProviderProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecoveryServicesProviderProperties is not found in the empty JSON string", RecoveryServicesProviderProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecoveryServicesProviderProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecoveryServicesProviderProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedScenarios") != null && !jsonObj.get("allowedScenarios").isJsonNull() && !jsonObj.get("allowedScenarios").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedScenarios` to be an array in the JSON string but got `%s`", jsonObj.get("allowedScenarios").toString()));
      }
      if ((jsonObj.get("connectionStatus") != null && !jsonObj.get("connectionStatus").isJsonNull()) && !jsonObj.get("connectionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionStatus").toString()));
      }
      if ((jsonObj.get("draIdentifier") != null && !jsonObj.get("draIdentifier").isJsonNull()) && !jsonObj.get("draIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `draIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("draIdentifier").toString()));
      }
      if ((jsonObj.get("fabricFriendlyName") != null && !jsonObj.get("fabricFriendlyName").isJsonNull()) && !jsonObj.get("fabricFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fabricFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fabricFriendlyName").toString()));
      }
      if ((jsonObj.get("fabricType") != null && !jsonObj.get("fabricType").isJsonNull()) && !jsonObj.get("fabricType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fabricType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fabricType").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if (jsonObj.get("healthErrorDetails") != null && !jsonObj.get("healthErrorDetails").isJsonNull()) {
        JsonArray jsonArrayhealthErrorDetails = jsonObj.getAsJsonArray("healthErrorDetails");
        if (jsonArrayhealthErrorDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("healthErrorDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `healthErrorDetails` to be an array in the JSON string but got `%s`", jsonObj.get("healthErrorDetails").toString()));
          }

          // validate the optional field `healthErrorDetails` (array)
          for (int i = 0; i < jsonArrayhealthErrorDetails.size(); i++) {
            HealthError.validateJsonElement(jsonArrayhealthErrorDetails.get(i));
          };
        }
      }
      // validate the optional field `identityDetails`
      if (jsonObj.get("identityDetails") != null && !jsonObj.get("identityDetails").isJsonNull()) {
        IdentityInformation.validateJsonElement(jsonObj.get("identityDetails"));
      }
      if ((jsonObj.get("providerVersion") != null && !jsonObj.get("providerVersion").isJsonNull()) && !jsonObj.get("providerVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerVersion").toString()));
      }
      if ((jsonObj.get("providerVersionState") != null && !jsonObj.get("providerVersionState").isJsonNull()) && !jsonObj.get("providerVersionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerVersionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerVersionState").toString()));
      }
      if ((jsonObj.get("serverVersion") != null && !jsonObj.get("serverVersion").isJsonNull()) && !jsonObj.get("serverVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecoveryServicesProviderProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecoveryServicesProviderProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecoveryServicesProviderProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecoveryServicesProviderProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RecoveryServicesProviderProperties>() {
           @Override
           public void write(JsonWriter out, RecoveryServicesProviderProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecoveryServicesProviderProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecoveryServicesProviderProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecoveryServicesProviderProperties
   * @throws IOException if the JSON string is invalid with respect to RecoveryServicesProviderProperties
   */
  public static RecoveryServicesProviderProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecoveryServicesProviderProperties.class);
  }

  /**
   * Convert an instance of RecoveryServicesProviderProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

