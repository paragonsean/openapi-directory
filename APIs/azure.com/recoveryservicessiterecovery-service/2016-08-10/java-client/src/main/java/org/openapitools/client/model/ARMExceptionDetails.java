/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Service based exception details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ARMExceptionDetails {
  public static final String SERIALIZED_NAME_ACTIVITY_ID = "activityId";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_ID)
  private String activityId;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_ID = "clientRequestId";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_ID)
  private String clientRequestId;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_POSSIBLE_CAUSES = "possibleCauses";
  @SerializedName(SERIALIZED_NAME_POSSIBLE_CAUSES)
  private String possibleCauses;

  public static final String SERIALIZED_NAME_RECOMMENDED_ACTION = "recommendedAction";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_ACTION)
  private String recommendedAction;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public ARMExceptionDetails() {
  }

  public ARMExceptionDetails activityId(String activityId) {
    this.activityId = activityId;
    return this;
  }

  /**
   * Gets the activity Id for the session.
   * @return activityId
   */
  @javax.annotation.Nullable
  public String getActivityId() {
    return activityId;
  }

  public void setActivityId(String activityId) {
    this.activityId = activityId;
  }


  public ARMExceptionDetails clientRequestId(String clientRequestId) {
    this.clientRequestId = clientRequestId;
    return this;
  }

  /**
   * Gets the client request Id for the session.
   * @return clientRequestId
   */
  @javax.annotation.Nullable
  public String getClientRequestId() {
    return clientRequestId;
  }

  public void setClientRequestId(String clientRequestId) {
    this.clientRequestId = clientRequestId;
  }


  public ARMExceptionDetails code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Gets service error code.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public ARMExceptionDetails message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Gets error message.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ARMExceptionDetails possibleCauses(String possibleCauses) {
    this.possibleCauses = possibleCauses;
    return this;
  }

  /**
   * Gets possible cause for error.
   * @return possibleCauses
   */
  @javax.annotation.Nullable
  public String getPossibleCauses() {
    return possibleCauses;
  }

  public void setPossibleCauses(String possibleCauses) {
    this.possibleCauses = possibleCauses;
  }


  public ARMExceptionDetails recommendedAction(String recommendedAction) {
    this.recommendedAction = recommendedAction;
    return this;
  }

  /**
   * Gets recommended action for the error.
   * @return recommendedAction
   */
  @javax.annotation.Nullable
  public String getRecommendedAction() {
    return recommendedAction;
  }

  public void setRecommendedAction(String recommendedAction) {
    this.recommendedAction = recommendedAction;
  }


  public ARMExceptionDetails target(String target) {
    this.target = target;
    return this;
  }

  /**
   * Gets exception target.
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ARMExceptionDetails arMExceptionDetails = (ARMExceptionDetails) o;
    return Objects.equals(this.activityId, arMExceptionDetails.activityId) &&
        Objects.equals(this.clientRequestId, arMExceptionDetails.clientRequestId) &&
        Objects.equals(this.code, arMExceptionDetails.code) &&
        Objects.equals(this.message, arMExceptionDetails.message) &&
        Objects.equals(this.possibleCauses, arMExceptionDetails.possibleCauses) &&
        Objects.equals(this.recommendedAction, arMExceptionDetails.recommendedAction) &&
        Objects.equals(this.target, arMExceptionDetails.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityId, clientRequestId, code, message, possibleCauses, recommendedAction, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ARMExceptionDetails {\n");
    sb.append("    activityId: ").append(toIndentedString(activityId)).append("\n");
    sb.append("    clientRequestId: ").append(toIndentedString(clientRequestId)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    possibleCauses: ").append(toIndentedString(possibleCauses)).append("\n");
    sb.append("    recommendedAction: ").append(toIndentedString(recommendedAction)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityId");
    openapiFields.add("clientRequestId");
    openapiFields.add("code");
    openapiFields.add("message");
    openapiFields.add("possibleCauses");
    openapiFields.add("recommendedAction");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ARMExceptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ARMExceptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ARMExceptionDetails is not found in the empty JSON string", ARMExceptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ARMExceptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ARMExceptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activityId") != null && !jsonObj.get("activityId").isJsonNull()) && !jsonObj.get("activityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityId").toString()));
      }
      if ((jsonObj.get("clientRequestId") != null && !jsonObj.get("clientRequestId").isJsonNull()) && !jsonObj.get("clientRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientRequestId").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("possibleCauses") != null && !jsonObj.get("possibleCauses").isJsonNull()) && !jsonObj.get("possibleCauses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `possibleCauses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("possibleCauses").toString()));
      }
      if ((jsonObj.get("recommendedAction") != null && !jsonObj.get("recommendedAction").isJsonNull()) && !jsonObj.get("recommendedAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendedAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendedAction").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ARMExceptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ARMExceptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ARMExceptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ARMExceptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ARMExceptionDetails>() {
           @Override
           public void write(JsonWriter out, ARMExceptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ARMExceptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ARMExceptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ARMExceptionDetails
   * @throws IOException if the JSON string is invalid with respect to ARMExceptionDetails
   */
  public static ARMExceptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ARMExceptionDetails.class);
  }

  /**
   * Convert an instance of ARMExceptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

