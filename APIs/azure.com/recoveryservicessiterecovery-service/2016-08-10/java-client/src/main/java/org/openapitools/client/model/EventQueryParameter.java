/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Implements the event query parameter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventQueryParameter {
  public static final String SERIALIZED_NAME_AFFECTED_OBJECT_FRIENDLY_NAME = "AffectedObjectFriendlyName";
  @SerializedName(SERIALIZED_NAME_AFFECTED_OBJECT_FRIENDLY_NAME)
  private String affectedObjectFriendlyName;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EVENT_CODE = "EventCode";
  @SerializedName(SERIALIZED_NAME_EVENT_CODE)
  private String eventCode;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "EventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_FABRIC_NAME = "FabricName";
  @SerializedName(SERIALIZED_NAME_FABRIC_NAME)
  private String fabricName;

  public static final String SERIALIZED_NAME_SEVERITY = "Severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public EventQueryParameter() {
  }

  public EventQueryParameter affectedObjectFriendlyName(String affectedObjectFriendlyName) {
    this.affectedObjectFriendlyName = affectedObjectFriendlyName;
    return this;
  }

  /**
   * The affected object name of the events to be queried.
   * @return affectedObjectFriendlyName
   */
  @javax.annotation.Nullable
  public String getAffectedObjectFriendlyName() {
    return affectedObjectFriendlyName;
  }

  public void setAffectedObjectFriendlyName(String affectedObjectFriendlyName) {
    this.affectedObjectFriendlyName = affectedObjectFriendlyName;
  }


  public EventQueryParameter endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time of the time range within which the events are to be queried.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public EventQueryParameter eventCode(String eventCode) {
    this.eventCode = eventCode;
    return this;
  }

  /**
   * The source id of the events to be queried.
   * @return eventCode
   */
  @javax.annotation.Nullable
  public String getEventCode() {
    return eventCode;
  }

  public void setEventCode(String eventCode) {
    this.eventCode = eventCode;
  }


  public EventQueryParameter eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The type of the events to be queried.
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public EventQueryParameter fabricName(String fabricName) {
    this.fabricName = fabricName;
    return this;
  }

  /**
   * The affected object server id of the events to be queried.
   * @return fabricName
   */
  @javax.annotation.Nullable
  public String getFabricName() {
    return fabricName;
  }

  public void setFabricName(String fabricName) {
    this.fabricName = fabricName;
  }


  public EventQueryParameter severity(String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * The severity of the events to be queried.
   * @return severity
   */
  @javax.annotation.Nullable
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public EventQueryParameter startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time of the time range within which the events are to be queried.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventQueryParameter eventQueryParameter = (EventQueryParameter) o;
    return Objects.equals(this.affectedObjectFriendlyName, eventQueryParameter.affectedObjectFriendlyName) &&
        Objects.equals(this.endTime, eventQueryParameter.endTime) &&
        Objects.equals(this.eventCode, eventQueryParameter.eventCode) &&
        Objects.equals(this.eventType, eventQueryParameter.eventType) &&
        Objects.equals(this.fabricName, eventQueryParameter.fabricName) &&
        Objects.equals(this.severity, eventQueryParameter.severity) &&
        Objects.equals(this.startTime, eventQueryParameter.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedObjectFriendlyName, endTime, eventCode, eventType, fabricName, severity, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventQueryParameter {\n");
    sb.append("    affectedObjectFriendlyName: ").append(toIndentedString(affectedObjectFriendlyName)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    eventCode: ").append(toIndentedString(eventCode)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    fabricName: ").append(toIndentedString(fabricName)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AffectedObjectFriendlyName");
    openapiFields.add("EndTime");
    openapiFields.add("EventCode");
    openapiFields.add("EventType");
    openapiFields.add("FabricName");
    openapiFields.add("Severity");
    openapiFields.add("StartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventQueryParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventQueryParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventQueryParameter is not found in the empty JSON string", EventQueryParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventQueryParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventQueryParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AffectedObjectFriendlyName") != null && !jsonObj.get("AffectedObjectFriendlyName").isJsonNull()) && !jsonObj.get("AffectedObjectFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AffectedObjectFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AffectedObjectFriendlyName").toString()));
      }
      if ((jsonObj.get("EventCode") != null && !jsonObj.get("EventCode").isJsonNull()) && !jsonObj.get("EventCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventCode").toString()));
      }
      if ((jsonObj.get("EventType") != null && !jsonObj.get("EventType").isJsonNull()) && !jsonObj.get("EventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventType").toString()));
      }
      if ((jsonObj.get("FabricName") != null && !jsonObj.get("FabricName").isJsonNull()) && !jsonObj.get("FabricName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FabricName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FabricName").toString()));
      }
      if ((jsonObj.get("Severity") != null && !jsonObj.get("Severity").isJsonNull()) && !jsonObj.get("Severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Severity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventQueryParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventQueryParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventQueryParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventQueryParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<EventQueryParameter>() {
           @Override
           public void write(JsonWriter out, EventQueryParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventQueryParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventQueryParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventQueryParameter
   * @throws IOException if the JSON string is invalid with respect to EventQueryParameter
   */
  public static EventQueryParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventQueryParameter.class);
  }

  /**
   * Convert an instance of EventQueryParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

