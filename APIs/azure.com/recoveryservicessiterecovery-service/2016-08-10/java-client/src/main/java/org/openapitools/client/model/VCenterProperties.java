/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * vCenter properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VCenterProperties {
  public static final String SERIALIZED_NAME_DISCOVERY_STATUS = "discoveryStatus";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_STATUS)
  private String discoveryStatus;

  public static final String SERIALIZED_NAME_FABRIC_ARM_RESOURCE_NAME = "fabricArmResourceName";
  @SerializedName(SERIALIZED_NAME_FABRIC_ARM_RESOURCE_NAME)
  private String fabricArmResourceName;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_INFRASTRUCTURE_ID = "infrastructureId";
  @SerializedName(SERIALIZED_NAME_INFRASTRUCTURE_ID)
  private String infrastructureId;

  public static final String SERIALIZED_NAME_INTERNAL_ID = "internalId";
  @SerializedName(SERIALIZED_NAME_INTERNAL_ID)
  private String internalId;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LAST_HEARTBEAT = "lastHeartbeat";
  @SerializedName(SERIALIZED_NAME_LAST_HEARTBEAT)
  private OffsetDateTime lastHeartbeat;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private String port;

  public static final String SERIALIZED_NAME_PROCESS_SERVER_ID = "processServerId";
  @SerializedName(SERIALIZED_NAME_PROCESS_SERVER_ID)
  private String processServerId;

  public static final String SERIALIZED_NAME_RUN_AS_ACCOUNT_ID = "runAsAccountId";
  @SerializedName(SERIALIZED_NAME_RUN_AS_ACCOUNT_ID)
  private String runAsAccountId;

  public VCenterProperties() {
  }

  public VCenterProperties discoveryStatus(String discoveryStatus) {
    this.discoveryStatus = discoveryStatus;
    return this;
  }

  /**
   * The VCenter discovery status.
   * @return discoveryStatus
   */
  @javax.annotation.Nullable
  public String getDiscoveryStatus() {
    return discoveryStatus;
  }

  public void setDiscoveryStatus(String discoveryStatus) {
    this.discoveryStatus = discoveryStatus;
  }


  public VCenterProperties fabricArmResourceName(String fabricArmResourceName) {
    this.fabricArmResourceName = fabricArmResourceName;
    return this;
  }

  /**
   * The ARM resource name of the fabric containing this VCenter.
   * @return fabricArmResourceName
   */
  @javax.annotation.Nullable
  public String getFabricArmResourceName() {
    return fabricArmResourceName;
  }

  public void setFabricArmResourceName(String fabricArmResourceName) {
    this.fabricArmResourceName = fabricArmResourceName;
  }


  public VCenterProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Friendly name of the vCenter.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public VCenterProperties infrastructureId(String infrastructureId) {
    this.infrastructureId = infrastructureId;
    return this;
  }

  /**
   * The infrastructure Id of vCenter.
   * @return infrastructureId
   */
  @javax.annotation.Nullable
  public String getInfrastructureId() {
    return infrastructureId;
  }

  public void setInfrastructureId(String infrastructureId) {
    this.infrastructureId = infrastructureId;
  }


  public VCenterProperties internalId(String internalId) {
    this.internalId = internalId;
    return this;
  }

  /**
   * VCenter internal ID.
   * @return internalId
   */
  @javax.annotation.Nullable
  public String getInternalId() {
    return internalId;
  }

  public void setInternalId(String internalId) {
    this.internalId = internalId;
  }


  public VCenterProperties ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * The IP address of the vCenter.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public VCenterProperties lastHeartbeat(OffsetDateTime lastHeartbeat) {
    this.lastHeartbeat = lastHeartbeat;
    return this;
  }

  /**
   * The time when the last heartbeat was received by vCenter.
   * @return lastHeartbeat
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastHeartbeat() {
    return lastHeartbeat;
  }

  public void setLastHeartbeat(OffsetDateTime lastHeartbeat) {
    this.lastHeartbeat = lastHeartbeat;
  }


  public VCenterProperties port(String port) {
    this.port = port;
    return this;
  }

  /**
   * The port number for discovery.
   * @return port
   */
  @javax.annotation.Nullable
  public String getPort() {
    return port;
  }

  public void setPort(String port) {
    this.port = port;
  }


  public VCenterProperties processServerId(String processServerId) {
    this.processServerId = processServerId;
    return this;
  }

  /**
   * The process server Id.
   * @return processServerId
   */
  @javax.annotation.Nullable
  public String getProcessServerId() {
    return processServerId;
  }

  public void setProcessServerId(String processServerId) {
    this.processServerId = processServerId;
  }


  public VCenterProperties runAsAccountId(String runAsAccountId) {
    this.runAsAccountId = runAsAccountId;
    return this;
  }

  /**
   * The account Id which has privileges to discover the vCenter.
   * @return runAsAccountId
   */
  @javax.annotation.Nullable
  public String getRunAsAccountId() {
    return runAsAccountId;
  }

  public void setRunAsAccountId(String runAsAccountId) {
    this.runAsAccountId = runAsAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VCenterProperties vcenterProperties = (VCenterProperties) o;
    return Objects.equals(this.discoveryStatus, vcenterProperties.discoveryStatus) &&
        Objects.equals(this.fabricArmResourceName, vcenterProperties.fabricArmResourceName) &&
        Objects.equals(this.friendlyName, vcenterProperties.friendlyName) &&
        Objects.equals(this.infrastructureId, vcenterProperties.infrastructureId) &&
        Objects.equals(this.internalId, vcenterProperties.internalId) &&
        Objects.equals(this.ipAddress, vcenterProperties.ipAddress) &&
        Objects.equals(this.lastHeartbeat, vcenterProperties.lastHeartbeat) &&
        Objects.equals(this.port, vcenterProperties.port) &&
        Objects.equals(this.processServerId, vcenterProperties.processServerId) &&
        Objects.equals(this.runAsAccountId, vcenterProperties.runAsAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discoveryStatus, fabricArmResourceName, friendlyName, infrastructureId, internalId, ipAddress, lastHeartbeat, port, processServerId, runAsAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VCenterProperties {\n");
    sb.append("    discoveryStatus: ").append(toIndentedString(discoveryStatus)).append("\n");
    sb.append("    fabricArmResourceName: ").append(toIndentedString(fabricArmResourceName)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    infrastructureId: ").append(toIndentedString(infrastructureId)).append("\n");
    sb.append("    internalId: ").append(toIndentedString(internalId)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    lastHeartbeat: ").append(toIndentedString(lastHeartbeat)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    processServerId: ").append(toIndentedString(processServerId)).append("\n");
    sb.append("    runAsAccountId: ").append(toIndentedString(runAsAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discoveryStatus");
    openapiFields.add("fabricArmResourceName");
    openapiFields.add("friendlyName");
    openapiFields.add("infrastructureId");
    openapiFields.add("internalId");
    openapiFields.add("ipAddress");
    openapiFields.add("lastHeartbeat");
    openapiFields.add("port");
    openapiFields.add("processServerId");
    openapiFields.add("runAsAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VCenterProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VCenterProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VCenterProperties is not found in the empty JSON string", VCenterProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VCenterProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VCenterProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("discoveryStatus") != null && !jsonObj.get("discoveryStatus").isJsonNull()) && !jsonObj.get("discoveryStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discoveryStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discoveryStatus").toString()));
      }
      if ((jsonObj.get("fabricArmResourceName") != null && !jsonObj.get("fabricArmResourceName").isJsonNull()) && !jsonObj.get("fabricArmResourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fabricArmResourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fabricArmResourceName").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("infrastructureId") != null && !jsonObj.get("infrastructureId").isJsonNull()) && !jsonObj.get("infrastructureId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infrastructureId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infrastructureId").toString()));
      }
      if ((jsonObj.get("internalId") != null && !jsonObj.get("internalId").isJsonNull()) && !jsonObj.get("internalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalId").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) && !jsonObj.get("port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("port").toString()));
      }
      if ((jsonObj.get("processServerId") != null && !jsonObj.get("processServerId").isJsonNull()) && !jsonObj.get("processServerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processServerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processServerId").toString()));
      }
      if ((jsonObj.get("runAsAccountId") != null && !jsonObj.get("runAsAccountId").isJsonNull()) && !jsonObj.get("runAsAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runAsAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runAsAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VCenterProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VCenterProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VCenterProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VCenterProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VCenterProperties>() {
           @Override
           public void write(JsonWriter out, VCenterProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VCenterProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VCenterProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VCenterProperties
   * @throws IOException if the JSON string is invalid with respect to VCenterProperties
   */
  public static VCenterProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VCenterProperties.class);
  }

  /**
   * Convert an instance of VCenterProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

