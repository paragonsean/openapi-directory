/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Disk details for E2A provider.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureVmDiskDetails {
  public static final String SERIALIZED_NAME_LUN_ID = "lunId";
  @SerializedName(SERIALIZED_NAME_LUN_ID)
  private String lunId;

  public static final String SERIALIZED_NAME_MAX_SIZE_M_B = "maxSizeMB";
  @SerializedName(SERIALIZED_NAME_MAX_SIZE_M_B)
  private String maxSizeMB;

  public static final String SERIALIZED_NAME_TARGET_DISK_LOCATION = "targetDiskLocation";
  @SerializedName(SERIALIZED_NAME_TARGET_DISK_LOCATION)
  private String targetDiskLocation;

  public static final String SERIALIZED_NAME_TARGET_DISK_NAME = "targetDiskName";
  @SerializedName(SERIALIZED_NAME_TARGET_DISK_NAME)
  private String targetDiskName;

  public static final String SERIALIZED_NAME_VHD_ID = "vhdId";
  @SerializedName(SERIALIZED_NAME_VHD_ID)
  private String vhdId;

  public static final String SERIALIZED_NAME_VHD_NAME = "vhdName";
  @SerializedName(SERIALIZED_NAME_VHD_NAME)
  private String vhdName;

  public static final String SERIALIZED_NAME_VHD_TYPE = "vhdType";
  @SerializedName(SERIALIZED_NAME_VHD_TYPE)
  private String vhdType;

  public AzureVmDiskDetails() {
  }

  public AzureVmDiskDetails lunId(String lunId) {
    this.lunId = lunId;
    return this;
  }

  /**
   * Ordinal\\LunId of the disk for the Azure VM.
   * @return lunId
   */
  @javax.annotation.Nullable
  public String getLunId() {
    return lunId;
  }

  public void setLunId(String lunId) {
    this.lunId = lunId;
  }


  public AzureVmDiskDetails maxSizeMB(String maxSizeMB) {
    this.maxSizeMB = maxSizeMB;
    return this;
  }

  /**
   * Max side in MB.
   * @return maxSizeMB
   */
  @javax.annotation.Nullable
  public String getMaxSizeMB() {
    return maxSizeMB;
  }

  public void setMaxSizeMB(String maxSizeMB) {
    this.maxSizeMB = maxSizeMB;
  }


  public AzureVmDiskDetails targetDiskLocation(String targetDiskLocation) {
    this.targetDiskLocation = targetDiskLocation;
    return this;
  }

  /**
   * Blob uri of the Azure disk.
   * @return targetDiskLocation
   */
  @javax.annotation.Nullable
  public String getTargetDiskLocation() {
    return targetDiskLocation;
  }

  public void setTargetDiskLocation(String targetDiskLocation) {
    this.targetDiskLocation = targetDiskLocation;
  }


  public AzureVmDiskDetails targetDiskName(String targetDiskName) {
    this.targetDiskName = targetDiskName;
    return this;
  }

  /**
   * The target Azure disk name.
   * @return targetDiskName
   */
  @javax.annotation.Nullable
  public String getTargetDiskName() {
    return targetDiskName;
  }

  public void setTargetDiskName(String targetDiskName) {
    this.targetDiskName = targetDiskName;
  }


  public AzureVmDiskDetails vhdId(String vhdId) {
    this.vhdId = vhdId;
    return this;
  }

  /**
   * The VHD id.
   * @return vhdId
   */
  @javax.annotation.Nullable
  public String getVhdId() {
    return vhdId;
  }

  public void setVhdId(String vhdId) {
    this.vhdId = vhdId;
  }


  public AzureVmDiskDetails vhdName(String vhdName) {
    this.vhdName = vhdName;
    return this;
  }

  /**
   * VHD name.
   * @return vhdName
   */
  @javax.annotation.Nullable
  public String getVhdName() {
    return vhdName;
  }

  public void setVhdName(String vhdName) {
    this.vhdName = vhdName;
  }


  public AzureVmDiskDetails vhdType(String vhdType) {
    this.vhdType = vhdType;
    return this;
  }

  /**
   * VHD type.
   * @return vhdType
   */
  @javax.annotation.Nullable
  public String getVhdType() {
    return vhdType;
  }

  public void setVhdType(String vhdType) {
    this.vhdType = vhdType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureVmDiskDetails azureVmDiskDetails = (AzureVmDiskDetails) o;
    return Objects.equals(this.lunId, azureVmDiskDetails.lunId) &&
        Objects.equals(this.maxSizeMB, azureVmDiskDetails.maxSizeMB) &&
        Objects.equals(this.targetDiskLocation, azureVmDiskDetails.targetDiskLocation) &&
        Objects.equals(this.targetDiskName, azureVmDiskDetails.targetDiskName) &&
        Objects.equals(this.vhdId, azureVmDiskDetails.vhdId) &&
        Objects.equals(this.vhdName, azureVmDiskDetails.vhdName) &&
        Objects.equals(this.vhdType, azureVmDiskDetails.vhdType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lunId, maxSizeMB, targetDiskLocation, targetDiskName, vhdId, vhdName, vhdType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureVmDiskDetails {\n");
    sb.append("    lunId: ").append(toIndentedString(lunId)).append("\n");
    sb.append("    maxSizeMB: ").append(toIndentedString(maxSizeMB)).append("\n");
    sb.append("    targetDiskLocation: ").append(toIndentedString(targetDiskLocation)).append("\n");
    sb.append("    targetDiskName: ").append(toIndentedString(targetDiskName)).append("\n");
    sb.append("    vhdId: ").append(toIndentedString(vhdId)).append("\n");
    sb.append("    vhdName: ").append(toIndentedString(vhdName)).append("\n");
    sb.append("    vhdType: ").append(toIndentedString(vhdType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lunId");
    openapiFields.add("maxSizeMB");
    openapiFields.add("targetDiskLocation");
    openapiFields.add("targetDiskName");
    openapiFields.add("vhdId");
    openapiFields.add("vhdName");
    openapiFields.add("vhdType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureVmDiskDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureVmDiskDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureVmDiskDetails is not found in the empty JSON string", AzureVmDiskDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AzureVmDiskDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AzureVmDiskDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lunId") != null && !jsonObj.get("lunId").isJsonNull()) && !jsonObj.get("lunId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lunId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lunId").toString()));
      }
      if ((jsonObj.get("maxSizeMB") != null && !jsonObj.get("maxSizeMB").isJsonNull()) && !jsonObj.get("maxSizeMB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxSizeMB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxSizeMB").toString()));
      }
      if ((jsonObj.get("targetDiskLocation") != null && !jsonObj.get("targetDiskLocation").isJsonNull()) && !jsonObj.get("targetDiskLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetDiskLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetDiskLocation").toString()));
      }
      if ((jsonObj.get("targetDiskName") != null && !jsonObj.get("targetDiskName").isJsonNull()) && !jsonObj.get("targetDiskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetDiskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetDiskName").toString()));
      }
      if ((jsonObj.get("vhdId") != null && !jsonObj.get("vhdId").isJsonNull()) && !jsonObj.get("vhdId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vhdId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vhdId").toString()));
      }
      if ((jsonObj.get("vhdName") != null && !jsonObj.get("vhdName").isJsonNull()) && !jsonObj.get("vhdName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vhdName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vhdName").toString()));
      }
      if ((jsonObj.get("vhdType") != null && !jsonObj.get("vhdType").isJsonNull()) && !jsonObj.get("vhdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vhdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vhdType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AzureVmDiskDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AzureVmDiskDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AzureVmDiskDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AzureVmDiskDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AzureVmDiskDetails>() {
           @Override
           public void write(JsonWriter out, AzureVmDiskDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AzureVmDiskDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AzureVmDiskDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureVmDiskDetails
   * @throws IOException if the JSON string is invalid with respect to AzureVmDiskDetails
   */
  public static AzureVmDiskDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureVmDiskDetails.class);
  }

  /**
   * Convert an instance of AzureVmDiskDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

