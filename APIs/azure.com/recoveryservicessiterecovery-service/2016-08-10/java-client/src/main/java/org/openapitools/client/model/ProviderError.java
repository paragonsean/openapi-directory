/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This class contains the error details per object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProviderError {
  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private Integer errorCode;

  public static final String SERIALIZED_NAME_ERROR_ID = "errorId";
  @SerializedName(SERIALIZED_NAME_ERROR_ID)
  private String errorId;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_POSSIBLE_CAUSES = "possibleCauses";
  @SerializedName(SERIALIZED_NAME_POSSIBLE_CAUSES)
  private String possibleCauses;

  public static final String SERIALIZED_NAME_RECOMMENDED_ACTION = "recommendedAction";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_ACTION)
  private String recommendedAction;

  public ProviderError() {
  }

  public ProviderError errorCode(Integer errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * The Error code.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public Integer getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(Integer errorCode) {
    this.errorCode = errorCode;
  }


  public ProviderError errorId(String errorId) {
    this.errorId = errorId;
    return this;
  }

  /**
   * The Provider error Id.
   * @return errorId
   */
  @javax.annotation.Nullable
  public String getErrorId() {
    return errorId;
  }

  public void setErrorId(String errorId) {
    this.errorId = errorId;
  }


  public ProviderError errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * The Error message.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public ProviderError possibleCauses(String possibleCauses) {
    this.possibleCauses = possibleCauses;
    return this;
  }

  /**
   * The possible causes for the error.
   * @return possibleCauses
   */
  @javax.annotation.Nullable
  public String getPossibleCauses() {
    return possibleCauses;
  }

  public void setPossibleCauses(String possibleCauses) {
    this.possibleCauses = possibleCauses;
  }


  public ProviderError recommendedAction(String recommendedAction) {
    this.recommendedAction = recommendedAction;
    return this;
  }

  /**
   * The recommended action to resolve the error.
   * @return recommendedAction
   */
  @javax.annotation.Nullable
  public String getRecommendedAction() {
    return recommendedAction;
  }

  public void setRecommendedAction(String recommendedAction) {
    this.recommendedAction = recommendedAction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderError providerError = (ProviderError) o;
    return Objects.equals(this.errorCode, providerError.errorCode) &&
        Objects.equals(this.errorId, providerError.errorId) &&
        Objects.equals(this.errorMessage, providerError.errorMessage) &&
        Objects.equals(this.possibleCauses, providerError.possibleCauses) &&
        Objects.equals(this.recommendedAction, providerError.recommendedAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorCode, errorId, errorMessage, possibleCauses, recommendedAction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderError {\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorId: ").append(toIndentedString(errorId)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    possibleCauses: ").append(toIndentedString(possibleCauses)).append("\n");
    sb.append("    recommendedAction: ").append(toIndentedString(recommendedAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorCode");
    openapiFields.add("errorId");
    openapiFields.add("errorMessage");
    openapiFields.add("possibleCauses");
    openapiFields.add("recommendedAction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProviderError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProviderError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProviderError is not found in the empty JSON string", ProviderError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProviderError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProviderError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("errorId") != null && !jsonObj.get("errorId").isJsonNull()) && !jsonObj.get("errorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorId").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("possibleCauses") != null && !jsonObj.get("possibleCauses").isJsonNull()) && !jsonObj.get("possibleCauses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `possibleCauses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("possibleCauses").toString()));
      }
      if ((jsonObj.get("recommendedAction") != null && !jsonObj.get("recommendedAction").isJsonNull()) && !jsonObj.get("recommendedAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendedAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendedAction").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProviderError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProviderError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProviderError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProviderError.class));

       return (TypeAdapter<T>) new TypeAdapter<ProviderError>() {
           @Override
           public void write(JsonWriter out, ProviderError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProviderError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProviderError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProviderError
   * @throws IOException if the JSON string is invalid with respect to ProviderError
   */
  public static ProviderError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProviderError.class);
  }

  /**
   * Convert an instance of ProviderError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

