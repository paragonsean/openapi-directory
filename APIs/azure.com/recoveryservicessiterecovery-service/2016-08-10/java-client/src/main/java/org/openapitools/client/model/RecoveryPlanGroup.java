/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecoveryPlanAction;
import org.openapitools.client.model.RecoveryPlanProtectedItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Recovery plan group details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecoveryPlanGroup {
  public static final String SERIALIZED_NAME_END_GROUP_ACTIONS = "endGroupActions";
  @SerializedName(SERIALIZED_NAME_END_GROUP_ACTIONS)
  private List<RecoveryPlanAction> endGroupActions = new ArrayList<>();

  /**
   * The group type.
   */
  @JsonAdapter(GroupTypeEnum.Adapter.class)
  public enum GroupTypeEnum {
    SHUTDOWN("Shutdown"),
    
    BOOT("Boot"),
    
    FAILOVER("Failover");

    private String value;

    GroupTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupTypeEnum fromValue(String value) {
      for (GroupTypeEnum b : GroupTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GroupTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GROUP_TYPE = "groupType";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE)
  private GroupTypeEnum groupType;

  public static final String SERIALIZED_NAME_REPLICATION_PROTECTED_ITEMS = "replicationProtectedItems";
  @SerializedName(SERIALIZED_NAME_REPLICATION_PROTECTED_ITEMS)
  private List<RecoveryPlanProtectedItem> replicationProtectedItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_GROUP_ACTIONS = "startGroupActions";
  @SerializedName(SERIALIZED_NAME_START_GROUP_ACTIONS)
  private List<RecoveryPlanAction> startGroupActions = new ArrayList<>();

  public RecoveryPlanGroup() {
  }

  public RecoveryPlanGroup endGroupActions(List<RecoveryPlanAction> endGroupActions) {
    this.endGroupActions = endGroupActions;
    return this;
  }

  public RecoveryPlanGroup addEndGroupActionsItem(RecoveryPlanAction endGroupActionsItem) {
    if (this.endGroupActions == null) {
      this.endGroupActions = new ArrayList<>();
    }
    this.endGroupActions.add(endGroupActionsItem);
    return this;
  }

  /**
   * The end group actions.
   * @return endGroupActions
   */
  @javax.annotation.Nullable
  public List<RecoveryPlanAction> getEndGroupActions() {
    return endGroupActions;
  }

  public void setEndGroupActions(List<RecoveryPlanAction> endGroupActions) {
    this.endGroupActions = endGroupActions;
  }


  public RecoveryPlanGroup groupType(GroupTypeEnum groupType) {
    this.groupType = groupType;
    return this;
  }

  /**
   * The group type.
   * @return groupType
   */
  @javax.annotation.Nonnull
  public GroupTypeEnum getGroupType() {
    return groupType;
  }

  public void setGroupType(GroupTypeEnum groupType) {
    this.groupType = groupType;
  }


  public RecoveryPlanGroup replicationProtectedItems(List<RecoveryPlanProtectedItem> replicationProtectedItems) {
    this.replicationProtectedItems = replicationProtectedItems;
    return this;
  }

  public RecoveryPlanGroup addReplicationProtectedItemsItem(RecoveryPlanProtectedItem replicationProtectedItemsItem) {
    if (this.replicationProtectedItems == null) {
      this.replicationProtectedItems = new ArrayList<>();
    }
    this.replicationProtectedItems.add(replicationProtectedItemsItem);
    return this;
  }

  /**
   * The list of protected items.
   * @return replicationProtectedItems
   */
  @javax.annotation.Nullable
  public List<RecoveryPlanProtectedItem> getReplicationProtectedItems() {
    return replicationProtectedItems;
  }

  public void setReplicationProtectedItems(List<RecoveryPlanProtectedItem> replicationProtectedItems) {
    this.replicationProtectedItems = replicationProtectedItems;
  }


  public RecoveryPlanGroup startGroupActions(List<RecoveryPlanAction> startGroupActions) {
    this.startGroupActions = startGroupActions;
    return this;
  }

  public RecoveryPlanGroup addStartGroupActionsItem(RecoveryPlanAction startGroupActionsItem) {
    if (this.startGroupActions == null) {
      this.startGroupActions = new ArrayList<>();
    }
    this.startGroupActions.add(startGroupActionsItem);
    return this;
  }

  /**
   * The start group actions.
   * @return startGroupActions
   */
  @javax.annotation.Nullable
  public List<RecoveryPlanAction> getStartGroupActions() {
    return startGroupActions;
  }

  public void setStartGroupActions(List<RecoveryPlanAction> startGroupActions) {
    this.startGroupActions = startGroupActions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecoveryPlanGroup recoveryPlanGroup = (RecoveryPlanGroup) o;
    return Objects.equals(this.endGroupActions, recoveryPlanGroup.endGroupActions) &&
        Objects.equals(this.groupType, recoveryPlanGroup.groupType) &&
        Objects.equals(this.replicationProtectedItems, recoveryPlanGroup.replicationProtectedItems) &&
        Objects.equals(this.startGroupActions, recoveryPlanGroup.startGroupActions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endGroupActions, groupType, replicationProtectedItems, startGroupActions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecoveryPlanGroup {\n");
    sb.append("    endGroupActions: ").append(toIndentedString(endGroupActions)).append("\n");
    sb.append("    groupType: ").append(toIndentedString(groupType)).append("\n");
    sb.append("    replicationProtectedItems: ").append(toIndentedString(replicationProtectedItems)).append("\n");
    sb.append("    startGroupActions: ").append(toIndentedString(startGroupActions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endGroupActions");
    openapiFields.add("groupType");
    openapiFields.add("replicationProtectedItems");
    openapiFields.add("startGroupActions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("groupType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecoveryPlanGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecoveryPlanGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecoveryPlanGroup is not found in the empty JSON string", RecoveryPlanGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecoveryPlanGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecoveryPlanGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecoveryPlanGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("endGroupActions") != null && !jsonObj.get("endGroupActions").isJsonNull()) {
        JsonArray jsonArrayendGroupActions = jsonObj.getAsJsonArray("endGroupActions");
        if (jsonArrayendGroupActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("endGroupActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `endGroupActions` to be an array in the JSON string but got `%s`", jsonObj.get("endGroupActions").toString()));
          }

          // validate the optional field `endGroupActions` (array)
          for (int i = 0; i < jsonArrayendGroupActions.size(); i++) {
            RecoveryPlanAction.validateJsonElement(jsonArrayendGroupActions.get(i));
          };
        }
      }
      if (!jsonObj.get("groupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupType").toString()));
      }
      // validate the required field `groupType`
      GroupTypeEnum.validateJsonElement(jsonObj.get("groupType"));
      if (jsonObj.get("replicationProtectedItems") != null && !jsonObj.get("replicationProtectedItems").isJsonNull()) {
        JsonArray jsonArrayreplicationProtectedItems = jsonObj.getAsJsonArray("replicationProtectedItems");
        if (jsonArrayreplicationProtectedItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("replicationProtectedItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `replicationProtectedItems` to be an array in the JSON string but got `%s`", jsonObj.get("replicationProtectedItems").toString()));
          }

          // validate the optional field `replicationProtectedItems` (array)
          for (int i = 0; i < jsonArrayreplicationProtectedItems.size(); i++) {
            RecoveryPlanProtectedItem.validateJsonElement(jsonArrayreplicationProtectedItems.get(i));
          };
        }
      }
      if (jsonObj.get("startGroupActions") != null && !jsonObj.get("startGroupActions").isJsonNull()) {
        JsonArray jsonArraystartGroupActions = jsonObj.getAsJsonArray("startGroupActions");
        if (jsonArraystartGroupActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("startGroupActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `startGroupActions` to be an array in the JSON string but got `%s`", jsonObj.get("startGroupActions").toString()));
          }

          // validate the optional field `startGroupActions` (array)
          for (int i = 0; i < jsonArraystartGroupActions.size(); i++) {
            RecoveryPlanAction.validateJsonElement(jsonArraystartGroupActions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecoveryPlanGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecoveryPlanGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecoveryPlanGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecoveryPlanGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<RecoveryPlanGroup>() {
           @Override
           public void write(JsonWriter out, RecoveryPlanGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecoveryPlanGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecoveryPlanGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecoveryPlanGroup
   * @throws IOException if the JSON string is invalid with respect to RecoveryPlanGroup
   */
  public static RecoveryPlanGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecoveryPlanGroup.class);
  }

  /**
   * Convert an instance of RecoveryPlanGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

