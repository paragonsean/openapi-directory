/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replication provider specific settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationProviderSpecificSettings {
  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  protected String instanceType;

  public ReplicationProviderSpecificSettings() {
    this.instanceType = this.getClass().getSimpleName();
  }

  public ReplicationProviderSpecificSettings(
     String instanceType
  ) {
    this();
    this.instanceType = instanceType;
  }

  /**
   * Gets the Instance type.
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationProviderSpecificSettings replicationProviderSpecificSettings = (ReplicationProviderSpecificSettings) o;
    return Objects.equals(this.instanceType, replicationProviderSpecificSettings.instanceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationProviderSpecificSettings {\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationProviderSpecificSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationProviderSpecificSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationProviderSpecificSettings is not found in the empty JSON string", ReplicationProviderSpecificSettings.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("instanceType").getAsString();
      switch (discriminatorValue) {
        case "A2AReplicationDetails":
          A2AReplicationDetails.validateJsonElement(jsonElement);
          break;
        case "HyperVReplicaAzureReplicationDetails":
          HyperVReplicaAzureReplicationDetails.validateJsonElement(jsonElement);
          break;
        case "HyperVReplicaBaseReplicationDetails":
          HyperVReplicaBaseReplicationDetails.validateJsonElement(jsonElement);
          break;
        case "HyperVReplicaBlueReplicationDetails":
          HyperVReplicaBlueReplicationDetails.validateJsonElement(jsonElement);
          break;
        case "HyperVReplicaReplicationDetails":
          HyperVReplicaReplicationDetails.validateJsonElement(jsonElement);
          break;
        case "InMageAzureV2ReplicationDetails":
          InMageAzureV2ReplicationDetails.validateJsonElement(jsonElement);
          break;
        case "InMageReplicationDetails":
          InMageReplicationDetails.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `instanceType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ReplicationProviderSpecificSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationProviderSpecificSettings
   * @throws IOException if the JSON string is invalid with respect to ReplicationProviderSpecificSettings
   */
  public static ReplicationProviderSpecificSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationProviderSpecificSettings.class);
  }

  /**
   * Convert an instance of ReplicationProviderSpecificSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

