/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecoveryPlanActionDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Recovery plan action details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecoveryPlanAction {
  public static final String SERIALIZED_NAME_ACTION_NAME = "actionName";
  @SerializedName(SERIALIZED_NAME_ACTION_NAME)
  private String actionName;

  public static final String SERIALIZED_NAME_CUSTOM_DETAILS = "customDetails";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DETAILS)
  private RecoveryPlanActionDetails customDetails;

  /**
   * Gets or Sets failoverDirections
   */
  @JsonAdapter(FailoverDirectionsEnum.Adapter.class)
  public enum FailoverDirectionsEnum {
    PRIMARY_TO_RECOVERY("PrimaryToRecovery"),
    
    RECOVERY_TO_PRIMARY("RecoveryToPrimary");

    private String value;

    FailoverDirectionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FailoverDirectionsEnum fromValue(String value) {
      for (FailoverDirectionsEnum b : FailoverDirectionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FailoverDirectionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailoverDirectionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailoverDirectionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FailoverDirectionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FailoverDirectionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAILOVER_DIRECTIONS = "failoverDirections";
  @SerializedName(SERIALIZED_NAME_FAILOVER_DIRECTIONS)
  private List<FailoverDirectionsEnum> failoverDirections = new ArrayList<>();

  /**
   * Gets or Sets failoverTypes
   */
  @JsonAdapter(FailoverTypesEnum.Adapter.class)
  public enum FailoverTypesEnum {
    REVERSE_REPLICATE("ReverseReplicate"),
    
    COMMIT("Commit"),
    
    PLANNED_FAILOVER("PlannedFailover"),
    
    UNPLANNED_FAILOVER("UnplannedFailover"),
    
    DISABLE_PROTECTION("DisableProtection"),
    
    TEST_FAILOVER("TestFailover"),
    
    TEST_FAILOVER_CLEANUP("TestFailoverCleanup"),
    
    FAILBACK("Failback"),
    
    FINALIZE_FAILBACK("FinalizeFailback"),
    
    CHANGE_PIT("ChangePit"),
    
    REPAIR_REPLICATION("RepairReplication"),
    
    SWITCH_PROTECTION("SwitchProtection"),
    
    COMPLETE_MIGRATION("CompleteMigration");

    private String value;

    FailoverTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FailoverTypesEnum fromValue(String value) {
      for (FailoverTypesEnum b : FailoverTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FailoverTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailoverTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailoverTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FailoverTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FailoverTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAILOVER_TYPES = "failoverTypes";
  @SerializedName(SERIALIZED_NAME_FAILOVER_TYPES)
  private List<FailoverTypesEnum> failoverTypes = new ArrayList<>();

  public RecoveryPlanAction() {
  }

  public RecoveryPlanAction actionName(String actionName) {
    this.actionName = actionName;
    return this;
  }

  /**
   * The action name.
   * @return actionName
   */
  @javax.annotation.Nonnull
  public String getActionName() {
    return actionName;
  }

  public void setActionName(String actionName) {
    this.actionName = actionName;
  }


  public RecoveryPlanAction customDetails(RecoveryPlanActionDetails customDetails) {
    this.customDetails = customDetails;
    return this;
  }

  /**
   * Get customDetails
   * @return customDetails
   */
  @javax.annotation.Nonnull
  public RecoveryPlanActionDetails getCustomDetails() {
    return customDetails;
  }

  public void setCustomDetails(RecoveryPlanActionDetails customDetails) {
    this.customDetails = customDetails;
  }


  public RecoveryPlanAction failoverDirections(List<FailoverDirectionsEnum> failoverDirections) {
    this.failoverDirections = failoverDirections;
    return this;
  }

  public RecoveryPlanAction addFailoverDirectionsItem(FailoverDirectionsEnum failoverDirectionsItem) {
    if (this.failoverDirections == null) {
      this.failoverDirections = new ArrayList<>();
    }
    this.failoverDirections.add(failoverDirectionsItem);
    return this;
  }

  /**
   * The list of failover directions.
   * @return failoverDirections
   */
  @javax.annotation.Nonnull
  public List<FailoverDirectionsEnum> getFailoverDirections() {
    return failoverDirections;
  }

  public void setFailoverDirections(List<FailoverDirectionsEnum> failoverDirections) {
    this.failoverDirections = failoverDirections;
  }


  public RecoveryPlanAction failoverTypes(List<FailoverTypesEnum> failoverTypes) {
    this.failoverTypes = failoverTypes;
    return this;
  }

  public RecoveryPlanAction addFailoverTypesItem(FailoverTypesEnum failoverTypesItem) {
    if (this.failoverTypes == null) {
      this.failoverTypes = new ArrayList<>();
    }
    this.failoverTypes.add(failoverTypesItem);
    return this;
  }

  /**
   * The list of failover types.
   * @return failoverTypes
   */
  @javax.annotation.Nonnull
  public List<FailoverTypesEnum> getFailoverTypes() {
    return failoverTypes;
  }

  public void setFailoverTypes(List<FailoverTypesEnum> failoverTypes) {
    this.failoverTypes = failoverTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecoveryPlanAction recoveryPlanAction = (RecoveryPlanAction) o;
    return Objects.equals(this.actionName, recoveryPlanAction.actionName) &&
        Objects.equals(this.customDetails, recoveryPlanAction.customDetails) &&
        Objects.equals(this.failoverDirections, recoveryPlanAction.failoverDirections) &&
        Objects.equals(this.failoverTypes, recoveryPlanAction.failoverTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionName, customDetails, failoverDirections, failoverTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecoveryPlanAction {\n");
    sb.append("    actionName: ").append(toIndentedString(actionName)).append("\n");
    sb.append("    customDetails: ").append(toIndentedString(customDetails)).append("\n");
    sb.append("    failoverDirections: ").append(toIndentedString(failoverDirections)).append("\n");
    sb.append("    failoverTypes: ").append(toIndentedString(failoverTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionName");
    openapiFields.add("customDetails");
    openapiFields.add("failoverDirections");
    openapiFields.add("failoverTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actionName");
    openapiRequiredFields.add("customDetails");
    openapiRequiredFields.add("failoverDirections");
    openapiRequiredFields.add("failoverTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecoveryPlanAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecoveryPlanAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecoveryPlanAction is not found in the empty JSON string", RecoveryPlanAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecoveryPlanAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecoveryPlanAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecoveryPlanAction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("actionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionName").toString()));
      }
      // validate the required field `customDetails`
      RecoveryPlanActionDetails.validateJsonElement(jsonObj.get("customDetails"));
      // ensure the required json array is present
      if (jsonObj.get("failoverDirections") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("failoverDirections").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failoverDirections` to be an array in the JSON string but got `%s`", jsonObj.get("failoverDirections").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("failoverTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("failoverTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failoverTypes` to be an array in the JSON string but got `%s`", jsonObj.get("failoverTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecoveryPlanAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecoveryPlanAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecoveryPlanAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecoveryPlanAction.class));

       return (TypeAdapter<T>) new TypeAdapter<RecoveryPlanAction>() {
           @Override
           public void write(JsonWriter out, RecoveryPlanAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecoveryPlanAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecoveryPlanAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecoveryPlanAction
   * @throws IOException if the JSON string is invalid with respect to RecoveryPlanAction
   */
  public static RecoveryPlanAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecoveryPlanAction.class);
  }

  /**
   * Convert an instance of RecoveryPlanAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

