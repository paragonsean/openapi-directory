/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identity details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentityInformation {
  public static final String SERIALIZED_NAME_AAD_AUTHORITY = "aadAuthority";
  @SerializedName(SERIALIZED_NAME_AAD_AUTHORITY)
  private String aadAuthority;

  public static final String SERIALIZED_NAME_APPLICATION_ID = "applicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_AUDIENCE = "audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  private String audience;

  public static final String SERIALIZED_NAME_CERTIFICATE_THUMBPRINT = "certificateThumbprint";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_THUMBPRINT)
  private String certificateThumbprint;

  /**
   * The identity provider type. Value is the ToString() of a IdentityProviderType value.
   */
  @JsonAdapter(IdentityProviderTypeEnum.Adapter.class)
  public enum IdentityProviderTypeEnum {
    RECOVERY_SERVICES_ACTIVE_DIRECTORY("RecoveryServicesActiveDirectory"),
    
    CUSTOMER_ACTIVE_DIRECTORY("CustomerActiveDirectory");

    private String value;

    IdentityProviderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdentityProviderTypeEnum fromValue(String value) {
      for (IdentityProviderTypeEnum b : IdentityProviderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IdentityProviderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdentityProviderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdentityProviderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IdentityProviderTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IdentityProviderTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IDENTITY_PROVIDER_TYPE = "identityProviderType";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDER_TYPE)
  private IdentityProviderTypeEnum identityProviderType;

  public static final String SERIALIZED_NAME_OBJECT_ID = "objectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public IdentityInformation() {
  }

  public IdentityInformation aadAuthority(String aadAuthority) {
    this.aadAuthority = aadAuthority;
    return this;
  }

  /**
   * The base authority for Azure Active Directory authentication.
   * @return aadAuthority
   */
  @javax.annotation.Nullable
  public String getAadAuthority() {
    return aadAuthority;
  }

  public void setAadAuthority(String aadAuthority) {
    this.aadAuthority = aadAuthority;
  }


  public IdentityInformation applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
   * @return applicationId
   */
  @javax.annotation.Nullable
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public IdentityInformation audience(String audience) {
    this.audience = audience;
    return this;
  }

  /**
   * The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
   * @return audience
   */
  @javax.annotation.Nullable
  public String getAudience() {
    return audience;
  }

  public void setAudience(String audience) {
    this.audience = audience;
  }


  public IdentityInformation certificateThumbprint(String certificateThumbprint) {
    this.certificateThumbprint = certificateThumbprint;
    return this;
  }

  /**
   * The certificate thumbprint. Applicable only if IdentityProviderType is RecoveryServicesActiveDirectory.
   * @return certificateThumbprint
   */
  @javax.annotation.Nullable
  public String getCertificateThumbprint() {
    return certificateThumbprint;
  }

  public void setCertificateThumbprint(String certificateThumbprint) {
    this.certificateThumbprint = certificateThumbprint;
  }


  public IdentityInformation identityProviderType(IdentityProviderTypeEnum identityProviderType) {
    this.identityProviderType = identityProviderType;
    return this;
  }

  /**
   * The identity provider type. Value is the ToString() of a IdentityProviderType value.
   * @return identityProviderType
   */
  @javax.annotation.Nullable
  public IdentityProviderTypeEnum getIdentityProviderType() {
    return identityProviderType;
  }

  public void setIdentityProviderType(IdentityProviderTypeEnum identityProviderType) {
    this.identityProviderType = identityProviderType;
  }


  public IdentityInformation objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
   * @return objectId
   */
  @javax.annotation.Nullable
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public IdentityInformation tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityInformation identityInformation = (IdentityInformation) o;
    return Objects.equals(this.aadAuthority, identityInformation.aadAuthority) &&
        Objects.equals(this.applicationId, identityInformation.applicationId) &&
        Objects.equals(this.audience, identityInformation.audience) &&
        Objects.equals(this.certificateThumbprint, identityInformation.certificateThumbprint) &&
        Objects.equals(this.identityProviderType, identityInformation.identityProviderType) &&
        Objects.equals(this.objectId, identityInformation.objectId) &&
        Objects.equals(this.tenantId, identityInformation.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aadAuthority, applicationId, audience, certificateThumbprint, identityProviderType, objectId, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityInformation {\n");
    sb.append("    aadAuthority: ").append(toIndentedString(aadAuthority)).append("\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    certificateThumbprint: ").append(toIndentedString(certificateThumbprint)).append("\n");
    sb.append("    identityProviderType: ").append(toIndentedString(identityProviderType)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aadAuthority");
    openapiFields.add("applicationId");
    openapiFields.add("audience");
    openapiFields.add("certificateThumbprint");
    openapiFields.add("identityProviderType");
    openapiFields.add("objectId");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentityInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentityInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentityInformation is not found in the empty JSON string", IdentityInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentityInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentityInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aadAuthority") != null && !jsonObj.get("aadAuthority").isJsonNull()) && !jsonObj.get("aadAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aadAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aadAuthority").toString()));
      }
      if ((jsonObj.get("applicationId") != null && !jsonObj.get("applicationId").isJsonNull()) && !jsonObj.get("applicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationId").toString()));
      }
      if ((jsonObj.get("audience") != null && !jsonObj.get("audience").isJsonNull()) && !jsonObj.get("audience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audience").toString()));
      }
      if ((jsonObj.get("certificateThumbprint") != null && !jsonObj.get("certificateThumbprint").isJsonNull()) && !jsonObj.get("certificateThumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateThumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateThumbprint").toString()));
      }
      if ((jsonObj.get("identityProviderType") != null && !jsonObj.get("identityProviderType").isJsonNull()) && !jsonObj.get("identityProviderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identityProviderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identityProviderType").toString()));
      }
      // validate the optional field `identityProviderType`
      if (jsonObj.get("identityProviderType") != null && !jsonObj.get("identityProviderType").isJsonNull()) {
        IdentityProviderTypeEnum.validateJsonElement(jsonObj.get("identityProviderType"));
      }
      if ((jsonObj.get("objectId") != null && !jsonObj.get("objectId").isJsonNull()) && !jsonObj.get("objectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectId").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentityInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentityInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentityInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentityInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentityInformation>() {
           @Override
           public void write(JsonWriter out, IdentityInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentityInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentityInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentityInformation
   * @throws IOException if the JSON string is invalid with respect to IdentityInformation
   */
  public static IdentityInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentityInformation.class);
  }

  /**
   * Convert an instance of IdentityInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

