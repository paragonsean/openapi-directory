/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateProtectionContainerMappingInput;
import org.openapitools.client.model.ProtectionContainerMapping;
import org.openapitools.client.model.ProtectionContainerMappingCollection;
import org.openapitools.client.model.RemoveProtectionContainerMappingInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReplicationProtectionContainerMappingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReplicationProtectionContainerMappingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReplicationProtectionContainerMappingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for replicationProtectionContainerMappingsCreate
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection container mapping name. (required)
     * @param creationInput Mapping creation input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainerMappingsCreateCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, CreateProtectionContainerMappingInput creationInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creationInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "mappingName" + "}", localVarApiClient.escapeString(mappingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectionContainerMappingsCreateValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, CreateProtectionContainerMappingInput creationInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectionContainerMappingsCreate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectionContainerMappingsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainerMappingsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainerMappingsCreate(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectionContainerMappingsCreate(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainerMappingsCreate(Async)");
        }

        // verify the required parameter 'mappingName' is set
        if (mappingName == null) {
            throw new ApiException("Missing the required parameter 'mappingName' when calling replicationProtectionContainerMappingsCreate(Async)");
        }

        // verify the required parameter 'creationInput' is set
        if (creationInput == null) {
            throw new ApiException("Missing the required parameter 'creationInput' when calling replicationProtectionContainerMappingsCreate(Async)");
        }

        return replicationProtectionContainerMappingsCreateCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, creationInput, _callback);

    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection container mapping name. (required)
     * @param creationInput Mapping creation input. (required)
     * @return ProtectionContainerMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ProtectionContainerMapping replicationProtectionContainerMappingsCreate(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, CreateProtectionContainerMappingInput creationInput) throws ApiException {
        ApiResponse<ProtectionContainerMapping> localVarResp = replicationProtectionContainerMappingsCreateWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, creationInput);
        return localVarResp.getData();
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection container mapping name. (required)
     * @param creationInput Mapping creation input. (required)
     * @return ApiResponse&lt;ProtectionContainerMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectionContainerMapping> replicationProtectionContainerMappingsCreateWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, CreateProtectionContainerMappingInput creationInput) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectionContainerMappingsCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, creationInput, null);
        Type localVarReturnType = new TypeToken<ProtectionContainerMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create protection container mapping. (asynchronously)
     * The operation to create a protection container mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection container mapping name. (required)
     * @param creationInput Mapping creation input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainerMappingsCreateAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, CreateProtectionContainerMappingInput creationInput, final ApiCallback<ProtectionContainerMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectionContainerMappingsCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, creationInput, _callback);
        Type localVarReturnType = new TypeToken<ProtectionContainerMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectionContainerMappingsDelete
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection container mapping name. (required)
     * @param removalInput Removal input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainerMappingsDeleteCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, RemoveProtectionContainerMappingInput removalInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removalInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}/remove"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "mappingName" + "}", localVarApiClient.escapeString(mappingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectionContainerMappingsDeleteValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, RemoveProtectionContainerMappingInput removalInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectionContainerMappingsDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectionContainerMappingsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainerMappingsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainerMappingsDelete(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectionContainerMappingsDelete(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainerMappingsDelete(Async)");
        }

        // verify the required parameter 'mappingName' is set
        if (mappingName == null) {
            throw new ApiException("Missing the required parameter 'mappingName' when calling replicationProtectionContainerMappingsDelete(Async)");
        }

        // verify the required parameter 'removalInput' is set
        if (removalInput == null) {
            throw new ApiException("Missing the required parameter 'removalInput' when calling replicationProtectionContainerMappingsDelete(Async)");
        }

        return replicationProtectionContainerMappingsDeleteCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, removalInput, _callback);

    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection container mapping name. (required)
     * @param removalInput Removal input. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void replicationProtectionContainerMappingsDelete(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, RemoveProtectionContainerMappingInput removalInput) throws ApiException {
        replicationProtectionContainerMappingsDeleteWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, removalInput);
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection container mapping name. (required)
     * @param removalInput Removal input. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replicationProtectionContainerMappingsDeleteWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, RemoveProtectionContainerMappingInput removalInput) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectionContainerMappingsDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, removalInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove protection container mapping. (asynchronously)
     * The operation to delete or remove a protection container mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection container mapping name. (required)
     * @param removalInput Removal input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainerMappingsDeleteAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, RemoveProtectionContainerMappingInput removalInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectionContainerMappingsDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, removalInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectionContainerMappingsGet
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection Container mapping name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainerMappingsGetCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "mappingName" + "}", localVarApiClient.escapeString(mappingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectionContainerMappingsGetValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectionContainerMappingsGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectionContainerMappingsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainerMappingsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainerMappingsGet(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectionContainerMappingsGet(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainerMappingsGet(Async)");
        }

        // verify the required parameter 'mappingName' is set
        if (mappingName == null) {
            throw new ApiException("Missing the required parameter 'mappingName' when calling replicationProtectionContainerMappingsGet(Async)");
        }

        return replicationProtectionContainerMappingsGetCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, _callback);

    }

    /**
     * Gets a protection container mapping/
     * Gets the details of a protection container mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection Container mapping name. (required)
     * @return ProtectionContainerMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProtectionContainerMapping replicationProtectionContainerMappingsGet(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName) throws ApiException {
        ApiResponse<ProtectionContainerMapping> localVarResp = replicationProtectionContainerMappingsGetWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName);
        return localVarResp.getData();
    }

    /**
     * Gets a protection container mapping/
     * Gets the details of a protection container mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection Container mapping name. (required)
     * @return ApiResponse&lt;ProtectionContainerMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectionContainerMapping> replicationProtectionContainerMappingsGetWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectionContainerMappingsGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, null);
        Type localVarReturnType = new TypeToken<ProtectionContainerMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a protection container mapping/ (asynchronously)
     * Gets the details of a protection container mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection Container mapping name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainerMappingsGetAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, final ApiCallback<ProtectionContainerMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectionContainerMappingsGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, _callback);
        Type localVarReturnType = new TypeToken<ProtectionContainerMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectionContainerMappingsList
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainerMappingsListCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainerMappings"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectionContainerMappingsListValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectionContainerMappingsList(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectionContainerMappingsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainerMappingsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainerMappingsList(Async)");
        }

        return replicationProtectionContainerMappingsListCall(apiVersion, resourceName, resourceGroupName, subscriptionId, _callback);

    }

    /**
     * Gets the list of all protection container mappings in a vault.
     * Lists the protection container mappings in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @return ProtectionContainerMappingCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProtectionContainerMappingCollection replicationProtectionContainerMappingsList(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId) throws ApiException {
        ApiResponse<ProtectionContainerMappingCollection> localVarResp = replicationProtectionContainerMappingsListWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Gets the list of all protection container mappings in a vault.
     * Lists the protection container mappings in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @return ApiResponse&lt;ProtectionContainerMappingCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectionContainerMappingCollection> replicationProtectionContainerMappingsListWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectionContainerMappingsListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ProtectionContainerMappingCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of all protection container mappings in a vault. (asynchronously)
     * Lists the protection container mappings in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainerMappingsListAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback<ProtectionContainerMappingCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectionContainerMappingsListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ProtectionContainerMappingCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectionContainerMappingsListByReplicationProtectionContainers
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainerMappingsListByReplicationProtectionContainersCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectionContainerMappingsListByReplicationProtectionContainersValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectionContainerMappingsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectionContainerMappingsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainerMappingsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainerMappingsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectionContainerMappingsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainerMappingsListByReplicationProtectionContainers(Async)");
        }

        return replicationProtectionContainerMappingsListByReplicationProtectionContainersCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, _callback);

    }

    /**
     * Gets the list of protection container mappings for a protection container.
     * Lists the protection container mappings for a protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @return ProtectionContainerMappingCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProtectionContainerMappingCollection replicationProtectionContainerMappingsListByReplicationProtectionContainers(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName) throws ApiException {
        ApiResponse<ProtectionContainerMappingCollection> localVarResp = replicationProtectionContainerMappingsListByReplicationProtectionContainersWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName);
        return localVarResp.getData();
    }

    /**
     * Gets the list of protection container mappings for a protection container.
     * Lists the protection container mappings for a protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @return ApiResponse&lt;ProtectionContainerMappingCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectionContainerMappingCollection> replicationProtectionContainerMappingsListByReplicationProtectionContainersWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectionContainerMappingsListByReplicationProtectionContainersValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, null);
        Type localVarReturnType = new TypeToken<ProtectionContainerMappingCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of protection container mappings for a protection container. (asynchronously)
     * Lists the protection container mappings for a protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainerMappingsListByReplicationProtectionContainersAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback<ProtectionContainerMappingCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectionContainerMappingsListByReplicationProtectionContainersValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, _callback);
        Type localVarReturnType = new TypeToken<ProtectionContainerMappingCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectionContainerMappingsPurge
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection container mapping name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainerMappingsPurgeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "mappingName" + "}", localVarApiClient.escapeString(mappingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectionContainerMappingsPurgeValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectionContainerMappingsPurge(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectionContainerMappingsPurge(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainerMappingsPurge(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainerMappingsPurge(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectionContainerMappingsPurge(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainerMappingsPurge(Async)");
        }

        // verify the required parameter 'mappingName' is set
        if (mappingName == null) {
            throw new ApiException("Missing the required parameter 'mappingName' when calling replicationProtectionContainerMappingsPurge(Async)");
        }

        return replicationProtectionContainerMappingsPurgeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, _callback);

    }

    /**
     * Purge protection container mapping.
     * The operation to purge(force delete) a protection container mapping
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection container mapping name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void replicationProtectionContainerMappingsPurge(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName) throws ApiException {
        replicationProtectionContainerMappingsPurgeWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName);
    }

    /**
     * Purge protection container mapping.
     * The operation to purge(force delete) a protection container mapping
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection container mapping name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replicationProtectionContainerMappingsPurgeWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectionContainerMappingsPurgeValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Purge protection container mapping. (asynchronously)
     * The operation to purge(force delete) a protection container mapping
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param mappingName Protection container mapping name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainerMappingsPurgeAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String mappingName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectionContainerMappingsPurgeValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
