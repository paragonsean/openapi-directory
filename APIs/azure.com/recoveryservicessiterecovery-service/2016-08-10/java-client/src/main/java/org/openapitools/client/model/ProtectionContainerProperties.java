/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProtectionContainerFabricSpecificDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Protection profile custom data details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:52.295489-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProtectionContainerProperties {
  public static final String SERIALIZED_NAME_FABRIC_FRIENDLY_NAME = "fabricFriendlyName";
  @SerializedName(SERIALIZED_NAME_FABRIC_FRIENDLY_NAME)
  private String fabricFriendlyName;

  public static final String SERIALIZED_NAME_FABRIC_SPECIFIC_DETAILS = "fabricSpecificDetails";
  @SerializedName(SERIALIZED_NAME_FABRIC_SPECIFIC_DETAILS)
  private ProtectionContainerFabricSpecificDetails fabricSpecificDetails;

  public static final String SERIALIZED_NAME_FABRIC_TYPE = "fabricType";
  @SerializedName(SERIALIZED_NAME_FABRIC_TYPE)
  private String fabricType;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_PAIRING_STATUS = "pairingStatus";
  @SerializedName(SERIALIZED_NAME_PAIRING_STATUS)
  private String pairingStatus;

  public static final String SERIALIZED_NAME_PROTECTED_ITEM_COUNT = "protectedItemCount";
  @SerializedName(SERIALIZED_NAME_PROTECTED_ITEM_COUNT)
  private Integer protectedItemCount;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public ProtectionContainerProperties() {
  }

  public ProtectionContainerProperties fabricFriendlyName(String fabricFriendlyName) {
    this.fabricFriendlyName = fabricFriendlyName;
    return this;
  }

  /**
   * Fabric friendly name.
   * @return fabricFriendlyName
   */
  @javax.annotation.Nullable
  public String getFabricFriendlyName() {
    return fabricFriendlyName;
  }

  public void setFabricFriendlyName(String fabricFriendlyName) {
    this.fabricFriendlyName = fabricFriendlyName;
  }


  public ProtectionContainerProperties fabricSpecificDetails(ProtectionContainerFabricSpecificDetails fabricSpecificDetails) {
    this.fabricSpecificDetails = fabricSpecificDetails;
    return this;
  }

  /**
   * Get fabricSpecificDetails
   * @return fabricSpecificDetails
   */
  @javax.annotation.Nullable
  public ProtectionContainerFabricSpecificDetails getFabricSpecificDetails() {
    return fabricSpecificDetails;
  }

  public void setFabricSpecificDetails(ProtectionContainerFabricSpecificDetails fabricSpecificDetails) {
    this.fabricSpecificDetails = fabricSpecificDetails;
  }


  public ProtectionContainerProperties fabricType(String fabricType) {
    this.fabricType = fabricType;
    return this;
  }

  /**
   * The fabric type.
   * @return fabricType
   */
  @javax.annotation.Nullable
  public String getFabricType() {
    return fabricType;
  }

  public void setFabricType(String fabricType) {
    this.fabricType = fabricType;
  }


  public ProtectionContainerProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The name.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public ProtectionContainerProperties pairingStatus(String pairingStatus) {
    this.pairingStatus = pairingStatus;
    return this;
  }

  /**
   * The pairing status of this cloud.
   * @return pairingStatus
   */
  @javax.annotation.Nullable
  public String getPairingStatus() {
    return pairingStatus;
  }

  public void setPairingStatus(String pairingStatus) {
    this.pairingStatus = pairingStatus;
  }


  public ProtectionContainerProperties protectedItemCount(Integer protectedItemCount) {
    this.protectedItemCount = protectedItemCount;
    return this;
  }

  /**
   * Number of protected PEs
   * @return protectedItemCount
   */
  @javax.annotation.Nullable
  public Integer getProtectedItemCount() {
    return protectedItemCount;
  }

  public void setProtectedItemCount(Integer protectedItemCount) {
    this.protectedItemCount = protectedItemCount;
  }


  public ProtectionContainerProperties role(String role) {
    this.role = role;
    return this;
  }

  /**
   * The role of this cloud.
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtectionContainerProperties protectionContainerProperties = (ProtectionContainerProperties) o;
    return Objects.equals(this.fabricFriendlyName, protectionContainerProperties.fabricFriendlyName) &&
        Objects.equals(this.fabricSpecificDetails, protectionContainerProperties.fabricSpecificDetails) &&
        Objects.equals(this.fabricType, protectionContainerProperties.fabricType) &&
        Objects.equals(this.friendlyName, protectionContainerProperties.friendlyName) &&
        Objects.equals(this.pairingStatus, protectionContainerProperties.pairingStatus) &&
        Objects.equals(this.protectedItemCount, protectionContainerProperties.protectedItemCount) &&
        Objects.equals(this.role, protectionContainerProperties.role);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fabricFriendlyName, fabricSpecificDetails, fabricType, friendlyName, pairingStatus, protectedItemCount, role);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtectionContainerProperties {\n");
    sb.append("    fabricFriendlyName: ").append(toIndentedString(fabricFriendlyName)).append("\n");
    sb.append("    fabricSpecificDetails: ").append(toIndentedString(fabricSpecificDetails)).append("\n");
    sb.append("    fabricType: ").append(toIndentedString(fabricType)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    pairingStatus: ").append(toIndentedString(pairingStatus)).append("\n");
    sb.append("    protectedItemCount: ").append(toIndentedString(protectedItemCount)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fabricFriendlyName");
    openapiFields.add("fabricSpecificDetails");
    openapiFields.add("fabricType");
    openapiFields.add("friendlyName");
    openapiFields.add("pairingStatus");
    openapiFields.add("protectedItemCount");
    openapiFields.add("role");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProtectionContainerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProtectionContainerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtectionContainerProperties is not found in the empty JSON string", ProtectionContainerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProtectionContainerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProtectionContainerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fabricFriendlyName") != null && !jsonObj.get("fabricFriendlyName").isJsonNull()) && !jsonObj.get("fabricFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fabricFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fabricFriendlyName").toString()));
      }
      // validate the optional field `fabricSpecificDetails`
      if (jsonObj.get("fabricSpecificDetails") != null && !jsonObj.get("fabricSpecificDetails").isJsonNull()) {
        ProtectionContainerFabricSpecificDetails.validateJsonElement(jsonObj.get("fabricSpecificDetails"));
      }
      if ((jsonObj.get("fabricType") != null && !jsonObj.get("fabricType").isJsonNull()) && !jsonObj.get("fabricType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fabricType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fabricType").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("pairingStatus") != null && !jsonObj.get("pairingStatus").isJsonNull()) && !jsonObj.get("pairingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pairingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pairingStatus").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProtectionContainerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProtectionContainerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProtectionContainerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProtectionContainerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ProtectionContainerProperties>() {
           @Override
           public void write(JsonWriter out, ProtectionContainerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProtectionContainerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProtectionContainerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProtectionContainerProperties
   * @throws IOException if the JSON string is invalid with respect to ProtectionContainerProperties
   */
  public static ProtectionContainerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtectionContainerProperties.class);
  }

  /**
   * Convert an instance of ProtectionContainerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

