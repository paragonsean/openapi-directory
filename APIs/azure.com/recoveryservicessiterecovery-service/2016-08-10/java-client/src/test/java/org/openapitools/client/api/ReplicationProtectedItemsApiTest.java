/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplyRecoveryPointInput;
import org.openapitools.client.model.DisableProtectionInput;
import org.openapitools.client.model.EnableProtectionInput;
import org.openapitools.client.model.PlannedFailoverInput;
import org.openapitools.client.model.ReplicationProtectedItem;
import org.openapitools.client.model.ReplicationProtectedItemCollection;
import org.openapitools.client.model.ReverseReplicationInput;
import org.openapitools.client.model.TestFailoverCleanupInput;
import org.openapitools.client.model.TestFailoverInput;
import org.openapitools.client.model.UnplannedFailoverInput;
import org.openapitools.client.model.UpdateMobilityServiceRequest;
import org.openapitools.client.model.UpdateReplicationProtectedItemInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReplicationProtectedItemsApi
 */
@Disabled
public class ReplicationProtectedItemsApiTest {

    private final ReplicationProtectedItemsApi api = new ReplicationProtectedItemsApi();

    /**
     * Change or apply recovery point.
     *
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsApplyRecoveryPointTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicatedProtectedItemName = null;
        ApplyRecoveryPointInput applyRecoveryPointInput = null;
        ReplicationProtectedItem response = api.replicationProtectedItemsApplyRecoveryPoint(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput);
        // TODO: test validations
    }

    /**
     * Enables protection.
     *
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsCreateTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicatedProtectedItemName = null;
        EnableProtectionInput input = null;
        ReplicationProtectedItem response = api.replicationProtectedItemsCreate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, input);
        // TODO: test validations
    }

    /**
     * Disables protection.
     *
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsDeleteTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicatedProtectedItemName = null;
        DisableProtectionInput disableProtectionInput = null;
        api.replicationProtectedItemsDelete(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput);
        // TODO: test validations
    }

    /**
     * Execute commit failover
     *
     * Operation to commit the failover of the replication protected item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsFailoverCommitTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicatedProtectedItemName = null;
        ReplicationProtectedItem response = api.replicationProtectedItemsFailoverCommit(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName);
        // TODO: test validations
    }

    /**
     * Gets the details of a Replication protected item.
     *
     * Gets the details of an ASR replication protected item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsGetTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicatedProtectedItemName = null;
        ReplicationProtectedItem response = api.replicationProtectedItemsGet(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName);
        // TODO: test validations
    }

    /**
     * Gets the list of replication protected items.
     *
     * Gets the list of ASR replication protected items in the vault.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsListTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String skipToken = null;
        String $filter = null;
        ReplicationProtectedItemCollection response = api.replicationProtectedItemsList(apiVersion, resourceName, resourceGroupName, subscriptionId, skipToken, $filter);
        // TODO: test validations
    }

    /**
     * Gets the list of Replication protected items.
     *
     * Gets the list of ASR replication protected items in the protection container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsListByReplicationProtectionContainersTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        ReplicationProtectedItemCollection response = api.replicationProtectedItemsListByReplicationProtectionContainers(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName);
        // TODO: test validations
    }

    /**
     * Execute planned failover
     *
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsPlannedFailoverTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicatedProtectedItemName = null;
        PlannedFailoverInput failoverInput = null;
        ReplicationProtectedItem response = api.replicationProtectedItemsPlannedFailover(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput);
        // TODO: test validations
    }

    /**
     * Purges protection.
     *
     * The operation to delete or purge a replication protected item. This operation will force delete the replication protected item. Use the remove operation on replication protected item to perform a clean disable replication for the item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsPurgeTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicatedProtectedItemName = null;
        api.replicationProtectedItemsPurge(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName);
        // TODO: test validations
    }

    /**
     * Resynchronize or repair replication.
     *
     * The operation to start resynchronize/repair replication for a replication protected item requiring resynchronization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsRepairReplicationTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicatedProtectedItemName = null;
        ReplicationProtectedItem response = api.replicationProtectedItemsRepairReplication(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName);
        // TODO: test validations
    }

    /**
     * Execute Reverse Replication\\Reprotect
     *
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsReprotectTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicatedProtectedItemName = null;
        ReverseReplicationInput rrInput = null;
        ReplicationProtectedItem response = api.replicationProtectedItemsReprotect(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, rrInput);
        // TODO: test validations
    }

    /**
     * Execute test failover
     *
     * Operation to perform a test failover of the replication protected item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsTestFailoverTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicatedProtectedItemName = null;
        TestFailoverInput failoverInput = null;
        ReplicationProtectedItem response = api.replicationProtectedItemsTestFailover(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput);
        // TODO: test validations
    }

    /**
     * Execute test failover cleanup.
     *
     * Operation to clean up the test failover of a replication protected item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsTestFailoverCleanupTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicatedProtectedItemName = null;
        TestFailoverCleanupInput cleanupInput = null;
        ReplicationProtectedItem response = api.replicationProtectedItemsTestFailoverCleanup(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, cleanupInput);
        // TODO: test validations
    }

    /**
     * Execute unplanned failover
     *
     * Operation to initiate a failover of the replication protected item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsUnplannedFailoverTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicatedProtectedItemName = null;
        UnplannedFailoverInput failoverInput = null;
        ReplicationProtectedItem response = api.replicationProtectedItemsUnplannedFailover(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput);
        // TODO: test validations
    }

    /**
     * Updates protection.
     *
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsUpdateTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicatedProtectedItemName = null;
        UpdateReplicationProtectedItemInput updateProtectionInput = null;
        ReplicationProtectedItem response = api.replicationProtectedItemsUpdate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput);
        // TODO: test validations
    }

    /**
     * Update the mobility service on a protected item.
     *
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationProtectedItemsUpdateMobilityServiceTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String fabricName = null;
        String protectionContainerName = null;
        String replicationProtectedItemName = null;
        UpdateMobilityServiceRequest updateMobilityServiceRequest = null;
        ReplicationProtectedItem response = api.replicationProtectedItemsUpdateMobilityService(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicationProtectedItemName, updateMobilityServiceRequest);
        // TODO: test validations
    }

}
