/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SiteRecoveryManagementClient);
  }
}(this, function(expect, SiteRecoveryManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HyperVReplicaAzureEnableProtectionInput', function() {
    it('should create an instance of HyperVReplicaAzureEnableProtectionInput', function() {
      // uncomment below and update the code to test HyperVReplicaAzureEnableProtectionInput
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be.a(SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput);
    });

    it('should have the property disksToInclude (base name: "disksToInclude")', function() {
      // uncomment below and update the code to test the property disksToInclude
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

    it('should have the property enableRDPOnTargetOption (base name: "enableRDPOnTargetOption")', function() {
      // uncomment below and update the code to test the property enableRDPOnTargetOption
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

    it('should have the property hvHostVmId (base name: "hvHostVmId")', function() {
      // uncomment below and update the code to test the property hvHostVmId
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

    it('should have the property logStorageAccountId (base name: "logStorageAccountId")', function() {
      // uncomment below and update the code to test the property logStorageAccountId
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

    it('should have the property osType (base name: "osType")', function() {
      // uncomment below and update the code to test the property osType
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

    it('should have the property targetAzureNetworkId (base name: "targetAzureNetworkId")', function() {
      // uncomment below and update the code to test the property targetAzureNetworkId
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

    it('should have the property targetAzureSubnetId (base name: "targetAzureSubnetId")', function() {
      // uncomment below and update the code to test the property targetAzureSubnetId
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

    it('should have the property targetAzureV1ResourceGroupId (base name: "targetAzureV1ResourceGroupId")', function() {
      // uncomment below and update the code to test the property targetAzureV1ResourceGroupId
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

    it('should have the property targetAzureV2ResourceGroupId (base name: "targetAzureV2ResourceGroupId")', function() {
      // uncomment below and update the code to test the property targetAzureV2ResourceGroupId
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

    it('should have the property targetAzureVmName (base name: "targetAzureVmName")', function() {
      // uncomment below and update the code to test the property targetAzureVmName
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

    it('should have the property targetStorageAccountId (base name: "targetStorageAccountId")', function() {
      // uncomment below and update the code to test the property targetStorageAccountId
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

    it('should have the property useManagedDisks (base name: "useManagedDisks")', function() {
      // uncomment below and update the code to test the property useManagedDisks
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

    it('should have the property vhdId (base name: "vhdId")', function() {
      // uncomment below and update the code to test the property vhdId
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

    it('should have the property vmName (base name: "vmName")', function() {
      // uncomment below and update the code to test the property vmName
      //var instance = new SiteRecoveryManagementClient.HyperVReplicaAzureEnableProtectionInput();
      //expect(instance).to.be();
    });

  });

}));
