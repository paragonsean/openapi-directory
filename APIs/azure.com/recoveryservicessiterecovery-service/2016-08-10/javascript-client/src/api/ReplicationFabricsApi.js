/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Fabric from '../model/Fabric';
import FabricCollection from '../model/FabricCollection';
import FabricCreationInput from '../model/FabricCreationInput';
import FailoverProcessServerRequest from '../model/FailoverProcessServerRequest';
import RenewCertificateInput from '../model/RenewCertificateInput';

/**
* ReplicationFabrics service.
* @module api/ReplicationFabricsApi
* @version 2016-08-10
*/
export default class ReplicationFabricsApi {

    /**
    * Constructs a new ReplicationFabricsApi. 
    * @alias module:api/ReplicationFabricsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the replicationFabricsCheckConsistency operation.
     * @callback module:api/ReplicationFabricsApi~replicationFabricsCheckConsistencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fabric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the consistency of the ASR fabric.
     * The operation to perform a consistency check on the fabric.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {module:api/ReplicationFabricsApi~replicationFabricsCheckConsistencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fabric}
     */
    replicationFabricsCheckConsistency(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationFabricsCheckConsistency");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationFabricsCheckConsistency");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationFabricsCheckConsistency");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationFabricsCheckConsistency");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationFabricsCheckConsistency");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Fabric;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/checkConsistency', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationFabricsCreate operation.
     * @callback module:api/ReplicationFabricsApi~replicationFabricsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fabric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site)
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Name of the ASR fabric.
     * @param {module:model/FabricCreationInput} input Fabric creation input.
     * @param {module:api/ReplicationFabricsApi~replicationFabricsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fabric}
     */
    replicationFabricsCreate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, input, callback) {
      let postBody = input;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationFabricsCreate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationFabricsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationFabricsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationFabricsCreate");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationFabricsCreate");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling replicationFabricsCreate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Fabric;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationFabricsDelete operation.
     * @callback module:api/ReplicationFabricsApi~replicationFabricsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the site.
     * The operation to delete or remove an Azure Site Recovery fabric.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName ASR fabric to delete
     * @param {module:api/ReplicationFabricsApi~replicationFabricsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicationFabricsDelete(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationFabricsDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationFabricsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationFabricsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationFabricsDelete");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationFabricsDelete");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationFabricsGet operation.
     * @callback module:api/ReplicationFabricsApi~replicationFabricsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fabric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of an ASR fabric.
     * Gets the details of an Azure Site Recovery fabric.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {module:api/ReplicationFabricsApi~replicationFabricsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fabric}
     */
    replicationFabricsGet(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationFabricsGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationFabricsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationFabricsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationFabricsGet");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationFabricsGet");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Fabric;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationFabricsList operation.
     * @callback module:api/ReplicationFabricsApi~replicationFabricsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FabricCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of ASR fabrics
     * Gets a list of the Azure Site Recovery fabrics in the vault.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {module:api/ReplicationFabricsApi~replicationFabricsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FabricCollection}
     */
    replicationFabricsList(apiVersion, resourceName, resourceGroupName, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationFabricsList");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationFabricsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationFabricsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationFabricsList");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FabricCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationFabricsMigrateToAad operation.
     * @callback module:api/ReplicationFabricsApi~replicationFabricsMigrateToAadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Migrates the site to AAD.
     * The operation to migrate an Azure Site Recovery fabric to AAD.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName ASR fabric to migrate.
     * @param {module:api/ReplicationFabricsApi~replicationFabricsMigrateToAadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicationFabricsMigrateToAad(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationFabricsMigrateToAad");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationFabricsMigrateToAad");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationFabricsMigrateToAad");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationFabricsMigrateToAad");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationFabricsMigrateToAad");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/migratetoaad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationFabricsPurge operation.
     * @callback module:api/ReplicationFabricsApi~replicationFabricsPurgeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purges the site.
     * The operation to purge(force delete) an Azure Site Recovery fabric.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName ASR fabric to purge.
     * @param {module:api/ReplicationFabricsApi~replicationFabricsPurgeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicationFabricsPurge(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationFabricsPurge");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationFabricsPurge");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationFabricsPurge");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationFabricsPurge");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationFabricsPurge");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationFabricsReassociateGateway operation.
     * @callback module:api/ReplicationFabricsApi~replicationFabricsReassociateGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fabric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName The name of the fabric containing the process server.
     * @param {module:model/FailoverProcessServerRequest} failoverProcessServerRequest The input to the failover process server operation.
     * @param {module:api/ReplicationFabricsApi~replicationFabricsReassociateGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fabric}
     */
    replicationFabricsReassociateGateway(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, failoverProcessServerRequest, callback) {
      let postBody = failoverProcessServerRequest;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationFabricsReassociateGateway");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationFabricsReassociateGateway");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationFabricsReassociateGateway");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationFabricsReassociateGateway");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationFabricsReassociateGateway");
      }
      // verify the required parameter 'failoverProcessServerRequest' is set
      if (failoverProcessServerRequest === undefined || failoverProcessServerRequest === null) {
        throw new Error("Missing the required parameter 'failoverProcessServerRequest' when calling replicationFabricsReassociateGateway");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Fabric;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/reassociateGateway', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationFabricsRenewCertificate operation.
     * @callback module:api/ReplicationFabricsApi~replicationFabricsRenewCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fabric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName fabric name to renew certs for.
     * @param {module:model/RenewCertificateInput} renewCertificate Renew certificate input.
     * @param {module:api/ReplicationFabricsApi~replicationFabricsRenewCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fabric}
     */
    replicationFabricsRenewCertificate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, renewCertificate, callback) {
      let postBody = renewCertificate;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationFabricsRenewCertificate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationFabricsRenewCertificate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationFabricsRenewCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationFabricsRenewCertificate");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationFabricsRenewCertificate");
      }
      // verify the required parameter 'renewCertificate' is set
      if (renewCertificate === undefined || renewCertificate === null) {
        throw new Error("Missing the required parameter 'renewCertificate' when calling replicationFabricsRenewCertificate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Fabric;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/renewCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
