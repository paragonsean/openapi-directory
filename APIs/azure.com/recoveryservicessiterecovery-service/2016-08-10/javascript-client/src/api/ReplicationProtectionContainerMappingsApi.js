/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateProtectionContainerMappingInput from '../model/CreateProtectionContainerMappingInput';
import ProtectionContainerMapping from '../model/ProtectionContainerMapping';
import ProtectionContainerMappingCollection from '../model/ProtectionContainerMappingCollection';
import RemoveProtectionContainerMappingInput from '../model/RemoveProtectionContainerMappingInput';

/**
* ReplicationProtectionContainerMappings service.
* @module api/ReplicationProtectionContainerMappingsApi
* @version 2016-08-10
*/
export default class ReplicationProtectionContainerMappingsApi {

    /**
    * Constructs a new ReplicationProtectionContainerMappingsApi. 
    * @alias module:api/ReplicationProtectionContainerMappingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the replicationProtectionContainerMappingsCreate operation.
     * @callback module:api/ReplicationProtectionContainerMappingsApi~replicationProtectionContainerMappingsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionContainerMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} mappingName Protection container mapping name.
     * @param {module:model/CreateProtectionContainerMappingInput} creationInput Mapping creation input.
     * @param {module:api/ReplicationProtectionContainerMappingsApi~replicationProtectionContainerMappingsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionContainerMapping}
     */
    replicationProtectionContainerMappingsCreate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, creationInput, callback) {
      let postBody = creationInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectionContainerMappingsCreate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectionContainerMappingsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainerMappingsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainerMappingsCreate");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectionContainerMappingsCreate");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainerMappingsCreate");
      }
      // verify the required parameter 'mappingName' is set
      if (mappingName === undefined || mappingName === null) {
        throw new Error("Missing the required parameter 'mappingName' when calling replicationProtectionContainerMappingsCreate");
      }
      // verify the required parameter 'creationInput' is set
      if (creationInput === undefined || creationInput === null) {
        throw new Error("Missing the required parameter 'creationInput' when calling replicationProtectionContainerMappingsCreate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'mappingName': mappingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProtectionContainerMapping;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectionContainerMappingsDelete operation.
     * @callback module:api/ReplicationProtectionContainerMappingsApi~replicationProtectionContainerMappingsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} mappingName Protection container mapping name.
     * @param {module:model/RemoveProtectionContainerMappingInput} removalInput Removal input.
     * @param {module:api/ReplicationProtectionContainerMappingsApi~replicationProtectionContainerMappingsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicationProtectionContainerMappingsDelete(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, removalInput, callback) {
      let postBody = removalInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectionContainerMappingsDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectionContainerMappingsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainerMappingsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainerMappingsDelete");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectionContainerMappingsDelete");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainerMappingsDelete");
      }
      // verify the required parameter 'mappingName' is set
      if (mappingName === undefined || mappingName === null) {
        throw new Error("Missing the required parameter 'mappingName' when calling replicationProtectionContainerMappingsDelete");
      }
      // verify the required parameter 'removalInput' is set
      if (removalInput === undefined || removalInput === null) {
        throw new Error("Missing the required parameter 'removalInput' when calling replicationProtectionContainerMappingsDelete");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'mappingName': mappingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectionContainerMappingsGet operation.
     * @callback module:api/ReplicationProtectionContainerMappingsApi~replicationProtectionContainerMappingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionContainerMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a protection container mapping/
     * Gets the details of a protection container mapping.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} mappingName Protection Container mapping name.
     * @param {module:api/ReplicationProtectionContainerMappingsApi~replicationProtectionContainerMappingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionContainerMapping}
     */
    replicationProtectionContainerMappingsGet(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectionContainerMappingsGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectionContainerMappingsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainerMappingsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainerMappingsGet");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectionContainerMappingsGet");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainerMappingsGet");
      }
      // verify the required parameter 'mappingName' is set
      if (mappingName === undefined || mappingName === null) {
        throw new Error("Missing the required parameter 'mappingName' when calling replicationProtectionContainerMappingsGet");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'mappingName': mappingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProtectionContainerMapping;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectionContainerMappingsList operation.
     * @callback module:api/ReplicationProtectionContainerMappingsApi~replicationProtectionContainerMappingsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionContainerMappingCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of all protection container mappings in a vault.
     * Lists the protection container mappings in the vault.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {module:api/ReplicationProtectionContainerMappingsApi~replicationProtectionContainerMappingsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionContainerMappingCollection}
     */
    replicationProtectionContainerMappingsList(apiVersion, resourceName, resourceGroupName, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectionContainerMappingsList");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectionContainerMappingsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainerMappingsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainerMappingsList");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProtectionContainerMappingCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainerMappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectionContainerMappingsListByReplicationProtectionContainers operation.
     * @callback module:api/ReplicationProtectionContainerMappingsApi~replicationProtectionContainerMappingsListByReplicationProtectionContainersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionContainerMappingCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of protection container mappings for a protection container.
     * Lists the protection container mappings for a protection container.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {module:api/ReplicationProtectionContainerMappingsApi~replicationProtectionContainerMappingsListByReplicationProtectionContainersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionContainerMappingCollection}
     */
    replicationProtectionContainerMappingsListByReplicationProtectionContainers(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectionContainerMappingsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectionContainerMappingsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainerMappingsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainerMappingsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectionContainerMappingsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainerMappingsListByReplicationProtectionContainers");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProtectionContainerMappingCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectionContainerMappingsPurge operation.
     * @callback module:api/ReplicationProtectionContainerMappingsApi~replicationProtectionContainerMappingsPurgeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purge protection container mapping.
     * The operation to purge(force delete) a protection container mapping
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} mappingName Protection container mapping name.
     * @param {module:api/ReplicationProtectionContainerMappingsApi~replicationProtectionContainerMappingsPurgeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicationProtectionContainerMappingsPurge(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, mappingName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectionContainerMappingsPurge");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectionContainerMappingsPurge");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainerMappingsPurge");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainerMappingsPurge");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectionContainerMappingsPurge");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainerMappingsPurge");
      }
      // verify the required parameter 'mappingName' is set
      if (mappingName === undefined || mappingName === null) {
        throw new Error("Missing the required parameter 'mappingName' when calling replicationProtectionContainerMappingsPurge");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'mappingName': mappingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
