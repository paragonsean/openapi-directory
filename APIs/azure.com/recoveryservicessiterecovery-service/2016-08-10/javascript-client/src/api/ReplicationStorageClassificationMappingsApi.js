/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StorageClassificationMapping from '../model/StorageClassificationMapping';
import StorageClassificationMappingCollection from '../model/StorageClassificationMappingCollection';
import StorageClassificationMappingInput from '../model/StorageClassificationMappingInput';

/**
* ReplicationStorageClassificationMappings service.
* @module api/ReplicationStorageClassificationMappingsApi
* @version 2016-08-10
*/
export default class ReplicationStorageClassificationMappingsApi {

    /**
    * Constructs a new ReplicationStorageClassificationMappingsApi. 
    * @alias module:api/ReplicationStorageClassificationMappingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the replicationStorageClassificationMappingsCreate operation.
     * @callback module:api/ReplicationStorageClassificationMappingsApi~replicationStorageClassificationMappingsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageClassificationMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} storageClassificationName Storage classification name.
     * @param {String} storageClassificationMappingName Storage classification mapping name.
     * @param {module:model/StorageClassificationMappingInput} pairingInput Pairing input.
     * @param {module:api/ReplicationStorageClassificationMappingsApi~replicationStorageClassificationMappingsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageClassificationMapping}
     */
    replicationStorageClassificationMappingsCreate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName, pairingInput, callback) {
      let postBody = pairingInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationStorageClassificationMappingsCreate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationStorageClassificationMappingsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationStorageClassificationMappingsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationStorageClassificationMappingsCreate");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationStorageClassificationMappingsCreate");
      }
      // verify the required parameter 'storageClassificationName' is set
      if (storageClassificationName === undefined || storageClassificationName === null) {
        throw new Error("Missing the required parameter 'storageClassificationName' when calling replicationStorageClassificationMappingsCreate");
      }
      // verify the required parameter 'storageClassificationMappingName' is set
      if (storageClassificationMappingName === undefined || storageClassificationMappingName === null) {
        throw new Error("Missing the required parameter 'storageClassificationMappingName' when calling replicationStorageClassificationMappingsCreate");
      }
      // verify the required parameter 'pairingInput' is set
      if (pairingInput === undefined || pairingInput === null) {
        throw new Error("Missing the required parameter 'pairingInput' when calling replicationStorageClassificationMappingsCreate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'storageClassificationName': storageClassificationName,
        'storageClassificationMappingName': storageClassificationMappingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageClassificationMapping;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationStorageClassificationMappingsDelete operation.
     * @callback module:api/ReplicationStorageClassificationMappingsApi~replicationStorageClassificationMappingsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a storage classification mapping.
     * The operation to delete a storage classification mapping.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} storageClassificationName Storage classification name.
     * @param {String} storageClassificationMappingName Storage classification mapping name.
     * @param {module:api/ReplicationStorageClassificationMappingsApi~replicationStorageClassificationMappingsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicationStorageClassificationMappingsDelete(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationStorageClassificationMappingsDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationStorageClassificationMappingsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationStorageClassificationMappingsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationStorageClassificationMappingsDelete");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationStorageClassificationMappingsDelete");
      }
      // verify the required parameter 'storageClassificationName' is set
      if (storageClassificationName === undefined || storageClassificationName === null) {
        throw new Error("Missing the required parameter 'storageClassificationName' when calling replicationStorageClassificationMappingsDelete");
      }
      // verify the required parameter 'storageClassificationMappingName' is set
      if (storageClassificationMappingName === undefined || storageClassificationMappingName === null) {
        throw new Error("Missing the required parameter 'storageClassificationMappingName' when calling replicationStorageClassificationMappingsDelete");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'storageClassificationName': storageClassificationName,
        'storageClassificationMappingName': storageClassificationMappingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationStorageClassificationMappingsGet operation.
     * @callback module:api/ReplicationStorageClassificationMappingsApi~replicationStorageClassificationMappingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageClassificationMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of a storage classification mapping.
     * Gets the details of the specified storage classification mapping.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} storageClassificationName Storage classification name.
     * @param {String} storageClassificationMappingName Storage classification mapping name.
     * @param {module:api/ReplicationStorageClassificationMappingsApi~replicationStorageClassificationMappingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageClassificationMapping}
     */
    replicationStorageClassificationMappingsGet(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationStorageClassificationMappingsGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationStorageClassificationMappingsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationStorageClassificationMappingsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationStorageClassificationMappingsGet");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationStorageClassificationMappingsGet");
      }
      // verify the required parameter 'storageClassificationName' is set
      if (storageClassificationName === undefined || storageClassificationName === null) {
        throw new Error("Missing the required parameter 'storageClassificationName' when calling replicationStorageClassificationMappingsGet");
      }
      // verify the required parameter 'storageClassificationMappingName' is set
      if (storageClassificationMappingName === undefined || storageClassificationMappingName === null) {
        throw new Error("Missing the required parameter 'storageClassificationMappingName' when calling replicationStorageClassificationMappingsGet");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'storageClassificationName': storageClassificationName,
        'storageClassificationMappingName': storageClassificationMappingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageClassificationMapping;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationStorageClassificationMappingsList operation.
     * @callback module:api/ReplicationStorageClassificationMappingsApi~replicationStorageClassificationMappingsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageClassificationMappingCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of storage classification mappings objects under a vault.
     * Lists the storage classification mappings in the vault.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {module:api/ReplicationStorageClassificationMappingsApi~replicationStorageClassificationMappingsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageClassificationMappingCollection}
     */
    replicationStorageClassificationMappingsList(apiVersion, resourceName, resourceGroupName, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationStorageClassificationMappingsList");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationStorageClassificationMappingsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationStorageClassificationMappingsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationStorageClassificationMappingsList");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageClassificationMappingCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationStorageClassificationMappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationStorageClassificationMappingsListByReplicationStorageClassifications operation.
     * @callback module:api/ReplicationStorageClassificationMappingsApi~replicationStorageClassificationMappingsListByReplicationStorageClassificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageClassificationMappingCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of storage classification mappings objects under a storage.
     * Lists the storage classification mappings for the fabric.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} storageClassificationName Storage classification name.
     * @param {module:api/ReplicationStorageClassificationMappingsApi~replicationStorageClassificationMappingsListByReplicationStorageClassificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageClassificationMappingCollection}
     */
    replicationStorageClassificationMappingsListByReplicationStorageClassifications(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationStorageClassificationMappingsListByReplicationStorageClassifications");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationStorageClassificationMappingsListByReplicationStorageClassifications");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationStorageClassificationMappingsListByReplicationStorageClassifications");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationStorageClassificationMappingsListByReplicationStorageClassifications");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationStorageClassificationMappingsListByReplicationStorageClassifications");
      }
      // verify the required parameter 'storageClassificationName' is set
      if (storageClassificationName === undefined || storageClassificationName === null) {
        throw new Error("Missing the required parameter 'storageClassificationName' when calling replicationStorageClassificationMappingsListByReplicationStorageClassifications");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'storageClassificationName': storageClassificationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageClassificationMappingCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
