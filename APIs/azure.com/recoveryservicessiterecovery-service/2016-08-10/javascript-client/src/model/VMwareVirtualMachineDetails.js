/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigurationSettings from './ConfigurationSettings';
import HealthError from './HealthError';
import InMageDiskDetails from './InMageDiskDetails';

/**
 * The VMwareVirtualMachineDetails model module.
 * @module model/VMwareVirtualMachineDetails
 * @version 2016-08-10
 */
class VMwareVirtualMachineDetails {
    /**
     * Constructs a new <code>VMwareVirtualMachineDetails</code>.
     * VMware provider specific settings
     * @alias module:model/VMwareVirtualMachineDetails
     * @extends module:model/ConfigurationSettings
     * @implements module:model/ConfigurationSettings
     */
    constructor() { 
        ConfigurationSettings.initialize(this);
        VMwareVirtualMachineDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VMwareVirtualMachineDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VMwareVirtualMachineDetails} obj Optional instance to populate.
     * @return {module:model/VMwareVirtualMachineDetails} The populated <code>VMwareVirtualMachineDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VMwareVirtualMachineDetails();
            ConfigurationSettings.constructFromObject(data, obj);
            ConfigurationSettings.constructFromObject(data, obj);

            if (data.hasOwnProperty('agentGeneratedId')) {
                obj['agentGeneratedId'] = ApiClient.convertToType(data['agentGeneratedId'], 'String');
            }
            if (data.hasOwnProperty('agentInstalled')) {
                obj['agentInstalled'] = ApiClient.convertToType(data['agentInstalled'], 'String');
            }
            if (data.hasOwnProperty('agentVersion')) {
                obj['agentVersion'] = ApiClient.convertToType(data['agentVersion'], 'String');
            }
            if (data.hasOwnProperty('discoveryType')) {
                obj['discoveryType'] = ApiClient.convertToType(data['discoveryType'], 'String');
            }
            if (data.hasOwnProperty('diskDetails')) {
                obj['diskDetails'] = ApiClient.convertToType(data['diskDetails'], [InMageDiskDetails]);
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('poweredOn')) {
                obj['poweredOn'] = ApiClient.convertToType(data['poweredOn'], 'String');
            }
            if (data.hasOwnProperty('vCenterInfrastructureId')) {
                obj['vCenterInfrastructureId'] = ApiClient.convertToType(data['vCenterInfrastructureId'], 'String');
            }
            if (data.hasOwnProperty('validationErrors')) {
                obj['validationErrors'] = ApiClient.convertToType(data['validationErrors'], [HealthError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VMwareVirtualMachineDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VMwareVirtualMachineDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['agentGeneratedId'] && !(typeof data['agentGeneratedId'] === 'string' || data['agentGeneratedId'] instanceof String)) {
            throw new Error("Expected the field `agentGeneratedId` to be a primitive type in the JSON string but got " + data['agentGeneratedId']);
        }
        // ensure the json data is a string
        if (data['agentInstalled'] && !(typeof data['agentInstalled'] === 'string' || data['agentInstalled'] instanceof String)) {
            throw new Error("Expected the field `agentInstalled` to be a primitive type in the JSON string but got " + data['agentInstalled']);
        }
        // ensure the json data is a string
        if (data['agentVersion'] && !(typeof data['agentVersion'] === 'string' || data['agentVersion'] instanceof String)) {
            throw new Error("Expected the field `agentVersion` to be a primitive type in the JSON string but got " + data['agentVersion']);
        }
        // ensure the json data is a string
        if (data['discoveryType'] && !(typeof data['discoveryType'] === 'string' || data['discoveryType'] instanceof String)) {
            throw new Error("Expected the field `discoveryType` to be a primitive type in the JSON string but got " + data['discoveryType']);
        }
        if (data['diskDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['diskDetails'])) {
                throw new Error("Expected the field `diskDetails` to be an array in the JSON data but got " + data['diskDetails']);
            }
            // validate the optional field `diskDetails` (array)
            for (const item of data['diskDetails']) {
                InMageDiskDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['poweredOn'] && !(typeof data['poweredOn'] === 'string' || data['poweredOn'] instanceof String)) {
            throw new Error("Expected the field `poweredOn` to be a primitive type in the JSON string but got " + data['poweredOn']);
        }
        // ensure the json data is a string
        if (data['vCenterInfrastructureId'] && !(typeof data['vCenterInfrastructureId'] === 'string' || data['vCenterInfrastructureId'] instanceof String)) {
            throw new Error("Expected the field `vCenterInfrastructureId` to be a primitive type in the JSON string but got " + data['vCenterInfrastructureId']);
        }
        if (data['validationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['validationErrors'])) {
                throw new Error("Expected the field `validationErrors` to be an array in the JSON data but got " + data['validationErrors']);
            }
            // validate the optional field `validationErrors` (array)
            for (const item of data['validationErrors']) {
                HealthError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The ID generated by the InMage agent after it gets installed on guest. This is the ID to be used during InMage CreateProtection.
 * @member {String} agentGeneratedId
 */
VMwareVirtualMachineDetails.prototype['agentGeneratedId'] = undefined;

/**
 * The value indicating if InMage scout agent is installed on guest.
 * @member {String} agentInstalled
 */
VMwareVirtualMachineDetails.prototype['agentInstalled'] = undefined;

/**
 * The agent version.
 * @member {String} agentVersion
 */
VMwareVirtualMachineDetails.prototype['agentVersion'] = undefined;

/**
 * A value indicating the discovery type of the machine. Value can be vCenter or physical.
 * @member {String} discoveryType
 */
VMwareVirtualMachineDetails.prototype['discoveryType'] = undefined;

/**
 * The disk details.
 * @member {Array.<module:model/InMageDiskDetails>} diskDetails
 */
VMwareVirtualMachineDetails.prototype['diskDetails'] = undefined;

/**
 * The IP address.
 * @member {String} ipAddress
 */
VMwareVirtualMachineDetails.prototype['ipAddress'] = undefined;

/**
 * The OsType installed on VM.
 * @member {String} osType
 */
VMwareVirtualMachineDetails.prototype['osType'] = undefined;

/**
 * The value indicating whether VM is powered on.
 * @member {String} poweredOn
 */
VMwareVirtualMachineDetails.prototype['poweredOn'] = undefined;

/**
 * The VCenter infrastructure Id.
 * @member {String} vCenterInfrastructureId
 */
VMwareVirtualMachineDetails.prototype['vCenterInfrastructureId'] = undefined;

/**
 * The validation errors.
 * @member {Array.<module:model/HealthError>} validationErrors
 */
VMwareVirtualMachineDetails.prototype['validationErrors'] = undefined;


// Implement ConfigurationSettings interface:
/**
 * Gets the class type. Overridden in derived classes.
 * @member {String} instanceType
 */
ConfigurationSettings.prototype['instanceType'] = undefined;




export default VMwareVirtualMachineDetails;

