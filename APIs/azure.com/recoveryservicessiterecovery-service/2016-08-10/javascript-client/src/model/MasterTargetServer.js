/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataStore from './DataStore';
import HealthError from './HealthError';
import RetentionVolume from './RetentionVolume';

/**
 * The MasterTargetServer model module.
 * @module model/MasterTargetServer
 * @version 2016-08-10
 */
class MasterTargetServer {
    /**
     * Constructs a new <code>MasterTargetServer</code>.
     * Details of a Master Target Server.
     * @alias module:model/MasterTargetServer
     */
    constructor() { 
        
        MasterTargetServer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MasterTargetServer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MasterTargetServer} obj Optional instance to populate.
     * @return {module:model/MasterTargetServer} The populated <code>MasterTargetServer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MasterTargetServer();

            if (data.hasOwnProperty('agentVersion')) {
                obj['agentVersion'] = ApiClient.convertToType(data['agentVersion'], 'String');
            }
            if (data.hasOwnProperty('dataStores')) {
                obj['dataStores'] = ApiClient.convertToType(data['dataStores'], [DataStore]);
            }
            if (data.hasOwnProperty('diskCount')) {
                obj['diskCount'] = ApiClient.convertToType(data['diskCount'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('lastHeartbeat')) {
                obj['lastHeartbeat'] = ApiClient.convertToType(data['lastHeartbeat'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('osVersion')) {
                obj['osVersion'] = ApiClient.convertToType(data['osVersion'], 'String');
            }
            if (data.hasOwnProperty('retentionVolumes')) {
                obj['retentionVolumes'] = ApiClient.convertToType(data['retentionVolumes'], [RetentionVolume]);
            }
            if (data.hasOwnProperty('validationErrors')) {
                obj['validationErrors'] = ApiClient.convertToType(data['validationErrors'], [HealthError]);
            }
            if (data.hasOwnProperty('versionStatus')) {
                obj['versionStatus'] = ApiClient.convertToType(data['versionStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MasterTargetServer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MasterTargetServer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['agentVersion'] && !(typeof data['agentVersion'] === 'string' || data['agentVersion'] instanceof String)) {
            throw new Error("Expected the field `agentVersion` to be a primitive type in the JSON string but got " + data['agentVersion']);
        }
        if (data['dataStores']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataStores'])) {
                throw new Error("Expected the field `dataStores` to be an array in the JSON data but got " + data['dataStores']);
            }
            // validate the optional field `dataStores` (array)
            for (const item of data['dataStores']) {
                DataStore.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['osVersion'] && !(typeof data['osVersion'] === 'string' || data['osVersion'] instanceof String)) {
            throw new Error("Expected the field `osVersion` to be a primitive type in the JSON string but got " + data['osVersion']);
        }
        if (data['retentionVolumes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['retentionVolumes'])) {
                throw new Error("Expected the field `retentionVolumes` to be an array in the JSON data but got " + data['retentionVolumes']);
            }
            // validate the optional field `retentionVolumes` (array)
            for (const item of data['retentionVolumes']) {
                RetentionVolume.validateJSON(item);
            };
        }
        if (data['validationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['validationErrors'])) {
                throw new Error("Expected the field `validationErrors` to be an array in the JSON data but got " + data['validationErrors']);
            }
            // validate the optional field `validationErrors` (array)
            for (const item of data['validationErrors']) {
                HealthError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['versionStatus'] && !(typeof data['versionStatus'] === 'string' || data['versionStatus'] instanceof String)) {
            throw new Error("Expected the field `versionStatus` to be a primitive type in the JSON string but got " + data['versionStatus']);
        }

        return true;
    }


}



/**
 * The version of the scout component on the server.
 * @member {String} agentVersion
 */
MasterTargetServer.prototype['agentVersion'] = undefined;

/**
 * The list of data stores in the fabric.
 * @member {Array.<module:model/DataStore>} dataStores
 */
MasterTargetServer.prototype['dataStores'] = undefined;

/**
 * Disk count of the master target.
 * @member {Number} diskCount
 */
MasterTargetServer.prototype['diskCount'] = undefined;

/**
 * The server Id.
 * @member {String} id
 */
MasterTargetServer.prototype['id'] = undefined;

/**
 * The IP address of the server.
 * @member {String} ipAddress
 */
MasterTargetServer.prototype['ipAddress'] = undefined;

/**
 * The last heartbeat received from the server.
 * @member {Date} lastHeartbeat
 */
MasterTargetServer.prototype['lastHeartbeat'] = undefined;

/**
 * The server name.
 * @member {String} name
 */
MasterTargetServer.prototype['name'] = undefined;

/**
 * The OS type of the server.
 * @member {String} osType
 */
MasterTargetServer.prototype['osType'] = undefined;

/**
 * OS Version of the master target.
 * @member {String} osVersion
 */
MasterTargetServer.prototype['osVersion'] = undefined;

/**
 * The retention volumes of Master target Server.
 * @member {Array.<module:model/RetentionVolume>} retentionVolumes
 */
MasterTargetServer.prototype['retentionVolumes'] = undefined;

/**
 * Validation errors.
 * @member {Array.<module:model/HealthError>} validationErrors
 */
MasterTargetServer.prototype['validationErrors'] = undefined;

/**
 * Version status
 * @member {String} versionStatus
 */
MasterTargetServer.prototype['versionStatus'] = undefined;






export default MasterTargetServer;

