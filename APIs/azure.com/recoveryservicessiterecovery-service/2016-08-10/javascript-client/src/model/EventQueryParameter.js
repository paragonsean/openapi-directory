/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventQueryParameter model module.
 * @module model/EventQueryParameter
 * @version 2016-08-10
 */
class EventQueryParameter {
    /**
     * Constructs a new <code>EventQueryParameter</code>.
     * Implements the event query parameter.
     * @alias module:model/EventQueryParameter
     */
    constructor() { 
        
        EventQueryParameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventQueryParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventQueryParameter} obj Optional instance to populate.
     * @return {module:model/EventQueryParameter} The populated <code>EventQueryParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventQueryParameter();

            if (data.hasOwnProperty('AffectedObjectFriendlyName')) {
                obj['AffectedObjectFriendlyName'] = ApiClient.convertToType(data['AffectedObjectFriendlyName'], 'String');
            }
            if (data.hasOwnProperty('EndTime')) {
                obj['EndTime'] = ApiClient.convertToType(data['EndTime'], 'Date');
            }
            if (data.hasOwnProperty('EventCode')) {
                obj['EventCode'] = ApiClient.convertToType(data['EventCode'], 'String');
            }
            if (data.hasOwnProperty('EventType')) {
                obj['EventType'] = ApiClient.convertToType(data['EventType'], 'String');
            }
            if (data.hasOwnProperty('FabricName')) {
                obj['FabricName'] = ApiClient.convertToType(data['FabricName'], 'String');
            }
            if (data.hasOwnProperty('Severity')) {
                obj['Severity'] = ApiClient.convertToType(data['Severity'], 'String');
            }
            if (data.hasOwnProperty('StartTime')) {
                obj['StartTime'] = ApiClient.convertToType(data['StartTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventQueryParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventQueryParameter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AffectedObjectFriendlyName'] && !(typeof data['AffectedObjectFriendlyName'] === 'string' || data['AffectedObjectFriendlyName'] instanceof String)) {
            throw new Error("Expected the field `AffectedObjectFriendlyName` to be a primitive type in the JSON string but got " + data['AffectedObjectFriendlyName']);
        }
        // ensure the json data is a string
        if (data['EventCode'] && !(typeof data['EventCode'] === 'string' || data['EventCode'] instanceof String)) {
            throw new Error("Expected the field `EventCode` to be a primitive type in the JSON string but got " + data['EventCode']);
        }
        // ensure the json data is a string
        if (data['EventType'] && !(typeof data['EventType'] === 'string' || data['EventType'] instanceof String)) {
            throw new Error("Expected the field `EventType` to be a primitive type in the JSON string but got " + data['EventType']);
        }
        // ensure the json data is a string
        if (data['FabricName'] && !(typeof data['FabricName'] === 'string' || data['FabricName'] instanceof String)) {
            throw new Error("Expected the field `FabricName` to be a primitive type in the JSON string but got " + data['FabricName']);
        }
        // ensure the json data is a string
        if (data['Severity'] && !(typeof data['Severity'] === 'string' || data['Severity'] instanceof String)) {
            throw new Error("Expected the field `Severity` to be a primitive type in the JSON string but got " + data['Severity']);
        }

        return true;
    }


}



/**
 * The affected object name of the events to be queried.
 * @member {String} AffectedObjectFriendlyName
 */
EventQueryParameter.prototype['AffectedObjectFriendlyName'] = undefined;

/**
 * The end time of the time range within which the events are to be queried.
 * @member {Date} EndTime
 */
EventQueryParameter.prototype['EndTime'] = undefined;

/**
 * The source id of the events to be queried.
 * @member {String} EventCode
 */
EventQueryParameter.prototype['EventCode'] = undefined;

/**
 * The type of the events to be queried.
 * @member {String} EventType
 */
EventQueryParameter.prototype['EventType'] = undefined;

/**
 * The affected object server id of the events to be queried.
 * @member {String} FabricName
 */
EventQueryParameter.prototype['FabricName'] = undefined;

/**
 * The severity of the events to be queried.
 * @member {String} Severity
 */
EventQueryParameter.prototype['Severity'] = undefined;

/**
 * The start time of the time range within which the events are to be queried.
 * @member {Date} StartTime
 */
EventQueryParameter.prototype['StartTime'] = undefined;






export default EventQueryParameter;

