/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ARMExceptionDetails model module.
 * @module model/ARMExceptionDetails
 * @version 2016-08-10
 */
class ARMExceptionDetails {
    /**
     * Constructs a new <code>ARMExceptionDetails</code>.
     * Service based exception details.
     * @alias module:model/ARMExceptionDetails
     */
    constructor() { 
        
        ARMExceptionDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ARMExceptionDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ARMExceptionDetails} obj Optional instance to populate.
     * @return {module:model/ARMExceptionDetails} The populated <code>ARMExceptionDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ARMExceptionDetails();

            if (data.hasOwnProperty('activityId')) {
                obj['activityId'] = ApiClient.convertToType(data['activityId'], 'String');
            }
            if (data.hasOwnProperty('clientRequestId')) {
                obj['clientRequestId'] = ApiClient.convertToType(data['clientRequestId'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('possibleCauses')) {
                obj['possibleCauses'] = ApiClient.convertToType(data['possibleCauses'], 'String');
            }
            if (data.hasOwnProperty('recommendedAction')) {
                obj['recommendedAction'] = ApiClient.convertToType(data['recommendedAction'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ARMExceptionDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ARMExceptionDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activityId'] && !(typeof data['activityId'] === 'string' || data['activityId'] instanceof String)) {
            throw new Error("Expected the field `activityId` to be a primitive type in the JSON string but got " + data['activityId']);
        }
        // ensure the json data is a string
        if (data['clientRequestId'] && !(typeof data['clientRequestId'] === 'string' || data['clientRequestId'] instanceof String)) {
            throw new Error("Expected the field `clientRequestId` to be a primitive type in the JSON string but got " + data['clientRequestId']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['possibleCauses'] && !(typeof data['possibleCauses'] === 'string' || data['possibleCauses'] instanceof String)) {
            throw new Error("Expected the field `possibleCauses` to be a primitive type in the JSON string but got " + data['possibleCauses']);
        }
        // ensure the json data is a string
        if (data['recommendedAction'] && !(typeof data['recommendedAction'] === 'string' || data['recommendedAction'] instanceof String)) {
            throw new Error("Expected the field `recommendedAction` to be a primitive type in the JSON string but got " + data['recommendedAction']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }

        return true;
    }


}



/**
 * Gets the activity Id for the session.
 * @member {String} activityId
 */
ARMExceptionDetails.prototype['activityId'] = undefined;

/**
 * Gets the client request Id for the session.
 * @member {String} clientRequestId
 */
ARMExceptionDetails.prototype['clientRequestId'] = undefined;

/**
 * Gets service error code.
 * @member {String} code
 */
ARMExceptionDetails.prototype['code'] = undefined;

/**
 * Gets error message.
 * @member {String} message
 */
ARMExceptionDetails.prototype['message'] = undefined;

/**
 * Gets possible cause for error.
 * @member {String} possibleCauses
 */
ARMExceptionDetails.prototype['possibleCauses'] = undefined;

/**
 * Gets recommended action for the error.
 * @member {String} recommendedAction
 */
ARMExceptionDetails.prototype['recommendedAction'] = undefined;

/**
 * Gets exception target.
 * @member {String} target
 */
ARMExceptionDetails.prototype['target'] = undefined;






export default ARMExceptionDetails;

