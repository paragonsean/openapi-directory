/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HealthError model module.
 * @module model/HealthError
 * @version 2016-08-10
 */
class HealthError {
    /**
     * Constructs a new <code>HealthError</code>.
     * Health Error
     * @alias module:model/HealthError
     */
    constructor() { 
        
        HealthError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HealthError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HealthError} obj Optional instance to populate.
     * @return {module:model/HealthError} The populated <code>HealthError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HealthError();

            if (data.hasOwnProperty('childErrors')) {
                obj['childErrors'] = ApiClient.convertToType(data['childErrors'], [HealthError]);
            }
            if (data.hasOwnProperty('creationTimeUtc')) {
                obj['creationTimeUtc'] = ApiClient.convertToType(data['creationTimeUtc'], 'Date');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('errorLevel')) {
                obj['errorLevel'] = ApiClient.convertToType(data['errorLevel'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('errorSource')) {
                obj['errorSource'] = ApiClient.convertToType(data['errorSource'], 'String');
            }
            if (data.hasOwnProperty('errorType')) {
                obj['errorType'] = ApiClient.convertToType(data['errorType'], 'String');
            }
            if (data.hasOwnProperty('possibleCauses')) {
                obj['possibleCauses'] = ApiClient.convertToType(data['possibleCauses'], 'String');
            }
            if (data.hasOwnProperty('recommendedAction')) {
                obj['recommendedAction'] = ApiClient.convertToType(data['recommendedAction'], 'String');
            }
            if (data.hasOwnProperty('recoveryProviderErrorMessage')) {
                obj['recoveryProviderErrorMessage'] = ApiClient.convertToType(data['recoveryProviderErrorMessage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HealthError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HealthError</code>.
     */
    static validateJSON(data) {
        if (data['childErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['childErrors'])) {
                throw new Error("Expected the field `childErrors` to be an array in the JSON data but got " + data['childErrors']);
            }
            // validate the optional field `childErrors` (array)
            for (const item of data['childErrors']) {
                HealthError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['errorCode'] && !(typeof data['errorCode'] === 'string' || data['errorCode'] instanceof String)) {
            throw new Error("Expected the field `errorCode` to be a primitive type in the JSON string but got " + data['errorCode']);
        }
        // ensure the json data is a string
        if (data['errorLevel'] && !(typeof data['errorLevel'] === 'string' || data['errorLevel'] instanceof String)) {
            throw new Error("Expected the field `errorLevel` to be a primitive type in the JSON string but got " + data['errorLevel']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['errorSource'] && !(typeof data['errorSource'] === 'string' || data['errorSource'] instanceof String)) {
            throw new Error("Expected the field `errorSource` to be a primitive type in the JSON string but got " + data['errorSource']);
        }
        // ensure the json data is a string
        if (data['errorType'] && !(typeof data['errorType'] === 'string' || data['errorType'] instanceof String)) {
            throw new Error("Expected the field `errorType` to be a primitive type in the JSON string but got " + data['errorType']);
        }
        // ensure the json data is a string
        if (data['possibleCauses'] && !(typeof data['possibleCauses'] === 'string' || data['possibleCauses'] instanceof String)) {
            throw new Error("Expected the field `possibleCauses` to be a primitive type in the JSON string but got " + data['possibleCauses']);
        }
        // ensure the json data is a string
        if (data['recommendedAction'] && !(typeof data['recommendedAction'] === 'string' || data['recommendedAction'] instanceof String)) {
            throw new Error("Expected the field `recommendedAction` to be a primitive type in the JSON string but got " + data['recommendedAction']);
        }
        // ensure the json data is a string
        if (data['recoveryProviderErrorMessage'] && !(typeof data['recoveryProviderErrorMessage'] === 'string' || data['recoveryProviderErrorMessage'] instanceof String)) {
            throw new Error("Expected the field `recoveryProviderErrorMessage` to be a primitive type in the JSON string but got " + data['recoveryProviderErrorMessage']);
        }

        return true;
    }


}



/**
 * The child health errors.
 * @member {Array.<module:model/HealthError>} childErrors
 */
HealthError.prototype['childErrors'] = undefined;

/**
 * Error creation time (UTC)
 * @member {Date} creationTimeUtc
 */
HealthError.prototype['creationTimeUtc'] = undefined;

/**
 * ID of the entity.
 * @member {String} entityId
 */
HealthError.prototype['entityId'] = undefined;

/**
 * Error code.
 * @member {String} errorCode
 */
HealthError.prototype['errorCode'] = undefined;

/**
 * Level of error.
 * @member {String} errorLevel
 */
HealthError.prototype['errorLevel'] = undefined;

/**
 * Error message.
 * @member {String} errorMessage
 */
HealthError.prototype['errorMessage'] = undefined;

/**
 * Source of error.
 * @member {String} errorSource
 */
HealthError.prototype['errorSource'] = undefined;

/**
 * Type of error.
 * @member {String} errorType
 */
HealthError.prototype['errorType'] = undefined;

/**
 * Possible causes of error.
 * @member {String} possibleCauses
 */
HealthError.prototype['possibleCauses'] = undefined;

/**
 * Recommended action to resolve error.
 * @member {String} recommendedAction
 */
HealthError.prototype['recommendedAction'] = undefined;

/**
 * DRA error message.
 * @member {String} recoveryProviderErrorMessage
 */
HealthError.prototype['recoveryProviderErrorMessage'] = undefined;






export default HealthError;

