/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiskVolumeDetails from './DiskVolumeDetails';

/**
 * The InMageDiskDetails model module.
 * @module model/InMageDiskDetails
 * @version 2016-08-10
 */
class InMageDiskDetails {
    /**
     * Constructs a new <code>InMageDiskDetails</code>.
     * VMware/Physical specific Disk Details
     * @alias module:model/InMageDiskDetails
     */
    constructor() { 
        
        InMageDiskDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InMageDiskDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InMageDiskDetails} obj Optional instance to populate.
     * @return {module:model/InMageDiskDetails} The populated <code>InMageDiskDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InMageDiskDetails();

            if (data.hasOwnProperty('diskConfiguration')) {
                obj['diskConfiguration'] = ApiClient.convertToType(data['diskConfiguration'], 'String');
            }
            if (data.hasOwnProperty('diskId')) {
                obj['diskId'] = ApiClient.convertToType(data['diskId'], 'String');
            }
            if (data.hasOwnProperty('diskName')) {
                obj['diskName'] = ApiClient.convertToType(data['diskName'], 'String');
            }
            if (data.hasOwnProperty('diskSizeInMB')) {
                obj['diskSizeInMB'] = ApiClient.convertToType(data['diskSizeInMB'], 'String');
            }
            if (data.hasOwnProperty('diskType')) {
                obj['diskType'] = ApiClient.convertToType(data['diskType'], 'String');
            }
            if (data.hasOwnProperty('volumeList')) {
                obj['volumeList'] = ApiClient.convertToType(data['volumeList'], [DiskVolumeDetails]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InMageDiskDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InMageDiskDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['diskConfiguration'] && !(typeof data['diskConfiguration'] === 'string' || data['diskConfiguration'] instanceof String)) {
            throw new Error("Expected the field `diskConfiguration` to be a primitive type in the JSON string but got " + data['diskConfiguration']);
        }
        // ensure the json data is a string
        if (data['diskId'] && !(typeof data['diskId'] === 'string' || data['diskId'] instanceof String)) {
            throw new Error("Expected the field `diskId` to be a primitive type in the JSON string but got " + data['diskId']);
        }
        // ensure the json data is a string
        if (data['diskName'] && !(typeof data['diskName'] === 'string' || data['diskName'] instanceof String)) {
            throw new Error("Expected the field `diskName` to be a primitive type in the JSON string but got " + data['diskName']);
        }
        // ensure the json data is a string
        if (data['diskSizeInMB'] && !(typeof data['diskSizeInMB'] === 'string' || data['diskSizeInMB'] instanceof String)) {
            throw new Error("Expected the field `diskSizeInMB` to be a primitive type in the JSON string but got " + data['diskSizeInMB']);
        }
        // ensure the json data is a string
        if (data['diskType'] && !(typeof data['diskType'] === 'string' || data['diskType'] instanceof String)) {
            throw new Error("Expected the field `diskType` to be a primitive type in the JSON string but got " + data['diskType']);
        }
        if (data['volumeList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumeList'])) {
                throw new Error("Expected the field `volumeList` to be an array in the JSON data but got " + data['volumeList']);
            }
            // validate the optional field `volumeList` (array)
            for (const item of data['volumeList']) {
                DiskVolumeDetails.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Whether disk is dynamic disk or basic disk.
 * @member {String} diskConfiguration
 */
InMageDiskDetails.prototype['diskConfiguration'] = undefined;

/**
 * The disk Id.
 * @member {String} diskId
 */
InMageDiskDetails.prototype['diskId'] = undefined;

/**
 * The disk name.
 * @member {String} diskName
 */
InMageDiskDetails.prototype['diskName'] = undefined;

/**
 * The disk size in MB.
 * @member {String} diskSizeInMB
 */
InMageDiskDetails.prototype['diskSizeInMB'] = undefined;

/**
 * Whether disk is system disk or data disk.
 * @member {String} diskType
 */
InMageDiskDetails.prototype['diskType'] = undefined;

/**
 * Volumes of the disk.
 * @member {Array.<module:model/DiskVolumeDetails>} volumeList
 */
InMageDiskDetails.prototype['volumeList'] = undefined;






export default InMageDiskDetails;

