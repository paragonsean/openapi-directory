/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataStore model module.
 * @module model/DataStore
 * @version 2016-08-10
 */
class DataStore {
    /**
     * Constructs a new <code>DataStore</code>.
     * The data store details of the MT.
     * @alias module:model/DataStore
     */
    constructor() { 
        
        DataStore.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataStore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataStore} obj Optional instance to populate.
     * @return {module:model/DataStore} The populated <code>DataStore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataStore();

            if (data.hasOwnProperty('capacity')) {
                obj['capacity'] = ApiClient.convertToType(data['capacity'], 'String');
            }
            if (data.hasOwnProperty('freeSpace')) {
                obj['freeSpace'] = ApiClient.convertToType(data['freeSpace'], 'String');
            }
            if (data.hasOwnProperty('symbolicName')) {
                obj['symbolicName'] = ApiClient.convertToType(data['symbolicName'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataStore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataStore</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['capacity'] && !(typeof data['capacity'] === 'string' || data['capacity'] instanceof String)) {
            throw new Error("Expected the field `capacity` to be a primitive type in the JSON string but got " + data['capacity']);
        }
        // ensure the json data is a string
        if (data['freeSpace'] && !(typeof data['freeSpace'] === 'string' || data['freeSpace'] instanceof String)) {
            throw new Error("Expected the field `freeSpace` to be a primitive type in the JSON string but got " + data['freeSpace']);
        }
        // ensure the json data is a string
        if (data['symbolicName'] && !(typeof data['symbolicName'] === 'string' || data['symbolicName'] instanceof String)) {
            throw new Error("Expected the field `symbolicName` to be a primitive type in the JSON string but got " + data['symbolicName']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}



/**
 * The capacity of data store in GBs.
 * @member {String} capacity
 */
DataStore.prototype['capacity'] = undefined;

/**
 * The free space of data store in GBs.
 * @member {String} freeSpace
 */
DataStore.prototype['freeSpace'] = undefined;

/**
 * The symbolic name of data store.
 * @member {String} symbolicName
 */
DataStore.prototype['symbolicName'] = undefined;

/**
 * The type of data store.
 * @member {String} type
 */
DataStore.prototype['type'] = undefined;

/**
 * The uuid of data store.
 * @member {String} uuid
 */
DataStore.prototype['uuid'] = undefined;






export default DataStore;

