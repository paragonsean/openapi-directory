/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReplicationFabricsApi_H
#define OAI_OAIReplicationFabricsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFabric.h"
#include "OAIFabricCollection.h"
#include "OAIFabricCreationInput.h"
#include "OAIFailoverProcessServerRequest.h"
#include "OAIRenewCertificateInput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReplicationFabricsApi : public QObject {
    Q_OBJECT

public:
    OAIReplicationFabricsApi(const int timeOut = 0);
    ~OAIReplicationFabricsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    */
    virtual void replicationFabricsCheckConsistency(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  input OAIFabricCreationInput [required]
    */
    virtual void replicationFabricsCreate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const OAIFabricCreationInput &input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    */
    virtual void replicationFabricsDelete(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    */
    virtual void replicationFabricsGet(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void replicationFabricsList(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    */
    virtual void replicationFabricsMigrateToAad(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    */
    virtual void replicationFabricsPurge(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  failover_process_server_request OAIFailoverProcessServerRequest [required]
    */
    virtual void replicationFabricsReassociateGateway(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const OAIFailoverProcessServerRequest &failover_process_server_request);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  renew_certificate OAIRenewCertificateInput [required]
    */
    virtual void replicationFabricsRenewCertificate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const OAIRenewCertificateInput &renew_certificate);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void replicationFabricsCheckConsistencyCallback(OAIHttpRequestWorker *worker);
    void replicationFabricsCreateCallback(OAIHttpRequestWorker *worker);
    void replicationFabricsDeleteCallback(OAIHttpRequestWorker *worker);
    void replicationFabricsGetCallback(OAIHttpRequestWorker *worker);
    void replicationFabricsListCallback(OAIHttpRequestWorker *worker);
    void replicationFabricsMigrateToAadCallback(OAIHttpRequestWorker *worker);
    void replicationFabricsPurgeCallback(OAIHttpRequestWorker *worker);
    void replicationFabricsReassociateGatewayCallback(OAIHttpRequestWorker *worker);
    void replicationFabricsRenewCertificateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void replicationFabricsCheckConsistencySignal(OAIFabric summary);
    void replicationFabricsCreateSignal(OAIFabric summary);
    void replicationFabricsDeleteSignal();
    void replicationFabricsGetSignal(OAIFabric summary);
    void replicationFabricsListSignal(OAIFabricCollection summary);
    void replicationFabricsMigrateToAadSignal();
    void replicationFabricsPurgeSignal();
    void replicationFabricsReassociateGatewaySignal(OAIFabric summary);
    void replicationFabricsRenewCertificateSignal(OAIFabric summary);


    void replicationFabricsCheckConsistencySignalFull(OAIHttpRequestWorker *worker, OAIFabric summary);
    void replicationFabricsCreateSignalFull(OAIHttpRequestWorker *worker, OAIFabric summary);
    void replicationFabricsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void replicationFabricsGetSignalFull(OAIHttpRequestWorker *worker, OAIFabric summary);
    void replicationFabricsListSignalFull(OAIHttpRequestWorker *worker, OAIFabricCollection summary);
    void replicationFabricsMigrateToAadSignalFull(OAIHttpRequestWorker *worker);
    void replicationFabricsPurgeSignalFull(OAIHttpRequestWorker *worker);
    void replicationFabricsReassociateGatewaySignalFull(OAIHttpRequestWorker *worker, OAIFabric summary);
    void replicationFabricsRenewCertificateSignalFull(OAIHttpRequestWorker *worker, OAIFabric summary);

    Q_DECL_DEPRECATED_X("Use replicationFabricsCheckConsistencySignalError() instead")
    void replicationFabricsCheckConsistencySignalE(OAIFabric summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsCheckConsistencySignalError(OAIFabric summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsCreateSignalError() instead")
    void replicationFabricsCreateSignalE(OAIFabric summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsCreateSignalError(OAIFabric summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsDeleteSignalError() instead")
    void replicationFabricsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsGetSignalError() instead")
    void replicationFabricsGetSignalE(OAIFabric summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsGetSignalError(OAIFabric summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsListSignalError() instead")
    void replicationFabricsListSignalE(OAIFabricCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsListSignalError(OAIFabricCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsMigrateToAadSignalError() instead")
    void replicationFabricsMigrateToAadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsMigrateToAadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsPurgeSignalError() instead")
    void replicationFabricsPurgeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsPurgeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsReassociateGatewaySignalError() instead")
    void replicationFabricsReassociateGatewaySignalE(OAIFabric summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsReassociateGatewaySignalError(OAIFabric summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsRenewCertificateSignalError() instead")
    void replicationFabricsRenewCertificateSignalE(OAIFabric summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsRenewCertificateSignalError(OAIFabric summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use replicationFabricsCheckConsistencySignalErrorFull() instead")
    void replicationFabricsCheckConsistencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsCheckConsistencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsCreateSignalErrorFull() instead")
    void replicationFabricsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsDeleteSignalErrorFull() instead")
    void replicationFabricsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsGetSignalErrorFull() instead")
    void replicationFabricsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsListSignalErrorFull() instead")
    void replicationFabricsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsMigrateToAadSignalErrorFull() instead")
    void replicationFabricsMigrateToAadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsMigrateToAadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsPurgeSignalErrorFull() instead")
    void replicationFabricsPurgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsPurgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsReassociateGatewaySignalErrorFull() instead")
    void replicationFabricsReassociateGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsReassociateGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationFabricsRenewCertificateSignalErrorFull() instead")
    void replicationFabricsRenewCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationFabricsRenewCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
