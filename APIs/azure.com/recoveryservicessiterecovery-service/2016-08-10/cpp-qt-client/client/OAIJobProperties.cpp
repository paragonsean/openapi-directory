/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobProperties::OAIJobProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobProperties::OAIJobProperties() {
    this->initializeModel();
}

OAIJobProperties::~OAIJobProperties() {}

void OAIJobProperties::initializeModel() {

    m_activity_id_isSet = false;
    m_activity_id_isValid = false;

    m_allowed_actions_isSet = false;
    m_allowed_actions_isValid = false;

    m_custom_details_isSet = false;
    m_custom_details_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_scenario_name_isSet = false;
    m_scenario_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_description_isSet = false;
    m_state_description_isValid = false;

    m_target_instance_type_isSet = false;
    m_target_instance_type_isValid = false;

    m_target_object_id_isSet = false;
    m_target_object_id_isValid = false;

    m_target_object_name_isSet = false;
    m_target_object_name_isValid = false;

    m_tasks_isSet = false;
    m_tasks_isValid = false;
}

void OAIJobProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobProperties::fromJsonObject(QJsonObject json) {

    m_activity_id_isValid = ::OpenAPI::fromJsonValue(m_activity_id, json[QString("activityId")]);
    m_activity_id_isSet = !json[QString("activityId")].isNull() && m_activity_id_isValid;

    m_allowed_actions_isValid = ::OpenAPI::fromJsonValue(m_allowed_actions, json[QString("allowedActions")]);
    m_allowed_actions_isSet = !json[QString("allowedActions")].isNull() && m_allowed_actions_isValid;

    m_custom_details_isValid = ::OpenAPI::fromJsonValue(m_custom_details, json[QString("customDetails")]);
    m_custom_details_isSet = !json[QString("customDetails")].isNull() && m_custom_details_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_scenario_name_isValid = ::OpenAPI::fromJsonValue(m_scenario_name, json[QString("scenarioName")]);
    m_scenario_name_isSet = !json[QString("scenarioName")].isNull() && m_scenario_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_description_isValid = ::OpenAPI::fromJsonValue(m_state_description, json[QString("stateDescription")]);
    m_state_description_isSet = !json[QString("stateDescription")].isNull() && m_state_description_isValid;

    m_target_instance_type_isValid = ::OpenAPI::fromJsonValue(m_target_instance_type, json[QString("targetInstanceType")]);
    m_target_instance_type_isSet = !json[QString("targetInstanceType")].isNull() && m_target_instance_type_isValid;

    m_target_object_id_isValid = ::OpenAPI::fromJsonValue(m_target_object_id, json[QString("targetObjectId")]);
    m_target_object_id_isSet = !json[QString("targetObjectId")].isNull() && m_target_object_id_isValid;

    m_target_object_name_isValid = ::OpenAPI::fromJsonValue(m_target_object_name, json[QString("targetObjectName")]);
    m_target_object_name_isSet = !json[QString("targetObjectName")].isNull() && m_target_object_name_isValid;

    m_tasks_isValid = ::OpenAPI::fromJsonValue(m_tasks, json[QString("tasks")]);
    m_tasks_isSet = !json[QString("tasks")].isNull() && m_tasks_isValid;
}

QString OAIJobProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_id_isSet) {
        obj.insert(QString("activityId"), ::OpenAPI::toJsonValue(m_activity_id));
    }
    if (m_allowed_actions.size() > 0) {
        obj.insert(QString("allowedActions"), ::OpenAPI::toJsonValue(m_allowed_actions));
    }
    if (m_custom_details.isSet()) {
        obj.insert(QString("customDetails"), ::OpenAPI::toJsonValue(m_custom_details));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_scenario_name_isSet) {
        obj.insert(QString("scenarioName"), ::OpenAPI::toJsonValue(m_scenario_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_description_isSet) {
        obj.insert(QString("stateDescription"), ::OpenAPI::toJsonValue(m_state_description));
    }
    if (m_target_instance_type_isSet) {
        obj.insert(QString("targetInstanceType"), ::OpenAPI::toJsonValue(m_target_instance_type));
    }
    if (m_target_object_id_isSet) {
        obj.insert(QString("targetObjectId"), ::OpenAPI::toJsonValue(m_target_object_id));
    }
    if (m_target_object_name_isSet) {
        obj.insert(QString("targetObjectName"), ::OpenAPI::toJsonValue(m_target_object_name));
    }
    if (m_tasks.size() > 0) {
        obj.insert(QString("tasks"), ::OpenAPI::toJsonValue(m_tasks));
    }
    return obj;
}

QString OAIJobProperties::getActivityId() const {
    return m_activity_id;
}
void OAIJobProperties::setActivityId(const QString &activity_id) {
    m_activity_id = activity_id;
    m_activity_id_isSet = true;
}

bool OAIJobProperties::is_activity_id_Set() const{
    return m_activity_id_isSet;
}

bool OAIJobProperties::is_activity_id_Valid() const{
    return m_activity_id_isValid;
}

QList<QString> OAIJobProperties::getAllowedActions() const {
    return m_allowed_actions;
}
void OAIJobProperties::setAllowedActions(const QList<QString> &allowed_actions) {
    m_allowed_actions = allowed_actions;
    m_allowed_actions_isSet = true;
}

bool OAIJobProperties::is_allowed_actions_Set() const{
    return m_allowed_actions_isSet;
}

bool OAIJobProperties::is_allowed_actions_Valid() const{
    return m_allowed_actions_isValid;
}

OAIJobDetails OAIJobProperties::getCustomDetails() const {
    return m_custom_details;
}
void OAIJobProperties::setCustomDetails(const OAIJobDetails &custom_details) {
    m_custom_details = custom_details;
    m_custom_details_isSet = true;
}

bool OAIJobProperties::is_custom_details_Set() const{
    return m_custom_details_isSet;
}

bool OAIJobProperties::is_custom_details_Valid() const{
    return m_custom_details_isValid;
}

QDateTime OAIJobProperties::getEndTime() const {
    return m_end_time;
}
void OAIJobProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIJobProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIJobProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<OAIJobErrorDetails> OAIJobProperties::getErrors() const {
    return m_errors;
}
void OAIJobProperties::setErrors(const QList<OAIJobErrorDetails> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIJobProperties::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIJobProperties::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIJobProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIJobProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIJobProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIJobProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIJobProperties::getScenarioName() const {
    return m_scenario_name;
}
void OAIJobProperties::setScenarioName(const QString &scenario_name) {
    m_scenario_name = scenario_name;
    m_scenario_name_isSet = true;
}

bool OAIJobProperties::is_scenario_name_Set() const{
    return m_scenario_name_isSet;
}

bool OAIJobProperties::is_scenario_name_Valid() const{
    return m_scenario_name_isValid;
}

QDateTime OAIJobProperties::getStartTime() const {
    return m_start_time;
}
void OAIJobProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJobProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJobProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIJobProperties::getState() const {
    return m_state;
}
void OAIJobProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIJobProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIJobProperties::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIJobProperties::getStateDescription() const {
    return m_state_description;
}
void OAIJobProperties::setStateDescription(const QString &state_description) {
    m_state_description = state_description;
    m_state_description_isSet = true;
}

bool OAIJobProperties::is_state_description_Set() const{
    return m_state_description_isSet;
}

bool OAIJobProperties::is_state_description_Valid() const{
    return m_state_description_isValid;
}

QString OAIJobProperties::getTargetInstanceType() const {
    return m_target_instance_type;
}
void OAIJobProperties::setTargetInstanceType(const QString &target_instance_type) {
    m_target_instance_type = target_instance_type;
    m_target_instance_type_isSet = true;
}

bool OAIJobProperties::is_target_instance_type_Set() const{
    return m_target_instance_type_isSet;
}

bool OAIJobProperties::is_target_instance_type_Valid() const{
    return m_target_instance_type_isValid;
}

QString OAIJobProperties::getTargetObjectId() const {
    return m_target_object_id;
}
void OAIJobProperties::setTargetObjectId(const QString &target_object_id) {
    m_target_object_id = target_object_id;
    m_target_object_id_isSet = true;
}

bool OAIJobProperties::is_target_object_id_Set() const{
    return m_target_object_id_isSet;
}

bool OAIJobProperties::is_target_object_id_Valid() const{
    return m_target_object_id_isValid;
}

QString OAIJobProperties::getTargetObjectName() const {
    return m_target_object_name;
}
void OAIJobProperties::setTargetObjectName(const QString &target_object_name) {
    m_target_object_name = target_object_name;
    m_target_object_name_isSet = true;
}

bool OAIJobProperties::is_target_object_name_Set() const{
    return m_target_object_name_isSet;
}

bool OAIJobProperties::is_target_object_name_Valid() const{
    return m_target_object_name_isValid;
}

QList<OAIASRTask> OAIJobProperties::getTasks() const {
    return m_tasks;
}
void OAIJobProperties::setTasks(const QList<OAIASRTask> &tasks) {
    m_tasks = tasks;
    m_tasks_isSet = true;
}

bool OAIJobProperties::is_tasks_Set() const{
    return m_tasks_isSet;
}

bool OAIJobProperties::is_tasks_Valid() const{
    return m_tasks_isValid;
}

bool OAIJobProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scenario_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_object_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
