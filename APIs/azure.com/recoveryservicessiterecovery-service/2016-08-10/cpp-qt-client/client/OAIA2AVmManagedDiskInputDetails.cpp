/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIA2AVmManagedDiskInputDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIA2AVmManagedDiskInputDetails::OAIA2AVmManagedDiskInputDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIA2AVmManagedDiskInputDetails::OAIA2AVmManagedDiskInputDetails() {
    this->initializeModel();
}

OAIA2AVmManagedDiskInputDetails::~OAIA2AVmManagedDiskInputDetails() {}

void OAIA2AVmManagedDiskInputDetails::initializeModel() {

    m_disk_id_isSet = false;
    m_disk_id_isValid = false;

    m_primary_staging_azure_storage_account_id_isSet = false;
    m_primary_staging_azure_storage_account_id_isValid = false;

    m_recovery_resource_group_id_isSet = false;
    m_recovery_resource_group_id_isValid = false;
}

void OAIA2AVmManagedDiskInputDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIA2AVmManagedDiskInputDetails::fromJsonObject(QJsonObject json) {

    m_disk_id_isValid = ::OpenAPI::fromJsonValue(m_disk_id, json[QString("diskId")]);
    m_disk_id_isSet = !json[QString("diskId")].isNull() && m_disk_id_isValid;

    m_primary_staging_azure_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_primary_staging_azure_storage_account_id, json[QString("primaryStagingAzureStorageAccountId")]);
    m_primary_staging_azure_storage_account_id_isSet = !json[QString("primaryStagingAzureStorageAccountId")].isNull() && m_primary_staging_azure_storage_account_id_isValid;

    m_recovery_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_resource_group_id, json[QString("recoveryResourceGroupId")]);
    m_recovery_resource_group_id_isSet = !json[QString("recoveryResourceGroupId")].isNull() && m_recovery_resource_group_id_isValid;
}

QString OAIA2AVmManagedDiskInputDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIA2AVmManagedDiskInputDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_id_isSet) {
        obj.insert(QString("diskId"), ::OpenAPI::toJsonValue(m_disk_id));
    }
    if (m_primary_staging_azure_storage_account_id_isSet) {
        obj.insert(QString("primaryStagingAzureStorageAccountId"), ::OpenAPI::toJsonValue(m_primary_staging_azure_storage_account_id));
    }
    if (m_recovery_resource_group_id_isSet) {
        obj.insert(QString("recoveryResourceGroupId"), ::OpenAPI::toJsonValue(m_recovery_resource_group_id));
    }
    return obj;
}

QString OAIA2AVmManagedDiskInputDetails::getDiskId() const {
    return m_disk_id;
}
void OAIA2AVmManagedDiskInputDetails::setDiskId(const QString &disk_id) {
    m_disk_id = disk_id;
    m_disk_id_isSet = true;
}

bool OAIA2AVmManagedDiskInputDetails::is_disk_id_Set() const{
    return m_disk_id_isSet;
}

bool OAIA2AVmManagedDiskInputDetails::is_disk_id_Valid() const{
    return m_disk_id_isValid;
}

QString OAIA2AVmManagedDiskInputDetails::getPrimaryStagingAzureStorageAccountId() const {
    return m_primary_staging_azure_storage_account_id;
}
void OAIA2AVmManagedDiskInputDetails::setPrimaryStagingAzureStorageAccountId(const QString &primary_staging_azure_storage_account_id) {
    m_primary_staging_azure_storage_account_id = primary_staging_azure_storage_account_id;
    m_primary_staging_azure_storage_account_id_isSet = true;
}

bool OAIA2AVmManagedDiskInputDetails::is_primary_staging_azure_storage_account_id_Set() const{
    return m_primary_staging_azure_storage_account_id_isSet;
}

bool OAIA2AVmManagedDiskInputDetails::is_primary_staging_azure_storage_account_id_Valid() const{
    return m_primary_staging_azure_storage_account_id_isValid;
}

QString OAIA2AVmManagedDiskInputDetails::getRecoveryResourceGroupId() const {
    return m_recovery_resource_group_id;
}
void OAIA2AVmManagedDiskInputDetails::setRecoveryResourceGroupId(const QString &recovery_resource_group_id) {
    m_recovery_resource_group_id = recovery_resource_group_id;
    m_recovery_resource_group_id_isSet = true;
}

bool OAIA2AVmManagedDiskInputDetails::is_recovery_resource_group_id_Set() const{
    return m_recovery_resource_group_id_isSet;
}

bool OAIA2AVmManagedDiskInputDetails::is_recovery_resource_group_id_Valid() const{
    return m_recovery_resource_group_id_isValid;
}

bool OAIA2AVmManagedDiskInputDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_staging_azure_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIA2AVmManagedDiskInputDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
