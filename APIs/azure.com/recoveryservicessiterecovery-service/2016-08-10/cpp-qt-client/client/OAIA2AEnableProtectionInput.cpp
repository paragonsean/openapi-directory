/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIA2AEnableProtectionInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIA2AEnableProtectionInput::OAIA2AEnableProtectionInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIA2AEnableProtectionInput::OAIA2AEnableProtectionInput() {
    this->initializeModel();
}

OAIA2AEnableProtectionInput::~OAIA2AEnableProtectionInput() {}

void OAIA2AEnableProtectionInput::initializeModel() {

    m_fabric_object_id_isSet = false;
    m_fabric_object_id_isValid = false;

    m_recovery_availability_set_id_isSet = false;
    m_recovery_availability_set_id_isValid = false;

    m_recovery_cloud_service_id_isSet = false;
    m_recovery_cloud_service_id_isValid = false;

    m_recovery_container_id_isSet = false;
    m_recovery_container_id_isValid = false;

    m_recovery_resource_group_id_isSet = false;
    m_recovery_resource_group_id_isValid = false;

    m_vm_disks_isSet = false;
    m_vm_disks_isValid = false;

    m_vm_managed_disks_isSet = false;
    m_vm_managed_disks_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIA2AEnableProtectionInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIA2AEnableProtectionInput::fromJsonObject(QJsonObject json) {

    m_fabric_object_id_isValid = ::OpenAPI::fromJsonValue(m_fabric_object_id, json[QString("fabricObjectId")]);
    m_fabric_object_id_isSet = !json[QString("fabricObjectId")].isNull() && m_fabric_object_id_isValid;

    m_recovery_availability_set_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_availability_set_id, json[QString("recoveryAvailabilitySetId")]);
    m_recovery_availability_set_id_isSet = !json[QString("recoveryAvailabilitySetId")].isNull() && m_recovery_availability_set_id_isValid;

    m_recovery_cloud_service_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_cloud_service_id, json[QString("recoveryCloudServiceId")]);
    m_recovery_cloud_service_id_isSet = !json[QString("recoveryCloudServiceId")].isNull() && m_recovery_cloud_service_id_isValid;

    m_recovery_container_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_container_id, json[QString("recoveryContainerId")]);
    m_recovery_container_id_isSet = !json[QString("recoveryContainerId")].isNull() && m_recovery_container_id_isValid;

    m_recovery_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_resource_group_id, json[QString("recoveryResourceGroupId")]);
    m_recovery_resource_group_id_isSet = !json[QString("recoveryResourceGroupId")].isNull() && m_recovery_resource_group_id_isValid;

    m_vm_disks_isValid = ::OpenAPI::fromJsonValue(m_vm_disks, json[QString("vmDisks")]);
    m_vm_disks_isSet = !json[QString("vmDisks")].isNull() && m_vm_disks_isValid;

    m_vm_managed_disks_isValid = ::OpenAPI::fromJsonValue(m_vm_managed_disks, json[QString("vmManagedDisks")]);
    m_vm_managed_disks_isSet = !json[QString("vmManagedDisks")].isNull() && m_vm_managed_disks_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIA2AEnableProtectionInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIA2AEnableProtectionInput::asJsonObject() const {
    QJsonObject obj;
    if (m_fabric_object_id_isSet) {
        obj.insert(QString("fabricObjectId"), ::OpenAPI::toJsonValue(m_fabric_object_id));
    }
    if (m_recovery_availability_set_id_isSet) {
        obj.insert(QString("recoveryAvailabilitySetId"), ::OpenAPI::toJsonValue(m_recovery_availability_set_id));
    }
    if (m_recovery_cloud_service_id_isSet) {
        obj.insert(QString("recoveryCloudServiceId"), ::OpenAPI::toJsonValue(m_recovery_cloud_service_id));
    }
    if (m_recovery_container_id_isSet) {
        obj.insert(QString("recoveryContainerId"), ::OpenAPI::toJsonValue(m_recovery_container_id));
    }
    if (m_recovery_resource_group_id_isSet) {
        obj.insert(QString("recoveryResourceGroupId"), ::OpenAPI::toJsonValue(m_recovery_resource_group_id));
    }
    if (m_vm_disks.size() > 0) {
        obj.insert(QString("vmDisks"), ::OpenAPI::toJsonValue(m_vm_disks));
    }
    if (m_vm_managed_disks.size() > 0) {
        obj.insert(QString("vmManagedDisks"), ::OpenAPI::toJsonValue(m_vm_managed_disks));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIA2AEnableProtectionInput::getFabricObjectId() const {
    return m_fabric_object_id;
}
void OAIA2AEnableProtectionInput::setFabricObjectId(const QString &fabric_object_id) {
    m_fabric_object_id = fabric_object_id;
    m_fabric_object_id_isSet = true;
}

bool OAIA2AEnableProtectionInput::is_fabric_object_id_Set() const{
    return m_fabric_object_id_isSet;
}

bool OAIA2AEnableProtectionInput::is_fabric_object_id_Valid() const{
    return m_fabric_object_id_isValid;
}

QString OAIA2AEnableProtectionInput::getRecoveryAvailabilitySetId() const {
    return m_recovery_availability_set_id;
}
void OAIA2AEnableProtectionInput::setRecoveryAvailabilitySetId(const QString &recovery_availability_set_id) {
    m_recovery_availability_set_id = recovery_availability_set_id;
    m_recovery_availability_set_id_isSet = true;
}

bool OAIA2AEnableProtectionInput::is_recovery_availability_set_id_Set() const{
    return m_recovery_availability_set_id_isSet;
}

bool OAIA2AEnableProtectionInput::is_recovery_availability_set_id_Valid() const{
    return m_recovery_availability_set_id_isValid;
}

QString OAIA2AEnableProtectionInput::getRecoveryCloudServiceId() const {
    return m_recovery_cloud_service_id;
}
void OAIA2AEnableProtectionInput::setRecoveryCloudServiceId(const QString &recovery_cloud_service_id) {
    m_recovery_cloud_service_id = recovery_cloud_service_id;
    m_recovery_cloud_service_id_isSet = true;
}

bool OAIA2AEnableProtectionInput::is_recovery_cloud_service_id_Set() const{
    return m_recovery_cloud_service_id_isSet;
}

bool OAIA2AEnableProtectionInput::is_recovery_cloud_service_id_Valid() const{
    return m_recovery_cloud_service_id_isValid;
}

QString OAIA2AEnableProtectionInput::getRecoveryContainerId() const {
    return m_recovery_container_id;
}
void OAIA2AEnableProtectionInput::setRecoveryContainerId(const QString &recovery_container_id) {
    m_recovery_container_id = recovery_container_id;
    m_recovery_container_id_isSet = true;
}

bool OAIA2AEnableProtectionInput::is_recovery_container_id_Set() const{
    return m_recovery_container_id_isSet;
}

bool OAIA2AEnableProtectionInput::is_recovery_container_id_Valid() const{
    return m_recovery_container_id_isValid;
}

QString OAIA2AEnableProtectionInput::getRecoveryResourceGroupId() const {
    return m_recovery_resource_group_id;
}
void OAIA2AEnableProtectionInput::setRecoveryResourceGroupId(const QString &recovery_resource_group_id) {
    m_recovery_resource_group_id = recovery_resource_group_id;
    m_recovery_resource_group_id_isSet = true;
}

bool OAIA2AEnableProtectionInput::is_recovery_resource_group_id_Set() const{
    return m_recovery_resource_group_id_isSet;
}

bool OAIA2AEnableProtectionInput::is_recovery_resource_group_id_Valid() const{
    return m_recovery_resource_group_id_isValid;
}

QList<OAIA2AVmDiskInputDetails> OAIA2AEnableProtectionInput::getVmDisks() const {
    return m_vm_disks;
}
void OAIA2AEnableProtectionInput::setVmDisks(const QList<OAIA2AVmDiskInputDetails> &vm_disks) {
    m_vm_disks = vm_disks;
    m_vm_disks_isSet = true;
}

bool OAIA2AEnableProtectionInput::is_vm_disks_Set() const{
    return m_vm_disks_isSet;
}

bool OAIA2AEnableProtectionInput::is_vm_disks_Valid() const{
    return m_vm_disks_isValid;
}

QList<OAIA2AVmManagedDiskInputDetails> OAIA2AEnableProtectionInput::getVmManagedDisks() const {
    return m_vm_managed_disks;
}
void OAIA2AEnableProtectionInput::setVmManagedDisks(const QList<OAIA2AVmManagedDiskInputDetails> &vm_managed_disks) {
    m_vm_managed_disks = vm_managed_disks;
    m_vm_managed_disks_isSet = true;
}

bool OAIA2AEnableProtectionInput::is_vm_managed_disks_Set() const{
    return m_vm_managed_disks_isSet;
}

bool OAIA2AEnableProtectionInput::is_vm_managed_disks_Valid() const{
    return m_vm_managed_disks_isValid;
}

QString OAIA2AEnableProtectionInput::getInstanceType() const {
    return m_instance_type;
}
void OAIA2AEnableProtectionInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIA2AEnableProtectionInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIA2AEnableProtectionInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIA2AEnableProtectionInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fabric_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_availability_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_cloud_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_managed_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIA2AEnableProtectionInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
