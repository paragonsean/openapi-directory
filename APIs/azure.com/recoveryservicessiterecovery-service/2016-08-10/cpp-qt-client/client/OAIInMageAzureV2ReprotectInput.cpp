/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInMageAzureV2ReprotectInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInMageAzureV2ReprotectInput::OAIInMageAzureV2ReprotectInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInMageAzureV2ReprotectInput::OAIInMageAzureV2ReprotectInput() {
    this->initializeModel();
}

OAIInMageAzureV2ReprotectInput::~OAIInMageAzureV2ReprotectInput() {}

void OAIInMageAzureV2ReprotectInput::initializeModel() {

    m_disks_to_include_isSet = false;
    m_disks_to_include_isValid = false;

    m_log_storage_account_id_isSet = false;
    m_log_storage_account_id_isValid = false;

    m_master_target_id_isSet = false;
    m_master_target_id_isValid = false;

    m_policy_id_isSet = false;
    m_policy_id_isValid = false;

    m_process_server_id_isSet = false;
    m_process_server_id_isValid = false;

    m_run_as_account_id_isSet = false;
    m_run_as_account_id_isValid = false;

    m_storage_account_id_isSet = false;
    m_storage_account_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIInMageAzureV2ReprotectInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInMageAzureV2ReprotectInput::fromJsonObject(QJsonObject json) {

    m_disks_to_include_isValid = ::OpenAPI::fromJsonValue(m_disks_to_include, json[QString("disksToInclude")]);
    m_disks_to_include_isSet = !json[QString("disksToInclude")].isNull() && m_disks_to_include_isValid;

    m_log_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_log_storage_account_id, json[QString("logStorageAccountId")]);
    m_log_storage_account_id_isSet = !json[QString("logStorageAccountId")].isNull() && m_log_storage_account_id_isValid;

    m_master_target_id_isValid = ::OpenAPI::fromJsonValue(m_master_target_id, json[QString("masterTargetId")]);
    m_master_target_id_isSet = !json[QString("masterTargetId")].isNull() && m_master_target_id_isValid;

    m_policy_id_isValid = ::OpenAPI::fromJsonValue(m_policy_id, json[QString("policyId")]);
    m_policy_id_isSet = !json[QString("policyId")].isNull() && m_policy_id_isValid;

    m_process_server_id_isValid = ::OpenAPI::fromJsonValue(m_process_server_id, json[QString("processServerId")]);
    m_process_server_id_isSet = !json[QString("processServerId")].isNull() && m_process_server_id_isValid;

    m_run_as_account_id_isValid = ::OpenAPI::fromJsonValue(m_run_as_account_id, json[QString("runAsAccountId")]);
    m_run_as_account_id_isSet = !json[QString("runAsAccountId")].isNull() && m_run_as_account_id_isValid;

    m_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_id, json[QString("storageAccountId")]);
    m_storage_account_id_isSet = !json[QString("storageAccountId")].isNull() && m_storage_account_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIInMageAzureV2ReprotectInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInMageAzureV2ReprotectInput::asJsonObject() const {
    QJsonObject obj;
    if (m_disks_to_include.size() > 0) {
        obj.insert(QString("disksToInclude"), ::OpenAPI::toJsonValue(m_disks_to_include));
    }
    if (m_log_storage_account_id_isSet) {
        obj.insert(QString("logStorageAccountId"), ::OpenAPI::toJsonValue(m_log_storage_account_id));
    }
    if (m_master_target_id_isSet) {
        obj.insert(QString("masterTargetId"), ::OpenAPI::toJsonValue(m_master_target_id));
    }
    if (m_policy_id_isSet) {
        obj.insert(QString("policyId"), ::OpenAPI::toJsonValue(m_policy_id));
    }
    if (m_process_server_id_isSet) {
        obj.insert(QString("processServerId"), ::OpenAPI::toJsonValue(m_process_server_id));
    }
    if (m_run_as_account_id_isSet) {
        obj.insert(QString("runAsAccountId"), ::OpenAPI::toJsonValue(m_run_as_account_id));
    }
    if (m_storage_account_id_isSet) {
        obj.insert(QString("storageAccountId"), ::OpenAPI::toJsonValue(m_storage_account_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QList<QString> OAIInMageAzureV2ReprotectInput::getDisksToInclude() const {
    return m_disks_to_include;
}
void OAIInMageAzureV2ReprotectInput::setDisksToInclude(const QList<QString> &disks_to_include) {
    m_disks_to_include = disks_to_include;
    m_disks_to_include_isSet = true;
}

bool OAIInMageAzureV2ReprotectInput::is_disks_to_include_Set() const{
    return m_disks_to_include_isSet;
}

bool OAIInMageAzureV2ReprotectInput::is_disks_to_include_Valid() const{
    return m_disks_to_include_isValid;
}

QString OAIInMageAzureV2ReprotectInput::getLogStorageAccountId() const {
    return m_log_storage_account_id;
}
void OAIInMageAzureV2ReprotectInput::setLogStorageAccountId(const QString &log_storage_account_id) {
    m_log_storage_account_id = log_storage_account_id;
    m_log_storage_account_id_isSet = true;
}

bool OAIInMageAzureV2ReprotectInput::is_log_storage_account_id_Set() const{
    return m_log_storage_account_id_isSet;
}

bool OAIInMageAzureV2ReprotectInput::is_log_storage_account_id_Valid() const{
    return m_log_storage_account_id_isValid;
}

QString OAIInMageAzureV2ReprotectInput::getMasterTargetId() const {
    return m_master_target_id;
}
void OAIInMageAzureV2ReprotectInput::setMasterTargetId(const QString &master_target_id) {
    m_master_target_id = master_target_id;
    m_master_target_id_isSet = true;
}

bool OAIInMageAzureV2ReprotectInput::is_master_target_id_Set() const{
    return m_master_target_id_isSet;
}

bool OAIInMageAzureV2ReprotectInput::is_master_target_id_Valid() const{
    return m_master_target_id_isValid;
}

QString OAIInMageAzureV2ReprotectInput::getPolicyId() const {
    return m_policy_id;
}
void OAIInMageAzureV2ReprotectInput::setPolicyId(const QString &policy_id) {
    m_policy_id = policy_id;
    m_policy_id_isSet = true;
}

bool OAIInMageAzureV2ReprotectInput::is_policy_id_Set() const{
    return m_policy_id_isSet;
}

bool OAIInMageAzureV2ReprotectInput::is_policy_id_Valid() const{
    return m_policy_id_isValid;
}

QString OAIInMageAzureV2ReprotectInput::getProcessServerId() const {
    return m_process_server_id;
}
void OAIInMageAzureV2ReprotectInput::setProcessServerId(const QString &process_server_id) {
    m_process_server_id = process_server_id;
    m_process_server_id_isSet = true;
}

bool OAIInMageAzureV2ReprotectInput::is_process_server_id_Set() const{
    return m_process_server_id_isSet;
}

bool OAIInMageAzureV2ReprotectInput::is_process_server_id_Valid() const{
    return m_process_server_id_isValid;
}

QString OAIInMageAzureV2ReprotectInput::getRunAsAccountId() const {
    return m_run_as_account_id;
}
void OAIInMageAzureV2ReprotectInput::setRunAsAccountId(const QString &run_as_account_id) {
    m_run_as_account_id = run_as_account_id;
    m_run_as_account_id_isSet = true;
}

bool OAIInMageAzureV2ReprotectInput::is_run_as_account_id_Set() const{
    return m_run_as_account_id_isSet;
}

bool OAIInMageAzureV2ReprotectInput::is_run_as_account_id_Valid() const{
    return m_run_as_account_id_isValid;
}

QString OAIInMageAzureV2ReprotectInput::getStorageAccountId() const {
    return m_storage_account_id;
}
void OAIInMageAzureV2ReprotectInput::setStorageAccountId(const QString &storage_account_id) {
    m_storage_account_id = storage_account_id;
    m_storage_account_id_isSet = true;
}

bool OAIInMageAzureV2ReprotectInput::is_storage_account_id_Set() const{
    return m_storage_account_id_isSet;
}

bool OAIInMageAzureV2ReprotectInput::is_storage_account_id_Valid() const{
    return m_storage_account_id_isValid;
}

QString OAIInMageAzureV2ReprotectInput::getInstanceType() const {
    return m_instance_type;
}
void OAIInMageAzureV2ReprotectInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInMageAzureV2ReprotectInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInMageAzureV2ReprotectInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIInMageAzureV2ReprotectInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disks_to_include.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_as_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInMageAzureV2ReprotectInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
