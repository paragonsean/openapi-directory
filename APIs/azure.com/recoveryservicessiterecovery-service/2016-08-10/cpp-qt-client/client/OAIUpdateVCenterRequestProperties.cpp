/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateVCenterRequestProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateVCenterRequestProperties::OAIUpdateVCenterRequestProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateVCenterRequestProperties::OAIUpdateVCenterRequestProperties() {
    this->initializeModel();
}

OAIUpdateVCenterRequestProperties::~OAIUpdateVCenterRequestProperties() {}

void OAIUpdateVCenterRequestProperties::initializeModel() {

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_process_server_id_isSet = false;
    m_process_server_id_isValid = false;

    m_run_as_account_id_isSet = false;
    m_run_as_account_id_isValid = false;
}

void OAIUpdateVCenterRequestProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateVCenterRequestProperties::fromJsonObject(QJsonObject json) {

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_process_server_id_isValid = ::OpenAPI::fromJsonValue(m_process_server_id, json[QString("processServerId")]);
    m_process_server_id_isSet = !json[QString("processServerId")].isNull() && m_process_server_id_isValid;

    m_run_as_account_id_isValid = ::OpenAPI::fromJsonValue(m_run_as_account_id, json[QString("runAsAccountId")]);
    m_run_as_account_id_isSet = !json[QString("runAsAccountId")].isNull() && m_run_as_account_id_isValid;
}

QString OAIUpdateVCenterRequestProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateVCenterRequestProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_process_server_id_isSet) {
        obj.insert(QString("processServerId"), ::OpenAPI::toJsonValue(m_process_server_id));
    }
    if (m_run_as_account_id_isSet) {
        obj.insert(QString("runAsAccountId"), ::OpenAPI::toJsonValue(m_run_as_account_id));
    }
    return obj;
}

QString OAIUpdateVCenterRequestProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIUpdateVCenterRequestProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIUpdateVCenterRequestProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIUpdateVCenterRequestProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIUpdateVCenterRequestProperties::getIpAddress() const {
    return m_ip_address;
}
void OAIUpdateVCenterRequestProperties::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIUpdateVCenterRequestProperties::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIUpdateVCenterRequestProperties::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIUpdateVCenterRequestProperties::getPort() const {
    return m_port;
}
void OAIUpdateVCenterRequestProperties::setPort(const QString &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIUpdateVCenterRequestProperties::is_port_Set() const{
    return m_port_isSet;
}

bool OAIUpdateVCenterRequestProperties::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIUpdateVCenterRequestProperties::getProcessServerId() const {
    return m_process_server_id;
}
void OAIUpdateVCenterRequestProperties::setProcessServerId(const QString &process_server_id) {
    m_process_server_id = process_server_id;
    m_process_server_id_isSet = true;
}

bool OAIUpdateVCenterRequestProperties::is_process_server_id_Set() const{
    return m_process_server_id_isSet;
}

bool OAIUpdateVCenterRequestProperties::is_process_server_id_Valid() const{
    return m_process_server_id_isValid;
}

QString OAIUpdateVCenterRequestProperties::getRunAsAccountId() const {
    return m_run_as_account_id;
}
void OAIUpdateVCenterRequestProperties::setRunAsAccountId(const QString &run_as_account_id) {
    m_run_as_account_id = run_as_account_id;
    m_run_as_account_id_isSet = true;
}

bool OAIUpdateVCenterRequestProperties::is_run_as_account_id_Set() const{
    return m_run_as_account_id_isSet;
}

bool OAIUpdateVCenterRequestProperties::is_run_as_account_id_Valid() const{
    return m_run_as_account_id_isValid;
}

bool OAIUpdateVCenterRequestProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_as_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateVCenterRequestProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
