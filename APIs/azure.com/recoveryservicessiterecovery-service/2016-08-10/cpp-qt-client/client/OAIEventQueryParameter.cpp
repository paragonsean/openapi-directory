/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventQueryParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventQueryParameter::OAIEventQueryParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventQueryParameter::OAIEventQueryParameter() {
    this->initializeModel();
}

OAIEventQueryParameter::~OAIEventQueryParameter() {}

void OAIEventQueryParameter::initializeModel() {

    m_affected_object_friendly_name_isSet = false;
    m_affected_object_friendly_name_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_event_code_isSet = false;
    m_event_code_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_fabric_name_isSet = false;
    m_fabric_name_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIEventQueryParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventQueryParameter::fromJsonObject(QJsonObject json) {

    m_affected_object_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_affected_object_friendly_name, json[QString("AffectedObjectFriendlyName")]);
    m_affected_object_friendly_name_isSet = !json[QString("AffectedObjectFriendlyName")].isNull() && m_affected_object_friendly_name_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_event_code_isValid = ::OpenAPI::fromJsonValue(m_event_code, json[QString("EventCode")]);
    m_event_code_isSet = !json[QString("EventCode")].isNull() && m_event_code_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("EventType")]);
    m_event_type_isSet = !json[QString("EventType")].isNull() && m_event_type_isValid;

    m_fabric_name_isValid = ::OpenAPI::fromJsonValue(m_fabric_name, json[QString("FabricName")]);
    m_fabric_name_isSet = !json[QString("FabricName")].isNull() && m_fabric_name_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;
}

QString OAIEventQueryParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventQueryParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_affected_object_friendly_name_isSet) {
        obj.insert(QString("AffectedObjectFriendlyName"), ::OpenAPI::toJsonValue(m_affected_object_friendly_name));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_event_code_isSet) {
        obj.insert(QString("EventCode"), ::OpenAPI::toJsonValue(m_event_code));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("EventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_fabric_name_isSet) {
        obj.insert(QString("FabricName"), ::OpenAPI::toJsonValue(m_fabric_name));
    }
    if (m_severity_isSet) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIEventQueryParameter::getAffectedObjectFriendlyName() const {
    return m_affected_object_friendly_name;
}
void OAIEventQueryParameter::setAffectedObjectFriendlyName(const QString &affected_object_friendly_name) {
    m_affected_object_friendly_name = affected_object_friendly_name;
    m_affected_object_friendly_name_isSet = true;
}

bool OAIEventQueryParameter::is_affected_object_friendly_name_Set() const{
    return m_affected_object_friendly_name_isSet;
}

bool OAIEventQueryParameter::is_affected_object_friendly_name_Valid() const{
    return m_affected_object_friendly_name_isValid;
}

QDateTime OAIEventQueryParameter::getEndTime() const {
    return m_end_time;
}
void OAIEventQueryParameter::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIEventQueryParameter::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIEventQueryParameter::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIEventQueryParameter::getEventCode() const {
    return m_event_code;
}
void OAIEventQueryParameter::setEventCode(const QString &event_code) {
    m_event_code = event_code;
    m_event_code_isSet = true;
}

bool OAIEventQueryParameter::is_event_code_Set() const{
    return m_event_code_isSet;
}

bool OAIEventQueryParameter::is_event_code_Valid() const{
    return m_event_code_isValid;
}

QString OAIEventQueryParameter::getEventType() const {
    return m_event_type;
}
void OAIEventQueryParameter::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEventQueryParameter::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEventQueryParameter::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIEventQueryParameter::getFabricName() const {
    return m_fabric_name;
}
void OAIEventQueryParameter::setFabricName(const QString &fabric_name) {
    m_fabric_name = fabric_name;
    m_fabric_name_isSet = true;
}

bool OAIEventQueryParameter::is_fabric_name_Set() const{
    return m_fabric_name_isSet;
}

bool OAIEventQueryParameter::is_fabric_name_Valid() const{
    return m_fabric_name_isValid;
}

QString OAIEventQueryParameter::getSeverity() const {
    return m_severity;
}
void OAIEventQueryParameter::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIEventQueryParameter::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIEventQueryParameter::is_severity_Valid() const{
    return m_severity_isValid;
}

QDateTime OAIEventQueryParameter::getStartTime() const {
    return m_start_time;
}
void OAIEventQueryParameter::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIEventQueryParameter::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIEventQueryParameter::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIEventQueryParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affected_object_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventQueryParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
