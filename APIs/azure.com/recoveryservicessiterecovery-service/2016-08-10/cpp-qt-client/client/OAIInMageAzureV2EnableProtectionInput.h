/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInMageAzureV2EnableProtectionInput.h
 *
 * VMware Azure specific enable protection input.
 */

#ifndef OAIInMageAzureV2EnableProtectionInput_H
#define OAIInMageAzureV2EnableProtectionInput_H

#include <QJsonObject>

#include "OAIEnableProtectionProviderSpecificInput.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInMageAzureV2EnableProtectionInput : public OAIObject {
public:
    OAIInMageAzureV2EnableProtectionInput();
    OAIInMageAzureV2EnableProtectionInput(QString json);
    ~OAIInMageAzureV2EnableProtectionInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getDisksToInclude() const;
    void setDisksToInclude(const QList<QString> &disks_to_include);
    bool is_disks_to_include_Set() const;
    bool is_disks_to_include_Valid() const;

    QString getEnableRdponTargetOption() const;
    void setEnableRdponTargetOption(const QString &enable_rdpon_target_option);
    bool is_enable_rdpon_target_option_Set() const;
    bool is_enable_rdpon_target_option_Valid() const;

    QString getLogStorageAccountId() const;
    void setLogStorageAccountId(const QString &log_storage_account_id);
    bool is_log_storage_account_id_Set() const;
    bool is_log_storage_account_id_Valid() const;

    QString getMasterTargetId() const;
    void setMasterTargetId(const QString &master_target_id);
    bool is_master_target_id_Set() const;
    bool is_master_target_id_Valid() const;

    QString getMultiVmGroupId() const;
    void setMultiVmGroupId(const QString &multi_vm_group_id);
    bool is_multi_vm_group_id_Set() const;
    bool is_multi_vm_group_id_Valid() const;

    QString getMultiVmGroupName() const;
    void setMultiVmGroupName(const QString &multi_vm_group_name);
    bool is_multi_vm_group_name_Set() const;
    bool is_multi_vm_group_name_Valid() const;

    QString getProcessServerId() const;
    void setProcessServerId(const QString &process_server_id);
    bool is_process_server_id_Set() const;
    bool is_process_server_id_Valid() const;

    QString getRunAsAccountId() const;
    void setRunAsAccountId(const QString &run_as_account_id);
    bool is_run_as_account_id_Set() const;
    bool is_run_as_account_id_Valid() const;

    QString getStorageAccountId() const;
    void setStorageAccountId(const QString &storage_account_id);
    bool is_storage_account_id_Set() const;
    bool is_storage_account_id_Valid() const;

    QString getTargetAzureNetworkId() const;
    void setTargetAzureNetworkId(const QString &target_azure_network_id);
    bool is_target_azure_network_id_Set() const;
    bool is_target_azure_network_id_Valid() const;

    QString getTargetAzureSubnetId() const;
    void setTargetAzureSubnetId(const QString &target_azure_subnet_id);
    bool is_target_azure_subnet_id_Set() const;
    bool is_target_azure_subnet_id_Valid() const;

    QString getTargetAzureV1ResourceGroupId() const;
    void setTargetAzureV1ResourceGroupId(const QString &target_azure_v1_resource_group_id);
    bool is_target_azure_v1_resource_group_id_Set() const;
    bool is_target_azure_v1_resource_group_id_Valid() const;

    QString getTargetAzureV2ResourceGroupId() const;
    void setTargetAzureV2ResourceGroupId(const QString &target_azure_v2_resource_group_id);
    bool is_target_azure_v2_resource_group_id_Set() const;
    bool is_target_azure_v2_resource_group_id_Valid() const;

    QString getTargetAzureVmName() const;
    void setTargetAzureVmName(const QString &target_azure_vm_name);
    bool is_target_azure_vm_name_Set() const;
    bool is_target_azure_vm_name_Valid() const;

    QString getUseManagedDisks() const;
    void setUseManagedDisks(const QString &use_managed_disks);
    bool is_use_managed_disks_Set() const;
    bool is_use_managed_disks_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_disks_to_include;
    bool m_disks_to_include_isSet;
    bool m_disks_to_include_isValid;

    QString m_enable_rdpon_target_option;
    bool m_enable_rdpon_target_option_isSet;
    bool m_enable_rdpon_target_option_isValid;

    QString m_log_storage_account_id;
    bool m_log_storage_account_id_isSet;
    bool m_log_storage_account_id_isValid;

    QString m_master_target_id;
    bool m_master_target_id_isSet;
    bool m_master_target_id_isValid;

    QString m_multi_vm_group_id;
    bool m_multi_vm_group_id_isSet;
    bool m_multi_vm_group_id_isValid;

    QString m_multi_vm_group_name;
    bool m_multi_vm_group_name_isSet;
    bool m_multi_vm_group_name_isValid;

    QString m_process_server_id;
    bool m_process_server_id_isSet;
    bool m_process_server_id_isValid;

    QString m_run_as_account_id;
    bool m_run_as_account_id_isSet;
    bool m_run_as_account_id_isValid;

    QString m_storage_account_id;
    bool m_storage_account_id_isSet;
    bool m_storage_account_id_isValid;

    QString m_target_azure_network_id;
    bool m_target_azure_network_id_isSet;
    bool m_target_azure_network_id_isValid;

    QString m_target_azure_subnet_id;
    bool m_target_azure_subnet_id_isSet;
    bool m_target_azure_subnet_id_isValid;

    QString m_target_azure_v1_resource_group_id;
    bool m_target_azure_v1_resource_group_id_isSet;
    bool m_target_azure_v1_resource_group_id_isValid;

    QString m_target_azure_v2_resource_group_id;
    bool m_target_azure_v2_resource_group_id_isSet;
    bool m_target_azure_v2_resource_group_id_isValid;

    QString m_target_azure_vm_name;
    bool m_target_azure_vm_name_isSet;
    bool m_target_azure_vm_name_isValid;

    QString m_use_managed_disks;
    bool m_use_managed_disks_isSet;
    bool m_use_managed_disks_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInMageAzureV2EnableProtectionInput)

#endif // OAIInMageAzureV2EnableProtectionInput_H
