/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtectableItemProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtectableItemProperties::OAIProtectableItemProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtectableItemProperties::OAIProtectableItemProperties() {
    this->initializeModel();
}

OAIProtectableItemProperties::~OAIProtectableItemProperties() {}

void OAIProtectableItemProperties::initializeModel() {

    m_custom_details_isSet = false;
    m_custom_details_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_protection_readiness_errors_isSet = false;
    m_protection_readiness_errors_isValid = false;

    m_protection_status_isSet = false;
    m_protection_status_isValid = false;

    m_recovery_services_provider_id_isSet = false;
    m_recovery_services_provider_id_isValid = false;

    m_replication_protected_item_id_isSet = false;
    m_replication_protected_item_id_isValid = false;

    m_supported_replication_providers_isSet = false;
    m_supported_replication_providers_isValid = false;
}

void OAIProtectableItemProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtectableItemProperties::fromJsonObject(QJsonObject json) {

    m_custom_details_isValid = ::OpenAPI::fromJsonValue(m_custom_details, json[QString("customDetails")]);
    m_custom_details_isSet = !json[QString("customDetails")].isNull() && m_custom_details_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_protection_readiness_errors_isValid = ::OpenAPI::fromJsonValue(m_protection_readiness_errors, json[QString("protectionReadinessErrors")]);
    m_protection_readiness_errors_isSet = !json[QString("protectionReadinessErrors")].isNull() && m_protection_readiness_errors_isValid;

    m_protection_status_isValid = ::OpenAPI::fromJsonValue(m_protection_status, json[QString("protectionStatus")]);
    m_protection_status_isSet = !json[QString("protectionStatus")].isNull() && m_protection_status_isValid;

    m_recovery_services_provider_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_services_provider_id, json[QString("recoveryServicesProviderId")]);
    m_recovery_services_provider_id_isSet = !json[QString("recoveryServicesProviderId")].isNull() && m_recovery_services_provider_id_isValid;

    m_replication_protected_item_id_isValid = ::OpenAPI::fromJsonValue(m_replication_protected_item_id, json[QString("replicationProtectedItemId")]);
    m_replication_protected_item_id_isSet = !json[QString("replicationProtectedItemId")].isNull() && m_replication_protected_item_id_isValid;

    m_supported_replication_providers_isValid = ::OpenAPI::fromJsonValue(m_supported_replication_providers, json[QString("supportedReplicationProviders")]);
    m_supported_replication_providers_isSet = !json[QString("supportedReplicationProviders")].isNull() && m_supported_replication_providers_isValid;
}

QString OAIProtectableItemProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtectableItemProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_details.isSet()) {
        obj.insert(QString("customDetails"), ::OpenAPI::toJsonValue(m_custom_details));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_protection_readiness_errors.size() > 0) {
        obj.insert(QString("protectionReadinessErrors"), ::OpenAPI::toJsonValue(m_protection_readiness_errors));
    }
    if (m_protection_status_isSet) {
        obj.insert(QString("protectionStatus"), ::OpenAPI::toJsonValue(m_protection_status));
    }
    if (m_recovery_services_provider_id_isSet) {
        obj.insert(QString("recoveryServicesProviderId"), ::OpenAPI::toJsonValue(m_recovery_services_provider_id));
    }
    if (m_replication_protected_item_id_isSet) {
        obj.insert(QString("replicationProtectedItemId"), ::OpenAPI::toJsonValue(m_replication_protected_item_id));
    }
    if (m_supported_replication_providers.size() > 0) {
        obj.insert(QString("supportedReplicationProviders"), ::OpenAPI::toJsonValue(m_supported_replication_providers));
    }
    return obj;
}

OAIConfigurationSettings OAIProtectableItemProperties::getCustomDetails() const {
    return m_custom_details;
}
void OAIProtectableItemProperties::setCustomDetails(const OAIConfigurationSettings &custom_details) {
    m_custom_details = custom_details;
    m_custom_details_isSet = true;
}

bool OAIProtectableItemProperties::is_custom_details_Set() const{
    return m_custom_details_isSet;
}

bool OAIProtectableItemProperties::is_custom_details_Valid() const{
    return m_custom_details_isValid;
}

QString OAIProtectableItemProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIProtectableItemProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIProtectableItemProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIProtectableItemProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QList<QString> OAIProtectableItemProperties::getProtectionReadinessErrors() const {
    return m_protection_readiness_errors;
}
void OAIProtectableItemProperties::setProtectionReadinessErrors(const QList<QString> &protection_readiness_errors) {
    m_protection_readiness_errors = protection_readiness_errors;
    m_protection_readiness_errors_isSet = true;
}

bool OAIProtectableItemProperties::is_protection_readiness_errors_Set() const{
    return m_protection_readiness_errors_isSet;
}

bool OAIProtectableItemProperties::is_protection_readiness_errors_Valid() const{
    return m_protection_readiness_errors_isValid;
}

QString OAIProtectableItemProperties::getProtectionStatus() const {
    return m_protection_status;
}
void OAIProtectableItemProperties::setProtectionStatus(const QString &protection_status) {
    m_protection_status = protection_status;
    m_protection_status_isSet = true;
}

bool OAIProtectableItemProperties::is_protection_status_Set() const{
    return m_protection_status_isSet;
}

bool OAIProtectableItemProperties::is_protection_status_Valid() const{
    return m_protection_status_isValid;
}

QString OAIProtectableItemProperties::getRecoveryServicesProviderId() const {
    return m_recovery_services_provider_id;
}
void OAIProtectableItemProperties::setRecoveryServicesProviderId(const QString &recovery_services_provider_id) {
    m_recovery_services_provider_id = recovery_services_provider_id;
    m_recovery_services_provider_id_isSet = true;
}

bool OAIProtectableItemProperties::is_recovery_services_provider_id_Set() const{
    return m_recovery_services_provider_id_isSet;
}

bool OAIProtectableItemProperties::is_recovery_services_provider_id_Valid() const{
    return m_recovery_services_provider_id_isValid;
}

QString OAIProtectableItemProperties::getReplicationProtectedItemId() const {
    return m_replication_protected_item_id;
}
void OAIProtectableItemProperties::setReplicationProtectedItemId(const QString &replication_protected_item_id) {
    m_replication_protected_item_id = replication_protected_item_id;
    m_replication_protected_item_id_isSet = true;
}

bool OAIProtectableItemProperties::is_replication_protected_item_id_Set() const{
    return m_replication_protected_item_id_isSet;
}

bool OAIProtectableItemProperties::is_replication_protected_item_id_Valid() const{
    return m_replication_protected_item_id_isValid;
}

QList<QString> OAIProtectableItemProperties::getSupportedReplicationProviders() const {
    return m_supported_replication_providers;
}
void OAIProtectableItemProperties::setSupportedReplicationProviders(const QList<QString> &supported_replication_providers) {
    m_supported_replication_providers = supported_replication_providers;
    m_supported_replication_providers_isSet = true;
}

bool OAIProtectableItemProperties::is_supported_replication_providers_Set() const{
    return m_supported_replication_providers_isSet;
}

bool OAIProtectableItemProperties::is_supported_replication_providers_Valid() const{
    return m_supported_replication_providers_isValid;
}

bool OAIProtectableItemProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_readiness_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_services_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_protected_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_replication_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtectableItemProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
