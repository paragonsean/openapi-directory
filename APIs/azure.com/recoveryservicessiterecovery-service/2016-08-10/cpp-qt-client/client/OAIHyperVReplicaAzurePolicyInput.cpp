/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHyperVReplicaAzurePolicyInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHyperVReplicaAzurePolicyInput::OAIHyperVReplicaAzurePolicyInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHyperVReplicaAzurePolicyInput::OAIHyperVReplicaAzurePolicyInput() {
    this->initializeModel();
}

OAIHyperVReplicaAzurePolicyInput::~OAIHyperVReplicaAzurePolicyInput() {}

void OAIHyperVReplicaAzurePolicyInput::initializeModel() {

    m_application_consistent_snapshot_frequency_in_hours_isSet = false;
    m_application_consistent_snapshot_frequency_in_hours_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_online_replication_start_time_isSet = false;
    m_online_replication_start_time_isValid = false;

    m_recovery_point_history_duration_isSet = false;
    m_recovery_point_history_duration_isValid = false;

    m_replication_interval_isSet = false;
    m_replication_interval_isValid = false;

    m_storage_accounts_isSet = false;
    m_storage_accounts_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIHyperVReplicaAzurePolicyInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHyperVReplicaAzurePolicyInput::fromJsonObject(QJsonObject json) {

    m_application_consistent_snapshot_frequency_in_hours_isValid = ::OpenAPI::fromJsonValue(m_application_consistent_snapshot_frequency_in_hours, json[QString("applicationConsistentSnapshotFrequencyInHours")]);
    m_application_consistent_snapshot_frequency_in_hours_isSet = !json[QString("applicationConsistentSnapshotFrequencyInHours")].isNull() && m_application_consistent_snapshot_frequency_in_hours_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("encryption")]);
    m_encryption_isSet = !json[QString("encryption")].isNull() && m_encryption_isValid;

    m_online_replication_start_time_isValid = ::OpenAPI::fromJsonValue(m_online_replication_start_time, json[QString("onlineReplicationStartTime")]);
    m_online_replication_start_time_isSet = !json[QString("onlineReplicationStartTime")].isNull() && m_online_replication_start_time_isValid;

    m_recovery_point_history_duration_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_history_duration, json[QString("recoveryPointHistoryDuration")]);
    m_recovery_point_history_duration_isSet = !json[QString("recoveryPointHistoryDuration")].isNull() && m_recovery_point_history_duration_isValid;

    m_replication_interval_isValid = ::OpenAPI::fromJsonValue(m_replication_interval, json[QString("replicationInterval")]);
    m_replication_interval_isSet = !json[QString("replicationInterval")].isNull() && m_replication_interval_isValid;

    m_storage_accounts_isValid = ::OpenAPI::fromJsonValue(m_storage_accounts, json[QString("storageAccounts")]);
    m_storage_accounts_isSet = !json[QString("storageAccounts")].isNull() && m_storage_accounts_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIHyperVReplicaAzurePolicyInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHyperVReplicaAzurePolicyInput::asJsonObject() const {
    QJsonObject obj;
    if (m_application_consistent_snapshot_frequency_in_hours_isSet) {
        obj.insert(QString("applicationConsistentSnapshotFrequencyInHours"), ::OpenAPI::toJsonValue(m_application_consistent_snapshot_frequency_in_hours));
    }
    if (m_encryption_isSet) {
        obj.insert(QString("encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_online_replication_start_time_isSet) {
        obj.insert(QString("onlineReplicationStartTime"), ::OpenAPI::toJsonValue(m_online_replication_start_time));
    }
    if (m_recovery_point_history_duration_isSet) {
        obj.insert(QString("recoveryPointHistoryDuration"), ::OpenAPI::toJsonValue(m_recovery_point_history_duration));
    }
    if (m_replication_interval_isSet) {
        obj.insert(QString("replicationInterval"), ::OpenAPI::toJsonValue(m_replication_interval));
    }
    if (m_storage_accounts.size() > 0) {
        obj.insert(QString("storageAccounts"), ::OpenAPI::toJsonValue(m_storage_accounts));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

qint32 OAIHyperVReplicaAzurePolicyInput::getApplicationConsistentSnapshotFrequencyInHours() const {
    return m_application_consistent_snapshot_frequency_in_hours;
}
void OAIHyperVReplicaAzurePolicyInput::setApplicationConsistentSnapshotFrequencyInHours(const qint32 &application_consistent_snapshot_frequency_in_hours) {
    m_application_consistent_snapshot_frequency_in_hours = application_consistent_snapshot_frequency_in_hours;
    m_application_consistent_snapshot_frequency_in_hours_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyInput::is_application_consistent_snapshot_frequency_in_hours_Set() const{
    return m_application_consistent_snapshot_frequency_in_hours_isSet;
}

bool OAIHyperVReplicaAzurePolicyInput::is_application_consistent_snapshot_frequency_in_hours_Valid() const{
    return m_application_consistent_snapshot_frequency_in_hours_isValid;
}

QString OAIHyperVReplicaAzurePolicyInput::getEncryption() const {
    return m_encryption;
}
void OAIHyperVReplicaAzurePolicyInput::setEncryption(const QString &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyInput::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIHyperVReplicaAzurePolicyInput::is_encryption_Valid() const{
    return m_encryption_isValid;
}

QString OAIHyperVReplicaAzurePolicyInput::getOnlineReplicationStartTime() const {
    return m_online_replication_start_time;
}
void OAIHyperVReplicaAzurePolicyInput::setOnlineReplicationStartTime(const QString &online_replication_start_time) {
    m_online_replication_start_time = online_replication_start_time;
    m_online_replication_start_time_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyInput::is_online_replication_start_time_Set() const{
    return m_online_replication_start_time_isSet;
}

bool OAIHyperVReplicaAzurePolicyInput::is_online_replication_start_time_Valid() const{
    return m_online_replication_start_time_isValid;
}

qint32 OAIHyperVReplicaAzurePolicyInput::getRecoveryPointHistoryDuration() const {
    return m_recovery_point_history_duration;
}
void OAIHyperVReplicaAzurePolicyInput::setRecoveryPointHistoryDuration(const qint32 &recovery_point_history_duration) {
    m_recovery_point_history_duration = recovery_point_history_duration;
    m_recovery_point_history_duration_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyInput::is_recovery_point_history_duration_Set() const{
    return m_recovery_point_history_duration_isSet;
}

bool OAIHyperVReplicaAzurePolicyInput::is_recovery_point_history_duration_Valid() const{
    return m_recovery_point_history_duration_isValid;
}

qint32 OAIHyperVReplicaAzurePolicyInput::getReplicationInterval() const {
    return m_replication_interval;
}
void OAIHyperVReplicaAzurePolicyInput::setReplicationInterval(const qint32 &replication_interval) {
    m_replication_interval = replication_interval;
    m_replication_interval_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyInput::is_replication_interval_Set() const{
    return m_replication_interval_isSet;
}

bool OAIHyperVReplicaAzurePolicyInput::is_replication_interval_Valid() const{
    return m_replication_interval_isValid;
}

QList<QString> OAIHyperVReplicaAzurePolicyInput::getStorageAccounts() const {
    return m_storage_accounts;
}
void OAIHyperVReplicaAzurePolicyInput::setStorageAccounts(const QList<QString> &storage_accounts) {
    m_storage_accounts = storage_accounts;
    m_storage_accounts_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyInput::is_storage_accounts_Set() const{
    return m_storage_accounts_isSet;
}

bool OAIHyperVReplicaAzurePolicyInput::is_storage_accounts_Valid() const{
    return m_storage_accounts_isValid;
}

QString OAIHyperVReplicaAzurePolicyInput::getInstanceType() const {
    return m_instance_type;
}
void OAIHyperVReplicaAzurePolicyInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIHyperVReplicaAzurePolicyInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIHyperVReplicaAzurePolicyInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_consistent_snapshot_frequency_in_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_replication_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_history_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHyperVReplicaAzurePolicyInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
