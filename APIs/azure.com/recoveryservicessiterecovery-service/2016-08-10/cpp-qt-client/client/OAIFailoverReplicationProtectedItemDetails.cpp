/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailoverReplicationProtectedItemDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailoverReplicationProtectedItemDetails::OAIFailoverReplicationProtectedItemDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailoverReplicationProtectedItemDetails::OAIFailoverReplicationProtectedItemDetails() {
    this->initializeModel();
}

OAIFailoverReplicationProtectedItemDetails::~OAIFailoverReplicationProtectedItemDetails() {}

void OAIFailoverReplicationProtectedItemDetails::initializeModel() {

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_connection_status_isSet = false;
    m_network_connection_status_isValid = false;

    m_network_friendly_name_isSet = false;
    m_network_friendly_name_isValid = false;

    m_recovery_point_id_isSet = false;
    m_recovery_point_id_isValid = false;

    m_recovery_point_time_isSet = false;
    m_recovery_point_time_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;

    m_test_vm_friendly_name_isSet = false;
    m_test_vm_friendly_name_isValid = false;

    m_test_vm_name_isSet = false;
    m_test_vm_name_isValid = false;
}

void OAIFailoverReplicationProtectedItemDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailoverReplicationProtectedItemDetails::fromJsonObject(QJsonObject json) {

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_connection_status_isValid = ::OpenAPI::fromJsonValue(m_network_connection_status, json[QString("networkConnectionStatus")]);
    m_network_connection_status_isSet = !json[QString("networkConnectionStatus")].isNull() && m_network_connection_status_isValid;

    m_network_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_network_friendly_name, json[QString("networkFriendlyName")]);
    m_network_friendly_name_isSet = !json[QString("networkFriendlyName")].isNull() && m_network_friendly_name_isValid;

    m_recovery_point_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_id, json[QString("recoveryPointId")]);
    m_recovery_point_id_isSet = !json[QString("recoveryPointId")].isNull() && m_recovery_point_id_isValid;

    m_recovery_point_time_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_time, json[QString("recoveryPointTime")]);
    m_recovery_point_time_isSet = !json[QString("recoveryPointTime")].isNull() && m_recovery_point_time_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;

    m_test_vm_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_test_vm_friendly_name, json[QString("testVmFriendlyName")]);
    m_test_vm_friendly_name_isSet = !json[QString("testVmFriendlyName")].isNull() && m_test_vm_friendly_name_isValid;

    m_test_vm_name_isValid = ::OpenAPI::fromJsonValue(m_test_vm_name, json[QString("testVmName")]);
    m_test_vm_name_isSet = !json[QString("testVmName")].isNull() && m_test_vm_name_isValid;
}

QString OAIFailoverReplicationProtectedItemDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailoverReplicationProtectedItemDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_connection_status_isSet) {
        obj.insert(QString("networkConnectionStatus"), ::OpenAPI::toJsonValue(m_network_connection_status));
    }
    if (m_network_friendly_name_isSet) {
        obj.insert(QString("networkFriendlyName"), ::OpenAPI::toJsonValue(m_network_friendly_name));
    }
    if (m_recovery_point_id_isSet) {
        obj.insert(QString("recoveryPointId"), ::OpenAPI::toJsonValue(m_recovery_point_id));
    }
    if (m_recovery_point_time_isSet) {
        obj.insert(QString("recoveryPointTime"), ::OpenAPI::toJsonValue(m_recovery_point_time));
    }
    if (m_subnet_isSet) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    if (m_test_vm_friendly_name_isSet) {
        obj.insert(QString("testVmFriendlyName"), ::OpenAPI::toJsonValue(m_test_vm_friendly_name));
    }
    if (m_test_vm_name_isSet) {
        obj.insert(QString("testVmName"), ::OpenAPI::toJsonValue(m_test_vm_name));
    }
    return obj;
}

QString OAIFailoverReplicationProtectedItemDetails::getFriendlyName() const {
    return m_friendly_name;
}
void OAIFailoverReplicationProtectedItemDetails::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIFailoverReplicationProtectedItemDetails::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIFailoverReplicationProtectedItemDetails::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIFailoverReplicationProtectedItemDetails::getName() const {
    return m_name;
}
void OAIFailoverReplicationProtectedItemDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFailoverReplicationProtectedItemDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFailoverReplicationProtectedItemDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFailoverReplicationProtectedItemDetails::getNetworkConnectionStatus() const {
    return m_network_connection_status;
}
void OAIFailoverReplicationProtectedItemDetails::setNetworkConnectionStatus(const QString &network_connection_status) {
    m_network_connection_status = network_connection_status;
    m_network_connection_status_isSet = true;
}

bool OAIFailoverReplicationProtectedItemDetails::is_network_connection_status_Set() const{
    return m_network_connection_status_isSet;
}

bool OAIFailoverReplicationProtectedItemDetails::is_network_connection_status_Valid() const{
    return m_network_connection_status_isValid;
}

QString OAIFailoverReplicationProtectedItemDetails::getNetworkFriendlyName() const {
    return m_network_friendly_name;
}
void OAIFailoverReplicationProtectedItemDetails::setNetworkFriendlyName(const QString &network_friendly_name) {
    m_network_friendly_name = network_friendly_name;
    m_network_friendly_name_isSet = true;
}

bool OAIFailoverReplicationProtectedItemDetails::is_network_friendly_name_Set() const{
    return m_network_friendly_name_isSet;
}

bool OAIFailoverReplicationProtectedItemDetails::is_network_friendly_name_Valid() const{
    return m_network_friendly_name_isValid;
}

QString OAIFailoverReplicationProtectedItemDetails::getRecoveryPointId() const {
    return m_recovery_point_id;
}
void OAIFailoverReplicationProtectedItemDetails::setRecoveryPointId(const QString &recovery_point_id) {
    m_recovery_point_id = recovery_point_id;
    m_recovery_point_id_isSet = true;
}

bool OAIFailoverReplicationProtectedItemDetails::is_recovery_point_id_Set() const{
    return m_recovery_point_id_isSet;
}

bool OAIFailoverReplicationProtectedItemDetails::is_recovery_point_id_Valid() const{
    return m_recovery_point_id_isValid;
}

QDateTime OAIFailoverReplicationProtectedItemDetails::getRecoveryPointTime() const {
    return m_recovery_point_time;
}
void OAIFailoverReplicationProtectedItemDetails::setRecoveryPointTime(const QDateTime &recovery_point_time) {
    m_recovery_point_time = recovery_point_time;
    m_recovery_point_time_isSet = true;
}

bool OAIFailoverReplicationProtectedItemDetails::is_recovery_point_time_Set() const{
    return m_recovery_point_time_isSet;
}

bool OAIFailoverReplicationProtectedItemDetails::is_recovery_point_time_Valid() const{
    return m_recovery_point_time_isValid;
}

QString OAIFailoverReplicationProtectedItemDetails::getSubnet() const {
    return m_subnet;
}
void OAIFailoverReplicationProtectedItemDetails::setSubnet(const QString &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIFailoverReplicationProtectedItemDetails::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIFailoverReplicationProtectedItemDetails::is_subnet_Valid() const{
    return m_subnet_isValid;
}

QString OAIFailoverReplicationProtectedItemDetails::getTestVmFriendlyName() const {
    return m_test_vm_friendly_name;
}
void OAIFailoverReplicationProtectedItemDetails::setTestVmFriendlyName(const QString &test_vm_friendly_name) {
    m_test_vm_friendly_name = test_vm_friendly_name;
    m_test_vm_friendly_name_isSet = true;
}

bool OAIFailoverReplicationProtectedItemDetails::is_test_vm_friendly_name_Set() const{
    return m_test_vm_friendly_name_isSet;
}

bool OAIFailoverReplicationProtectedItemDetails::is_test_vm_friendly_name_Valid() const{
    return m_test_vm_friendly_name_isValid;
}

QString OAIFailoverReplicationProtectedItemDetails::getTestVmName() const {
    return m_test_vm_name;
}
void OAIFailoverReplicationProtectedItemDetails::setTestVmName(const QString &test_vm_name) {
    m_test_vm_name = test_vm_name;
    m_test_vm_name_isSet = true;
}

bool OAIFailoverReplicationProtectedItemDetails::is_test_vm_name_Set() const{
    return m_test_vm_name_isSet;
}

bool OAIFailoverReplicationProtectedItemDetails::is_test_vm_name_Valid() const{
    return m_test_vm_name_isValid;
}

bool OAIFailoverReplicationProtectedItemDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_connection_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_vm_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailoverReplicationProtectedItemDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
