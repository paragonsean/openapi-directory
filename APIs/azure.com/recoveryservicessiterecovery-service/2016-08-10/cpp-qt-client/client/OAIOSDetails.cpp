/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSDetails::OAIOSDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSDetails::OAIOSDetails() {
    this->initializeModel();
}

OAIOSDetails::~OAIOSDetails() {}

void OAIOSDetails::initializeModel() {

    m_o_s_major_version_isSet = false;
    m_o_s_major_version_isValid = false;

    m_o_s_minor_version_isSet = false;
    m_o_s_minor_version_isValid = false;

    m_o_s_version_isSet = false;
    m_o_s_version_isValid = false;

    m_os_edition_isSet = false;
    m_os_edition_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;
}

void OAIOSDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSDetails::fromJsonObject(QJsonObject json) {

    m_o_s_major_version_isValid = ::OpenAPI::fromJsonValue(m_o_s_major_version, json[QString("oSMajorVersion")]);
    m_o_s_major_version_isSet = !json[QString("oSMajorVersion")].isNull() && m_o_s_major_version_isValid;

    m_o_s_minor_version_isValid = ::OpenAPI::fromJsonValue(m_o_s_minor_version, json[QString("oSMinorVersion")]);
    m_o_s_minor_version_isSet = !json[QString("oSMinorVersion")].isNull() && m_o_s_minor_version_isValid;

    m_o_s_version_isValid = ::OpenAPI::fromJsonValue(m_o_s_version, json[QString("oSVersion")]);
    m_o_s_version_isSet = !json[QString("oSVersion")].isNull() && m_o_s_version_isValid;

    m_os_edition_isValid = ::OpenAPI::fromJsonValue(m_os_edition, json[QString("osEdition")]);
    m_os_edition_isSet = !json[QString("osEdition")].isNull() && m_os_edition_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("productType")]);
    m_product_type_isSet = !json[QString("productType")].isNull() && m_product_type_isValid;
}

QString OAIOSDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_o_s_major_version_isSet) {
        obj.insert(QString("oSMajorVersion"), ::OpenAPI::toJsonValue(m_o_s_major_version));
    }
    if (m_o_s_minor_version_isSet) {
        obj.insert(QString("oSMinorVersion"), ::OpenAPI::toJsonValue(m_o_s_minor_version));
    }
    if (m_o_s_version_isSet) {
        obj.insert(QString("oSVersion"), ::OpenAPI::toJsonValue(m_o_s_version));
    }
    if (m_os_edition_isSet) {
        obj.insert(QString("osEdition"), ::OpenAPI::toJsonValue(m_os_edition));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("productType"), ::OpenAPI::toJsonValue(m_product_type));
    }
    return obj;
}

QString OAIOSDetails::getOSMajorVersion() const {
    return m_o_s_major_version;
}
void OAIOSDetails::setOSMajorVersion(const QString &o_s_major_version) {
    m_o_s_major_version = o_s_major_version;
    m_o_s_major_version_isSet = true;
}

bool OAIOSDetails::is_o_s_major_version_Set() const{
    return m_o_s_major_version_isSet;
}

bool OAIOSDetails::is_o_s_major_version_Valid() const{
    return m_o_s_major_version_isValid;
}

QString OAIOSDetails::getOSMinorVersion() const {
    return m_o_s_minor_version;
}
void OAIOSDetails::setOSMinorVersion(const QString &o_s_minor_version) {
    m_o_s_minor_version = o_s_minor_version;
    m_o_s_minor_version_isSet = true;
}

bool OAIOSDetails::is_o_s_minor_version_Set() const{
    return m_o_s_minor_version_isSet;
}

bool OAIOSDetails::is_o_s_minor_version_Valid() const{
    return m_o_s_minor_version_isValid;
}

QString OAIOSDetails::getOSVersion() const {
    return m_o_s_version;
}
void OAIOSDetails::setOSVersion(const QString &o_s_version) {
    m_o_s_version = o_s_version;
    m_o_s_version_isSet = true;
}

bool OAIOSDetails::is_o_s_version_Set() const{
    return m_o_s_version_isSet;
}

bool OAIOSDetails::is_o_s_version_Valid() const{
    return m_o_s_version_isValid;
}

QString OAIOSDetails::getOsEdition() const {
    return m_os_edition;
}
void OAIOSDetails::setOsEdition(const QString &os_edition) {
    m_os_edition = os_edition;
    m_os_edition_isSet = true;
}

bool OAIOSDetails::is_os_edition_Set() const{
    return m_os_edition_isSet;
}

bool OAIOSDetails::is_os_edition_Valid() const{
    return m_os_edition_isValid;
}

QString OAIOSDetails::getOsType() const {
    return m_os_type;
}
void OAIOSDetails::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIOSDetails::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIOSDetails::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIOSDetails::getProductType() const {
    return m_product_type;
}
void OAIOSDetails::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAIOSDetails::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAIOSDetails::is_product_type_Valid() const{
    return m_product_type_isValid;
}

bool OAIOSDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_o_s_major_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_s_minor_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_s_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
