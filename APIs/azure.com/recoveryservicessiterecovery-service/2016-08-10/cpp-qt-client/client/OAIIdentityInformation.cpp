/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityInformation::OAIIdentityInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityInformation::OAIIdentityInformation() {
    this->initializeModel();
}

OAIIdentityInformation::~OAIIdentityInformation() {}

void OAIIdentityInformation::initializeModel() {

    m_aad_authority_isSet = false;
    m_aad_authority_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_audience_isSet = false;
    m_audience_isValid = false;

    m_certificate_thumbprint_isSet = false;
    m_certificate_thumbprint_isValid = false;

    m_identity_provider_type_isSet = false;
    m_identity_provider_type_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIIdentityInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityInformation::fromJsonObject(QJsonObject json) {

    m_aad_authority_isValid = ::OpenAPI::fromJsonValue(m_aad_authority, json[QString("aadAuthority")]);
    m_aad_authority_isSet = !json[QString("aadAuthority")].isNull() && m_aad_authority_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_audience_isValid = ::OpenAPI::fromJsonValue(m_audience, json[QString("audience")]);
    m_audience_isSet = !json[QString("audience")].isNull() && m_audience_isValid;

    m_certificate_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_certificate_thumbprint, json[QString("certificateThumbprint")]);
    m_certificate_thumbprint_isSet = !json[QString("certificateThumbprint")].isNull() && m_certificate_thumbprint_isValid;

    m_identity_provider_type_isValid = ::OpenAPI::fromJsonValue(m_identity_provider_type, json[QString("identityProviderType")]);
    m_identity_provider_type_isSet = !json[QString("identityProviderType")].isNull() && m_identity_provider_type_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIIdentityInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_aad_authority_isSet) {
        obj.insert(QString("aadAuthority"), ::OpenAPI::toJsonValue(m_aad_authority));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_audience_isSet) {
        obj.insert(QString("audience"), ::OpenAPI::toJsonValue(m_audience));
    }
    if (m_certificate_thumbprint_isSet) {
        obj.insert(QString("certificateThumbprint"), ::OpenAPI::toJsonValue(m_certificate_thumbprint));
    }
    if (m_identity_provider_type_isSet) {
        obj.insert(QString("identityProviderType"), ::OpenAPI::toJsonValue(m_identity_provider_type));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIIdentityInformation::getAadAuthority() const {
    return m_aad_authority;
}
void OAIIdentityInformation::setAadAuthority(const QString &aad_authority) {
    m_aad_authority = aad_authority;
    m_aad_authority_isSet = true;
}

bool OAIIdentityInformation::is_aad_authority_Set() const{
    return m_aad_authority_isSet;
}

bool OAIIdentityInformation::is_aad_authority_Valid() const{
    return m_aad_authority_isValid;
}

QString OAIIdentityInformation::getApplicationId() const {
    return m_application_id;
}
void OAIIdentityInformation::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIIdentityInformation::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIIdentityInformation::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIIdentityInformation::getAudience() const {
    return m_audience;
}
void OAIIdentityInformation::setAudience(const QString &audience) {
    m_audience = audience;
    m_audience_isSet = true;
}

bool OAIIdentityInformation::is_audience_Set() const{
    return m_audience_isSet;
}

bool OAIIdentityInformation::is_audience_Valid() const{
    return m_audience_isValid;
}

QString OAIIdentityInformation::getCertificateThumbprint() const {
    return m_certificate_thumbprint;
}
void OAIIdentityInformation::setCertificateThumbprint(const QString &certificate_thumbprint) {
    m_certificate_thumbprint = certificate_thumbprint;
    m_certificate_thumbprint_isSet = true;
}

bool OAIIdentityInformation::is_certificate_thumbprint_Set() const{
    return m_certificate_thumbprint_isSet;
}

bool OAIIdentityInformation::is_certificate_thumbprint_Valid() const{
    return m_certificate_thumbprint_isValid;
}

QString OAIIdentityInformation::getIdentityProviderType() const {
    return m_identity_provider_type;
}
void OAIIdentityInformation::setIdentityProviderType(const QString &identity_provider_type) {
    m_identity_provider_type = identity_provider_type;
    m_identity_provider_type_isSet = true;
}

bool OAIIdentityInformation::is_identity_provider_type_Set() const{
    return m_identity_provider_type_isSet;
}

bool OAIIdentityInformation::is_identity_provider_type_Valid() const{
    return m_identity_provider_type_isValid;
}

QString OAIIdentityInformation::getObjectId() const {
    return m_object_id;
}
void OAIIdentityInformation::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIIdentityInformation::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIIdentityInformation::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIIdentityInformation::getTenantId() const {
    return m_tenant_id;
}
void OAIIdentityInformation::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIIdentityInformation::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIIdentityInformation::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIIdentityInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aad_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
