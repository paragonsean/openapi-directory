/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVMNicDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVMNicDetails::OAIVMNicDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVMNicDetails::OAIVMNicDetails() {
    this->initializeModel();
}

OAIVMNicDetails::~OAIVMNicDetails() {}

void OAIVMNicDetails::initializeModel() {

    m_ip_address_type_isSet = false;
    m_ip_address_type_isValid = false;

    m_nic_id_isSet = false;
    m_nic_id_isValid = false;

    m_primary_nic_static_ip_address_isSet = false;
    m_primary_nic_static_ip_address_isValid = false;

    m_recovery_nic_ip_address_type_isSet = false;
    m_recovery_nic_ip_address_type_isValid = false;

    m_recovery_vm_network_id_isSet = false;
    m_recovery_vm_network_id_isValid = false;

    m_recovery_vm_subnet_name_isSet = false;
    m_recovery_vm_subnet_name_isValid = false;

    m_replica_nic_id_isSet = false;
    m_replica_nic_id_isValid = false;

    m_replica_nic_static_ip_address_isSet = false;
    m_replica_nic_static_ip_address_isValid = false;

    m_selection_type_isSet = false;
    m_selection_type_isValid = false;

    m_source_nic_arm_id_isSet = false;
    m_source_nic_arm_id_isValid = false;

    m_v_m_network_name_isSet = false;
    m_v_m_network_name_isValid = false;

    m_v_m_subnet_name_isSet = false;
    m_v_m_subnet_name_isValid = false;
}

void OAIVMNicDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVMNicDetails::fromJsonObject(QJsonObject json) {

    m_ip_address_type_isValid = ::OpenAPI::fromJsonValue(m_ip_address_type, json[QString("ipAddressType")]);
    m_ip_address_type_isSet = !json[QString("ipAddressType")].isNull() && m_ip_address_type_isValid;

    m_nic_id_isValid = ::OpenAPI::fromJsonValue(m_nic_id, json[QString("nicId")]);
    m_nic_id_isSet = !json[QString("nicId")].isNull() && m_nic_id_isValid;

    m_primary_nic_static_ip_address_isValid = ::OpenAPI::fromJsonValue(m_primary_nic_static_ip_address, json[QString("primaryNicStaticIPAddress")]);
    m_primary_nic_static_ip_address_isSet = !json[QString("primaryNicStaticIPAddress")].isNull() && m_primary_nic_static_ip_address_isValid;

    m_recovery_nic_ip_address_type_isValid = ::OpenAPI::fromJsonValue(m_recovery_nic_ip_address_type, json[QString("recoveryNicIpAddressType")]);
    m_recovery_nic_ip_address_type_isSet = !json[QString("recoveryNicIpAddressType")].isNull() && m_recovery_nic_ip_address_type_isValid;

    m_recovery_vm_network_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_vm_network_id, json[QString("recoveryVMNetworkId")]);
    m_recovery_vm_network_id_isSet = !json[QString("recoveryVMNetworkId")].isNull() && m_recovery_vm_network_id_isValid;

    m_recovery_vm_subnet_name_isValid = ::OpenAPI::fromJsonValue(m_recovery_vm_subnet_name, json[QString("recoveryVMSubnetName")]);
    m_recovery_vm_subnet_name_isSet = !json[QString("recoveryVMSubnetName")].isNull() && m_recovery_vm_subnet_name_isValid;

    m_replica_nic_id_isValid = ::OpenAPI::fromJsonValue(m_replica_nic_id, json[QString("replicaNicId")]);
    m_replica_nic_id_isSet = !json[QString("replicaNicId")].isNull() && m_replica_nic_id_isValid;

    m_replica_nic_static_ip_address_isValid = ::OpenAPI::fromJsonValue(m_replica_nic_static_ip_address, json[QString("replicaNicStaticIPAddress")]);
    m_replica_nic_static_ip_address_isSet = !json[QString("replicaNicStaticIPAddress")].isNull() && m_replica_nic_static_ip_address_isValid;

    m_selection_type_isValid = ::OpenAPI::fromJsonValue(m_selection_type, json[QString("selectionType")]);
    m_selection_type_isSet = !json[QString("selectionType")].isNull() && m_selection_type_isValid;

    m_source_nic_arm_id_isValid = ::OpenAPI::fromJsonValue(m_source_nic_arm_id, json[QString("sourceNicArmId")]);
    m_source_nic_arm_id_isSet = !json[QString("sourceNicArmId")].isNull() && m_source_nic_arm_id_isValid;

    m_v_m_network_name_isValid = ::OpenAPI::fromJsonValue(m_v_m_network_name, json[QString("vMNetworkName")]);
    m_v_m_network_name_isSet = !json[QString("vMNetworkName")].isNull() && m_v_m_network_name_isValid;

    m_v_m_subnet_name_isValid = ::OpenAPI::fromJsonValue(m_v_m_subnet_name, json[QString("vMSubnetName")]);
    m_v_m_subnet_name_isSet = !json[QString("vMSubnetName")].isNull() && m_v_m_subnet_name_isValid;
}

QString OAIVMNicDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVMNicDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_address_type_isSet) {
        obj.insert(QString("ipAddressType"), ::OpenAPI::toJsonValue(m_ip_address_type));
    }
    if (m_nic_id_isSet) {
        obj.insert(QString("nicId"), ::OpenAPI::toJsonValue(m_nic_id));
    }
    if (m_primary_nic_static_ip_address_isSet) {
        obj.insert(QString("primaryNicStaticIPAddress"), ::OpenAPI::toJsonValue(m_primary_nic_static_ip_address));
    }
    if (m_recovery_nic_ip_address_type_isSet) {
        obj.insert(QString("recoveryNicIpAddressType"), ::OpenAPI::toJsonValue(m_recovery_nic_ip_address_type));
    }
    if (m_recovery_vm_network_id_isSet) {
        obj.insert(QString("recoveryVMNetworkId"), ::OpenAPI::toJsonValue(m_recovery_vm_network_id));
    }
    if (m_recovery_vm_subnet_name_isSet) {
        obj.insert(QString("recoveryVMSubnetName"), ::OpenAPI::toJsonValue(m_recovery_vm_subnet_name));
    }
    if (m_replica_nic_id_isSet) {
        obj.insert(QString("replicaNicId"), ::OpenAPI::toJsonValue(m_replica_nic_id));
    }
    if (m_replica_nic_static_ip_address_isSet) {
        obj.insert(QString("replicaNicStaticIPAddress"), ::OpenAPI::toJsonValue(m_replica_nic_static_ip_address));
    }
    if (m_selection_type_isSet) {
        obj.insert(QString("selectionType"), ::OpenAPI::toJsonValue(m_selection_type));
    }
    if (m_source_nic_arm_id_isSet) {
        obj.insert(QString("sourceNicArmId"), ::OpenAPI::toJsonValue(m_source_nic_arm_id));
    }
    if (m_v_m_network_name_isSet) {
        obj.insert(QString("vMNetworkName"), ::OpenAPI::toJsonValue(m_v_m_network_name));
    }
    if (m_v_m_subnet_name_isSet) {
        obj.insert(QString("vMSubnetName"), ::OpenAPI::toJsonValue(m_v_m_subnet_name));
    }
    return obj;
}

QString OAIVMNicDetails::getIpAddressType() const {
    return m_ip_address_type;
}
void OAIVMNicDetails::setIpAddressType(const QString &ip_address_type) {
    m_ip_address_type = ip_address_type;
    m_ip_address_type_isSet = true;
}

bool OAIVMNicDetails::is_ip_address_type_Set() const{
    return m_ip_address_type_isSet;
}

bool OAIVMNicDetails::is_ip_address_type_Valid() const{
    return m_ip_address_type_isValid;
}

QString OAIVMNicDetails::getNicId() const {
    return m_nic_id;
}
void OAIVMNicDetails::setNicId(const QString &nic_id) {
    m_nic_id = nic_id;
    m_nic_id_isSet = true;
}

bool OAIVMNicDetails::is_nic_id_Set() const{
    return m_nic_id_isSet;
}

bool OAIVMNicDetails::is_nic_id_Valid() const{
    return m_nic_id_isValid;
}

QString OAIVMNicDetails::getPrimaryNicStaticIpAddress() const {
    return m_primary_nic_static_ip_address;
}
void OAIVMNicDetails::setPrimaryNicStaticIpAddress(const QString &primary_nic_static_ip_address) {
    m_primary_nic_static_ip_address = primary_nic_static_ip_address;
    m_primary_nic_static_ip_address_isSet = true;
}

bool OAIVMNicDetails::is_primary_nic_static_ip_address_Set() const{
    return m_primary_nic_static_ip_address_isSet;
}

bool OAIVMNicDetails::is_primary_nic_static_ip_address_Valid() const{
    return m_primary_nic_static_ip_address_isValid;
}

QString OAIVMNicDetails::getRecoveryNicIpAddressType() const {
    return m_recovery_nic_ip_address_type;
}
void OAIVMNicDetails::setRecoveryNicIpAddressType(const QString &recovery_nic_ip_address_type) {
    m_recovery_nic_ip_address_type = recovery_nic_ip_address_type;
    m_recovery_nic_ip_address_type_isSet = true;
}

bool OAIVMNicDetails::is_recovery_nic_ip_address_type_Set() const{
    return m_recovery_nic_ip_address_type_isSet;
}

bool OAIVMNicDetails::is_recovery_nic_ip_address_type_Valid() const{
    return m_recovery_nic_ip_address_type_isValid;
}

QString OAIVMNicDetails::getRecoveryVmNetworkId() const {
    return m_recovery_vm_network_id;
}
void OAIVMNicDetails::setRecoveryVmNetworkId(const QString &recovery_vm_network_id) {
    m_recovery_vm_network_id = recovery_vm_network_id;
    m_recovery_vm_network_id_isSet = true;
}

bool OAIVMNicDetails::is_recovery_vm_network_id_Set() const{
    return m_recovery_vm_network_id_isSet;
}

bool OAIVMNicDetails::is_recovery_vm_network_id_Valid() const{
    return m_recovery_vm_network_id_isValid;
}

QString OAIVMNicDetails::getRecoveryVmSubnetName() const {
    return m_recovery_vm_subnet_name;
}
void OAIVMNicDetails::setRecoveryVmSubnetName(const QString &recovery_vm_subnet_name) {
    m_recovery_vm_subnet_name = recovery_vm_subnet_name;
    m_recovery_vm_subnet_name_isSet = true;
}

bool OAIVMNicDetails::is_recovery_vm_subnet_name_Set() const{
    return m_recovery_vm_subnet_name_isSet;
}

bool OAIVMNicDetails::is_recovery_vm_subnet_name_Valid() const{
    return m_recovery_vm_subnet_name_isValid;
}

QString OAIVMNicDetails::getReplicaNicId() const {
    return m_replica_nic_id;
}
void OAIVMNicDetails::setReplicaNicId(const QString &replica_nic_id) {
    m_replica_nic_id = replica_nic_id;
    m_replica_nic_id_isSet = true;
}

bool OAIVMNicDetails::is_replica_nic_id_Set() const{
    return m_replica_nic_id_isSet;
}

bool OAIVMNicDetails::is_replica_nic_id_Valid() const{
    return m_replica_nic_id_isValid;
}

QString OAIVMNicDetails::getReplicaNicStaticIpAddress() const {
    return m_replica_nic_static_ip_address;
}
void OAIVMNicDetails::setReplicaNicStaticIpAddress(const QString &replica_nic_static_ip_address) {
    m_replica_nic_static_ip_address = replica_nic_static_ip_address;
    m_replica_nic_static_ip_address_isSet = true;
}

bool OAIVMNicDetails::is_replica_nic_static_ip_address_Set() const{
    return m_replica_nic_static_ip_address_isSet;
}

bool OAIVMNicDetails::is_replica_nic_static_ip_address_Valid() const{
    return m_replica_nic_static_ip_address_isValid;
}

QString OAIVMNicDetails::getSelectionType() const {
    return m_selection_type;
}
void OAIVMNicDetails::setSelectionType(const QString &selection_type) {
    m_selection_type = selection_type;
    m_selection_type_isSet = true;
}

bool OAIVMNicDetails::is_selection_type_Set() const{
    return m_selection_type_isSet;
}

bool OAIVMNicDetails::is_selection_type_Valid() const{
    return m_selection_type_isValid;
}

QString OAIVMNicDetails::getSourceNicArmId() const {
    return m_source_nic_arm_id;
}
void OAIVMNicDetails::setSourceNicArmId(const QString &source_nic_arm_id) {
    m_source_nic_arm_id = source_nic_arm_id;
    m_source_nic_arm_id_isSet = true;
}

bool OAIVMNicDetails::is_source_nic_arm_id_Set() const{
    return m_source_nic_arm_id_isSet;
}

bool OAIVMNicDetails::is_source_nic_arm_id_Valid() const{
    return m_source_nic_arm_id_isValid;
}

QString OAIVMNicDetails::getVMNetworkName() const {
    return m_v_m_network_name;
}
void OAIVMNicDetails::setVMNetworkName(const QString &v_m_network_name) {
    m_v_m_network_name = v_m_network_name;
    m_v_m_network_name_isSet = true;
}

bool OAIVMNicDetails::is_v_m_network_name_Set() const{
    return m_v_m_network_name_isSet;
}

bool OAIVMNicDetails::is_v_m_network_name_Valid() const{
    return m_v_m_network_name_isValid;
}

QString OAIVMNicDetails::getVMSubnetName() const {
    return m_v_m_subnet_name;
}
void OAIVMNicDetails::setVMSubnetName(const QString &v_m_subnet_name) {
    m_v_m_subnet_name = v_m_subnet_name;
    m_v_m_subnet_name_isSet = true;
}

bool OAIVMNicDetails::is_v_m_subnet_name_Set() const{
    return m_v_m_subnet_name_isSet;
}

bool OAIVMNicDetails::is_v_m_subnet_name_Valid() const{
    return m_v_m_subnet_name_isValid;
}

bool OAIVMNicDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_address_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_nic_static_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_nic_ip_address_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_vm_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_vm_subnet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_nic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_nic_static_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_nic_arm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_m_network_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_m_subnet_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVMNicDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
