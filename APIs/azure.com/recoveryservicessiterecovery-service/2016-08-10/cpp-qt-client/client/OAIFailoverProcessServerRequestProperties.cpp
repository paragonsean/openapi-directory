/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailoverProcessServerRequestProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailoverProcessServerRequestProperties::OAIFailoverProcessServerRequestProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailoverProcessServerRequestProperties::OAIFailoverProcessServerRequestProperties() {
    this->initializeModel();
}

OAIFailoverProcessServerRequestProperties::~OAIFailoverProcessServerRequestProperties() {}

void OAIFailoverProcessServerRequestProperties::initializeModel() {

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_source_process_server_id_isSet = false;
    m_source_process_server_id_isValid = false;

    m_target_process_server_id_isSet = false;
    m_target_process_server_id_isValid = false;

    m_update_type_isSet = false;
    m_update_type_isValid = false;

    m_vms_to_migrate_isSet = false;
    m_vms_to_migrate_isValid = false;
}

void OAIFailoverProcessServerRequestProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailoverProcessServerRequestProperties::fromJsonObject(QJsonObject json) {

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_source_process_server_id_isValid = ::OpenAPI::fromJsonValue(m_source_process_server_id, json[QString("sourceProcessServerId")]);
    m_source_process_server_id_isSet = !json[QString("sourceProcessServerId")].isNull() && m_source_process_server_id_isValid;

    m_target_process_server_id_isValid = ::OpenAPI::fromJsonValue(m_target_process_server_id, json[QString("targetProcessServerId")]);
    m_target_process_server_id_isSet = !json[QString("targetProcessServerId")].isNull() && m_target_process_server_id_isValid;

    m_update_type_isValid = ::OpenAPI::fromJsonValue(m_update_type, json[QString("updateType")]);
    m_update_type_isSet = !json[QString("updateType")].isNull() && m_update_type_isValid;

    m_vms_to_migrate_isValid = ::OpenAPI::fromJsonValue(m_vms_to_migrate, json[QString("vmsToMigrate")]);
    m_vms_to_migrate_isSet = !json[QString("vmsToMigrate")].isNull() && m_vms_to_migrate_isValid;
}

QString OAIFailoverProcessServerRequestProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailoverProcessServerRequestProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_source_process_server_id_isSet) {
        obj.insert(QString("sourceProcessServerId"), ::OpenAPI::toJsonValue(m_source_process_server_id));
    }
    if (m_target_process_server_id_isSet) {
        obj.insert(QString("targetProcessServerId"), ::OpenAPI::toJsonValue(m_target_process_server_id));
    }
    if (m_update_type_isSet) {
        obj.insert(QString("updateType"), ::OpenAPI::toJsonValue(m_update_type));
    }
    if (m_vms_to_migrate.size() > 0) {
        obj.insert(QString("vmsToMigrate"), ::OpenAPI::toJsonValue(m_vms_to_migrate));
    }
    return obj;
}

QString OAIFailoverProcessServerRequestProperties::getContainerName() const {
    return m_container_name;
}
void OAIFailoverProcessServerRequestProperties::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAIFailoverProcessServerRequestProperties::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAIFailoverProcessServerRequestProperties::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAIFailoverProcessServerRequestProperties::getSourceProcessServerId() const {
    return m_source_process_server_id;
}
void OAIFailoverProcessServerRequestProperties::setSourceProcessServerId(const QString &source_process_server_id) {
    m_source_process_server_id = source_process_server_id;
    m_source_process_server_id_isSet = true;
}

bool OAIFailoverProcessServerRequestProperties::is_source_process_server_id_Set() const{
    return m_source_process_server_id_isSet;
}

bool OAIFailoverProcessServerRequestProperties::is_source_process_server_id_Valid() const{
    return m_source_process_server_id_isValid;
}

QString OAIFailoverProcessServerRequestProperties::getTargetProcessServerId() const {
    return m_target_process_server_id;
}
void OAIFailoverProcessServerRequestProperties::setTargetProcessServerId(const QString &target_process_server_id) {
    m_target_process_server_id = target_process_server_id;
    m_target_process_server_id_isSet = true;
}

bool OAIFailoverProcessServerRequestProperties::is_target_process_server_id_Set() const{
    return m_target_process_server_id_isSet;
}

bool OAIFailoverProcessServerRequestProperties::is_target_process_server_id_Valid() const{
    return m_target_process_server_id_isValid;
}

QString OAIFailoverProcessServerRequestProperties::getUpdateType() const {
    return m_update_type;
}
void OAIFailoverProcessServerRequestProperties::setUpdateType(const QString &update_type) {
    m_update_type = update_type;
    m_update_type_isSet = true;
}

bool OAIFailoverProcessServerRequestProperties::is_update_type_Set() const{
    return m_update_type_isSet;
}

bool OAIFailoverProcessServerRequestProperties::is_update_type_Valid() const{
    return m_update_type_isValid;
}

QList<QString> OAIFailoverProcessServerRequestProperties::getVmsToMigrate() const {
    return m_vms_to_migrate;
}
void OAIFailoverProcessServerRequestProperties::setVmsToMigrate(const QList<QString> &vms_to_migrate) {
    m_vms_to_migrate = vms_to_migrate;
    m_vms_to_migrate_isSet = true;
}

bool OAIFailoverProcessServerRequestProperties::is_vms_to_migrate_Set() const{
    return m_vms_to_migrate_isSet;
}

bool OAIFailoverProcessServerRequestProperties::is_vms_to_migrate_Valid() const{
    return m_vms_to_migrate_isValid;
}

bool OAIFailoverProcessServerRequestProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_process_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_process_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vms_to_migrate.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailoverProcessServerRequestProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
