/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFailoverReplicationProtectedItemDetails.h
 *
 * Failover details for a replication protected item.
 */

#ifndef OAIFailoverReplicationProtectedItemDetails_H
#define OAIFailoverReplicationProtectedItemDetails_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFailoverReplicationProtectedItemDetails : public OAIObject {
public:
    OAIFailoverReplicationProtectedItemDetails();
    OAIFailoverReplicationProtectedItemDetails(QString json);
    ~OAIFailoverReplicationProtectedItemDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFriendlyName() const;
    void setFriendlyName(const QString &friendly_name);
    bool is_friendly_name_Set() const;
    bool is_friendly_name_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNetworkConnectionStatus() const;
    void setNetworkConnectionStatus(const QString &network_connection_status);
    bool is_network_connection_status_Set() const;
    bool is_network_connection_status_Valid() const;

    QString getNetworkFriendlyName() const;
    void setNetworkFriendlyName(const QString &network_friendly_name);
    bool is_network_friendly_name_Set() const;
    bool is_network_friendly_name_Valid() const;

    QString getRecoveryPointId() const;
    void setRecoveryPointId(const QString &recovery_point_id);
    bool is_recovery_point_id_Set() const;
    bool is_recovery_point_id_Valid() const;

    QDateTime getRecoveryPointTime() const;
    void setRecoveryPointTime(const QDateTime &recovery_point_time);
    bool is_recovery_point_time_Set() const;
    bool is_recovery_point_time_Valid() const;

    QString getSubnet() const;
    void setSubnet(const QString &subnet);
    bool is_subnet_Set() const;
    bool is_subnet_Valid() const;

    QString getTestVmFriendlyName() const;
    void setTestVmFriendlyName(const QString &test_vm_friendly_name);
    bool is_test_vm_friendly_name_Set() const;
    bool is_test_vm_friendly_name_Valid() const;

    QString getTestVmName() const;
    void setTestVmName(const QString &test_vm_name);
    bool is_test_vm_name_Set() const;
    bool is_test_vm_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_friendly_name;
    bool m_friendly_name_isSet;
    bool m_friendly_name_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_network_connection_status;
    bool m_network_connection_status_isSet;
    bool m_network_connection_status_isValid;

    QString m_network_friendly_name;
    bool m_network_friendly_name_isSet;
    bool m_network_friendly_name_isValid;

    QString m_recovery_point_id;
    bool m_recovery_point_id_isSet;
    bool m_recovery_point_id_isValid;

    QDateTime m_recovery_point_time;
    bool m_recovery_point_time_isSet;
    bool m_recovery_point_time_isValid;

    QString m_subnet;
    bool m_subnet_isSet;
    bool m_subnet_isValid;

    QString m_test_vm_friendly_name;
    bool m_test_vm_friendly_name_isSet;
    bool m_test_vm_friendly_name_isValid;

    QString m_test_vm_name;
    bool m_test_vm_name_isSet;
    bool m_test_vm_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFailoverReplicationProtectedItemDetails)

#endif // OAIFailoverReplicationProtectedItemDetails_H
