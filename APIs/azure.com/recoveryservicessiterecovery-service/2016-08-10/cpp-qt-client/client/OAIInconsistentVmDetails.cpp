/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInconsistentVmDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInconsistentVmDetails::OAIInconsistentVmDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInconsistentVmDetails::OAIInconsistentVmDetails() {
    this->initializeModel();
}

OAIInconsistentVmDetails::~OAIInconsistentVmDetails() {}

void OAIInconsistentVmDetails::initializeModel() {

    m_cloud_name_isSet = false;
    m_cloud_name_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_error_ids_isSet = false;
    m_error_ids_isValid = false;

    m_vm_name_isSet = false;
    m_vm_name_isValid = false;
}

void OAIInconsistentVmDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInconsistentVmDetails::fromJsonObject(QJsonObject json) {

    m_cloud_name_isValid = ::OpenAPI::fromJsonValue(m_cloud_name, json[QString("cloudName")]);
    m_cloud_name_isSet = !json[QString("cloudName")].isNull() && m_cloud_name_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_error_ids_isValid = ::OpenAPI::fromJsonValue(m_error_ids, json[QString("errorIds")]);
    m_error_ids_isSet = !json[QString("errorIds")].isNull() && m_error_ids_isValid;

    m_vm_name_isValid = ::OpenAPI::fromJsonValue(m_vm_name, json[QString("vmName")]);
    m_vm_name_isSet = !json[QString("vmName")].isNull() && m_vm_name_isValid;
}

QString OAIInconsistentVmDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInconsistentVmDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_name_isSet) {
        obj.insert(QString("cloudName"), ::OpenAPI::toJsonValue(m_cloud_name));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_error_ids.size() > 0) {
        obj.insert(QString("errorIds"), ::OpenAPI::toJsonValue(m_error_ids));
    }
    if (m_vm_name_isSet) {
        obj.insert(QString("vmName"), ::OpenAPI::toJsonValue(m_vm_name));
    }
    return obj;
}

QString OAIInconsistentVmDetails::getCloudName() const {
    return m_cloud_name;
}
void OAIInconsistentVmDetails::setCloudName(const QString &cloud_name) {
    m_cloud_name = cloud_name;
    m_cloud_name_isSet = true;
}

bool OAIInconsistentVmDetails::is_cloud_name_Set() const{
    return m_cloud_name_isSet;
}

bool OAIInconsistentVmDetails::is_cloud_name_Valid() const{
    return m_cloud_name_isValid;
}

QList<QString> OAIInconsistentVmDetails::getDetails() const {
    return m_details;
}
void OAIInconsistentVmDetails::setDetails(const QList<QString> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIInconsistentVmDetails::is_details_Set() const{
    return m_details_isSet;
}

bool OAIInconsistentVmDetails::is_details_Valid() const{
    return m_details_isValid;
}

QList<QString> OAIInconsistentVmDetails::getErrorIds() const {
    return m_error_ids;
}
void OAIInconsistentVmDetails::setErrorIds(const QList<QString> &error_ids) {
    m_error_ids = error_ids;
    m_error_ids_isSet = true;
}

bool OAIInconsistentVmDetails::is_error_ids_Set() const{
    return m_error_ids_isSet;
}

bool OAIInconsistentVmDetails::is_error_ids_Valid() const{
    return m_error_ids_isValid;
}

QString OAIInconsistentVmDetails::getVmName() const {
    return m_vm_name;
}
void OAIInconsistentVmDetails::setVmName(const QString &vm_name) {
    m_vm_name = vm_name;
    m_vm_name_isSet = true;
}

bool OAIInconsistentVmDetails::is_vm_name_Set() const{
    return m_vm_name_isSet;
}

bool OAIInconsistentVmDetails::is_vm_name_Valid() const{
    return m_vm_name_isValid;
}

bool OAIInconsistentVmDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInconsistentVmDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
