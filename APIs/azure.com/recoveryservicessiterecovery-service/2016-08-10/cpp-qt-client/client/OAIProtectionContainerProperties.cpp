/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtectionContainerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtectionContainerProperties::OAIProtectionContainerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtectionContainerProperties::OAIProtectionContainerProperties() {
    this->initializeModel();
}

OAIProtectionContainerProperties::~OAIProtectionContainerProperties() {}

void OAIProtectionContainerProperties::initializeModel() {

    m_fabric_friendly_name_isSet = false;
    m_fabric_friendly_name_isValid = false;

    m_fabric_specific_details_isSet = false;
    m_fabric_specific_details_isValid = false;

    m_fabric_type_isSet = false;
    m_fabric_type_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_pairing_status_isSet = false;
    m_pairing_status_isValid = false;

    m_protected_item_count_isSet = false;
    m_protected_item_count_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIProtectionContainerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtectionContainerProperties::fromJsonObject(QJsonObject json) {

    m_fabric_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_fabric_friendly_name, json[QString("fabricFriendlyName")]);
    m_fabric_friendly_name_isSet = !json[QString("fabricFriendlyName")].isNull() && m_fabric_friendly_name_isValid;

    m_fabric_specific_details_isValid = ::OpenAPI::fromJsonValue(m_fabric_specific_details, json[QString("fabricSpecificDetails")]);
    m_fabric_specific_details_isSet = !json[QString("fabricSpecificDetails")].isNull() && m_fabric_specific_details_isValid;

    m_fabric_type_isValid = ::OpenAPI::fromJsonValue(m_fabric_type, json[QString("fabricType")]);
    m_fabric_type_isSet = !json[QString("fabricType")].isNull() && m_fabric_type_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_pairing_status_isValid = ::OpenAPI::fromJsonValue(m_pairing_status, json[QString("pairingStatus")]);
    m_pairing_status_isSet = !json[QString("pairingStatus")].isNull() && m_pairing_status_isValid;

    m_protected_item_count_isValid = ::OpenAPI::fromJsonValue(m_protected_item_count, json[QString("protectedItemCount")]);
    m_protected_item_count_isSet = !json[QString("protectedItemCount")].isNull() && m_protected_item_count_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIProtectionContainerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtectionContainerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_fabric_friendly_name_isSet) {
        obj.insert(QString("fabricFriendlyName"), ::OpenAPI::toJsonValue(m_fabric_friendly_name));
    }
    if (m_fabric_specific_details.isSet()) {
        obj.insert(QString("fabricSpecificDetails"), ::OpenAPI::toJsonValue(m_fabric_specific_details));
    }
    if (m_fabric_type_isSet) {
        obj.insert(QString("fabricType"), ::OpenAPI::toJsonValue(m_fabric_type));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_pairing_status_isSet) {
        obj.insert(QString("pairingStatus"), ::OpenAPI::toJsonValue(m_pairing_status));
    }
    if (m_protected_item_count_isSet) {
        obj.insert(QString("protectedItemCount"), ::OpenAPI::toJsonValue(m_protected_item_count));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIProtectionContainerProperties::getFabricFriendlyName() const {
    return m_fabric_friendly_name;
}
void OAIProtectionContainerProperties::setFabricFriendlyName(const QString &fabric_friendly_name) {
    m_fabric_friendly_name = fabric_friendly_name;
    m_fabric_friendly_name_isSet = true;
}

bool OAIProtectionContainerProperties::is_fabric_friendly_name_Set() const{
    return m_fabric_friendly_name_isSet;
}

bool OAIProtectionContainerProperties::is_fabric_friendly_name_Valid() const{
    return m_fabric_friendly_name_isValid;
}

OAIProtectionContainerFabricSpecificDetails OAIProtectionContainerProperties::getFabricSpecificDetails() const {
    return m_fabric_specific_details;
}
void OAIProtectionContainerProperties::setFabricSpecificDetails(const OAIProtectionContainerFabricSpecificDetails &fabric_specific_details) {
    m_fabric_specific_details = fabric_specific_details;
    m_fabric_specific_details_isSet = true;
}

bool OAIProtectionContainerProperties::is_fabric_specific_details_Set() const{
    return m_fabric_specific_details_isSet;
}

bool OAIProtectionContainerProperties::is_fabric_specific_details_Valid() const{
    return m_fabric_specific_details_isValid;
}

QString OAIProtectionContainerProperties::getFabricType() const {
    return m_fabric_type;
}
void OAIProtectionContainerProperties::setFabricType(const QString &fabric_type) {
    m_fabric_type = fabric_type;
    m_fabric_type_isSet = true;
}

bool OAIProtectionContainerProperties::is_fabric_type_Set() const{
    return m_fabric_type_isSet;
}

bool OAIProtectionContainerProperties::is_fabric_type_Valid() const{
    return m_fabric_type_isValid;
}

QString OAIProtectionContainerProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIProtectionContainerProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIProtectionContainerProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIProtectionContainerProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIProtectionContainerProperties::getPairingStatus() const {
    return m_pairing_status;
}
void OAIProtectionContainerProperties::setPairingStatus(const QString &pairing_status) {
    m_pairing_status = pairing_status;
    m_pairing_status_isSet = true;
}

bool OAIProtectionContainerProperties::is_pairing_status_Set() const{
    return m_pairing_status_isSet;
}

bool OAIProtectionContainerProperties::is_pairing_status_Valid() const{
    return m_pairing_status_isValid;
}

qint32 OAIProtectionContainerProperties::getProtectedItemCount() const {
    return m_protected_item_count;
}
void OAIProtectionContainerProperties::setProtectedItemCount(const qint32 &protected_item_count) {
    m_protected_item_count = protected_item_count;
    m_protected_item_count_isSet = true;
}

bool OAIProtectionContainerProperties::is_protected_item_count_Set() const{
    return m_protected_item_count_isSet;
}

bool OAIProtectionContainerProperties::is_protected_item_count_Valid() const{
    return m_protected_item_count_isValid;
}

QString OAIProtectionContainerProperties::getRole() const {
    return m_role;
}
void OAIProtectionContainerProperties::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIProtectionContainerProperties::is_role_Set() const{
    return m_role_isSet;
}

bool OAIProtectionContainerProperties::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIProtectionContainerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fabric_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_specific_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pairing_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtectionContainerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
