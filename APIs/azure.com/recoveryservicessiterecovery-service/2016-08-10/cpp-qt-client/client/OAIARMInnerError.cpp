/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIARMInnerError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIARMInnerError::OAIARMInnerError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIARMInnerError::OAIARMInnerError() {
    this->initializeModel();
}

OAIARMInnerError::~OAIARMInnerError() {}

void OAIARMInnerError::initializeModel() {

    m_cloud_id_isSet = false;
    m_cloud_id_isValid = false;

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_fabric_id_isSet = false;
    m_fabric_id_isValid = false;

    m_h_v_cluster_id_isSet = false;
    m_h_v_cluster_id_isValid = false;

    m_h_v_host_id_isSet = false;
    m_h_v_host_id_isValid = false;

    m_live_id_isSet = false;
    m_live_id_isValid = false;

    m_method_status_isSet = false;
    m_method_status_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_serialized_srs_log_context_isSet = false;
    m_serialized_srs_log_context_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_trace_isSet = false;
    m_trace_isValid = false;

    m_vm_id_isSet = false;
    m_vm_id_isValid = false;
}

void OAIARMInnerError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIARMInnerError::fromJsonObject(QJsonObject json) {

    m_cloud_id_isValid = ::OpenAPI::fromJsonValue(m_cloud_id, json[QString("cloudId")]);
    m_cloud_id_isSet = !json[QString("cloudId")].isNull() && m_cloud_id_isValid;

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("containerId")]);
    m_container_id_isSet = !json[QString("containerId")].isNull() && m_container_id_isValid;

    m_fabric_id_isValid = ::OpenAPI::fromJsonValue(m_fabric_id, json[QString("fabricId")]);
    m_fabric_id_isSet = !json[QString("fabricId")].isNull() && m_fabric_id_isValid;

    m_h_v_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_h_v_cluster_id, json[QString("hVClusterId")]);
    m_h_v_cluster_id_isSet = !json[QString("hVClusterId")].isNull() && m_h_v_cluster_id_isValid;

    m_h_v_host_id_isValid = ::OpenAPI::fromJsonValue(m_h_v_host_id, json[QString("hVHostId")]);
    m_h_v_host_id_isSet = !json[QString("hVHostId")].isNull() && m_h_v_host_id_isValid;

    m_live_id_isValid = ::OpenAPI::fromJsonValue(m_live_id, json[QString("liveId")]);
    m_live_id_isSet = !json[QString("liveId")].isNull() && m_live_id_isValid;

    m_method_status_isValid = ::OpenAPI::fromJsonValue(m_method_status, json[QString("methodStatus")]);
    m_method_status_isSet = !json[QString("methodStatus")].isNull() && m_method_status_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("networkId")]);
    m_network_id_isSet = !json[QString("networkId")].isNull() && m_network_id_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_serialized_srs_log_context_isValid = ::OpenAPI::fromJsonValue(m_serialized_srs_log_context, json[QString("serializedSRSLogContext")]);
    m_serialized_srs_log_context_isSet = !json[QString("serializedSRSLogContext")].isNull() && m_serialized_srs_log_context_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_trace_isValid = ::OpenAPI::fromJsonValue(m_trace, json[QString("trace")]);
    m_trace_isSet = !json[QString("trace")].isNull() && m_trace_isValid;

    m_vm_id_isValid = ::OpenAPI::fromJsonValue(m_vm_id, json[QString("vmId")]);
    m_vm_id_isSet = !json[QString("vmId")].isNull() && m_vm_id_isValid;
}

QString OAIARMInnerError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIARMInnerError::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_id_isSet) {
        obj.insert(QString("cloudId"), ::OpenAPI::toJsonValue(m_cloud_id));
    }
    if (m_container_id_isSet) {
        obj.insert(QString("containerId"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_fabric_id_isSet) {
        obj.insert(QString("fabricId"), ::OpenAPI::toJsonValue(m_fabric_id));
    }
    if (m_h_v_cluster_id_isSet) {
        obj.insert(QString("hVClusterId"), ::OpenAPI::toJsonValue(m_h_v_cluster_id));
    }
    if (m_h_v_host_id_isSet) {
        obj.insert(QString("hVHostId"), ::OpenAPI::toJsonValue(m_h_v_host_id));
    }
    if (m_live_id_isSet) {
        obj.insert(QString("liveId"), ::OpenAPI::toJsonValue(m_live_id));
    }
    if (m_method_status.isSet()) {
        obj.insert(QString("methodStatus"), ::OpenAPI::toJsonValue(m_method_status));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("networkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_serialized_srs_log_context_isSet) {
        obj.insert(QString("serializedSRSLogContext"), ::OpenAPI::toJsonValue(m_serialized_srs_log_context));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_trace_isSet) {
        obj.insert(QString("trace"), ::OpenAPI::toJsonValue(m_trace));
    }
    if (m_vm_id_isSet) {
        obj.insert(QString("vmId"), ::OpenAPI::toJsonValue(m_vm_id));
    }
    return obj;
}

QString OAIARMInnerError::getCloudId() const {
    return m_cloud_id;
}
void OAIARMInnerError::setCloudId(const QString &cloud_id) {
    m_cloud_id = cloud_id;
    m_cloud_id_isSet = true;
}

bool OAIARMInnerError::is_cloud_id_Set() const{
    return m_cloud_id_isSet;
}

bool OAIARMInnerError::is_cloud_id_Valid() const{
    return m_cloud_id_isValid;
}

QString OAIARMInnerError::getContainerId() const {
    return m_container_id;
}
void OAIARMInnerError::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAIARMInnerError::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAIARMInnerError::is_container_id_Valid() const{
    return m_container_id_isValid;
}

QString OAIARMInnerError::getFabricId() const {
    return m_fabric_id;
}
void OAIARMInnerError::setFabricId(const QString &fabric_id) {
    m_fabric_id = fabric_id;
    m_fabric_id_isSet = true;
}

bool OAIARMInnerError::is_fabric_id_Set() const{
    return m_fabric_id_isSet;
}

bool OAIARMInnerError::is_fabric_id_Valid() const{
    return m_fabric_id_isValid;
}

QString OAIARMInnerError::getHVClusterId() const {
    return m_h_v_cluster_id;
}
void OAIARMInnerError::setHVClusterId(const QString &h_v_cluster_id) {
    m_h_v_cluster_id = h_v_cluster_id;
    m_h_v_cluster_id_isSet = true;
}

bool OAIARMInnerError::is_h_v_cluster_id_Set() const{
    return m_h_v_cluster_id_isSet;
}

bool OAIARMInnerError::is_h_v_cluster_id_Valid() const{
    return m_h_v_cluster_id_isValid;
}

QString OAIARMInnerError::getHVHostId() const {
    return m_h_v_host_id;
}
void OAIARMInnerError::setHVHostId(const QString &h_v_host_id) {
    m_h_v_host_id = h_v_host_id;
    m_h_v_host_id_isSet = true;
}

bool OAIARMInnerError::is_h_v_host_id_Set() const{
    return m_h_v_host_id_isSet;
}

bool OAIARMInnerError::is_h_v_host_id_Valid() const{
    return m_h_v_host_id_isValid;
}

QString OAIARMInnerError::getLiveId() const {
    return m_live_id;
}
void OAIARMInnerError::setLiveId(const QString &live_id) {
    m_live_id = live_id;
    m_live_id_isSet = true;
}

bool OAIARMInnerError::is_live_id_Set() const{
    return m_live_id_isSet;
}

bool OAIARMInnerError::is_live_id_Valid() const{
    return m_live_id_isValid;
}

OAIMethodCallStatus OAIARMInnerError::getMethodStatus() const {
    return m_method_status;
}
void OAIARMInnerError::setMethodStatus(const OAIMethodCallStatus &method_status) {
    m_method_status = method_status;
    m_method_status_isSet = true;
}

bool OAIARMInnerError::is_method_status_Set() const{
    return m_method_status_isSet;
}

bool OAIARMInnerError::is_method_status_Valid() const{
    return m_method_status_isValid;
}

QString OAIARMInnerError::getNetworkId() const {
    return m_network_id;
}
void OAIARMInnerError::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAIARMInnerError::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAIARMInnerError::is_network_id_Valid() const{
    return m_network_id_isValid;
}

QString OAIARMInnerError::getResourceId() const {
    return m_resource_id;
}
void OAIARMInnerError::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIARMInnerError::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIARMInnerError::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIARMInnerError::getResourceName() const {
    return m_resource_name;
}
void OAIARMInnerError::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIARMInnerError::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIARMInnerError::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIARMInnerError::getSerializedSrsLogContext() const {
    return m_serialized_srs_log_context;
}
void OAIARMInnerError::setSerializedSrsLogContext(const QString &serialized_srs_log_context) {
    m_serialized_srs_log_context = serialized_srs_log_context;
    m_serialized_srs_log_context_isSet = true;
}

bool OAIARMInnerError::is_serialized_srs_log_context_Set() const{
    return m_serialized_srs_log_context_isSet;
}

bool OAIARMInnerError::is_serialized_srs_log_context_Valid() const{
    return m_serialized_srs_log_context_isValid;
}

QString OAIARMInnerError::getSource() const {
    return m_source;
}
void OAIARMInnerError::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIARMInnerError::is_source_Set() const{
    return m_source_isSet;
}

bool OAIARMInnerError::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIARMInnerError::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIARMInnerError::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIARMInnerError::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIARMInnerError::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIARMInnerError::getTrace() const {
    return m_trace;
}
void OAIARMInnerError::setTrace(const QString &trace) {
    m_trace = trace;
    m_trace_isSet = true;
}

bool OAIARMInnerError::is_trace_Set() const{
    return m_trace_isSet;
}

bool OAIARMInnerError::is_trace_Valid() const{
    return m_trace_isValid;
}

QString OAIARMInnerError::getVmId() const {
    return m_vm_id;
}
void OAIARMInnerError::setVmId(const QString &vm_id) {
    m_vm_id = vm_id;
    m_vm_id_isSet = true;
}

bool OAIARMInnerError::is_vm_id_Set() const{
    return m_vm_id_isSet;
}

bool OAIARMInnerError::is_vm_id_Valid() const{
    return m_vm_id_isValid;
}

bool OAIARMInnerError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_h_v_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_h_v_host_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serialized_srs_log_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIARMInnerError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
