/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrentScenarioDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrentScenarioDetails::OAICurrentScenarioDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrentScenarioDetails::OAICurrentScenarioDetails() {
    this->initializeModel();
}

OAICurrentScenarioDetails::~OAICurrentScenarioDetails() {}

void OAICurrentScenarioDetails::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_scenario_name_isSet = false;
    m_scenario_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAICurrentScenarioDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrentScenarioDetails::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_scenario_name_isValid = ::OpenAPI::fromJsonValue(m_scenario_name, json[QString("scenarioName")]);
    m_scenario_name_isSet = !json[QString("scenarioName")].isNull() && m_scenario_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAICurrentScenarioDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrentScenarioDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_scenario_name_isSet) {
        obj.insert(QString("scenarioName"), ::OpenAPI::toJsonValue(m_scenario_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAICurrentScenarioDetails::getJobId() const {
    return m_job_id;
}
void OAICurrentScenarioDetails::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAICurrentScenarioDetails::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAICurrentScenarioDetails::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAICurrentScenarioDetails::getScenarioName() const {
    return m_scenario_name;
}
void OAICurrentScenarioDetails::setScenarioName(const QString &scenario_name) {
    m_scenario_name = scenario_name;
    m_scenario_name_isSet = true;
}

bool OAICurrentScenarioDetails::is_scenario_name_Set() const{
    return m_scenario_name_isSet;
}

bool OAICurrentScenarioDetails::is_scenario_name_Valid() const{
    return m_scenario_name_isValid;
}

QDateTime OAICurrentScenarioDetails::getStartTime() const {
    return m_start_time;
}
void OAICurrentScenarioDetails::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICurrentScenarioDetails::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICurrentScenarioDetails::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAICurrentScenarioDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scenario_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrentScenarioDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
