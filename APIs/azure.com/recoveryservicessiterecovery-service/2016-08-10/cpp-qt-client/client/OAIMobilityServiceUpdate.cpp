/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMobilityServiceUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMobilityServiceUpdate::OAIMobilityServiceUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMobilityServiceUpdate::OAIMobilityServiceUpdate() {
    this->initializeModel();
}

OAIMobilityServiceUpdate::~OAIMobilityServiceUpdate() {}

void OAIMobilityServiceUpdate::initializeModel() {

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_reboot_status_isSet = false;
    m_reboot_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIMobilityServiceUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMobilityServiceUpdate::fromJsonObject(QJsonObject json) {

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_reboot_status_isValid = ::OpenAPI::fromJsonValue(m_reboot_status, json[QString("rebootStatus")]);
    m_reboot_status_isSet = !json[QString("rebootStatus")].isNull() && m_reboot_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIMobilityServiceUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMobilityServiceUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_reboot_status_isSet) {
        obj.insert(QString("rebootStatus"), ::OpenAPI::toJsonValue(m_reboot_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIMobilityServiceUpdate::getOsType() const {
    return m_os_type;
}
void OAIMobilityServiceUpdate::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIMobilityServiceUpdate::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIMobilityServiceUpdate::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIMobilityServiceUpdate::getRebootStatus() const {
    return m_reboot_status;
}
void OAIMobilityServiceUpdate::setRebootStatus(const QString &reboot_status) {
    m_reboot_status = reboot_status;
    m_reboot_status_isSet = true;
}

bool OAIMobilityServiceUpdate::is_reboot_status_Set() const{
    return m_reboot_status_isSet;
}

bool OAIMobilityServiceUpdate::is_reboot_status_Valid() const{
    return m_reboot_status_isValid;
}

QString OAIMobilityServiceUpdate::getVersion() const {
    return m_version;
}
void OAIMobilityServiceUpdate::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIMobilityServiceUpdate::is_version_Set() const{
    return m_version_isSet;
}

bool OAIMobilityServiceUpdate::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIMobilityServiceUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reboot_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMobilityServiceUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
