/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInMageEnableProtectionInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInMageEnableProtectionInput::OAIInMageEnableProtectionInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInMageEnableProtectionInput::OAIInMageEnableProtectionInput() {
    this->initializeModel();
}

OAIInMageEnableProtectionInput::~OAIInMageEnableProtectionInput() {}

void OAIInMageEnableProtectionInput::initializeModel() {

    m_datastore_name_isSet = false;
    m_datastore_name_isValid = false;

    m_disk_exclusion_input_isSet = false;
    m_disk_exclusion_input_isValid = false;

    m_disks_to_include_isSet = false;
    m_disks_to_include_isValid = false;

    m_master_target_id_isSet = false;
    m_master_target_id_isValid = false;

    m_multi_vm_group_id_isSet = false;
    m_multi_vm_group_id_isValid = false;

    m_multi_vm_group_name_isSet = false;
    m_multi_vm_group_name_isValid = false;

    m_process_server_id_isSet = false;
    m_process_server_id_isValid = false;

    m_retention_drive_isSet = false;
    m_retention_drive_isValid = false;

    m_run_as_account_id_isSet = false;
    m_run_as_account_id_isValid = false;

    m_vm_friendly_name_isSet = false;
    m_vm_friendly_name_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIInMageEnableProtectionInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInMageEnableProtectionInput::fromJsonObject(QJsonObject json) {

    m_datastore_name_isValid = ::OpenAPI::fromJsonValue(m_datastore_name, json[QString("datastoreName")]);
    m_datastore_name_isSet = !json[QString("datastoreName")].isNull() && m_datastore_name_isValid;

    m_disk_exclusion_input_isValid = ::OpenAPI::fromJsonValue(m_disk_exclusion_input, json[QString("diskExclusionInput")]);
    m_disk_exclusion_input_isSet = !json[QString("diskExclusionInput")].isNull() && m_disk_exclusion_input_isValid;

    m_disks_to_include_isValid = ::OpenAPI::fromJsonValue(m_disks_to_include, json[QString("disksToInclude")]);
    m_disks_to_include_isSet = !json[QString("disksToInclude")].isNull() && m_disks_to_include_isValid;

    m_master_target_id_isValid = ::OpenAPI::fromJsonValue(m_master_target_id, json[QString("masterTargetId")]);
    m_master_target_id_isSet = !json[QString("masterTargetId")].isNull() && m_master_target_id_isValid;

    m_multi_vm_group_id_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_group_id, json[QString("multiVmGroupId")]);
    m_multi_vm_group_id_isSet = !json[QString("multiVmGroupId")].isNull() && m_multi_vm_group_id_isValid;

    m_multi_vm_group_name_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_group_name, json[QString("multiVmGroupName")]);
    m_multi_vm_group_name_isSet = !json[QString("multiVmGroupName")].isNull() && m_multi_vm_group_name_isValid;

    m_process_server_id_isValid = ::OpenAPI::fromJsonValue(m_process_server_id, json[QString("processServerId")]);
    m_process_server_id_isSet = !json[QString("processServerId")].isNull() && m_process_server_id_isValid;

    m_retention_drive_isValid = ::OpenAPI::fromJsonValue(m_retention_drive, json[QString("retentionDrive")]);
    m_retention_drive_isSet = !json[QString("retentionDrive")].isNull() && m_retention_drive_isValid;

    m_run_as_account_id_isValid = ::OpenAPI::fromJsonValue(m_run_as_account_id, json[QString("runAsAccountId")]);
    m_run_as_account_id_isSet = !json[QString("runAsAccountId")].isNull() && m_run_as_account_id_isValid;

    m_vm_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_vm_friendly_name, json[QString("vmFriendlyName")]);
    m_vm_friendly_name_isSet = !json[QString("vmFriendlyName")].isNull() && m_vm_friendly_name_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIInMageEnableProtectionInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInMageEnableProtectionInput::asJsonObject() const {
    QJsonObject obj;
    if (m_datastore_name_isSet) {
        obj.insert(QString("datastoreName"), ::OpenAPI::toJsonValue(m_datastore_name));
    }
    if (m_disk_exclusion_input.isSet()) {
        obj.insert(QString("diskExclusionInput"), ::OpenAPI::toJsonValue(m_disk_exclusion_input));
    }
    if (m_disks_to_include.size() > 0) {
        obj.insert(QString("disksToInclude"), ::OpenAPI::toJsonValue(m_disks_to_include));
    }
    if (m_master_target_id_isSet) {
        obj.insert(QString("masterTargetId"), ::OpenAPI::toJsonValue(m_master_target_id));
    }
    if (m_multi_vm_group_id_isSet) {
        obj.insert(QString("multiVmGroupId"), ::OpenAPI::toJsonValue(m_multi_vm_group_id));
    }
    if (m_multi_vm_group_name_isSet) {
        obj.insert(QString("multiVmGroupName"), ::OpenAPI::toJsonValue(m_multi_vm_group_name));
    }
    if (m_process_server_id_isSet) {
        obj.insert(QString("processServerId"), ::OpenAPI::toJsonValue(m_process_server_id));
    }
    if (m_retention_drive_isSet) {
        obj.insert(QString("retentionDrive"), ::OpenAPI::toJsonValue(m_retention_drive));
    }
    if (m_run_as_account_id_isSet) {
        obj.insert(QString("runAsAccountId"), ::OpenAPI::toJsonValue(m_run_as_account_id));
    }
    if (m_vm_friendly_name_isSet) {
        obj.insert(QString("vmFriendlyName"), ::OpenAPI::toJsonValue(m_vm_friendly_name));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIInMageEnableProtectionInput::getDatastoreName() const {
    return m_datastore_name;
}
void OAIInMageEnableProtectionInput::setDatastoreName(const QString &datastore_name) {
    m_datastore_name = datastore_name;
    m_datastore_name_isSet = true;
}

bool OAIInMageEnableProtectionInput::is_datastore_name_Set() const{
    return m_datastore_name_isSet;
}

bool OAIInMageEnableProtectionInput::is_datastore_name_Valid() const{
    return m_datastore_name_isValid;
}

OAIInMageDiskExclusionInput OAIInMageEnableProtectionInput::getDiskExclusionInput() const {
    return m_disk_exclusion_input;
}
void OAIInMageEnableProtectionInput::setDiskExclusionInput(const OAIInMageDiskExclusionInput &disk_exclusion_input) {
    m_disk_exclusion_input = disk_exclusion_input;
    m_disk_exclusion_input_isSet = true;
}

bool OAIInMageEnableProtectionInput::is_disk_exclusion_input_Set() const{
    return m_disk_exclusion_input_isSet;
}

bool OAIInMageEnableProtectionInput::is_disk_exclusion_input_Valid() const{
    return m_disk_exclusion_input_isValid;
}

QList<QString> OAIInMageEnableProtectionInput::getDisksToInclude() const {
    return m_disks_to_include;
}
void OAIInMageEnableProtectionInput::setDisksToInclude(const QList<QString> &disks_to_include) {
    m_disks_to_include = disks_to_include;
    m_disks_to_include_isSet = true;
}

bool OAIInMageEnableProtectionInput::is_disks_to_include_Set() const{
    return m_disks_to_include_isSet;
}

bool OAIInMageEnableProtectionInput::is_disks_to_include_Valid() const{
    return m_disks_to_include_isValid;
}

QString OAIInMageEnableProtectionInput::getMasterTargetId() const {
    return m_master_target_id;
}
void OAIInMageEnableProtectionInput::setMasterTargetId(const QString &master_target_id) {
    m_master_target_id = master_target_id;
    m_master_target_id_isSet = true;
}

bool OAIInMageEnableProtectionInput::is_master_target_id_Set() const{
    return m_master_target_id_isSet;
}

bool OAIInMageEnableProtectionInput::is_master_target_id_Valid() const{
    return m_master_target_id_isValid;
}

QString OAIInMageEnableProtectionInput::getMultiVmGroupId() const {
    return m_multi_vm_group_id;
}
void OAIInMageEnableProtectionInput::setMultiVmGroupId(const QString &multi_vm_group_id) {
    m_multi_vm_group_id = multi_vm_group_id;
    m_multi_vm_group_id_isSet = true;
}

bool OAIInMageEnableProtectionInput::is_multi_vm_group_id_Set() const{
    return m_multi_vm_group_id_isSet;
}

bool OAIInMageEnableProtectionInput::is_multi_vm_group_id_Valid() const{
    return m_multi_vm_group_id_isValid;
}

QString OAIInMageEnableProtectionInput::getMultiVmGroupName() const {
    return m_multi_vm_group_name;
}
void OAIInMageEnableProtectionInput::setMultiVmGroupName(const QString &multi_vm_group_name) {
    m_multi_vm_group_name = multi_vm_group_name;
    m_multi_vm_group_name_isSet = true;
}

bool OAIInMageEnableProtectionInput::is_multi_vm_group_name_Set() const{
    return m_multi_vm_group_name_isSet;
}

bool OAIInMageEnableProtectionInput::is_multi_vm_group_name_Valid() const{
    return m_multi_vm_group_name_isValid;
}

QString OAIInMageEnableProtectionInput::getProcessServerId() const {
    return m_process_server_id;
}
void OAIInMageEnableProtectionInput::setProcessServerId(const QString &process_server_id) {
    m_process_server_id = process_server_id;
    m_process_server_id_isSet = true;
}

bool OAIInMageEnableProtectionInput::is_process_server_id_Set() const{
    return m_process_server_id_isSet;
}

bool OAIInMageEnableProtectionInput::is_process_server_id_Valid() const{
    return m_process_server_id_isValid;
}

QString OAIInMageEnableProtectionInput::getRetentionDrive() const {
    return m_retention_drive;
}
void OAIInMageEnableProtectionInput::setRetentionDrive(const QString &retention_drive) {
    m_retention_drive = retention_drive;
    m_retention_drive_isSet = true;
}

bool OAIInMageEnableProtectionInput::is_retention_drive_Set() const{
    return m_retention_drive_isSet;
}

bool OAIInMageEnableProtectionInput::is_retention_drive_Valid() const{
    return m_retention_drive_isValid;
}

QString OAIInMageEnableProtectionInput::getRunAsAccountId() const {
    return m_run_as_account_id;
}
void OAIInMageEnableProtectionInput::setRunAsAccountId(const QString &run_as_account_id) {
    m_run_as_account_id = run_as_account_id;
    m_run_as_account_id_isSet = true;
}

bool OAIInMageEnableProtectionInput::is_run_as_account_id_Set() const{
    return m_run_as_account_id_isSet;
}

bool OAIInMageEnableProtectionInput::is_run_as_account_id_Valid() const{
    return m_run_as_account_id_isValid;
}

QString OAIInMageEnableProtectionInput::getVmFriendlyName() const {
    return m_vm_friendly_name;
}
void OAIInMageEnableProtectionInput::setVmFriendlyName(const QString &vm_friendly_name) {
    m_vm_friendly_name = vm_friendly_name;
    m_vm_friendly_name_isSet = true;
}

bool OAIInMageEnableProtectionInput::is_vm_friendly_name_Set() const{
    return m_vm_friendly_name_isSet;
}

bool OAIInMageEnableProtectionInput::is_vm_friendly_name_Valid() const{
    return m_vm_friendly_name_isValid;
}

QString OAIInMageEnableProtectionInput::getInstanceType() const {
    return m_instance_type;
}
void OAIInMageEnableProtectionInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInMageEnableProtectionInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInMageEnableProtectionInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIInMageEnableProtectionInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datastore_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_exclusion_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks_to_include.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_as_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInMageEnableProtectionInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_master_target_id_isValid && m_multi_vm_group_id_isValid && m_multi_vm_group_name_isValid && m_process_server_id_isValid && m_retention_drive_isValid && true;
}

} // namespace OpenAPI
