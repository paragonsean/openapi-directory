/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHyperVReplicaBlueReplicationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHyperVReplicaBlueReplicationDetails::OAIHyperVReplicaBlueReplicationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHyperVReplicaBlueReplicationDetails::OAIHyperVReplicaBlueReplicationDetails() {
    this->initializeModel();
}

OAIHyperVReplicaBlueReplicationDetails::~OAIHyperVReplicaBlueReplicationDetails() {}

void OAIHyperVReplicaBlueReplicationDetails::initializeModel() {

    m_initial_replication_details_isSet = false;
    m_initial_replication_details_isValid = false;

    m_last_replicated_time_isSet = false;
    m_last_replicated_time_isValid = false;

    m_v_m_disk_details_isSet = false;
    m_v_m_disk_details_isValid = false;

    m_vm_id_isSet = false;
    m_vm_id_isValid = false;

    m_vm_nics_isSet = false;
    m_vm_nics_isValid = false;

    m_vm_protection_state_isSet = false;
    m_vm_protection_state_isValid = false;

    m_vm_protection_state_description_isSet = false;
    m_vm_protection_state_description_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIHyperVReplicaBlueReplicationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHyperVReplicaBlueReplicationDetails::fromJsonObject(QJsonObject json) {

    m_initial_replication_details_isValid = ::OpenAPI::fromJsonValue(m_initial_replication_details, json[QString("initialReplicationDetails")]);
    m_initial_replication_details_isSet = !json[QString("initialReplicationDetails")].isNull() && m_initial_replication_details_isValid;

    m_last_replicated_time_isValid = ::OpenAPI::fromJsonValue(m_last_replicated_time, json[QString("lastReplicatedTime")]);
    m_last_replicated_time_isSet = !json[QString("lastReplicatedTime")].isNull() && m_last_replicated_time_isValid;

    m_v_m_disk_details_isValid = ::OpenAPI::fromJsonValue(m_v_m_disk_details, json[QString("vMDiskDetails")]);
    m_v_m_disk_details_isSet = !json[QString("vMDiskDetails")].isNull() && m_v_m_disk_details_isValid;

    m_vm_id_isValid = ::OpenAPI::fromJsonValue(m_vm_id, json[QString("vmId")]);
    m_vm_id_isSet = !json[QString("vmId")].isNull() && m_vm_id_isValid;

    m_vm_nics_isValid = ::OpenAPI::fromJsonValue(m_vm_nics, json[QString("vmNics")]);
    m_vm_nics_isSet = !json[QString("vmNics")].isNull() && m_vm_nics_isValid;

    m_vm_protection_state_isValid = ::OpenAPI::fromJsonValue(m_vm_protection_state, json[QString("vmProtectionState")]);
    m_vm_protection_state_isSet = !json[QString("vmProtectionState")].isNull() && m_vm_protection_state_isValid;

    m_vm_protection_state_description_isValid = ::OpenAPI::fromJsonValue(m_vm_protection_state_description, json[QString("vmProtectionStateDescription")]);
    m_vm_protection_state_description_isSet = !json[QString("vmProtectionStateDescription")].isNull() && m_vm_protection_state_description_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIHyperVReplicaBlueReplicationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHyperVReplicaBlueReplicationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_initial_replication_details.isSet()) {
        obj.insert(QString("initialReplicationDetails"), ::OpenAPI::toJsonValue(m_initial_replication_details));
    }
    if (m_last_replicated_time_isSet) {
        obj.insert(QString("lastReplicatedTime"), ::OpenAPI::toJsonValue(m_last_replicated_time));
    }
    if (m_v_m_disk_details.size() > 0) {
        obj.insert(QString("vMDiskDetails"), ::OpenAPI::toJsonValue(m_v_m_disk_details));
    }
    if (m_vm_id_isSet) {
        obj.insert(QString("vmId"), ::OpenAPI::toJsonValue(m_vm_id));
    }
    if (m_vm_nics.size() > 0) {
        obj.insert(QString("vmNics"), ::OpenAPI::toJsonValue(m_vm_nics));
    }
    if (m_vm_protection_state_isSet) {
        obj.insert(QString("vmProtectionState"), ::OpenAPI::toJsonValue(m_vm_protection_state));
    }
    if (m_vm_protection_state_description_isSet) {
        obj.insert(QString("vmProtectionStateDescription"), ::OpenAPI::toJsonValue(m_vm_protection_state_description));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

OAIInitialReplicationDetails OAIHyperVReplicaBlueReplicationDetails::getInitialReplicationDetails() const {
    return m_initial_replication_details;
}
void OAIHyperVReplicaBlueReplicationDetails::setInitialReplicationDetails(const OAIInitialReplicationDetails &initial_replication_details) {
    m_initial_replication_details = initial_replication_details;
    m_initial_replication_details_isSet = true;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_initial_replication_details_Set() const{
    return m_initial_replication_details_isSet;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_initial_replication_details_Valid() const{
    return m_initial_replication_details_isValid;
}

QDateTime OAIHyperVReplicaBlueReplicationDetails::getLastReplicatedTime() const {
    return m_last_replicated_time;
}
void OAIHyperVReplicaBlueReplicationDetails::setLastReplicatedTime(const QDateTime &last_replicated_time) {
    m_last_replicated_time = last_replicated_time;
    m_last_replicated_time_isSet = true;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_last_replicated_time_Set() const{
    return m_last_replicated_time_isSet;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_last_replicated_time_Valid() const{
    return m_last_replicated_time_isValid;
}

QList<OAIDiskDetails> OAIHyperVReplicaBlueReplicationDetails::getVMDiskDetails() const {
    return m_v_m_disk_details;
}
void OAIHyperVReplicaBlueReplicationDetails::setVMDiskDetails(const QList<OAIDiskDetails> &v_m_disk_details) {
    m_v_m_disk_details = v_m_disk_details;
    m_v_m_disk_details_isSet = true;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_v_m_disk_details_Set() const{
    return m_v_m_disk_details_isSet;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_v_m_disk_details_Valid() const{
    return m_v_m_disk_details_isValid;
}

QString OAIHyperVReplicaBlueReplicationDetails::getVmId() const {
    return m_vm_id;
}
void OAIHyperVReplicaBlueReplicationDetails::setVmId(const QString &vm_id) {
    m_vm_id = vm_id;
    m_vm_id_isSet = true;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_vm_id_Set() const{
    return m_vm_id_isSet;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_vm_id_Valid() const{
    return m_vm_id_isValid;
}

QList<OAIVMNicDetails> OAIHyperVReplicaBlueReplicationDetails::getVmNics() const {
    return m_vm_nics;
}
void OAIHyperVReplicaBlueReplicationDetails::setVmNics(const QList<OAIVMNicDetails> &vm_nics) {
    m_vm_nics = vm_nics;
    m_vm_nics_isSet = true;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_vm_nics_Set() const{
    return m_vm_nics_isSet;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_vm_nics_Valid() const{
    return m_vm_nics_isValid;
}

QString OAIHyperVReplicaBlueReplicationDetails::getVmProtectionState() const {
    return m_vm_protection_state;
}
void OAIHyperVReplicaBlueReplicationDetails::setVmProtectionState(const QString &vm_protection_state) {
    m_vm_protection_state = vm_protection_state;
    m_vm_protection_state_isSet = true;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_vm_protection_state_Set() const{
    return m_vm_protection_state_isSet;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_vm_protection_state_Valid() const{
    return m_vm_protection_state_isValid;
}

QString OAIHyperVReplicaBlueReplicationDetails::getVmProtectionStateDescription() const {
    return m_vm_protection_state_description;
}
void OAIHyperVReplicaBlueReplicationDetails::setVmProtectionStateDescription(const QString &vm_protection_state_description) {
    m_vm_protection_state_description = vm_protection_state_description;
    m_vm_protection_state_description_isSet = true;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_vm_protection_state_description_Set() const{
    return m_vm_protection_state_description_isSet;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_vm_protection_state_description_Valid() const{
    return m_vm_protection_state_description_isValid;
}

QString OAIHyperVReplicaBlueReplicationDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIHyperVReplicaBlueReplicationDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIHyperVReplicaBlueReplicationDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIHyperVReplicaBlueReplicationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_initial_replication_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_replicated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_m_disk_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_nics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_protection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_protection_state_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHyperVReplicaBlueReplicationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
