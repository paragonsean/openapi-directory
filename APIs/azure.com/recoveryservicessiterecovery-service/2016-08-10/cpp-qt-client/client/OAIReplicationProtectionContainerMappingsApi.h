/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReplicationProtectionContainerMappingsApi_H
#define OAI_OAIReplicationProtectionContainerMappingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateProtectionContainerMappingInput.h"
#include "OAIProtectionContainerMapping.h"
#include "OAIProtectionContainerMappingCollection.h"
#include "OAIRemoveProtectionContainerMappingInput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReplicationProtectionContainerMappingsApi : public QObject {
    Q_OBJECT

public:
    OAIReplicationProtectionContainerMappingsApi(const int timeOut = 0);
    ~OAIReplicationProtectionContainerMappingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  mapping_name QString [required]
    * @param[in]  creation_input OAICreateProtectionContainerMappingInput [required]
    */
    virtual void replicationProtectionContainerMappingsCreate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &mapping_name, const OAICreateProtectionContainerMappingInput &creation_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  mapping_name QString [required]
    * @param[in]  removal_input OAIRemoveProtectionContainerMappingInput [required]
    */
    virtual void replicationProtectionContainerMappingsDelete(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &mapping_name, const OAIRemoveProtectionContainerMappingInput &removal_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  mapping_name QString [required]
    */
    virtual void replicationProtectionContainerMappingsGet(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &mapping_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void replicationProtectionContainerMappingsList(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    */
    virtual void replicationProtectionContainerMappingsListByReplicationProtectionContainers(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  mapping_name QString [required]
    */
    virtual void replicationProtectionContainerMappingsPurge(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &mapping_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void replicationProtectionContainerMappingsCreateCallback(OAIHttpRequestWorker *worker);
    void replicationProtectionContainerMappingsDeleteCallback(OAIHttpRequestWorker *worker);
    void replicationProtectionContainerMappingsGetCallback(OAIHttpRequestWorker *worker);
    void replicationProtectionContainerMappingsListCallback(OAIHttpRequestWorker *worker);
    void replicationProtectionContainerMappingsListByReplicationProtectionContainersCallback(OAIHttpRequestWorker *worker);
    void replicationProtectionContainerMappingsPurgeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void replicationProtectionContainerMappingsCreateSignal(OAIProtectionContainerMapping summary);
    void replicationProtectionContainerMappingsDeleteSignal();
    void replicationProtectionContainerMappingsGetSignal(OAIProtectionContainerMapping summary);
    void replicationProtectionContainerMappingsListSignal(OAIProtectionContainerMappingCollection summary);
    void replicationProtectionContainerMappingsListByReplicationProtectionContainersSignal(OAIProtectionContainerMappingCollection summary);
    void replicationProtectionContainerMappingsPurgeSignal();


    void replicationProtectionContainerMappingsCreateSignalFull(OAIHttpRequestWorker *worker, OAIProtectionContainerMapping summary);
    void replicationProtectionContainerMappingsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void replicationProtectionContainerMappingsGetSignalFull(OAIHttpRequestWorker *worker, OAIProtectionContainerMapping summary);
    void replicationProtectionContainerMappingsListSignalFull(OAIHttpRequestWorker *worker, OAIProtectionContainerMappingCollection summary);
    void replicationProtectionContainerMappingsListByReplicationProtectionContainersSignalFull(OAIHttpRequestWorker *worker, OAIProtectionContainerMappingCollection summary);
    void replicationProtectionContainerMappingsPurgeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use replicationProtectionContainerMappingsCreateSignalError() instead")
    void replicationProtectionContainerMappingsCreateSignalE(OAIProtectionContainerMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainerMappingsCreateSignalError(OAIProtectionContainerMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainerMappingsDeleteSignalError() instead")
    void replicationProtectionContainerMappingsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainerMappingsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainerMappingsGetSignalError() instead")
    void replicationProtectionContainerMappingsGetSignalE(OAIProtectionContainerMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainerMappingsGetSignalError(OAIProtectionContainerMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainerMappingsListSignalError() instead")
    void replicationProtectionContainerMappingsListSignalE(OAIProtectionContainerMappingCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainerMappingsListSignalError(OAIProtectionContainerMappingCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainerMappingsListByReplicationProtectionContainersSignalError() instead")
    void replicationProtectionContainerMappingsListByReplicationProtectionContainersSignalE(OAIProtectionContainerMappingCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainerMappingsListByReplicationProtectionContainersSignalError(OAIProtectionContainerMappingCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainerMappingsPurgeSignalError() instead")
    void replicationProtectionContainerMappingsPurgeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainerMappingsPurgeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use replicationProtectionContainerMappingsCreateSignalErrorFull() instead")
    void replicationProtectionContainerMappingsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainerMappingsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainerMappingsDeleteSignalErrorFull() instead")
    void replicationProtectionContainerMappingsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainerMappingsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainerMappingsGetSignalErrorFull() instead")
    void replicationProtectionContainerMappingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainerMappingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainerMappingsListSignalErrorFull() instead")
    void replicationProtectionContainerMappingsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainerMappingsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainerMappingsListByReplicationProtectionContainersSignalErrorFull() instead")
    void replicationProtectionContainerMappingsListByReplicationProtectionContainersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainerMappingsListByReplicationProtectionContainersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainerMappingsPurgeSignalErrorFull() instead")
    void replicationProtectionContainerMappingsPurgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainerMappingsPurgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
