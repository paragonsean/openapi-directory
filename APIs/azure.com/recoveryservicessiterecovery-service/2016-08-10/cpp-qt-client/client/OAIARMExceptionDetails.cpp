/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIARMExceptionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIARMExceptionDetails::OAIARMExceptionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIARMExceptionDetails::OAIARMExceptionDetails() {
    this->initializeModel();
}

OAIARMExceptionDetails::~OAIARMExceptionDetails() {}

void OAIARMExceptionDetails::initializeModel() {

    m_activity_id_isSet = false;
    m_activity_id_isValid = false;

    m_client_request_id_isSet = false;
    m_client_request_id_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_possible_causes_isSet = false;
    m_possible_causes_isValid = false;

    m_recommended_action_isSet = false;
    m_recommended_action_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIARMExceptionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIARMExceptionDetails::fromJsonObject(QJsonObject json) {

    m_activity_id_isValid = ::OpenAPI::fromJsonValue(m_activity_id, json[QString("activityId")]);
    m_activity_id_isSet = !json[QString("activityId")].isNull() && m_activity_id_isValid;

    m_client_request_id_isValid = ::OpenAPI::fromJsonValue(m_client_request_id, json[QString("clientRequestId")]);
    m_client_request_id_isSet = !json[QString("clientRequestId")].isNull() && m_client_request_id_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_possible_causes_isValid = ::OpenAPI::fromJsonValue(m_possible_causes, json[QString("possibleCauses")]);
    m_possible_causes_isSet = !json[QString("possibleCauses")].isNull() && m_possible_causes_isValid;

    m_recommended_action_isValid = ::OpenAPI::fromJsonValue(m_recommended_action, json[QString("recommendedAction")]);
    m_recommended_action_isSet = !json[QString("recommendedAction")].isNull() && m_recommended_action_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIARMExceptionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIARMExceptionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_id_isSet) {
        obj.insert(QString("activityId"), ::OpenAPI::toJsonValue(m_activity_id));
    }
    if (m_client_request_id_isSet) {
        obj.insert(QString("clientRequestId"), ::OpenAPI::toJsonValue(m_client_request_id));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_possible_causes_isSet) {
        obj.insert(QString("possibleCauses"), ::OpenAPI::toJsonValue(m_possible_causes));
    }
    if (m_recommended_action_isSet) {
        obj.insert(QString("recommendedAction"), ::OpenAPI::toJsonValue(m_recommended_action));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAIARMExceptionDetails::getActivityId() const {
    return m_activity_id;
}
void OAIARMExceptionDetails::setActivityId(const QString &activity_id) {
    m_activity_id = activity_id;
    m_activity_id_isSet = true;
}

bool OAIARMExceptionDetails::is_activity_id_Set() const{
    return m_activity_id_isSet;
}

bool OAIARMExceptionDetails::is_activity_id_Valid() const{
    return m_activity_id_isValid;
}

QString OAIARMExceptionDetails::getClientRequestId() const {
    return m_client_request_id;
}
void OAIARMExceptionDetails::setClientRequestId(const QString &client_request_id) {
    m_client_request_id = client_request_id;
    m_client_request_id_isSet = true;
}

bool OAIARMExceptionDetails::is_client_request_id_Set() const{
    return m_client_request_id_isSet;
}

bool OAIARMExceptionDetails::is_client_request_id_Valid() const{
    return m_client_request_id_isValid;
}

QString OAIARMExceptionDetails::getCode() const {
    return m_code;
}
void OAIARMExceptionDetails::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIARMExceptionDetails::is_code_Set() const{
    return m_code_isSet;
}

bool OAIARMExceptionDetails::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIARMExceptionDetails::getMessage() const {
    return m_message;
}
void OAIARMExceptionDetails::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIARMExceptionDetails::is_message_Set() const{
    return m_message_isSet;
}

bool OAIARMExceptionDetails::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIARMExceptionDetails::getPossibleCauses() const {
    return m_possible_causes;
}
void OAIARMExceptionDetails::setPossibleCauses(const QString &possible_causes) {
    m_possible_causes = possible_causes;
    m_possible_causes_isSet = true;
}

bool OAIARMExceptionDetails::is_possible_causes_Set() const{
    return m_possible_causes_isSet;
}

bool OAIARMExceptionDetails::is_possible_causes_Valid() const{
    return m_possible_causes_isValid;
}

QString OAIARMExceptionDetails::getRecommendedAction() const {
    return m_recommended_action;
}
void OAIARMExceptionDetails::setRecommendedAction(const QString &recommended_action) {
    m_recommended_action = recommended_action;
    m_recommended_action_isSet = true;
}

bool OAIARMExceptionDetails::is_recommended_action_Set() const{
    return m_recommended_action_isSet;
}

bool OAIARMExceptionDetails::is_recommended_action_Valid() const{
    return m_recommended_action_isValid;
}

QString OAIARMExceptionDetails::getTarget() const {
    return m_target;
}
void OAIARMExceptionDetails::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIARMExceptionDetails::is_target_Set() const{
    return m_target_isSet;
}

bool OAIARMExceptionDetails::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIARMExceptionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possible_causes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIARMExceptionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
