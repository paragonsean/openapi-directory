/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInMageAzureV2EnableProtectionInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInMageAzureV2EnableProtectionInput::OAIInMageAzureV2EnableProtectionInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInMageAzureV2EnableProtectionInput::OAIInMageAzureV2EnableProtectionInput() {
    this->initializeModel();
}

OAIInMageAzureV2EnableProtectionInput::~OAIInMageAzureV2EnableProtectionInput() {}

void OAIInMageAzureV2EnableProtectionInput::initializeModel() {

    m_disks_to_include_isSet = false;
    m_disks_to_include_isValid = false;

    m_enable_rdpon_target_option_isSet = false;
    m_enable_rdpon_target_option_isValid = false;

    m_log_storage_account_id_isSet = false;
    m_log_storage_account_id_isValid = false;

    m_master_target_id_isSet = false;
    m_master_target_id_isValid = false;

    m_multi_vm_group_id_isSet = false;
    m_multi_vm_group_id_isValid = false;

    m_multi_vm_group_name_isSet = false;
    m_multi_vm_group_name_isValid = false;

    m_process_server_id_isSet = false;
    m_process_server_id_isValid = false;

    m_run_as_account_id_isSet = false;
    m_run_as_account_id_isValid = false;

    m_storage_account_id_isSet = false;
    m_storage_account_id_isValid = false;

    m_target_azure_network_id_isSet = false;
    m_target_azure_network_id_isValid = false;

    m_target_azure_subnet_id_isSet = false;
    m_target_azure_subnet_id_isValid = false;

    m_target_azure_v1_resource_group_id_isSet = false;
    m_target_azure_v1_resource_group_id_isValid = false;

    m_target_azure_v2_resource_group_id_isSet = false;
    m_target_azure_v2_resource_group_id_isValid = false;

    m_target_azure_vm_name_isSet = false;
    m_target_azure_vm_name_isValid = false;

    m_use_managed_disks_isSet = false;
    m_use_managed_disks_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIInMageAzureV2EnableProtectionInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInMageAzureV2EnableProtectionInput::fromJsonObject(QJsonObject json) {

    m_disks_to_include_isValid = ::OpenAPI::fromJsonValue(m_disks_to_include, json[QString("disksToInclude")]);
    m_disks_to_include_isSet = !json[QString("disksToInclude")].isNull() && m_disks_to_include_isValid;

    m_enable_rdpon_target_option_isValid = ::OpenAPI::fromJsonValue(m_enable_rdpon_target_option, json[QString("enableRDPOnTargetOption")]);
    m_enable_rdpon_target_option_isSet = !json[QString("enableRDPOnTargetOption")].isNull() && m_enable_rdpon_target_option_isValid;

    m_log_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_log_storage_account_id, json[QString("logStorageAccountId")]);
    m_log_storage_account_id_isSet = !json[QString("logStorageAccountId")].isNull() && m_log_storage_account_id_isValid;

    m_master_target_id_isValid = ::OpenAPI::fromJsonValue(m_master_target_id, json[QString("masterTargetId")]);
    m_master_target_id_isSet = !json[QString("masterTargetId")].isNull() && m_master_target_id_isValid;

    m_multi_vm_group_id_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_group_id, json[QString("multiVmGroupId")]);
    m_multi_vm_group_id_isSet = !json[QString("multiVmGroupId")].isNull() && m_multi_vm_group_id_isValid;

    m_multi_vm_group_name_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_group_name, json[QString("multiVmGroupName")]);
    m_multi_vm_group_name_isSet = !json[QString("multiVmGroupName")].isNull() && m_multi_vm_group_name_isValid;

    m_process_server_id_isValid = ::OpenAPI::fromJsonValue(m_process_server_id, json[QString("processServerId")]);
    m_process_server_id_isSet = !json[QString("processServerId")].isNull() && m_process_server_id_isValid;

    m_run_as_account_id_isValid = ::OpenAPI::fromJsonValue(m_run_as_account_id, json[QString("runAsAccountId")]);
    m_run_as_account_id_isSet = !json[QString("runAsAccountId")].isNull() && m_run_as_account_id_isValid;

    m_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_id, json[QString("storageAccountId")]);
    m_storage_account_id_isSet = !json[QString("storageAccountId")].isNull() && m_storage_account_id_isValid;

    m_target_azure_network_id_isValid = ::OpenAPI::fromJsonValue(m_target_azure_network_id, json[QString("targetAzureNetworkId")]);
    m_target_azure_network_id_isSet = !json[QString("targetAzureNetworkId")].isNull() && m_target_azure_network_id_isValid;

    m_target_azure_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_target_azure_subnet_id, json[QString("targetAzureSubnetId")]);
    m_target_azure_subnet_id_isSet = !json[QString("targetAzureSubnetId")].isNull() && m_target_azure_subnet_id_isValid;

    m_target_azure_v1_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_target_azure_v1_resource_group_id, json[QString("targetAzureV1ResourceGroupId")]);
    m_target_azure_v1_resource_group_id_isSet = !json[QString("targetAzureV1ResourceGroupId")].isNull() && m_target_azure_v1_resource_group_id_isValid;

    m_target_azure_v2_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_target_azure_v2_resource_group_id, json[QString("targetAzureV2ResourceGroupId")]);
    m_target_azure_v2_resource_group_id_isSet = !json[QString("targetAzureV2ResourceGroupId")].isNull() && m_target_azure_v2_resource_group_id_isValid;

    m_target_azure_vm_name_isValid = ::OpenAPI::fromJsonValue(m_target_azure_vm_name, json[QString("targetAzureVmName")]);
    m_target_azure_vm_name_isSet = !json[QString("targetAzureVmName")].isNull() && m_target_azure_vm_name_isValid;

    m_use_managed_disks_isValid = ::OpenAPI::fromJsonValue(m_use_managed_disks, json[QString("useManagedDisks")]);
    m_use_managed_disks_isSet = !json[QString("useManagedDisks")].isNull() && m_use_managed_disks_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInMageAzureV2EnableProtectionInput::asJsonObject() const {
    QJsonObject obj;
    if (m_disks_to_include.size() > 0) {
        obj.insert(QString("disksToInclude"), ::OpenAPI::toJsonValue(m_disks_to_include));
    }
    if (m_enable_rdpon_target_option_isSet) {
        obj.insert(QString("enableRDPOnTargetOption"), ::OpenAPI::toJsonValue(m_enable_rdpon_target_option));
    }
    if (m_log_storage_account_id_isSet) {
        obj.insert(QString("logStorageAccountId"), ::OpenAPI::toJsonValue(m_log_storage_account_id));
    }
    if (m_master_target_id_isSet) {
        obj.insert(QString("masterTargetId"), ::OpenAPI::toJsonValue(m_master_target_id));
    }
    if (m_multi_vm_group_id_isSet) {
        obj.insert(QString("multiVmGroupId"), ::OpenAPI::toJsonValue(m_multi_vm_group_id));
    }
    if (m_multi_vm_group_name_isSet) {
        obj.insert(QString("multiVmGroupName"), ::OpenAPI::toJsonValue(m_multi_vm_group_name));
    }
    if (m_process_server_id_isSet) {
        obj.insert(QString("processServerId"), ::OpenAPI::toJsonValue(m_process_server_id));
    }
    if (m_run_as_account_id_isSet) {
        obj.insert(QString("runAsAccountId"), ::OpenAPI::toJsonValue(m_run_as_account_id));
    }
    if (m_storage_account_id_isSet) {
        obj.insert(QString("storageAccountId"), ::OpenAPI::toJsonValue(m_storage_account_id));
    }
    if (m_target_azure_network_id_isSet) {
        obj.insert(QString("targetAzureNetworkId"), ::OpenAPI::toJsonValue(m_target_azure_network_id));
    }
    if (m_target_azure_subnet_id_isSet) {
        obj.insert(QString("targetAzureSubnetId"), ::OpenAPI::toJsonValue(m_target_azure_subnet_id));
    }
    if (m_target_azure_v1_resource_group_id_isSet) {
        obj.insert(QString("targetAzureV1ResourceGroupId"), ::OpenAPI::toJsonValue(m_target_azure_v1_resource_group_id));
    }
    if (m_target_azure_v2_resource_group_id_isSet) {
        obj.insert(QString("targetAzureV2ResourceGroupId"), ::OpenAPI::toJsonValue(m_target_azure_v2_resource_group_id));
    }
    if (m_target_azure_vm_name_isSet) {
        obj.insert(QString("targetAzureVmName"), ::OpenAPI::toJsonValue(m_target_azure_vm_name));
    }
    if (m_use_managed_disks_isSet) {
        obj.insert(QString("useManagedDisks"), ::OpenAPI::toJsonValue(m_use_managed_disks));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QList<QString> OAIInMageAzureV2EnableProtectionInput::getDisksToInclude() const {
    return m_disks_to_include;
}
void OAIInMageAzureV2EnableProtectionInput::setDisksToInclude(const QList<QString> &disks_to_include) {
    m_disks_to_include = disks_to_include;
    m_disks_to_include_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_disks_to_include_Set() const{
    return m_disks_to_include_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_disks_to_include_Valid() const{
    return m_disks_to_include_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getEnableRdponTargetOption() const {
    return m_enable_rdpon_target_option;
}
void OAIInMageAzureV2EnableProtectionInput::setEnableRdponTargetOption(const QString &enable_rdpon_target_option) {
    m_enable_rdpon_target_option = enable_rdpon_target_option;
    m_enable_rdpon_target_option_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_enable_rdpon_target_option_Set() const{
    return m_enable_rdpon_target_option_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_enable_rdpon_target_option_Valid() const{
    return m_enable_rdpon_target_option_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getLogStorageAccountId() const {
    return m_log_storage_account_id;
}
void OAIInMageAzureV2EnableProtectionInput::setLogStorageAccountId(const QString &log_storage_account_id) {
    m_log_storage_account_id = log_storage_account_id;
    m_log_storage_account_id_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_log_storage_account_id_Set() const{
    return m_log_storage_account_id_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_log_storage_account_id_Valid() const{
    return m_log_storage_account_id_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getMasterTargetId() const {
    return m_master_target_id;
}
void OAIInMageAzureV2EnableProtectionInput::setMasterTargetId(const QString &master_target_id) {
    m_master_target_id = master_target_id;
    m_master_target_id_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_master_target_id_Set() const{
    return m_master_target_id_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_master_target_id_Valid() const{
    return m_master_target_id_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getMultiVmGroupId() const {
    return m_multi_vm_group_id;
}
void OAIInMageAzureV2EnableProtectionInput::setMultiVmGroupId(const QString &multi_vm_group_id) {
    m_multi_vm_group_id = multi_vm_group_id;
    m_multi_vm_group_id_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_multi_vm_group_id_Set() const{
    return m_multi_vm_group_id_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_multi_vm_group_id_Valid() const{
    return m_multi_vm_group_id_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getMultiVmGroupName() const {
    return m_multi_vm_group_name;
}
void OAIInMageAzureV2EnableProtectionInput::setMultiVmGroupName(const QString &multi_vm_group_name) {
    m_multi_vm_group_name = multi_vm_group_name;
    m_multi_vm_group_name_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_multi_vm_group_name_Set() const{
    return m_multi_vm_group_name_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_multi_vm_group_name_Valid() const{
    return m_multi_vm_group_name_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getProcessServerId() const {
    return m_process_server_id;
}
void OAIInMageAzureV2EnableProtectionInput::setProcessServerId(const QString &process_server_id) {
    m_process_server_id = process_server_id;
    m_process_server_id_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_process_server_id_Set() const{
    return m_process_server_id_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_process_server_id_Valid() const{
    return m_process_server_id_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getRunAsAccountId() const {
    return m_run_as_account_id;
}
void OAIInMageAzureV2EnableProtectionInput::setRunAsAccountId(const QString &run_as_account_id) {
    m_run_as_account_id = run_as_account_id;
    m_run_as_account_id_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_run_as_account_id_Set() const{
    return m_run_as_account_id_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_run_as_account_id_Valid() const{
    return m_run_as_account_id_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getStorageAccountId() const {
    return m_storage_account_id;
}
void OAIInMageAzureV2EnableProtectionInput::setStorageAccountId(const QString &storage_account_id) {
    m_storage_account_id = storage_account_id;
    m_storage_account_id_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_storage_account_id_Set() const{
    return m_storage_account_id_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_storage_account_id_Valid() const{
    return m_storage_account_id_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getTargetAzureNetworkId() const {
    return m_target_azure_network_id;
}
void OAIInMageAzureV2EnableProtectionInput::setTargetAzureNetworkId(const QString &target_azure_network_id) {
    m_target_azure_network_id = target_azure_network_id;
    m_target_azure_network_id_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_target_azure_network_id_Set() const{
    return m_target_azure_network_id_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_target_azure_network_id_Valid() const{
    return m_target_azure_network_id_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getTargetAzureSubnetId() const {
    return m_target_azure_subnet_id;
}
void OAIInMageAzureV2EnableProtectionInput::setTargetAzureSubnetId(const QString &target_azure_subnet_id) {
    m_target_azure_subnet_id = target_azure_subnet_id;
    m_target_azure_subnet_id_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_target_azure_subnet_id_Set() const{
    return m_target_azure_subnet_id_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_target_azure_subnet_id_Valid() const{
    return m_target_azure_subnet_id_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getTargetAzureV1ResourceGroupId() const {
    return m_target_azure_v1_resource_group_id;
}
void OAIInMageAzureV2EnableProtectionInput::setTargetAzureV1ResourceGroupId(const QString &target_azure_v1_resource_group_id) {
    m_target_azure_v1_resource_group_id = target_azure_v1_resource_group_id;
    m_target_azure_v1_resource_group_id_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_target_azure_v1_resource_group_id_Set() const{
    return m_target_azure_v1_resource_group_id_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_target_azure_v1_resource_group_id_Valid() const{
    return m_target_azure_v1_resource_group_id_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getTargetAzureV2ResourceGroupId() const {
    return m_target_azure_v2_resource_group_id;
}
void OAIInMageAzureV2EnableProtectionInput::setTargetAzureV2ResourceGroupId(const QString &target_azure_v2_resource_group_id) {
    m_target_azure_v2_resource_group_id = target_azure_v2_resource_group_id;
    m_target_azure_v2_resource_group_id_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_target_azure_v2_resource_group_id_Set() const{
    return m_target_azure_v2_resource_group_id_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_target_azure_v2_resource_group_id_Valid() const{
    return m_target_azure_v2_resource_group_id_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getTargetAzureVmName() const {
    return m_target_azure_vm_name;
}
void OAIInMageAzureV2EnableProtectionInput::setTargetAzureVmName(const QString &target_azure_vm_name) {
    m_target_azure_vm_name = target_azure_vm_name;
    m_target_azure_vm_name_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_target_azure_vm_name_Set() const{
    return m_target_azure_vm_name_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_target_azure_vm_name_Valid() const{
    return m_target_azure_vm_name_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getUseManagedDisks() const {
    return m_use_managed_disks;
}
void OAIInMageAzureV2EnableProtectionInput::setUseManagedDisks(const QString &use_managed_disks) {
    m_use_managed_disks = use_managed_disks;
    m_use_managed_disks_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_use_managed_disks_Set() const{
    return m_use_managed_disks_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_use_managed_disks_Valid() const{
    return m_use_managed_disks_isValid;
}

QString OAIInMageAzureV2EnableProtectionInput::getInstanceType() const {
    return m_instance_type;
}
void OAIInMageAzureV2EnableProtectionInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInMageAzureV2EnableProtectionInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInMageAzureV2EnableProtectionInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIInMageAzureV2EnableProtectionInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disks_to_include.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_rdpon_target_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_as_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_azure_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_azure_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_azure_v1_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_azure_v2_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_azure_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_managed_disks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInMageAzureV2EnableProtectionInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_storage_account_id_isValid && true;
}

} // namespace OpenAPI
