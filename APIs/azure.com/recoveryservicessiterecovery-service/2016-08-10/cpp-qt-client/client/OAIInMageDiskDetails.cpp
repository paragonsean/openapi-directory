/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInMageDiskDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInMageDiskDetails::OAIInMageDiskDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInMageDiskDetails::OAIInMageDiskDetails() {
    this->initializeModel();
}

OAIInMageDiskDetails::~OAIInMageDiskDetails() {}

void OAIInMageDiskDetails::initializeModel() {

    m_disk_configuration_isSet = false;
    m_disk_configuration_isValid = false;

    m_disk_id_isSet = false;
    m_disk_id_isValid = false;

    m_disk_name_isSet = false;
    m_disk_name_isValid = false;

    m_disk_size_in_mb_isSet = false;
    m_disk_size_in_mb_isValid = false;

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_volume_list_isSet = false;
    m_volume_list_isValid = false;
}

void OAIInMageDiskDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInMageDiskDetails::fromJsonObject(QJsonObject json) {

    m_disk_configuration_isValid = ::OpenAPI::fromJsonValue(m_disk_configuration, json[QString("diskConfiguration")]);
    m_disk_configuration_isSet = !json[QString("diskConfiguration")].isNull() && m_disk_configuration_isValid;

    m_disk_id_isValid = ::OpenAPI::fromJsonValue(m_disk_id, json[QString("diskId")]);
    m_disk_id_isSet = !json[QString("diskId")].isNull() && m_disk_id_isValid;

    m_disk_name_isValid = ::OpenAPI::fromJsonValue(m_disk_name, json[QString("diskName")]);
    m_disk_name_isSet = !json[QString("diskName")].isNull() && m_disk_name_isValid;

    m_disk_size_in_mb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_in_mb, json[QString("diskSizeInMB")]);
    m_disk_size_in_mb_isSet = !json[QString("diskSizeInMB")].isNull() && m_disk_size_in_mb_isValid;

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_volume_list_isValid = ::OpenAPI::fromJsonValue(m_volume_list, json[QString("volumeList")]);
    m_volume_list_isSet = !json[QString("volumeList")].isNull() && m_volume_list_isValid;
}

QString OAIInMageDiskDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInMageDiskDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_configuration_isSet) {
        obj.insert(QString("diskConfiguration"), ::OpenAPI::toJsonValue(m_disk_configuration));
    }
    if (m_disk_id_isSet) {
        obj.insert(QString("diskId"), ::OpenAPI::toJsonValue(m_disk_id));
    }
    if (m_disk_name_isSet) {
        obj.insert(QString("diskName"), ::OpenAPI::toJsonValue(m_disk_name));
    }
    if (m_disk_size_in_mb_isSet) {
        obj.insert(QString("diskSizeInMB"), ::OpenAPI::toJsonValue(m_disk_size_in_mb));
    }
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_volume_list.size() > 0) {
        obj.insert(QString("volumeList"), ::OpenAPI::toJsonValue(m_volume_list));
    }
    return obj;
}

QString OAIInMageDiskDetails::getDiskConfiguration() const {
    return m_disk_configuration;
}
void OAIInMageDiskDetails::setDiskConfiguration(const QString &disk_configuration) {
    m_disk_configuration = disk_configuration;
    m_disk_configuration_isSet = true;
}

bool OAIInMageDiskDetails::is_disk_configuration_Set() const{
    return m_disk_configuration_isSet;
}

bool OAIInMageDiskDetails::is_disk_configuration_Valid() const{
    return m_disk_configuration_isValid;
}

QString OAIInMageDiskDetails::getDiskId() const {
    return m_disk_id;
}
void OAIInMageDiskDetails::setDiskId(const QString &disk_id) {
    m_disk_id = disk_id;
    m_disk_id_isSet = true;
}

bool OAIInMageDiskDetails::is_disk_id_Set() const{
    return m_disk_id_isSet;
}

bool OAIInMageDiskDetails::is_disk_id_Valid() const{
    return m_disk_id_isValid;
}

QString OAIInMageDiskDetails::getDiskName() const {
    return m_disk_name;
}
void OAIInMageDiskDetails::setDiskName(const QString &disk_name) {
    m_disk_name = disk_name;
    m_disk_name_isSet = true;
}

bool OAIInMageDiskDetails::is_disk_name_Set() const{
    return m_disk_name_isSet;
}

bool OAIInMageDiskDetails::is_disk_name_Valid() const{
    return m_disk_name_isValid;
}

QString OAIInMageDiskDetails::getDiskSizeInMb() const {
    return m_disk_size_in_mb;
}
void OAIInMageDiskDetails::setDiskSizeInMb(const QString &disk_size_in_mb) {
    m_disk_size_in_mb = disk_size_in_mb;
    m_disk_size_in_mb_isSet = true;
}

bool OAIInMageDiskDetails::is_disk_size_in_mb_Set() const{
    return m_disk_size_in_mb_isSet;
}

bool OAIInMageDiskDetails::is_disk_size_in_mb_Valid() const{
    return m_disk_size_in_mb_isValid;
}

QString OAIInMageDiskDetails::getDiskType() const {
    return m_disk_type;
}
void OAIInMageDiskDetails::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIInMageDiskDetails::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIInMageDiskDetails::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

QList<OAIDiskVolumeDetails> OAIInMageDiskDetails::getVolumeList() const {
    return m_volume_list;
}
void OAIInMageDiskDetails::setVolumeList(const QList<OAIDiskVolumeDetails> &volume_list) {
    m_volume_list = volume_list;
    m_volume_list_isSet = true;
}

bool OAIInMageDiskDetails::is_volume_list_Set() const{
    return m_volume_list_isSet;
}

bool OAIInMageDiskDetails::is_volume_list_Valid() const{
    return m_volume_list_isValid;
}

bool OAIInMageDiskDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInMageDiskDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
