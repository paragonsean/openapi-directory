/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIA2AProtectedManagedDiskDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIA2AProtectedManagedDiskDetails::OAIA2AProtectedManagedDiskDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIA2AProtectedManagedDiskDetails::OAIA2AProtectedManagedDiskDetails() {
    this->initializeModel();
}

OAIA2AProtectedManagedDiskDetails::~OAIA2AProtectedManagedDiskDetails() {}

void OAIA2AProtectedManagedDiskDetails::initializeModel() {

    m_data_pending_at_source_agent_in_mb_isSet = false;
    m_data_pending_at_source_agent_in_mb_isValid = false;

    m_data_pending_in_staging_storage_account_in_mb_isSet = false;
    m_data_pending_in_staging_storage_account_in_mb_isValid = false;

    m_disk_capacity_in_bytes_isSet = false;
    m_disk_capacity_in_bytes_isValid = false;

    m_disk_id_isSet = false;
    m_disk_id_isValid = false;

    m_disk_name_isSet = false;
    m_disk_name_isValid = false;

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_monitoring_job_type_isSet = false;
    m_monitoring_job_type_isValid = false;

    m_monitoring_percentage_completion_isSet = false;
    m_monitoring_percentage_completion_isValid = false;

    m_primary_staging_azure_storage_account_id_isSet = false;
    m_primary_staging_azure_storage_account_id_isValid = false;

    m_recovery_azure_resource_group_id_isSet = false;
    m_recovery_azure_resource_group_id_isValid = false;

    m_recovery_disk_id_isSet = false;
    m_recovery_disk_id_isValid = false;

    m_resync_required_isSet = false;
    m_resync_required_isValid = false;
}

void OAIA2AProtectedManagedDiskDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIA2AProtectedManagedDiskDetails::fromJsonObject(QJsonObject json) {

    m_data_pending_at_source_agent_in_mb_isValid = ::OpenAPI::fromJsonValue(m_data_pending_at_source_agent_in_mb, json[QString("dataPendingAtSourceAgentInMB")]);
    m_data_pending_at_source_agent_in_mb_isSet = !json[QString("dataPendingAtSourceAgentInMB")].isNull() && m_data_pending_at_source_agent_in_mb_isValid;

    m_data_pending_in_staging_storage_account_in_mb_isValid = ::OpenAPI::fromJsonValue(m_data_pending_in_staging_storage_account_in_mb, json[QString("dataPendingInStagingStorageAccountInMB")]);
    m_data_pending_in_staging_storage_account_in_mb_isSet = !json[QString("dataPendingInStagingStorageAccountInMB")].isNull() && m_data_pending_in_staging_storage_account_in_mb_isValid;

    m_disk_capacity_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_disk_capacity_in_bytes, json[QString("diskCapacityInBytes")]);
    m_disk_capacity_in_bytes_isSet = !json[QString("diskCapacityInBytes")].isNull() && m_disk_capacity_in_bytes_isValid;

    m_disk_id_isValid = ::OpenAPI::fromJsonValue(m_disk_id, json[QString("diskId")]);
    m_disk_id_isSet = !json[QString("diskId")].isNull() && m_disk_id_isValid;

    m_disk_name_isValid = ::OpenAPI::fromJsonValue(m_disk_name, json[QString("diskName")]);
    m_disk_name_isSet = !json[QString("diskName")].isNull() && m_disk_name_isValid;

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_monitoring_job_type_isValid = ::OpenAPI::fromJsonValue(m_monitoring_job_type, json[QString("monitoringJobType")]);
    m_monitoring_job_type_isSet = !json[QString("monitoringJobType")].isNull() && m_monitoring_job_type_isValid;

    m_monitoring_percentage_completion_isValid = ::OpenAPI::fromJsonValue(m_monitoring_percentage_completion, json[QString("monitoringPercentageCompletion")]);
    m_monitoring_percentage_completion_isSet = !json[QString("monitoringPercentageCompletion")].isNull() && m_monitoring_percentage_completion_isValid;

    m_primary_staging_azure_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_primary_staging_azure_storage_account_id, json[QString("primaryStagingAzureStorageAccountId")]);
    m_primary_staging_azure_storage_account_id_isSet = !json[QString("primaryStagingAzureStorageAccountId")].isNull() && m_primary_staging_azure_storage_account_id_isValid;

    m_recovery_azure_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_resource_group_id, json[QString("recoveryAzureResourceGroupId")]);
    m_recovery_azure_resource_group_id_isSet = !json[QString("recoveryAzureResourceGroupId")].isNull() && m_recovery_azure_resource_group_id_isValid;

    m_recovery_disk_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_disk_id, json[QString("recoveryDiskId")]);
    m_recovery_disk_id_isSet = !json[QString("recoveryDiskId")].isNull() && m_recovery_disk_id_isValid;

    m_resync_required_isValid = ::OpenAPI::fromJsonValue(m_resync_required, json[QString("resyncRequired")]);
    m_resync_required_isSet = !json[QString("resyncRequired")].isNull() && m_resync_required_isValid;
}

QString OAIA2AProtectedManagedDiskDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIA2AProtectedManagedDiskDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_data_pending_at_source_agent_in_mb_isSet) {
        obj.insert(QString("dataPendingAtSourceAgentInMB"), ::OpenAPI::toJsonValue(m_data_pending_at_source_agent_in_mb));
    }
    if (m_data_pending_in_staging_storage_account_in_mb_isSet) {
        obj.insert(QString("dataPendingInStagingStorageAccountInMB"), ::OpenAPI::toJsonValue(m_data_pending_in_staging_storage_account_in_mb));
    }
    if (m_disk_capacity_in_bytes_isSet) {
        obj.insert(QString("diskCapacityInBytes"), ::OpenAPI::toJsonValue(m_disk_capacity_in_bytes));
    }
    if (m_disk_id_isSet) {
        obj.insert(QString("diskId"), ::OpenAPI::toJsonValue(m_disk_id));
    }
    if (m_disk_name_isSet) {
        obj.insert(QString("diskName"), ::OpenAPI::toJsonValue(m_disk_name));
    }
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_monitoring_job_type_isSet) {
        obj.insert(QString("monitoringJobType"), ::OpenAPI::toJsonValue(m_monitoring_job_type));
    }
    if (m_monitoring_percentage_completion_isSet) {
        obj.insert(QString("monitoringPercentageCompletion"), ::OpenAPI::toJsonValue(m_monitoring_percentage_completion));
    }
    if (m_primary_staging_azure_storage_account_id_isSet) {
        obj.insert(QString("primaryStagingAzureStorageAccountId"), ::OpenAPI::toJsonValue(m_primary_staging_azure_storage_account_id));
    }
    if (m_recovery_azure_resource_group_id_isSet) {
        obj.insert(QString("recoveryAzureResourceGroupId"), ::OpenAPI::toJsonValue(m_recovery_azure_resource_group_id));
    }
    if (m_recovery_disk_id_isSet) {
        obj.insert(QString("recoveryDiskId"), ::OpenAPI::toJsonValue(m_recovery_disk_id));
    }
    if (m_resync_required_isSet) {
        obj.insert(QString("resyncRequired"), ::OpenAPI::toJsonValue(m_resync_required));
    }
    return obj;
}

double OAIA2AProtectedManagedDiskDetails::getDataPendingAtSourceAgentInMb() const {
    return m_data_pending_at_source_agent_in_mb;
}
void OAIA2AProtectedManagedDiskDetails::setDataPendingAtSourceAgentInMb(const double &data_pending_at_source_agent_in_mb) {
    m_data_pending_at_source_agent_in_mb = data_pending_at_source_agent_in_mb;
    m_data_pending_at_source_agent_in_mb_isSet = true;
}

bool OAIA2AProtectedManagedDiskDetails::is_data_pending_at_source_agent_in_mb_Set() const{
    return m_data_pending_at_source_agent_in_mb_isSet;
}

bool OAIA2AProtectedManagedDiskDetails::is_data_pending_at_source_agent_in_mb_Valid() const{
    return m_data_pending_at_source_agent_in_mb_isValid;
}

double OAIA2AProtectedManagedDiskDetails::getDataPendingInStagingStorageAccountInMb() const {
    return m_data_pending_in_staging_storage_account_in_mb;
}
void OAIA2AProtectedManagedDiskDetails::setDataPendingInStagingStorageAccountInMb(const double &data_pending_in_staging_storage_account_in_mb) {
    m_data_pending_in_staging_storage_account_in_mb = data_pending_in_staging_storage_account_in_mb;
    m_data_pending_in_staging_storage_account_in_mb_isSet = true;
}

bool OAIA2AProtectedManagedDiskDetails::is_data_pending_in_staging_storage_account_in_mb_Set() const{
    return m_data_pending_in_staging_storage_account_in_mb_isSet;
}

bool OAIA2AProtectedManagedDiskDetails::is_data_pending_in_staging_storage_account_in_mb_Valid() const{
    return m_data_pending_in_staging_storage_account_in_mb_isValid;
}

qint64 OAIA2AProtectedManagedDiskDetails::getDiskCapacityInBytes() const {
    return m_disk_capacity_in_bytes;
}
void OAIA2AProtectedManagedDiskDetails::setDiskCapacityInBytes(const qint64 &disk_capacity_in_bytes) {
    m_disk_capacity_in_bytes = disk_capacity_in_bytes;
    m_disk_capacity_in_bytes_isSet = true;
}

bool OAIA2AProtectedManagedDiskDetails::is_disk_capacity_in_bytes_Set() const{
    return m_disk_capacity_in_bytes_isSet;
}

bool OAIA2AProtectedManagedDiskDetails::is_disk_capacity_in_bytes_Valid() const{
    return m_disk_capacity_in_bytes_isValid;
}

QString OAIA2AProtectedManagedDiskDetails::getDiskId() const {
    return m_disk_id;
}
void OAIA2AProtectedManagedDiskDetails::setDiskId(const QString &disk_id) {
    m_disk_id = disk_id;
    m_disk_id_isSet = true;
}

bool OAIA2AProtectedManagedDiskDetails::is_disk_id_Set() const{
    return m_disk_id_isSet;
}

bool OAIA2AProtectedManagedDiskDetails::is_disk_id_Valid() const{
    return m_disk_id_isValid;
}

QString OAIA2AProtectedManagedDiskDetails::getDiskName() const {
    return m_disk_name;
}
void OAIA2AProtectedManagedDiskDetails::setDiskName(const QString &disk_name) {
    m_disk_name = disk_name;
    m_disk_name_isSet = true;
}

bool OAIA2AProtectedManagedDiskDetails::is_disk_name_Set() const{
    return m_disk_name_isSet;
}

bool OAIA2AProtectedManagedDiskDetails::is_disk_name_Valid() const{
    return m_disk_name_isValid;
}

QString OAIA2AProtectedManagedDiskDetails::getDiskType() const {
    return m_disk_type;
}
void OAIA2AProtectedManagedDiskDetails::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIA2AProtectedManagedDiskDetails::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIA2AProtectedManagedDiskDetails::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

QString OAIA2AProtectedManagedDiskDetails::getMonitoringJobType() const {
    return m_monitoring_job_type;
}
void OAIA2AProtectedManagedDiskDetails::setMonitoringJobType(const QString &monitoring_job_type) {
    m_monitoring_job_type = monitoring_job_type;
    m_monitoring_job_type_isSet = true;
}

bool OAIA2AProtectedManagedDiskDetails::is_monitoring_job_type_Set() const{
    return m_monitoring_job_type_isSet;
}

bool OAIA2AProtectedManagedDiskDetails::is_monitoring_job_type_Valid() const{
    return m_monitoring_job_type_isValid;
}

qint32 OAIA2AProtectedManagedDiskDetails::getMonitoringPercentageCompletion() const {
    return m_monitoring_percentage_completion;
}
void OAIA2AProtectedManagedDiskDetails::setMonitoringPercentageCompletion(const qint32 &monitoring_percentage_completion) {
    m_monitoring_percentage_completion = monitoring_percentage_completion;
    m_monitoring_percentage_completion_isSet = true;
}

bool OAIA2AProtectedManagedDiskDetails::is_monitoring_percentage_completion_Set() const{
    return m_monitoring_percentage_completion_isSet;
}

bool OAIA2AProtectedManagedDiskDetails::is_monitoring_percentage_completion_Valid() const{
    return m_monitoring_percentage_completion_isValid;
}

QString OAIA2AProtectedManagedDiskDetails::getPrimaryStagingAzureStorageAccountId() const {
    return m_primary_staging_azure_storage_account_id;
}
void OAIA2AProtectedManagedDiskDetails::setPrimaryStagingAzureStorageAccountId(const QString &primary_staging_azure_storage_account_id) {
    m_primary_staging_azure_storage_account_id = primary_staging_azure_storage_account_id;
    m_primary_staging_azure_storage_account_id_isSet = true;
}

bool OAIA2AProtectedManagedDiskDetails::is_primary_staging_azure_storage_account_id_Set() const{
    return m_primary_staging_azure_storage_account_id_isSet;
}

bool OAIA2AProtectedManagedDiskDetails::is_primary_staging_azure_storage_account_id_Valid() const{
    return m_primary_staging_azure_storage_account_id_isValid;
}

QString OAIA2AProtectedManagedDiskDetails::getRecoveryAzureResourceGroupId() const {
    return m_recovery_azure_resource_group_id;
}
void OAIA2AProtectedManagedDiskDetails::setRecoveryAzureResourceGroupId(const QString &recovery_azure_resource_group_id) {
    m_recovery_azure_resource_group_id = recovery_azure_resource_group_id;
    m_recovery_azure_resource_group_id_isSet = true;
}

bool OAIA2AProtectedManagedDiskDetails::is_recovery_azure_resource_group_id_Set() const{
    return m_recovery_azure_resource_group_id_isSet;
}

bool OAIA2AProtectedManagedDiskDetails::is_recovery_azure_resource_group_id_Valid() const{
    return m_recovery_azure_resource_group_id_isValid;
}

QString OAIA2AProtectedManagedDiskDetails::getRecoveryDiskId() const {
    return m_recovery_disk_id;
}
void OAIA2AProtectedManagedDiskDetails::setRecoveryDiskId(const QString &recovery_disk_id) {
    m_recovery_disk_id = recovery_disk_id;
    m_recovery_disk_id_isSet = true;
}

bool OAIA2AProtectedManagedDiskDetails::is_recovery_disk_id_Set() const{
    return m_recovery_disk_id_isSet;
}

bool OAIA2AProtectedManagedDiskDetails::is_recovery_disk_id_Valid() const{
    return m_recovery_disk_id_isValid;
}

bool OAIA2AProtectedManagedDiskDetails::isResyncRequired() const {
    return m_resync_required;
}
void OAIA2AProtectedManagedDiskDetails::setResyncRequired(const bool &resync_required) {
    m_resync_required = resync_required;
    m_resync_required_isSet = true;
}

bool OAIA2AProtectedManagedDiskDetails::is_resync_required_Set() const{
    return m_resync_required_isSet;
}

bool OAIA2AProtectedManagedDiskDetails::is_resync_required_Valid() const{
    return m_resync_required_isValid;
}

bool OAIA2AProtectedManagedDiskDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_pending_at_source_agent_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_pending_in_staging_storage_account_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_capacity_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_job_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_percentage_completion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_staging_azure_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resync_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIA2AProtectedManagedDiskDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
