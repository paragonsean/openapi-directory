/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInMageDiskExclusionInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInMageDiskExclusionInput::OAIInMageDiskExclusionInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInMageDiskExclusionInput::OAIInMageDiskExclusionInput() {
    this->initializeModel();
}

OAIInMageDiskExclusionInput::~OAIInMageDiskExclusionInput() {}

void OAIInMageDiskExclusionInput::initializeModel() {

    m_disk_signature_options_isSet = false;
    m_disk_signature_options_isValid = false;

    m_volume_options_isSet = false;
    m_volume_options_isValid = false;
}

void OAIInMageDiskExclusionInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInMageDiskExclusionInput::fromJsonObject(QJsonObject json) {

    m_disk_signature_options_isValid = ::OpenAPI::fromJsonValue(m_disk_signature_options, json[QString("diskSignatureOptions")]);
    m_disk_signature_options_isSet = !json[QString("diskSignatureOptions")].isNull() && m_disk_signature_options_isValid;

    m_volume_options_isValid = ::OpenAPI::fromJsonValue(m_volume_options, json[QString("volumeOptions")]);
    m_volume_options_isSet = !json[QString("volumeOptions")].isNull() && m_volume_options_isValid;
}

QString OAIInMageDiskExclusionInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInMageDiskExclusionInput::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_signature_options.size() > 0) {
        obj.insert(QString("diskSignatureOptions"), ::OpenAPI::toJsonValue(m_disk_signature_options));
    }
    if (m_volume_options.size() > 0) {
        obj.insert(QString("volumeOptions"), ::OpenAPI::toJsonValue(m_volume_options));
    }
    return obj;
}

QList<OAIInMageDiskSignatureExclusionOptions> OAIInMageDiskExclusionInput::getDiskSignatureOptions() const {
    return m_disk_signature_options;
}
void OAIInMageDiskExclusionInput::setDiskSignatureOptions(const QList<OAIInMageDiskSignatureExclusionOptions> &disk_signature_options) {
    m_disk_signature_options = disk_signature_options;
    m_disk_signature_options_isSet = true;
}

bool OAIInMageDiskExclusionInput::is_disk_signature_options_Set() const{
    return m_disk_signature_options_isSet;
}

bool OAIInMageDiskExclusionInput::is_disk_signature_options_Valid() const{
    return m_disk_signature_options_isValid;
}

QList<OAIInMageVolumeExclusionOptions> OAIInMageDiskExclusionInput::getVolumeOptions() const {
    return m_volume_options;
}
void OAIInMageDiskExclusionInput::setVolumeOptions(const QList<OAIInMageVolumeExclusionOptions> &volume_options) {
    m_volume_options = volume_options;
    m_volume_options_isSet = true;
}

bool OAIInMageDiskExclusionInput::is_volume_options_Set() const{
    return m_volume_options_isSet;
}

bool OAIInMageDiskExclusionInput::is_volume_options_Valid() const{
    return m_volume_options_isValid;
}

bool OAIInMageDiskExclusionInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_signature_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInMageDiskExclusionInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
