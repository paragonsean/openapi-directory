/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReplicationvCentersApi_H
#define OAI_OAIReplicationvCentersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddVCenterRequest.h"
#include "OAIUpdateVCenterRequest.h"
#include "OAIVCenter.h"
#include "OAIVCenterCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReplicationvCentersApi : public QObject {
    Q_OBJECT

public:
    OAIReplicationvCentersApi(const int timeOut = 0);
    ~OAIReplicationvCentersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  v_center_name QString [required]
    * @param[in]  add_v_center_request OAIAddVCenterRequest [required]
    */
    virtual void replicationvCentersCreate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &v_center_name, const OAIAddVCenterRequest &add_v_center_request);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  v_center_name QString [required]
    */
    virtual void replicationvCentersDelete(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &v_center_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  v_center_name QString [required]
    */
    virtual void replicationvCentersGet(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &v_center_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void replicationvCentersList(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    */
    virtual void replicationvCentersListByReplicationFabrics(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  v_center_name QString [required]
    * @param[in]  update_v_center_request OAIUpdateVCenterRequest [required]
    */
    virtual void replicationvCentersUpdate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &v_center_name, const OAIUpdateVCenterRequest &update_v_center_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void replicationvCentersCreateCallback(OAIHttpRequestWorker *worker);
    void replicationvCentersDeleteCallback(OAIHttpRequestWorker *worker);
    void replicationvCentersGetCallback(OAIHttpRequestWorker *worker);
    void replicationvCentersListCallback(OAIHttpRequestWorker *worker);
    void replicationvCentersListByReplicationFabricsCallback(OAIHttpRequestWorker *worker);
    void replicationvCentersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void replicationvCentersCreateSignal(OAIVCenter summary);
    void replicationvCentersDeleteSignal();
    void replicationvCentersGetSignal(OAIVCenter summary);
    void replicationvCentersListSignal(OAIVCenterCollection summary);
    void replicationvCentersListByReplicationFabricsSignal(OAIVCenterCollection summary);
    void replicationvCentersUpdateSignal(OAIVCenter summary);


    void replicationvCentersCreateSignalFull(OAIHttpRequestWorker *worker, OAIVCenter summary);
    void replicationvCentersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void replicationvCentersGetSignalFull(OAIHttpRequestWorker *worker, OAIVCenter summary);
    void replicationvCentersListSignalFull(OAIHttpRequestWorker *worker, OAIVCenterCollection summary);
    void replicationvCentersListByReplicationFabricsSignalFull(OAIHttpRequestWorker *worker, OAIVCenterCollection summary);
    void replicationvCentersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVCenter summary);

    Q_DECL_DEPRECATED_X("Use replicationvCentersCreateSignalError() instead")
    void replicationvCentersCreateSignalE(OAIVCenter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationvCentersCreateSignalError(OAIVCenter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationvCentersDeleteSignalError() instead")
    void replicationvCentersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationvCentersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationvCentersGetSignalError() instead")
    void replicationvCentersGetSignalE(OAIVCenter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationvCentersGetSignalError(OAIVCenter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationvCentersListSignalError() instead")
    void replicationvCentersListSignalE(OAIVCenterCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationvCentersListSignalError(OAIVCenterCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationvCentersListByReplicationFabricsSignalError() instead")
    void replicationvCentersListByReplicationFabricsSignalE(OAIVCenterCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationvCentersListByReplicationFabricsSignalError(OAIVCenterCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationvCentersUpdateSignalError() instead")
    void replicationvCentersUpdateSignalE(OAIVCenter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationvCentersUpdateSignalError(OAIVCenter summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use replicationvCentersCreateSignalErrorFull() instead")
    void replicationvCentersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationvCentersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationvCentersDeleteSignalErrorFull() instead")
    void replicationvCentersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationvCentersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationvCentersGetSignalErrorFull() instead")
    void replicationvCentersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationvCentersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationvCentersListSignalErrorFull() instead")
    void replicationvCentersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationvCentersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationvCentersListByReplicationFabricsSignalErrorFull() instead")
    void replicationvCentersListByReplicationFabricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationvCentersListByReplicationFabricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationvCentersUpdateSignalErrorFull() instead")
    void replicationvCentersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationvCentersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
