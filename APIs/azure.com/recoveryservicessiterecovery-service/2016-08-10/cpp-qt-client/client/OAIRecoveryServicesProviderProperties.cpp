/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecoveryServicesProviderProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecoveryServicesProviderProperties::OAIRecoveryServicesProviderProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecoveryServicesProviderProperties::OAIRecoveryServicesProviderProperties() {
    this->initializeModel();
}

OAIRecoveryServicesProviderProperties::~OAIRecoveryServicesProviderProperties() {}

void OAIRecoveryServicesProviderProperties::initializeModel() {

    m_allowed_scenarios_isSet = false;
    m_allowed_scenarios_isValid = false;

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_dra_identifier_isSet = false;
    m_dra_identifier_isValid = false;

    m_fabric_friendly_name_isSet = false;
    m_fabric_friendly_name_isValid = false;

    m_fabric_type_isSet = false;
    m_fabric_type_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_health_error_details_isSet = false;
    m_health_error_details_isValid = false;

    m_identity_details_isSet = false;
    m_identity_details_isValid = false;

    m_last_heart_beat_isSet = false;
    m_last_heart_beat_isValid = false;

    m_protected_item_count_isSet = false;
    m_protected_item_count_isValid = false;

    m_provider_version_isSet = false;
    m_provider_version_isValid = false;

    m_provider_version_expiry_date_isSet = false;
    m_provider_version_expiry_date_isValid = false;

    m_provider_version_state_isSet = false;
    m_provider_version_state_isValid = false;

    m_server_version_isSet = false;
    m_server_version_isValid = false;
}

void OAIRecoveryServicesProviderProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecoveryServicesProviderProperties::fromJsonObject(QJsonObject json) {

    m_allowed_scenarios_isValid = ::OpenAPI::fromJsonValue(m_allowed_scenarios, json[QString("allowedScenarios")]);
    m_allowed_scenarios_isSet = !json[QString("allowedScenarios")].isNull() && m_allowed_scenarios_isValid;

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("connectionStatus")]);
    m_connection_status_isSet = !json[QString("connectionStatus")].isNull() && m_connection_status_isValid;

    m_dra_identifier_isValid = ::OpenAPI::fromJsonValue(m_dra_identifier, json[QString("draIdentifier")]);
    m_dra_identifier_isSet = !json[QString("draIdentifier")].isNull() && m_dra_identifier_isValid;

    m_fabric_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_fabric_friendly_name, json[QString("fabricFriendlyName")]);
    m_fabric_friendly_name_isSet = !json[QString("fabricFriendlyName")].isNull() && m_fabric_friendly_name_isValid;

    m_fabric_type_isValid = ::OpenAPI::fromJsonValue(m_fabric_type, json[QString("fabricType")]);
    m_fabric_type_isSet = !json[QString("fabricType")].isNull() && m_fabric_type_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_health_error_details_isValid = ::OpenAPI::fromJsonValue(m_health_error_details, json[QString("healthErrorDetails")]);
    m_health_error_details_isSet = !json[QString("healthErrorDetails")].isNull() && m_health_error_details_isValid;

    m_identity_details_isValid = ::OpenAPI::fromJsonValue(m_identity_details, json[QString("identityDetails")]);
    m_identity_details_isSet = !json[QString("identityDetails")].isNull() && m_identity_details_isValid;

    m_last_heart_beat_isValid = ::OpenAPI::fromJsonValue(m_last_heart_beat, json[QString("lastHeartBeat")]);
    m_last_heart_beat_isSet = !json[QString("lastHeartBeat")].isNull() && m_last_heart_beat_isValid;

    m_protected_item_count_isValid = ::OpenAPI::fromJsonValue(m_protected_item_count, json[QString("protectedItemCount")]);
    m_protected_item_count_isSet = !json[QString("protectedItemCount")].isNull() && m_protected_item_count_isValid;

    m_provider_version_isValid = ::OpenAPI::fromJsonValue(m_provider_version, json[QString("providerVersion")]);
    m_provider_version_isSet = !json[QString("providerVersion")].isNull() && m_provider_version_isValid;

    m_provider_version_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_provider_version_expiry_date, json[QString("providerVersionExpiryDate")]);
    m_provider_version_expiry_date_isSet = !json[QString("providerVersionExpiryDate")].isNull() && m_provider_version_expiry_date_isValid;

    m_provider_version_state_isValid = ::OpenAPI::fromJsonValue(m_provider_version_state, json[QString("providerVersionState")]);
    m_provider_version_state_isSet = !json[QString("providerVersionState")].isNull() && m_provider_version_state_isValid;

    m_server_version_isValid = ::OpenAPI::fromJsonValue(m_server_version, json[QString("serverVersion")]);
    m_server_version_isSet = !json[QString("serverVersion")].isNull() && m_server_version_isValid;
}

QString OAIRecoveryServicesProviderProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecoveryServicesProviderProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_scenarios.size() > 0) {
        obj.insert(QString("allowedScenarios"), ::OpenAPI::toJsonValue(m_allowed_scenarios));
    }
    if (m_connection_status_isSet) {
        obj.insert(QString("connectionStatus"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_dra_identifier_isSet) {
        obj.insert(QString("draIdentifier"), ::OpenAPI::toJsonValue(m_dra_identifier));
    }
    if (m_fabric_friendly_name_isSet) {
        obj.insert(QString("fabricFriendlyName"), ::OpenAPI::toJsonValue(m_fabric_friendly_name));
    }
    if (m_fabric_type_isSet) {
        obj.insert(QString("fabricType"), ::OpenAPI::toJsonValue(m_fabric_type));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_health_error_details.size() > 0) {
        obj.insert(QString("healthErrorDetails"), ::OpenAPI::toJsonValue(m_health_error_details));
    }
    if (m_identity_details.isSet()) {
        obj.insert(QString("identityDetails"), ::OpenAPI::toJsonValue(m_identity_details));
    }
    if (m_last_heart_beat_isSet) {
        obj.insert(QString("lastHeartBeat"), ::OpenAPI::toJsonValue(m_last_heart_beat));
    }
    if (m_protected_item_count_isSet) {
        obj.insert(QString("protectedItemCount"), ::OpenAPI::toJsonValue(m_protected_item_count));
    }
    if (m_provider_version_isSet) {
        obj.insert(QString("providerVersion"), ::OpenAPI::toJsonValue(m_provider_version));
    }
    if (m_provider_version_expiry_date_isSet) {
        obj.insert(QString("providerVersionExpiryDate"), ::OpenAPI::toJsonValue(m_provider_version_expiry_date));
    }
    if (m_provider_version_state_isSet) {
        obj.insert(QString("providerVersionState"), ::OpenAPI::toJsonValue(m_provider_version_state));
    }
    if (m_server_version_isSet) {
        obj.insert(QString("serverVersion"), ::OpenAPI::toJsonValue(m_server_version));
    }
    return obj;
}

QList<QString> OAIRecoveryServicesProviderProperties::getAllowedScenarios() const {
    return m_allowed_scenarios;
}
void OAIRecoveryServicesProviderProperties::setAllowedScenarios(const QList<QString> &allowed_scenarios) {
    m_allowed_scenarios = allowed_scenarios;
    m_allowed_scenarios_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_allowed_scenarios_Set() const{
    return m_allowed_scenarios_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_allowed_scenarios_Valid() const{
    return m_allowed_scenarios_isValid;
}

QString OAIRecoveryServicesProviderProperties::getConnectionStatus() const {
    return m_connection_status;
}
void OAIRecoveryServicesProviderProperties::setConnectionStatus(const QString &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

QString OAIRecoveryServicesProviderProperties::getDraIdentifier() const {
    return m_dra_identifier;
}
void OAIRecoveryServicesProviderProperties::setDraIdentifier(const QString &dra_identifier) {
    m_dra_identifier = dra_identifier;
    m_dra_identifier_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_dra_identifier_Set() const{
    return m_dra_identifier_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_dra_identifier_Valid() const{
    return m_dra_identifier_isValid;
}

QString OAIRecoveryServicesProviderProperties::getFabricFriendlyName() const {
    return m_fabric_friendly_name;
}
void OAIRecoveryServicesProviderProperties::setFabricFriendlyName(const QString &fabric_friendly_name) {
    m_fabric_friendly_name = fabric_friendly_name;
    m_fabric_friendly_name_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_fabric_friendly_name_Set() const{
    return m_fabric_friendly_name_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_fabric_friendly_name_Valid() const{
    return m_fabric_friendly_name_isValid;
}

QString OAIRecoveryServicesProviderProperties::getFabricType() const {
    return m_fabric_type;
}
void OAIRecoveryServicesProviderProperties::setFabricType(const QString &fabric_type) {
    m_fabric_type = fabric_type;
    m_fabric_type_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_fabric_type_Set() const{
    return m_fabric_type_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_fabric_type_Valid() const{
    return m_fabric_type_isValid;
}

QString OAIRecoveryServicesProviderProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIRecoveryServicesProviderProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QList<OAIHealthError> OAIRecoveryServicesProviderProperties::getHealthErrorDetails() const {
    return m_health_error_details;
}
void OAIRecoveryServicesProviderProperties::setHealthErrorDetails(const QList<OAIHealthError> &health_error_details) {
    m_health_error_details = health_error_details;
    m_health_error_details_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_health_error_details_Set() const{
    return m_health_error_details_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_health_error_details_Valid() const{
    return m_health_error_details_isValid;
}

OAIIdentityInformation OAIRecoveryServicesProviderProperties::getIdentityDetails() const {
    return m_identity_details;
}
void OAIRecoveryServicesProviderProperties::setIdentityDetails(const OAIIdentityInformation &identity_details) {
    m_identity_details = identity_details;
    m_identity_details_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_identity_details_Set() const{
    return m_identity_details_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_identity_details_Valid() const{
    return m_identity_details_isValid;
}

QDateTime OAIRecoveryServicesProviderProperties::getLastHeartBeat() const {
    return m_last_heart_beat;
}
void OAIRecoveryServicesProviderProperties::setLastHeartBeat(const QDateTime &last_heart_beat) {
    m_last_heart_beat = last_heart_beat;
    m_last_heart_beat_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_last_heart_beat_Set() const{
    return m_last_heart_beat_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_last_heart_beat_Valid() const{
    return m_last_heart_beat_isValid;
}

qint32 OAIRecoveryServicesProviderProperties::getProtectedItemCount() const {
    return m_protected_item_count;
}
void OAIRecoveryServicesProviderProperties::setProtectedItemCount(const qint32 &protected_item_count) {
    m_protected_item_count = protected_item_count;
    m_protected_item_count_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_protected_item_count_Set() const{
    return m_protected_item_count_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_protected_item_count_Valid() const{
    return m_protected_item_count_isValid;
}

QString OAIRecoveryServicesProviderProperties::getProviderVersion() const {
    return m_provider_version;
}
void OAIRecoveryServicesProviderProperties::setProviderVersion(const QString &provider_version) {
    m_provider_version = provider_version;
    m_provider_version_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_provider_version_Set() const{
    return m_provider_version_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_provider_version_Valid() const{
    return m_provider_version_isValid;
}

QDateTime OAIRecoveryServicesProviderProperties::getProviderVersionExpiryDate() const {
    return m_provider_version_expiry_date;
}
void OAIRecoveryServicesProviderProperties::setProviderVersionExpiryDate(const QDateTime &provider_version_expiry_date) {
    m_provider_version_expiry_date = provider_version_expiry_date;
    m_provider_version_expiry_date_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_provider_version_expiry_date_Set() const{
    return m_provider_version_expiry_date_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_provider_version_expiry_date_Valid() const{
    return m_provider_version_expiry_date_isValid;
}

QString OAIRecoveryServicesProviderProperties::getProviderVersionState() const {
    return m_provider_version_state;
}
void OAIRecoveryServicesProviderProperties::setProviderVersionState(const QString &provider_version_state) {
    m_provider_version_state = provider_version_state;
    m_provider_version_state_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_provider_version_state_Set() const{
    return m_provider_version_state_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_provider_version_state_Valid() const{
    return m_provider_version_state_isValid;
}

QString OAIRecoveryServicesProviderProperties::getServerVersion() const {
    return m_server_version;
}
void OAIRecoveryServicesProviderProperties::setServerVersion(const QString &server_version) {
    m_server_version = server_version;
    m_server_version_isSet = true;
}

bool OAIRecoveryServicesProviderProperties::is_server_version_Set() const{
    return m_server_version_isSet;
}

bool OAIRecoveryServicesProviderProperties::is_server_version_Valid() const{
    return m_server_version_isValid;
}

bool OAIRecoveryServicesProviderProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_scenarios.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dra_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_error_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_heart_beat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_version_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_version_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecoveryServicesProviderProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
