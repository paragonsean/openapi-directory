/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogicalNetworkProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogicalNetworkProperties::OAILogicalNetworkProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogicalNetworkProperties::OAILogicalNetworkProperties() {
    this->initializeModel();
}

OAILogicalNetworkProperties::~OAILogicalNetworkProperties() {}

void OAILogicalNetworkProperties::initializeModel() {

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_logical_network_definitions_status_isSet = false;
    m_logical_network_definitions_status_isValid = false;

    m_logical_network_usage_isSet = false;
    m_logical_network_usage_isValid = false;

    m_network_virtualization_status_isSet = false;
    m_network_virtualization_status_isValid = false;
}

void OAILogicalNetworkProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogicalNetworkProperties::fromJsonObject(QJsonObject json) {

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_logical_network_definitions_status_isValid = ::OpenAPI::fromJsonValue(m_logical_network_definitions_status, json[QString("logicalNetworkDefinitionsStatus")]);
    m_logical_network_definitions_status_isSet = !json[QString("logicalNetworkDefinitionsStatus")].isNull() && m_logical_network_definitions_status_isValid;

    m_logical_network_usage_isValid = ::OpenAPI::fromJsonValue(m_logical_network_usage, json[QString("logicalNetworkUsage")]);
    m_logical_network_usage_isSet = !json[QString("logicalNetworkUsage")].isNull() && m_logical_network_usage_isValid;

    m_network_virtualization_status_isValid = ::OpenAPI::fromJsonValue(m_network_virtualization_status, json[QString("networkVirtualizationStatus")]);
    m_network_virtualization_status_isSet = !json[QString("networkVirtualizationStatus")].isNull() && m_network_virtualization_status_isValid;
}

QString OAILogicalNetworkProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogicalNetworkProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_logical_network_definitions_status_isSet) {
        obj.insert(QString("logicalNetworkDefinitionsStatus"), ::OpenAPI::toJsonValue(m_logical_network_definitions_status));
    }
    if (m_logical_network_usage_isSet) {
        obj.insert(QString("logicalNetworkUsage"), ::OpenAPI::toJsonValue(m_logical_network_usage));
    }
    if (m_network_virtualization_status_isSet) {
        obj.insert(QString("networkVirtualizationStatus"), ::OpenAPI::toJsonValue(m_network_virtualization_status));
    }
    return obj;
}

QString OAILogicalNetworkProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAILogicalNetworkProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAILogicalNetworkProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAILogicalNetworkProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAILogicalNetworkProperties::getLogicalNetworkDefinitionsStatus() const {
    return m_logical_network_definitions_status;
}
void OAILogicalNetworkProperties::setLogicalNetworkDefinitionsStatus(const QString &logical_network_definitions_status) {
    m_logical_network_definitions_status = logical_network_definitions_status;
    m_logical_network_definitions_status_isSet = true;
}

bool OAILogicalNetworkProperties::is_logical_network_definitions_status_Set() const{
    return m_logical_network_definitions_status_isSet;
}

bool OAILogicalNetworkProperties::is_logical_network_definitions_status_Valid() const{
    return m_logical_network_definitions_status_isValid;
}

QString OAILogicalNetworkProperties::getLogicalNetworkUsage() const {
    return m_logical_network_usage;
}
void OAILogicalNetworkProperties::setLogicalNetworkUsage(const QString &logical_network_usage) {
    m_logical_network_usage = logical_network_usage;
    m_logical_network_usage_isSet = true;
}

bool OAILogicalNetworkProperties::is_logical_network_usage_Set() const{
    return m_logical_network_usage_isSet;
}

bool OAILogicalNetworkProperties::is_logical_network_usage_Valid() const{
    return m_logical_network_usage_isValid;
}

QString OAILogicalNetworkProperties::getNetworkVirtualizationStatus() const {
    return m_network_virtualization_status;
}
void OAILogicalNetworkProperties::setNetworkVirtualizationStatus(const QString &network_virtualization_status) {
    m_network_virtualization_status = network_virtualization_status;
    m_network_virtualization_status_isSet = true;
}

bool OAILogicalNetworkProperties::is_network_virtualization_status_Set() const{
    return m_network_virtualization_status_isSet;
}

bool OAILogicalNetworkProperties::is_network_virtualization_status_Valid() const{
    return m_network_virtualization_status_isValid;
}

bool OAILogicalNetworkProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_network_definitions_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_network_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_virtualization_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogicalNetworkProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
