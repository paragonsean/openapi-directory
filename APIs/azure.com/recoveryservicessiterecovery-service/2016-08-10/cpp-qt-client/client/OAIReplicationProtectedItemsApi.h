/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReplicationProtectedItemsApi_H
#define OAI_OAIReplicationProtectedItemsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplyRecoveryPointInput.h"
#include "OAIDisableProtectionInput.h"
#include "OAIEnableProtectionInput.h"
#include "OAIPlannedFailoverInput.h"
#include "OAIReplicationProtectedItem.h"
#include "OAIReplicationProtectedItemCollection.h"
#include "OAIReverseReplicationInput.h"
#include "OAITestFailoverCleanupInput.h"
#include "OAITestFailoverInput.h"
#include "OAIUnplannedFailoverInput.h"
#include "OAIUpdateMobilityServiceRequest.h"
#include "OAIUpdateReplicationProtectedItemInput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReplicationProtectedItemsApi : public QObject {
    Q_OBJECT

public:
    OAIReplicationProtectedItemsApi(const int timeOut = 0);
    ~OAIReplicationProtectedItemsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replicated_protected_item_name QString [required]
    * @param[in]  apply_recovery_point_input OAIApplyRecoveryPointInput [required]
    */
    virtual void replicationProtectedItemsApplyRecoveryPoint(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replicated_protected_item_name, const OAIApplyRecoveryPointInput &apply_recovery_point_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replicated_protected_item_name QString [required]
    * @param[in]  input OAIEnableProtectionInput [required]
    */
    virtual void replicationProtectedItemsCreate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replicated_protected_item_name, const OAIEnableProtectionInput &input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replicated_protected_item_name QString [required]
    * @param[in]  disable_protection_input OAIDisableProtectionInput [required]
    */
    virtual void replicationProtectedItemsDelete(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replicated_protected_item_name, const OAIDisableProtectionInput &disable_protection_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replicated_protected_item_name QString [required]
    */
    virtual void replicationProtectedItemsFailoverCommit(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replicated_protected_item_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replicated_protected_item_name QString [required]
    */
    virtual void replicationProtectedItemsGet(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replicated_protected_item_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  skip_token QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void replicationProtectedItemsList(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    */
    virtual void replicationProtectedItemsListByReplicationProtectionContainers(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replicated_protected_item_name QString [required]
    * @param[in]  failover_input OAIPlannedFailoverInput [required]
    */
    virtual void replicationProtectedItemsPlannedFailover(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replicated_protected_item_name, const OAIPlannedFailoverInput &failover_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replicated_protected_item_name QString [required]
    */
    virtual void replicationProtectedItemsPurge(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replicated_protected_item_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replicated_protected_item_name QString [required]
    */
    virtual void replicationProtectedItemsRepairReplication(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replicated_protected_item_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replicated_protected_item_name QString [required]
    * @param[in]  rr_input OAIReverseReplicationInput [required]
    */
    virtual void replicationProtectedItemsReprotect(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replicated_protected_item_name, const OAIReverseReplicationInput &rr_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replicated_protected_item_name QString [required]
    * @param[in]  failover_input OAITestFailoverInput [required]
    */
    virtual void replicationProtectedItemsTestFailover(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replicated_protected_item_name, const OAITestFailoverInput &failover_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replicated_protected_item_name QString [required]
    * @param[in]  cleanup_input OAITestFailoverCleanupInput [required]
    */
    virtual void replicationProtectedItemsTestFailoverCleanup(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replicated_protected_item_name, const OAITestFailoverCleanupInput &cleanup_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replicated_protected_item_name QString [required]
    * @param[in]  failover_input OAIUnplannedFailoverInput [required]
    */
    virtual void replicationProtectedItemsUnplannedFailover(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replicated_protected_item_name, const OAIUnplannedFailoverInput &failover_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replicated_protected_item_name QString [required]
    * @param[in]  update_protection_input OAIUpdateReplicationProtectedItemInput [required]
    */
    virtual void replicationProtectedItemsUpdate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replicated_protected_item_name, const OAIUpdateReplicationProtectedItemInput &update_protection_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  replication_protected_item_name QString [required]
    * @param[in]  update_mobility_service_request OAIUpdateMobilityServiceRequest [required]
    */
    virtual void replicationProtectedItemsUpdateMobilityService(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &replication_protected_item_name, const OAIUpdateMobilityServiceRequest &update_mobility_service_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void replicationProtectedItemsApplyRecoveryPointCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsCreateCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsDeleteCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsFailoverCommitCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsGetCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsListCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsListByReplicationProtectionContainersCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsPlannedFailoverCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsPurgeCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsRepairReplicationCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsReprotectCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsTestFailoverCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsTestFailoverCleanupCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsUnplannedFailoverCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsUpdateCallback(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsUpdateMobilityServiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void replicationProtectedItemsApplyRecoveryPointSignal(OAIReplicationProtectedItem summary);
    void replicationProtectedItemsCreateSignal(OAIReplicationProtectedItem summary);
    void replicationProtectedItemsDeleteSignal();
    void replicationProtectedItemsFailoverCommitSignal(OAIReplicationProtectedItem summary);
    void replicationProtectedItemsGetSignal(OAIReplicationProtectedItem summary);
    void replicationProtectedItemsListSignal(OAIReplicationProtectedItemCollection summary);
    void replicationProtectedItemsListByReplicationProtectionContainersSignal(OAIReplicationProtectedItemCollection summary);
    void replicationProtectedItemsPlannedFailoverSignal(OAIReplicationProtectedItem summary);
    void replicationProtectedItemsPurgeSignal();
    void replicationProtectedItemsRepairReplicationSignal(OAIReplicationProtectedItem summary);
    void replicationProtectedItemsReprotectSignal(OAIReplicationProtectedItem summary);
    void replicationProtectedItemsTestFailoverSignal(OAIReplicationProtectedItem summary);
    void replicationProtectedItemsTestFailoverCleanupSignal(OAIReplicationProtectedItem summary);
    void replicationProtectedItemsUnplannedFailoverSignal(OAIReplicationProtectedItem summary);
    void replicationProtectedItemsUpdateSignal(OAIReplicationProtectedItem summary);
    void replicationProtectedItemsUpdateMobilityServiceSignal(OAIReplicationProtectedItem summary);


    void replicationProtectedItemsApplyRecoveryPointSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItem summary);
    void replicationProtectedItemsCreateSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItem summary);
    void replicationProtectedItemsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsFailoverCommitSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItem summary);
    void replicationProtectedItemsGetSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItem summary);
    void replicationProtectedItemsListSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItemCollection summary);
    void replicationProtectedItemsListByReplicationProtectionContainersSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItemCollection summary);
    void replicationProtectedItemsPlannedFailoverSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItem summary);
    void replicationProtectedItemsPurgeSignalFull(OAIHttpRequestWorker *worker);
    void replicationProtectedItemsRepairReplicationSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItem summary);
    void replicationProtectedItemsReprotectSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItem summary);
    void replicationProtectedItemsTestFailoverSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItem summary);
    void replicationProtectedItemsTestFailoverCleanupSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItem summary);
    void replicationProtectedItemsUnplannedFailoverSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItem summary);
    void replicationProtectedItemsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItem summary);
    void replicationProtectedItemsUpdateMobilityServiceSignalFull(OAIHttpRequestWorker *worker, OAIReplicationProtectedItem summary);

    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsApplyRecoveryPointSignalError() instead")
    void replicationProtectedItemsApplyRecoveryPointSignalE(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsApplyRecoveryPointSignalError(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsCreateSignalError() instead")
    void replicationProtectedItemsCreateSignalE(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsCreateSignalError(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsDeleteSignalError() instead")
    void replicationProtectedItemsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsFailoverCommitSignalError() instead")
    void replicationProtectedItemsFailoverCommitSignalE(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsFailoverCommitSignalError(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsGetSignalError() instead")
    void replicationProtectedItemsGetSignalE(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsGetSignalError(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsListSignalError() instead")
    void replicationProtectedItemsListSignalE(OAIReplicationProtectedItemCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsListSignalError(OAIReplicationProtectedItemCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsListByReplicationProtectionContainersSignalError() instead")
    void replicationProtectedItemsListByReplicationProtectionContainersSignalE(OAIReplicationProtectedItemCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsListByReplicationProtectionContainersSignalError(OAIReplicationProtectedItemCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsPlannedFailoverSignalError() instead")
    void replicationProtectedItemsPlannedFailoverSignalE(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsPlannedFailoverSignalError(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsPurgeSignalError() instead")
    void replicationProtectedItemsPurgeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsPurgeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsRepairReplicationSignalError() instead")
    void replicationProtectedItemsRepairReplicationSignalE(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsRepairReplicationSignalError(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsReprotectSignalError() instead")
    void replicationProtectedItemsReprotectSignalE(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsReprotectSignalError(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsTestFailoverSignalError() instead")
    void replicationProtectedItemsTestFailoverSignalE(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsTestFailoverSignalError(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsTestFailoverCleanupSignalError() instead")
    void replicationProtectedItemsTestFailoverCleanupSignalE(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsTestFailoverCleanupSignalError(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsUnplannedFailoverSignalError() instead")
    void replicationProtectedItemsUnplannedFailoverSignalE(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsUnplannedFailoverSignalError(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsUpdateSignalError() instead")
    void replicationProtectedItemsUpdateSignalE(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsUpdateSignalError(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsUpdateMobilityServiceSignalError() instead")
    void replicationProtectedItemsUpdateMobilityServiceSignalE(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsUpdateMobilityServiceSignalError(OAIReplicationProtectedItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsApplyRecoveryPointSignalErrorFull() instead")
    void replicationProtectedItemsApplyRecoveryPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsApplyRecoveryPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsCreateSignalErrorFull() instead")
    void replicationProtectedItemsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsDeleteSignalErrorFull() instead")
    void replicationProtectedItemsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsFailoverCommitSignalErrorFull() instead")
    void replicationProtectedItemsFailoverCommitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsFailoverCommitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsGetSignalErrorFull() instead")
    void replicationProtectedItemsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsListSignalErrorFull() instead")
    void replicationProtectedItemsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsListByReplicationProtectionContainersSignalErrorFull() instead")
    void replicationProtectedItemsListByReplicationProtectionContainersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsListByReplicationProtectionContainersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsPlannedFailoverSignalErrorFull() instead")
    void replicationProtectedItemsPlannedFailoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsPlannedFailoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsPurgeSignalErrorFull() instead")
    void replicationProtectedItemsPurgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsPurgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsRepairReplicationSignalErrorFull() instead")
    void replicationProtectedItemsRepairReplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsRepairReplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsReprotectSignalErrorFull() instead")
    void replicationProtectedItemsReprotectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsReprotectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsTestFailoverSignalErrorFull() instead")
    void replicationProtectedItemsTestFailoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsTestFailoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsTestFailoverCleanupSignalErrorFull() instead")
    void replicationProtectedItemsTestFailoverCleanupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsTestFailoverCleanupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsUnplannedFailoverSignalErrorFull() instead")
    void replicationProtectedItemsUnplannedFailoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsUnplannedFailoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsUpdateSignalErrorFull() instead")
    void replicationProtectedItemsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectedItemsUpdateMobilityServiceSignalErrorFull() instead")
    void replicationProtectedItemsUpdateMobilityServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectedItemsUpdateMobilityServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
