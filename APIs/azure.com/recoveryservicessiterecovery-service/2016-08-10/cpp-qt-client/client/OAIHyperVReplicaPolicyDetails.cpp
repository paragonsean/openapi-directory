/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHyperVReplicaPolicyDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHyperVReplicaPolicyDetails::OAIHyperVReplicaPolicyDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHyperVReplicaPolicyDetails::OAIHyperVReplicaPolicyDetails() {
    this->initializeModel();
}

OAIHyperVReplicaPolicyDetails::~OAIHyperVReplicaPolicyDetails() {}

void OAIHyperVReplicaPolicyDetails::initializeModel() {

    m_allowed_authentication_type_isSet = false;
    m_allowed_authentication_type_isValid = false;

    m_application_consistent_snapshot_frequency_in_hours_isSet = false;
    m_application_consistent_snapshot_frequency_in_hours_isValid = false;

    m_compression_isSet = false;
    m_compression_isValid = false;

    m_initial_replication_method_isSet = false;
    m_initial_replication_method_isValid = false;

    m_offline_replication_export_path_isSet = false;
    m_offline_replication_export_path_isValid = false;

    m_offline_replication_import_path_isSet = false;
    m_offline_replication_import_path_isValid = false;

    m_online_replication_start_time_isSet = false;
    m_online_replication_start_time_isValid = false;

    m_recovery_points_isSet = false;
    m_recovery_points_isValid = false;

    m_replica_deletion_option_isSet = false;
    m_replica_deletion_option_isValid = false;

    m_replication_port_isSet = false;
    m_replication_port_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIHyperVReplicaPolicyDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHyperVReplicaPolicyDetails::fromJsonObject(QJsonObject json) {

    m_allowed_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_allowed_authentication_type, json[QString("allowedAuthenticationType")]);
    m_allowed_authentication_type_isSet = !json[QString("allowedAuthenticationType")].isNull() && m_allowed_authentication_type_isValid;

    m_application_consistent_snapshot_frequency_in_hours_isValid = ::OpenAPI::fromJsonValue(m_application_consistent_snapshot_frequency_in_hours, json[QString("applicationConsistentSnapshotFrequencyInHours")]);
    m_application_consistent_snapshot_frequency_in_hours_isSet = !json[QString("applicationConsistentSnapshotFrequencyInHours")].isNull() && m_application_consistent_snapshot_frequency_in_hours_isValid;

    m_compression_isValid = ::OpenAPI::fromJsonValue(m_compression, json[QString("compression")]);
    m_compression_isSet = !json[QString("compression")].isNull() && m_compression_isValid;

    m_initial_replication_method_isValid = ::OpenAPI::fromJsonValue(m_initial_replication_method, json[QString("initialReplicationMethod")]);
    m_initial_replication_method_isSet = !json[QString("initialReplicationMethod")].isNull() && m_initial_replication_method_isValid;

    m_offline_replication_export_path_isValid = ::OpenAPI::fromJsonValue(m_offline_replication_export_path, json[QString("offlineReplicationExportPath")]);
    m_offline_replication_export_path_isSet = !json[QString("offlineReplicationExportPath")].isNull() && m_offline_replication_export_path_isValid;

    m_offline_replication_import_path_isValid = ::OpenAPI::fromJsonValue(m_offline_replication_import_path, json[QString("offlineReplicationImportPath")]);
    m_offline_replication_import_path_isSet = !json[QString("offlineReplicationImportPath")].isNull() && m_offline_replication_import_path_isValid;

    m_online_replication_start_time_isValid = ::OpenAPI::fromJsonValue(m_online_replication_start_time, json[QString("onlineReplicationStartTime")]);
    m_online_replication_start_time_isSet = !json[QString("onlineReplicationStartTime")].isNull() && m_online_replication_start_time_isValid;

    m_recovery_points_isValid = ::OpenAPI::fromJsonValue(m_recovery_points, json[QString("recoveryPoints")]);
    m_recovery_points_isSet = !json[QString("recoveryPoints")].isNull() && m_recovery_points_isValid;

    m_replica_deletion_option_isValid = ::OpenAPI::fromJsonValue(m_replica_deletion_option, json[QString("replicaDeletionOption")]);
    m_replica_deletion_option_isSet = !json[QString("replicaDeletionOption")].isNull() && m_replica_deletion_option_isValid;

    m_replication_port_isValid = ::OpenAPI::fromJsonValue(m_replication_port, json[QString("replicationPort")]);
    m_replication_port_isSet = !json[QString("replicationPort")].isNull() && m_replication_port_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIHyperVReplicaPolicyDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHyperVReplicaPolicyDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_authentication_type_isSet) {
        obj.insert(QString("allowedAuthenticationType"), ::OpenAPI::toJsonValue(m_allowed_authentication_type));
    }
    if (m_application_consistent_snapshot_frequency_in_hours_isSet) {
        obj.insert(QString("applicationConsistentSnapshotFrequencyInHours"), ::OpenAPI::toJsonValue(m_application_consistent_snapshot_frequency_in_hours));
    }
    if (m_compression_isSet) {
        obj.insert(QString("compression"), ::OpenAPI::toJsonValue(m_compression));
    }
    if (m_initial_replication_method_isSet) {
        obj.insert(QString("initialReplicationMethod"), ::OpenAPI::toJsonValue(m_initial_replication_method));
    }
    if (m_offline_replication_export_path_isSet) {
        obj.insert(QString("offlineReplicationExportPath"), ::OpenAPI::toJsonValue(m_offline_replication_export_path));
    }
    if (m_offline_replication_import_path_isSet) {
        obj.insert(QString("offlineReplicationImportPath"), ::OpenAPI::toJsonValue(m_offline_replication_import_path));
    }
    if (m_online_replication_start_time_isSet) {
        obj.insert(QString("onlineReplicationStartTime"), ::OpenAPI::toJsonValue(m_online_replication_start_time));
    }
    if (m_recovery_points_isSet) {
        obj.insert(QString("recoveryPoints"), ::OpenAPI::toJsonValue(m_recovery_points));
    }
    if (m_replica_deletion_option_isSet) {
        obj.insert(QString("replicaDeletionOption"), ::OpenAPI::toJsonValue(m_replica_deletion_option));
    }
    if (m_replication_port_isSet) {
        obj.insert(QString("replicationPort"), ::OpenAPI::toJsonValue(m_replication_port));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

qint32 OAIHyperVReplicaPolicyDetails::getAllowedAuthenticationType() const {
    return m_allowed_authentication_type;
}
void OAIHyperVReplicaPolicyDetails::setAllowedAuthenticationType(const qint32 &allowed_authentication_type) {
    m_allowed_authentication_type = allowed_authentication_type;
    m_allowed_authentication_type_isSet = true;
}

bool OAIHyperVReplicaPolicyDetails::is_allowed_authentication_type_Set() const{
    return m_allowed_authentication_type_isSet;
}

bool OAIHyperVReplicaPolicyDetails::is_allowed_authentication_type_Valid() const{
    return m_allowed_authentication_type_isValid;
}

qint32 OAIHyperVReplicaPolicyDetails::getApplicationConsistentSnapshotFrequencyInHours() const {
    return m_application_consistent_snapshot_frequency_in_hours;
}
void OAIHyperVReplicaPolicyDetails::setApplicationConsistentSnapshotFrequencyInHours(const qint32 &application_consistent_snapshot_frequency_in_hours) {
    m_application_consistent_snapshot_frequency_in_hours = application_consistent_snapshot_frequency_in_hours;
    m_application_consistent_snapshot_frequency_in_hours_isSet = true;
}

bool OAIHyperVReplicaPolicyDetails::is_application_consistent_snapshot_frequency_in_hours_Set() const{
    return m_application_consistent_snapshot_frequency_in_hours_isSet;
}

bool OAIHyperVReplicaPolicyDetails::is_application_consistent_snapshot_frequency_in_hours_Valid() const{
    return m_application_consistent_snapshot_frequency_in_hours_isValid;
}

QString OAIHyperVReplicaPolicyDetails::getCompression() const {
    return m_compression;
}
void OAIHyperVReplicaPolicyDetails::setCompression(const QString &compression) {
    m_compression = compression;
    m_compression_isSet = true;
}

bool OAIHyperVReplicaPolicyDetails::is_compression_Set() const{
    return m_compression_isSet;
}

bool OAIHyperVReplicaPolicyDetails::is_compression_Valid() const{
    return m_compression_isValid;
}

QString OAIHyperVReplicaPolicyDetails::getInitialReplicationMethod() const {
    return m_initial_replication_method;
}
void OAIHyperVReplicaPolicyDetails::setInitialReplicationMethod(const QString &initial_replication_method) {
    m_initial_replication_method = initial_replication_method;
    m_initial_replication_method_isSet = true;
}

bool OAIHyperVReplicaPolicyDetails::is_initial_replication_method_Set() const{
    return m_initial_replication_method_isSet;
}

bool OAIHyperVReplicaPolicyDetails::is_initial_replication_method_Valid() const{
    return m_initial_replication_method_isValid;
}

QString OAIHyperVReplicaPolicyDetails::getOfflineReplicationExportPath() const {
    return m_offline_replication_export_path;
}
void OAIHyperVReplicaPolicyDetails::setOfflineReplicationExportPath(const QString &offline_replication_export_path) {
    m_offline_replication_export_path = offline_replication_export_path;
    m_offline_replication_export_path_isSet = true;
}

bool OAIHyperVReplicaPolicyDetails::is_offline_replication_export_path_Set() const{
    return m_offline_replication_export_path_isSet;
}

bool OAIHyperVReplicaPolicyDetails::is_offline_replication_export_path_Valid() const{
    return m_offline_replication_export_path_isValid;
}

QString OAIHyperVReplicaPolicyDetails::getOfflineReplicationImportPath() const {
    return m_offline_replication_import_path;
}
void OAIHyperVReplicaPolicyDetails::setOfflineReplicationImportPath(const QString &offline_replication_import_path) {
    m_offline_replication_import_path = offline_replication_import_path;
    m_offline_replication_import_path_isSet = true;
}

bool OAIHyperVReplicaPolicyDetails::is_offline_replication_import_path_Set() const{
    return m_offline_replication_import_path_isSet;
}

bool OAIHyperVReplicaPolicyDetails::is_offline_replication_import_path_Valid() const{
    return m_offline_replication_import_path_isValid;
}

QString OAIHyperVReplicaPolicyDetails::getOnlineReplicationStartTime() const {
    return m_online_replication_start_time;
}
void OAIHyperVReplicaPolicyDetails::setOnlineReplicationStartTime(const QString &online_replication_start_time) {
    m_online_replication_start_time = online_replication_start_time;
    m_online_replication_start_time_isSet = true;
}

bool OAIHyperVReplicaPolicyDetails::is_online_replication_start_time_Set() const{
    return m_online_replication_start_time_isSet;
}

bool OAIHyperVReplicaPolicyDetails::is_online_replication_start_time_Valid() const{
    return m_online_replication_start_time_isValid;
}

qint32 OAIHyperVReplicaPolicyDetails::getRecoveryPoints() const {
    return m_recovery_points;
}
void OAIHyperVReplicaPolicyDetails::setRecoveryPoints(const qint32 &recovery_points) {
    m_recovery_points = recovery_points;
    m_recovery_points_isSet = true;
}

bool OAIHyperVReplicaPolicyDetails::is_recovery_points_Set() const{
    return m_recovery_points_isSet;
}

bool OAIHyperVReplicaPolicyDetails::is_recovery_points_Valid() const{
    return m_recovery_points_isValid;
}

QString OAIHyperVReplicaPolicyDetails::getReplicaDeletionOption() const {
    return m_replica_deletion_option;
}
void OAIHyperVReplicaPolicyDetails::setReplicaDeletionOption(const QString &replica_deletion_option) {
    m_replica_deletion_option = replica_deletion_option;
    m_replica_deletion_option_isSet = true;
}

bool OAIHyperVReplicaPolicyDetails::is_replica_deletion_option_Set() const{
    return m_replica_deletion_option_isSet;
}

bool OAIHyperVReplicaPolicyDetails::is_replica_deletion_option_Valid() const{
    return m_replica_deletion_option_isValid;
}

qint32 OAIHyperVReplicaPolicyDetails::getReplicationPort() const {
    return m_replication_port;
}
void OAIHyperVReplicaPolicyDetails::setReplicationPort(const qint32 &replication_port) {
    m_replication_port = replication_port;
    m_replication_port_isSet = true;
}

bool OAIHyperVReplicaPolicyDetails::is_replication_port_Set() const{
    return m_replication_port_isSet;
}

bool OAIHyperVReplicaPolicyDetails::is_replication_port_Valid() const{
    return m_replication_port_isValid;
}

QString OAIHyperVReplicaPolicyDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIHyperVReplicaPolicyDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIHyperVReplicaPolicyDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIHyperVReplicaPolicyDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIHyperVReplicaPolicyDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_authentication_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_consistent_snapshot_frequency_in_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_replication_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_replication_export_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_replication_import_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_replication_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_deletion_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHyperVReplicaPolicyDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
