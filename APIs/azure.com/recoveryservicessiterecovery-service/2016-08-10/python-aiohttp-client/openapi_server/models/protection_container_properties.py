# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protection_container_fabric_specific_details import ProtectionContainerFabricSpecificDetails
from openapi_server import util


class ProtectionContainerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fabric_friendly_name: str=None, fabric_specific_details: ProtectionContainerFabricSpecificDetails=None, fabric_type: str=None, friendly_name: str=None, pairing_status: str=None, protected_item_count: int=None, role: str=None):
        """ProtectionContainerProperties - a model defined in OpenAPI

        :param fabric_friendly_name: The fabric_friendly_name of this ProtectionContainerProperties.
        :param fabric_specific_details: The fabric_specific_details of this ProtectionContainerProperties.
        :param fabric_type: The fabric_type of this ProtectionContainerProperties.
        :param friendly_name: The friendly_name of this ProtectionContainerProperties.
        :param pairing_status: The pairing_status of this ProtectionContainerProperties.
        :param protected_item_count: The protected_item_count of this ProtectionContainerProperties.
        :param role: The role of this ProtectionContainerProperties.
        """
        self.openapi_types = {
            'fabric_friendly_name': str,
            'fabric_specific_details': ProtectionContainerFabricSpecificDetails,
            'fabric_type': str,
            'friendly_name': str,
            'pairing_status': str,
            'protected_item_count': int,
            'role': str
        }

        self.attribute_map = {
            'fabric_friendly_name': 'fabricFriendlyName',
            'fabric_specific_details': 'fabricSpecificDetails',
            'fabric_type': 'fabricType',
            'friendly_name': 'friendlyName',
            'pairing_status': 'pairingStatus',
            'protected_item_count': 'protectedItemCount',
            'role': 'role'
        }

        self._fabric_friendly_name = fabric_friendly_name
        self._fabric_specific_details = fabric_specific_details
        self._fabric_type = fabric_type
        self._friendly_name = friendly_name
        self._pairing_status = pairing_status
        self._protected_item_count = protected_item_count
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectionContainerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProtectionContainerProperties of this ProtectionContainerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fabric_friendly_name(self):
        """Gets the fabric_friendly_name of this ProtectionContainerProperties.

        Fabric friendly name.

        :return: The fabric_friendly_name of this ProtectionContainerProperties.
        :rtype: str
        """
        return self._fabric_friendly_name

    @fabric_friendly_name.setter
    def fabric_friendly_name(self, fabric_friendly_name):
        """Sets the fabric_friendly_name of this ProtectionContainerProperties.

        Fabric friendly name.

        :param fabric_friendly_name: The fabric_friendly_name of this ProtectionContainerProperties.
        :type fabric_friendly_name: str
        """

        self._fabric_friendly_name = fabric_friendly_name

    @property
    def fabric_specific_details(self):
        """Gets the fabric_specific_details of this ProtectionContainerProperties.


        :return: The fabric_specific_details of this ProtectionContainerProperties.
        :rtype: ProtectionContainerFabricSpecificDetails
        """
        return self._fabric_specific_details

    @fabric_specific_details.setter
    def fabric_specific_details(self, fabric_specific_details):
        """Sets the fabric_specific_details of this ProtectionContainerProperties.


        :param fabric_specific_details: The fabric_specific_details of this ProtectionContainerProperties.
        :type fabric_specific_details: ProtectionContainerFabricSpecificDetails
        """

        self._fabric_specific_details = fabric_specific_details

    @property
    def fabric_type(self):
        """Gets the fabric_type of this ProtectionContainerProperties.

        The fabric type.

        :return: The fabric_type of this ProtectionContainerProperties.
        :rtype: str
        """
        return self._fabric_type

    @fabric_type.setter
    def fabric_type(self, fabric_type):
        """Sets the fabric_type of this ProtectionContainerProperties.

        The fabric type.

        :param fabric_type: The fabric_type of this ProtectionContainerProperties.
        :type fabric_type: str
        """

        self._fabric_type = fabric_type

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ProtectionContainerProperties.

        The name.

        :return: The friendly_name of this ProtectionContainerProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ProtectionContainerProperties.

        The name.

        :param friendly_name: The friendly_name of this ProtectionContainerProperties.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def pairing_status(self):
        """Gets the pairing_status of this ProtectionContainerProperties.

        The pairing status of this cloud.

        :return: The pairing_status of this ProtectionContainerProperties.
        :rtype: str
        """
        return self._pairing_status

    @pairing_status.setter
    def pairing_status(self, pairing_status):
        """Sets the pairing_status of this ProtectionContainerProperties.

        The pairing status of this cloud.

        :param pairing_status: The pairing_status of this ProtectionContainerProperties.
        :type pairing_status: str
        """

        self._pairing_status = pairing_status

    @property
    def protected_item_count(self):
        """Gets the protected_item_count of this ProtectionContainerProperties.

        Number of protected PEs

        :return: The protected_item_count of this ProtectionContainerProperties.
        :rtype: int
        """
        return self._protected_item_count

    @protected_item_count.setter
    def protected_item_count(self, protected_item_count):
        """Sets the protected_item_count of this ProtectionContainerProperties.

        Number of protected PEs

        :param protected_item_count: The protected_item_count of this ProtectionContainerProperties.
        :type protected_item_count: int
        """

        self._protected_item_count = protected_item_count

    @property
    def role(self):
        """Gets the role of this ProtectionContainerProperties.

        The role of this cloud.

        :return: The role of this ProtectionContainerProperties.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ProtectionContainerProperties.

        The role of this cloud.

        :param role: The role of this ProtectionContainerProperties.
        :type role: str
        """

        self._role = role
