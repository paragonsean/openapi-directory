# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VCenterProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discovery_status: str=None, fabric_arm_resource_name: str=None, friendly_name: str=None, infrastructure_id: str=None, internal_id: str=None, ip_address: str=None, last_heartbeat: datetime=None, port: str=None, process_server_id: str=None, run_as_account_id: str=None):
        """VCenterProperties - a model defined in OpenAPI

        :param discovery_status: The discovery_status of this VCenterProperties.
        :param fabric_arm_resource_name: The fabric_arm_resource_name of this VCenterProperties.
        :param friendly_name: The friendly_name of this VCenterProperties.
        :param infrastructure_id: The infrastructure_id of this VCenterProperties.
        :param internal_id: The internal_id of this VCenterProperties.
        :param ip_address: The ip_address of this VCenterProperties.
        :param last_heartbeat: The last_heartbeat of this VCenterProperties.
        :param port: The port of this VCenterProperties.
        :param process_server_id: The process_server_id of this VCenterProperties.
        :param run_as_account_id: The run_as_account_id of this VCenterProperties.
        """
        self.openapi_types = {
            'discovery_status': str,
            'fabric_arm_resource_name': str,
            'friendly_name': str,
            'infrastructure_id': str,
            'internal_id': str,
            'ip_address': str,
            'last_heartbeat': datetime,
            'port': str,
            'process_server_id': str,
            'run_as_account_id': str
        }

        self.attribute_map = {
            'discovery_status': 'discoveryStatus',
            'fabric_arm_resource_name': 'fabricArmResourceName',
            'friendly_name': 'friendlyName',
            'infrastructure_id': 'infrastructureId',
            'internal_id': 'internalId',
            'ip_address': 'ipAddress',
            'last_heartbeat': 'lastHeartbeat',
            'port': 'port',
            'process_server_id': 'processServerId',
            'run_as_account_id': 'runAsAccountId'
        }

        self._discovery_status = discovery_status
        self._fabric_arm_resource_name = fabric_arm_resource_name
        self._friendly_name = friendly_name
        self._infrastructure_id = infrastructure_id
        self._internal_id = internal_id
        self._ip_address = ip_address
        self._last_heartbeat = last_heartbeat
        self._port = port
        self._process_server_id = process_server_id
        self._run_as_account_id = run_as_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VCenterProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VCenterProperties of this VCenterProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discovery_status(self):
        """Gets the discovery_status of this VCenterProperties.

        The VCenter discovery status.

        :return: The discovery_status of this VCenterProperties.
        :rtype: str
        """
        return self._discovery_status

    @discovery_status.setter
    def discovery_status(self, discovery_status):
        """Sets the discovery_status of this VCenterProperties.

        The VCenter discovery status.

        :param discovery_status: The discovery_status of this VCenterProperties.
        :type discovery_status: str
        """

        self._discovery_status = discovery_status

    @property
    def fabric_arm_resource_name(self):
        """Gets the fabric_arm_resource_name of this VCenterProperties.

        The ARM resource name of the fabric containing this VCenter.

        :return: The fabric_arm_resource_name of this VCenterProperties.
        :rtype: str
        """
        return self._fabric_arm_resource_name

    @fabric_arm_resource_name.setter
    def fabric_arm_resource_name(self, fabric_arm_resource_name):
        """Sets the fabric_arm_resource_name of this VCenterProperties.

        The ARM resource name of the fabric containing this VCenter.

        :param fabric_arm_resource_name: The fabric_arm_resource_name of this VCenterProperties.
        :type fabric_arm_resource_name: str
        """

        self._fabric_arm_resource_name = fabric_arm_resource_name

    @property
    def friendly_name(self):
        """Gets the friendly_name of this VCenterProperties.

        Friendly name of the vCenter.

        :return: The friendly_name of this VCenterProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this VCenterProperties.

        Friendly name of the vCenter.

        :param friendly_name: The friendly_name of this VCenterProperties.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def infrastructure_id(self):
        """Gets the infrastructure_id of this VCenterProperties.

        The infrastructure Id of vCenter.

        :return: The infrastructure_id of this VCenterProperties.
        :rtype: str
        """
        return self._infrastructure_id

    @infrastructure_id.setter
    def infrastructure_id(self, infrastructure_id):
        """Sets the infrastructure_id of this VCenterProperties.

        The infrastructure Id of vCenter.

        :param infrastructure_id: The infrastructure_id of this VCenterProperties.
        :type infrastructure_id: str
        """

        self._infrastructure_id = infrastructure_id

    @property
    def internal_id(self):
        """Gets the internal_id of this VCenterProperties.

        VCenter internal ID.

        :return: The internal_id of this VCenterProperties.
        :rtype: str
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this VCenterProperties.

        VCenter internal ID.

        :param internal_id: The internal_id of this VCenterProperties.
        :type internal_id: str
        """

        self._internal_id = internal_id

    @property
    def ip_address(self):
        """Gets the ip_address of this VCenterProperties.

        The IP address of the vCenter.

        :return: The ip_address of this VCenterProperties.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this VCenterProperties.

        The IP address of the vCenter.

        :param ip_address: The ip_address of this VCenterProperties.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def last_heartbeat(self):
        """Gets the last_heartbeat of this VCenterProperties.

        The time when the last heartbeat was received by vCenter.

        :return: The last_heartbeat of this VCenterProperties.
        :rtype: datetime
        """
        return self._last_heartbeat

    @last_heartbeat.setter
    def last_heartbeat(self, last_heartbeat):
        """Sets the last_heartbeat of this VCenterProperties.

        The time when the last heartbeat was received by vCenter.

        :param last_heartbeat: The last_heartbeat of this VCenterProperties.
        :type last_heartbeat: datetime
        """

        self._last_heartbeat = last_heartbeat

    @property
    def port(self):
        """Gets the port of this VCenterProperties.

        The port number for discovery.

        :return: The port of this VCenterProperties.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this VCenterProperties.

        The port number for discovery.

        :param port: The port of this VCenterProperties.
        :type port: str
        """

        self._port = port

    @property
    def process_server_id(self):
        """Gets the process_server_id of this VCenterProperties.

        The process server Id.

        :return: The process_server_id of this VCenterProperties.
        :rtype: str
        """
        return self._process_server_id

    @process_server_id.setter
    def process_server_id(self, process_server_id):
        """Sets the process_server_id of this VCenterProperties.

        The process server Id.

        :param process_server_id: The process_server_id of this VCenterProperties.
        :type process_server_id: str
        """

        self._process_server_id = process_server_id

    @property
    def run_as_account_id(self):
        """Gets the run_as_account_id of this VCenterProperties.

        The account Id which has privileges to discover the vCenter.

        :return: The run_as_account_id of this VCenterProperties.
        :rtype: str
        """
        return self._run_as_account_id

    @run_as_account_id.setter
    def run_as_account_id(self, run_as_account_id):
        """Sets the run_as_account_id of this VCenterProperties.

        The account Id which has privileges to discover the vCenter.

        :param run_as_account_id: The run_as_account_id of this VCenterProperties.
        :type run_as_account_id: str
        """

        self._run_as_account_id = run_as_account_id
