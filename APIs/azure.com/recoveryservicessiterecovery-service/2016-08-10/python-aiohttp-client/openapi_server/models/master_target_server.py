# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_store import DataStore
from openapi_server.models.health_error import HealthError
from openapi_server.models.retention_volume import RetentionVolume
from openapi_server import util


class MasterTargetServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_version: str=None, data_stores: List[DataStore]=None, disk_count: int=None, id: str=None, ip_address: str=None, last_heartbeat: datetime=None, name: str=None, os_type: str=None, os_version: str=None, retention_volumes: List[RetentionVolume]=None, validation_errors: List[HealthError]=None, version_status: str=None):
        """MasterTargetServer - a model defined in OpenAPI

        :param agent_version: The agent_version of this MasterTargetServer.
        :param data_stores: The data_stores of this MasterTargetServer.
        :param disk_count: The disk_count of this MasterTargetServer.
        :param id: The id of this MasterTargetServer.
        :param ip_address: The ip_address of this MasterTargetServer.
        :param last_heartbeat: The last_heartbeat of this MasterTargetServer.
        :param name: The name of this MasterTargetServer.
        :param os_type: The os_type of this MasterTargetServer.
        :param os_version: The os_version of this MasterTargetServer.
        :param retention_volumes: The retention_volumes of this MasterTargetServer.
        :param validation_errors: The validation_errors of this MasterTargetServer.
        :param version_status: The version_status of this MasterTargetServer.
        """
        self.openapi_types = {
            'agent_version': str,
            'data_stores': List[DataStore],
            'disk_count': int,
            'id': str,
            'ip_address': str,
            'last_heartbeat': datetime,
            'name': str,
            'os_type': str,
            'os_version': str,
            'retention_volumes': List[RetentionVolume],
            'validation_errors': List[HealthError],
            'version_status': str
        }

        self.attribute_map = {
            'agent_version': 'agentVersion',
            'data_stores': 'dataStores',
            'disk_count': 'diskCount',
            'id': 'id',
            'ip_address': 'ipAddress',
            'last_heartbeat': 'lastHeartbeat',
            'name': 'name',
            'os_type': 'osType',
            'os_version': 'osVersion',
            'retention_volumes': 'retentionVolumes',
            'validation_errors': 'validationErrors',
            'version_status': 'versionStatus'
        }

        self._agent_version = agent_version
        self._data_stores = data_stores
        self._disk_count = disk_count
        self._id = id
        self._ip_address = ip_address
        self._last_heartbeat = last_heartbeat
        self._name = name
        self._os_type = os_type
        self._os_version = os_version
        self._retention_volumes = retention_volumes
        self._validation_errors = validation_errors
        self._version_status = version_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MasterTargetServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MasterTargetServer of this MasterTargetServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_version(self):
        """Gets the agent_version of this MasterTargetServer.

        The version of the scout component on the server.

        :return: The agent_version of this MasterTargetServer.
        :rtype: str
        """
        return self._agent_version

    @agent_version.setter
    def agent_version(self, agent_version):
        """Sets the agent_version of this MasterTargetServer.

        The version of the scout component on the server.

        :param agent_version: The agent_version of this MasterTargetServer.
        :type agent_version: str
        """

        self._agent_version = agent_version

    @property
    def data_stores(self):
        """Gets the data_stores of this MasterTargetServer.

        The list of data stores in the fabric.

        :return: The data_stores of this MasterTargetServer.
        :rtype: List[DataStore]
        """
        return self._data_stores

    @data_stores.setter
    def data_stores(self, data_stores):
        """Sets the data_stores of this MasterTargetServer.

        The list of data stores in the fabric.

        :param data_stores: The data_stores of this MasterTargetServer.
        :type data_stores: List[DataStore]
        """

        self._data_stores = data_stores

    @property
    def disk_count(self):
        """Gets the disk_count of this MasterTargetServer.

        Disk count of the master target.

        :return: The disk_count of this MasterTargetServer.
        :rtype: int
        """
        return self._disk_count

    @disk_count.setter
    def disk_count(self, disk_count):
        """Sets the disk_count of this MasterTargetServer.

        Disk count of the master target.

        :param disk_count: The disk_count of this MasterTargetServer.
        :type disk_count: int
        """

        self._disk_count = disk_count

    @property
    def id(self):
        """Gets the id of this MasterTargetServer.

        The server Id.

        :return: The id of this MasterTargetServer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MasterTargetServer.

        The server Id.

        :param id: The id of this MasterTargetServer.
        :type id: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this MasterTargetServer.

        The IP address of the server.

        :return: The ip_address of this MasterTargetServer.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this MasterTargetServer.

        The IP address of the server.

        :param ip_address: The ip_address of this MasterTargetServer.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def last_heartbeat(self):
        """Gets the last_heartbeat of this MasterTargetServer.

        The last heartbeat received from the server.

        :return: The last_heartbeat of this MasterTargetServer.
        :rtype: datetime
        """
        return self._last_heartbeat

    @last_heartbeat.setter
    def last_heartbeat(self, last_heartbeat):
        """Sets the last_heartbeat of this MasterTargetServer.

        The last heartbeat received from the server.

        :param last_heartbeat: The last_heartbeat of this MasterTargetServer.
        :type last_heartbeat: datetime
        """

        self._last_heartbeat = last_heartbeat

    @property
    def name(self):
        """Gets the name of this MasterTargetServer.

        The server name.

        :return: The name of this MasterTargetServer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MasterTargetServer.

        The server name.

        :param name: The name of this MasterTargetServer.
        :type name: str
        """

        self._name = name

    @property
    def os_type(self):
        """Gets the os_type of this MasterTargetServer.

        The OS type of the server.

        :return: The os_type of this MasterTargetServer.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this MasterTargetServer.

        The OS type of the server.

        :param os_type: The os_type of this MasterTargetServer.
        :type os_type: str
        """

        self._os_type = os_type

    @property
    def os_version(self):
        """Gets the os_version of this MasterTargetServer.

        OS Version of the master target.

        :return: The os_version of this MasterTargetServer.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this MasterTargetServer.

        OS Version of the master target.

        :param os_version: The os_version of this MasterTargetServer.
        :type os_version: str
        """

        self._os_version = os_version

    @property
    def retention_volumes(self):
        """Gets the retention_volumes of this MasterTargetServer.

        The retention volumes of Master target Server.

        :return: The retention_volumes of this MasterTargetServer.
        :rtype: List[RetentionVolume]
        """
        return self._retention_volumes

    @retention_volumes.setter
    def retention_volumes(self, retention_volumes):
        """Sets the retention_volumes of this MasterTargetServer.

        The retention volumes of Master target Server.

        :param retention_volumes: The retention_volumes of this MasterTargetServer.
        :type retention_volumes: List[RetentionVolume]
        """

        self._retention_volumes = retention_volumes

    @property
    def validation_errors(self):
        """Gets the validation_errors of this MasterTargetServer.

        Validation errors.

        :return: The validation_errors of this MasterTargetServer.
        :rtype: List[HealthError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this MasterTargetServer.

        Validation errors.

        :param validation_errors: The validation_errors of this MasterTargetServer.
        :type validation_errors: List[HealthError]
        """

        self._validation_errors = validation_errors

    @property
    def version_status(self):
        """Gets the version_status of this MasterTargetServer.

        Version status

        :return: The version_status of this MasterTargetServer.
        :rtype: str
        """
        return self._version_status

    @version_status.setter
    def version_status(self, version_status):
        """Sets the version_status of this MasterTargetServer.

        Version status

        :param version_status: The version_status of this MasterTargetServer.
        :type version_status: str
        """

        self._version_status = version_status
