# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdentityInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aad_authority: str=None, application_id: str=None, audience: str=None, certificate_thumbprint: str=None, identity_provider_type: str=None, object_id: str=None, tenant_id: str=None):
        """IdentityInformation - a model defined in OpenAPI

        :param aad_authority: The aad_authority of this IdentityInformation.
        :param application_id: The application_id of this IdentityInformation.
        :param audience: The audience of this IdentityInformation.
        :param certificate_thumbprint: The certificate_thumbprint of this IdentityInformation.
        :param identity_provider_type: The identity_provider_type of this IdentityInformation.
        :param object_id: The object_id of this IdentityInformation.
        :param tenant_id: The tenant_id of this IdentityInformation.
        """
        self.openapi_types = {
            'aad_authority': str,
            'application_id': str,
            'audience': str,
            'certificate_thumbprint': str,
            'identity_provider_type': str,
            'object_id': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'aad_authority': 'aadAuthority',
            'application_id': 'applicationId',
            'audience': 'audience',
            'certificate_thumbprint': 'certificateThumbprint',
            'identity_provider_type': 'identityProviderType',
            'object_id': 'objectId',
            'tenant_id': 'tenantId'
        }

        self._aad_authority = aad_authority
        self._application_id = application_id
        self._audience = audience
        self._certificate_thumbprint = certificate_thumbprint
        self._identity_provider_type = identity_provider_type
        self._object_id = object_id
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentityInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentityInformation of this IdentityInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aad_authority(self):
        """Gets the aad_authority of this IdentityInformation.

        The base authority for Azure Active Directory authentication.

        :return: The aad_authority of this IdentityInformation.
        :rtype: str
        """
        return self._aad_authority

    @aad_authority.setter
    def aad_authority(self, aad_authority):
        """Sets the aad_authority of this IdentityInformation.

        The base authority for Azure Active Directory authentication.

        :param aad_authority: The aad_authority of this IdentityInformation.
        :type aad_authority: str
        """

        self._aad_authority = aad_authority

    @property
    def application_id(self):
        """Gets the application_id of this IdentityInformation.

        The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.

        :return: The application_id of this IdentityInformation.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this IdentityInformation.

        The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.

        :param application_id: The application_id of this IdentityInformation.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def audience(self):
        """Gets the audience of this IdentityInformation.

        The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.

        :return: The audience of this IdentityInformation.
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this IdentityInformation.

        The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.

        :param audience: The audience of this IdentityInformation.
        :type audience: str
        """

        self._audience = audience

    @property
    def certificate_thumbprint(self):
        """Gets the certificate_thumbprint of this IdentityInformation.

        The certificate thumbprint. Applicable only if IdentityProviderType is RecoveryServicesActiveDirectory.

        :return: The certificate_thumbprint of this IdentityInformation.
        :rtype: str
        """
        return self._certificate_thumbprint

    @certificate_thumbprint.setter
    def certificate_thumbprint(self, certificate_thumbprint):
        """Sets the certificate_thumbprint of this IdentityInformation.

        The certificate thumbprint. Applicable only if IdentityProviderType is RecoveryServicesActiveDirectory.

        :param certificate_thumbprint: The certificate_thumbprint of this IdentityInformation.
        :type certificate_thumbprint: str
        """

        self._certificate_thumbprint = certificate_thumbprint

    @property
    def identity_provider_type(self):
        """Gets the identity_provider_type of this IdentityInformation.

        The identity provider type. Value is the ToString() of a IdentityProviderType value.

        :return: The identity_provider_type of this IdentityInformation.
        :rtype: str
        """
        return self._identity_provider_type

    @identity_provider_type.setter
    def identity_provider_type(self, identity_provider_type):
        """Sets the identity_provider_type of this IdentityInformation.

        The identity provider type. Value is the ToString() of a IdentityProviderType value.

        :param identity_provider_type: The identity_provider_type of this IdentityInformation.
        :type identity_provider_type: str
        """
        allowed_values = ["RecoveryServicesActiveDirectory", "CustomerActiveDirectory"]  # noqa: E501
        if identity_provider_type not in allowed_values:
            raise ValueError(
                "Invalid value for `identity_provider_type` ({0}), must be one of {1}"
                .format(identity_provider_type, allowed_values)
            )

        self._identity_provider_type = identity_provider_type

    @property
    def object_id(self):
        """Gets the object_id of this IdentityInformation.

        The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.

        :return: The object_id of this IdentityInformation.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this IdentityInformation.

        The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.

        :param object_id: The object_id of this IdentityInformation.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this IdentityInformation.

        The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.

        :return: The tenant_id of this IdentityInformation.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this IdentityInformation.

        The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.

        :param tenant_id: The tenant_id of this IdentityInformation.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
