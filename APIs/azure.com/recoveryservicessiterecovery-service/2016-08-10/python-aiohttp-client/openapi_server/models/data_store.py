# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataStore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: str=None, free_space: str=None, symbolic_name: str=None, type: str=None, uuid: str=None):
        """DataStore - a model defined in OpenAPI

        :param capacity: The capacity of this DataStore.
        :param free_space: The free_space of this DataStore.
        :param symbolic_name: The symbolic_name of this DataStore.
        :param type: The type of this DataStore.
        :param uuid: The uuid of this DataStore.
        """
        self.openapi_types = {
            'capacity': str,
            'free_space': str,
            'symbolic_name': str,
            'type': str,
            'uuid': str
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'free_space': 'freeSpace',
            'symbolic_name': 'symbolicName',
            'type': 'type',
            'uuid': 'uuid'
        }

        self._capacity = capacity
        self._free_space = free_space
        self._symbolic_name = symbolic_name
        self._type = type
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataStore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataStore of this DataStore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this DataStore.

        The capacity of data store in GBs.

        :return: The capacity of this DataStore.
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this DataStore.

        The capacity of data store in GBs.

        :param capacity: The capacity of this DataStore.
        :type capacity: str
        """

        self._capacity = capacity

    @property
    def free_space(self):
        """Gets the free_space of this DataStore.

        The free space of data store in GBs.

        :return: The free_space of this DataStore.
        :rtype: str
        """
        return self._free_space

    @free_space.setter
    def free_space(self, free_space):
        """Sets the free_space of this DataStore.

        The free space of data store in GBs.

        :param free_space: The free_space of this DataStore.
        :type free_space: str
        """

        self._free_space = free_space

    @property
    def symbolic_name(self):
        """Gets the symbolic_name of this DataStore.

        The symbolic name of data store.

        :return: The symbolic_name of this DataStore.
        :rtype: str
        """
        return self._symbolic_name

    @symbolic_name.setter
    def symbolic_name(self, symbolic_name):
        """Sets the symbolic_name of this DataStore.

        The symbolic name of data store.

        :param symbolic_name: The symbolic_name of this DataStore.
        :type symbolic_name: str
        """

        self._symbolic_name = symbolic_name

    @property
    def type(self):
        """Gets the type of this DataStore.

        The type of data store.

        :return: The type of this DataStore.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataStore.

        The type of data store.

        :param type: The type of this DataStore.
        :type type: str
        """

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this DataStore.

        The uuid of data store.

        :return: The uuid of this DataStore.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DataStore.

        The uuid of data store.

        :param uuid: The uuid of this DataStore.
        :type uuid: str
        """

        self._uuid = uuid
