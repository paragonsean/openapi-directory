# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HealthErrorSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affected_resource_correlation_ids: List[str]=None, affected_resource_subtype: str=None, affected_resource_type: str=None, category: str=None, severity: str=None, summary_code: str=None, summary_message: str=None):
        """HealthErrorSummary - a model defined in OpenAPI

        :param affected_resource_correlation_ids: The affected_resource_correlation_ids of this HealthErrorSummary.
        :param affected_resource_subtype: The affected_resource_subtype of this HealthErrorSummary.
        :param affected_resource_type: The affected_resource_type of this HealthErrorSummary.
        :param category: The category of this HealthErrorSummary.
        :param severity: The severity of this HealthErrorSummary.
        :param summary_code: The summary_code of this HealthErrorSummary.
        :param summary_message: The summary_message of this HealthErrorSummary.
        """
        self.openapi_types = {
            'affected_resource_correlation_ids': List[str],
            'affected_resource_subtype': str,
            'affected_resource_type': str,
            'category': str,
            'severity': str,
            'summary_code': str,
            'summary_message': str
        }

        self.attribute_map = {
            'affected_resource_correlation_ids': 'affectedResourceCorrelationIds',
            'affected_resource_subtype': 'affectedResourceSubtype',
            'affected_resource_type': 'affectedResourceType',
            'category': 'category',
            'severity': 'severity',
            'summary_code': 'summaryCode',
            'summary_message': 'summaryMessage'
        }

        self._affected_resource_correlation_ids = affected_resource_correlation_ids
        self._affected_resource_subtype = affected_resource_subtype
        self._affected_resource_type = affected_resource_type
        self._category = category
        self._severity = severity
        self._summary_code = summary_code
        self._summary_message = summary_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthErrorSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthErrorSummary of this HealthErrorSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affected_resource_correlation_ids(self):
        """Gets the affected_resource_correlation_ids of this HealthErrorSummary.

        The list of affected resource correlation Ids. This can be used to uniquely identify the count of items affected by a specific category and severity as well as count of item affected by an specific issue.

        :return: The affected_resource_correlation_ids of this HealthErrorSummary.
        :rtype: List[str]
        """
        return self._affected_resource_correlation_ids

    @affected_resource_correlation_ids.setter
    def affected_resource_correlation_ids(self, affected_resource_correlation_ids):
        """Sets the affected_resource_correlation_ids of this HealthErrorSummary.

        The list of affected resource correlation Ids. This can be used to uniquely identify the count of items affected by a specific category and severity as well as count of item affected by an specific issue.

        :param affected_resource_correlation_ids: The affected_resource_correlation_ids of this HealthErrorSummary.
        :type affected_resource_correlation_ids: List[str]
        """

        self._affected_resource_correlation_ids = affected_resource_correlation_ids

    @property
    def affected_resource_subtype(self):
        """Gets the affected_resource_subtype of this HealthErrorSummary.

        The sub type of any subcomponent within the ARM resource that this might be applicable. Value remains null if not applicable.

        :return: The affected_resource_subtype of this HealthErrorSummary.
        :rtype: str
        """
        return self._affected_resource_subtype

    @affected_resource_subtype.setter
    def affected_resource_subtype(self, affected_resource_subtype):
        """Sets the affected_resource_subtype of this HealthErrorSummary.

        The sub type of any subcomponent within the ARM resource that this might be applicable. Value remains null if not applicable.

        :param affected_resource_subtype: The affected_resource_subtype of this HealthErrorSummary.
        :type affected_resource_subtype: str
        """

        self._affected_resource_subtype = affected_resource_subtype

    @property
    def affected_resource_type(self):
        """Gets the affected_resource_type of this HealthErrorSummary.

        The type of affected ARM resource.

        :return: The affected_resource_type of this HealthErrorSummary.
        :rtype: str
        """
        return self._affected_resource_type

    @affected_resource_type.setter
    def affected_resource_type(self, affected_resource_type):
        """Sets the affected_resource_type of this HealthErrorSummary.

        The type of affected ARM resource.

        :param affected_resource_type: The affected_resource_type of this HealthErrorSummary.
        :type affected_resource_type: str
        """

        self._affected_resource_type = affected_resource_type

    @property
    def category(self):
        """Gets the category of this HealthErrorSummary.

        The category of the health error.

        :return: The category of this HealthErrorSummary.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this HealthErrorSummary.

        The category of the health error.

        :param category: The category of this HealthErrorSummary.
        :type category: str
        """
        allowed_values = ["Replication", "TestFailover", "Configuration"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def severity(self):
        """Gets the severity of this HealthErrorSummary.

        Severity of error.

        :return: The severity of this HealthErrorSummary.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this HealthErrorSummary.

        Severity of error.

        :param severity: The severity of this HealthErrorSummary.
        :type severity: str
        """
        allowed_values = ["NONE", "Warning", "Error", "Info"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def summary_code(self):
        """Gets the summary_code of this HealthErrorSummary.

        The code of the health error.

        :return: The summary_code of this HealthErrorSummary.
        :rtype: str
        """
        return self._summary_code

    @summary_code.setter
    def summary_code(self, summary_code):
        """Sets the summary_code of this HealthErrorSummary.

        The code of the health error.

        :param summary_code: The summary_code of this HealthErrorSummary.
        :type summary_code: str
        """

        self._summary_code = summary_code

    @property
    def summary_message(self):
        """Gets the summary_message of this HealthErrorSummary.

        The summary message of the health error.

        :return: The summary_message of this HealthErrorSummary.
        :rtype: str
        """
        return self._summary_message

    @summary_message.setter
    def summary_message(self, summary_message):
        """Sets the summary_message of this HealthErrorSummary.

        The summary message of the health error.

        :param summary_message: The summary_message of this HealthErrorSummary.
        :type summary_message: str
        """

        self._summary_message = summary_message
