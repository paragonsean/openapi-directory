# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recovery_plan_action_details import RecoveryPlanActionDetails
from openapi_server import util


class RecoveryPlanAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_name: str=None, custom_details: RecoveryPlanActionDetails=None, failover_directions: List[str]=None, failover_types: List[str]=None):
        """RecoveryPlanAction - a model defined in OpenAPI

        :param action_name: The action_name of this RecoveryPlanAction.
        :param custom_details: The custom_details of this RecoveryPlanAction.
        :param failover_directions: The failover_directions of this RecoveryPlanAction.
        :param failover_types: The failover_types of this RecoveryPlanAction.
        """
        self.openapi_types = {
            'action_name': str,
            'custom_details': RecoveryPlanActionDetails,
            'failover_directions': List[str],
            'failover_types': List[str]
        }

        self.attribute_map = {
            'action_name': 'actionName',
            'custom_details': 'customDetails',
            'failover_directions': 'failoverDirections',
            'failover_types': 'failoverTypes'
        }

        self._action_name = action_name
        self._custom_details = custom_details
        self._failover_directions = failover_directions
        self._failover_types = failover_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecoveryPlanAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecoveryPlanAction of this RecoveryPlanAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_name(self):
        """Gets the action_name of this RecoveryPlanAction.

        The action name.

        :return: The action_name of this RecoveryPlanAction.
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this RecoveryPlanAction.

        The action name.

        :param action_name: The action_name of this RecoveryPlanAction.
        :type action_name: str
        """
        if action_name is None:
            raise ValueError("Invalid value for `action_name`, must not be `None`")

        self._action_name = action_name

    @property
    def custom_details(self):
        """Gets the custom_details of this RecoveryPlanAction.


        :return: The custom_details of this RecoveryPlanAction.
        :rtype: RecoveryPlanActionDetails
        """
        return self._custom_details

    @custom_details.setter
    def custom_details(self, custom_details):
        """Sets the custom_details of this RecoveryPlanAction.


        :param custom_details: The custom_details of this RecoveryPlanAction.
        :type custom_details: RecoveryPlanActionDetails
        """
        if custom_details is None:
            raise ValueError("Invalid value for `custom_details`, must not be `None`")

        self._custom_details = custom_details

    @property
    def failover_directions(self):
        """Gets the failover_directions of this RecoveryPlanAction.

        The list of failover directions.

        :return: The failover_directions of this RecoveryPlanAction.
        :rtype: List[str]
        """
        return self._failover_directions

    @failover_directions.setter
    def failover_directions(self, failover_directions):
        """Sets the failover_directions of this RecoveryPlanAction.

        The list of failover directions.

        :param failover_directions: The failover_directions of this RecoveryPlanAction.
        :type failover_directions: List[str]
        """
        allowed_values = ["PrimaryToRecovery", "RecoveryToPrimary"]  # noqa: E501
        if not set(failover_directions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `failover_directions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(failover_directions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._failover_directions = failover_directions

    @property
    def failover_types(self):
        """Gets the failover_types of this RecoveryPlanAction.

        The list of failover types.

        :return: The failover_types of this RecoveryPlanAction.
        :rtype: List[str]
        """
        return self._failover_types

    @failover_types.setter
    def failover_types(self, failover_types):
        """Sets the failover_types of this RecoveryPlanAction.

        The list of failover types.

        :param failover_types: The failover_types of this RecoveryPlanAction.
        :type failover_types: List[str]
        """
        allowed_values = ["ReverseReplicate", "Commit", "PlannedFailover", "UnplannedFailover", "DisableProtection", "TestFailover", "TestFailoverCleanup", "Failback", "FinalizeFailback", "ChangePit", "RepairReplication", "SwitchProtection", "CompleteMigration"]  # noqa: E501
        if not set(failover_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `failover_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(failover_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._failover_types = failover_types
