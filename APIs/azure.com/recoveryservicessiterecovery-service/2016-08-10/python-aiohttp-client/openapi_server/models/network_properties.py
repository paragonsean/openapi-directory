# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subnet import Subnet
from openapi_server import util


class NetworkProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fabric_type: str=None, friendly_name: str=None, network_type: str=None, subnets: List[Subnet]=None):
        """NetworkProperties - a model defined in OpenAPI

        :param fabric_type: The fabric_type of this NetworkProperties.
        :param friendly_name: The friendly_name of this NetworkProperties.
        :param network_type: The network_type of this NetworkProperties.
        :param subnets: The subnets of this NetworkProperties.
        """
        self.openapi_types = {
            'fabric_type': str,
            'friendly_name': str,
            'network_type': str,
            'subnets': List[Subnet]
        }

        self.attribute_map = {
            'fabric_type': 'fabricType',
            'friendly_name': 'friendlyName',
            'network_type': 'networkType',
            'subnets': 'subnets'
        }

        self._fabric_type = fabric_type
        self._friendly_name = friendly_name
        self._network_type = network_type
        self._subnets = subnets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkProperties of this NetworkProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fabric_type(self):
        """Gets the fabric_type of this NetworkProperties.

        The Fabric Type.

        :return: The fabric_type of this NetworkProperties.
        :rtype: str
        """
        return self._fabric_type

    @fabric_type.setter
    def fabric_type(self, fabric_type):
        """Sets the fabric_type of this NetworkProperties.

        The Fabric Type.

        :param fabric_type: The fabric_type of this NetworkProperties.
        :type fabric_type: str
        """

        self._fabric_type = fabric_type

    @property
    def friendly_name(self):
        """Gets the friendly_name of this NetworkProperties.

        The Friendly Name.

        :return: The friendly_name of this NetworkProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this NetworkProperties.

        The Friendly Name.

        :param friendly_name: The friendly_name of this NetworkProperties.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def network_type(self):
        """Gets the network_type of this NetworkProperties.

        The Network Type.

        :return: The network_type of this NetworkProperties.
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this NetworkProperties.

        The Network Type.

        :param network_type: The network_type of this NetworkProperties.
        :type network_type: str
        """

        self._network_type = network_type

    @property
    def subnets(self):
        """Gets the subnets of this NetworkProperties.

        The List of subnets.

        :return: The subnets of this NetworkProperties.
        :rtype: List[Subnet]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this NetworkProperties.

        The List of subnets.

        :param subnets: The subnets of this NetworkProperties.
        :type subnets: List[Subnet]
        """

        self._subnets = subnets
