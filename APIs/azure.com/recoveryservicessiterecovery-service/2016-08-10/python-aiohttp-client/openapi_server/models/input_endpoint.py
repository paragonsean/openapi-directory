# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputEndpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_name: str=None, private_port: int=None, protocol: str=None, public_port: int=None):
        """InputEndpoint - a model defined in OpenAPI

        :param endpoint_name: The endpoint_name of this InputEndpoint.
        :param private_port: The private_port of this InputEndpoint.
        :param protocol: The protocol of this InputEndpoint.
        :param public_port: The public_port of this InputEndpoint.
        """
        self.openapi_types = {
            'endpoint_name': str,
            'private_port': int,
            'protocol': str,
            'public_port': int
        }

        self.attribute_map = {
            'endpoint_name': 'endpointName',
            'private_port': 'privatePort',
            'protocol': 'protocol',
            'public_port': 'publicPort'
        }

        self._endpoint_name = endpoint_name
        self._private_port = private_port
        self._protocol = protocol
        self._public_port = public_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputEndpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputEndpoint of this InputEndpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this InputEndpoint.

        The input endpoint name.

        :return: The endpoint_name of this InputEndpoint.
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this InputEndpoint.

        The input endpoint name.

        :param endpoint_name: The endpoint_name of this InputEndpoint.
        :type endpoint_name: str
        """

        self._endpoint_name = endpoint_name

    @property
    def private_port(self):
        """Gets the private_port of this InputEndpoint.

        The input endpoint private port.

        :return: The private_port of this InputEndpoint.
        :rtype: int
        """
        return self._private_port

    @private_port.setter
    def private_port(self, private_port):
        """Sets the private_port of this InputEndpoint.

        The input endpoint private port.

        :param private_port: The private_port of this InputEndpoint.
        :type private_port: int
        """

        self._private_port = private_port

    @property
    def protocol(self):
        """Gets the protocol of this InputEndpoint.

        The input endpoint protocol.

        :return: The protocol of this InputEndpoint.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this InputEndpoint.

        The input endpoint protocol.

        :param protocol: The protocol of this InputEndpoint.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def public_port(self):
        """Gets the public_port of this InputEndpoint.

        The input endpoint public port.

        :return: The public_port of this InputEndpoint.
        :rtype: int
        """
        return self._public_port

    @public_port.setter
    def public_port(self, public_port):
        """Sets the public_port of this InputEndpoint.

        The input endpoint public port.

        :param public_port: The public_port of this InputEndpoint.
        :type public_port: int
        """

        self._public_port = public_port
