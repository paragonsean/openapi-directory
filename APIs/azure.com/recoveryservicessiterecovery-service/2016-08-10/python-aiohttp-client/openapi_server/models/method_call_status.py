# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MethodCallStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contains_generic_parameters: str=None, is_virtual: str=None, parameters: List[str]=None):
        """MethodCallStatus - a model defined in OpenAPI

        :param contains_generic_parameters: The contains_generic_parameters of this MethodCallStatus.
        :param is_virtual: The is_virtual of this MethodCallStatus.
        :param parameters: The parameters of this MethodCallStatus.
        """
        self.openapi_types = {
            'contains_generic_parameters': str,
            'is_virtual': str,
            'parameters': List[str]
        }

        self.attribute_map = {
            'contains_generic_parameters': 'containsGenericParameters',
            'is_virtual': 'isVirtual',
            'parameters': 'parameters'
        }

        self._contains_generic_parameters = contains_generic_parameters
        self._is_virtual = is_virtual
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MethodCallStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MethodCallStatus of this MethodCallStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contains_generic_parameters(self):
        """Gets the contains_generic_parameters of this MethodCallStatus.

        Gets a value indicating whether method container generic params.

        :return: The contains_generic_parameters of this MethodCallStatus.
        :rtype: str
        """
        return self._contains_generic_parameters

    @contains_generic_parameters.setter
    def contains_generic_parameters(self, contains_generic_parameters):
        """Sets the contains_generic_parameters of this MethodCallStatus.

        Gets a value indicating whether method container generic params.

        :param contains_generic_parameters: The contains_generic_parameters of this MethodCallStatus.
        :type contains_generic_parameters: str
        """

        self._contains_generic_parameters = contains_generic_parameters

    @property
    def is_virtual(self):
        """Gets the is_virtual of this MethodCallStatus.

        Gets a value indicating whether called method was virtual

        :return: The is_virtual of this MethodCallStatus.
        :rtype: str
        """
        return self._is_virtual

    @is_virtual.setter
    def is_virtual(self, is_virtual):
        """Sets the is_virtual of this MethodCallStatus.

        Gets a value indicating whether called method was virtual

        :param is_virtual: The is_virtual of this MethodCallStatus.
        :type is_virtual: str
        """

        self._is_virtual = is_virtual

    @property
    def parameters(self):
        """Gets the parameters of this MethodCallStatus.

        Gets parameter list passed to method.

        :return: The parameters of this MethodCallStatus.
        :rtype: List[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this MethodCallStatus.

        Gets parameter list passed to method.

        :param parameters: The parameters of this MethodCallStatus.
        :type parameters: List[str]
        """

        self._parameters = parameters
