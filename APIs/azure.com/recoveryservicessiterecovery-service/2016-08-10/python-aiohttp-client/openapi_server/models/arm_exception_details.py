# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ARMExceptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_id: str=None, client_request_id: str=None, code: str=None, message: str=None, possible_causes: str=None, recommended_action: str=None, target: str=None):
        """ARMExceptionDetails - a model defined in OpenAPI

        :param activity_id: The activity_id of this ARMExceptionDetails.
        :param client_request_id: The client_request_id of this ARMExceptionDetails.
        :param code: The code of this ARMExceptionDetails.
        :param message: The message of this ARMExceptionDetails.
        :param possible_causes: The possible_causes of this ARMExceptionDetails.
        :param recommended_action: The recommended_action of this ARMExceptionDetails.
        :param target: The target of this ARMExceptionDetails.
        """
        self.openapi_types = {
            'activity_id': str,
            'client_request_id': str,
            'code': str,
            'message': str,
            'possible_causes': str,
            'recommended_action': str,
            'target': str
        }

        self.attribute_map = {
            'activity_id': 'activityId',
            'client_request_id': 'clientRequestId',
            'code': 'code',
            'message': 'message',
            'possible_causes': 'possibleCauses',
            'recommended_action': 'recommendedAction',
            'target': 'target'
        }

        self._activity_id = activity_id
        self._client_request_id = client_request_id
        self._code = code
        self._message = message
        self._possible_causes = possible_causes
        self._recommended_action = recommended_action
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ARMExceptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ARMExceptionDetails of this ARMExceptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_id(self):
        """Gets the activity_id of this ARMExceptionDetails.

        Gets the activity Id for the session.

        :return: The activity_id of this ARMExceptionDetails.
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this ARMExceptionDetails.

        Gets the activity Id for the session.

        :param activity_id: The activity_id of this ARMExceptionDetails.
        :type activity_id: str
        """

        self._activity_id = activity_id

    @property
    def client_request_id(self):
        """Gets the client_request_id of this ARMExceptionDetails.

        Gets the client request Id for the session.

        :return: The client_request_id of this ARMExceptionDetails.
        :rtype: str
        """
        return self._client_request_id

    @client_request_id.setter
    def client_request_id(self, client_request_id):
        """Sets the client_request_id of this ARMExceptionDetails.

        Gets the client request Id for the session.

        :param client_request_id: The client_request_id of this ARMExceptionDetails.
        :type client_request_id: str
        """

        self._client_request_id = client_request_id

    @property
    def code(self):
        """Gets the code of this ARMExceptionDetails.

        Gets service error code.

        :return: The code of this ARMExceptionDetails.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ARMExceptionDetails.

        Gets service error code.

        :param code: The code of this ARMExceptionDetails.
        :type code: str
        """

        self._code = code

    @property
    def message(self):
        """Gets the message of this ARMExceptionDetails.

        Gets error message.

        :return: The message of this ARMExceptionDetails.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ARMExceptionDetails.

        Gets error message.

        :param message: The message of this ARMExceptionDetails.
        :type message: str
        """

        self._message = message

    @property
    def possible_causes(self):
        """Gets the possible_causes of this ARMExceptionDetails.

        Gets possible cause for error.

        :return: The possible_causes of this ARMExceptionDetails.
        :rtype: str
        """
        return self._possible_causes

    @possible_causes.setter
    def possible_causes(self, possible_causes):
        """Sets the possible_causes of this ARMExceptionDetails.

        Gets possible cause for error.

        :param possible_causes: The possible_causes of this ARMExceptionDetails.
        :type possible_causes: str
        """

        self._possible_causes = possible_causes

    @property
    def recommended_action(self):
        """Gets the recommended_action of this ARMExceptionDetails.

        Gets recommended action for the error.

        :return: The recommended_action of this ARMExceptionDetails.
        :rtype: str
        """
        return self._recommended_action

    @recommended_action.setter
    def recommended_action(self, recommended_action):
        """Sets the recommended_action of this ARMExceptionDetails.

        Gets recommended action for the error.

        :param recommended_action: The recommended_action of this ARMExceptionDetails.
        :type recommended_action: str
        """

        self._recommended_action = recommended_action

    @property
    def target(self):
        """Gets the target of this ARMExceptionDetails.

        Gets exception target.

        :return: The target of this ARMExceptionDetails.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ARMExceptionDetails.

        Gets exception target.

        :param target: The target of this ARMExceptionDetails.
        :type target: str
        """

        self._target = target
