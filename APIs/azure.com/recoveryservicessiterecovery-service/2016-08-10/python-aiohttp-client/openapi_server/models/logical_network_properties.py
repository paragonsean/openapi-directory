# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogicalNetworkProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, friendly_name: str=None, logical_network_definitions_status: str=None, logical_network_usage: str=None, network_virtualization_status: str=None):
        """LogicalNetworkProperties - a model defined in OpenAPI

        :param friendly_name: The friendly_name of this LogicalNetworkProperties.
        :param logical_network_definitions_status: The logical_network_definitions_status of this LogicalNetworkProperties.
        :param logical_network_usage: The logical_network_usage of this LogicalNetworkProperties.
        :param network_virtualization_status: The network_virtualization_status of this LogicalNetworkProperties.
        """
        self.openapi_types = {
            'friendly_name': str,
            'logical_network_definitions_status': str,
            'logical_network_usage': str,
            'network_virtualization_status': str
        }

        self.attribute_map = {
            'friendly_name': 'friendlyName',
            'logical_network_definitions_status': 'logicalNetworkDefinitionsStatus',
            'logical_network_usage': 'logicalNetworkUsage',
            'network_virtualization_status': 'networkVirtualizationStatus'
        }

        self._friendly_name = friendly_name
        self._logical_network_definitions_status = logical_network_definitions_status
        self._logical_network_usage = logical_network_usage
        self._network_virtualization_status = network_virtualization_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogicalNetworkProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogicalNetworkProperties of this LogicalNetworkProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def friendly_name(self):
        """Gets the friendly_name of this LogicalNetworkProperties.

        The Friendly Name.

        :return: The friendly_name of this LogicalNetworkProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this LogicalNetworkProperties.

        The Friendly Name.

        :param friendly_name: The friendly_name of this LogicalNetworkProperties.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def logical_network_definitions_status(self):
        """Gets the logical_network_definitions_status of this LogicalNetworkProperties.

        A value indicating whether logical network definitions are isolated.

        :return: The logical_network_definitions_status of this LogicalNetworkProperties.
        :rtype: str
        """
        return self._logical_network_definitions_status

    @logical_network_definitions_status.setter
    def logical_network_definitions_status(self, logical_network_definitions_status):
        """Sets the logical_network_definitions_status of this LogicalNetworkProperties.

        A value indicating whether logical network definitions are isolated.

        :param logical_network_definitions_status: The logical_network_definitions_status of this LogicalNetworkProperties.
        :type logical_network_definitions_status: str
        """

        self._logical_network_definitions_status = logical_network_definitions_status

    @property
    def logical_network_usage(self):
        """Gets the logical_network_usage of this LogicalNetworkProperties.

        A value indicating whether logical network is used as private test network by test failover.

        :return: The logical_network_usage of this LogicalNetworkProperties.
        :rtype: str
        """
        return self._logical_network_usage

    @logical_network_usage.setter
    def logical_network_usage(self, logical_network_usage):
        """Sets the logical_network_usage of this LogicalNetworkProperties.

        A value indicating whether logical network is used as private test network by test failover.

        :param logical_network_usage: The logical_network_usage of this LogicalNetworkProperties.
        :type logical_network_usage: str
        """

        self._logical_network_usage = logical_network_usage

    @property
    def network_virtualization_status(self):
        """Gets the network_virtualization_status of this LogicalNetworkProperties.

        A value indicating whether Network Virtualization is enabled for the logical network.

        :return: The network_virtualization_status of this LogicalNetworkProperties.
        :rtype: str
        """
        return self._network_virtualization_status

    @network_virtualization_status.setter
    def network_virtualization_status(self, network_virtualization_status):
        """Sets the network_virtualization_status of this LogicalNetworkProperties.

        A value indicating whether Network Virtualization is enabled for the logical network.

        :param network_virtualization_status: The network_virtualization_status of this LogicalNetworkProperties.
        :type network_virtualization_status: str
        """

        self._network_virtualization_status = network_virtualization_status
