# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_provider_specific_details import EventProviderSpecificDetails
from openapi_server.models.event_specific_details import EventSpecificDetails
from openapi_server.models.health_error import HealthError
from openapi_server import util


class EventProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affected_object_friendly_name: str=None, description: str=None, event_code: str=None, event_specific_details: EventSpecificDetails=None, event_type: str=None, fabric_id: str=None, health_errors: List[HealthError]=None, provider_specific_details: EventProviderSpecificDetails=None, severity: str=None, time_of_occurrence: datetime=None):
        """EventProperties - a model defined in OpenAPI

        :param affected_object_friendly_name: The affected_object_friendly_name of this EventProperties.
        :param description: The description of this EventProperties.
        :param event_code: The event_code of this EventProperties.
        :param event_specific_details: The event_specific_details of this EventProperties.
        :param event_type: The event_type of this EventProperties.
        :param fabric_id: The fabric_id of this EventProperties.
        :param health_errors: The health_errors of this EventProperties.
        :param provider_specific_details: The provider_specific_details of this EventProperties.
        :param severity: The severity of this EventProperties.
        :param time_of_occurrence: The time_of_occurrence of this EventProperties.
        """
        self.openapi_types = {
            'affected_object_friendly_name': str,
            'description': str,
            'event_code': str,
            'event_specific_details': EventSpecificDetails,
            'event_type': str,
            'fabric_id': str,
            'health_errors': List[HealthError],
            'provider_specific_details': EventProviderSpecificDetails,
            'severity': str,
            'time_of_occurrence': datetime
        }

        self.attribute_map = {
            'affected_object_friendly_name': 'affectedObjectFriendlyName',
            'description': 'description',
            'event_code': 'eventCode',
            'event_specific_details': 'eventSpecificDetails',
            'event_type': 'eventType',
            'fabric_id': 'fabricId',
            'health_errors': 'healthErrors',
            'provider_specific_details': 'providerSpecificDetails',
            'severity': 'severity',
            'time_of_occurrence': 'timeOfOccurrence'
        }

        self._affected_object_friendly_name = affected_object_friendly_name
        self._description = description
        self._event_code = event_code
        self._event_specific_details = event_specific_details
        self._event_type = event_type
        self._fabric_id = fabric_id
        self._health_errors = health_errors
        self._provider_specific_details = provider_specific_details
        self._severity = severity
        self._time_of_occurrence = time_of_occurrence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventProperties of this EventProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affected_object_friendly_name(self):
        """Gets the affected_object_friendly_name of this EventProperties.

        The friendly name of the source of the event on which it is raised (for example, VM, VMM etc).

        :return: The affected_object_friendly_name of this EventProperties.
        :rtype: str
        """
        return self._affected_object_friendly_name

    @affected_object_friendly_name.setter
    def affected_object_friendly_name(self, affected_object_friendly_name):
        """Sets the affected_object_friendly_name of this EventProperties.

        The friendly name of the source of the event on which it is raised (for example, VM, VMM etc).

        :param affected_object_friendly_name: The affected_object_friendly_name of this EventProperties.
        :type affected_object_friendly_name: str
        """

        self._affected_object_friendly_name = affected_object_friendly_name

    @property
    def description(self):
        """Gets the description of this EventProperties.

        The event name.

        :return: The description of this EventProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventProperties.

        The event name.

        :param description: The description of this EventProperties.
        :type description: str
        """

        self._description = description

    @property
    def event_code(self):
        """Gets the event_code of this EventProperties.

        The Id of the monitoring event.

        :return: The event_code of this EventProperties.
        :rtype: str
        """
        return self._event_code

    @event_code.setter
    def event_code(self, event_code):
        """Sets the event_code of this EventProperties.

        The Id of the monitoring event.

        :param event_code: The event_code of this EventProperties.
        :type event_code: str
        """

        self._event_code = event_code

    @property
    def event_specific_details(self):
        """Gets the event_specific_details of this EventProperties.


        :return: The event_specific_details of this EventProperties.
        :rtype: EventSpecificDetails
        """
        return self._event_specific_details

    @event_specific_details.setter
    def event_specific_details(self, event_specific_details):
        """Sets the event_specific_details of this EventProperties.


        :param event_specific_details: The event_specific_details of this EventProperties.
        :type event_specific_details: EventSpecificDetails
        """

        self._event_specific_details = event_specific_details

    @property
    def event_type(self):
        """Gets the event_type of this EventProperties.

        The type of the event. for example: VM Health, Server Health, Job Failure etc.

        :return: The event_type of this EventProperties.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventProperties.

        The type of the event. for example: VM Health, Server Health, Job Failure etc.

        :param event_type: The event_type of this EventProperties.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def fabric_id(self):
        """Gets the fabric_id of this EventProperties.

        The ARM ID of the fabric.

        :return: The fabric_id of this EventProperties.
        :rtype: str
        """
        return self._fabric_id

    @fabric_id.setter
    def fabric_id(self, fabric_id):
        """Sets the fabric_id of this EventProperties.

        The ARM ID of the fabric.

        :param fabric_id: The fabric_id of this EventProperties.
        :type fabric_id: str
        """

        self._fabric_id = fabric_id

    @property
    def health_errors(self):
        """Gets the health_errors of this EventProperties.

        The list of errors / warnings capturing details associated with the issue(s).

        :return: The health_errors of this EventProperties.
        :rtype: List[HealthError]
        """
        return self._health_errors

    @health_errors.setter
    def health_errors(self, health_errors):
        """Sets the health_errors of this EventProperties.

        The list of errors / warnings capturing details associated with the issue(s).

        :param health_errors: The health_errors of this EventProperties.
        :type health_errors: List[HealthError]
        """

        self._health_errors = health_errors

    @property
    def provider_specific_details(self):
        """Gets the provider_specific_details of this EventProperties.


        :return: The provider_specific_details of this EventProperties.
        :rtype: EventProviderSpecificDetails
        """
        return self._provider_specific_details

    @provider_specific_details.setter
    def provider_specific_details(self, provider_specific_details):
        """Sets the provider_specific_details of this EventProperties.


        :param provider_specific_details: The provider_specific_details of this EventProperties.
        :type provider_specific_details: EventProviderSpecificDetails
        """

        self._provider_specific_details = provider_specific_details

    @property
    def severity(self):
        """Gets the severity of this EventProperties.

        The severity of the event.

        :return: The severity of this EventProperties.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EventProperties.

        The severity of the event.

        :param severity: The severity of this EventProperties.
        :type severity: str
        """

        self._severity = severity

    @property
    def time_of_occurrence(self):
        """Gets the time_of_occurrence of this EventProperties.

        The time of occurrence of the event.

        :return: The time_of_occurrence of this EventProperties.
        :rtype: datetime
        """
        return self._time_of_occurrence

    @time_of_occurrence.setter
    def time_of_occurrence(self, time_of_occurrence):
        """Sets the time_of_occurrence of this EventProperties.

        The time of occurrence of the event.

        :param time_of_occurrence: The time_of_occurrence of this EventProperties.
        :type time_of_occurrence: datetime
        """

        self._time_of_occurrence = time_of_occurrence
