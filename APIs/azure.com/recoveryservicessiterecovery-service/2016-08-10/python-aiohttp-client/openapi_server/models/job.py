# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.arm_exception import ARMException
from openapi_server.models.job_properties import JobProperties
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, error: ARMException=None, properties: JobProperties=None, start_time: str=None, status: str=None, id: str=None, location: str=None, name: str=None, type: str=None):
        """Job - a model defined in OpenAPI

        :param end_time: The end_time of this Job.
        :param error: The error of this Job.
        :param properties: The properties of this Job.
        :param start_time: The start_time of this Job.
        :param status: The status of this Job.
        :param id: The id of this Job.
        :param location: The location of this Job.
        :param name: The name of this Job.
        :param type: The type of this Job.
        """
        self.openapi_types = {
            'end_time': str,
            'error': ARMException,
            'properties': JobProperties,
            'start_time': str,
            'status': str,
            'id': str,
            'location': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'error': 'error',
            'properties': 'properties',
            'start_time': 'startTime',
            'status': 'status',
            'id': 'id',
            'location': 'location',
            'name': 'name',
            'type': 'type'
        }

        self._end_time = end_time
        self._error = error
        self._properties = properties
        self._start_time = start_time
        self._status = status
        self._id = id
        self._location = location
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this Job.

        The start time.

        :return: The end_time of this Job.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Job.

        The start time.

        :param end_time: The end_time of this Job.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def error(self):
        """Gets the error of this Job.


        :return: The error of this Job.
        :rtype: ARMException
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Job.


        :param error: The error of this Job.
        :type error: ARMException
        """

        self._error = error

    @property
    def properties(self):
        """Gets the properties of this Job.


        :return: The properties of this Job.
        :rtype: JobProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Job.


        :param properties: The properties of this Job.
        :type properties: JobProperties
        """

        self._properties = properties

    @property
    def start_time(self):
        """Gets the start_time of this Job.

        The start time.

        :return: The start_time of this Job.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Job.

        The start time.

        :param start_time: The start_time of this Job.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this Job.

        The status of the Job. ARM expects the terminal status to be one of (1) Succeeded, (2) Failed or (3) Canceled. All other values imply that the operation is still running / being applied.

        :return: The status of this Job.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.

        The status of the Job. ARM expects the terminal status to be one of (1) Succeeded, (2) Failed or (3) Canceled. All other values imply that the operation is still running / being applied.

        :param status: The status of this Job.
        :type status: str
        """

        self._status = status

    @property
    def id(self):
        """Gets the id of this Job.

        Resource Id

        :return: The id of this Job.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        Resource Id

        :param id: The id of this Job.
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this Job.

        Resource Location

        :return: The location of this Job.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Job.

        Resource Location

        :param location: The location of this Job.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Job.

        Resource Name

        :return: The name of this Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        Resource Name

        :param name: The name of this Job.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Job.

        Resource Type

        :return: The type of this Job.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Job.

        Resource Type

        :param type: The type of this Job.
        :type type: str
        """

        self._type = type
