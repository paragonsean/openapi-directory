# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VMwareCbtNicDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_primary_nic: str=None, is_selected_for_migration: str=None, nic_id: str=None, source_ip_address: str=None, source_ip_address_type: str=None, source_network_id: str=None, target_ip_address: str=None, target_ip_address_type: str=None, target_subnet_name: str=None):
        """VMwareCbtNicDetails - a model defined in OpenAPI

        :param is_primary_nic: The is_primary_nic of this VMwareCbtNicDetails.
        :param is_selected_for_migration: The is_selected_for_migration of this VMwareCbtNicDetails.
        :param nic_id: The nic_id of this VMwareCbtNicDetails.
        :param source_ip_address: The source_ip_address of this VMwareCbtNicDetails.
        :param source_ip_address_type: The source_ip_address_type of this VMwareCbtNicDetails.
        :param source_network_id: The source_network_id of this VMwareCbtNicDetails.
        :param target_ip_address: The target_ip_address of this VMwareCbtNicDetails.
        :param target_ip_address_type: The target_ip_address_type of this VMwareCbtNicDetails.
        :param target_subnet_name: The target_subnet_name of this VMwareCbtNicDetails.
        """
        self.openapi_types = {
            'is_primary_nic': str,
            'is_selected_for_migration': str,
            'nic_id': str,
            'source_ip_address': str,
            'source_ip_address_type': str,
            'source_network_id': str,
            'target_ip_address': str,
            'target_ip_address_type': str,
            'target_subnet_name': str
        }

        self.attribute_map = {
            'is_primary_nic': 'isPrimaryNic',
            'is_selected_for_migration': 'isSelectedForMigration',
            'nic_id': 'nicId',
            'source_ip_address': 'sourceIPAddress',
            'source_ip_address_type': 'sourceIPAddressType',
            'source_network_id': 'sourceNetworkId',
            'target_ip_address': 'targetIPAddress',
            'target_ip_address_type': 'targetIPAddressType',
            'target_subnet_name': 'targetSubnetName'
        }

        self._is_primary_nic = is_primary_nic
        self._is_selected_for_migration = is_selected_for_migration
        self._nic_id = nic_id
        self._source_ip_address = source_ip_address
        self._source_ip_address_type = source_ip_address_type
        self._source_network_id = source_network_id
        self._target_ip_address = target_ip_address
        self._target_ip_address_type = target_ip_address_type
        self._target_subnet_name = target_subnet_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VMwareCbtNicDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VMwareCbtNicDetails of this VMwareCbtNicDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_primary_nic(self):
        """Gets the is_primary_nic of this VMwareCbtNicDetails.

        A value indicating whether this is the primary NIC.

        :return: The is_primary_nic of this VMwareCbtNicDetails.
        :rtype: str
        """
        return self._is_primary_nic

    @is_primary_nic.setter
    def is_primary_nic(self, is_primary_nic):
        """Sets the is_primary_nic of this VMwareCbtNicDetails.

        A value indicating whether this is the primary NIC.

        :param is_primary_nic: The is_primary_nic of this VMwareCbtNicDetails.
        :type is_primary_nic: str
        """

        self._is_primary_nic = is_primary_nic

    @property
    def is_selected_for_migration(self):
        """Gets the is_selected_for_migration of this VMwareCbtNicDetails.

        A value indicating whether this NIC is selected for migration.

        :return: The is_selected_for_migration of this VMwareCbtNicDetails.
        :rtype: str
        """
        return self._is_selected_for_migration

    @is_selected_for_migration.setter
    def is_selected_for_migration(self, is_selected_for_migration):
        """Sets the is_selected_for_migration of this VMwareCbtNicDetails.

        A value indicating whether this NIC is selected for migration.

        :param is_selected_for_migration: The is_selected_for_migration of this VMwareCbtNicDetails.
        :type is_selected_for_migration: str
        """

        self._is_selected_for_migration = is_selected_for_migration

    @property
    def nic_id(self):
        """Gets the nic_id of this VMwareCbtNicDetails.

        The NIC Id.

        :return: The nic_id of this VMwareCbtNicDetails.
        :rtype: str
        """
        return self._nic_id

    @nic_id.setter
    def nic_id(self, nic_id):
        """Sets the nic_id of this VMwareCbtNicDetails.

        The NIC Id.

        :param nic_id: The nic_id of this VMwareCbtNicDetails.
        :type nic_id: str
        """

        self._nic_id = nic_id

    @property
    def source_ip_address(self):
        """Gets the source_ip_address of this VMwareCbtNicDetails.

        The source IP address.

        :return: The source_ip_address of this VMwareCbtNicDetails.
        :rtype: str
        """
        return self._source_ip_address

    @source_ip_address.setter
    def source_ip_address(self, source_ip_address):
        """Sets the source_ip_address of this VMwareCbtNicDetails.

        The source IP address.

        :param source_ip_address: The source_ip_address of this VMwareCbtNicDetails.
        :type source_ip_address: str
        """

        self._source_ip_address = source_ip_address

    @property
    def source_ip_address_type(self):
        """Gets the source_ip_address_type of this VMwareCbtNicDetails.

        The source IP address type.

        :return: The source_ip_address_type of this VMwareCbtNicDetails.
        :rtype: str
        """
        return self._source_ip_address_type

    @source_ip_address_type.setter
    def source_ip_address_type(self, source_ip_address_type):
        """Sets the source_ip_address_type of this VMwareCbtNicDetails.

        The source IP address type.

        :param source_ip_address_type: The source_ip_address_type of this VMwareCbtNicDetails.
        :type source_ip_address_type: str
        """
        allowed_values = ["Dynamic", "Static"]  # noqa: E501
        if source_ip_address_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_ip_address_type` ({0}), must be one of {1}"
                .format(source_ip_address_type, allowed_values)
            )

        self._source_ip_address_type = source_ip_address_type

    @property
    def source_network_id(self):
        """Gets the source_network_id of this VMwareCbtNicDetails.

        Source network Id.

        :return: The source_network_id of this VMwareCbtNicDetails.
        :rtype: str
        """
        return self._source_network_id

    @source_network_id.setter
    def source_network_id(self, source_network_id):
        """Sets the source_network_id of this VMwareCbtNicDetails.

        Source network Id.

        :param source_network_id: The source_network_id of this VMwareCbtNicDetails.
        :type source_network_id: str
        """

        self._source_network_id = source_network_id

    @property
    def target_ip_address(self):
        """Gets the target_ip_address of this VMwareCbtNicDetails.

        The target IP address.

        :return: The target_ip_address of this VMwareCbtNicDetails.
        :rtype: str
        """
        return self._target_ip_address

    @target_ip_address.setter
    def target_ip_address(self, target_ip_address):
        """Sets the target_ip_address of this VMwareCbtNicDetails.

        The target IP address.

        :param target_ip_address: The target_ip_address of this VMwareCbtNicDetails.
        :type target_ip_address: str
        """

        self._target_ip_address = target_ip_address

    @property
    def target_ip_address_type(self):
        """Gets the target_ip_address_type of this VMwareCbtNicDetails.

        The target IP address type.

        :return: The target_ip_address_type of this VMwareCbtNicDetails.
        :rtype: str
        """
        return self._target_ip_address_type

    @target_ip_address_type.setter
    def target_ip_address_type(self, target_ip_address_type):
        """Sets the target_ip_address_type of this VMwareCbtNicDetails.

        The target IP address type.

        :param target_ip_address_type: The target_ip_address_type of this VMwareCbtNicDetails.
        :type target_ip_address_type: str
        """
        allowed_values = ["Dynamic", "Static"]  # noqa: E501
        if target_ip_address_type not in allowed_values:
            raise ValueError(
                "Invalid value for `target_ip_address_type` ({0}), must be one of {1}"
                .format(target_ip_address_type, allowed_values)
            )

        self._target_ip_address_type = target_ip_address_type

    @property
    def target_subnet_name(self):
        """Gets the target_subnet_name of this VMwareCbtNicDetails.

        Target subnet name.

        :return: The target_subnet_name of this VMwareCbtNicDetails.
        :rtype: str
        """
        return self._target_subnet_name

    @target_subnet_name.setter
    def target_subnet_name(self, target_subnet_name):
        """Sets the target_subnet_name of this VMwareCbtNicDetails.

        Target subnet name.

        :param target_subnet_name: The target_subnet_name of this VMwareCbtNicDetails.
        :type target_subnet_name: str
        """

        self._target_subnet_name = target_subnet_name
