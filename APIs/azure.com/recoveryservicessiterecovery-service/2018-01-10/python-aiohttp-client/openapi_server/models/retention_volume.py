# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetentionVolume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity_in_bytes: int=None, free_space_in_bytes: int=None, threshold_percentage: int=None, volume_name: str=None):
        """RetentionVolume - a model defined in OpenAPI

        :param capacity_in_bytes: The capacity_in_bytes of this RetentionVolume.
        :param free_space_in_bytes: The free_space_in_bytes of this RetentionVolume.
        :param threshold_percentage: The threshold_percentage of this RetentionVolume.
        :param volume_name: The volume_name of this RetentionVolume.
        """
        self.openapi_types = {
            'capacity_in_bytes': int,
            'free_space_in_bytes': int,
            'threshold_percentage': int,
            'volume_name': str
        }

        self.attribute_map = {
            'capacity_in_bytes': 'capacityInBytes',
            'free_space_in_bytes': 'freeSpaceInBytes',
            'threshold_percentage': 'thresholdPercentage',
            'volume_name': 'volumeName'
        }

        self._capacity_in_bytes = capacity_in_bytes
        self._free_space_in_bytes = free_space_in_bytes
        self._threshold_percentage = threshold_percentage
        self._volume_name = volume_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetentionVolume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetentionVolume of this RetentionVolume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity_in_bytes(self):
        """Gets the capacity_in_bytes of this RetentionVolume.

        The volume capacity.

        :return: The capacity_in_bytes of this RetentionVolume.
        :rtype: int
        """
        return self._capacity_in_bytes

    @capacity_in_bytes.setter
    def capacity_in_bytes(self, capacity_in_bytes):
        """Sets the capacity_in_bytes of this RetentionVolume.

        The volume capacity.

        :param capacity_in_bytes: The capacity_in_bytes of this RetentionVolume.
        :type capacity_in_bytes: int
        """

        self._capacity_in_bytes = capacity_in_bytes

    @property
    def free_space_in_bytes(self):
        """Gets the free_space_in_bytes of this RetentionVolume.

        The free space available in this volume.

        :return: The free_space_in_bytes of this RetentionVolume.
        :rtype: int
        """
        return self._free_space_in_bytes

    @free_space_in_bytes.setter
    def free_space_in_bytes(self, free_space_in_bytes):
        """Sets the free_space_in_bytes of this RetentionVolume.

        The free space available in this volume.

        :param free_space_in_bytes: The free_space_in_bytes of this RetentionVolume.
        :type free_space_in_bytes: int
        """

        self._free_space_in_bytes = free_space_in_bytes

    @property
    def threshold_percentage(self):
        """Gets the threshold_percentage of this RetentionVolume.

        The threshold percentage.

        :return: The threshold_percentage of this RetentionVolume.
        :rtype: int
        """
        return self._threshold_percentage

    @threshold_percentage.setter
    def threshold_percentage(self, threshold_percentage):
        """Sets the threshold_percentage of this RetentionVolume.

        The threshold percentage.

        :param threshold_percentage: The threshold_percentage of this RetentionVolume.
        :type threshold_percentage: int
        """

        self._threshold_percentage = threshold_percentage

    @property
    def volume_name(self):
        """Gets the volume_name of this RetentionVolume.

        The volume name.

        :return: The volume_name of this RetentionVolume.
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this RetentionVolume.

        The volume name.

        :param volume_name: The volume_name of this RetentionVolume.
        :type volume_name: str
        """

        self._volume_name = volume_name
