# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failover_replication_protected_item_details import FailoverReplicationProtectedItemDetails
from openapi_server.models.job_details import JobDetails
from openapi_server import util


class TestFailoverJobDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: str=None, network_friendly_name: str=None, network_name: str=None, network_type: str=None, protected_item_details: List[FailoverReplicationProtectedItemDetails]=None, test_failover_status: str=None, affected_object_details: Dict[str, str]=None, instance_type: str=None):
        """TestFailoverJobDetails - a model defined in OpenAPI

        :param comments: The comments of this TestFailoverJobDetails.
        :param network_friendly_name: The network_friendly_name of this TestFailoverJobDetails.
        :param network_name: The network_name of this TestFailoverJobDetails.
        :param network_type: The network_type of this TestFailoverJobDetails.
        :param protected_item_details: The protected_item_details of this TestFailoverJobDetails.
        :param test_failover_status: The test_failover_status of this TestFailoverJobDetails.
        :param affected_object_details: The affected_object_details of this TestFailoverJobDetails.
        :param instance_type: The instance_type of this TestFailoverJobDetails.
        """
        self.openapi_types = {
            'comments': str,
            'network_friendly_name': str,
            'network_name': str,
            'network_type': str,
            'protected_item_details': List[FailoverReplicationProtectedItemDetails],
            'test_failover_status': str,
            'affected_object_details': Dict[str, str],
            'instance_type': str
        }

        self.attribute_map = {
            'comments': 'comments',
            'network_friendly_name': 'networkFriendlyName',
            'network_name': 'networkName',
            'network_type': 'networkType',
            'protected_item_details': 'protectedItemDetails',
            'test_failover_status': 'testFailoverStatus',
            'affected_object_details': 'affectedObjectDetails',
            'instance_type': 'instanceType'
        }

        self._comments = comments
        self._network_friendly_name = network_friendly_name
        self._network_name = network_name
        self._network_type = network_type
        self._protected_item_details = protected_item_details
        self._test_failover_status = test_failover_status
        self._affected_object_details = affected_object_details
        self._instance_type = instance_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestFailoverJobDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestFailoverJobDetails of this TestFailoverJobDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this TestFailoverJobDetails.

        The test failover comments.

        :return: The comments of this TestFailoverJobDetails.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TestFailoverJobDetails.

        The test failover comments.

        :param comments: The comments of this TestFailoverJobDetails.
        :type comments: str
        """

        self._comments = comments

    @property
    def network_friendly_name(self):
        """Gets the network_friendly_name of this TestFailoverJobDetails.

        The test network friendly name.

        :return: The network_friendly_name of this TestFailoverJobDetails.
        :rtype: str
        """
        return self._network_friendly_name

    @network_friendly_name.setter
    def network_friendly_name(self, network_friendly_name):
        """Sets the network_friendly_name of this TestFailoverJobDetails.

        The test network friendly name.

        :param network_friendly_name: The network_friendly_name of this TestFailoverJobDetails.
        :type network_friendly_name: str
        """

        self._network_friendly_name = network_friendly_name

    @property
    def network_name(self):
        """Gets the network_name of this TestFailoverJobDetails.

        The test network name.

        :return: The network_name of this TestFailoverJobDetails.
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this TestFailoverJobDetails.

        The test network name.

        :param network_name: The network_name of this TestFailoverJobDetails.
        :type network_name: str
        """

        self._network_name = network_name

    @property
    def network_type(self):
        """Gets the network_type of this TestFailoverJobDetails.

        The test network type (see TestFailoverInput enum for possible values).

        :return: The network_type of this TestFailoverJobDetails.
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this TestFailoverJobDetails.

        The test network type (see TestFailoverInput enum for possible values).

        :param network_type: The network_type of this TestFailoverJobDetails.
        :type network_type: str
        """

        self._network_type = network_type

    @property
    def protected_item_details(self):
        """Gets the protected_item_details of this TestFailoverJobDetails.

        The test VM details.

        :return: The protected_item_details of this TestFailoverJobDetails.
        :rtype: List[FailoverReplicationProtectedItemDetails]
        """
        return self._protected_item_details

    @protected_item_details.setter
    def protected_item_details(self, protected_item_details):
        """Sets the protected_item_details of this TestFailoverJobDetails.

        The test VM details.

        :param protected_item_details: The protected_item_details of this TestFailoverJobDetails.
        :type protected_item_details: List[FailoverReplicationProtectedItemDetails]
        """

        self._protected_item_details = protected_item_details

    @property
    def test_failover_status(self):
        """Gets the test_failover_status of this TestFailoverJobDetails.

        The test failover status.

        :return: The test_failover_status of this TestFailoverJobDetails.
        :rtype: str
        """
        return self._test_failover_status

    @test_failover_status.setter
    def test_failover_status(self, test_failover_status):
        """Sets the test_failover_status of this TestFailoverJobDetails.

        The test failover status.

        :param test_failover_status: The test_failover_status of this TestFailoverJobDetails.
        :type test_failover_status: str
        """

        self._test_failover_status = test_failover_status

    @property
    def affected_object_details(self):
        """Gets the affected_object_details of this TestFailoverJobDetails.

        The affected object properties like source server, source cloud, target server, target cloud etc. based on the workflow object details.

        :return: The affected_object_details of this TestFailoverJobDetails.
        :rtype: Dict[str, str]
        """
        return self._affected_object_details

    @affected_object_details.setter
    def affected_object_details(self, affected_object_details):
        """Sets the affected_object_details of this TestFailoverJobDetails.

        The affected object properties like source server, source cloud, target server, target cloud etc. based on the workflow object details.

        :param affected_object_details: The affected_object_details of this TestFailoverJobDetails.
        :type affected_object_details: Dict[str, str]
        """

        self._affected_object_details = affected_object_details

    @property
    def instance_type(self):
        """Gets the instance_type of this TestFailoverJobDetails.

        Gets the type of job details (see JobDetailsTypes enum for possible values).

        :return: The instance_type of this TestFailoverJobDetails.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this TestFailoverJobDetails.

        Gets the type of job details (see JobDetailsTypes enum for possible values).

        :param instance_type: The instance_type of this TestFailoverJobDetails.
        :type instance_type: str
        """

        self._instance_type = instance_type
