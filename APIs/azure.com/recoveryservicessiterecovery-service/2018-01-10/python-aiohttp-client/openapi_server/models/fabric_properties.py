# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_details import EncryptionDetails
from openapi_server.models.fabric_specific_details import FabricSpecificDetails
from openapi_server.models.health_error import HealthError
from openapi_server import util


class FabricProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bcdr_state: str=None, custom_details: FabricSpecificDetails=None, encryption_details: EncryptionDetails=None, friendly_name: str=None, health: str=None, health_error_details: List[HealthError]=None, internal_identifier: str=None, rollover_encryption_details: EncryptionDetails=None):
        """FabricProperties - a model defined in OpenAPI

        :param bcdr_state: The bcdr_state of this FabricProperties.
        :param custom_details: The custom_details of this FabricProperties.
        :param encryption_details: The encryption_details of this FabricProperties.
        :param friendly_name: The friendly_name of this FabricProperties.
        :param health: The health of this FabricProperties.
        :param health_error_details: The health_error_details of this FabricProperties.
        :param internal_identifier: The internal_identifier of this FabricProperties.
        :param rollover_encryption_details: The rollover_encryption_details of this FabricProperties.
        """
        self.openapi_types = {
            'bcdr_state': str,
            'custom_details': FabricSpecificDetails,
            'encryption_details': EncryptionDetails,
            'friendly_name': str,
            'health': str,
            'health_error_details': List[HealthError],
            'internal_identifier': str,
            'rollover_encryption_details': EncryptionDetails
        }

        self.attribute_map = {
            'bcdr_state': 'bcdrState',
            'custom_details': 'customDetails',
            'encryption_details': 'encryptionDetails',
            'friendly_name': 'friendlyName',
            'health': 'health',
            'health_error_details': 'healthErrorDetails',
            'internal_identifier': 'internalIdentifier',
            'rollover_encryption_details': 'rolloverEncryptionDetails'
        }

        self._bcdr_state = bcdr_state
        self._custom_details = custom_details
        self._encryption_details = encryption_details
        self._friendly_name = friendly_name
        self._health = health
        self._health_error_details = health_error_details
        self._internal_identifier = internal_identifier
        self._rollover_encryption_details = rollover_encryption_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FabricProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FabricProperties of this FabricProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bcdr_state(self):
        """Gets the bcdr_state of this FabricProperties.

        BCDR state of the fabric.

        :return: The bcdr_state of this FabricProperties.
        :rtype: str
        """
        return self._bcdr_state

    @bcdr_state.setter
    def bcdr_state(self, bcdr_state):
        """Sets the bcdr_state of this FabricProperties.

        BCDR state of the fabric.

        :param bcdr_state: The bcdr_state of this FabricProperties.
        :type bcdr_state: str
        """

        self._bcdr_state = bcdr_state

    @property
    def custom_details(self):
        """Gets the custom_details of this FabricProperties.


        :return: The custom_details of this FabricProperties.
        :rtype: FabricSpecificDetails
        """
        return self._custom_details

    @custom_details.setter
    def custom_details(self, custom_details):
        """Sets the custom_details of this FabricProperties.


        :param custom_details: The custom_details of this FabricProperties.
        :type custom_details: FabricSpecificDetails
        """

        self._custom_details = custom_details

    @property
    def encryption_details(self):
        """Gets the encryption_details of this FabricProperties.


        :return: The encryption_details of this FabricProperties.
        :rtype: EncryptionDetails
        """
        return self._encryption_details

    @encryption_details.setter
    def encryption_details(self, encryption_details):
        """Sets the encryption_details of this FabricProperties.


        :param encryption_details: The encryption_details of this FabricProperties.
        :type encryption_details: EncryptionDetails
        """

        self._encryption_details = encryption_details

    @property
    def friendly_name(self):
        """Gets the friendly_name of this FabricProperties.

        Friendly name of the fabric.

        :return: The friendly_name of this FabricProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this FabricProperties.

        Friendly name of the fabric.

        :param friendly_name: The friendly_name of this FabricProperties.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def health(self):
        """Gets the health of this FabricProperties.

        Health of fabric.

        :return: The health of this FabricProperties.
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this FabricProperties.

        Health of fabric.

        :param health: The health of this FabricProperties.
        :type health: str
        """

        self._health = health

    @property
    def health_error_details(self):
        """Gets the health_error_details of this FabricProperties.

        Fabric health error details.

        :return: The health_error_details of this FabricProperties.
        :rtype: List[HealthError]
        """
        return self._health_error_details

    @health_error_details.setter
    def health_error_details(self, health_error_details):
        """Sets the health_error_details of this FabricProperties.

        Fabric health error details.

        :param health_error_details: The health_error_details of this FabricProperties.
        :type health_error_details: List[HealthError]
        """

        self._health_error_details = health_error_details

    @property
    def internal_identifier(self):
        """Gets the internal_identifier of this FabricProperties.

        Dra Registration Id.

        :return: The internal_identifier of this FabricProperties.
        :rtype: str
        """
        return self._internal_identifier

    @internal_identifier.setter
    def internal_identifier(self, internal_identifier):
        """Sets the internal_identifier of this FabricProperties.

        Dra Registration Id.

        :param internal_identifier: The internal_identifier of this FabricProperties.
        :type internal_identifier: str
        """

        self._internal_identifier = internal_identifier

    @property
    def rollover_encryption_details(self):
        """Gets the rollover_encryption_details of this FabricProperties.


        :return: The rollover_encryption_details of this FabricProperties.
        :rtype: EncryptionDetails
        """
        return self._rollover_encryption_details

    @rollover_encryption_details.setter
    def rollover_encryption_details(self, rollover_encryption_details):
        """Sets the rollover_encryption_details of this FabricProperties.


        :param rollover_encryption_details: The rollover_encryption_details of this FabricProperties.
        :type rollover_encryption_details: EncryptionDetails
        """

        self._rollover_encryption_details = rollover_encryption_details
