# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recovery_plan_provider_specific_failover_input import RecoveryPlanProviderSpecificFailoverInput
from openapi_server import util


class RecoveryPlanTestFailoverInputProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failover_direction: str=None, network_id: str=None, network_type: str=None, provider_specific_details: List[RecoveryPlanProviderSpecificFailoverInput]=None, skip_test_failover_cleanup: str=None):
        """RecoveryPlanTestFailoverInputProperties - a model defined in OpenAPI

        :param failover_direction: The failover_direction of this RecoveryPlanTestFailoverInputProperties.
        :param network_id: The network_id of this RecoveryPlanTestFailoverInputProperties.
        :param network_type: The network_type of this RecoveryPlanTestFailoverInputProperties.
        :param provider_specific_details: The provider_specific_details of this RecoveryPlanTestFailoverInputProperties.
        :param skip_test_failover_cleanup: The skip_test_failover_cleanup of this RecoveryPlanTestFailoverInputProperties.
        """
        self.openapi_types = {
            'failover_direction': str,
            'network_id': str,
            'network_type': str,
            'provider_specific_details': List[RecoveryPlanProviderSpecificFailoverInput],
            'skip_test_failover_cleanup': str
        }

        self.attribute_map = {
            'failover_direction': 'failoverDirection',
            'network_id': 'networkId',
            'network_type': 'networkType',
            'provider_specific_details': 'providerSpecificDetails',
            'skip_test_failover_cleanup': 'skipTestFailoverCleanup'
        }

        self._failover_direction = failover_direction
        self._network_id = network_id
        self._network_type = network_type
        self._provider_specific_details = provider_specific_details
        self._skip_test_failover_cleanup = skip_test_failover_cleanup

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecoveryPlanTestFailoverInputProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecoveryPlanTestFailoverInputProperties of this RecoveryPlanTestFailoverInputProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failover_direction(self):
        """Gets the failover_direction of this RecoveryPlanTestFailoverInputProperties.

        The failover direction.

        :return: The failover_direction of this RecoveryPlanTestFailoverInputProperties.
        :rtype: str
        """
        return self._failover_direction

    @failover_direction.setter
    def failover_direction(self, failover_direction):
        """Sets the failover_direction of this RecoveryPlanTestFailoverInputProperties.

        The failover direction.

        :param failover_direction: The failover_direction of this RecoveryPlanTestFailoverInputProperties.
        :type failover_direction: str
        """
        allowed_values = ["PrimaryToRecovery", "RecoveryToPrimary"]  # noqa: E501
        if failover_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `failover_direction` ({0}), must be one of {1}"
                .format(failover_direction, allowed_values)
            )

        self._failover_direction = failover_direction

    @property
    def network_id(self):
        """Gets the network_id of this RecoveryPlanTestFailoverInputProperties.

        The Id of the network to be used for test failover.

        :return: The network_id of this RecoveryPlanTestFailoverInputProperties.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this RecoveryPlanTestFailoverInputProperties.

        The Id of the network to be used for test failover.

        :param network_id: The network_id of this RecoveryPlanTestFailoverInputProperties.
        :type network_id: str
        """

        self._network_id = network_id

    @property
    def network_type(self):
        """Gets the network_type of this RecoveryPlanTestFailoverInputProperties.

        The network type to be used for test failover.

        :return: The network_type of this RecoveryPlanTestFailoverInputProperties.
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this RecoveryPlanTestFailoverInputProperties.

        The network type to be used for test failover.

        :param network_type: The network_type of this RecoveryPlanTestFailoverInputProperties.
        :type network_type: str
        """
        if network_type is None:
            raise ValueError("Invalid value for `network_type`, must not be `None`")

        self._network_type = network_type

    @property
    def provider_specific_details(self):
        """Gets the provider_specific_details of this RecoveryPlanTestFailoverInputProperties.

        The provider specific properties.

        :return: The provider_specific_details of this RecoveryPlanTestFailoverInputProperties.
        :rtype: List[RecoveryPlanProviderSpecificFailoverInput]
        """
        return self._provider_specific_details

    @provider_specific_details.setter
    def provider_specific_details(self, provider_specific_details):
        """Sets the provider_specific_details of this RecoveryPlanTestFailoverInputProperties.

        The provider specific properties.

        :param provider_specific_details: The provider_specific_details of this RecoveryPlanTestFailoverInputProperties.
        :type provider_specific_details: List[RecoveryPlanProviderSpecificFailoverInput]
        """

        self._provider_specific_details = provider_specific_details

    @property
    def skip_test_failover_cleanup(self):
        """Gets the skip_test_failover_cleanup of this RecoveryPlanTestFailoverInputProperties.

        A value indicating whether the test failover cleanup is to be skipped.

        :return: The skip_test_failover_cleanup of this RecoveryPlanTestFailoverInputProperties.
        :rtype: str
        """
        return self._skip_test_failover_cleanup

    @skip_test_failover_cleanup.setter
    def skip_test_failover_cleanup(self, skip_test_failover_cleanup):
        """Sets the skip_test_failover_cleanup of this RecoveryPlanTestFailoverInputProperties.

        A value indicating whether the test failover cleanup is to be skipped.

        :param skip_test_failover_cleanup: The skip_test_failover_cleanup of this RecoveryPlanTestFailoverInputProperties.
        :type skip_test_failover_cleanup: str
        """

        self._skip_test_failover_cleanup = skip_test_failover_cleanup
