# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_error_summary import HealthErrorSummary
from openapi_server import util


class ResourceHealthSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categorized_resource_counts: Dict[str, int]=None, issues: List[HealthErrorSummary]=None, resource_count: int=None):
        """ResourceHealthSummary - a model defined in OpenAPI

        :param categorized_resource_counts: The categorized_resource_counts of this ResourceHealthSummary.
        :param issues: The issues of this ResourceHealthSummary.
        :param resource_count: The resource_count of this ResourceHealthSummary.
        """
        self.openapi_types = {
            'categorized_resource_counts': Dict[str, int],
            'issues': List[HealthErrorSummary],
            'resource_count': int
        }

        self.attribute_map = {
            'categorized_resource_counts': 'categorizedResourceCounts',
            'issues': 'issues',
            'resource_count': 'resourceCount'
        }

        self._categorized_resource_counts = categorized_resource_counts
        self._issues = issues
        self._resource_count = resource_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceHealthSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceHealthSummary of this ResourceHealthSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categorized_resource_counts(self):
        """Gets the categorized_resource_counts of this ResourceHealthSummary.

        The categorized resource counts.

        :return: The categorized_resource_counts of this ResourceHealthSummary.
        :rtype: Dict[str, int]
        """
        return self._categorized_resource_counts

    @categorized_resource_counts.setter
    def categorized_resource_counts(self, categorized_resource_counts):
        """Sets the categorized_resource_counts of this ResourceHealthSummary.

        The categorized resource counts.

        :param categorized_resource_counts: The categorized_resource_counts of this ResourceHealthSummary.
        :type categorized_resource_counts: Dict[str, int]
        """

        self._categorized_resource_counts = categorized_resource_counts

    @property
    def issues(self):
        """Gets the issues of this ResourceHealthSummary.

        The list of summary of health errors across the resources under the container.

        :return: The issues of this ResourceHealthSummary.
        :rtype: List[HealthErrorSummary]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this ResourceHealthSummary.

        The list of summary of health errors across the resources under the container.

        :param issues: The issues of this ResourceHealthSummary.
        :type issues: List[HealthErrorSummary]
        """

        self._issues = issues

    @property
    def resource_count(self):
        """Gets the resource_count of this ResourceHealthSummary.

        The count of total resources under the container.

        :return: The resource_count of this ResourceHealthSummary.
        :rtype: int
        """
        return self._resource_count

    @resource_count.setter
    def resource_count(self, resource_count):
        """Sets the resource_count of this ResourceHealthSummary.

        The count of total resources under the container.

        :param resource_count: The resource_count of this ResourceHealthSummary.
        :type resource_count: int
        """

        self._resource_count = resource_count
