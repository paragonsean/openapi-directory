# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configuration_settings import ConfigurationSettings
from openapi_server.models.disk_details import DiskDetails
from openapi_server.models.os_details import OSDetails
from openapi_server import util


class HyperVVirtualMachineDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_details: List[DiskDetails]=None, generation: str=None, has_fibre_channel_adapter: str=None, has_physical_disk: str=None, has_shared_vhd: str=None, os_details: OSDetails=None, source_item_id: str=None, instance_type: str=None):
        """HyperVVirtualMachineDetails - a model defined in OpenAPI

        :param disk_details: The disk_details of this HyperVVirtualMachineDetails.
        :param generation: The generation of this HyperVVirtualMachineDetails.
        :param has_fibre_channel_adapter: The has_fibre_channel_adapter of this HyperVVirtualMachineDetails.
        :param has_physical_disk: The has_physical_disk of this HyperVVirtualMachineDetails.
        :param has_shared_vhd: The has_shared_vhd of this HyperVVirtualMachineDetails.
        :param os_details: The os_details of this HyperVVirtualMachineDetails.
        :param source_item_id: The source_item_id of this HyperVVirtualMachineDetails.
        :param instance_type: The instance_type of this HyperVVirtualMachineDetails.
        """
        self.openapi_types = {
            'disk_details': List[DiskDetails],
            'generation': str,
            'has_fibre_channel_adapter': str,
            'has_physical_disk': str,
            'has_shared_vhd': str,
            'os_details': OSDetails,
            'source_item_id': str,
            'instance_type': str
        }

        self.attribute_map = {
            'disk_details': 'diskDetails',
            'generation': 'generation',
            'has_fibre_channel_adapter': 'hasFibreChannelAdapter',
            'has_physical_disk': 'hasPhysicalDisk',
            'has_shared_vhd': 'hasSharedVhd',
            'os_details': 'osDetails',
            'source_item_id': 'sourceItemId',
            'instance_type': 'instanceType'
        }

        self._disk_details = disk_details
        self._generation = generation
        self._has_fibre_channel_adapter = has_fibre_channel_adapter
        self._has_physical_disk = has_physical_disk
        self._has_shared_vhd = has_shared_vhd
        self._os_details = os_details
        self._source_item_id = source_item_id
        self._instance_type = instance_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HyperVVirtualMachineDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HyperVVirtualMachineDetails of this HyperVVirtualMachineDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_details(self):
        """Gets the disk_details of this HyperVVirtualMachineDetails.

        The Last successful failover time.

        :return: The disk_details of this HyperVVirtualMachineDetails.
        :rtype: List[DiskDetails]
        """
        return self._disk_details

    @disk_details.setter
    def disk_details(self, disk_details):
        """Sets the disk_details of this HyperVVirtualMachineDetails.

        The Last successful failover time.

        :param disk_details: The disk_details of this HyperVVirtualMachineDetails.
        :type disk_details: List[DiskDetails]
        """

        self._disk_details = disk_details

    @property
    def generation(self):
        """Gets the generation of this HyperVVirtualMachineDetails.

        The id of the object in fabric.

        :return: The generation of this HyperVVirtualMachineDetails.
        :rtype: str
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this HyperVVirtualMachineDetails.

        The id of the object in fabric.

        :param generation: The generation of this HyperVVirtualMachineDetails.
        :type generation: str
        """

        self._generation = generation

    @property
    def has_fibre_channel_adapter(self):
        """Gets the has_fibre_channel_adapter of this HyperVVirtualMachineDetails.

        A value indicating whether the VM has a fibre channel adapter attached. String value of {SrsDataContract.PresenceStatus} enum.

        :return: The has_fibre_channel_adapter of this HyperVVirtualMachineDetails.
        :rtype: str
        """
        return self._has_fibre_channel_adapter

    @has_fibre_channel_adapter.setter
    def has_fibre_channel_adapter(self, has_fibre_channel_adapter):
        """Sets the has_fibre_channel_adapter of this HyperVVirtualMachineDetails.

        A value indicating whether the VM has a fibre channel adapter attached. String value of {SrsDataContract.PresenceStatus} enum.

        :param has_fibre_channel_adapter: The has_fibre_channel_adapter of this HyperVVirtualMachineDetails.
        :type has_fibre_channel_adapter: str
        """
        allowed_values = ["Unknown", "Present", "NotPresent"]  # noqa: E501
        if has_fibre_channel_adapter not in allowed_values:
            raise ValueError(
                "Invalid value for `has_fibre_channel_adapter` ({0}), must be one of {1}"
                .format(has_fibre_channel_adapter, allowed_values)
            )

        self._has_fibre_channel_adapter = has_fibre_channel_adapter

    @property
    def has_physical_disk(self):
        """Gets the has_physical_disk of this HyperVVirtualMachineDetails.

        A value indicating whether the VM has a physical disk attached. String value of {SrsDataContract.PresenceStatus} enum.

        :return: The has_physical_disk of this HyperVVirtualMachineDetails.
        :rtype: str
        """
        return self._has_physical_disk

    @has_physical_disk.setter
    def has_physical_disk(self, has_physical_disk):
        """Sets the has_physical_disk of this HyperVVirtualMachineDetails.

        A value indicating whether the VM has a physical disk attached. String value of {SrsDataContract.PresenceStatus} enum.

        :param has_physical_disk: The has_physical_disk of this HyperVVirtualMachineDetails.
        :type has_physical_disk: str
        """
        allowed_values = ["Unknown", "Present", "NotPresent"]  # noqa: E501
        if has_physical_disk not in allowed_values:
            raise ValueError(
                "Invalid value for `has_physical_disk` ({0}), must be one of {1}"
                .format(has_physical_disk, allowed_values)
            )

        self._has_physical_disk = has_physical_disk

    @property
    def has_shared_vhd(self):
        """Gets the has_shared_vhd of this HyperVVirtualMachineDetails.

        A value indicating whether the VM has a shared VHD attached. String value of {SrsDataContract.PresenceStatus} enum.

        :return: The has_shared_vhd of this HyperVVirtualMachineDetails.
        :rtype: str
        """
        return self._has_shared_vhd

    @has_shared_vhd.setter
    def has_shared_vhd(self, has_shared_vhd):
        """Sets the has_shared_vhd of this HyperVVirtualMachineDetails.

        A value indicating whether the VM has a shared VHD attached. String value of {SrsDataContract.PresenceStatus} enum.

        :param has_shared_vhd: The has_shared_vhd of this HyperVVirtualMachineDetails.
        :type has_shared_vhd: str
        """
        allowed_values = ["Unknown", "Present", "NotPresent"]  # noqa: E501
        if has_shared_vhd not in allowed_values:
            raise ValueError(
                "Invalid value for `has_shared_vhd` ({0}), must be one of {1}"
                .format(has_shared_vhd, allowed_values)
            )

        self._has_shared_vhd = has_shared_vhd

    @property
    def os_details(self):
        """Gets the os_details of this HyperVVirtualMachineDetails.


        :return: The os_details of this HyperVVirtualMachineDetails.
        :rtype: OSDetails
        """
        return self._os_details

    @os_details.setter
    def os_details(self, os_details):
        """Sets the os_details of this HyperVVirtualMachineDetails.


        :param os_details: The os_details of this HyperVVirtualMachineDetails.
        :type os_details: OSDetails
        """

        self._os_details = os_details

    @property
    def source_item_id(self):
        """Gets the source_item_id of this HyperVVirtualMachineDetails.

        The source id of the object.

        :return: The source_item_id of this HyperVVirtualMachineDetails.
        :rtype: str
        """
        return self._source_item_id

    @source_item_id.setter
    def source_item_id(self, source_item_id):
        """Sets the source_item_id of this HyperVVirtualMachineDetails.

        The source id of the object.

        :param source_item_id: The source_item_id of this HyperVVirtualMachineDetails.
        :type source_item_id: str
        """

        self._source_item_id = source_item_id

    @property
    def instance_type(self):
        """Gets the instance_type of this HyperVVirtualMachineDetails.

        Gets the class type. Overridden in derived classes.

        :return: The instance_type of this HyperVVirtualMachineDetails.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this HyperVVirtualMachineDetails.

        Gets the class type. Overridden in derived classes.

        :param instance_type: The instance_type of this HyperVVirtualMachineDetails.
        :type instance_type: str
        """

        self._instance_type = instance_type
