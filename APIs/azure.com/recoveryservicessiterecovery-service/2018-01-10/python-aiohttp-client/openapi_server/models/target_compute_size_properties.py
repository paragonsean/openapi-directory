# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_size_error_details import ComputeSizeErrorDetails
from openapi_server import util


class TargetComputeSizeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu_cores_count: int=None, errors: List[ComputeSizeErrorDetails]=None, friendly_name: str=None, high_iops_supported: str=None, max_data_disk_count: int=None, max_nics_count: int=None, memory_in_gb: float=None, name: str=None):
        """TargetComputeSizeProperties - a model defined in OpenAPI

        :param cpu_cores_count: The cpu_cores_count of this TargetComputeSizeProperties.
        :param errors: The errors of this TargetComputeSizeProperties.
        :param friendly_name: The friendly_name of this TargetComputeSizeProperties.
        :param high_iops_supported: The high_iops_supported of this TargetComputeSizeProperties.
        :param max_data_disk_count: The max_data_disk_count of this TargetComputeSizeProperties.
        :param max_nics_count: The max_nics_count of this TargetComputeSizeProperties.
        :param memory_in_gb: The memory_in_gb of this TargetComputeSizeProperties.
        :param name: The name of this TargetComputeSizeProperties.
        """
        self.openapi_types = {
            'cpu_cores_count': int,
            'errors': List[ComputeSizeErrorDetails],
            'friendly_name': str,
            'high_iops_supported': str,
            'max_data_disk_count': int,
            'max_nics_count': int,
            'memory_in_gb': float,
            'name': str
        }

        self.attribute_map = {
            'cpu_cores_count': 'cpuCoresCount',
            'errors': 'errors',
            'friendly_name': 'friendlyName',
            'high_iops_supported': 'highIopsSupported',
            'max_data_disk_count': 'maxDataDiskCount',
            'max_nics_count': 'maxNicsCount',
            'memory_in_gb': 'memoryInGB',
            'name': 'name'
        }

        self._cpu_cores_count = cpu_cores_count
        self._errors = errors
        self._friendly_name = friendly_name
        self._high_iops_supported = high_iops_supported
        self._max_data_disk_count = max_data_disk_count
        self._max_nics_count = max_nics_count
        self._memory_in_gb = memory_in_gb
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetComputeSizeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetComputeSizeProperties of this TargetComputeSizeProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu_cores_count(self):
        """Gets the cpu_cores_count of this TargetComputeSizeProperties.

        The maximum cpu cores count supported by target compute size.

        :return: The cpu_cores_count of this TargetComputeSizeProperties.
        :rtype: int
        """
        return self._cpu_cores_count

    @cpu_cores_count.setter
    def cpu_cores_count(self, cpu_cores_count):
        """Sets the cpu_cores_count of this TargetComputeSizeProperties.

        The maximum cpu cores count supported by target compute size.

        :param cpu_cores_count: The cpu_cores_count of this TargetComputeSizeProperties.
        :type cpu_cores_count: int
        """

        self._cpu_cores_count = cpu_cores_count

    @property
    def errors(self):
        """Gets the errors of this TargetComputeSizeProperties.

        The reasons why the target compute size is not applicable for the protected item.

        :return: The errors of this TargetComputeSizeProperties.
        :rtype: List[ComputeSizeErrorDetails]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this TargetComputeSizeProperties.

        The reasons why the target compute size is not applicable for the protected item.

        :param errors: The errors of this TargetComputeSizeProperties.
        :type errors: List[ComputeSizeErrorDetails]
        """

        self._errors = errors

    @property
    def friendly_name(self):
        """Gets the friendly_name of this TargetComputeSizeProperties.

        Target compute size display name.

        :return: The friendly_name of this TargetComputeSizeProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this TargetComputeSizeProperties.

        Target compute size display name.

        :param friendly_name: The friendly_name of this TargetComputeSizeProperties.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def high_iops_supported(self):
        """Gets the high_iops_supported of this TargetComputeSizeProperties.

        The value indicating whether the target compute size supports high Iops.

        :return: The high_iops_supported of this TargetComputeSizeProperties.
        :rtype: str
        """
        return self._high_iops_supported

    @high_iops_supported.setter
    def high_iops_supported(self, high_iops_supported):
        """Sets the high_iops_supported of this TargetComputeSizeProperties.

        The value indicating whether the target compute size supports high Iops.

        :param high_iops_supported: The high_iops_supported of this TargetComputeSizeProperties.
        :type high_iops_supported: str
        """

        self._high_iops_supported = high_iops_supported

    @property
    def max_data_disk_count(self):
        """Gets the max_data_disk_count of this TargetComputeSizeProperties.

        The maximum data disks count supported by target compute size.

        :return: The max_data_disk_count of this TargetComputeSizeProperties.
        :rtype: int
        """
        return self._max_data_disk_count

    @max_data_disk_count.setter
    def max_data_disk_count(self, max_data_disk_count):
        """Sets the max_data_disk_count of this TargetComputeSizeProperties.

        The maximum data disks count supported by target compute size.

        :param max_data_disk_count: The max_data_disk_count of this TargetComputeSizeProperties.
        :type max_data_disk_count: int
        """

        self._max_data_disk_count = max_data_disk_count

    @property
    def max_nics_count(self):
        """Gets the max_nics_count of this TargetComputeSizeProperties.

        The maximum Nics count supported by target compute size.

        :return: The max_nics_count of this TargetComputeSizeProperties.
        :rtype: int
        """
        return self._max_nics_count

    @max_nics_count.setter
    def max_nics_count(self, max_nics_count):
        """Sets the max_nics_count of this TargetComputeSizeProperties.

        The maximum Nics count supported by target compute size.

        :param max_nics_count: The max_nics_count of this TargetComputeSizeProperties.
        :type max_nics_count: int
        """

        self._max_nics_count = max_nics_count

    @property
    def memory_in_gb(self):
        """Gets the memory_in_gb of this TargetComputeSizeProperties.

        The maximum memory in GB supported by target compute size.

        :return: The memory_in_gb of this TargetComputeSizeProperties.
        :rtype: float
        """
        return self._memory_in_gb

    @memory_in_gb.setter
    def memory_in_gb(self, memory_in_gb):
        """Sets the memory_in_gb of this TargetComputeSizeProperties.

        The maximum memory in GB supported by target compute size.

        :param memory_in_gb: The memory_in_gb of this TargetComputeSizeProperties.
        :type memory_in_gb: float
        """

        self._memory_in_gb = memory_in_gb

    @property
    def name(self):
        """Gets the name of this TargetComputeSizeProperties.

        Target compute size name.

        :return: The name of this TargetComputeSizeProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TargetComputeSizeProperties.

        Target compute size name.

        :param name: The name of this TargetComputeSizeProperties.
        :type name: str
        """

        self._name = name
