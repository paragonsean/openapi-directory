# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subnet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_list: List[str]=None, friendly_name: str=None, name: str=None):
        """Subnet - a model defined in OpenAPI

        :param address_list: The address_list of this Subnet.
        :param friendly_name: The friendly_name of this Subnet.
        :param name: The name of this Subnet.
        """
        self.openapi_types = {
            'address_list': List[str],
            'friendly_name': str,
            'name': str
        }

        self.attribute_map = {
            'address_list': 'addressList',
            'friendly_name': 'friendlyName',
            'name': 'name'
        }

        self._address_list = address_list
        self._friendly_name = friendly_name
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subnet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subnet of this Subnet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_list(self):
        """Gets the address_list of this Subnet.

        The list of addresses for the subnet.

        :return: The address_list of this Subnet.
        :rtype: List[str]
        """
        return self._address_list

    @address_list.setter
    def address_list(self, address_list):
        """Sets the address_list of this Subnet.

        The list of addresses for the subnet.

        :param address_list: The address_list of this Subnet.
        :type address_list: List[str]
        """

        self._address_list = address_list

    @property
    def friendly_name(self):
        """Gets the friendly_name of this Subnet.

        The subnet friendly name.

        :return: The friendly_name of this Subnet.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this Subnet.

        The subnet friendly name.

        :param friendly_name: The friendly_name of this Subnet.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def name(self):
        """Gets the name of this Subnet.

        The subnet name.

        :return: The name of this Subnet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subnet.

        The subnet name.

        :param name: The name of this Subnet.
        :type name: str
        """

        self._name = name
