# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replication_provider_specific_container_mapping_input import ReplicationProviderSpecificContainerMappingInput
from openapi_server import util


class VMwareCbtContainerMappingInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_vault_id: str=None, key_vault_uri: str=None, service_bus_connection_string_secret_name: str=None, storage_account_id: str=None, storage_account_sas_secret_name: str=None, target_location: str=None, instance_type: str=None):
        """VMwareCbtContainerMappingInput - a model defined in OpenAPI

        :param key_vault_id: The key_vault_id of this VMwareCbtContainerMappingInput.
        :param key_vault_uri: The key_vault_uri of this VMwareCbtContainerMappingInput.
        :param service_bus_connection_string_secret_name: The service_bus_connection_string_secret_name of this VMwareCbtContainerMappingInput.
        :param storage_account_id: The storage_account_id of this VMwareCbtContainerMappingInput.
        :param storage_account_sas_secret_name: The storage_account_sas_secret_name of this VMwareCbtContainerMappingInput.
        :param target_location: The target_location of this VMwareCbtContainerMappingInput.
        :param instance_type: The instance_type of this VMwareCbtContainerMappingInput.
        """
        self.openapi_types = {
            'key_vault_id': str,
            'key_vault_uri': str,
            'service_bus_connection_string_secret_name': str,
            'storage_account_id': str,
            'storage_account_sas_secret_name': str,
            'target_location': str,
            'instance_type': str
        }

        self.attribute_map = {
            'key_vault_id': 'keyVaultId',
            'key_vault_uri': 'keyVaultUri',
            'service_bus_connection_string_secret_name': 'serviceBusConnectionStringSecretName',
            'storage_account_id': 'storageAccountId',
            'storage_account_sas_secret_name': 'storageAccountSasSecretName',
            'target_location': 'targetLocation',
            'instance_type': 'instanceType'
        }

        self._key_vault_id = key_vault_id
        self._key_vault_uri = key_vault_uri
        self._service_bus_connection_string_secret_name = service_bus_connection_string_secret_name
        self._storage_account_id = storage_account_id
        self._storage_account_sas_secret_name = storage_account_sas_secret_name
        self._target_location = target_location
        self._instance_type = instance_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VMwareCbtContainerMappingInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VMwareCbtContainerMappingInput of this VMwareCbtContainerMappingInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_vault_id(self):
        """Gets the key_vault_id of this VMwareCbtContainerMappingInput.

        The target key vault ARM Id.

        :return: The key_vault_id of this VMwareCbtContainerMappingInput.
        :rtype: str
        """
        return self._key_vault_id

    @key_vault_id.setter
    def key_vault_id(self, key_vault_id):
        """Sets the key_vault_id of this VMwareCbtContainerMappingInput.

        The target key vault ARM Id.

        :param key_vault_id: The key_vault_id of this VMwareCbtContainerMappingInput.
        :type key_vault_id: str
        """
        if key_vault_id is None:
            raise ValueError("Invalid value for `key_vault_id`, must not be `None`")

        self._key_vault_id = key_vault_id

    @property
    def key_vault_uri(self):
        """Gets the key_vault_uri of this VMwareCbtContainerMappingInput.

        The target key vault URL.

        :return: The key_vault_uri of this VMwareCbtContainerMappingInput.
        :rtype: str
        """
        return self._key_vault_uri

    @key_vault_uri.setter
    def key_vault_uri(self, key_vault_uri):
        """Sets the key_vault_uri of this VMwareCbtContainerMappingInput.

        The target key vault URL.

        :param key_vault_uri: The key_vault_uri of this VMwareCbtContainerMappingInput.
        :type key_vault_uri: str
        """
        if key_vault_uri is None:
            raise ValueError("Invalid value for `key_vault_uri`, must not be `None`")

        self._key_vault_uri = key_vault_uri

    @property
    def service_bus_connection_string_secret_name(self):
        """Gets the service_bus_connection_string_secret_name of this VMwareCbtContainerMappingInput.

        The secret name of the service bus connection string.

        :return: The service_bus_connection_string_secret_name of this VMwareCbtContainerMappingInput.
        :rtype: str
        """
        return self._service_bus_connection_string_secret_name

    @service_bus_connection_string_secret_name.setter
    def service_bus_connection_string_secret_name(self, service_bus_connection_string_secret_name):
        """Sets the service_bus_connection_string_secret_name of this VMwareCbtContainerMappingInput.

        The secret name of the service bus connection string.

        :param service_bus_connection_string_secret_name: The service_bus_connection_string_secret_name of this VMwareCbtContainerMappingInput.
        :type service_bus_connection_string_secret_name: str
        """
        if service_bus_connection_string_secret_name is None:
            raise ValueError("Invalid value for `service_bus_connection_string_secret_name`, must not be `None`")

        self._service_bus_connection_string_secret_name = service_bus_connection_string_secret_name

    @property
    def storage_account_id(self):
        """Gets the storage_account_id of this VMwareCbtContainerMappingInput.

        The storage account ARM Id.

        :return: The storage_account_id of this VMwareCbtContainerMappingInput.
        :rtype: str
        """
        return self._storage_account_id

    @storage_account_id.setter
    def storage_account_id(self, storage_account_id):
        """Sets the storage_account_id of this VMwareCbtContainerMappingInput.

        The storage account ARM Id.

        :param storage_account_id: The storage_account_id of this VMwareCbtContainerMappingInput.
        :type storage_account_id: str
        """
        if storage_account_id is None:
            raise ValueError("Invalid value for `storage_account_id`, must not be `None`")

        self._storage_account_id = storage_account_id

    @property
    def storage_account_sas_secret_name(self):
        """Gets the storage_account_sas_secret_name of this VMwareCbtContainerMappingInput.

        The secret name of the storage account.

        :return: The storage_account_sas_secret_name of this VMwareCbtContainerMappingInput.
        :rtype: str
        """
        return self._storage_account_sas_secret_name

    @storage_account_sas_secret_name.setter
    def storage_account_sas_secret_name(self, storage_account_sas_secret_name):
        """Sets the storage_account_sas_secret_name of this VMwareCbtContainerMappingInput.

        The secret name of the storage account.

        :param storage_account_sas_secret_name: The storage_account_sas_secret_name of this VMwareCbtContainerMappingInput.
        :type storage_account_sas_secret_name: str
        """
        if storage_account_sas_secret_name is None:
            raise ValueError("Invalid value for `storage_account_sas_secret_name`, must not be `None`")

        self._storage_account_sas_secret_name = storage_account_sas_secret_name

    @property
    def target_location(self):
        """Gets the target_location of this VMwareCbtContainerMappingInput.

        The target location.

        :return: The target_location of this VMwareCbtContainerMappingInput.
        :rtype: str
        """
        return self._target_location

    @target_location.setter
    def target_location(self, target_location):
        """Sets the target_location of this VMwareCbtContainerMappingInput.

        The target location.

        :param target_location: The target_location of this VMwareCbtContainerMappingInput.
        :type target_location: str
        """
        if target_location is None:
            raise ValueError("Invalid value for `target_location`, must not be `None`")

        self._target_location = target_location

    @property
    def instance_type(self):
        """Gets the instance_type of this VMwareCbtContainerMappingInput.

        The class type.

        :return: The instance_type of this VMwareCbtContainerMappingInput.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this VMwareCbtContainerMappingInput.

        The class type.

        :param instance_type: The instance_type of this VMwareCbtContainerMappingInput.
        :type instance_type: str
        """

        self._instance_type = instance_type
