/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HealthError;
import org.openapitools.client.model.MobilityServiceUpdate;
import org.openapitools.client.model.VersionDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the Process Server.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProcessServer {
  public static final String SERIALIZED_NAME_AGENT_EXPIRY_DATE = "agentExpiryDate";
  @SerializedName(SERIALIZED_NAME_AGENT_EXPIRY_DATE)
  private OffsetDateTime agentExpiryDate;

  public static final String SERIALIZED_NAME_AGENT_VERSION = "agentVersion";
  @SerializedName(SERIALIZED_NAME_AGENT_VERSION)
  private String agentVersion;

  public static final String SERIALIZED_NAME_AGENT_VERSION_DETAILS = "agentVersionDetails";
  @SerializedName(SERIALIZED_NAME_AGENT_VERSION_DETAILS)
  private VersionDetails agentVersionDetails;

  public static final String SERIALIZED_NAME_AVAILABLE_MEMORY_IN_BYTES = "availableMemoryInBytes";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_MEMORY_IN_BYTES)
  private Long availableMemoryInBytes;

  public static final String SERIALIZED_NAME_AVAILABLE_SPACE_IN_BYTES = "availableSpaceInBytes";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_SPACE_IN_BYTES)
  private Long availableSpaceInBytes;

  public static final String SERIALIZED_NAME_CPU_LOAD = "cpuLoad";
  @SerializedName(SERIALIZED_NAME_CPU_LOAD)
  private String cpuLoad;

  public static final String SERIALIZED_NAME_CPU_LOAD_STATUS = "cpuLoadStatus";
  @SerializedName(SERIALIZED_NAME_CPU_LOAD_STATUS)
  private String cpuLoadStatus;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_HEALTH_ERRORS = "healthErrors";
  @SerializedName(SERIALIZED_NAME_HEALTH_ERRORS)
  private List<HealthError> healthErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST_ID = "hostId";
  @SerializedName(SERIALIZED_NAME_HOST_ID)
  private String hostId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LAST_HEARTBEAT = "lastHeartbeat";
  @SerializedName(SERIALIZED_NAME_LAST_HEARTBEAT)
  private OffsetDateTime lastHeartbeat;

  public static final String SERIALIZED_NAME_MACHINE_COUNT = "machineCount";
  @SerializedName(SERIALIZED_NAME_MACHINE_COUNT)
  private String machineCount;

  public static final String SERIALIZED_NAME_MEMORY_USAGE_STATUS = "memoryUsageStatus";
  @SerializedName(SERIALIZED_NAME_MEMORY_USAGE_STATUS)
  private String memoryUsageStatus;

  public static final String SERIALIZED_NAME_MOBILITY_SERVICE_UPDATES = "mobilityServiceUpdates";
  @SerializedName(SERIALIZED_NAME_MOBILITY_SERVICE_UPDATES)
  private List<MobilityServiceUpdate> mobilityServiceUpdates = new ArrayList<>();

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private String osType;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_PS_SERVICE_STATUS = "psServiceStatus";
  @SerializedName(SERIALIZED_NAME_PS_SERVICE_STATUS)
  private String psServiceStatus;

  public static final String SERIALIZED_NAME_REPLICATION_PAIR_COUNT = "replicationPairCount";
  @SerializedName(SERIALIZED_NAME_REPLICATION_PAIR_COUNT)
  private String replicationPairCount;

  public static final String SERIALIZED_NAME_SPACE_USAGE_STATUS = "spaceUsageStatus";
  @SerializedName(SERIALIZED_NAME_SPACE_USAGE_STATUS)
  private String spaceUsageStatus;

  public static final String SERIALIZED_NAME_SSL_CERT_EXPIRY_DATE = "sslCertExpiryDate";
  @SerializedName(SERIALIZED_NAME_SSL_CERT_EXPIRY_DATE)
  private OffsetDateTime sslCertExpiryDate;

  public static final String SERIALIZED_NAME_SSL_CERT_EXPIRY_REMAINING_DAYS = "sslCertExpiryRemainingDays";
  @SerializedName(SERIALIZED_NAME_SSL_CERT_EXPIRY_REMAINING_DAYS)
  private Integer sslCertExpiryRemainingDays;

  public static final String SERIALIZED_NAME_SYSTEM_LOAD = "systemLoad";
  @SerializedName(SERIALIZED_NAME_SYSTEM_LOAD)
  private String systemLoad;

  public static final String SERIALIZED_NAME_SYSTEM_LOAD_STATUS = "systemLoadStatus";
  @SerializedName(SERIALIZED_NAME_SYSTEM_LOAD_STATUS)
  private String systemLoadStatus;

  public static final String SERIALIZED_NAME_TOTAL_MEMORY_IN_BYTES = "totalMemoryInBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_MEMORY_IN_BYTES)
  private Long totalMemoryInBytes;

  public static final String SERIALIZED_NAME_TOTAL_SPACE_IN_BYTES = "totalSpaceInBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_SPACE_IN_BYTES)
  private Long totalSpaceInBytes;

  public static final String SERIALIZED_NAME_VERSION_STATUS = "versionStatus";
  @SerializedName(SERIALIZED_NAME_VERSION_STATUS)
  private String versionStatus;

  public ProcessServer() {
  }

  public ProcessServer agentExpiryDate(OffsetDateTime agentExpiryDate) {
    this.agentExpiryDate = agentExpiryDate;
    return this;
  }

  /**
   * Agent expiry date.
   * @return agentExpiryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAgentExpiryDate() {
    return agentExpiryDate;
  }

  public void setAgentExpiryDate(OffsetDateTime agentExpiryDate) {
    this.agentExpiryDate = agentExpiryDate;
  }


  public ProcessServer agentVersion(String agentVersion) {
    this.agentVersion = agentVersion;
    return this;
  }

  /**
   * The version of the scout component on the server.
   * @return agentVersion
   */
  @javax.annotation.Nullable
  public String getAgentVersion() {
    return agentVersion;
  }

  public void setAgentVersion(String agentVersion) {
    this.agentVersion = agentVersion;
  }


  public ProcessServer agentVersionDetails(VersionDetails agentVersionDetails) {
    this.agentVersionDetails = agentVersionDetails;
    return this;
  }

  /**
   * Get agentVersionDetails
   * @return agentVersionDetails
   */
  @javax.annotation.Nullable
  public VersionDetails getAgentVersionDetails() {
    return agentVersionDetails;
  }

  public void setAgentVersionDetails(VersionDetails agentVersionDetails) {
    this.agentVersionDetails = agentVersionDetails;
  }


  public ProcessServer availableMemoryInBytes(Long availableMemoryInBytes) {
    this.availableMemoryInBytes = availableMemoryInBytes;
    return this;
  }

  /**
   * The available memory.
   * @return availableMemoryInBytes
   */
  @javax.annotation.Nullable
  public Long getAvailableMemoryInBytes() {
    return availableMemoryInBytes;
  }

  public void setAvailableMemoryInBytes(Long availableMemoryInBytes) {
    this.availableMemoryInBytes = availableMemoryInBytes;
  }


  public ProcessServer availableSpaceInBytes(Long availableSpaceInBytes) {
    this.availableSpaceInBytes = availableSpaceInBytes;
    return this;
  }

  /**
   * The available space.
   * @return availableSpaceInBytes
   */
  @javax.annotation.Nullable
  public Long getAvailableSpaceInBytes() {
    return availableSpaceInBytes;
  }

  public void setAvailableSpaceInBytes(Long availableSpaceInBytes) {
    this.availableSpaceInBytes = availableSpaceInBytes;
  }


  public ProcessServer cpuLoad(String cpuLoad) {
    this.cpuLoad = cpuLoad;
    return this;
  }

  /**
   * The percentage of the CPU load.
   * @return cpuLoad
   */
  @javax.annotation.Nullable
  public String getCpuLoad() {
    return cpuLoad;
  }

  public void setCpuLoad(String cpuLoad) {
    this.cpuLoad = cpuLoad;
  }


  public ProcessServer cpuLoadStatus(String cpuLoadStatus) {
    this.cpuLoadStatus = cpuLoadStatus;
    return this;
  }

  /**
   * The CPU load status.
   * @return cpuLoadStatus
   */
  @javax.annotation.Nullable
  public String getCpuLoadStatus() {
    return cpuLoadStatus;
  }

  public void setCpuLoadStatus(String cpuLoadStatus) {
    this.cpuLoadStatus = cpuLoadStatus;
  }


  public ProcessServer friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The Process Server&#39;s friendly name.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public ProcessServer healthErrors(List<HealthError> healthErrors) {
    this.healthErrors = healthErrors;
    return this;
  }

  public ProcessServer addHealthErrorsItem(HealthError healthErrorsItem) {
    if (this.healthErrors == null) {
      this.healthErrors = new ArrayList<>();
    }
    this.healthErrors.add(healthErrorsItem);
    return this;
  }

  /**
   * Health errors.
   * @return healthErrors
   */
  @javax.annotation.Nullable
  public List<HealthError> getHealthErrors() {
    return healthErrors;
  }

  public void setHealthErrors(List<HealthError> healthErrors) {
    this.healthErrors = healthErrors;
  }


  public ProcessServer hostId(String hostId) {
    this.hostId = hostId;
    return this;
  }

  /**
   * The agent generated Id.
   * @return hostId
   */
  @javax.annotation.Nullable
  public String getHostId() {
    return hostId;
  }

  public void setHostId(String hostId) {
    this.hostId = hostId;
  }


  public ProcessServer id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Process Server Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ProcessServer ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * The IP address of the server.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public ProcessServer lastHeartbeat(OffsetDateTime lastHeartbeat) {
    this.lastHeartbeat = lastHeartbeat;
    return this;
  }

  /**
   * The last heartbeat received from the server.
   * @return lastHeartbeat
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastHeartbeat() {
    return lastHeartbeat;
  }

  public void setLastHeartbeat(OffsetDateTime lastHeartbeat) {
    this.lastHeartbeat = lastHeartbeat;
  }


  public ProcessServer machineCount(String machineCount) {
    this.machineCount = machineCount;
    return this;
  }

  /**
   * The servers configured with this PS.
   * @return machineCount
   */
  @javax.annotation.Nullable
  public String getMachineCount() {
    return machineCount;
  }

  public void setMachineCount(String machineCount) {
    this.machineCount = machineCount;
  }


  public ProcessServer memoryUsageStatus(String memoryUsageStatus) {
    this.memoryUsageStatus = memoryUsageStatus;
    return this;
  }

  /**
   * The memory usage status.
   * @return memoryUsageStatus
   */
  @javax.annotation.Nullable
  public String getMemoryUsageStatus() {
    return memoryUsageStatus;
  }

  public void setMemoryUsageStatus(String memoryUsageStatus) {
    this.memoryUsageStatus = memoryUsageStatus;
  }


  public ProcessServer mobilityServiceUpdates(List<MobilityServiceUpdate> mobilityServiceUpdates) {
    this.mobilityServiceUpdates = mobilityServiceUpdates;
    return this;
  }

  public ProcessServer addMobilityServiceUpdatesItem(MobilityServiceUpdate mobilityServiceUpdatesItem) {
    if (this.mobilityServiceUpdates == null) {
      this.mobilityServiceUpdates = new ArrayList<>();
    }
    this.mobilityServiceUpdates.add(mobilityServiceUpdatesItem);
    return this;
  }

  /**
   * The list of the mobility service updates available on the Process Server.
   * @return mobilityServiceUpdates
   */
  @javax.annotation.Nullable
  public List<MobilityServiceUpdate> getMobilityServiceUpdates() {
    return mobilityServiceUpdates;
  }

  public void setMobilityServiceUpdates(List<MobilityServiceUpdate> mobilityServiceUpdates) {
    this.mobilityServiceUpdates = mobilityServiceUpdates;
  }


  public ProcessServer osType(String osType) {
    this.osType = osType;
    return this;
  }

  /**
   * The OS type of the server.
   * @return osType
   */
  @javax.annotation.Nullable
  public String getOsType() {
    return osType;
  }

  public void setOsType(String osType) {
    this.osType = osType;
  }


  public ProcessServer osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * OS Version of the process server. Note: This will get populated if user has CS version greater than 9.12.0.0.
   * @return osVersion
   */
  @javax.annotation.Nullable
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public ProcessServer psServiceStatus(String psServiceStatus) {
    this.psServiceStatus = psServiceStatus;
    return this;
  }

  /**
   * The PS service status.
   * @return psServiceStatus
   */
  @javax.annotation.Nullable
  public String getPsServiceStatus() {
    return psServiceStatus;
  }

  public void setPsServiceStatus(String psServiceStatus) {
    this.psServiceStatus = psServiceStatus;
  }


  public ProcessServer replicationPairCount(String replicationPairCount) {
    this.replicationPairCount = replicationPairCount;
    return this;
  }

  /**
   * The number of replication pairs configured in this PS.
   * @return replicationPairCount
   */
  @javax.annotation.Nullable
  public String getReplicationPairCount() {
    return replicationPairCount;
  }

  public void setReplicationPairCount(String replicationPairCount) {
    this.replicationPairCount = replicationPairCount;
  }


  public ProcessServer spaceUsageStatus(String spaceUsageStatus) {
    this.spaceUsageStatus = spaceUsageStatus;
    return this;
  }

  /**
   * The space usage status.
   * @return spaceUsageStatus
   */
  @javax.annotation.Nullable
  public String getSpaceUsageStatus() {
    return spaceUsageStatus;
  }

  public void setSpaceUsageStatus(String spaceUsageStatus) {
    this.spaceUsageStatus = spaceUsageStatus;
  }


  public ProcessServer sslCertExpiryDate(OffsetDateTime sslCertExpiryDate) {
    this.sslCertExpiryDate = sslCertExpiryDate;
    return this;
  }

  /**
   * The PS SSL cert expiry date.
   * @return sslCertExpiryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSslCertExpiryDate() {
    return sslCertExpiryDate;
  }

  public void setSslCertExpiryDate(OffsetDateTime sslCertExpiryDate) {
    this.sslCertExpiryDate = sslCertExpiryDate;
  }


  public ProcessServer sslCertExpiryRemainingDays(Integer sslCertExpiryRemainingDays) {
    this.sslCertExpiryRemainingDays = sslCertExpiryRemainingDays;
    return this;
  }

  /**
   * CS SSL cert expiry date.
   * @return sslCertExpiryRemainingDays
   */
  @javax.annotation.Nullable
  public Integer getSslCertExpiryRemainingDays() {
    return sslCertExpiryRemainingDays;
  }

  public void setSslCertExpiryRemainingDays(Integer sslCertExpiryRemainingDays) {
    this.sslCertExpiryRemainingDays = sslCertExpiryRemainingDays;
  }


  public ProcessServer systemLoad(String systemLoad) {
    this.systemLoad = systemLoad;
    return this;
  }

  /**
   * The percentage of the system load.
   * @return systemLoad
   */
  @javax.annotation.Nullable
  public String getSystemLoad() {
    return systemLoad;
  }

  public void setSystemLoad(String systemLoad) {
    this.systemLoad = systemLoad;
  }


  public ProcessServer systemLoadStatus(String systemLoadStatus) {
    this.systemLoadStatus = systemLoadStatus;
    return this;
  }

  /**
   * The system load status.
   * @return systemLoadStatus
   */
  @javax.annotation.Nullable
  public String getSystemLoadStatus() {
    return systemLoadStatus;
  }

  public void setSystemLoadStatus(String systemLoadStatus) {
    this.systemLoadStatus = systemLoadStatus;
  }


  public ProcessServer totalMemoryInBytes(Long totalMemoryInBytes) {
    this.totalMemoryInBytes = totalMemoryInBytes;
    return this;
  }

  /**
   * The total memory.
   * @return totalMemoryInBytes
   */
  @javax.annotation.Nullable
  public Long getTotalMemoryInBytes() {
    return totalMemoryInBytes;
  }

  public void setTotalMemoryInBytes(Long totalMemoryInBytes) {
    this.totalMemoryInBytes = totalMemoryInBytes;
  }


  public ProcessServer totalSpaceInBytes(Long totalSpaceInBytes) {
    this.totalSpaceInBytes = totalSpaceInBytes;
    return this;
  }

  /**
   * The total space.
   * @return totalSpaceInBytes
   */
  @javax.annotation.Nullable
  public Long getTotalSpaceInBytes() {
    return totalSpaceInBytes;
  }

  public void setTotalSpaceInBytes(Long totalSpaceInBytes) {
    this.totalSpaceInBytes = totalSpaceInBytes;
  }


  public ProcessServer versionStatus(String versionStatus) {
    this.versionStatus = versionStatus;
    return this;
  }

  /**
   * Version status
   * @return versionStatus
   */
  @javax.annotation.Nullable
  public String getVersionStatus() {
    return versionStatus;
  }

  public void setVersionStatus(String versionStatus) {
    this.versionStatus = versionStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessServer processServer = (ProcessServer) o;
    return Objects.equals(this.agentExpiryDate, processServer.agentExpiryDate) &&
        Objects.equals(this.agentVersion, processServer.agentVersion) &&
        Objects.equals(this.agentVersionDetails, processServer.agentVersionDetails) &&
        Objects.equals(this.availableMemoryInBytes, processServer.availableMemoryInBytes) &&
        Objects.equals(this.availableSpaceInBytes, processServer.availableSpaceInBytes) &&
        Objects.equals(this.cpuLoad, processServer.cpuLoad) &&
        Objects.equals(this.cpuLoadStatus, processServer.cpuLoadStatus) &&
        Objects.equals(this.friendlyName, processServer.friendlyName) &&
        Objects.equals(this.healthErrors, processServer.healthErrors) &&
        Objects.equals(this.hostId, processServer.hostId) &&
        Objects.equals(this.id, processServer.id) &&
        Objects.equals(this.ipAddress, processServer.ipAddress) &&
        Objects.equals(this.lastHeartbeat, processServer.lastHeartbeat) &&
        Objects.equals(this.machineCount, processServer.machineCount) &&
        Objects.equals(this.memoryUsageStatus, processServer.memoryUsageStatus) &&
        Objects.equals(this.mobilityServiceUpdates, processServer.mobilityServiceUpdates) &&
        Objects.equals(this.osType, processServer.osType) &&
        Objects.equals(this.osVersion, processServer.osVersion) &&
        Objects.equals(this.psServiceStatus, processServer.psServiceStatus) &&
        Objects.equals(this.replicationPairCount, processServer.replicationPairCount) &&
        Objects.equals(this.spaceUsageStatus, processServer.spaceUsageStatus) &&
        Objects.equals(this.sslCertExpiryDate, processServer.sslCertExpiryDate) &&
        Objects.equals(this.sslCertExpiryRemainingDays, processServer.sslCertExpiryRemainingDays) &&
        Objects.equals(this.systemLoad, processServer.systemLoad) &&
        Objects.equals(this.systemLoadStatus, processServer.systemLoadStatus) &&
        Objects.equals(this.totalMemoryInBytes, processServer.totalMemoryInBytes) &&
        Objects.equals(this.totalSpaceInBytes, processServer.totalSpaceInBytes) &&
        Objects.equals(this.versionStatus, processServer.versionStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentExpiryDate, agentVersion, agentVersionDetails, availableMemoryInBytes, availableSpaceInBytes, cpuLoad, cpuLoadStatus, friendlyName, healthErrors, hostId, id, ipAddress, lastHeartbeat, machineCount, memoryUsageStatus, mobilityServiceUpdates, osType, osVersion, psServiceStatus, replicationPairCount, spaceUsageStatus, sslCertExpiryDate, sslCertExpiryRemainingDays, systemLoad, systemLoadStatus, totalMemoryInBytes, totalSpaceInBytes, versionStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessServer {\n");
    sb.append("    agentExpiryDate: ").append(toIndentedString(agentExpiryDate)).append("\n");
    sb.append("    agentVersion: ").append(toIndentedString(agentVersion)).append("\n");
    sb.append("    agentVersionDetails: ").append(toIndentedString(agentVersionDetails)).append("\n");
    sb.append("    availableMemoryInBytes: ").append(toIndentedString(availableMemoryInBytes)).append("\n");
    sb.append("    availableSpaceInBytes: ").append(toIndentedString(availableSpaceInBytes)).append("\n");
    sb.append("    cpuLoad: ").append(toIndentedString(cpuLoad)).append("\n");
    sb.append("    cpuLoadStatus: ").append(toIndentedString(cpuLoadStatus)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    healthErrors: ").append(toIndentedString(healthErrors)).append("\n");
    sb.append("    hostId: ").append(toIndentedString(hostId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    lastHeartbeat: ").append(toIndentedString(lastHeartbeat)).append("\n");
    sb.append("    machineCount: ").append(toIndentedString(machineCount)).append("\n");
    sb.append("    memoryUsageStatus: ").append(toIndentedString(memoryUsageStatus)).append("\n");
    sb.append("    mobilityServiceUpdates: ").append(toIndentedString(mobilityServiceUpdates)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    psServiceStatus: ").append(toIndentedString(psServiceStatus)).append("\n");
    sb.append("    replicationPairCount: ").append(toIndentedString(replicationPairCount)).append("\n");
    sb.append("    spaceUsageStatus: ").append(toIndentedString(spaceUsageStatus)).append("\n");
    sb.append("    sslCertExpiryDate: ").append(toIndentedString(sslCertExpiryDate)).append("\n");
    sb.append("    sslCertExpiryRemainingDays: ").append(toIndentedString(sslCertExpiryRemainingDays)).append("\n");
    sb.append("    systemLoad: ").append(toIndentedString(systemLoad)).append("\n");
    sb.append("    systemLoadStatus: ").append(toIndentedString(systemLoadStatus)).append("\n");
    sb.append("    totalMemoryInBytes: ").append(toIndentedString(totalMemoryInBytes)).append("\n");
    sb.append("    totalSpaceInBytes: ").append(toIndentedString(totalSpaceInBytes)).append("\n");
    sb.append("    versionStatus: ").append(toIndentedString(versionStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentExpiryDate");
    openapiFields.add("agentVersion");
    openapiFields.add("agentVersionDetails");
    openapiFields.add("availableMemoryInBytes");
    openapiFields.add("availableSpaceInBytes");
    openapiFields.add("cpuLoad");
    openapiFields.add("cpuLoadStatus");
    openapiFields.add("friendlyName");
    openapiFields.add("healthErrors");
    openapiFields.add("hostId");
    openapiFields.add("id");
    openapiFields.add("ipAddress");
    openapiFields.add("lastHeartbeat");
    openapiFields.add("machineCount");
    openapiFields.add("memoryUsageStatus");
    openapiFields.add("mobilityServiceUpdates");
    openapiFields.add("osType");
    openapiFields.add("osVersion");
    openapiFields.add("psServiceStatus");
    openapiFields.add("replicationPairCount");
    openapiFields.add("spaceUsageStatus");
    openapiFields.add("sslCertExpiryDate");
    openapiFields.add("sslCertExpiryRemainingDays");
    openapiFields.add("systemLoad");
    openapiFields.add("systemLoadStatus");
    openapiFields.add("totalMemoryInBytes");
    openapiFields.add("totalSpaceInBytes");
    openapiFields.add("versionStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProcessServer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProcessServer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProcessServer is not found in the empty JSON string", ProcessServer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProcessServer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProcessServer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agentVersion") != null && !jsonObj.get("agentVersion").isJsonNull()) && !jsonObj.get("agentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentVersion").toString()));
      }
      // validate the optional field `agentVersionDetails`
      if (jsonObj.get("agentVersionDetails") != null && !jsonObj.get("agentVersionDetails").isJsonNull()) {
        VersionDetails.validateJsonElement(jsonObj.get("agentVersionDetails"));
      }
      if ((jsonObj.get("cpuLoad") != null && !jsonObj.get("cpuLoad").isJsonNull()) && !jsonObj.get("cpuLoad").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpuLoad` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpuLoad").toString()));
      }
      if ((jsonObj.get("cpuLoadStatus") != null && !jsonObj.get("cpuLoadStatus").isJsonNull()) && !jsonObj.get("cpuLoadStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpuLoadStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpuLoadStatus").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if (jsonObj.get("healthErrors") != null && !jsonObj.get("healthErrors").isJsonNull()) {
        JsonArray jsonArrayhealthErrors = jsonObj.getAsJsonArray("healthErrors");
        if (jsonArrayhealthErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("healthErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `healthErrors` to be an array in the JSON string but got `%s`", jsonObj.get("healthErrors").toString()));
          }

          // validate the optional field `healthErrors` (array)
          for (int i = 0; i < jsonArrayhealthErrors.size(); i++) {
            HealthError.validateJsonElement(jsonArrayhealthErrors.get(i));
          };
        }
      }
      if ((jsonObj.get("hostId") != null && !jsonObj.get("hostId").isJsonNull()) && !jsonObj.get("hostId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("machineCount") != null && !jsonObj.get("machineCount").isJsonNull()) && !jsonObj.get("machineCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineCount").toString()));
      }
      if ((jsonObj.get("memoryUsageStatus") != null && !jsonObj.get("memoryUsageStatus").isJsonNull()) && !jsonObj.get("memoryUsageStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memoryUsageStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memoryUsageStatus").toString()));
      }
      if (jsonObj.get("mobilityServiceUpdates") != null && !jsonObj.get("mobilityServiceUpdates").isJsonNull()) {
        JsonArray jsonArraymobilityServiceUpdates = jsonObj.getAsJsonArray("mobilityServiceUpdates");
        if (jsonArraymobilityServiceUpdates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mobilityServiceUpdates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mobilityServiceUpdates` to be an array in the JSON string but got `%s`", jsonObj.get("mobilityServiceUpdates").toString()));
          }

          // validate the optional field `mobilityServiceUpdates` (array)
          for (int i = 0; i < jsonArraymobilityServiceUpdates.size(); i++) {
            MobilityServiceUpdate.validateJsonElement(jsonArraymobilityServiceUpdates.get(i));
          };
        }
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      if ((jsonObj.get("osVersion") != null && !jsonObj.get("osVersion").isJsonNull()) && !jsonObj.get("osVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osVersion").toString()));
      }
      if ((jsonObj.get("psServiceStatus") != null && !jsonObj.get("psServiceStatus").isJsonNull()) && !jsonObj.get("psServiceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `psServiceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("psServiceStatus").toString()));
      }
      if ((jsonObj.get("replicationPairCount") != null && !jsonObj.get("replicationPairCount").isJsonNull()) && !jsonObj.get("replicationPairCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationPairCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationPairCount").toString()));
      }
      if ((jsonObj.get("spaceUsageStatus") != null && !jsonObj.get("spaceUsageStatus").isJsonNull()) && !jsonObj.get("spaceUsageStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spaceUsageStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spaceUsageStatus").toString()));
      }
      if ((jsonObj.get("systemLoad") != null && !jsonObj.get("systemLoad").isJsonNull()) && !jsonObj.get("systemLoad").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemLoad` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemLoad").toString()));
      }
      if ((jsonObj.get("systemLoadStatus") != null && !jsonObj.get("systemLoadStatus").isJsonNull()) && !jsonObj.get("systemLoadStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemLoadStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemLoadStatus").toString()));
      }
      if ((jsonObj.get("versionStatus") != null && !jsonObj.get("versionStatus").isJsonNull()) && !jsonObj.get("versionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProcessServer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProcessServer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProcessServer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProcessServer.class));

       return (TypeAdapter<T>) new TypeAdapter<ProcessServer>() {
           @Override
           public void write(JsonWriter out, ProcessServer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProcessServer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProcessServer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProcessServer
   * @throws IOException if the JSON string is invalid with respect to ProcessServer
   */
  public static ProcessServer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProcessServer.class);
  }

  /**
   * Convert an instance of ProcessServer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

