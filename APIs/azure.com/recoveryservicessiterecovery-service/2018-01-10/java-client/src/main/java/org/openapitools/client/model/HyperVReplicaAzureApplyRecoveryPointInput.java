/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplyRecoveryPointProviderSpecificInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplyRecoveryPoint input specific to HyperVReplicaAzure provider.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HyperVReplicaAzureApplyRecoveryPointInput extends ApplyRecoveryPointProviderSpecificInput {
  public static final String SERIALIZED_NAME_PRIMARY_KEK_CERTIFICATE_PFX = "primaryKekCertificatePfx";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KEK_CERTIFICATE_PFX)
  private String primaryKekCertificatePfx;

  public static final String SERIALIZED_NAME_SECONDARY_KEK_CERTIFICATE_PFX = "secondaryKekCertificatePfx";
  @SerializedName(SERIALIZED_NAME_SECONDARY_KEK_CERTIFICATE_PFX)
  private String secondaryKekCertificatePfx;

  public static final String SERIALIZED_NAME_VAULT_LOCATION = "vaultLocation";
  @SerializedName(SERIALIZED_NAME_VAULT_LOCATION)
  private String vaultLocation;

  public HyperVReplicaAzureApplyRecoveryPointInput() {
    this.instanceType = this.getClass().getSimpleName();
  }

  public HyperVReplicaAzureApplyRecoveryPointInput primaryKekCertificatePfx(String primaryKekCertificatePfx) {
    this.primaryKekCertificatePfx = primaryKekCertificatePfx;
    return this;
  }

  /**
   * The primary kek certificate pfx.
   * @return primaryKekCertificatePfx
   */
  @javax.annotation.Nullable
  public String getPrimaryKekCertificatePfx() {
    return primaryKekCertificatePfx;
  }

  public void setPrimaryKekCertificatePfx(String primaryKekCertificatePfx) {
    this.primaryKekCertificatePfx = primaryKekCertificatePfx;
  }


  public HyperVReplicaAzureApplyRecoveryPointInput secondaryKekCertificatePfx(String secondaryKekCertificatePfx) {
    this.secondaryKekCertificatePfx = secondaryKekCertificatePfx;
    return this;
  }

  /**
   * The secondary kek certificate pfx.
   * @return secondaryKekCertificatePfx
   */
  @javax.annotation.Nullable
  public String getSecondaryKekCertificatePfx() {
    return secondaryKekCertificatePfx;
  }

  public void setSecondaryKekCertificatePfx(String secondaryKekCertificatePfx) {
    this.secondaryKekCertificatePfx = secondaryKekCertificatePfx;
  }


  public HyperVReplicaAzureApplyRecoveryPointInput vaultLocation(String vaultLocation) {
    this.vaultLocation = vaultLocation;
    return this;
  }

  /**
   * The vault location where the recovery Vm resides.
   * @return vaultLocation
   */
  @javax.annotation.Nullable
  public String getVaultLocation() {
    return vaultLocation;
  }

  public void setVaultLocation(String vaultLocation) {
    this.vaultLocation = vaultLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HyperVReplicaAzureApplyRecoveryPointInput hyperVReplicaAzureApplyRecoveryPointInput = (HyperVReplicaAzureApplyRecoveryPointInput) o;
    return Objects.equals(this.primaryKekCertificatePfx, hyperVReplicaAzureApplyRecoveryPointInput.primaryKekCertificatePfx) &&
        Objects.equals(this.secondaryKekCertificatePfx, hyperVReplicaAzureApplyRecoveryPointInput.secondaryKekCertificatePfx) &&
        Objects.equals(this.vaultLocation, hyperVReplicaAzureApplyRecoveryPointInput.vaultLocation) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryKekCertificatePfx, secondaryKekCertificatePfx, vaultLocation, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HyperVReplicaAzureApplyRecoveryPointInput {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    primaryKekCertificatePfx: ").append(toIndentedString(primaryKekCertificatePfx)).append("\n");
    sb.append("    secondaryKekCertificatePfx: ").append(toIndentedString(secondaryKekCertificatePfx)).append("\n");
    sb.append("    vaultLocation: ").append(toIndentedString(vaultLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HyperVReplicaAzureApplyRecoveryPointInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HyperVReplicaAzureApplyRecoveryPointInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HyperVReplicaAzureApplyRecoveryPointInput is not found in the empty JSON string", HyperVReplicaAzureApplyRecoveryPointInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HyperVReplicaAzureApplyRecoveryPointInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HyperVReplicaAzureApplyRecoveryPointInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HyperVReplicaAzureApplyRecoveryPointInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HyperVReplicaAzureApplyRecoveryPointInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HyperVReplicaAzureApplyRecoveryPointInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HyperVReplicaAzureApplyRecoveryPointInput.class));

       return (TypeAdapter<T>) new TypeAdapter<HyperVReplicaAzureApplyRecoveryPointInput>() {
           @Override
           public void write(JsonWriter out, HyperVReplicaAzureApplyRecoveryPointInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HyperVReplicaAzureApplyRecoveryPointInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HyperVReplicaAzureApplyRecoveryPointInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HyperVReplicaAzureApplyRecoveryPointInput
   * @throws IOException if the JSON string is invalid with respect to HyperVReplicaAzureApplyRecoveryPointInput
   */
  public static HyperVReplicaAzureApplyRecoveryPointInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HyperVReplicaAzureApplyRecoveryPointInput.class);
  }

  /**
   * Convert an instance of HyperVReplicaAzureApplyRecoveryPointInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

