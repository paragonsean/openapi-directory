/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VMwareCbt NIC input.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VMwareCbtNicInput {
  public static final String SERIALIZED_NAME_IS_PRIMARY_NIC = "isPrimaryNic";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY_NIC)
  private String isPrimaryNic;

  public static final String SERIALIZED_NAME_IS_SELECTED_FOR_MIGRATION = "isSelectedForMigration";
  @SerializedName(SERIALIZED_NAME_IS_SELECTED_FOR_MIGRATION)
  private String isSelectedForMigration;

  public static final String SERIALIZED_NAME_NIC_ID = "nicId";
  @SerializedName(SERIALIZED_NAME_NIC_ID)
  private String nicId;

  public static final String SERIALIZED_NAME_TARGET_STATIC_I_P_ADDRESS = "targetStaticIPAddress";
  @SerializedName(SERIALIZED_NAME_TARGET_STATIC_I_P_ADDRESS)
  private String targetStaticIPAddress;

  public static final String SERIALIZED_NAME_TARGET_SUBNET_NAME = "targetSubnetName";
  @SerializedName(SERIALIZED_NAME_TARGET_SUBNET_NAME)
  private String targetSubnetName;

  public VMwareCbtNicInput() {
  }

  public VMwareCbtNicInput isPrimaryNic(String isPrimaryNic) {
    this.isPrimaryNic = isPrimaryNic;
    return this;
  }

  /**
   * A value indicating whether this is the primary NIC.
   * @return isPrimaryNic
   */
  @javax.annotation.Nonnull
  public String getIsPrimaryNic() {
    return isPrimaryNic;
  }

  public void setIsPrimaryNic(String isPrimaryNic) {
    this.isPrimaryNic = isPrimaryNic;
  }


  public VMwareCbtNicInput isSelectedForMigration(String isSelectedForMigration) {
    this.isSelectedForMigration = isSelectedForMigration;
    return this;
  }

  /**
   * A value indicating whether this NIC is selected for migration.
   * @return isSelectedForMigration
   */
  @javax.annotation.Nullable
  public String getIsSelectedForMigration() {
    return isSelectedForMigration;
  }

  public void setIsSelectedForMigration(String isSelectedForMigration) {
    this.isSelectedForMigration = isSelectedForMigration;
  }


  public VMwareCbtNicInput nicId(String nicId) {
    this.nicId = nicId;
    return this;
  }

  /**
   * The NIC Id.
   * @return nicId
   */
  @javax.annotation.Nonnull
  public String getNicId() {
    return nicId;
  }

  public void setNicId(String nicId) {
    this.nicId = nicId;
  }


  public VMwareCbtNicInput targetStaticIPAddress(String targetStaticIPAddress) {
    this.targetStaticIPAddress = targetStaticIPAddress;
    return this;
  }

  /**
   * The static IP address.
   * @return targetStaticIPAddress
   */
  @javax.annotation.Nullable
  public String getTargetStaticIPAddress() {
    return targetStaticIPAddress;
  }

  public void setTargetStaticIPAddress(String targetStaticIPAddress) {
    this.targetStaticIPAddress = targetStaticIPAddress;
  }


  public VMwareCbtNicInput targetSubnetName(String targetSubnetName) {
    this.targetSubnetName = targetSubnetName;
    return this;
  }

  /**
   * Target subnet name.
   * @return targetSubnetName
   */
  @javax.annotation.Nullable
  public String getTargetSubnetName() {
    return targetSubnetName;
  }

  public void setTargetSubnetName(String targetSubnetName) {
    this.targetSubnetName = targetSubnetName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VMwareCbtNicInput vmwareCbtNicInput = (VMwareCbtNicInput) o;
    return Objects.equals(this.isPrimaryNic, vmwareCbtNicInput.isPrimaryNic) &&
        Objects.equals(this.isSelectedForMigration, vmwareCbtNicInput.isSelectedForMigration) &&
        Objects.equals(this.nicId, vmwareCbtNicInput.nicId) &&
        Objects.equals(this.targetStaticIPAddress, vmwareCbtNicInput.targetStaticIPAddress) &&
        Objects.equals(this.targetSubnetName, vmwareCbtNicInput.targetSubnetName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isPrimaryNic, isSelectedForMigration, nicId, targetStaticIPAddress, targetSubnetName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VMwareCbtNicInput {\n");
    sb.append("    isPrimaryNic: ").append(toIndentedString(isPrimaryNic)).append("\n");
    sb.append("    isSelectedForMigration: ").append(toIndentedString(isSelectedForMigration)).append("\n");
    sb.append("    nicId: ").append(toIndentedString(nicId)).append("\n");
    sb.append("    targetStaticIPAddress: ").append(toIndentedString(targetStaticIPAddress)).append("\n");
    sb.append("    targetSubnetName: ").append(toIndentedString(targetSubnetName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isPrimaryNic");
    openapiFields.add("isSelectedForMigration");
    openapiFields.add("nicId");
    openapiFields.add("targetStaticIPAddress");
    openapiFields.add("targetSubnetName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isPrimaryNic");
    openapiRequiredFields.add("nicId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VMwareCbtNicInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VMwareCbtNicInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VMwareCbtNicInput is not found in the empty JSON string", VMwareCbtNicInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VMwareCbtNicInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VMwareCbtNicInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VMwareCbtNicInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("isPrimaryNic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isPrimaryNic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isPrimaryNic").toString()));
      }
      if ((jsonObj.get("isSelectedForMigration") != null && !jsonObj.get("isSelectedForMigration").isJsonNull()) && !jsonObj.get("isSelectedForMigration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isSelectedForMigration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isSelectedForMigration").toString()));
      }
      if (!jsonObj.get("nicId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nicId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nicId").toString()));
      }
      if ((jsonObj.get("targetStaticIPAddress") != null && !jsonObj.get("targetStaticIPAddress").isJsonNull()) && !jsonObj.get("targetStaticIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetStaticIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetStaticIPAddress").toString()));
      }
      if ((jsonObj.get("targetSubnetName") != null && !jsonObj.get("targetSubnetName").isJsonNull()) && !jsonObj.get("targetSubnetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetSubnetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetSubnetName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VMwareCbtNicInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VMwareCbtNicInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VMwareCbtNicInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VMwareCbtNicInput.class));

       return (TypeAdapter<T>) new TypeAdapter<VMwareCbtNicInput>() {
           @Override
           public void write(JsonWriter out, VMwareCbtNicInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VMwareCbtNicInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VMwareCbtNicInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VMwareCbtNicInput
   * @throws IOException if the JSON string is invalid with respect to VMwareCbtNicInput
   */
  public static VMwareCbtNicInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VMwareCbtNicInput.class);
  }

  /**
   * Convert an instance of VMwareCbtNicInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

