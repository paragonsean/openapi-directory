/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiskDetails;
import org.openapitools.client.model.InitialReplicationDetails;
import org.openapitools.client.model.ReplicationProviderSpecificSettings;
import org.openapitools.client.model.VMNicDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HyperV replica 2012 replication details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HyperVReplicaReplicationDetails extends ReplicationProviderSpecificSettings {
  public static final String SERIALIZED_NAME_INITIAL_REPLICATION_DETAILS = "initialReplicationDetails";
  @SerializedName(SERIALIZED_NAME_INITIAL_REPLICATION_DETAILS)
  private InitialReplicationDetails initialReplicationDetails;

  public static final String SERIALIZED_NAME_LAST_REPLICATED_TIME = "lastReplicatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_REPLICATED_TIME)
  private OffsetDateTime lastReplicatedTime;

  public static final String SERIALIZED_NAME_V_M_DISK_DETAILS = "vMDiskDetails";
  @SerializedName(SERIALIZED_NAME_V_M_DISK_DETAILS)
  private List<DiskDetails> vMDiskDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_VM_ID = "vmId";
  @SerializedName(SERIALIZED_NAME_VM_ID)
  private String vmId;

  public static final String SERIALIZED_NAME_VM_NICS = "vmNics";
  @SerializedName(SERIALIZED_NAME_VM_NICS)
  private List<VMNicDetails> vmNics = new ArrayList<>();

  public static final String SERIALIZED_NAME_VM_PROTECTION_STATE = "vmProtectionState";
  @SerializedName(SERIALIZED_NAME_VM_PROTECTION_STATE)
  private String vmProtectionState;

  public static final String SERIALIZED_NAME_VM_PROTECTION_STATE_DESCRIPTION = "vmProtectionStateDescription";
  @SerializedName(SERIALIZED_NAME_VM_PROTECTION_STATE_DESCRIPTION)
  private String vmProtectionStateDescription;

  public HyperVReplicaReplicationDetails() {
    this.instanceType = this.getClass().getSimpleName();
  }

  public HyperVReplicaReplicationDetails(
     String instanceType
  ) {
    this();
    this.instanceType = instanceType;
  }

  public HyperVReplicaReplicationDetails initialReplicationDetails(InitialReplicationDetails initialReplicationDetails) {
    this.initialReplicationDetails = initialReplicationDetails;
    return this;
  }

  /**
   * Get initialReplicationDetails
   * @return initialReplicationDetails
   */
  @javax.annotation.Nullable
  public InitialReplicationDetails getInitialReplicationDetails() {
    return initialReplicationDetails;
  }

  public void setInitialReplicationDetails(InitialReplicationDetails initialReplicationDetails) {
    this.initialReplicationDetails = initialReplicationDetails;
  }


  public HyperVReplicaReplicationDetails lastReplicatedTime(OffsetDateTime lastReplicatedTime) {
    this.lastReplicatedTime = lastReplicatedTime;
    return this;
  }

  /**
   * The Last replication time.
   * @return lastReplicatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastReplicatedTime() {
    return lastReplicatedTime;
  }

  public void setLastReplicatedTime(OffsetDateTime lastReplicatedTime) {
    this.lastReplicatedTime = lastReplicatedTime;
  }


  public HyperVReplicaReplicationDetails vMDiskDetails(List<DiskDetails> vMDiskDetails) {
    this.vMDiskDetails = vMDiskDetails;
    return this;
  }

  public HyperVReplicaReplicationDetails addVMDiskDetailsItem(DiskDetails vMDiskDetailsItem) {
    if (this.vMDiskDetails == null) {
      this.vMDiskDetails = new ArrayList<>();
    }
    this.vMDiskDetails.add(vMDiskDetailsItem);
    return this;
  }

  /**
   * VM disk details.
   * @return vMDiskDetails
   */
  @javax.annotation.Nullable
  public List<DiskDetails> getvMDiskDetails() {
    return vMDiskDetails;
  }

  public void setvMDiskDetails(List<DiskDetails> vMDiskDetails) {
    this.vMDiskDetails = vMDiskDetails;
  }


  public HyperVReplicaReplicationDetails vmId(String vmId) {
    this.vmId = vmId;
    return this;
  }

  /**
   * The virtual machine Id.
   * @return vmId
   */
  @javax.annotation.Nullable
  public String getVmId() {
    return vmId;
  }

  public void setVmId(String vmId) {
    this.vmId = vmId;
  }


  public HyperVReplicaReplicationDetails vmNics(List<VMNicDetails> vmNics) {
    this.vmNics = vmNics;
    return this;
  }

  public HyperVReplicaReplicationDetails addVmNicsItem(VMNicDetails vmNicsItem) {
    if (this.vmNics == null) {
      this.vmNics = new ArrayList<>();
    }
    this.vmNics.add(vmNicsItem);
    return this;
  }

  /**
   * The PE Network details.
   * @return vmNics
   */
  @javax.annotation.Nullable
  public List<VMNicDetails> getVmNics() {
    return vmNics;
  }

  public void setVmNics(List<VMNicDetails> vmNics) {
    this.vmNics = vmNics;
  }


  public HyperVReplicaReplicationDetails vmProtectionState(String vmProtectionState) {
    this.vmProtectionState = vmProtectionState;
    return this;
  }

  /**
   * The protection state for the vm.
   * @return vmProtectionState
   */
  @javax.annotation.Nullable
  public String getVmProtectionState() {
    return vmProtectionState;
  }

  public void setVmProtectionState(String vmProtectionState) {
    this.vmProtectionState = vmProtectionState;
  }


  public HyperVReplicaReplicationDetails vmProtectionStateDescription(String vmProtectionStateDescription) {
    this.vmProtectionStateDescription = vmProtectionStateDescription;
    return this;
  }

  /**
   * The protection state description for the vm.
   * @return vmProtectionStateDescription
   */
  @javax.annotation.Nullable
  public String getVmProtectionStateDescription() {
    return vmProtectionStateDescription;
  }

  public void setVmProtectionStateDescription(String vmProtectionStateDescription) {
    this.vmProtectionStateDescription = vmProtectionStateDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HyperVReplicaReplicationDetails hyperVReplicaReplicationDetails = (HyperVReplicaReplicationDetails) o;
    return Objects.equals(this.initialReplicationDetails, hyperVReplicaReplicationDetails.initialReplicationDetails) &&
        Objects.equals(this.lastReplicatedTime, hyperVReplicaReplicationDetails.lastReplicatedTime) &&
        Objects.equals(this.vMDiskDetails, hyperVReplicaReplicationDetails.vMDiskDetails) &&
        Objects.equals(this.vmId, hyperVReplicaReplicationDetails.vmId) &&
        Objects.equals(this.vmNics, hyperVReplicaReplicationDetails.vmNics) &&
        Objects.equals(this.vmProtectionState, hyperVReplicaReplicationDetails.vmProtectionState) &&
        Objects.equals(this.vmProtectionStateDescription, hyperVReplicaReplicationDetails.vmProtectionStateDescription) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(initialReplicationDetails, lastReplicatedTime, vMDiskDetails, vmId, vmNics, vmProtectionState, vmProtectionStateDescription, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HyperVReplicaReplicationDetails {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    initialReplicationDetails: ").append(toIndentedString(initialReplicationDetails)).append("\n");
    sb.append("    lastReplicatedTime: ").append(toIndentedString(lastReplicatedTime)).append("\n");
    sb.append("    vMDiskDetails: ").append(toIndentedString(vMDiskDetails)).append("\n");
    sb.append("    vmId: ").append(toIndentedString(vmId)).append("\n");
    sb.append("    vmNics: ").append(toIndentedString(vmNics)).append("\n");
    sb.append("    vmProtectionState: ").append(toIndentedString(vmProtectionState)).append("\n");
    sb.append("    vmProtectionStateDescription: ").append(toIndentedString(vmProtectionStateDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HyperVReplicaReplicationDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HyperVReplicaReplicationDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HyperVReplicaReplicationDetails is not found in the empty JSON string", HyperVReplicaReplicationDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HyperVReplicaReplicationDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HyperVReplicaReplicationDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HyperVReplicaReplicationDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HyperVReplicaReplicationDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HyperVReplicaReplicationDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HyperVReplicaReplicationDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<HyperVReplicaReplicationDetails>() {
           @Override
           public void write(JsonWriter out, HyperVReplicaReplicationDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HyperVReplicaReplicationDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HyperVReplicaReplicationDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HyperVReplicaReplicationDetails
   * @throws IOException if the JSON string is invalid with respect to HyperVReplicaReplicationDetails
   */
  public static HyperVReplicaReplicationDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HyperVReplicaReplicationDetails.class);
  }

  /**
   * Convert an instance of HyperVReplicaReplicationDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

