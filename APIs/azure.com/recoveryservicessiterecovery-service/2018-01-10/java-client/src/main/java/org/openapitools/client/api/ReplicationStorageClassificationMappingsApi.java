/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.StorageClassificationMapping;
import org.openapitools.client.model.StorageClassificationMappingCollection;
import org.openapitools.client.model.StorageClassificationMappingInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReplicationStorageClassificationMappingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReplicationStorageClassificationMappingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReplicationStorageClassificationMappingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for replicationStorageClassificationMappingsCreate
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param storageClassificationMappingName Storage classification mapping name. (required)
     * @param pairingInput Pairing input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationStorageClassificationMappingsCreateCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName, StorageClassificationMappingInput pairingInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pairingInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "storageClassificationName" + "}", localVarApiClient.escapeString(storageClassificationName.toString()))
            .replace("{" + "storageClassificationMappingName" + "}", localVarApiClient.escapeString(storageClassificationMappingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationStorageClassificationMappingsCreateValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName, StorageClassificationMappingInput pairingInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationStorageClassificationMappingsCreate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationStorageClassificationMappingsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationStorageClassificationMappingsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationStorageClassificationMappingsCreate(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationStorageClassificationMappingsCreate(Async)");
        }

        // verify the required parameter 'storageClassificationName' is set
        if (storageClassificationName == null) {
            throw new ApiException("Missing the required parameter 'storageClassificationName' when calling replicationStorageClassificationMappingsCreate(Async)");
        }

        // verify the required parameter 'storageClassificationMappingName' is set
        if (storageClassificationMappingName == null) {
            throw new ApiException("Missing the required parameter 'storageClassificationMappingName' when calling replicationStorageClassificationMappingsCreate(Async)");
        }

        // verify the required parameter 'pairingInput' is set
        if (pairingInput == null) {
            throw new ApiException("Missing the required parameter 'pairingInput' when calling replicationStorageClassificationMappingsCreate(Async)");
        }

        return replicationStorageClassificationMappingsCreateCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName, pairingInput, _callback);

    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param storageClassificationMappingName Storage classification mapping name. (required)
     * @param pairingInput Pairing input. (required)
     * @return StorageClassificationMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public StorageClassificationMapping replicationStorageClassificationMappingsCreate(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName, StorageClassificationMappingInput pairingInput) throws ApiException {
        ApiResponse<StorageClassificationMapping> localVarResp = replicationStorageClassificationMappingsCreateWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName, pairingInput);
        return localVarResp.getData();
    }

    /**
     * Create storage classification mapping.
     * The operation to create a storage classification mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param storageClassificationMappingName Storage classification mapping name. (required)
     * @param pairingInput Pairing input. (required)
     * @return ApiResponse&lt;StorageClassificationMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageClassificationMapping> replicationStorageClassificationMappingsCreateWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName, StorageClassificationMappingInput pairingInput) throws ApiException {
        okhttp3.Call localVarCall = replicationStorageClassificationMappingsCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName, pairingInput, null);
        Type localVarReturnType = new TypeToken<StorageClassificationMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create storage classification mapping. (asynchronously)
     * The operation to create a storage classification mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param storageClassificationMappingName Storage classification mapping name. (required)
     * @param pairingInput Pairing input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationStorageClassificationMappingsCreateAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName, StorageClassificationMappingInput pairingInput, final ApiCallback<StorageClassificationMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationStorageClassificationMappingsCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName, pairingInput, _callback);
        Type localVarReturnType = new TypeToken<StorageClassificationMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationStorageClassificationMappingsDelete
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param storageClassificationMappingName Storage classification mapping name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationStorageClassificationMappingsDeleteCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "storageClassificationName" + "}", localVarApiClient.escapeString(storageClassificationName.toString()))
            .replace("{" + "storageClassificationMappingName" + "}", localVarApiClient.escapeString(storageClassificationMappingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationStorageClassificationMappingsDeleteValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationStorageClassificationMappingsDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationStorageClassificationMappingsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationStorageClassificationMappingsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationStorageClassificationMappingsDelete(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationStorageClassificationMappingsDelete(Async)");
        }

        // verify the required parameter 'storageClassificationName' is set
        if (storageClassificationName == null) {
            throw new ApiException("Missing the required parameter 'storageClassificationName' when calling replicationStorageClassificationMappingsDelete(Async)");
        }

        // verify the required parameter 'storageClassificationMappingName' is set
        if (storageClassificationMappingName == null) {
            throw new ApiException("Missing the required parameter 'storageClassificationMappingName' when calling replicationStorageClassificationMappingsDelete(Async)");
        }

        return replicationStorageClassificationMappingsDeleteCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName, _callback);

    }

    /**
     * Delete a storage classification mapping.
     * The operation to delete a storage classification mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param storageClassificationMappingName Storage classification mapping name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void replicationStorageClassificationMappingsDelete(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName) throws ApiException {
        replicationStorageClassificationMappingsDeleteWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName);
    }

    /**
     * Delete a storage classification mapping.
     * The operation to delete a storage classification mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param storageClassificationMappingName Storage classification mapping name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replicationStorageClassificationMappingsDeleteWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName) throws ApiException {
        okhttp3.Call localVarCall = replicationStorageClassificationMappingsDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a storage classification mapping. (asynchronously)
     * The operation to delete a storage classification mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param storageClassificationMappingName Storage classification mapping name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationStorageClassificationMappingsDeleteAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationStorageClassificationMappingsDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationStorageClassificationMappingsGet
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param storageClassificationMappingName Storage classification mapping name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationStorageClassificationMappingsGetCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "storageClassificationName" + "}", localVarApiClient.escapeString(storageClassificationName.toString()))
            .replace("{" + "storageClassificationMappingName" + "}", localVarApiClient.escapeString(storageClassificationMappingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationStorageClassificationMappingsGetValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationStorageClassificationMappingsGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationStorageClassificationMappingsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationStorageClassificationMappingsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationStorageClassificationMappingsGet(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationStorageClassificationMappingsGet(Async)");
        }

        // verify the required parameter 'storageClassificationName' is set
        if (storageClassificationName == null) {
            throw new ApiException("Missing the required parameter 'storageClassificationName' when calling replicationStorageClassificationMappingsGet(Async)");
        }

        // verify the required parameter 'storageClassificationMappingName' is set
        if (storageClassificationMappingName == null) {
            throw new ApiException("Missing the required parameter 'storageClassificationMappingName' when calling replicationStorageClassificationMappingsGet(Async)");
        }

        return replicationStorageClassificationMappingsGetCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName, _callback);

    }

    /**
     * Gets the details of a storage classification mapping.
     * Gets the details of the specified storage classification mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param storageClassificationMappingName Storage classification mapping name. (required)
     * @return StorageClassificationMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StorageClassificationMapping replicationStorageClassificationMappingsGet(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName) throws ApiException {
        ApiResponse<StorageClassificationMapping> localVarResp = replicationStorageClassificationMappingsGetWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName);
        return localVarResp.getData();
    }

    /**
     * Gets the details of a storage classification mapping.
     * Gets the details of the specified storage classification mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param storageClassificationMappingName Storage classification mapping name. (required)
     * @return ApiResponse&lt;StorageClassificationMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageClassificationMapping> replicationStorageClassificationMappingsGetWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName) throws ApiException {
        okhttp3.Call localVarCall = replicationStorageClassificationMappingsGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName, null);
        Type localVarReturnType = new TypeToken<StorageClassificationMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the details of a storage classification mapping. (asynchronously)
     * Gets the details of the specified storage classification mapping.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param storageClassificationMappingName Storage classification mapping name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationStorageClassificationMappingsGetAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, String storageClassificationMappingName, final ApiCallback<StorageClassificationMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationStorageClassificationMappingsGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, storageClassificationMappingName, _callback);
        Type localVarReturnType = new TypeToken<StorageClassificationMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationStorageClassificationMappingsList
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationStorageClassificationMappingsListCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationStorageClassificationMappings"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationStorageClassificationMappingsListValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationStorageClassificationMappingsList(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationStorageClassificationMappingsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationStorageClassificationMappingsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationStorageClassificationMappingsList(Async)");
        }

        return replicationStorageClassificationMappingsListCall(apiVersion, resourceName, resourceGroupName, subscriptionId, _callback);

    }

    /**
     * Gets the list of storage classification mappings objects under a vault.
     * Lists the storage classification mappings in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @return StorageClassificationMappingCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StorageClassificationMappingCollection replicationStorageClassificationMappingsList(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId) throws ApiException {
        ApiResponse<StorageClassificationMappingCollection> localVarResp = replicationStorageClassificationMappingsListWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Gets the list of storage classification mappings objects under a vault.
     * Lists the storage classification mappings in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @return ApiResponse&lt;StorageClassificationMappingCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageClassificationMappingCollection> replicationStorageClassificationMappingsListWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = replicationStorageClassificationMappingsListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, null);
        Type localVarReturnType = new TypeToken<StorageClassificationMappingCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of storage classification mappings objects under a vault. (asynchronously)
     * Lists the storage classification mappings in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationStorageClassificationMappingsListAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback<StorageClassificationMappingCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationStorageClassificationMappingsListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<StorageClassificationMappingCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationStorageClassificationMappingsListByReplicationStorageClassifications
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationStorageClassificationMappingsListByReplicationStorageClassificationsCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "storageClassificationName" + "}", localVarApiClient.escapeString(storageClassificationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationStorageClassificationMappingsListByReplicationStorageClassificationsValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationStorageClassificationMappingsListByReplicationStorageClassifications(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationStorageClassificationMappingsListByReplicationStorageClassifications(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationStorageClassificationMappingsListByReplicationStorageClassifications(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationStorageClassificationMappingsListByReplicationStorageClassifications(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationStorageClassificationMappingsListByReplicationStorageClassifications(Async)");
        }

        // verify the required parameter 'storageClassificationName' is set
        if (storageClassificationName == null) {
            throw new ApiException("Missing the required parameter 'storageClassificationName' when calling replicationStorageClassificationMappingsListByReplicationStorageClassifications(Async)");
        }

        return replicationStorageClassificationMappingsListByReplicationStorageClassificationsCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, _callback);

    }

    /**
     * Gets the list of storage classification mappings objects under a storage.
     * Lists the storage classification mappings for the fabric.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @return StorageClassificationMappingCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StorageClassificationMappingCollection replicationStorageClassificationMappingsListByReplicationStorageClassifications(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName) throws ApiException {
        ApiResponse<StorageClassificationMappingCollection> localVarResp = replicationStorageClassificationMappingsListByReplicationStorageClassificationsWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName);
        return localVarResp.getData();
    }

    /**
     * Gets the list of storage classification mappings objects under a storage.
     * Lists the storage classification mappings for the fabric.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @return ApiResponse&lt;StorageClassificationMappingCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageClassificationMappingCollection> replicationStorageClassificationMappingsListByReplicationStorageClassificationsWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName) throws ApiException {
        okhttp3.Call localVarCall = replicationStorageClassificationMappingsListByReplicationStorageClassificationsValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, null);
        Type localVarReturnType = new TypeToken<StorageClassificationMappingCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of storage classification mappings objects under a storage. (asynchronously)
     * Lists the storage classification mappings for the fabric.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param storageClassificationName Storage classification name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationStorageClassificationMappingsListByReplicationStorageClassificationsAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String storageClassificationName, final ApiCallback<StorageClassificationMappingCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationStorageClassificationMappingsListByReplicationStorageClassificationsValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, storageClassificationName, _callback);
        Type localVarReturnType = new TypeToken<StorageClassificationMappingCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
