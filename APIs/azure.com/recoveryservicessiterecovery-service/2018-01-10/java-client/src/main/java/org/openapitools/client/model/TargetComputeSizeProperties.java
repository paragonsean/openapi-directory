/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComputeSizeErrorDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents applicable recovery vm sizes properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TargetComputeSizeProperties {
  public static final String SERIALIZED_NAME_CPU_CORES_COUNT = "cpuCoresCount";
  @SerializedName(SERIALIZED_NAME_CPU_CORES_COUNT)
  private Integer cpuCoresCount;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<ComputeSizeErrorDetails> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_HIGH_IOPS_SUPPORTED = "highIopsSupported";
  @SerializedName(SERIALIZED_NAME_HIGH_IOPS_SUPPORTED)
  private String highIopsSupported;

  public static final String SERIALIZED_NAME_MAX_DATA_DISK_COUNT = "maxDataDiskCount";
  @SerializedName(SERIALIZED_NAME_MAX_DATA_DISK_COUNT)
  private Integer maxDataDiskCount;

  public static final String SERIALIZED_NAME_MAX_NICS_COUNT = "maxNicsCount";
  @SerializedName(SERIALIZED_NAME_MAX_NICS_COUNT)
  private Integer maxNicsCount;

  public static final String SERIALIZED_NAME_MEMORY_IN_G_B = "memoryInGB";
  @SerializedName(SERIALIZED_NAME_MEMORY_IN_G_B)
  private Double memoryInGB;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public TargetComputeSizeProperties() {
  }

  public TargetComputeSizeProperties cpuCoresCount(Integer cpuCoresCount) {
    this.cpuCoresCount = cpuCoresCount;
    return this;
  }

  /**
   * The maximum cpu cores count supported by target compute size.
   * @return cpuCoresCount
   */
  @javax.annotation.Nullable
  public Integer getCpuCoresCount() {
    return cpuCoresCount;
  }

  public void setCpuCoresCount(Integer cpuCoresCount) {
    this.cpuCoresCount = cpuCoresCount;
  }


  public TargetComputeSizeProperties errors(List<ComputeSizeErrorDetails> errors) {
    this.errors = errors;
    return this;
  }

  public TargetComputeSizeProperties addErrorsItem(ComputeSizeErrorDetails errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * The reasons why the target compute size is not applicable for the protected item.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<ComputeSizeErrorDetails> getErrors() {
    return errors;
  }

  public void setErrors(List<ComputeSizeErrorDetails> errors) {
    this.errors = errors;
  }


  public TargetComputeSizeProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Target compute size display name.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public TargetComputeSizeProperties highIopsSupported(String highIopsSupported) {
    this.highIopsSupported = highIopsSupported;
    return this;
  }

  /**
   * The value indicating whether the target compute size supports high Iops.
   * @return highIopsSupported
   */
  @javax.annotation.Nullable
  public String getHighIopsSupported() {
    return highIopsSupported;
  }

  public void setHighIopsSupported(String highIopsSupported) {
    this.highIopsSupported = highIopsSupported;
  }


  public TargetComputeSizeProperties maxDataDiskCount(Integer maxDataDiskCount) {
    this.maxDataDiskCount = maxDataDiskCount;
    return this;
  }

  /**
   * The maximum data disks count supported by target compute size.
   * @return maxDataDiskCount
   */
  @javax.annotation.Nullable
  public Integer getMaxDataDiskCount() {
    return maxDataDiskCount;
  }

  public void setMaxDataDiskCount(Integer maxDataDiskCount) {
    this.maxDataDiskCount = maxDataDiskCount;
  }


  public TargetComputeSizeProperties maxNicsCount(Integer maxNicsCount) {
    this.maxNicsCount = maxNicsCount;
    return this;
  }

  /**
   * The maximum Nics count supported by target compute size.
   * @return maxNicsCount
   */
  @javax.annotation.Nullable
  public Integer getMaxNicsCount() {
    return maxNicsCount;
  }

  public void setMaxNicsCount(Integer maxNicsCount) {
    this.maxNicsCount = maxNicsCount;
  }


  public TargetComputeSizeProperties memoryInGB(Double memoryInGB) {
    this.memoryInGB = memoryInGB;
    return this;
  }

  /**
   * The maximum memory in GB supported by target compute size.
   * @return memoryInGB
   */
  @javax.annotation.Nullable
  public Double getMemoryInGB() {
    return memoryInGB;
  }

  public void setMemoryInGB(Double memoryInGB) {
    this.memoryInGB = memoryInGB;
  }


  public TargetComputeSizeProperties name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Target compute size name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetComputeSizeProperties targetComputeSizeProperties = (TargetComputeSizeProperties) o;
    return Objects.equals(this.cpuCoresCount, targetComputeSizeProperties.cpuCoresCount) &&
        Objects.equals(this.errors, targetComputeSizeProperties.errors) &&
        Objects.equals(this.friendlyName, targetComputeSizeProperties.friendlyName) &&
        Objects.equals(this.highIopsSupported, targetComputeSizeProperties.highIopsSupported) &&
        Objects.equals(this.maxDataDiskCount, targetComputeSizeProperties.maxDataDiskCount) &&
        Objects.equals(this.maxNicsCount, targetComputeSizeProperties.maxNicsCount) &&
        Objects.equals(this.memoryInGB, targetComputeSizeProperties.memoryInGB) &&
        Objects.equals(this.name, targetComputeSizeProperties.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpuCoresCount, errors, friendlyName, highIopsSupported, maxDataDiskCount, maxNicsCount, memoryInGB, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetComputeSizeProperties {\n");
    sb.append("    cpuCoresCount: ").append(toIndentedString(cpuCoresCount)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    highIopsSupported: ").append(toIndentedString(highIopsSupported)).append("\n");
    sb.append("    maxDataDiskCount: ").append(toIndentedString(maxDataDiskCount)).append("\n");
    sb.append("    maxNicsCount: ").append(toIndentedString(maxNicsCount)).append("\n");
    sb.append("    memoryInGB: ").append(toIndentedString(memoryInGB)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cpuCoresCount");
    openapiFields.add("errors");
    openapiFields.add("friendlyName");
    openapiFields.add("highIopsSupported");
    openapiFields.add("maxDataDiskCount");
    openapiFields.add("maxNicsCount");
    openapiFields.add("memoryInGB");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetComputeSizeProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetComputeSizeProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetComputeSizeProperties is not found in the empty JSON string", TargetComputeSizeProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetComputeSizeProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetComputeSizeProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            ComputeSizeErrorDetails.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("highIopsSupported") != null && !jsonObj.get("highIopsSupported").isJsonNull()) && !jsonObj.get("highIopsSupported").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highIopsSupported` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highIopsSupported").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetComputeSizeProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetComputeSizeProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetComputeSizeProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetComputeSizeProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetComputeSizeProperties>() {
           @Override
           public void write(JsonWriter out, TargetComputeSizeProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetComputeSizeProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetComputeSizeProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetComputeSizeProperties
   * @throws IOException if the JSON string is invalid with respect to TargetComputeSizeProperties
   */
  public static TargetComputeSizeProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetComputeSizeProperties.class);
  }

  /**
   * Convert an instance of TargetComputeSizeProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

