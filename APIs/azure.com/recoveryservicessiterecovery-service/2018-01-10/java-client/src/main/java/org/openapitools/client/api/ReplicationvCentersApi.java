/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddVCenterRequest;
import org.openapitools.client.model.UpdateVCenterRequest;
import org.openapitools.client.model.VCenter;
import org.openapitools.client.model.VCenterCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReplicationvCentersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReplicationvCentersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReplicationvCentersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for replicationvCentersCreate
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name. (required)
     * @param addVCenterRequest The input to the add vCenter operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationvCentersCreateCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, AddVCenterRequest addVCenterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addVCenterRequest;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "vCenterName" + "}", localVarApiClient.escapeString(vCenterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationvCentersCreateValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, AddVCenterRequest addVCenterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationvCentersCreate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationvCentersCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationvCentersCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationvCentersCreate(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationvCentersCreate(Async)");
        }

        // verify the required parameter 'vCenterName' is set
        if (vCenterName == null) {
            throw new ApiException("Missing the required parameter 'vCenterName' when calling replicationvCentersCreate(Async)");
        }

        // verify the required parameter 'addVCenterRequest' is set
        if (addVCenterRequest == null) {
            throw new ApiException("Missing the required parameter 'addVCenterRequest' when calling replicationvCentersCreate(Async)");
        }

        return replicationvCentersCreateCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, addVCenterRequest, _callback);

    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name. (required)
     * @param addVCenterRequest The input to the add vCenter operation. (required)
     * @return VCenter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public VCenter replicationvCentersCreate(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, AddVCenterRequest addVCenterRequest) throws ApiException {
        ApiResponse<VCenter> localVarResp = replicationvCentersCreateWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, addVCenterRequest);
        return localVarResp.getData();
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name. (required)
     * @param addVCenterRequest The input to the add vCenter operation. (required)
     * @return ApiResponse&lt;VCenter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VCenter> replicationvCentersCreateWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, AddVCenterRequest addVCenterRequest) throws ApiException {
        okhttp3.Call localVarCall = replicationvCentersCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, addVCenterRequest, null);
        Type localVarReturnType = new TypeToken<VCenter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add vCenter. (asynchronously)
     * The operation to create a vCenter object..
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name. (required)
     * @param addVCenterRequest The input to the add vCenter operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationvCentersCreateAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, AddVCenterRequest addVCenterRequest, final ApiCallback<VCenter> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationvCentersCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, addVCenterRequest, _callback);
        Type localVarReturnType = new TypeToken<VCenter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationvCentersDelete
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationvCentersDeleteCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "vCenterName" + "}", localVarApiClient.escapeString(vCenterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationvCentersDeleteValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationvCentersDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationvCentersDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationvCentersDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationvCentersDelete(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationvCentersDelete(Async)");
        }

        // verify the required parameter 'vCenterName' is set
        if (vCenterName == null) {
            throw new ApiException("Missing the required parameter 'vCenterName' when calling replicationvCentersDelete(Async)");
        }

        return replicationvCentersDeleteCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, _callback);

    }

    /**
     * Remove vCenter operation.
     * The operation to remove(unregister) a registered vCenter server from the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void replicationvCentersDelete(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName) throws ApiException {
        replicationvCentersDeleteWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName);
    }

    /**
     * Remove vCenter operation.
     * The operation to remove(unregister) a registered vCenter server from the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replicationvCentersDeleteWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName) throws ApiException {
        okhttp3.Call localVarCall = replicationvCentersDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove vCenter operation. (asynchronously)
     * The operation to remove(unregister) a registered vCenter server from the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationvCentersDeleteAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationvCentersDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationvCentersGet
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationvCentersGetCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "vCenterName" + "}", localVarApiClient.escapeString(vCenterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationvCentersGetValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationvCentersGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationvCentersGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationvCentersGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationvCentersGet(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationvCentersGet(Async)");
        }

        // verify the required parameter 'vCenterName' is set
        if (vCenterName == null) {
            throw new ApiException("Missing the required parameter 'vCenterName' when calling replicationvCentersGet(Async)");
        }

        return replicationvCentersGetCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, _callback);

    }

    /**
     * Gets the details of a vCenter.
     * Gets the details of a registered vCenter server(Add vCenter server.)
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name. (required)
     * @return VCenter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VCenter replicationvCentersGet(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName) throws ApiException {
        ApiResponse<VCenter> localVarResp = replicationvCentersGetWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName);
        return localVarResp.getData();
    }

    /**
     * Gets the details of a vCenter.
     * Gets the details of a registered vCenter server(Add vCenter server.)
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name. (required)
     * @return ApiResponse&lt;VCenter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VCenter> replicationvCentersGetWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName) throws ApiException {
        okhttp3.Call localVarCall = replicationvCentersGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, null);
        Type localVarReturnType = new TypeToken<VCenter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the details of a vCenter. (asynchronously)
     * Gets the details of a registered vCenter server(Add vCenter server.)
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationvCentersGetAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, final ApiCallback<VCenter> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationvCentersGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, _callback);
        Type localVarReturnType = new TypeToken<VCenter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationvCentersList
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationvCentersListCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationvCenters"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationvCentersListValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationvCentersList(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationvCentersList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationvCentersList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationvCentersList(Async)");
        }

        return replicationvCentersListCall(apiVersion, resourceName, resourceGroupName, subscriptionId, _callback);

    }

    /**
     * Gets the list of vCenter registered under the vault.
     * Lists the vCenter servers registered in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @return VCenterCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VCenterCollection replicationvCentersList(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId) throws ApiException {
        ApiResponse<VCenterCollection> localVarResp = replicationvCentersListWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Gets the list of vCenter registered under the vault.
     * Lists the vCenter servers registered in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @return ApiResponse&lt;VCenterCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VCenterCollection> replicationvCentersListWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = replicationvCentersListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, null);
        Type localVarReturnType = new TypeToken<VCenterCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of vCenter registered under the vault. (asynchronously)
     * Lists the vCenter servers registered in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationvCentersListAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback<VCenterCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationvCentersListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<VCenterCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationvCentersListByReplicationFabrics
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationvCentersListByReplicationFabricsCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationvCentersListByReplicationFabricsValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationvCentersListByReplicationFabrics(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationvCentersListByReplicationFabrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationvCentersListByReplicationFabrics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationvCentersListByReplicationFabrics(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationvCentersListByReplicationFabrics(Async)");
        }

        return replicationvCentersListByReplicationFabricsCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, _callback);

    }

    /**
     * Gets the list of vCenter registered under a fabric.
     * Lists the vCenter servers registered in a fabric.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @return VCenterCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VCenterCollection replicationvCentersListByReplicationFabrics(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName) throws ApiException {
        ApiResponse<VCenterCollection> localVarResp = replicationvCentersListByReplicationFabricsWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName);
        return localVarResp.getData();
    }

    /**
     * Gets the list of vCenter registered under a fabric.
     * Lists the vCenter servers registered in a fabric.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @return ApiResponse&lt;VCenterCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VCenterCollection> replicationvCentersListByReplicationFabricsWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName) throws ApiException {
        okhttp3.Call localVarCall = replicationvCentersListByReplicationFabricsValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, null);
        Type localVarReturnType = new TypeToken<VCenterCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of vCenter registered under a fabric. (asynchronously)
     * Lists the vCenter servers registered in a fabric.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationvCentersListByReplicationFabricsAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, final ApiCallback<VCenterCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationvCentersListByReplicationFabricsValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, _callback);
        Type localVarReturnType = new TypeToken<VCenterCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationvCentersUpdate
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name (required)
     * @param updateVCenterRequest The input to the update vCenter operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationvCentersUpdateCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, UpdateVCenterRequest updateVCenterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateVCenterRequest;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "vCenterName" + "}", localVarApiClient.escapeString(vCenterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationvCentersUpdateValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, UpdateVCenterRequest updateVCenterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationvCentersUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationvCentersUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationvCentersUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationvCentersUpdate(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationvCentersUpdate(Async)");
        }

        // verify the required parameter 'vCenterName' is set
        if (vCenterName == null) {
            throw new ApiException("Missing the required parameter 'vCenterName' when calling replicationvCentersUpdate(Async)");
        }

        // verify the required parameter 'updateVCenterRequest' is set
        if (updateVCenterRequest == null) {
            throw new ApiException("Missing the required parameter 'updateVCenterRequest' when calling replicationvCentersUpdate(Async)");
        }

        return replicationvCentersUpdateCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, updateVCenterRequest, _callback);

    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name (required)
     * @param updateVCenterRequest The input to the update vCenter operation. (required)
     * @return VCenter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public VCenter replicationvCentersUpdate(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, UpdateVCenterRequest updateVCenterRequest) throws ApiException {
        ApiResponse<VCenter> localVarResp = replicationvCentersUpdateWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, updateVCenterRequest);
        return localVarResp.getData();
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name (required)
     * @param updateVCenterRequest The input to the update vCenter operation. (required)
     * @return ApiResponse&lt;VCenter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VCenter> replicationvCentersUpdateWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, UpdateVCenterRequest updateVCenterRequest) throws ApiException {
        okhttp3.Call localVarCall = replicationvCentersUpdateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, updateVCenterRequest, null);
        Type localVarReturnType = new TypeToken<VCenter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update vCenter operation. (asynchronously)
     * The operation to update a registered vCenter.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param vCenterName vCenter name (required)
     * @param updateVCenterRequest The input to the update vCenter operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationvCentersUpdateAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String vCenterName, UpdateVCenterRequest updateVCenterRequest, final ApiCallback<VCenter> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationvCentersUpdateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, vCenterName, updateVCenterRequest, _callback);
        Type localVarReturnType = new TypeToken<VCenter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
