/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PolicyProviderSpecificDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hyper-V Replica Blue specific protection profile details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HyperVReplicaBluePolicyDetails extends PolicyProviderSpecificDetails {
  public static final String SERIALIZED_NAME_ALLOWED_AUTHENTICATION_TYPE = "allowedAuthenticationType";
  @SerializedName(SERIALIZED_NAME_ALLOWED_AUTHENTICATION_TYPE)
  private Integer allowedAuthenticationType;

  public static final String SERIALIZED_NAME_APPLICATION_CONSISTENT_SNAPSHOT_FREQUENCY_IN_HOURS = "applicationConsistentSnapshotFrequencyInHours";
  @SerializedName(SERIALIZED_NAME_APPLICATION_CONSISTENT_SNAPSHOT_FREQUENCY_IN_HOURS)
  private Integer applicationConsistentSnapshotFrequencyInHours;

  public static final String SERIALIZED_NAME_COMPRESSION = "compression";
  @SerializedName(SERIALIZED_NAME_COMPRESSION)
  private String compression;

  public static final String SERIALIZED_NAME_INITIAL_REPLICATION_METHOD = "initialReplicationMethod";
  @SerializedName(SERIALIZED_NAME_INITIAL_REPLICATION_METHOD)
  private String initialReplicationMethod;

  public static final String SERIALIZED_NAME_OFFLINE_REPLICATION_EXPORT_PATH = "offlineReplicationExportPath";
  @SerializedName(SERIALIZED_NAME_OFFLINE_REPLICATION_EXPORT_PATH)
  private String offlineReplicationExportPath;

  public static final String SERIALIZED_NAME_OFFLINE_REPLICATION_IMPORT_PATH = "offlineReplicationImportPath";
  @SerializedName(SERIALIZED_NAME_OFFLINE_REPLICATION_IMPORT_PATH)
  private String offlineReplicationImportPath;

  public static final String SERIALIZED_NAME_ONLINE_REPLICATION_START_TIME = "onlineReplicationStartTime";
  @SerializedName(SERIALIZED_NAME_ONLINE_REPLICATION_START_TIME)
  private String onlineReplicationStartTime;

  public static final String SERIALIZED_NAME_RECOVERY_POINTS = "recoveryPoints";
  @SerializedName(SERIALIZED_NAME_RECOVERY_POINTS)
  private Integer recoveryPoints;

  public static final String SERIALIZED_NAME_REPLICA_DELETION_OPTION = "replicaDeletionOption";
  @SerializedName(SERIALIZED_NAME_REPLICA_DELETION_OPTION)
  private String replicaDeletionOption;

  public static final String SERIALIZED_NAME_REPLICATION_FREQUENCY_IN_SECONDS = "replicationFrequencyInSeconds";
  @SerializedName(SERIALIZED_NAME_REPLICATION_FREQUENCY_IN_SECONDS)
  private Integer replicationFrequencyInSeconds;

  public static final String SERIALIZED_NAME_REPLICATION_PORT = "replicationPort";
  @SerializedName(SERIALIZED_NAME_REPLICATION_PORT)
  private Integer replicationPort;

  public HyperVReplicaBluePolicyDetails() {
    this.instanceType = this.getClass().getSimpleName();
  }

  public HyperVReplicaBluePolicyDetails(
     String instanceType
  ) {
    this();
    this.instanceType = instanceType;
  }

  public HyperVReplicaBluePolicyDetails allowedAuthenticationType(Integer allowedAuthenticationType) {
    this.allowedAuthenticationType = allowedAuthenticationType;
    return this;
  }

  /**
   * A value indicating the authentication type.
   * @return allowedAuthenticationType
   */
  @javax.annotation.Nullable
  public Integer getAllowedAuthenticationType() {
    return allowedAuthenticationType;
  }

  public void setAllowedAuthenticationType(Integer allowedAuthenticationType) {
    this.allowedAuthenticationType = allowedAuthenticationType;
  }


  public HyperVReplicaBluePolicyDetails applicationConsistentSnapshotFrequencyInHours(Integer applicationConsistentSnapshotFrequencyInHours) {
    this.applicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHours;
    return this;
  }

  /**
   * A value indicating the application consistent frequency.
   * @return applicationConsistentSnapshotFrequencyInHours
   */
  @javax.annotation.Nullable
  public Integer getApplicationConsistentSnapshotFrequencyInHours() {
    return applicationConsistentSnapshotFrequencyInHours;
  }

  public void setApplicationConsistentSnapshotFrequencyInHours(Integer applicationConsistentSnapshotFrequencyInHours) {
    this.applicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHours;
  }


  public HyperVReplicaBluePolicyDetails compression(String compression) {
    this.compression = compression;
    return this;
  }

  /**
   * A value indicating whether compression has to be enabled.
   * @return compression
   */
  @javax.annotation.Nullable
  public String getCompression() {
    return compression;
  }

  public void setCompression(String compression) {
    this.compression = compression;
  }


  public HyperVReplicaBluePolicyDetails initialReplicationMethod(String initialReplicationMethod) {
    this.initialReplicationMethod = initialReplicationMethod;
    return this;
  }

  /**
   * A value indicating whether IR is online.
   * @return initialReplicationMethod
   */
  @javax.annotation.Nullable
  public String getInitialReplicationMethod() {
    return initialReplicationMethod;
  }

  public void setInitialReplicationMethod(String initialReplicationMethod) {
    this.initialReplicationMethod = initialReplicationMethod;
  }


  public HyperVReplicaBluePolicyDetails offlineReplicationExportPath(String offlineReplicationExportPath) {
    this.offlineReplicationExportPath = offlineReplicationExportPath;
    return this;
  }

  /**
   * A value indicating the offline IR export path.
   * @return offlineReplicationExportPath
   */
  @javax.annotation.Nullable
  public String getOfflineReplicationExportPath() {
    return offlineReplicationExportPath;
  }

  public void setOfflineReplicationExportPath(String offlineReplicationExportPath) {
    this.offlineReplicationExportPath = offlineReplicationExportPath;
  }


  public HyperVReplicaBluePolicyDetails offlineReplicationImportPath(String offlineReplicationImportPath) {
    this.offlineReplicationImportPath = offlineReplicationImportPath;
    return this;
  }

  /**
   * A value indicating the offline IR import path.
   * @return offlineReplicationImportPath
   */
  @javax.annotation.Nullable
  public String getOfflineReplicationImportPath() {
    return offlineReplicationImportPath;
  }

  public void setOfflineReplicationImportPath(String offlineReplicationImportPath) {
    this.offlineReplicationImportPath = offlineReplicationImportPath;
  }


  public HyperVReplicaBluePolicyDetails onlineReplicationStartTime(String onlineReplicationStartTime) {
    this.onlineReplicationStartTime = onlineReplicationStartTime;
    return this;
  }

  /**
   * A value indicating the online IR start time.
   * @return onlineReplicationStartTime
   */
  @javax.annotation.Nullable
  public String getOnlineReplicationStartTime() {
    return onlineReplicationStartTime;
  }

  public void setOnlineReplicationStartTime(String onlineReplicationStartTime) {
    this.onlineReplicationStartTime = onlineReplicationStartTime;
  }


  public HyperVReplicaBluePolicyDetails recoveryPoints(Integer recoveryPoints) {
    this.recoveryPoints = recoveryPoints;
    return this;
  }

  /**
   * A value indicating the number of recovery points.
   * @return recoveryPoints
   */
  @javax.annotation.Nullable
  public Integer getRecoveryPoints() {
    return recoveryPoints;
  }

  public void setRecoveryPoints(Integer recoveryPoints) {
    this.recoveryPoints = recoveryPoints;
  }


  public HyperVReplicaBluePolicyDetails replicaDeletionOption(String replicaDeletionOption) {
    this.replicaDeletionOption = replicaDeletionOption;
    return this;
  }

  /**
   * A value indicating whether the VM has to be auto deleted. Supported Values: String.Empty, None, OnRecoveryCloud
   * @return replicaDeletionOption
   */
  @javax.annotation.Nullable
  public String getReplicaDeletionOption() {
    return replicaDeletionOption;
  }

  public void setReplicaDeletionOption(String replicaDeletionOption) {
    this.replicaDeletionOption = replicaDeletionOption;
  }


  public HyperVReplicaBluePolicyDetails replicationFrequencyInSeconds(Integer replicationFrequencyInSeconds) {
    this.replicationFrequencyInSeconds = replicationFrequencyInSeconds;
    return this;
  }

  /**
   * A value indicating the replication interval.
   * @return replicationFrequencyInSeconds
   */
  @javax.annotation.Nullable
  public Integer getReplicationFrequencyInSeconds() {
    return replicationFrequencyInSeconds;
  }

  public void setReplicationFrequencyInSeconds(Integer replicationFrequencyInSeconds) {
    this.replicationFrequencyInSeconds = replicationFrequencyInSeconds;
  }


  public HyperVReplicaBluePolicyDetails replicationPort(Integer replicationPort) {
    this.replicationPort = replicationPort;
    return this;
  }

  /**
   * A value indicating the recovery HTTPS port.
   * @return replicationPort
   */
  @javax.annotation.Nullable
  public Integer getReplicationPort() {
    return replicationPort;
  }

  public void setReplicationPort(Integer replicationPort) {
    this.replicationPort = replicationPort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HyperVReplicaBluePolicyDetails hyperVReplicaBluePolicyDetails = (HyperVReplicaBluePolicyDetails) o;
    return Objects.equals(this.allowedAuthenticationType, hyperVReplicaBluePolicyDetails.allowedAuthenticationType) &&
        Objects.equals(this.applicationConsistentSnapshotFrequencyInHours, hyperVReplicaBluePolicyDetails.applicationConsistentSnapshotFrequencyInHours) &&
        Objects.equals(this.compression, hyperVReplicaBluePolicyDetails.compression) &&
        Objects.equals(this.initialReplicationMethod, hyperVReplicaBluePolicyDetails.initialReplicationMethod) &&
        Objects.equals(this.offlineReplicationExportPath, hyperVReplicaBluePolicyDetails.offlineReplicationExportPath) &&
        Objects.equals(this.offlineReplicationImportPath, hyperVReplicaBluePolicyDetails.offlineReplicationImportPath) &&
        Objects.equals(this.onlineReplicationStartTime, hyperVReplicaBluePolicyDetails.onlineReplicationStartTime) &&
        Objects.equals(this.recoveryPoints, hyperVReplicaBluePolicyDetails.recoveryPoints) &&
        Objects.equals(this.replicaDeletionOption, hyperVReplicaBluePolicyDetails.replicaDeletionOption) &&
        Objects.equals(this.replicationFrequencyInSeconds, hyperVReplicaBluePolicyDetails.replicationFrequencyInSeconds) &&
        Objects.equals(this.replicationPort, hyperVReplicaBluePolicyDetails.replicationPort) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedAuthenticationType, applicationConsistentSnapshotFrequencyInHours, compression, initialReplicationMethod, offlineReplicationExportPath, offlineReplicationImportPath, onlineReplicationStartTime, recoveryPoints, replicaDeletionOption, replicationFrequencyInSeconds, replicationPort, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HyperVReplicaBluePolicyDetails {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    allowedAuthenticationType: ").append(toIndentedString(allowedAuthenticationType)).append("\n");
    sb.append("    applicationConsistentSnapshotFrequencyInHours: ").append(toIndentedString(applicationConsistentSnapshotFrequencyInHours)).append("\n");
    sb.append("    compression: ").append(toIndentedString(compression)).append("\n");
    sb.append("    initialReplicationMethod: ").append(toIndentedString(initialReplicationMethod)).append("\n");
    sb.append("    offlineReplicationExportPath: ").append(toIndentedString(offlineReplicationExportPath)).append("\n");
    sb.append("    offlineReplicationImportPath: ").append(toIndentedString(offlineReplicationImportPath)).append("\n");
    sb.append("    onlineReplicationStartTime: ").append(toIndentedString(onlineReplicationStartTime)).append("\n");
    sb.append("    recoveryPoints: ").append(toIndentedString(recoveryPoints)).append("\n");
    sb.append("    replicaDeletionOption: ").append(toIndentedString(replicaDeletionOption)).append("\n");
    sb.append("    replicationFrequencyInSeconds: ").append(toIndentedString(replicationFrequencyInSeconds)).append("\n");
    sb.append("    replicationPort: ").append(toIndentedString(replicationPort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HyperVReplicaBluePolicyDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HyperVReplicaBluePolicyDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HyperVReplicaBluePolicyDetails is not found in the empty JSON string", HyperVReplicaBluePolicyDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HyperVReplicaBluePolicyDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HyperVReplicaBluePolicyDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HyperVReplicaBluePolicyDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HyperVReplicaBluePolicyDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HyperVReplicaBluePolicyDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HyperVReplicaBluePolicyDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<HyperVReplicaBluePolicyDetails>() {
           @Override
           public void write(JsonWriter out, HyperVReplicaBluePolicyDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HyperVReplicaBluePolicyDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HyperVReplicaBluePolicyDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HyperVReplicaBluePolicyDetails
   * @throws IOException if the JSON string is invalid with respect to HyperVReplicaBluePolicyDetails
   */
  public static HyperVReplicaBluePolicyDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HyperVReplicaBluePolicyDetails.class);
  }

  /**
   * Convert an instance of HyperVReplicaBluePolicyDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

