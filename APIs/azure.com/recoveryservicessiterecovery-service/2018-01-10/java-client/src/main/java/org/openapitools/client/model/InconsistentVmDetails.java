/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This class stores the monitoring details for consistency check of inconsistent Protected Entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InconsistentVmDetails {
  public static final String SERIALIZED_NAME_CLOUD_NAME = "cloudName";
  @SerializedName(SERIALIZED_NAME_CLOUD_NAME)
  private String cloudName;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List<String> details = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR_IDS = "errorIds";
  @SerializedName(SERIALIZED_NAME_ERROR_IDS)
  private List<String> errorIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_VM_NAME = "vmName";
  @SerializedName(SERIALIZED_NAME_VM_NAME)
  private String vmName;

  public InconsistentVmDetails() {
  }

  public InconsistentVmDetails cloudName(String cloudName) {
    this.cloudName = cloudName;
    return this;
  }

  /**
   * The Cloud name.
   * @return cloudName
   */
  @javax.annotation.Nullable
  public String getCloudName() {
    return cloudName;
  }

  public void setCloudName(String cloudName) {
    this.cloudName = cloudName;
  }


  public InconsistentVmDetails details(List<String> details) {
    this.details = details;
    return this;
  }

  public InconsistentVmDetails addDetailsItem(String detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

  /**
   * The list of details regarding state of the Protected Entity in SRS and On prem.
   * @return details
   */
  @javax.annotation.Nullable
  public List<String> getDetails() {
    return details;
  }

  public void setDetails(List<String> details) {
    this.details = details;
  }


  public InconsistentVmDetails errorIds(List<String> errorIds) {
    this.errorIds = errorIds;
    return this;
  }

  public InconsistentVmDetails addErrorIdsItem(String errorIdsItem) {
    if (this.errorIds == null) {
      this.errorIds = new ArrayList<>();
    }
    this.errorIds.add(errorIdsItem);
    return this;
  }

  /**
   * The list of error ids.
   * @return errorIds
   */
  @javax.annotation.Nullable
  public List<String> getErrorIds() {
    return errorIds;
  }

  public void setErrorIds(List<String> errorIds) {
    this.errorIds = errorIds;
  }


  public InconsistentVmDetails vmName(String vmName) {
    this.vmName = vmName;
    return this;
  }

  /**
   * The Vm name.
   * @return vmName
   */
  @javax.annotation.Nullable
  public String getVmName() {
    return vmName;
  }

  public void setVmName(String vmName) {
    this.vmName = vmName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InconsistentVmDetails inconsistentVmDetails = (InconsistentVmDetails) o;
    return Objects.equals(this.cloudName, inconsistentVmDetails.cloudName) &&
        Objects.equals(this.details, inconsistentVmDetails.details) &&
        Objects.equals(this.errorIds, inconsistentVmDetails.errorIds) &&
        Objects.equals(this.vmName, inconsistentVmDetails.vmName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudName, details, errorIds, vmName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InconsistentVmDetails {\n");
    sb.append("    cloudName: ").append(toIndentedString(cloudName)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    errorIds: ").append(toIndentedString(errorIds)).append("\n");
    sb.append("    vmName: ").append(toIndentedString(vmName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudName");
    openapiFields.add("details");
    openapiFields.add("errorIds");
    openapiFields.add("vmName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InconsistentVmDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InconsistentVmDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InconsistentVmDetails is not found in the empty JSON string", InconsistentVmDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InconsistentVmDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InconsistentVmDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cloudName") != null && !jsonObj.get("cloudName").isJsonNull()) && !jsonObj.get("cloudName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull() && !jsonObj.get("details").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("errorIds") != null && !jsonObj.get("errorIds").isJsonNull() && !jsonObj.get("errorIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorIds` to be an array in the JSON string but got `%s`", jsonObj.get("errorIds").toString()));
      }
      if ((jsonObj.get("vmName") != null && !jsonObj.get("vmName").isJsonNull()) && !jsonObj.get("vmName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InconsistentVmDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InconsistentVmDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InconsistentVmDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InconsistentVmDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<InconsistentVmDetails>() {
           @Override
           public void write(JsonWriter out, InconsistentVmDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InconsistentVmDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InconsistentVmDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InconsistentVmDetails
   * @throws IOException if the JSON string is invalid with respect to InconsistentVmDetails
   */
  public static InconsistentVmDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InconsistentVmDetails.class);
  }

  /**
   * Convert an instance of InconsistentVmDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

