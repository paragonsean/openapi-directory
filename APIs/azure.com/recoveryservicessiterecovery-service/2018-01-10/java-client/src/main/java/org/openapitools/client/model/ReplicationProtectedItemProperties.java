/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CurrentScenarioDetails;
import org.openapitools.client.model.HealthError;
import org.openapitools.client.model.ReplicationProviderSpecificSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replication protected item custom data details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationProtectedItemProperties {
  public static final String SERIALIZED_NAME_ACTIVE_LOCATION = "activeLocation";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LOCATION)
  private String activeLocation;

  public static final String SERIALIZED_NAME_ALLOWED_OPERATIONS = "allowedOperations";
  @SerializedName(SERIALIZED_NAME_ALLOWED_OPERATIONS)
  private List<String> allowedOperations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_SCENARIO = "currentScenario";
  @SerializedName(SERIALIZED_NAME_CURRENT_SCENARIO)
  private CurrentScenarioDetails currentScenario;

  public static final String SERIALIZED_NAME_FAILOVER_HEALTH = "failoverHealth";
  @SerializedName(SERIALIZED_NAME_FAILOVER_HEALTH)
  private String failoverHealth;

  public static final String SERIALIZED_NAME_FAILOVER_RECOVERY_POINT_ID = "failoverRecoveryPointId";
  @SerializedName(SERIALIZED_NAME_FAILOVER_RECOVERY_POINT_ID)
  private String failoverRecoveryPointId;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_HEALTH_ERRORS = "healthErrors";
  @SerializedName(SERIALIZED_NAME_HEALTH_ERRORS)
  private List<HealthError> healthErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_SUCCESSFUL_FAILOVER_TIME = "lastSuccessfulFailoverTime";
  @SerializedName(SERIALIZED_NAME_LAST_SUCCESSFUL_FAILOVER_TIME)
  private OffsetDateTime lastSuccessfulFailoverTime;

  public static final String SERIALIZED_NAME_LAST_SUCCESSFUL_TEST_FAILOVER_TIME = "lastSuccessfulTestFailoverTime";
  @SerializedName(SERIALIZED_NAME_LAST_SUCCESSFUL_TEST_FAILOVER_TIME)
  private OffsetDateTime lastSuccessfulTestFailoverTime;

  public static final String SERIALIZED_NAME_POLICY_FRIENDLY_NAME = "policyFriendlyName";
  @SerializedName(SERIALIZED_NAME_POLICY_FRIENDLY_NAME)
  private String policyFriendlyName;

  public static final String SERIALIZED_NAME_POLICY_ID = "policyId";
  @SerializedName(SERIALIZED_NAME_POLICY_ID)
  private String policyId;

  public static final String SERIALIZED_NAME_PRIMARY_FABRIC_FRIENDLY_NAME = "primaryFabricFriendlyName";
  @SerializedName(SERIALIZED_NAME_PRIMARY_FABRIC_FRIENDLY_NAME)
  private String primaryFabricFriendlyName;

  public static final String SERIALIZED_NAME_PRIMARY_FABRIC_PROVIDER = "primaryFabricProvider";
  @SerializedName(SERIALIZED_NAME_PRIMARY_FABRIC_PROVIDER)
  private String primaryFabricProvider;

  public static final String SERIALIZED_NAME_PRIMARY_PROTECTION_CONTAINER_FRIENDLY_NAME = "primaryProtectionContainerFriendlyName";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PROTECTION_CONTAINER_FRIENDLY_NAME)
  private String primaryProtectionContainerFriendlyName;

  public static final String SERIALIZED_NAME_PROTECTABLE_ITEM_ID = "protectableItemId";
  @SerializedName(SERIALIZED_NAME_PROTECTABLE_ITEM_ID)
  private String protectableItemId;

  public static final String SERIALIZED_NAME_PROTECTED_ITEM_TYPE = "protectedItemType";
  @SerializedName(SERIALIZED_NAME_PROTECTED_ITEM_TYPE)
  private String protectedItemType;

  public static final String SERIALIZED_NAME_PROTECTION_STATE = "protectionState";
  @SerializedName(SERIALIZED_NAME_PROTECTION_STATE)
  private String protectionState;

  public static final String SERIALIZED_NAME_PROTECTION_STATE_DESCRIPTION = "protectionStateDescription";
  @SerializedName(SERIALIZED_NAME_PROTECTION_STATE_DESCRIPTION)
  private String protectionStateDescription;

  public static final String SERIALIZED_NAME_PROVIDER_SPECIFIC_DETAILS = "providerSpecificDetails";
  @SerializedName(SERIALIZED_NAME_PROVIDER_SPECIFIC_DETAILS)
  private ReplicationProviderSpecificSettings providerSpecificDetails;

  public static final String SERIALIZED_NAME_RECOVERY_CONTAINER_ID = "recoveryContainerId";
  @SerializedName(SERIALIZED_NAME_RECOVERY_CONTAINER_ID)
  private String recoveryContainerId;

  public static final String SERIALIZED_NAME_RECOVERY_FABRIC_FRIENDLY_NAME = "recoveryFabricFriendlyName";
  @SerializedName(SERIALIZED_NAME_RECOVERY_FABRIC_FRIENDLY_NAME)
  private String recoveryFabricFriendlyName;

  public static final String SERIALIZED_NAME_RECOVERY_FABRIC_ID = "recoveryFabricId";
  @SerializedName(SERIALIZED_NAME_RECOVERY_FABRIC_ID)
  private String recoveryFabricId;

  public static final String SERIALIZED_NAME_RECOVERY_PROTECTION_CONTAINER_FRIENDLY_NAME = "recoveryProtectionContainerFriendlyName";
  @SerializedName(SERIALIZED_NAME_RECOVERY_PROTECTION_CONTAINER_FRIENDLY_NAME)
  private String recoveryProtectionContainerFriendlyName;

  public static final String SERIALIZED_NAME_RECOVERY_SERVICES_PROVIDER_ID = "recoveryServicesProviderId";
  @SerializedName(SERIALIZED_NAME_RECOVERY_SERVICES_PROVIDER_ID)
  private String recoveryServicesProviderId;

  public static final String SERIALIZED_NAME_REPLICATION_HEALTH = "replicationHealth";
  @SerializedName(SERIALIZED_NAME_REPLICATION_HEALTH)
  private String replicationHealth;

  public static final String SERIALIZED_NAME_TEST_FAILOVER_STATE = "testFailoverState";
  @SerializedName(SERIALIZED_NAME_TEST_FAILOVER_STATE)
  private String testFailoverState;

  public static final String SERIALIZED_NAME_TEST_FAILOVER_STATE_DESCRIPTION = "testFailoverStateDescription";
  @SerializedName(SERIALIZED_NAME_TEST_FAILOVER_STATE_DESCRIPTION)
  private String testFailoverStateDescription;

  public ReplicationProtectedItemProperties() {
  }

  public ReplicationProtectedItemProperties activeLocation(String activeLocation) {
    this.activeLocation = activeLocation;
    return this;
  }

  /**
   * The Current active location of the PE.
   * @return activeLocation
   */
  @javax.annotation.Nullable
  public String getActiveLocation() {
    return activeLocation;
  }

  public void setActiveLocation(String activeLocation) {
    this.activeLocation = activeLocation;
  }


  public ReplicationProtectedItemProperties allowedOperations(List<String> allowedOperations) {
    this.allowedOperations = allowedOperations;
    return this;
  }

  public ReplicationProtectedItemProperties addAllowedOperationsItem(String allowedOperationsItem) {
    if (this.allowedOperations == null) {
      this.allowedOperations = new ArrayList<>();
    }
    this.allowedOperations.add(allowedOperationsItem);
    return this;
  }

  /**
   * The allowed operations on the Replication protected item.
   * @return allowedOperations
   */
  @javax.annotation.Nullable
  public List<String> getAllowedOperations() {
    return allowedOperations;
  }

  public void setAllowedOperations(List<String> allowedOperations) {
    this.allowedOperations = allowedOperations;
  }


  public ReplicationProtectedItemProperties currentScenario(CurrentScenarioDetails currentScenario) {
    this.currentScenario = currentScenario;
    return this;
  }

  /**
   * Get currentScenario
   * @return currentScenario
   */
  @javax.annotation.Nullable
  public CurrentScenarioDetails getCurrentScenario() {
    return currentScenario;
  }

  public void setCurrentScenario(CurrentScenarioDetails currentScenario) {
    this.currentScenario = currentScenario;
  }


  public ReplicationProtectedItemProperties failoverHealth(String failoverHealth) {
    this.failoverHealth = failoverHealth;
    return this;
  }

  /**
   * The consolidated failover health for the VM.
   * @return failoverHealth
   */
  @javax.annotation.Nullable
  public String getFailoverHealth() {
    return failoverHealth;
  }

  public void setFailoverHealth(String failoverHealth) {
    this.failoverHealth = failoverHealth;
  }


  public ReplicationProtectedItemProperties failoverRecoveryPointId(String failoverRecoveryPointId) {
    this.failoverRecoveryPointId = failoverRecoveryPointId;
    return this;
  }

  /**
   * The recovery point ARM Id to which the Vm was failed over.
   * @return failoverRecoveryPointId
   */
  @javax.annotation.Nullable
  public String getFailoverRecoveryPointId() {
    return failoverRecoveryPointId;
  }

  public void setFailoverRecoveryPointId(String failoverRecoveryPointId) {
    this.failoverRecoveryPointId = failoverRecoveryPointId;
  }


  public ReplicationProtectedItemProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The name.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public ReplicationProtectedItemProperties healthErrors(List<HealthError> healthErrors) {
    this.healthErrors = healthErrors;
    return this;
  }

  public ReplicationProtectedItemProperties addHealthErrorsItem(HealthError healthErrorsItem) {
    if (this.healthErrors == null) {
      this.healthErrors = new ArrayList<>();
    }
    this.healthErrors.add(healthErrorsItem);
    return this;
  }

  /**
   * List of health errors.
   * @return healthErrors
   */
  @javax.annotation.Nullable
  public List<HealthError> getHealthErrors() {
    return healthErrors;
  }

  public void setHealthErrors(List<HealthError> healthErrors) {
    this.healthErrors = healthErrors;
  }


  public ReplicationProtectedItemProperties lastSuccessfulFailoverTime(OffsetDateTime lastSuccessfulFailoverTime) {
    this.lastSuccessfulFailoverTime = lastSuccessfulFailoverTime;
    return this;
  }

  /**
   * The Last successful failover time.
   * @return lastSuccessfulFailoverTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSuccessfulFailoverTime() {
    return lastSuccessfulFailoverTime;
  }

  public void setLastSuccessfulFailoverTime(OffsetDateTime lastSuccessfulFailoverTime) {
    this.lastSuccessfulFailoverTime = lastSuccessfulFailoverTime;
  }


  public ReplicationProtectedItemProperties lastSuccessfulTestFailoverTime(OffsetDateTime lastSuccessfulTestFailoverTime) {
    this.lastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTime;
    return this;
  }

  /**
   * The Last successful test failover time.
   * @return lastSuccessfulTestFailoverTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSuccessfulTestFailoverTime() {
    return lastSuccessfulTestFailoverTime;
  }

  public void setLastSuccessfulTestFailoverTime(OffsetDateTime lastSuccessfulTestFailoverTime) {
    this.lastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTime;
  }


  public ReplicationProtectedItemProperties policyFriendlyName(String policyFriendlyName) {
    this.policyFriendlyName = policyFriendlyName;
    return this;
  }

  /**
   * The name of Policy governing this PE.
   * @return policyFriendlyName
   */
  @javax.annotation.Nullable
  public String getPolicyFriendlyName() {
    return policyFriendlyName;
  }

  public void setPolicyFriendlyName(String policyFriendlyName) {
    this.policyFriendlyName = policyFriendlyName;
  }


  public ReplicationProtectedItemProperties policyId(String policyId) {
    this.policyId = policyId;
    return this;
  }

  /**
   * The ID of Policy governing this PE.
   * @return policyId
   */
  @javax.annotation.Nullable
  public String getPolicyId() {
    return policyId;
  }

  public void setPolicyId(String policyId) {
    this.policyId = policyId;
  }


  public ReplicationProtectedItemProperties primaryFabricFriendlyName(String primaryFabricFriendlyName) {
    this.primaryFabricFriendlyName = primaryFabricFriendlyName;
    return this;
  }

  /**
   * The friendly name of the primary fabric.
   * @return primaryFabricFriendlyName
   */
  @javax.annotation.Nullable
  public String getPrimaryFabricFriendlyName() {
    return primaryFabricFriendlyName;
  }

  public void setPrimaryFabricFriendlyName(String primaryFabricFriendlyName) {
    this.primaryFabricFriendlyName = primaryFabricFriendlyName;
  }


  public ReplicationProtectedItemProperties primaryFabricProvider(String primaryFabricProvider) {
    this.primaryFabricProvider = primaryFabricProvider;
    return this;
  }

  /**
   * The fabric provider of the primary fabric.
   * @return primaryFabricProvider
   */
  @javax.annotation.Nullable
  public String getPrimaryFabricProvider() {
    return primaryFabricProvider;
  }

  public void setPrimaryFabricProvider(String primaryFabricProvider) {
    this.primaryFabricProvider = primaryFabricProvider;
  }


  public ReplicationProtectedItemProperties primaryProtectionContainerFriendlyName(String primaryProtectionContainerFriendlyName) {
    this.primaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyName;
    return this;
  }

  /**
   * The name of primary protection container friendly name.
   * @return primaryProtectionContainerFriendlyName
   */
  @javax.annotation.Nullable
  public String getPrimaryProtectionContainerFriendlyName() {
    return primaryProtectionContainerFriendlyName;
  }

  public void setPrimaryProtectionContainerFriendlyName(String primaryProtectionContainerFriendlyName) {
    this.primaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyName;
  }


  public ReplicationProtectedItemProperties protectableItemId(String protectableItemId) {
    this.protectableItemId = protectableItemId;
    return this;
  }

  /**
   * The protected item ARM Id.
   * @return protectableItemId
   */
  @javax.annotation.Nullable
  public String getProtectableItemId() {
    return protectableItemId;
  }

  public void setProtectableItemId(String protectableItemId) {
    this.protectableItemId = protectableItemId;
  }


  public ReplicationProtectedItemProperties protectedItemType(String protectedItemType) {
    this.protectedItemType = protectedItemType;
    return this;
  }

  /**
   * The type of protected item type.
   * @return protectedItemType
   */
  @javax.annotation.Nullable
  public String getProtectedItemType() {
    return protectedItemType;
  }

  public void setProtectedItemType(String protectedItemType) {
    this.protectedItemType = protectedItemType;
  }


  public ReplicationProtectedItemProperties protectionState(String protectionState) {
    this.protectionState = protectionState;
    return this;
  }

  /**
   * The protection status.
   * @return protectionState
   */
  @javax.annotation.Nullable
  public String getProtectionState() {
    return protectionState;
  }

  public void setProtectionState(String protectionState) {
    this.protectionState = protectionState;
  }


  public ReplicationProtectedItemProperties protectionStateDescription(String protectionStateDescription) {
    this.protectionStateDescription = protectionStateDescription;
    return this;
  }

  /**
   * The protection state description.
   * @return protectionStateDescription
   */
  @javax.annotation.Nullable
  public String getProtectionStateDescription() {
    return protectionStateDescription;
  }

  public void setProtectionStateDescription(String protectionStateDescription) {
    this.protectionStateDescription = protectionStateDescription;
  }


  public ReplicationProtectedItemProperties providerSpecificDetails(ReplicationProviderSpecificSettings providerSpecificDetails) {
    this.providerSpecificDetails = providerSpecificDetails;
    return this;
  }

  /**
   * Get providerSpecificDetails
   * @return providerSpecificDetails
   */
  @javax.annotation.Nullable
  public ReplicationProviderSpecificSettings getProviderSpecificDetails() {
    return providerSpecificDetails;
  }

  public void setProviderSpecificDetails(ReplicationProviderSpecificSettings providerSpecificDetails) {
    this.providerSpecificDetails = providerSpecificDetails;
  }


  public ReplicationProtectedItemProperties recoveryContainerId(String recoveryContainerId) {
    this.recoveryContainerId = recoveryContainerId;
    return this;
  }

  /**
   * The recovery container Id.
   * @return recoveryContainerId
   */
  @javax.annotation.Nullable
  public String getRecoveryContainerId() {
    return recoveryContainerId;
  }

  public void setRecoveryContainerId(String recoveryContainerId) {
    this.recoveryContainerId = recoveryContainerId;
  }


  public ReplicationProtectedItemProperties recoveryFabricFriendlyName(String recoveryFabricFriendlyName) {
    this.recoveryFabricFriendlyName = recoveryFabricFriendlyName;
    return this;
  }

  /**
   * The friendly name of recovery fabric.
   * @return recoveryFabricFriendlyName
   */
  @javax.annotation.Nullable
  public String getRecoveryFabricFriendlyName() {
    return recoveryFabricFriendlyName;
  }

  public void setRecoveryFabricFriendlyName(String recoveryFabricFriendlyName) {
    this.recoveryFabricFriendlyName = recoveryFabricFriendlyName;
  }


  public ReplicationProtectedItemProperties recoveryFabricId(String recoveryFabricId) {
    this.recoveryFabricId = recoveryFabricId;
    return this;
  }

  /**
   * The Arm Id of recovery fabric.
   * @return recoveryFabricId
   */
  @javax.annotation.Nullable
  public String getRecoveryFabricId() {
    return recoveryFabricId;
  }

  public void setRecoveryFabricId(String recoveryFabricId) {
    this.recoveryFabricId = recoveryFabricId;
  }


  public ReplicationProtectedItemProperties recoveryProtectionContainerFriendlyName(String recoveryProtectionContainerFriendlyName) {
    this.recoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyName;
    return this;
  }

  /**
   * The name of recovery container friendly name.
   * @return recoveryProtectionContainerFriendlyName
   */
  @javax.annotation.Nullable
  public String getRecoveryProtectionContainerFriendlyName() {
    return recoveryProtectionContainerFriendlyName;
  }

  public void setRecoveryProtectionContainerFriendlyName(String recoveryProtectionContainerFriendlyName) {
    this.recoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyName;
  }


  public ReplicationProtectedItemProperties recoveryServicesProviderId(String recoveryServicesProviderId) {
    this.recoveryServicesProviderId = recoveryServicesProviderId;
    return this;
  }

  /**
   * The recovery provider ARM Id.
   * @return recoveryServicesProviderId
   */
  @javax.annotation.Nullable
  public String getRecoveryServicesProviderId() {
    return recoveryServicesProviderId;
  }

  public void setRecoveryServicesProviderId(String recoveryServicesProviderId) {
    this.recoveryServicesProviderId = recoveryServicesProviderId;
  }


  public ReplicationProtectedItemProperties replicationHealth(String replicationHealth) {
    this.replicationHealth = replicationHealth;
    return this;
  }

  /**
   * The consolidated protection health for the VM taking any issues with SRS as well as all the replication units associated with the VM&#39;s replication group into account. This is a string representation of the ProtectionHealth enumeration.
   * @return replicationHealth
   */
  @javax.annotation.Nullable
  public String getReplicationHealth() {
    return replicationHealth;
  }

  public void setReplicationHealth(String replicationHealth) {
    this.replicationHealth = replicationHealth;
  }


  public ReplicationProtectedItemProperties testFailoverState(String testFailoverState) {
    this.testFailoverState = testFailoverState;
    return this;
  }

  /**
   * The Test failover state.
   * @return testFailoverState
   */
  @javax.annotation.Nullable
  public String getTestFailoverState() {
    return testFailoverState;
  }

  public void setTestFailoverState(String testFailoverState) {
    this.testFailoverState = testFailoverState;
  }


  public ReplicationProtectedItemProperties testFailoverStateDescription(String testFailoverStateDescription) {
    this.testFailoverStateDescription = testFailoverStateDescription;
    return this;
  }

  /**
   * The Test failover state description.
   * @return testFailoverStateDescription
   */
  @javax.annotation.Nullable
  public String getTestFailoverStateDescription() {
    return testFailoverStateDescription;
  }

  public void setTestFailoverStateDescription(String testFailoverStateDescription) {
    this.testFailoverStateDescription = testFailoverStateDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationProtectedItemProperties replicationProtectedItemProperties = (ReplicationProtectedItemProperties) o;
    return Objects.equals(this.activeLocation, replicationProtectedItemProperties.activeLocation) &&
        Objects.equals(this.allowedOperations, replicationProtectedItemProperties.allowedOperations) &&
        Objects.equals(this.currentScenario, replicationProtectedItemProperties.currentScenario) &&
        Objects.equals(this.failoverHealth, replicationProtectedItemProperties.failoverHealth) &&
        Objects.equals(this.failoverRecoveryPointId, replicationProtectedItemProperties.failoverRecoveryPointId) &&
        Objects.equals(this.friendlyName, replicationProtectedItemProperties.friendlyName) &&
        Objects.equals(this.healthErrors, replicationProtectedItemProperties.healthErrors) &&
        Objects.equals(this.lastSuccessfulFailoverTime, replicationProtectedItemProperties.lastSuccessfulFailoverTime) &&
        Objects.equals(this.lastSuccessfulTestFailoverTime, replicationProtectedItemProperties.lastSuccessfulTestFailoverTime) &&
        Objects.equals(this.policyFriendlyName, replicationProtectedItemProperties.policyFriendlyName) &&
        Objects.equals(this.policyId, replicationProtectedItemProperties.policyId) &&
        Objects.equals(this.primaryFabricFriendlyName, replicationProtectedItemProperties.primaryFabricFriendlyName) &&
        Objects.equals(this.primaryFabricProvider, replicationProtectedItemProperties.primaryFabricProvider) &&
        Objects.equals(this.primaryProtectionContainerFriendlyName, replicationProtectedItemProperties.primaryProtectionContainerFriendlyName) &&
        Objects.equals(this.protectableItemId, replicationProtectedItemProperties.protectableItemId) &&
        Objects.equals(this.protectedItemType, replicationProtectedItemProperties.protectedItemType) &&
        Objects.equals(this.protectionState, replicationProtectedItemProperties.protectionState) &&
        Objects.equals(this.protectionStateDescription, replicationProtectedItemProperties.protectionStateDescription) &&
        Objects.equals(this.providerSpecificDetails, replicationProtectedItemProperties.providerSpecificDetails) &&
        Objects.equals(this.recoveryContainerId, replicationProtectedItemProperties.recoveryContainerId) &&
        Objects.equals(this.recoveryFabricFriendlyName, replicationProtectedItemProperties.recoveryFabricFriendlyName) &&
        Objects.equals(this.recoveryFabricId, replicationProtectedItemProperties.recoveryFabricId) &&
        Objects.equals(this.recoveryProtectionContainerFriendlyName, replicationProtectedItemProperties.recoveryProtectionContainerFriendlyName) &&
        Objects.equals(this.recoveryServicesProviderId, replicationProtectedItemProperties.recoveryServicesProviderId) &&
        Objects.equals(this.replicationHealth, replicationProtectedItemProperties.replicationHealth) &&
        Objects.equals(this.testFailoverState, replicationProtectedItemProperties.testFailoverState) &&
        Objects.equals(this.testFailoverStateDescription, replicationProtectedItemProperties.testFailoverStateDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeLocation, allowedOperations, currentScenario, failoverHealth, failoverRecoveryPointId, friendlyName, healthErrors, lastSuccessfulFailoverTime, lastSuccessfulTestFailoverTime, policyFriendlyName, policyId, primaryFabricFriendlyName, primaryFabricProvider, primaryProtectionContainerFriendlyName, protectableItemId, protectedItemType, protectionState, protectionStateDescription, providerSpecificDetails, recoveryContainerId, recoveryFabricFriendlyName, recoveryFabricId, recoveryProtectionContainerFriendlyName, recoveryServicesProviderId, replicationHealth, testFailoverState, testFailoverStateDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationProtectedItemProperties {\n");
    sb.append("    activeLocation: ").append(toIndentedString(activeLocation)).append("\n");
    sb.append("    allowedOperations: ").append(toIndentedString(allowedOperations)).append("\n");
    sb.append("    currentScenario: ").append(toIndentedString(currentScenario)).append("\n");
    sb.append("    failoverHealth: ").append(toIndentedString(failoverHealth)).append("\n");
    sb.append("    failoverRecoveryPointId: ").append(toIndentedString(failoverRecoveryPointId)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    healthErrors: ").append(toIndentedString(healthErrors)).append("\n");
    sb.append("    lastSuccessfulFailoverTime: ").append(toIndentedString(lastSuccessfulFailoverTime)).append("\n");
    sb.append("    lastSuccessfulTestFailoverTime: ").append(toIndentedString(lastSuccessfulTestFailoverTime)).append("\n");
    sb.append("    policyFriendlyName: ").append(toIndentedString(policyFriendlyName)).append("\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("    primaryFabricFriendlyName: ").append(toIndentedString(primaryFabricFriendlyName)).append("\n");
    sb.append("    primaryFabricProvider: ").append(toIndentedString(primaryFabricProvider)).append("\n");
    sb.append("    primaryProtectionContainerFriendlyName: ").append(toIndentedString(primaryProtectionContainerFriendlyName)).append("\n");
    sb.append("    protectableItemId: ").append(toIndentedString(protectableItemId)).append("\n");
    sb.append("    protectedItemType: ").append(toIndentedString(protectedItemType)).append("\n");
    sb.append("    protectionState: ").append(toIndentedString(protectionState)).append("\n");
    sb.append("    protectionStateDescription: ").append(toIndentedString(protectionStateDescription)).append("\n");
    sb.append("    providerSpecificDetails: ").append(toIndentedString(providerSpecificDetails)).append("\n");
    sb.append("    recoveryContainerId: ").append(toIndentedString(recoveryContainerId)).append("\n");
    sb.append("    recoveryFabricFriendlyName: ").append(toIndentedString(recoveryFabricFriendlyName)).append("\n");
    sb.append("    recoveryFabricId: ").append(toIndentedString(recoveryFabricId)).append("\n");
    sb.append("    recoveryProtectionContainerFriendlyName: ").append(toIndentedString(recoveryProtectionContainerFriendlyName)).append("\n");
    sb.append("    recoveryServicesProviderId: ").append(toIndentedString(recoveryServicesProviderId)).append("\n");
    sb.append("    replicationHealth: ").append(toIndentedString(replicationHealth)).append("\n");
    sb.append("    testFailoverState: ").append(toIndentedString(testFailoverState)).append("\n");
    sb.append("    testFailoverStateDescription: ").append(toIndentedString(testFailoverStateDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeLocation");
    openapiFields.add("allowedOperations");
    openapiFields.add("currentScenario");
    openapiFields.add("failoverHealth");
    openapiFields.add("failoverRecoveryPointId");
    openapiFields.add("friendlyName");
    openapiFields.add("healthErrors");
    openapiFields.add("lastSuccessfulFailoverTime");
    openapiFields.add("lastSuccessfulTestFailoverTime");
    openapiFields.add("policyFriendlyName");
    openapiFields.add("policyId");
    openapiFields.add("primaryFabricFriendlyName");
    openapiFields.add("primaryFabricProvider");
    openapiFields.add("primaryProtectionContainerFriendlyName");
    openapiFields.add("protectableItemId");
    openapiFields.add("protectedItemType");
    openapiFields.add("protectionState");
    openapiFields.add("protectionStateDescription");
    openapiFields.add("providerSpecificDetails");
    openapiFields.add("recoveryContainerId");
    openapiFields.add("recoveryFabricFriendlyName");
    openapiFields.add("recoveryFabricId");
    openapiFields.add("recoveryProtectionContainerFriendlyName");
    openapiFields.add("recoveryServicesProviderId");
    openapiFields.add("replicationHealth");
    openapiFields.add("testFailoverState");
    openapiFields.add("testFailoverStateDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationProtectedItemProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationProtectedItemProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationProtectedItemProperties is not found in the empty JSON string", ReplicationProtectedItemProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationProtectedItemProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationProtectedItemProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activeLocation") != null && !jsonObj.get("activeLocation").isJsonNull()) && !jsonObj.get("activeLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeLocation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedOperations") != null && !jsonObj.get("allowedOperations").isJsonNull() && !jsonObj.get("allowedOperations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedOperations` to be an array in the JSON string but got `%s`", jsonObj.get("allowedOperations").toString()));
      }
      // validate the optional field `currentScenario`
      if (jsonObj.get("currentScenario") != null && !jsonObj.get("currentScenario").isJsonNull()) {
        CurrentScenarioDetails.validateJsonElement(jsonObj.get("currentScenario"));
      }
      if ((jsonObj.get("failoverHealth") != null && !jsonObj.get("failoverHealth").isJsonNull()) && !jsonObj.get("failoverHealth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failoverHealth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failoverHealth").toString()));
      }
      if ((jsonObj.get("failoverRecoveryPointId") != null && !jsonObj.get("failoverRecoveryPointId").isJsonNull()) && !jsonObj.get("failoverRecoveryPointId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failoverRecoveryPointId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failoverRecoveryPointId").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if (jsonObj.get("healthErrors") != null && !jsonObj.get("healthErrors").isJsonNull()) {
        JsonArray jsonArrayhealthErrors = jsonObj.getAsJsonArray("healthErrors");
        if (jsonArrayhealthErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("healthErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `healthErrors` to be an array in the JSON string but got `%s`", jsonObj.get("healthErrors").toString()));
          }

          // validate the optional field `healthErrors` (array)
          for (int i = 0; i < jsonArrayhealthErrors.size(); i++) {
            HealthError.validateJsonElement(jsonArrayhealthErrors.get(i));
          };
        }
      }
      if ((jsonObj.get("policyFriendlyName") != null && !jsonObj.get("policyFriendlyName").isJsonNull()) && !jsonObj.get("policyFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyFriendlyName").toString()));
      }
      if ((jsonObj.get("policyId") != null && !jsonObj.get("policyId").isJsonNull()) && !jsonObj.get("policyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyId").toString()));
      }
      if ((jsonObj.get("primaryFabricFriendlyName") != null && !jsonObj.get("primaryFabricFriendlyName").isJsonNull()) && !jsonObj.get("primaryFabricFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryFabricFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryFabricFriendlyName").toString()));
      }
      if ((jsonObj.get("primaryFabricProvider") != null && !jsonObj.get("primaryFabricProvider").isJsonNull()) && !jsonObj.get("primaryFabricProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryFabricProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryFabricProvider").toString()));
      }
      if ((jsonObj.get("primaryProtectionContainerFriendlyName") != null && !jsonObj.get("primaryProtectionContainerFriendlyName").isJsonNull()) && !jsonObj.get("primaryProtectionContainerFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryProtectionContainerFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryProtectionContainerFriendlyName").toString()));
      }
      if ((jsonObj.get("protectableItemId") != null && !jsonObj.get("protectableItemId").isJsonNull()) && !jsonObj.get("protectableItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectableItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectableItemId").toString()));
      }
      if ((jsonObj.get("protectedItemType") != null && !jsonObj.get("protectedItemType").isJsonNull()) && !jsonObj.get("protectedItemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectedItemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectedItemType").toString()));
      }
      if ((jsonObj.get("protectionState") != null && !jsonObj.get("protectionState").isJsonNull()) && !jsonObj.get("protectionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectionState").toString()));
      }
      if ((jsonObj.get("protectionStateDescription") != null && !jsonObj.get("protectionStateDescription").isJsonNull()) && !jsonObj.get("protectionStateDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectionStateDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectionStateDescription").toString()));
      }
      // validate the optional field `providerSpecificDetails`
      if (jsonObj.get("providerSpecificDetails") != null && !jsonObj.get("providerSpecificDetails").isJsonNull()) {
        ReplicationProviderSpecificSettings.validateJsonElement(jsonObj.get("providerSpecificDetails"));
      }
      if ((jsonObj.get("recoveryContainerId") != null && !jsonObj.get("recoveryContainerId").isJsonNull()) && !jsonObj.get("recoveryContainerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryContainerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryContainerId").toString()));
      }
      if ((jsonObj.get("recoveryFabricFriendlyName") != null && !jsonObj.get("recoveryFabricFriendlyName").isJsonNull()) && !jsonObj.get("recoveryFabricFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryFabricFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryFabricFriendlyName").toString()));
      }
      if ((jsonObj.get("recoveryFabricId") != null && !jsonObj.get("recoveryFabricId").isJsonNull()) && !jsonObj.get("recoveryFabricId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryFabricId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryFabricId").toString()));
      }
      if ((jsonObj.get("recoveryProtectionContainerFriendlyName") != null && !jsonObj.get("recoveryProtectionContainerFriendlyName").isJsonNull()) && !jsonObj.get("recoveryProtectionContainerFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryProtectionContainerFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryProtectionContainerFriendlyName").toString()));
      }
      if ((jsonObj.get("recoveryServicesProviderId") != null && !jsonObj.get("recoveryServicesProviderId").isJsonNull()) && !jsonObj.get("recoveryServicesProviderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryServicesProviderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryServicesProviderId").toString()));
      }
      if ((jsonObj.get("replicationHealth") != null && !jsonObj.get("replicationHealth").isJsonNull()) && !jsonObj.get("replicationHealth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationHealth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationHealth").toString()));
      }
      if ((jsonObj.get("testFailoverState") != null && !jsonObj.get("testFailoverState").isJsonNull()) && !jsonObj.get("testFailoverState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testFailoverState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testFailoverState").toString()));
      }
      if ((jsonObj.get("testFailoverStateDescription") != null && !jsonObj.get("testFailoverStateDescription").isJsonNull()) && !jsonObj.get("testFailoverStateDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testFailoverStateDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testFailoverStateDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationProtectedItemProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationProtectedItemProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationProtectedItemProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationProtectedItemProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationProtectedItemProperties>() {
           @Override
           public void write(JsonWriter out, ReplicationProtectedItemProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationProtectedItemProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationProtectedItemProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationProtectedItemProperties
   * @throws IOException if the JSON string is invalid with respect to ReplicationProtectedItemProperties
   */
  public static ReplicationProtectedItemProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationProtectedItemProperties.class);
  }

  /**
   * Convert an instance of ReplicationProtectedItemProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

