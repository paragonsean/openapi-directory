/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecoveryPlanGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Recovery plan creation properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRecoveryPlanInputProperties {
  /**
   * The failover deployment model.
   */
  @JsonAdapter(FailoverDeploymentModelEnum.Adapter.class)
  public enum FailoverDeploymentModelEnum {
    NOT_APPLICABLE("NotApplicable"),
    
    CLASSIC("Classic"),
    
    RESOURCE_MANAGER("ResourceManager");

    private String value;

    FailoverDeploymentModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FailoverDeploymentModelEnum fromValue(String value) {
      for (FailoverDeploymentModelEnum b : FailoverDeploymentModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FailoverDeploymentModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailoverDeploymentModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailoverDeploymentModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FailoverDeploymentModelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FailoverDeploymentModelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAILOVER_DEPLOYMENT_MODEL = "failoverDeploymentModel";
  @SerializedName(SERIALIZED_NAME_FAILOVER_DEPLOYMENT_MODEL)
  private FailoverDeploymentModelEnum failoverDeploymentModel;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<RecoveryPlanGroup> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY_FABRIC_ID = "primaryFabricId";
  @SerializedName(SERIALIZED_NAME_PRIMARY_FABRIC_ID)
  private String primaryFabricId;

  public static final String SERIALIZED_NAME_RECOVERY_FABRIC_ID = "recoveryFabricId";
  @SerializedName(SERIALIZED_NAME_RECOVERY_FABRIC_ID)
  private String recoveryFabricId;

  public CreateRecoveryPlanInputProperties() {
  }

  public CreateRecoveryPlanInputProperties failoverDeploymentModel(FailoverDeploymentModelEnum failoverDeploymentModel) {
    this.failoverDeploymentModel = failoverDeploymentModel;
    return this;
  }

  /**
   * The failover deployment model.
   * @return failoverDeploymentModel
   */
  @javax.annotation.Nullable
  public FailoverDeploymentModelEnum getFailoverDeploymentModel() {
    return failoverDeploymentModel;
  }

  public void setFailoverDeploymentModel(FailoverDeploymentModelEnum failoverDeploymentModel) {
    this.failoverDeploymentModel = failoverDeploymentModel;
  }


  public CreateRecoveryPlanInputProperties groups(List<RecoveryPlanGroup> groups) {
    this.groups = groups;
    return this;
  }

  public CreateRecoveryPlanInputProperties addGroupsItem(RecoveryPlanGroup groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * The recovery plan groups.
   * @return groups
   */
  @javax.annotation.Nonnull
  public List<RecoveryPlanGroup> getGroups() {
    return groups;
  }

  public void setGroups(List<RecoveryPlanGroup> groups) {
    this.groups = groups;
  }


  public CreateRecoveryPlanInputProperties primaryFabricId(String primaryFabricId) {
    this.primaryFabricId = primaryFabricId;
    return this;
  }

  /**
   * The primary fabric Id.
   * @return primaryFabricId
   */
  @javax.annotation.Nonnull
  public String getPrimaryFabricId() {
    return primaryFabricId;
  }

  public void setPrimaryFabricId(String primaryFabricId) {
    this.primaryFabricId = primaryFabricId;
  }


  public CreateRecoveryPlanInputProperties recoveryFabricId(String recoveryFabricId) {
    this.recoveryFabricId = recoveryFabricId;
    return this;
  }

  /**
   * The recovery fabric Id.
   * @return recoveryFabricId
   */
  @javax.annotation.Nonnull
  public String getRecoveryFabricId() {
    return recoveryFabricId;
  }

  public void setRecoveryFabricId(String recoveryFabricId) {
    this.recoveryFabricId = recoveryFabricId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRecoveryPlanInputProperties createRecoveryPlanInputProperties = (CreateRecoveryPlanInputProperties) o;
    return Objects.equals(this.failoverDeploymentModel, createRecoveryPlanInputProperties.failoverDeploymentModel) &&
        Objects.equals(this.groups, createRecoveryPlanInputProperties.groups) &&
        Objects.equals(this.primaryFabricId, createRecoveryPlanInputProperties.primaryFabricId) &&
        Objects.equals(this.recoveryFabricId, createRecoveryPlanInputProperties.recoveryFabricId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failoverDeploymentModel, groups, primaryFabricId, recoveryFabricId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRecoveryPlanInputProperties {\n");
    sb.append("    failoverDeploymentModel: ").append(toIndentedString(failoverDeploymentModel)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    primaryFabricId: ").append(toIndentedString(primaryFabricId)).append("\n");
    sb.append("    recoveryFabricId: ").append(toIndentedString(recoveryFabricId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failoverDeploymentModel");
    openapiFields.add("groups");
    openapiFields.add("primaryFabricId");
    openapiFields.add("recoveryFabricId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("groups");
    openapiRequiredFields.add("primaryFabricId");
    openapiRequiredFields.add("recoveryFabricId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRecoveryPlanInputProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRecoveryPlanInputProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRecoveryPlanInputProperties is not found in the empty JSON string", CreateRecoveryPlanInputProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRecoveryPlanInputProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRecoveryPlanInputProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRecoveryPlanInputProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("failoverDeploymentModel") != null && !jsonObj.get("failoverDeploymentModel").isJsonNull()) && !jsonObj.get("failoverDeploymentModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failoverDeploymentModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failoverDeploymentModel").toString()));
      }
      // validate the optional field `failoverDeploymentModel`
      if (jsonObj.get("failoverDeploymentModel") != null && !jsonObj.get("failoverDeploymentModel").isJsonNull()) {
        FailoverDeploymentModelEnum.validateJsonElement(jsonObj.get("failoverDeploymentModel"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }

      JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
      // validate the required field `groups` (array)
      for (int i = 0; i < jsonArraygroups.size(); i++) {
        RecoveryPlanGroup.validateJsonElement(jsonArraygroups.get(i));
      };
      if (!jsonObj.get("primaryFabricId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryFabricId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryFabricId").toString()));
      }
      if (!jsonObj.get("recoveryFabricId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryFabricId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryFabricId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRecoveryPlanInputProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRecoveryPlanInputProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRecoveryPlanInputProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRecoveryPlanInputProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRecoveryPlanInputProperties>() {
           @Override
           public void write(JsonWriter out, CreateRecoveryPlanInputProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRecoveryPlanInputProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRecoveryPlanInputProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRecoveryPlanInputProperties
   * @throws IOException if the JSON string is invalid with respect to CreateRecoveryPlanInputProperties
   */
  public static CreateRecoveryPlanInputProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRecoveryPlanInputProperties.class);
  }

  /**
   * Convert an instance of CreateRecoveryPlanInputProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

