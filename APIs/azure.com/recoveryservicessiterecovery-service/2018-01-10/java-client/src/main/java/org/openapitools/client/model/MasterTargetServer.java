/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataStore;
import org.openapitools.client.model.HealthError;
import org.openapitools.client.model.RetentionVolume;
import org.openapitools.client.model.VersionDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a Master Target Server.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MasterTargetServer {
  public static final String SERIALIZED_NAME_AGENT_EXPIRY_DATE = "agentExpiryDate";
  @SerializedName(SERIALIZED_NAME_AGENT_EXPIRY_DATE)
  private OffsetDateTime agentExpiryDate;

  public static final String SERIALIZED_NAME_AGENT_VERSION = "agentVersion";
  @SerializedName(SERIALIZED_NAME_AGENT_VERSION)
  private String agentVersion;

  public static final String SERIALIZED_NAME_AGENT_VERSION_DETAILS = "agentVersionDetails";
  @SerializedName(SERIALIZED_NAME_AGENT_VERSION_DETAILS)
  private VersionDetails agentVersionDetails;

  public static final String SERIALIZED_NAME_DATA_STORES = "dataStores";
  @SerializedName(SERIALIZED_NAME_DATA_STORES)
  private List<DataStore> dataStores = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISK_COUNT = "diskCount";
  @SerializedName(SERIALIZED_NAME_DISK_COUNT)
  private Integer diskCount;

  public static final String SERIALIZED_NAME_HEALTH_ERRORS = "healthErrors";
  @SerializedName(SERIALIZED_NAME_HEALTH_ERRORS)
  private List<HealthError> healthErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LAST_HEARTBEAT = "lastHeartbeat";
  @SerializedName(SERIALIZED_NAME_LAST_HEARTBEAT)
  private OffsetDateTime lastHeartbeat;

  public static final String SERIALIZED_NAME_MARS_AGENT_EXPIRY_DATE = "marsAgentExpiryDate";
  @SerializedName(SERIALIZED_NAME_MARS_AGENT_EXPIRY_DATE)
  private OffsetDateTime marsAgentExpiryDate;

  public static final String SERIALIZED_NAME_MARS_AGENT_VERSION = "marsAgentVersion";
  @SerializedName(SERIALIZED_NAME_MARS_AGENT_VERSION)
  private String marsAgentVersion;

  public static final String SERIALIZED_NAME_MARS_AGENT_VERSION_DETAILS = "marsAgentVersionDetails";
  @SerializedName(SERIALIZED_NAME_MARS_AGENT_VERSION_DETAILS)
  private VersionDetails marsAgentVersionDetails;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private String osType;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_RETENTION_VOLUMES = "retentionVolumes";
  @SerializedName(SERIALIZED_NAME_RETENTION_VOLUMES)
  private List<RetentionVolume> retentionVolumes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "validationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<HealthError> validationErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION_STATUS = "versionStatus";
  @SerializedName(SERIALIZED_NAME_VERSION_STATUS)
  private String versionStatus;

  public MasterTargetServer() {
  }

  public MasterTargetServer agentExpiryDate(OffsetDateTime agentExpiryDate) {
    this.agentExpiryDate = agentExpiryDate;
    return this;
  }

  /**
   * Agent expiry date.
   * @return agentExpiryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAgentExpiryDate() {
    return agentExpiryDate;
  }

  public void setAgentExpiryDate(OffsetDateTime agentExpiryDate) {
    this.agentExpiryDate = agentExpiryDate;
  }


  public MasterTargetServer agentVersion(String agentVersion) {
    this.agentVersion = agentVersion;
    return this;
  }

  /**
   * The version of the scout component on the server.
   * @return agentVersion
   */
  @javax.annotation.Nullable
  public String getAgentVersion() {
    return agentVersion;
  }

  public void setAgentVersion(String agentVersion) {
    this.agentVersion = agentVersion;
  }


  public MasterTargetServer agentVersionDetails(VersionDetails agentVersionDetails) {
    this.agentVersionDetails = agentVersionDetails;
    return this;
  }

  /**
   * Get agentVersionDetails
   * @return agentVersionDetails
   */
  @javax.annotation.Nullable
  public VersionDetails getAgentVersionDetails() {
    return agentVersionDetails;
  }

  public void setAgentVersionDetails(VersionDetails agentVersionDetails) {
    this.agentVersionDetails = agentVersionDetails;
  }


  public MasterTargetServer dataStores(List<DataStore> dataStores) {
    this.dataStores = dataStores;
    return this;
  }

  public MasterTargetServer addDataStoresItem(DataStore dataStoresItem) {
    if (this.dataStores == null) {
      this.dataStores = new ArrayList<>();
    }
    this.dataStores.add(dataStoresItem);
    return this;
  }

  /**
   * The list of data stores in the fabric.
   * @return dataStores
   */
  @javax.annotation.Nullable
  public List<DataStore> getDataStores() {
    return dataStores;
  }

  public void setDataStores(List<DataStore> dataStores) {
    this.dataStores = dataStores;
  }


  public MasterTargetServer diskCount(Integer diskCount) {
    this.diskCount = diskCount;
    return this;
  }

  /**
   * Disk count of the master target.
   * @return diskCount
   */
  @javax.annotation.Nullable
  public Integer getDiskCount() {
    return diskCount;
  }

  public void setDiskCount(Integer diskCount) {
    this.diskCount = diskCount;
  }


  public MasterTargetServer healthErrors(List<HealthError> healthErrors) {
    this.healthErrors = healthErrors;
    return this;
  }

  public MasterTargetServer addHealthErrorsItem(HealthError healthErrorsItem) {
    if (this.healthErrors == null) {
      this.healthErrors = new ArrayList<>();
    }
    this.healthErrors.add(healthErrorsItem);
    return this;
  }

  /**
   * Health errors.
   * @return healthErrors
   */
  @javax.annotation.Nullable
  public List<HealthError> getHealthErrors() {
    return healthErrors;
  }

  public void setHealthErrors(List<HealthError> healthErrors) {
    this.healthErrors = healthErrors;
  }


  public MasterTargetServer id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The server Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MasterTargetServer ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * The IP address of the server.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public MasterTargetServer lastHeartbeat(OffsetDateTime lastHeartbeat) {
    this.lastHeartbeat = lastHeartbeat;
    return this;
  }

  /**
   * The last heartbeat received from the server.
   * @return lastHeartbeat
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastHeartbeat() {
    return lastHeartbeat;
  }

  public void setLastHeartbeat(OffsetDateTime lastHeartbeat) {
    this.lastHeartbeat = lastHeartbeat;
  }


  public MasterTargetServer marsAgentExpiryDate(OffsetDateTime marsAgentExpiryDate) {
    this.marsAgentExpiryDate = marsAgentExpiryDate;
    return this;
  }

  /**
   * MARS agent expiry date.
   * @return marsAgentExpiryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMarsAgentExpiryDate() {
    return marsAgentExpiryDate;
  }

  public void setMarsAgentExpiryDate(OffsetDateTime marsAgentExpiryDate) {
    this.marsAgentExpiryDate = marsAgentExpiryDate;
  }


  public MasterTargetServer marsAgentVersion(String marsAgentVersion) {
    this.marsAgentVersion = marsAgentVersion;
    return this;
  }

  /**
   * MARS agent version.
   * @return marsAgentVersion
   */
  @javax.annotation.Nullable
  public String getMarsAgentVersion() {
    return marsAgentVersion;
  }

  public void setMarsAgentVersion(String marsAgentVersion) {
    this.marsAgentVersion = marsAgentVersion;
  }


  public MasterTargetServer marsAgentVersionDetails(VersionDetails marsAgentVersionDetails) {
    this.marsAgentVersionDetails = marsAgentVersionDetails;
    return this;
  }

  /**
   * Get marsAgentVersionDetails
   * @return marsAgentVersionDetails
   */
  @javax.annotation.Nullable
  public VersionDetails getMarsAgentVersionDetails() {
    return marsAgentVersionDetails;
  }

  public void setMarsAgentVersionDetails(VersionDetails marsAgentVersionDetails) {
    this.marsAgentVersionDetails = marsAgentVersionDetails;
  }


  public MasterTargetServer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The server name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MasterTargetServer osType(String osType) {
    this.osType = osType;
    return this;
  }

  /**
   * The OS type of the server.
   * @return osType
   */
  @javax.annotation.Nullable
  public String getOsType() {
    return osType;
  }

  public void setOsType(String osType) {
    this.osType = osType;
  }


  public MasterTargetServer osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * OS Version of the master target.
   * @return osVersion
   */
  @javax.annotation.Nullable
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public MasterTargetServer retentionVolumes(List<RetentionVolume> retentionVolumes) {
    this.retentionVolumes = retentionVolumes;
    return this;
  }

  public MasterTargetServer addRetentionVolumesItem(RetentionVolume retentionVolumesItem) {
    if (this.retentionVolumes == null) {
      this.retentionVolumes = new ArrayList<>();
    }
    this.retentionVolumes.add(retentionVolumesItem);
    return this;
  }

  /**
   * The retention volumes of Master target Server.
   * @return retentionVolumes
   */
  @javax.annotation.Nullable
  public List<RetentionVolume> getRetentionVolumes() {
    return retentionVolumes;
  }

  public void setRetentionVolumes(List<RetentionVolume> retentionVolumes) {
    this.retentionVolumes = retentionVolumes;
  }


  public MasterTargetServer validationErrors(List<HealthError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public MasterTargetServer addValidationErrorsItem(HealthError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Validation errors.
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<HealthError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<HealthError> validationErrors) {
    this.validationErrors = validationErrors;
  }


  public MasterTargetServer versionStatus(String versionStatus) {
    this.versionStatus = versionStatus;
    return this;
  }

  /**
   * Version status
   * @return versionStatus
   */
  @javax.annotation.Nullable
  public String getVersionStatus() {
    return versionStatus;
  }

  public void setVersionStatus(String versionStatus) {
    this.versionStatus = versionStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MasterTargetServer masterTargetServer = (MasterTargetServer) o;
    return Objects.equals(this.agentExpiryDate, masterTargetServer.agentExpiryDate) &&
        Objects.equals(this.agentVersion, masterTargetServer.agentVersion) &&
        Objects.equals(this.agentVersionDetails, masterTargetServer.agentVersionDetails) &&
        Objects.equals(this.dataStores, masterTargetServer.dataStores) &&
        Objects.equals(this.diskCount, masterTargetServer.diskCount) &&
        Objects.equals(this.healthErrors, masterTargetServer.healthErrors) &&
        Objects.equals(this.id, masterTargetServer.id) &&
        Objects.equals(this.ipAddress, masterTargetServer.ipAddress) &&
        Objects.equals(this.lastHeartbeat, masterTargetServer.lastHeartbeat) &&
        Objects.equals(this.marsAgentExpiryDate, masterTargetServer.marsAgentExpiryDate) &&
        Objects.equals(this.marsAgentVersion, masterTargetServer.marsAgentVersion) &&
        Objects.equals(this.marsAgentVersionDetails, masterTargetServer.marsAgentVersionDetails) &&
        Objects.equals(this.name, masterTargetServer.name) &&
        Objects.equals(this.osType, masterTargetServer.osType) &&
        Objects.equals(this.osVersion, masterTargetServer.osVersion) &&
        Objects.equals(this.retentionVolumes, masterTargetServer.retentionVolumes) &&
        Objects.equals(this.validationErrors, masterTargetServer.validationErrors) &&
        Objects.equals(this.versionStatus, masterTargetServer.versionStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentExpiryDate, agentVersion, agentVersionDetails, dataStores, diskCount, healthErrors, id, ipAddress, lastHeartbeat, marsAgentExpiryDate, marsAgentVersion, marsAgentVersionDetails, name, osType, osVersion, retentionVolumes, validationErrors, versionStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MasterTargetServer {\n");
    sb.append("    agentExpiryDate: ").append(toIndentedString(agentExpiryDate)).append("\n");
    sb.append("    agentVersion: ").append(toIndentedString(agentVersion)).append("\n");
    sb.append("    agentVersionDetails: ").append(toIndentedString(agentVersionDetails)).append("\n");
    sb.append("    dataStores: ").append(toIndentedString(dataStores)).append("\n");
    sb.append("    diskCount: ").append(toIndentedString(diskCount)).append("\n");
    sb.append("    healthErrors: ").append(toIndentedString(healthErrors)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    lastHeartbeat: ").append(toIndentedString(lastHeartbeat)).append("\n");
    sb.append("    marsAgentExpiryDate: ").append(toIndentedString(marsAgentExpiryDate)).append("\n");
    sb.append("    marsAgentVersion: ").append(toIndentedString(marsAgentVersion)).append("\n");
    sb.append("    marsAgentVersionDetails: ").append(toIndentedString(marsAgentVersionDetails)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    retentionVolumes: ").append(toIndentedString(retentionVolumes)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    versionStatus: ").append(toIndentedString(versionStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentExpiryDate");
    openapiFields.add("agentVersion");
    openapiFields.add("agentVersionDetails");
    openapiFields.add("dataStores");
    openapiFields.add("diskCount");
    openapiFields.add("healthErrors");
    openapiFields.add("id");
    openapiFields.add("ipAddress");
    openapiFields.add("lastHeartbeat");
    openapiFields.add("marsAgentExpiryDate");
    openapiFields.add("marsAgentVersion");
    openapiFields.add("marsAgentVersionDetails");
    openapiFields.add("name");
    openapiFields.add("osType");
    openapiFields.add("osVersion");
    openapiFields.add("retentionVolumes");
    openapiFields.add("validationErrors");
    openapiFields.add("versionStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MasterTargetServer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MasterTargetServer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MasterTargetServer is not found in the empty JSON string", MasterTargetServer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MasterTargetServer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MasterTargetServer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agentVersion") != null && !jsonObj.get("agentVersion").isJsonNull()) && !jsonObj.get("agentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentVersion").toString()));
      }
      // validate the optional field `agentVersionDetails`
      if (jsonObj.get("agentVersionDetails") != null && !jsonObj.get("agentVersionDetails").isJsonNull()) {
        VersionDetails.validateJsonElement(jsonObj.get("agentVersionDetails"));
      }
      if (jsonObj.get("dataStores") != null && !jsonObj.get("dataStores").isJsonNull()) {
        JsonArray jsonArraydataStores = jsonObj.getAsJsonArray("dataStores");
        if (jsonArraydataStores != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataStores").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataStores` to be an array in the JSON string but got `%s`", jsonObj.get("dataStores").toString()));
          }

          // validate the optional field `dataStores` (array)
          for (int i = 0; i < jsonArraydataStores.size(); i++) {
            DataStore.validateJsonElement(jsonArraydataStores.get(i));
          };
        }
      }
      if (jsonObj.get("healthErrors") != null && !jsonObj.get("healthErrors").isJsonNull()) {
        JsonArray jsonArrayhealthErrors = jsonObj.getAsJsonArray("healthErrors");
        if (jsonArrayhealthErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("healthErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `healthErrors` to be an array in the JSON string but got `%s`", jsonObj.get("healthErrors").toString()));
          }

          // validate the optional field `healthErrors` (array)
          for (int i = 0; i < jsonArrayhealthErrors.size(); i++) {
            HealthError.validateJsonElement(jsonArrayhealthErrors.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("marsAgentVersion") != null && !jsonObj.get("marsAgentVersion").isJsonNull()) && !jsonObj.get("marsAgentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marsAgentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marsAgentVersion").toString()));
      }
      // validate the optional field `marsAgentVersionDetails`
      if (jsonObj.get("marsAgentVersionDetails") != null && !jsonObj.get("marsAgentVersionDetails").isJsonNull()) {
        VersionDetails.validateJsonElement(jsonObj.get("marsAgentVersionDetails"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      if ((jsonObj.get("osVersion") != null && !jsonObj.get("osVersion").isJsonNull()) && !jsonObj.get("osVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osVersion").toString()));
      }
      if (jsonObj.get("retentionVolumes") != null && !jsonObj.get("retentionVolumes").isJsonNull()) {
        JsonArray jsonArrayretentionVolumes = jsonObj.getAsJsonArray("retentionVolumes");
        if (jsonArrayretentionVolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("retentionVolumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `retentionVolumes` to be an array in the JSON string but got `%s`", jsonObj.get("retentionVolumes").toString()));
          }

          // validate the optional field `retentionVolumes` (array)
          for (int i = 0; i < jsonArrayretentionVolumes.size(); i++) {
            RetentionVolume.validateJsonElement(jsonArrayretentionVolumes.get(i));
          };
        }
      }
      if (jsonObj.get("validationErrors") != null && !jsonObj.get("validationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("validationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("validationErrors").toString()));
          }

          // validate the optional field `validationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            HealthError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
      if ((jsonObj.get("versionStatus") != null && !jsonObj.get("versionStatus").isJsonNull()) && !jsonObj.get("versionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MasterTargetServer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MasterTargetServer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MasterTargetServer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MasterTargetServer.class));

       return (TypeAdapter<T>) new TypeAdapter<MasterTargetServer>() {
           @Override
           public void write(JsonWriter out, MasterTargetServer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MasterTargetServer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MasterTargetServer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MasterTargetServer
   * @throws IOException if the JSON string is invalid with respect to MasterTargetServer
   */
  public static MasterTargetServer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MasterTargetServer.class);
  }

  /**
   * Convert an instance of MasterTargetServer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

