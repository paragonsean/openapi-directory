/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A2A protected disk details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class A2AProtectedDiskDetails {
  public static final String SERIALIZED_NAME_DATA_PENDING_AT_SOURCE_AGENT_IN_M_B = "dataPendingAtSourceAgentInMB";
  @SerializedName(SERIALIZED_NAME_DATA_PENDING_AT_SOURCE_AGENT_IN_M_B)
  private Double dataPendingAtSourceAgentInMB;

  public static final String SERIALIZED_NAME_DATA_PENDING_IN_STAGING_STORAGE_ACCOUNT_IN_M_B = "dataPendingInStagingStorageAccountInMB";
  @SerializedName(SERIALIZED_NAME_DATA_PENDING_IN_STAGING_STORAGE_ACCOUNT_IN_M_B)
  private Double dataPendingInStagingStorageAccountInMB;

  public static final String SERIALIZED_NAME_DEK_KEY_VAULT_ARM_ID = "dekKeyVaultArmId";
  @SerializedName(SERIALIZED_NAME_DEK_KEY_VAULT_ARM_ID)
  private String dekKeyVaultArmId;

  public static final String SERIALIZED_NAME_DISK_CAPACITY_IN_BYTES = "diskCapacityInBytes";
  @SerializedName(SERIALIZED_NAME_DISK_CAPACITY_IN_BYTES)
  private Long diskCapacityInBytes;

  public static final String SERIALIZED_NAME_DISK_NAME = "diskName";
  @SerializedName(SERIALIZED_NAME_DISK_NAME)
  private String diskName;

  public static final String SERIALIZED_NAME_DISK_TYPE = "diskType";
  @SerializedName(SERIALIZED_NAME_DISK_TYPE)
  private String diskType;

  public static final String SERIALIZED_NAME_DISK_URI = "diskUri";
  @SerializedName(SERIALIZED_NAME_DISK_URI)
  private String diskUri;

  public static final String SERIALIZED_NAME_IS_DISK_ENCRYPTED = "isDiskEncrypted";
  @SerializedName(SERIALIZED_NAME_IS_DISK_ENCRYPTED)
  private Boolean isDiskEncrypted;

  public static final String SERIALIZED_NAME_IS_DISK_KEY_ENCRYPTED = "isDiskKeyEncrypted";
  @SerializedName(SERIALIZED_NAME_IS_DISK_KEY_ENCRYPTED)
  private Boolean isDiskKeyEncrypted;

  public static final String SERIALIZED_NAME_KEK_KEY_VAULT_ARM_ID = "kekKeyVaultArmId";
  @SerializedName(SERIALIZED_NAME_KEK_KEY_VAULT_ARM_ID)
  private String kekKeyVaultArmId;

  public static final String SERIALIZED_NAME_KEY_IDENTIFIER = "keyIdentifier";
  @SerializedName(SERIALIZED_NAME_KEY_IDENTIFIER)
  private String keyIdentifier;

  public static final String SERIALIZED_NAME_MONITORING_JOB_TYPE = "monitoringJobType";
  @SerializedName(SERIALIZED_NAME_MONITORING_JOB_TYPE)
  private String monitoringJobType;

  public static final String SERIALIZED_NAME_MONITORING_PERCENTAGE_COMPLETION = "monitoringPercentageCompletion";
  @SerializedName(SERIALIZED_NAME_MONITORING_PERCENTAGE_COMPLETION)
  private Integer monitoringPercentageCompletion;

  public static final String SERIALIZED_NAME_PRIMARY_DISK_AZURE_STORAGE_ACCOUNT_ID = "primaryDiskAzureStorageAccountId";
  @SerializedName(SERIALIZED_NAME_PRIMARY_DISK_AZURE_STORAGE_ACCOUNT_ID)
  private String primaryDiskAzureStorageAccountId;

  public static final String SERIALIZED_NAME_PRIMARY_STAGING_AZURE_STORAGE_ACCOUNT_ID = "primaryStagingAzureStorageAccountId";
  @SerializedName(SERIALIZED_NAME_PRIMARY_STAGING_AZURE_STORAGE_ACCOUNT_ID)
  private String primaryStagingAzureStorageAccountId;

  public static final String SERIALIZED_NAME_RECOVERY_AZURE_STORAGE_ACCOUNT_ID = "recoveryAzureStorageAccountId";
  @SerializedName(SERIALIZED_NAME_RECOVERY_AZURE_STORAGE_ACCOUNT_ID)
  private String recoveryAzureStorageAccountId;

  public static final String SERIALIZED_NAME_RECOVERY_DISK_URI = "recoveryDiskUri";
  @SerializedName(SERIALIZED_NAME_RECOVERY_DISK_URI)
  private String recoveryDiskUri;

  public static final String SERIALIZED_NAME_RESYNC_REQUIRED = "resyncRequired";
  @SerializedName(SERIALIZED_NAME_RESYNC_REQUIRED)
  private Boolean resyncRequired;

  public static final String SERIALIZED_NAME_SECRET_IDENTIFIER = "secretIdentifier";
  @SerializedName(SERIALIZED_NAME_SECRET_IDENTIFIER)
  private String secretIdentifier;

  public A2AProtectedDiskDetails() {
  }

  public A2AProtectedDiskDetails dataPendingAtSourceAgentInMB(Double dataPendingAtSourceAgentInMB) {
    this.dataPendingAtSourceAgentInMB = dataPendingAtSourceAgentInMB;
    return this;
  }

  /**
   * The data pending at source virtual machine in MB.
   * @return dataPendingAtSourceAgentInMB
   */
  @javax.annotation.Nullable
  public Double getDataPendingAtSourceAgentInMB() {
    return dataPendingAtSourceAgentInMB;
  }

  public void setDataPendingAtSourceAgentInMB(Double dataPendingAtSourceAgentInMB) {
    this.dataPendingAtSourceAgentInMB = dataPendingAtSourceAgentInMB;
  }


  public A2AProtectedDiskDetails dataPendingInStagingStorageAccountInMB(Double dataPendingInStagingStorageAccountInMB) {
    this.dataPendingInStagingStorageAccountInMB = dataPendingInStagingStorageAccountInMB;
    return this;
  }

  /**
   * The data pending for replication in MB at staging account.
   * @return dataPendingInStagingStorageAccountInMB
   */
  @javax.annotation.Nullable
  public Double getDataPendingInStagingStorageAccountInMB() {
    return dataPendingInStagingStorageAccountInMB;
  }

  public void setDataPendingInStagingStorageAccountInMB(Double dataPendingInStagingStorageAccountInMB) {
    this.dataPendingInStagingStorageAccountInMB = dataPendingInStagingStorageAccountInMB;
  }


  public A2AProtectedDiskDetails dekKeyVaultArmId(String dekKeyVaultArmId) {
    this.dekKeyVaultArmId = dekKeyVaultArmId;
    return this;
  }

  /**
   * The KeyVault resource id for secret (BEK).
   * @return dekKeyVaultArmId
   */
  @javax.annotation.Nullable
  public String getDekKeyVaultArmId() {
    return dekKeyVaultArmId;
  }

  public void setDekKeyVaultArmId(String dekKeyVaultArmId) {
    this.dekKeyVaultArmId = dekKeyVaultArmId;
  }


  public A2AProtectedDiskDetails diskCapacityInBytes(Long diskCapacityInBytes) {
    this.diskCapacityInBytes = diskCapacityInBytes;
    return this;
  }

  /**
   * The disk capacity in bytes.
   * @return diskCapacityInBytes
   */
  @javax.annotation.Nullable
  public Long getDiskCapacityInBytes() {
    return diskCapacityInBytes;
  }

  public void setDiskCapacityInBytes(Long diskCapacityInBytes) {
    this.diskCapacityInBytes = diskCapacityInBytes;
  }


  public A2AProtectedDiskDetails diskName(String diskName) {
    this.diskName = diskName;
    return this;
  }

  /**
   * The disk name.
   * @return diskName
   */
  @javax.annotation.Nullable
  public String getDiskName() {
    return diskName;
  }

  public void setDiskName(String diskName) {
    this.diskName = diskName;
  }


  public A2AProtectedDiskDetails diskType(String diskType) {
    this.diskType = diskType;
    return this;
  }

  /**
   * The type of disk.
   * @return diskType
   */
  @javax.annotation.Nullable
  public String getDiskType() {
    return diskType;
  }

  public void setDiskType(String diskType) {
    this.diskType = diskType;
  }


  public A2AProtectedDiskDetails diskUri(String diskUri) {
    this.diskUri = diskUri;
    return this;
  }

  /**
   * The disk uri.
   * @return diskUri
   */
  @javax.annotation.Nullable
  public String getDiskUri() {
    return diskUri;
  }

  public void setDiskUri(String diskUri) {
    this.diskUri = diskUri;
  }


  public A2AProtectedDiskDetails isDiskEncrypted(Boolean isDiskEncrypted) {
    this.isDiskEncrypted = isDiskEncrypted;
    return this;
  }

  /**
   * A value indicating whether vm has encrypted os disk or not.
   * @return isDiskEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getIsDiskEncrypted() {
    return isDiskEncrypted;
  }

  public void setIsDiskEncrypted(Boolean isDiskEncrypted) {
    this.isDiskEncrypted = isDiskEncrypted;
  }


  public A2AProtectedDiskDetails isDiskKeyEncrypted(Boolean isDiskKeyEncrypted) {
    this.isDiskKeyEncrypted = isDiskKeyEncrypted;
    return this;
  }

  /**
   * A value indicating whether disk key got encrypted or not.
   * @return isDiskKeyEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getIsDiskKeyEncrypted() {
    return isDiskKeyEncrypted;
  }

  public void setIsDiskKeyEncrypted(Boolean isDiskKeyEncrypted) {
    this.isDiskKeyEncrypted = isDiskKeyEncrypted;
  }


  public A2AProtectedDiskDetails kekKeyVaultArmId(String kekKeyVaultArmId) {
    this.kekKeyVaultArmId = kekKeyVaultArmId;
    return this;
  }

  /**
   * The KeyVault resource id for key (KEK).
   * @return kekKeyVaultArmId
   */
  @javax.annotation.Nullable
  public String getKekKeyVaultArmId() {
    return kekKeyVaultArmId;
  }

  public void setKekKeyVaultArmId(String kekKeyVaultArmId) {
    this.kekKeyVaultArmId = kekKeyVaultArmId;
  }


  public A2AProtectedDiskDetails keyIdentifier(String keyIdentifier) {
    this.keyIdentifier = keyIdentifier;
    return this;
  }

  /**
   * The key URL / identifier (KEK).
   * @return keyIdentifier
   */
  @javax.annotation.Nullable
  public String getKeyIdentifier() {
    return keyIdentifier;
  }

  public void setKeyIdentifier(String keyIdentifier) {
    this.keyIdentifier = keyIdentifier;
  }


  public A2AProtectedDiskDetails monitoringJobType(String monitoringJobType) {
    this.monitoringJobType = monitoringJobType;
    return this;
  }

  /**
   * The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
   * @return monitoringJobType
   */
  @javax.annotation.Nullable
  public String getMonitoringJobType() {
    return monitoringJobType;
  }

  public void setMonitoringJobType(String monitoringJobType) {
    this.monitoringJobType = monitoringJobType;
  }


  public A2AProtectedDiskDetails monitoringPercentageCompletion(Integer monitoringPercentageCompletion) {
    this.monitoringPercentageCompletion = monitoringPercentageCompletion;
    return this;
  }

  /**
   * The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
   * @return monitoringPercentageCompletion
   */
  @javax.annotation.Nullable
  public Integer getMonitoringPercentageCompletion() {
    return monitoringPercentageCompletion;
  }

  public void setMonitoringPercentageCompletion(Integer monitoringPercentageCompletion) {
    this.monitoringPercentageCompletion = monitoringPercentageCompletion;
  }


  public A2AProtectedDiskDetails primaryDiskAzureStorageAccountId(String primaryDiskAzureStorageAccountId) {
    this.primaryDiskAzureStorageAccountId = primaryDiskAzureStorageAccountId;
    return this;
  }

  /**
   * The primary disk storage account.
   * @return primaryDiskAzureStorageAccountId
   */
  @javax.annotation.Nullable
  public String getPrimaryDiskAzureStorageAccountId() {
    return primaryDiskAzureStorageAccountId;
  }

  public void setPrimaryDiskAzureStorageAccountId(String primaryDiskAzureStorageAccountId) {
    this.primaryDiskAzureStorageAccountId = primaryDiskAzureStorageAccountId;
  }


  public A2AProtectedDiskDetails primaryStagingAzureStorageAccountId(String primaryStagingAzureStorageAccountId) {
    this.primaryStagingAzureStorageAccountId = primaryStagingAzureStorageAccountId;
    return this;
  }

  /**
   * The primary staging storage account.
   * @return primaryStagingAzureStorageAccountId
   */
  @javax.annotation.Nullable
  public String getPrimaryStagingAzureStorageAccountId() {
    return primaryStagingAzureStorageAccountId;
  }

  public void setPrimaryStagingAzureStorageAccountId(String primaryStagingAzureStorageAccountId) {
    this.primaryStagingAzureStorageAccountId = primaryStagingAzureStorageAccountId;
  }


  public A2AProtectedDiskDetails recoveryAzureStorageAccountId(String recoveryAzureStorageAccountId) {
    this.recoveryAzureStorageAccountId = recoveryAzureStorageAccountId;
    return this;
  }

  /**
   * The recovery disk storage account.
   * @return recoveryAzureStorageAccountId
   */
  @javax.annotation.Nullable
  public String getRecoveryAzureStorageAccountId() {
    return recoveryAzureStorageAccountId;
  }

  public void setRecoveryAzureStorageAccountId(String recoveryAzureStorageAccountId) {
    this.recoveryAzureStorageAccountId = recoveryAzureStorageAccountId;
  }


  public A2AProtectedDiskDetails recoveryDiskUri(String recoveryDiskUri) {
    this.recoveryDiskUri = recoveryDiskUri;
    return this;
  }

  /**
   * Recovery disk uri.
   * @return recoveryDiskUri
   */
  @javax.annotation.Nullable
  public String getRecoveryDiskUri() {
    return recoveryDiskUri;
  }

  public void setRecoveryDiskUri(String recoveryDiskUri) {
    this.recoveryDiskUri = recoveryDiskUri;
  }


  public A2AProtectedDiskDetails resyncRequired(Boolean resyncRequired) {
    this.resyncRequired = resyncRequired;
    return this;
  }

  /**
   * A value indicating whether resync is required for this disk.
   * @return resyncRequired
   */
  @javax.annotation.Nullable
  public Boolean getResyncRequired() {
    return resyncRequired;
  }

  public void setResyncRequired(Boolean resyncRequired) {
    this.resyncRequired = resyncRequired;
  }


  public A2AProtectedDiskDetails secretIdentifier(String secretIdentifier) {
    this.secretIdentifier = secretIdentifier;
    return this;
  }

  /**
   * The secret URL / identifier (BEK).
   * @return secretIdentifier
   */
  @javax.annotation.Nullable
  public String getSecretIdentifier() {
    return secretIdentifier;
  }

  public void setSecretIdentifier(String secretIdentifier) {
    this.secretIdentifier = secretIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    A2AProtectedDiskDetails a2AProtectedDiskDetails = (A2AProtectedDiskDetails) o;
    return Objects.equals(this.dataPendingAtSourceAgentInMB, a2AProtectedDiskDetails.dataPendingAtSourceAgentInMB) &&
        Objects.equals(this.dataPendingInStagingStorageAccountInMB, a2AProtectedDiskDetails.dataPendingInStagingStorageAccountInMB) &&
        Objects.equals(this.dekKeyVaultArmId, a2AProtectedDiskDetails.dekKeyVaultArmId) &&
        Objects.equals(this.diskCapacityInBytes, a2AProtectedDiskDetails.diskCapacityInBytes) &&
        Objects.equals(this.diskName, a2AProtectedDiskDetails.diskName) &&
        Objects.equals(this.diskType, a2AProtectedDiskDetails.diskType) &&
        Objects.equals(this.diskUri, a2AProtectedDiskDetails.diskUri) &&
        Objects.equals(this.isDiskEncrypted, a2AProtectedDiskDetails.isDiskEncrypted) &&
        Objects.equals(this.isDiskKeyEncrypted, a2AProtectedDiskDetails.isDiskKeyEncrypted) &&
        Objects.equals(this.kekKeyVaultArmId, a2AProtectedDiskDetails.kekKeyVaultArmId) &&
        Objects.equals(this.keyIdentifier, a2AProtectedDiskDetails.keyIdentifier) &&
        Objects.equals(this.monitoringJobType, a2AProtectedDiskDetails.monitoringJobType) &&
        Objects.equals(this.monitoringPercentageCompletion, a2AProtectedDiskDetails.monitoringPercentageCompletion) &&
        Objects.equals(this.primaryDiskAzureStorageAccountId, a2AProtectedDiskDetails.primaryDiskAzureStorageAccountId) &&
        Objects.equals(this.primaryStagingAzureStorageAccountId, a2AProtectedDiskDetails.primaryStagingAzureStorageAccountId) &&
        Objects.equals(this.recoveryAzureStorageAccountId, a2AProtectedDiskDetails.recoveryAzureStorageAccountId) &&
        Objects.equals(this.recoveryDiskUri, a2AProtectedDiskDetails.recoveryDiskUri) &&
        Objects.equals(this.resyncRequired, a2AProtectedDiskDetails.resyncRequired) &&
        Objects.equals(this.secretIdentifier, a2AProtectedDiskDetails.secretIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataPendingAtSourceAgentInMB, dataPendingInStagingStorageAccountInMB, dekKeyVaultArmId, diskCapacityInBytes, diskName, diskType, diskUri, isDiskEncrypted, isDiskKeyEncrypted, kekKeyVaultArmId, keyIdentifier, monitoringJobType, monitoringPercentageCompletion, primaryDiskAzureStorageAccountId, primaryStagingAzureStorageAccountId, recoveryAzureStorageAccountId, recoveryDiskUri, resyncRequired, secretIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class A2AProtectedDiskDetails {\n");
    sb.append("    dataPendingAtSourceAgentInMB: ").append(toIndentedString(dataPendingAtSourceAgentInMB)).append("\n");
    sb.append("    dataPendingInStagingStorageAccountInMB: ").append(toIndentedString(dataPendingInStagingStorageAccountInMB)).append("\n");
    sb.append("    dekKeyVaultArmId: ").append(toIndentedString(dekKeyVaultArmId)).append("\n");
    sb.append("    diskCapacityInBytes: ").append(toIndentedString(diskCapacityInBytes)).append("\n");
    sb.append("    diskName: ").append(toIndentedString(diskName)).append("\n");
    sb.append("    diskType: ").append(toIndentedString(diskType)).append("\n");
    sb.append("    diskUri: ").append(toIndentedString(diskUri)).append("\n");
    sb.append("    isDiskEncrypted: ").append(toIndentedString(isDiskEncrypted)).append("\n");
    sb.append("    isDiskKeyEncrypted: ").append(toIndentedString(isDiskKeyEncrypted)).append("\n");
    sb.append("    kekKeyVaultArmId: ").append(toIndentedString(kekKeyVaultArmId)).append("\n");
    sb.append("    keyIdentifier: ").append(toIndentedString(keyIdentifier)).append("\n");
    sb.append("    monitoringJobType: ").append(toIndentedString(monitoringJobType)).append("\n");
    sb.append("    monitoringPercentageCompletion: ").append(toIndentedString(monitoringPercentageCompletion)).append("\n");
    sb.append("    primaryDiskAzureStorageAccountId: ").append(toIndentedString(primaryDiskAzureStorageAccountId)).append("\n");
    sb.append("    primaryStagingAzureStorageAccountId: ").append(toIndentedString(primaryStagingAzureStorageAccountId)).append("\n");
    sb.append("    recoveryAzureStorageAccountId: ").append(toIndentedString(recoveryAzureStorageAccountId)).append("\n");
    sb.append("    recoveryDiskUri: ").append(toIndentedString(recoveryDiskUri)).append("\n");
    sb.append("    resyncRequired: ").append(toIndentedString(resyncRequired)).append("\n");
    sb.append("    secretIdentifier: ").append(toIndentedString(secretIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataPendingAtSourceAgentInMB");
    openapiFields.add("dataPendingInStagingStorageAccountInMB");
    openapiFields.add("dekKeyVaultArmId");
    openapiFields.add("diskCapacityInBytes");
    openapiFields.add("diskName");
    openapiFields.add("diskType");
    openapiFields.add("diskUri");
    openapiFields.add("isDiskEncrypted");
    openapiFields.add("isDiskKeyEncrypted");
    openapiFields.add("kekKeyVaultArmId");
    openapiFields.add("keyIdentifier");
    openapiFields.add("monitoringJobType");
    openapiFields.add("monitoringPercentageCompletion");
    openapiFields.add("primaryDiskAzureStorageAccountId");
    openapiFields.add("primaryStagingAzureStorageAccountId");
    openapiFields.add("recoveryAzureStorageAccountId");
    openapiFields.add("recoveryDiskUri");
    openapiFields.add("resyncRequired");
    openapiFields.add("secretIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to A2AProtectedDiskDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!A2AProtectedDiskDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in A2AProtectedDiskDetails is not found in the empty JSON string", A2AProtectedDiskDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!A2AProtectedDiskDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `A2AProtectedDiskDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dekKeyVaultArmId") != null && !jsonObj.get("dekKeyVaultArmId").isJsonNull()) && !jsonObj.get("dekKeyVaultArmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dekKeyVaultArmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dekKeyVaultArmId").toString()));
      }
      if ((jsonObj.get("diskName") != null && !jsonObj.get("diskName").isJsonNull()) && !jsonObj.get("diskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskName").toString()));
      }
      if ((jsonObj.get("diskType") != null && !jsonObj.get("diskType").isJsonNull()) && !jsonObj.get("diskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskType").toString()));
      }
      if ((jsonObj.get("diskUri") != null && !jsonObj.get("diskUri").isJsonNull()) && !jsonObj.get("diskUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskUri").toString()));
      }
      if ((jsonObj.get("kekKeyVaultArmId") != null && !jsonObj.get("kekKeyVaultArmId").isJsonNull()) && !jsonObj.get("kekKeyVaultArmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kekKeyVaultArmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kekKeyVaultArmId").toString()));
      }
      if ((jsonObj.get("keyIdentifier") != null && !jsonObj.get("keyIdentifier").isJsonNull()) && !jsonObj.get("keyIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyIdentifier").toString()));
      }
      if ((jsonObj.get("monitoringJobType") != null && !jsonObj.get("monitoringJobType").isJsonNull()) && !jsonObj.get("monitoringJobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitoringJobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitoringJobType").toString()));
      }
      if ((jsonObj.get("primaryDiskAzureStorageAccountId") != null && !jsonObj.get("primaryDiskAzureStorageAccountId").isJsonNull()) && !jsonObj.get("primaryDiskAzureStorageAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryDiskAzureStorageAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryDiskAzureStorageAccountId").toString()));
      }
      if ((jsonObj.get("primaryStagingAzureStorageAccountId") != null && !jsonObj.get("primaryStagingAzureStorageAccountId").isJsonNull()) && !jsonObj.get("primaryStagingAzureStorageAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryStagingAzureStorageAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryStagingAzureStorageAccountId").toString()));
      }
      if ((jsonObj.get("recoveryAzureStorageAccountId") != null && !jsonObj.get("recoveryAzureStorageAccountId").isJsonNull()) && !jsonObj.get("recoveryAzureStorageAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryAzureStorageAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryAzureStorageAccountId").toString()));
      }
      if ((jsonObj.get("recoveryDiskUri") != null && !jsonObj.get("recoveryDiskUri").isJsonNull()) && !jsonObj.get("recoveryDiskUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryDiskUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryDiskUri").toString()));
      }
      if ((jsonObj.get("secretIdentifier") != null && !jsonObj.get("secretIdentifier").isJsonNull()) && !jsonObj.get("secretIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!A2AProtectedDiskDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'A2AProtectedDiskDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<A2AProtectedDiskDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(A2AProtectedDiskDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<A2AProtectedDiskDetails>() {
           @Override
           public void write(JsonWriter out, A2AProtectedDiskDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public A2AProtectedDiskDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of A2AProtectedDiskDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of A2AProtectedDiskDetails
   * @throws IOException if the JSON string is invalid with respect to A2AProtectedDiskDetails
   */
  public static A2AProtectedDiskDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, A2AProtectedDiskDetails.class);
  }

  /**
   * Convert an instance of A2AProtectedDiskDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

