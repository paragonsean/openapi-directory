/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hyper V VM network details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VMNicDetails {
  public static final String SERIALIZED_NAME_ENABLE_ACCELERATED_NETWORKING_ON_RECOVERY = "enableAcceleratedNetworkingOnRecovery";
  @SerializedName(SERIALIZED_NAME_ENABLE_ACCELERATED_NETWORKING_ON_RECOVERY)
  private Boolean enableAcceleratedNetworkingOnRecovery;

  public static final String SERIALIZED_NAME_IP_ADDRESS_TYPE = "ipAddressType";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS_TYPE)
  private String ipAddressType;

  public static final String SERIALIZED_NAME_NIC_ID = "nicId";
  @SerializedName(SERIALIZED_NAME_NIC_ID)
  private String nicId;

  public static final String SERIALIZED_NAME_PRIMARY_NIC_STATIC_I_P_ADDRESS = "primaryNicStaticIPAddress";
  @SerializedName(SERIALIZED_NAME_PRIMARY_NIC_STATIC_I_P_ADDRESS)
  private String primaryNicStaticIPAddress;

  public static final String SERIALIZED_NAME_RECOVERY_NIC_IP_ADDRESS_TYPE = "recoveryNicIpAddressType";
  @SerializedName(SERIALIZED_NAME_RECOVERY_NIC_IP_ADDRESS_TYPE)
  private String recoveryNicIpAddressType;

  public static final String SERIALIZED_NAME_RECOVERY_V_M_NETWORK_ID = "recoveryVMNetworkId";
  @SerializedName(SERIALIZED_NAME_RECOVERY_V_M_NETWORK_ID)
  private String recoveryVMNetworkId;

  public static final String SERIALIZED_NAME_RECOVERY_V_M_SUBNET_NAME = "recoveryVMSubnetName";
  @SerializedName(SERIALIZED_NAME_RECOVERY_V_M_SUBNET_NAME)
  private String recoveryVMSubnetName;

  public static final String SERIALIZED_NAME_REPLICA_NIC_ID = "replicaNicId";
  @SerializedName(SERIALIZED_NAME_REPLICA_NIC_ID)
  private String replicaNicId;

  public static final String SERIALIZED_NAME_REPLICA_NIC_STATIC_I_P_ADDRESS = "replicaNicStaticIPAddress";
  @SerializedName(SERIALIZED_NAME_REPLICA_NIC_STATIC_I_P_ADDRESS)
  private String replicaNicStaticIPAddress;

  public static final String SERIALIZED_NAME_SELECTION_TYPE = "selectionType";
  @SerializedName(SERIALIZED_NAME_SELECTION_TYPE)
  private String selectionType;

  public static final String SERIALIZED_NAME_SOURCE_NIC_ARM_ID = "sourceNicArmId";
  @SerializedName(SERIALIZED_NAME_SOURCE_NIC_ARM_ID)
  private String sourceNicArmId;

  public static final String SERIALIZED_NAME_V_M_NETWORK_NAME = "vMNetworkName";
  @SerializedName(SERIALIZED_NAME_V_M_NETWORK_NAME)
  private String vMNetworkName;

  public static final String SERIALIZED_NAME_V_M_SUBNET_NAME = "vMSubnetName";
  @SerializedName(SERIALIZED_NAME_V_M_SUBNET_NAME)
  private String vMSubnetName;

  public VMNicDetails() {
  }

  public VMNicDetails enableAcceleratedNetworkingOnRecovery(Boolean enableAcceleratedNetworkingOnRecovery) {
    this.enableAcceleratedNetworkingOnRecovery = enableAcceleratedNetworkingOnRecovery;
    return this;
  }

  /**
   * A value indicating whether the NIC has accelerated networking enabled.
   * @return enableAcceleratedNetworkingOnRecovery
   */
  @javax.annotation.Nullable
  public Boolean getEnableAcceleratedNetworkingOnRecovery() {
    return enableAcceleratedNetworkingOnRecovery;
  }

  public void setEnableAcceleratedNetworkingOnRecovery(Boolean enableAcceleratedNetworkingOnRecovery) {
    this.enableAcceleratedNetworkingOnRecovery = enableAcceleratedNetworkingOnRecovery;
  }


  public VMNicDetails ipAddressType(String ipAddressType) {
    this.ipAddressType = ipAddressType;
    return this;
  }

  /**
   * Ip address type.
   * @return ipAddressType
   */
  @javax.annotation.Nullable
  public String getIpAddressType() {
    return ipAddressType;
  }

  public void setIpAddressType(String ipAddressType) {
    this.ipAddressType = ipAddressType;
  }


  public VMNicDetails nicId(String nicId) {
    this.nicId = nicId;
    return this;
  }

  /**
   * The nic Id.
   * @return nicId
   */
  @javax.annotation.Nullable
  public String getNicId() {
    return nicId;
  }

  public void setNicId(String nicId) {
    this.nicId = nicId;
  }


  public VMNicDetails primaryNicStaticIPAddress(String primaryNicStaticIPAddress) {
    this.primaryNicStaticIPAddress = primaryNicStaticIPAddress;
    return this;
  }

  /**
   * Primary nic static IP address.
   * @return primaryNicStaticIPAddress
   */
  @javax.annotation.Nullable
  public String getPrimaryNicStaticIPAddress() {
    return primaryNicStaticIPAddress;
  }

  public void setPrimaryNicStaticIPAddress(String primaryNicStaticIPAddress) {
    this.primaryNicStaticIPAddress = primaryNicStaticIPAddress;
  }


  public VMNicDetails recoveryNicIpAddressType(String recoveryNicIpAddressType) {
    this.recoveryNicIpAddressType = recoveryNicIpAddressType;
    return this;
  }

  /**
   * IP allocation type for recovery VM.
   * @return recoveryNicIpAddressType
   */
  @javax.annotation.Nullable
  public String getRecoveryNicIpAddressType() {
    return recoveryNicIpAddressType;
  }

  public void setRecoveryNicIpAddressType(String recoveryNicIpAddressType) {
    this.recoveryNicIpAddressType = recoveryNicIpAddressType;
  }


  public VMNicDetails recoveryVMNetworkId(String recoveryVMNetworkId) {
    this.recoveryVMNetworkId = recoveryVMNetworkId;
    return this;
  }

  /**
   * Recovery VM network Id.
   * @return recoveryVMNetworkId
   */
  @javax.annotation.Nullable
  public String getRecoveryVMNetworkId() {
    return recoveryVMNetworkId;
  }

  public void setRecoveryVMNetworkId(String recoveryVMNetworkId) {
    this.recoveryVMNetworkId = recoveryVMNetworkId;
  }


  public VMNicDetails recoveryVMSubnetName(String recoveryVMSubnetName) {
    this.recoveryVMSubnetName = recoveryVMSubnetName;
    return this;
  }

  /**
   * Recovery VM subnet name.
   * @return recoveryVMSubnetName
   */
  @javax.annotation.Nullable
  public String getRecoveryVMSubnetName() {
    return recoveryVMSubnetName;
  }

  public void setRecoveryVMSubnetName(String recoveryVMSubnetName) {
    this.recoveryVMSubnetName = recoveryVMSubnetName;
  }


  public VMNicDetails replicaNicId(String replicaNicId) {
    this.replicaNicId = replicaNicId;
    return this;
  }

  /**
   * The replica nic Id.
   * @return replicaNicId
   */
  @javax.annotation.Nullable
  public String getReplicaNicId() {
    return replicaNicId;
  }

  public void setReplicaNicId(String replicaNicId) {
    this.replicaNicId = replicaNicId;
  }


  public VMNicDetails replicaNicStaticIPAddress(String replicaNicStaticIPAddress) {
    this.replicaNicStaticIPAddress = replicaNicStaticIPAddress;
    return this;
  }

  /**
   * Replica nic static IP address.
   * @return replicaNicStaticIPAddress
   */
  @javax.annotation.Nullable
  public String getReplicaNicStaticIPAddress() {
    return replicaNicStaticIPAddress;
  }

  public void setReplicaNicStaticIPAddress(String replicaNicStaticIPAddress) {
    this.replicaNicStaticIPAddress = replicaNicStaticIPAddress;
  }


  public VMNicDetails selectionType(String selectionType) {
    this.selectionType = selectionType;
    return this;
  }

  /**
   * Selection type for failover.
   * @return selectionType
   */
  @javax.annotation.Nullable
  public String getSelectionType() {
    return selectionType;
  }

  public void setSelectionType(String selectionType) {
    this.selectionType = selectionType;
  }


  public VMNicDetails sourceNicArmId(String sourceNicArmId) {
    this.sourceNicArmId = sourceNicArmId;
    return this;
  }

  /**
   * The source nic ARM Id.
   * @return sourceNicArmId
   */
  @javax.annotation.Nullable
  public String getSourceNicArmId() {
    return sourceNicArmId;
  }

  public void setSourceNicArmId(String sourceNicArmId) {
    this.sourceNicArmId = sourceNicArmId;
  }


  public VMNicDetails vMNetworkName(String vMNetworkName) {
    this.vMNetworkName = vMNetworkName;
    return this;
  }

  /**
   * VM network name.
   * @return vMNetworkName
   */
  @javax.annotation.Nullable
  public String getvMNetworkName() {
    return vMNetworkName;
  }

  public void setvMNetworkName(String vMNetworkName) {
    this.vMNetworkName = vMNetworkName;
  }


  public VMNicDetails vMSubnetName(String vMSubnetName) {
    this.vMSubnetName = vMSubnetName;
    return this;
  }

  /**
   * VM subnet name.
   * @return vMSubnetName
   */
  @javax.annotation.Nullable
  public String getvMSubnetName() {
    return vMSubnetName;
  }

  public void setvMSubnetName(String vMSubnetName) {
    this.vMSubnetName = vMSubnetName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VMNicDetails vmNicDetails = (VMNicDetails) o;
    return Objects.equals(this.enableAcceleratedNetworkingOnRecovery, vmNicDetails.enableAcceleratedNetworkingOnRecovery) &&
        Objects.equals(this.ipAddressType, vmNicDetails.ipAddressType) &&
        Objects.equals(this.nicId, vmNicDetails.nicId) &&
        Objects.equals(this.primaryNicStaticIPAddress, vmNicDetails.primaryNicStaticIPAddress) &&
        Objects.equals(this.recoveryNicIpAddressType, vmNicDetails.recoveryNicIpAddressType) &&
        Objects.equals(this.recoveryVMNetworkId, vmNicDetails.recoveryVMNetworkId) &&
        Objects.equals(this.recoveryVMSubnetName, vmNicDetails.recoveryVMSubnetName) &&
        Objects.equals(this.replicaNicId, vmNicDetails.replicaNicId) &&
        Objects.equals(this.replicaNicStaticIPAddress, vmNicDetails.replicaNicStaticIPAddress) &&
        Objects.equals(this.selectionType, vmNicDetails.selectionType) &&
        Objects.equals(this.sourceNicArmId, vmNicDetails.sourceNicArmId) &&
        Objects.equals(this.vMNetworkName, vmNicDetails.vMNetworkName) &&
        Objects.equals(this.vMSubnetName, vmNicDetails.vMSubnetName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableAcceleratedNetworkingOnRecovery, ipAddressType, nicId, primaryNicStaticIPAddress, recoveryNicIpAddressType, recoveryVMNetworkId, recoveryVMSubnetName, replicaNicId, replicaNicStaticIPAddress, selectionType, sourceNicArmId, vMNetworkName, vMSubnetName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VMNicDetails {\n");
    sb.append("    enableAcceleratedNetworkingOnRecovery: ").append(toIndentedString(enableAcceleratedNetworkingOnRecovery)).append("\n");
    sb.append("    ipAddressType: ").append(toIndentedString(ipAddressType)).append("\n");
    sb.append("    nicId: ").append(toIndentedString(nicId)).append("\n");
    sb.append("    primaryNicStaticIPAddress: ").append(toIndentedString(primaryNicStaticIPAddress)).append("\n");
    sb.append("    recoveryNicIpAddressType: ").append(toIndentedString(recoveryNicIpAddressType)).append("\n");
    sb.append("    recoveryVMNetworkId: ").append(toIndentedString(recoveryVMNetworkId)).append("\n");
    sb.append("    recoveryVMSubnetName: ").append(toIndentedString(recoveryVMSubnetName)).append("\n");
    sb.append("    replicaNicId: ").append(toIndentedString(replicaNicId)).append("\n");
    sb.append("    replicaNicStaticIPAddress: ").append(toIndentedString(replicaNicStaticIPAddress)).append("\n");
    sb.append("    selectionType: ").append(toIndentedString(selectionType)).append("\n");
    sb.append("    sourceNicArmId: ").append(toIndentedString(sourceNicArmId)).append("\n");
    sb.append("    vMNetworkName: ").append(toIndentedString(vMNetworkName)).append("\n");
    sb.append("    vMSubnetName: ").append(toIndentedString(vMSubnetName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableAcceleratedNetworkingOnRecovery");
    openapiFields.add("ipAddressType");
    openapiFields.add("nicId");
    openapiFields.add("primaryNicStaticIPAddress");
    openapiFields.add("recoveryNicIpAddressType");
    openapiFields.add("recoveryVMNetworkId");
    openapiFields.add("recoveryVMSubnetName");
    openapiFields.add("replicaNicId");
    openapiFields.add("replicaNicStaticIPAddress");
    openapiFields.add("selectionType");
    openapiFields.add("sourceNicArmId");
    openapiFields.add("vMNetworkName");
    openapiFields.add("vMSubnetName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VMNicDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VMNicDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VMNicDetails is not found in the empty JSON string", VMNicDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VMNicDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VMNicDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ipAddressType") != null && !jsonObj.get("ipAddressType").isJsonNull()) && !jsonObj.get("ipAddressType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddressType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddressType").toString()));
      }
      if ((jsonObj.get("nicId") != null && !jsonObj.get("nicId").isJsonNull()) && !jsonObj.get("nicId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nicId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nicId").toString()));
      }
      if ((jsonObj.get("primaryNicStaticIPAddress") != null && !jsonObj.get("primaryNicStaticIPAddress").isJsonNull()) && !jsonObj.get("primaryNicStaticIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryNicStaticIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryNicStaticIPAddress").toString()));
      }
      if ((jsonObj.get("recoveryNicIpAddressType") != null && !jsonObj.get("recoveryNicIpAddressType").isJsonNull()) && !jsonObj.get("recoveryNicIpAddressType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryNicIpAddressType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryNicIpAddressType").toString()));
      }
      if ((jsonObj.get("recoveryVMNetworkId") != null && !jsonObj.get("recoveryVMNetworkId").isJsonNull()) && !jsonObj.get("recoveryVMNetworkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryVMNetworkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryVMNetworkId").toString()));
      }
      if ((jsonObj.get("recoveryVMSubnetName") != null && !jsonObj.get("recoveryVMSubnetName").isJsonNull()) && !jsonObj.get("recoveryVMSubnetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryVMSubnetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryVMSubnetName").toString()));
      }
      if ((jsonObj.get("replicaNicId") != null && !jsonObj.get("replicaNicId").isJsonNull()) && !jsonObj.get("replicaNicId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicaNicId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicaNicId").toString()));
      }
      if ((jsonObj.get("replicaNicStaticIPAddress") != null && !jsonObj.get("replicaNicStaticIPAddress").isJsonNull()) && !jsonObj.get("replicaNicStaticIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicaNicStaticIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicaNicStaticIPAddress").toString()));
      }
      if ((jsonObj.get("selectionType") != null && !jsonObj.get("selectionType").isJsonNull()) && !jsonObj.get("selectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectionType").toString()));
      }
      if ((jsonObj.get("sourceNicArmId") != null && !jsonObj.get("sourceNicArmId").isJsonNull()) && !jsonObj.get("sourceNicArmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceNicArmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceNicArmId").toString()));
      }
      if ((jsonObj.get("vMNetworkName") != null && !jsonObj.get("vMNetworkName").isJsonNull()) && !jsonObj.get("vMNetworkName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vMNetworkName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vMNetworkName").toString()));
      }
      if ((jsonObj.get("vMSubnetName") != null && !jsonObj.get("vMSubnetName").isJsonNull()) && !jsonObj.get("vMSubnetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vMSubnetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vMSubnetName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VMNicDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VMNicDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VMNicDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VMNicDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VMNicDetails>() {
           @Override
           public void write(JsonWriter out, VMNicDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VMNicDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VMNicDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VMNicDetails
   * @throws IOException if the JSON string is invalid with respect to VMNicDetails
   */
  public static VMNicDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VMNicDetails.class);
  }

  /**
   * Convert an instance of VMNicDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

