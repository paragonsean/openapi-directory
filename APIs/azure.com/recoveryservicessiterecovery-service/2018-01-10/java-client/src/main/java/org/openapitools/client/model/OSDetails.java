/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Disk Details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OSDetails {
  public static final String SERIALIZED_NAME_O_S_MAJOR_VERSION = "oSMajorVersion";
  @SerializedName(SERIALIZED_NAME_O_S_MAJOR_VERSION)
  private String oSMajorVersion;

  public static final String SERIALIZED_NAME_O_S_MINOR_VERSION = "oSMinorVersion";
  @SerializedName(SERIALIZED_NAME_O_S_MINOR_VERSION)
  private String oSMinorVersion;

  public static final String SERIALIZED_NAME_O_S_VERSION = "oSVersion";
  @SerializedName(SERIALIZED_NAME_O_S_VERSION)
  private String oSVersion;

  public static final String SERIALIZED_NAME_OS_EDITION = "osEdition";
  @SerializedName(SERIALIZED_NAME_OS_EDITION)
  private String osEdition;

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private String osType;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private String productType;

  public OSDetails() {
  }

  public OSDetails oSMajorVersion(String oSMajorVersion) {
    this.oSMajorVersion = oSMajorVersion;
    return this;
  }

  /**
   * The OS Major Version.
   * @return oSMajorVersion
   */
  @javax.annotation.Nullable
  public String getoSMajorVersion() {
    return oSMajorVersion;
  }

  public void setoSMajorVersion(String oSMajorVersion) {
    this.oSMajorVersion = oSMajorVersion;
  }


  public OSDetails oSMinorVersion(String oSMinorVersion) {
    this.oSMinorVersion = oSMinorVersion;
    return this;
  }

  /**
   * The OS Minor Version.
   * @return oSMinorVersion
   */
  @javax.annotation.Nullable
  public String getoSMinorVersion() {
    return oSMinorVersion;
  }

  public void setoSMinorVersion(String oSMinorVersion) {
    this.oSMinorVersion = oSMinorVersion;
  }


  public OSDetails oSVersion(String oSVersion) {
    this.oSVersion = oSVersion;
    return this;
  }

  /**
   * The OS Version.
   * @return oSVersion
   */
  @javax.annotation.Nullable
  public String getoSVersion() {
    return oSVersion;
  }

  public void setoSVersion(String oSVersion) {
    this.oSVersion = oSVersion;
  }


  public OSDetails osEdition(String osEdition) {
    this.osEdition = osEdition;
    return this;
  }

  /**
   * The OSEdition.
   * @return osEdition
   */
  @javax.annotation.Nullable
  public String getOsEdition() {
    return osEdition;
  }

  public void setOsEdition(String osEdition) {
    this.osEdition = osEdition;
  }


  public OSDetails osType(String osType) {
    this.osType = osType;
    return this;
  }

  /**
   * VM Disk details.
   * @return osType
   */
  @javax.annotation.Nullable
  public String getOsType() {
    return osType;
  }

  public void setOsType(String osType) {
    this.osType = osType;
  }


  public OSDetails productType(String productType) {
    this.productType = productType;
    return this;
  }

  /**
   * Product type.
   * @return productType
   */
  @javax.annotation.Nullable
  public String getProductType() {
    return productType;
  }

  public void setProductType(String productType) {
    this.productType = productType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OSDetails osDetails = (OSDetails) o;
    return Objects.equals(this.oSMajorVersion, osDetails.oSMajorVersion) &&
        Objects.equals(this.oSMinorVersion, osDetails.oSMinorVersion) &&
        Objects.equals(this.oSVersion, osDetails.oSVersion) &&
        Objects.equals(this.osEdition, osDetails.osEdition) &&
        Objects.equals(this.osType, osDetails.osType) &&
        Objects.equals(this.productType, osDetails.productType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oSMajorVersion, oSMinorVersion, oSVersion, osEdition, osType, productType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OSDetails {\n");
    sb.append("    oSMajorVersion: ").append(toIndentedString(oSMajorVersion)).append("\n");
    sb.append("    oSMinorVersion: ").append(toIndentedString(oSMinorVersion)).append("\n");
    sb.append("    oSVersion: ").append(toIndentedString(oSVersion)).append("\n");
    sb.append("    osEdition: ").append(toIndentedString(osEdition)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("oSMajorVersion");
    openapiFields.add("oSMinorVersion");
    openapiFields.add("oSVersion");
    openapiFields.add("osEdition");
    openapiFields.add("osType");
    openapiFields.add("productType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OSDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OSDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OSDetails is not found in the empty JSON string", OSDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OSDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OSDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("oSMajorVersion") != null && !jsonObj.get("oSMajorVersion").isJsonNull()) && !jsonObj.get("oSMajorVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oSMajorVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oSMajorVersion").toString()));
      }
      if ((jsonObj.get("oSMinorVersion") != null && !jsonObj.get("oSMinorVersion").isJsonNull()) && !jsonObj.get("oSMinorVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oSMinorVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oSMinorVersion").toString()));
      }
      if ((jsonObj.get("oSVersion") != null && !jsonObj.get("oSVersion").isJsonNull()) && !jsonObj.get("oSVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oSVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oSVersion").toString()));
      }
      if ((jsonObj.get("osEdition") != null && !jsonObj.get("osEdition").isJsonNull()) && !jsonObj.get("osEdition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osEdition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osEdition").toString()));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      if ((jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) && !jsonObj.get("productType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OSDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OSDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OSDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OSDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<OSDetails>() {
           @Override
           public void write(JsonWriter out, OSDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OSDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OSDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OSDetails
   * @throws IOException if the JSON string is invalid with respect to OSDetails
   */
  public static OSDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OSDetails.class);
  }

  /**
   * Convert an instance of OSDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

