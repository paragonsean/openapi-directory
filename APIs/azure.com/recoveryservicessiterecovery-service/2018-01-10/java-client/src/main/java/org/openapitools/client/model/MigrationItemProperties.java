/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CurrentJobDetails;
import org.openapitools.client.model.HealthError;
import org.openapitools.client.model.MigrationProviderSpecificSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Migration item properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MigrationItemProperties {
  /**
   * Gets or Sets allowedOperations
   */
  @JsonAdapter(AllowedOperationsEnum.Adapter.class)
  public enum AllowedOperationsEnum {
    DISABLE_MIGRATION("DisableMigration"),
    
    TEST_MIGRATE("TestMigrate"),
    
    TEST_MIGRATE_CLEANUP("TestMigrateCleanup"),
    
    MIGRATE("Migrate"),
    
    START_RESYNC("StartResync");

    private String value;

    AllowedOperationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedOperationsEnum fromValue(String value) {
      for (AllowedOperationsEnum b : AllowedOperationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedOperationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedOperationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedOperationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowedOperationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllowedOperationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_OPERATIONS = "allowedOperations";
  @SerializedName(SERIALIZED_NAME_ALLOWED_OPERATIONS)
  private List<AllowedOperationsEnum> allowedOperations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_JOB = "currentJob";
  @SerializedName(SERIALIZED_NAME_CURRENT_JOB)
  private CurrentJobDetails currentJob;

  public static final String SERIALIZED_NAME_EVENT_CORRELATION_ID = "eventCorrelationId";
  @SerializedName(SERIALIZED_NAME_EVENT_CORRELATION_ID)
  private String eventCorrelationId;

  /**
   * The consolidated health.
   */
  @JsonAdapter(HealthEnum.Adapter.class)
  public enum HealthEnum {
    NONE("None"),
    
    NORMAL("Normal"),
    
    WARNING("Warning"),
    
    CRITICAL("Critical");

    private String value;

    HealthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HealthEnum fromValue(String value) {
      for (HealthEnum b : HealthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HealthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HealthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HealthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HealthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HealthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEALTH = "health";
  @SerializedName(SERIALIZED_NAME_HEALTH)
  private HealthEnum health;

  public static final String SERIALIZED_NAME_HEALTH_ERRORS = "healthErrors";
  @SerializedName(SERIALIZED_NAME_HEALTH_ERRORS)
  private List<HealthError> healthErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_TEST_MIGRATION_STATUS = "lastTestMigrationStatus";
  @SerializedName(SERIALIZED_NAME_LAST_TEST_MIGRATION_STATUS)
  private String lastTestMigrationStatus;

  public static final String SERIALIZED_NAME_LAST_TEST_MIGRATION_TIME = "lastTestMigrationTime";
  @SerializedName(SERIALIZED_NAME_LAST_TEST_MIGRATION_TIME)
  private OffsetDateTime lastTestMigrationTime;

  public static final String SERIALIZED_NAME_MACHINE_NAME = "machineName";
  @SerializedName(SERIALIZED_NAME_MACHINE_NAME)
  private String machineName;

  /**
   * The migration status.
   */
  @JsonAdapter(MigrationStateEnum.Adapter.class)
  public enum MigrationStateEnum {
    NONE("None"),
    
    ENABLE_MIGRATION_IN_PROGRESS("EnableMigrationInProgress"),
    
    ENABLE_MIGRATION_FAILED("EnableMigrationFailed"),
    
    DISABLE_MIGRATION_IN_PROGRESS("DisableMigrationInProgress"),
    
    DISABLE_MIGRATION_FAILED("DisableMigrationFailed"),
    
    INITIAL_SEEDING_IN_PROGRESS("InitialSeedingInProgress"),
    
    INITIAL_SEEDING_FAILED("InitialSeedingFailed"),
    
    REPLICATING("Replicating"),
    
    MIGRATION_IN_PROGRESS("MigrationInProgress"),
    
    MIGRATION_SUCCEEDED("MigrationSucceeded"),
    
    MIGRATION_FAILED("MigrationFailed");

    private String value;

    MigrationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MigrationStateEnum fromValue(String value) {
      for (MigrationStateEnum b : MigrationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MigrationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MigrationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MigrationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MigrationStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MigrationStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIGRATION_STATE = "migrationState";
  @SerializedName(SERIALIZED_NAME_MIGRATION_STATE)
  private MigrationStateEnum migrationState;

  public static final String SERIALIZED_NAME_MIGRATION_STATE_DESCRIPTION = "migrationStateDescription";
  @SerializedName(SERIALIZED_NAME_MIGRATION_STATE_DESCRIPTION)
  private String migrationStateDescription;

  public static final String SERIALIZED_NAME_POLICY_FRIENDLY_NAME = "policyFriendlyName";
  @SerializedName(SERIALIZED_NAME_POLICY_FRIENDLY_NAME)
  private String policyFriendlyName;

  public static final String SERIALIZED_NAME_POLICY_ID = "policyId";
  @SerializedName(SERIALIZED_NAME_POLICY_ID)
  private String policyId;

  public static final String SERIALIZED_NAME_PROVIDER_SPECIFIC_DETAILS = "providerSpecificDetails";
  @SerializedName(SERIALIZED_NAME_PROVIDER_SPECIFIC_DETAILS)
  private MigrationProviderSpecificSettings providerSpecificDetails;

  /**
   * The test migrate state.
   */
  @JsonAdapter(TestMigrateStateEnum.Adapter.class)
  public enum TestMigrateStateEnum {
    NONE("None"),
    
    TEST_MIGRATION_IN_PROGRESS("TestMigrationInProgress"),
    
    TEST_MIGRATION_SUCCEEDED("TestMigrationSucceeded"),
    
    TEST_MIGRATION_FAILED("TestMigrationFailed"),
    
    TEST_MIGRATION_CLEANUP_IN_PROGRESS("TestMigrationCleanupInProgress");

    private String value;

    TestMigrateStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TestMigrateStateEnum fromValue(String value) {
      for (TestMigrateStateEnum b : TestMigrateStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TestMigrateStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TestMigrateStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TestMigrateStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TestMigrateStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TestMigrateStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEST_MIGRATE_STATE = "testMigrateState";
  @SerializedName(SERIALIZED_NAME_TEST_MIGRATE_STATE)
  private TestMigrateStateEnum testMigrateState;

  public static final String SERIALIZED_NAME_TEST_MIGRATE_STATE_DESCRIPTION = "testMigrateStateDescription";
  @SerializedName(SERIALIZED_NAME_TEST_MIGRATE_STATE_DESCRIPTION)
  private String testMigrateStateDescription;

  public MigrationItemProperties() {
  }

  public MigrationItemProperties(
     List<AllowedOperationsEnum> allowedOperations, 
     String eventCorrelationId, 
     HealthEnum health, 
     List<HealthError> healthErrors, 
     String lastTestMigrationStatus, 
     OffsetDateTime lastTestMigrationTime, 
     String machineName, 
     MigrationStateEnum migrationState, 
     String migrationStateDescription, 
     String policyFriendlyName, 
     String policyId, 
     TestMigrateStateEnum testMigrateState, 
     String testMigrateStateDescription
  ) {
    this();
    this.allowedOperations = allowedOperations;
    this.eventCorrelationId = eventCorrelationId;
    this.health = health;
    this.healthErrors = healthErrors;
    this.lastTestMigrationStatus = lastTestMigrationStatus;
    this.lastTestMigrationTime = lastTestMigrationTime;
    this.machineName = machineName;
    this.migrationState = migrationState;
    this.migrationStateDescription = migrationStateDescription;
    this.policyFriendlyName = policyFriendlyName;
    this.policyId = policyId;
    this.testMigrateState = testMigrateState;
    this.testMigrateStateDescription = testMigrateStateDescription;
  }

  /**
   * The allowed operations on the migration item, based on the current migration state of the item.
   * @return allowedOperations
   */
  @javax.annotation.Nullable
  public List<AllowedOperationsEnum> getAllowedOperations() {
    return allowedOperations;
  }



  public MigrationItemProperties currentJob(CurrentJobDetails currentJob) {
    this.currentJob = currentJob;
    return this;
  }

  /**
   * Get currentJob
   * @return currentJob
   */
  @javax.annotation.Nullable
  public CurrentJobDetails getCurrentJob() {
    return currentJob;
  }

  public void setCurrentJob(CurrentJobDetails currentJob) {
    this.currentJob = currentJob;
  }


  /**
   * The correlation Id for events associated with this migration item.
   * @return eventCorrelationId
   */
  @javax.annotation.Nullable
  public String getEventCorrelationId() {
    return eventCorrelationId;
  }



  /**
   * The consolidated health.
   * @return health
   */
  @javax.annotation.Nullable
  public HealthEnum getHealth() {
    return health;
  }



  /**
   * The list of health errors.
   * @return healthErrors
   */
  @javax.annotation.Nullable
  public List<HealthError> getHealthErrors() {
    return healthErrors;
  }



  /**
   * The status of the last test migration.
   * @return lastTestMigrationStatus
   */
  @javax.annotation.Nullable
  public String getLastTestMigrationStatus() {
    return lastTestMigrationStatus;
  }



  /**
   * The last test migration time.
   * @return lastTestMigrationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastTestMigrationTime() {
    return lastTestMigrationTime;
  }



  /**
   * The on-premise virtual machine name.
   * @return machineName
   */
  @javax.annotation.Nullable
  public String getMachineName() {
    return machineName;
  }



  /**
   * The migration status.
   * @return migrationState
   */
  @javax.annotation.Nullable
  public MigrationStateEnum getMigrationState() {
    return migrationState;
  }



  /**
   * The migration state description.
   * @return migrationStateDescription
   */
  @javax.annotation.Nullable
  public String getMigrationStateDescription() {
    return migrationStateDescription;
  }



  /**
   * The name of policy governing this item.
   * @return policyFriendlyName
   */
  @javax.annotation.Nullable
  public String getPolicyFriendlyName() {
    return policyFriendlyName;
  }



  /**
   * The ARM Id of policy governing this item.
   * @return policyId
   */
  @javax.annotation.Nullable
  public String getPolicyId() {
    return policyId;
  }



  public MigrationItemProperties providerSpecificDetails(MigrationProviderSpecificSettings providerSpecificDetails) {
    this.providerSpecificDetails = providerSpecificDetails;
    return this;
  }

  /**
   * Get providerSpecificDetails
   * @return providerSpecificDetails
   */
  @javax.annotation.Nullable
  public MigrationProviderSpecificSettings getProviderSpecificDetails() {
    return providerSpecificDetails;
  }

  public void setProviderSpecificDetails(MigrationProviderSpecificSettings providerSpecificDetails) {
    this.providerSpecificDetails = providerSpecificDetails;
  }


  /**
   * The test migrate state.
   * @return testMigrateState
   */
  @javax.annotation.Nullable
  public TestMigrateStateEnum getTestMigrateState() {
    return testMigrateState;
  }



  /**
   * The test migrate state description.
   * @return testMigrateStateDescription
   */
  @javax.annotation.Nullable
  public String getTestMigrateStateDescription() {
    return testMigrateStateDescription;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrationItemProperties migrationItemProperties = (MigrationItemProperties) o;
    return Objects.equals(this.allowedOperations, migrationItemProperties.allowedOperations) &&
        Objects.equals(this.currentJob, migrationItemProperties.currentJob) &&
        Objects.equals(this.eventCorrelationId, migrationItemProperties.eventCorrelationId) &&
        Objects.equals(this.health, migrationItemProperties.health) &&
        Objects.equals(this.healthErrors, migrationItemProperties.healthErrors) &&
        Objects.equals(this.lastTestMigrationStatus, migrationItemProperties.lastTestMigrationStatus) &&
        Objects.equals(this.lastTestMigrationTime, migrationItemProperties.lastTestMigrationTime) &&
        Objects.equals(this.machineName, migrationItemProperties.machineName) &&
        Objects.equals(this.migrationState, migrationItemProperties.migrationState) &&
        Objects.equals(this.migrationStateDescription, migrationItemProperties.migrationStateDescription) &&
        Objects.equals(this.policyFriendlyName, migrationItemProperties.policyFriendlyName) &&
        Objects.equals(this.policyId, migrationItemProperties.policyId) &&
        Objects.equals(this.providerSpecificDetails, migrationItemProperties.providerSpecificDetails) &&
        Objects.equals(this.testMigrateState, migrationItemProperties.testMigrateState) &&
        Objects.equals(this.testMigrateStateDescription, migrationItemProperties.testMigrateStateDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedOperations, currentJob, eventCorrelationId, health, healthErrors, lastTestMigrationStatus, lastTestMigrationTime, machineName, migrationState, migrationStateDescription, policyFriendlyName, policyId, providerSpecificDetails, testMigrateState, testMigrateStateDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrationItemProperties {\n");
    sb.append("    allowedOperations: ").append(toIndentedString(allowedOperations)).append("\n");
    sb.append("    currentJob: ").append(toIndentedString(currentJob)).append("\n");
    sb.append("    eventCorrelationId: ").append(toIndentedString(eventCorrelationId)).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    healthErrors: ").append(toIndentedString(healthErrors)).append("\n");
    sb.append("    lastTestMigrationStatus: ").append(toIndentedString(lastTestMigrationStatus)).append("\n");
    sb.append("    lastTestMigrationTime: ").append(toIndentedString(lastTestMigrationTime)).append("\n");
    sb.append("    machineName: ").append(toIndentedString(machineName)).append("\n");
    sb.append("    migrationState: ").append(toIndentedString(migrationState)).append("\n");
    sb.append("    migrationStateDescription: ").append(toIndentedString(migrationStateDescription)).append("\n");
    sb.append("    policyFriendlyName: ").append(toIndentedString(policyFriendlyName)).append("\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("    providerSpecificDetails: ").append(toIndentedString(providerSpecificDetails)).append("\n");
    sb.append("    testMigrateState: ").append(toIndentedString(testMigrateState)).append("\n");
    sb.append("    testMigrateStateDescription: ").append(toIndentedString(testMigrateStateDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedOperations");
    openapiFields.add("currentJob");
    openapiFields.add("eventCorrelationId");
    openapiFields.add("health");
    openapiFields.add("healthErrors");
    openapiFields.add("lastTestMigrationStatus");
    openapiFields.add("lastTestMigrationTime");
    openapiFields.add("machineName");
    openapiFields.add("migrationState");
    openapiFields.add("migrationStateDescription");
    openapiFields.add("policyFriendlyName");
    openapiFields.add("policyId");
    openapiFields.add("providerSpecificDetails");
    openapiFields.add("testMigrateState");
    openapiFields.add("testMigrateStateDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MigrationItemProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MigrationItemProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MigrationItemProperties is not found in the empty JSON string", MigrationItemProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MigrationItemProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MigrationItemProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedOperations") != null && !jsonObj.get("allowedOperations").isJsonNull() && !jsonObj.get("allowedOperations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedOperations` to be an array in the JSON string but got `%s`", jsonObj.get("allowedOperations").toString()));
      }
      // validate the optional field `currentJob`
      if (jsonObj.get("currentJob") != null && !jsonObj.get("currentJob").isJsonNull()) {
        CurrentJobDetails.validateJsonElement(jsonObj.get("currentJob"));
      }
      if ((jsonObj.get("eventCorrelationId") != null && !jsonObj.get("eventCorrelationId").isJsonNull()) && !jsonObj.get("eventCorrelationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventCorrelationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventCorrelationId").toString()));
      }
      if ((jsonObj.get("health") != null && !jsonObj.get("health").isJsonNull()) && !jsonObj.get("health").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `health` to be a primitive type in the JSON string but got `%s`", jsonObj.get("health").toString()));
      }
      // validate the optional field `health`
      if (jsonObj.get("health") != null && !jsonObj.get("health").isJsonNull()) {
        HealthEnum.validateJsonElement(jsonObj.get("health"));
      }
      if (jsonObj.get("healthErrors") != null && !jsonObj.get("healthErrors").isJsonNull()) {
        JsonArray jsonArrayhealthErrors = jsonObj.getAsJsonArray("healthErrors");
        if (jsonArrayhealthErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("healthErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `healthErrors` to be an array in the JSON string but got `%s`", jsonObj.get("healthErrors").toString()));
          }

          // validate the optional field `healthErrors` (array)
          for (int i = 0; i < jsonArrayhealthErrors.size(); i++) {
            HealthError.validateJsonElement(jsonArrayhealthErrors.get(i));
          };
        }
      }
      if ((jsonObj.get("lastTestMigrationStatus") != null && !jsonObj.get("lastTestMigrationStatus").isJsonNull()) && !jsonObj.get("lastTestMigrationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastTestMigrationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastTestMigrationStatus").toString()));
      }
      if ((jsonObj.get("machineName") != null && !jsonObj.get("machineName").isJsonNull()) && !jsonObj.get("machineName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineName").toString()));
      }
      if ((jsonObj.get("migrationState") != null && !jsonObj.get("migrationState").isJsonNull()) && !jsonObj.get("migrationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationState").toString()));
      }
      // validate the optional field `migrationState`
      if (jsonObj.get("migrationState") != null && !jsonObj.get("migrationState").isJsonNull()) {
        MigrationStateEnum.validateJsonElement(jsonObj.get("migrationState"));
      }
      if ((jsonObj.get("migrationStateDescription") != null && !jsonObj.get("migrationStateDescription").isJsonNull()) && !jsonObj.get("migrationStateDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationStateDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationStateDescription").toString()));
      }
      if ((jsonObj.get("policyFriendlyName") != null && !jsonObj.get("policyFriendlyName").isJsonNull()) && !jsonObj.get("policyFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyFriendlyName").toString()));
      }
      if ((jsonObj.get("policyId") != null && !jsonObj.get("policyId").isJsonNull()) && !jsonObj.get("policyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyId").toString()));
      }
      // validate the optional field `providerSpecificDetails`
      if (jsonObj.get("providerSpecificDetails") != null && !jsonObj.get("providerSpecificDetails").isJsonNull()) {
        MigrationProviderSpecificSettings.validateJsonElement(jsonObj.get("providerSpecificDetails"));
      }
      if ((jsonObj.get("testMigrateState") != null && !jsonObj.get("testMigrateState").isJsonNull()) && !jsonObj.get("testMigrateState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testMigrateState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testMigrateState").toString()));
      }
      // validate the optional field `testMigrateState`
      if (jsonObj.get("testMigrateState") != null && !jsonObj.get("testMigrateState").isJsonNull()) {
        TestMigrateStateEnum.validateJsonElement(jsonObj.get("testMigrateState"));
      }
      if ((jsonObj.get("testMigrateStateDescription") != null && !jsonObj.get("testMigrateStateDescription").isJsonNull()) && !jsonObj.get("testMigrateStateDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testMigrateStateDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testMigrateStateDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MigrationItemProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MigrationItemProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MigrationItemProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MigrationItemProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<MigrationItemProperties>() {
           @Override
           public void write(JsonWriter out, MigrationItemProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MigrationItemProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MigrationItemProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MigrationItemProperties
   * @throws IOException if the JSON string is invalid with respect to MigrationItemProperties
   */
  public static MigrationItemProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MigrationItemProperties.class);
  }

  /**
   * Convert an instance of MigrationItemProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

