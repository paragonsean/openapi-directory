/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * class to define the summary of the health error details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HealthErrorSummary {
  public static final String SERIALIZED_NAME_AFFECTED_RESOURCE_CORRELATION_IDS = "affectedResourceCorrelationIds";
  @SerializedName(SERIALIZED_NAME_AFFECTED_RESOURCE_CORRELATION_IDS)
  private List<String> affectedResourceCorrelationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_AFFECTED_RESOURCE_SUBTYPE = "affectedResourceSubtype";
  @SerializedName(SERIALIZED_NAME_AFFECTED_RESOURCE_SUBTYPE)
  private String affectedResourceSubtype;

  public static final String SERIALIZED_NAME_AFFECTED_RESOURCE_TYPE = "affectedResourceType";
  @SerializedName(SERIALIZED_NAME_AFFECTED_RESOURCE_TYPE)
  private String affectedResourceType;

  /**
   * The category of the health error.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    NONE("None"),
    
    REPLICATION("Replication"),
    
    TEST_FAILOVER("TestFailover"),
    
    CONFIGURATION("Configuration"),
    
    FABRIC_INFRASTRUCTURE("FabricInfrastructure"),
    
    VERSION_EXPIRY("VersionExpiry"),
    
    AGENT_AUTO_UPDATE("AgentAutoUpdate");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  /**
   * Severity of error.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    NONE("NONE"),
    
    WARNING("Warning"),
    
    ERROR("Error"),
    
    INFO("Info");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_SUMMARY_CODE = "summaryCode";
  @SerializedName(SERIALIZED_NAME_SUMMARY_CODE)
  private String summaryCode;

  public static final String SERIALIZED_NAME_SUMMARY_MESSAGE = "summaryMessage";
  @SerializedName(SERIALIZED_NAME_SUMMARY_MESSAGE)
  private String summaryMessage;

  public HealthErrorSummary() {
  }

  public HealthErrorSummary affectedResourceCorrelationIds(List<String> affectedResourceCorrelationIds) {
    this.affectedResourceCorrelationIds = affectedResourceCorrelationIds;
    return this;
  }

  public HealthErrorSummary addAffectedResourceCorrelationIdsItem(String affectedResourceCorrelationIdsItem) {
    if (this.affectedResourceCorrelationIds == null) {
      this.affectedResourceCorrelationIds = new ArrayList<>();
    }
    this.affectedResourceCorrelationIds.add(affectedResourceCorrelationIdsItem);
    return this;
  }

  /**
   * The list of affected resource correlation Ids. This can be used to uniquely identify the count of items affected by a specific category and severity as well as count of item affected by an specific issue.
   * @return affectedResourceCorrelationIds
   */
  @javax.annotation.Nullable
  public List<String> getAffectedResourceCorrelationIds() {
    return affectedResourceCorrelationIds;
  }

  public void setAffectedResourceCorrelationIds(List<String> affectedResourceCorrelationIds) {
    this.affectedResourceCorrelationIds = affectedResourceCorrelationIds;
  }


  public HealthErrorSummary affectedResourceSubtype(String affectedResourceSubtype) {
    this.affectedResourceSubtype = affectedResourceSubtype;
    return this;
  }

  /**
   * The sub type of any subcomponent within the ARM resource that this might be applicable. Value remains null if not applicable.
   * @return affectedResourceSubtype
   */
  @javax.annotation.Nullable
  public String getAffectedResourceSubtype() {
    return affectedResourceSubtype;
  }

  public void setAffectedResourceSubtype(String affectedResourceSubtype) {
    this.affectedResourceSubtype = affectedResourceSubtype;
  }


  public HealthErrorSummary affectedResourceType(String affectedResourceType) {
    this.affectedResourceType = affectedResourceType;
    return this;
  }

  /**
   * The type of affected ARM resource.
   * @return affectedResourceType
   */
  @javax.annotation.Nullable
  public String getAffectedResourceType() {
    return affectedResourceType;
  }

  public void setAffectedResourceType(String affectedResourceType) {
    this.affectedResourceType = affectedResourceType;
  }


  public HealthErrorSummary category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * The category of the health error.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public HealthErrorSummary severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Severity of error.
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public HealthErrorSummary summaryCode(String summaryCode) {
    this.summaryCode = summaryCode;
    return this;
  }

  /**
   * The code of the health error.
   * @return summaryCode
   */
  @javax.annotation.Nullable
  public String getSummaryCode() {
    return summaryCode;
  }

  public void setSummaryCode(String summaryCode) {
    this.summaryCode = summaryCode;
  }


  public HealthErrorSummary summaryMessage(String summaryMessage) {
    this.summaryMessage = summaryMessage;
    return this;
  }

  /**
   * The summary message of the health error.
   * @return summaryMessage
   */
  @javax.annotation.Nullable
  public String getSummaryMessage() {
    return summaryMessage;
  }

  public void setSummaryMessage(String summaryMessage) {
    this.summaryMessage = summaryMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthErrorSummary healthErrorSummary = (HealthErrorSummary) o;
    return Objects.equals(this.affectedResourceCorrelationIds, healthErrorSummary.affectedResourceCorrelationIds) &&
        Objects.equals(this.affectedResourceSubtype, healthErrorSummary.affectedResourceSubtype) &&
        Objects.equals(this.affectedResourceType, healthErrorSummary.affectedResourceType) &&
        Objects.equals(this.category, healthErrorSummary.category) &&
        Objects.equals(this.severity, healthErrorSummary.severity) &&
        Objects.equals(this.summaryCode, healthErrorSummary.summaryCode) &&
        Objects.equals(this.summaryMessage, healthErrorSummary.summaryMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedResourceCorrelationIds, affectedResourceSubtype, affectedResourceType, category, severity, summaryCode, summaryMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthErrorSummary {\n");
    sb.append("    affectedResourceCorrelationIds: ").append(toIndentedString(affectedResourceCorrelationIds)).append("\n");
    sb.append("    affectedResourceSubtype: ").append(toIndentedString(affectedResourceSubtype)).append("\n");
    sb.append("    affectedResourceType: ").append(toIndentedString(affectedResourceType)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    summaryCode: ").append(toIndentedString(summaryCode)).append("\n");
    sb.append("    summaryMessage: ").append(toIndentedString(summaryMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affectedResourceCorrelationIds");
    openapiFields.add("affectedResourceSubtype");
    openapiFields.add("affectedResourceType");
    openapiFields.add("category");
    openapiFields.add("severity");
    openapiFields.add("summaryCode");
    openapiFields.add("summaryMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HealthErrorSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthErrorSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthErrorSummary is not found in the empty JSON string", HealthErrorSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HealthErrorSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthErrorSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("affectedResourceCorrelationIds") != null && !jsonObj.get("affectedResourceCorrelationIds").isJsonNull() && !jsonObj.get("affectedResourceCorrelationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `affectedResourceCorrelationIds` to be an array in the JSON string but got `%s`", jsonObj.get("affectedResourceCorrelationIds").toString()));
      }
      if ((jsonObj.get("affectedResourceSubtype") != null && !jsonObj.get("affectedResourceSubtype").isJsonNull()) && !jsonObj.get("affectedResourceSubtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affectedResourceSubtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affectedResourceSubtype").toString()));
      }
      if ((jsonObj.get("affectedResourceType") != null && !jsonObj.get("affectedResourceType").isJsonNull()) && !jsonObj.get("affectedResourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affectedResourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affectedResourceType").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      if ((jsonObj.get("summaryCode") != null && !jsonObj.get("summaryCode").isJsonNull()) && !jsonObj.get("summaryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summaryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summaryCode").toString()));
      }
      if ((jsonObj.get("summaryMessage") != null && !jsonObj.get("summaryMessage").isJsonNull()) && !jsonObj.get("summaryMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summaryMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summaryMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthErrorSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthErrorSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthErrorSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthErrorSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthErrorSummary>() {
           @Override
           public void write(JsonWriter out, HealthErrorSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthErrorSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HealthErrorSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HealthErrorSummary
   * @throws IOException if the JSON string is invalid with respect to HealthErrorSummary
   */
  public static HealthErrorSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthErrorSummary.class);
  }

  /**
   * Convert an instance of HealthErrorSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

