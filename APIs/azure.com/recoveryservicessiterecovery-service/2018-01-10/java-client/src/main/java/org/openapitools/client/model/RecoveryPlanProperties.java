/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CurrentScenarioDetails;
import org.openapitools.client.model.RecoveryPlanGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Recovery plan custom details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecoveryPlanProperties {
  public static final String SERIALIZED_NAME_ALLOWED_OPERATIONS = "allowedOperations";
  @SerializedName(SERIALIZED_NAME_ALLOWED_OPERATIONS)
  private List<String> allowedOperations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_SCENARIO = "currentScenario";
  @SerializedName(SERIALIZED_NAME_CURRENT_SCENARIO)
  private CurrentScenarioDetails currentScenario;

  public static final String SERIALIZED_NAME_CURRENT_SCENARIO_STATUS = "currentScenarioStatus";
  @SerializedName(SERIALIZED_NAME_CURRENT_SCENARIO_STATUS)
  private String currentScenarioStatus;

  public static final String SERIALIZED_NAME_CURRENT_SCENARIO_STATUS_DESCRIPTION = "currentScenarioStatusDescription";
  @SerializedName(SERIALIZED_NAME_CURRENT_SCENARIO_STATUS_DESCRIPTION)
  private String currentScenarioStatusDescription;

  public static final String SERIALIZED_NAME_FAILOVER_DEPLOYMENT_MODEL = "failoverDeploymentModel";
  @SerializedName(SERIALIZED_NAME_FAILOVER_DEPLOYMENT_MODEL)
  private String failoverDeploymentModel;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<RecoveryPlanGroup> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_PLANNED_FAILOVER_TIME = "lastPlannedFailoverTime";
  @SerializedName(SERIALIZED_NAME_LAST_PLANNED_FAILOVER_TIME)
  private OffsetDateTime lastPlannedFailoverTime;

  public static final String SERIALIZED_NAME_LAST_TEST_FAILOVER_TIME = "lastTestFailoverTime";
  @SerializedName(SERIALIZED_NAME_LAST_TEST_FAILOVER_TIME)
  private OffsetDateTime lastTestFailoverTime;

  public static final String SERIALIZED_NAME_LAST_UNPLANNED_FAILOVER_TIME = "lastUnplannedFailoverTime";
  @SerializedName(SERIALIZED_NAME_LAST_UNPLANNED_FAILOVER_TIME)
  private OffsetDateTime lastUnplannedFailoverTime;

  public static final String SERIALIZED_NAME_PRIMARY_FABRIC_FRIENDLY_NAME = "primaryFabricFriendlyName";
  @SerializedName(SERIALIZED_NAME_PRIMARY_FABRIC_FRIENDLY_NAME)
  private String primaryFabricFriendlyName;

  public static final String SERIALIZED_NAME_PRIMARY_FABRIC_ID = "primaryFabricId";
  @SerializedName(SERIALIZED_NAME_PRIMARY_FABRIC_ID)
  private String primaryFabricId;

  public static final String SERIALIZED_NAME_RECOVERY_FABRIC_FRIENDLY_NAME = "recoveryFabricFriendlyName";
  @SerializedName(SERIALIZED_NAME_RECOVERY_FABRIC_FRIENDLY_NAME)
  private String recoveryFabricFriendlyName;

  public static final String SERIALIZED_NAME_RECOVERY_FABRIC_ID = "recoveryFabricId";
  @SerializedName(SERIALIZED_NAME_RECOVERY_FABRIC_ID)
  private String recoveryFabricId;

  public static final String SERIALIZED_NAME_REPLICATION_PROVIDERS = "replicationProviders";
  @SerializedName(SERIALIZED_NAME_REPLICATION_PROVIDERS)
  private List<String> replicationProviders = new ArrayList<>();

  public RecoveryPlanProperties() {
  }

  public RecoveryPlanProperties allowedOperations(List<String> allowedOperations) {
    this.allowedOperations = allowedOperations;
    return this;
  }

  public RecoveryPlanProperties addAllowedOperationsItem(String allowedOperationsItem) {
    if (this.allowedOperations == null) {
      this.allowedOperations = new ArrayList<>();
    }
    this.allowedOperations.add(allowedOperationsItem);
    return this;
  }

  /**
   * The list of allowed operations.
   * @return allowedOperations
   */
  @javax.annotation.Nullable
  public List<String> getAllowedOperations() {
    return allowedOperations;
  }

  public void setAllowedOperations(List<String> allowedOperations) {
    this.allowedOperations = allowedOperations;
  }


  public RecoveryPlanProperties currentScenario(CurrentScenarioDetails currentScenario) {
    this.currentScenario = currentScenario;
    return this;
  }

  /**
   * Get currentScenario
   * @return currentScenario
   */
  @javax.annotation.Nullable
  public CurrentScenarioDetails getCurrentScenario() {
    return currentScenario;
  }

  public void setCurrentScenario(CurrentScenarioDetails currentScenario) {
    this.currentScenario = currentScenario;
  }


  public RecoveryPlanProperties currentScenarioStatus(String currentScenarioStatus) {
    this.currentScenarioStatus = currentScenarioStatus;
    return this;
  }

  /**
   * The recovery plan status.
   * @return currentScenarioStatus
   */
  @javax.annotation.Nullable
  public String getCurrentScenarioStatus() {
    return currentScenarioStatus;
  }

  public void setCurrentScenarioStatus(String currentScenarioStatus) {
    this.currentScenarioStatus = currentScenarioStatus;
  }


  public RecoveryPlanProperties currentScenarioStatusDescription(String currentScenarioStatusDescription) {
    this.currentScenarioStatusDescription = currentScenarioStatusDescription;
    return this;
  }

  /**
   * The recovery plan status description.
   * @return currentScenarioStatusDescription
   */
  @javax.annotation.Nullable
  public String getCurrentScenarioStatusDescription() {
    return currentScenarioStatusDescription;
  }

  public void setCurrentScenarioStatusDescription(String currentScenarioStatusDescription) {
    this.currentScenarioStatusDescription = currentScenarioStatusDescription;
  }


  public RecoveryPlanProperties failoverDeploymentModel(String failoverDeploymentModel) {
    this.failoverDeploymentModel = failoverDeploymentModel;
    return this;
  }

  /**
   * The failover deployment model.
   * @return failoverDeploymentModel
   */
  @javax.annotation.Nullable
  public String getFailoverDeploymentModel() {
    return failoverDeploymentModel;
  }

  public void setFailoverDeploymentModel(String failoverDeploymentModel) {
    this.failoverDeploymentModel = failoverDeploymentModel;
  }


  public RecoveryPlanProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The friendly name.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public RecoveryPlanProperties groups(List<RecoveryPlanGroup> groups) {
    this.groups = groups;
    return this;
  }

  public RecoveryPlanProperties addGroupsItem(RecoveryPlanGroup groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * The recovery plan groups.
   * @return groups
   */
  @javax.annotation.Nullable
  public List<RecoveryPlanGroup> getGroups() {
    return groups;
  }

  public void setGroups(List<RecoveryPlanGroup> groups) {
    this.groups = groups;
  }


  public RecoveryPlanProperties lastPlannedFailoverTime(OffsetDateTime lastPlannedFailoverTime) {
    this.lastPlannedFailoverTime = lastPlannedFailoverTime;
    return this;
  }

  /**
   * The start time of the last planned failover.
   * @return lastPlannedFailoverTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastPlannedFailoverTime() {
    return lastPlannedFailoverTime;
  }

  public void setLastPlannedFailoverTime(OffsetDateTime lastPlannedFailoverTime) {
    this.lastPlannedFailoverTime = lastPlannedFailoverTime;
  }


  public RecoveryPlanProperties lastTestFailoverTime(OffsetDateTime lastTestFailoverTime) {
    this.lastTestFailoverTime = lastTestFailoverTime;
    return this;
  }

  /**
   * The start time of the last test failover.
   * @return lastTestFailoverTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastTestFailoverTime() {
    return lastTestFailoverTime;
  }

  public void setLastTestFailoverTime(OffsetDateTime lastTestFailoverTime) {
    this.lastTestFailoverTime = lastTestFailoverTime;
  }


  public RecoveryPlanProperties lastUnplannedFailoverTime(OffsetDateTime lastUnplannedFailoverTime) {
    this.lastUnplannedFailoverTime = lastUnplannedFailoverTime;
    return this;
  }

  /**
   * The start time of the last unplanned failover.
   * @return lastUnplannedFailoverTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUnplannedFailoverTime() {
    return lastUnplannedFailoverTime;
  }

  public void setLastUnplannedFailoverTime(OffsetDateTime lastUnplannedFailoverTime) {
    this.lastUnplannedFailoverTime = lastUnplannedFailoverTime;
  }


  public RecoveryPlanProperties primaryFabricFriendlyName(String primaryFabricFriendlyName) {
    this.primaryFabricFriendlyName = primaryFabricFriendlyName;
    return this;
  }

  /**
   * The primary fabric friendly name.
   * @return primaryFabricFriendlyName
   */
  @javax.annotation.Nullable
  public String getPrimaryFabricFriendlyName() {
    return primaryFabricFriendlyName;
  }

  public void setPrimaryFabricFriendlyName(String primaryFabricFriendlyName) {
    this.primaryFabricFriendlyName = primaryFabricFriendlyName;
  }


  public RecoveryPlanProperties primaryFabricId(String primaryFabricId) {
    this.primaryFabricId = primaryFabricId;
    return this;
  }

  /**
   * The primary fabric Id.
   * @return primaryFabricId
   */
  @javax.annotation.Nullable
  public String getPrimaryFabricId() {
    return primaryFabricId;
  }

  public void setPrimaryFabricId(String primaryFabricId) {
    this.primaryFabricId = primaryFabricId;
  }


  public RecoveryPlanProperties recoveryFabricFriendlyName(String recoveryFabricFriendlyName) {
    this.recoveryFabricFriendlyName = recoveryFabricFriendlyName;
    return this;
  }

  /**
   * The recovery fabric friendly name.
   * @return recoveryFabricFriendlyName
   */
  @javax.annotation.Nullable
  public String getRecoveryFabricFriendlyName() {
    return recoveryFabricFriendlyName;
  }

  public void setRecoveryFabricFriendlyName(String recoveryFabricFriendlyName) {
    this.recoveryFabricFriendlyName = recoveryFabricFriendlyName;
  }


  public RecoveryPlanProperties recoveryFabricId(String recoveryFabricId) {
    this.recoveryFabricId = recoveryFabricId;
    return this;
  }

  /**
   * The recovery fabric Id.
   * @return recoveryFabricId
   */
  @javax.annotation.Nullable
  public String getRecoveryFabricId() {
    return recoveryFabricId;
  }

  public void setRecoveryFabricId(String recoveryFabricId) {
    this.recoveryFabricId = recoveryFabricId;
  }


  public RecoveryPlanProperties replicationProviders(List<String> replicationProviders) {
    this.replicationProviders = replicationProviders;
    return this;
  }

  public RecoveryPlanProperties addReplicationProvidersItem(String replicationProvidersItem) {
    if (this.replicationProviders == null) {
      this.replicationProviders = new ArrayList<>();
    }
    this.replicationProviders.add(replicationProvidersItem);
    return this;
  }

  /**
   * The list of replication providers.
   * @return replicationProviders
   */
  @javax.annotation.Nullable
  public List<String> getReplicationProviders() {
    return replicationProviders;
  }

  public void setReplicationProviders(List<String> replicationProviders) {
    this.replicationProviders = replicationProviders;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecoveryPlanProperties recoveryPlanProperties = (RecoveryPlanProperties) o;
    return Objects.equals(this.allowedOperations, recoveryPlanProperties.allowedOperations) &&
        Objects.equals(this.currentScenario, recoveryPlanProperties.currentScenario) &&
        Objects.equals(this.currentScenarioStatus, recoveryPlanProperties.currentScenarioStatus) &&
        Objects.equals(this.currentScenarioStatusDescription, recoveryPlanProperties.currentScenarioStatusDescription) &&
        Objects.equals(this.failoverDeploymentModel, recoveryPlanProperties.failoverDeploymentModel) &&
        Objects.equals(this.friendlyName, recoveryPlanProperties.friendlyName) &&
        Objects.equals(this.groups, recoveryPlanProperties.groups) &&
        Objects.equals(this.lastPlannedFailoverTime, recoveryPlanProperties.lastPlannedFailoverTime) &&
        Objects.equals(this.lastTestFailoverTime, recoveryPlanProperties.lastTestFailoverTime) &&
        Objects.equals(this.lastUnplannedFailoverTime, recoveryPlanProperties.lastUnplannedFailoverTime) &&
        Objects.equals(this.primaryFabricFriendlyName, recoveryPlanProperties.primaryFabricFriendlyName) &&
        Objects.equals(this.primaryFabricId, recoveryPlanProperties.primaryFabricId) &&
        Objects.equals(this.recoveryFabricFriendlyName, recoveryPlanProperties.recoveryFabricFriendlyName) &&
        Objects.equals(this.recoveryFabricId, recoveryPlanProperties.recoveryFabricId) &&
        Objects.equals(this.replicationProviders, recoveryPlanProperties.replicationProviders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedOperations, currentScenario, currentScenarioStatus, currentScenarioStatusDescription, failoverDeploymentModel, friendlyName, groups, lastPlannedFailoverTime, lastTestFailoverTime, lastUnplannedFailoverTime, primaryFabricFriendlyName, primaryFabricId, recoveryFabricFriendlyName, recoveryFabricId, replicationProviders);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecoveryPlanProperties {\n");
    sb.append("    allowedOperations: ").append(toIndentedString(allowedOperations)).append("\n");
    sb.append("    currentScenario: ").append(toIndentedString(currentScenario)).append("\n");
    sb.append("    currentScenarioStatus: ").append(toIndentedString(currentScenarioStatus)).append("\n");
    sb.append("    currentScenarioStatusDescription: ").append(toIndentedString(currentScenarioStatusDescription)).append("\n");
    sb.append("    failoverDeploymentModel: ").append(toIndentedString(failoverDeploymentModel)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    lastPlannedFailoverTime: ").append(toIndentedString(lastPlannedFailoverTime)).append("\n");
    sb.append("    lastTestFailoverTime: ").append(toIndentedString(lastTestFailoverTime)).append("\n");
    sb.append("    lastUnplannedFailoverTime: ").append(toIndentedString(lastUnplannedFailoverTime)).append("\n");
    sb.append("    primaryFabricFriendlyName: ").append(toIndentedString(primaryFabricFriendlyName)).append("\n");
    sb.append("    primaryFabricId: ").append(toIndentedString(primaryFabricId)).append("\n");
    sb.append("    recoveryFabricFriendlyName: ").append(toIndentedString(recoveryFabricFriendlyName)).append("\n");
    sb.append("    recoveryFabricId: ").append(toIndentedString(recoveryFabricId)).append("\n");
    sb.append("    replicationProviders: ").append(toIndentedString(replicationProviders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedOperations");
    openapiFields.add("currentScenario");
    openapiFields.add("currentScenarioStatus");
    openapiFields.add("currentScenarioStatusDescription");
    openapiFields.add("failoverDeploymentModel");
    openapiFields.add("friendlyName");
    openapiFields.add("groups");
    openapiFields.add("lastPlannedFailoverTime");
    openapiFields.add("lastTestFailoverTime");
    openapiFields.add("lastUnplannedFailoverTime");
    openapiFields.add("primaryFabricFriendlyName");
    openapiFields.add("primaryFabricId");
    openapiFields.add("recoveryFabricFriendlyName");
    openapiFields.add("recoveryFabricId");
    openapiFields.add("replicationProviders");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecoveryPlanProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecoveryPlanProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecoveryPlanProperties is not found in the empty JSON string", RecoveryPlanProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecoveryPlanProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecoveryPlanProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedOperations") != null && !jsonObj.get("allowedOperations").isJsonNull() && !jsonObj.get("allowedOperations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedOperations` to be an array in the JSON string but got `%s`", jsonObj.get("allowedOperations").toString()));
      }
      // validate the optional field `currentScenario`
      if (jsonObj.get("currentScenario") != null && !jsonObj.get("currentScenario").isJsonNull()) {
        CurrentScenarioDetails.validateJsonElement(jsonObj.get("currentScenario"));
      }
      if ((jsonObj.get("currentScenarioStatus") != null && !jsonObj.get("currentScenarioStatus").isJsonNull()) && !jsonObj.get("currentScenarioStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentScenarioStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentScenarioStatus").toString()));
      }
      if ((jsonObj.get("currentScenarioStatusDescription") != null && !jsonObj.get("currentScenarioStatusDescription").isJsonNull()) && !jsonObj.get("currentScenarioStatusDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentScenarioStatusDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentScenarioStatusDescription").toString()));
      }
      if ((jsonObj.get("failoverDeploymentModel") != null && !jsonObj.get("failoverDeploymentModel").isJsonNull()) && !jsonObj.get("failoverDeploymentModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failoverDeploymentModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failoverDeploymentModel").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            RecoveryPlanGroup.validateJsonElement(jsonArraygroups.get(i));
          };
        }
      }
      if ((jsonObj.get("primaryFabricFriendlyName") != null && !jsonObj.get("primaryFabricFriendlyName").isJsonNull()) && !jsonObj.get("primaryFabricFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryFabricFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryFabricFriendlyName").toString()));
      }
      if ((jsonObj.get("primaryFabricId") != null && !jsonObj.get("primaryFabricId").isJsonNull()) && !jsonObj.get("primaryFabricId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryFabricId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryFabricId").toString()));
      }
      if ((jsonObj.get("recoveryFabricFriendlyName") != null && !jsonObj.get("recoveryFabricFriendlyName").isJsonNull()) && !jsonObj.get("recoveryFabricFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryFabricFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryFabricFriendlyName").toString()));
      }
      if ((jsonObj.get("recoveryFabricId") != null && !jsonObj.get("recoveryFabricId").isJsonNull()) && !jsonObj.get("recoveryFabricId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryFabricId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryFabricId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("replicationProviders") != null && !jsonObj.get("replicationProviders").isJsonNull() && !jsonObj.get("replicationProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationProviders` to be an array in the JSON string but got `%s`", jsonObj.get("replicationProviders").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecoveryPlanProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecoveryPlanProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecoveryPlanProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecoveryPlanProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RecoveryPlanProperties>() {
           @Override
           public void write(JsonWriter out, RecoveryPlanProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecoveryPlanProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecoveryPlanProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecoveryPlanProperties
   * @throws IOException if the JSON string is invalid with respect to RecoveryPlanProperties
   */
  public static RecoveryPlanProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecoveryPlanProperties.class);
  }

  /**
   * Convert an instance of RecoveryPlanProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

