/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MigrationProviderSpecificSettings;
import org.openapitools.client.model.VMwareCbtNicDetails;
import org.openapitools.client.model.VMwareCbtProtectedDiskDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VMwareCbt provider specific settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:47.451286-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VMwareCbtMigrationDetails extends MigrationProviderSpecificSettings {
  public static final String SERIALIZED_NAME_DATA_MOVER_RUN_AS_ACCOUNT_ID = "dataMoverRunAsAccountId";
  @SerializedName(SERIALIZED_NAME_DATA_MOVER_RUN_AS_ACCOUNT_ID)
  private String dataMoverRunAsAccountId;

  public static final String SERIALIZED_NAME_INITIAL_SEEDING_PROGRESS_PERCENTAGE = "initialSeedingProgressPercentage";
  @SerializedName(SERIALIZED_NAME_INITIAL_SEEDING_PROGRESS_PERCENTAGE)
  private Integer initialSeedingProgressPercentage;

  public static final String SERIALIZED_NAME_LAST_RECOVERY_POINT_ID = "lastRecoveryPointId";
  @SerializedName(SERIALIZED_NAME_LAST_RECOVERY_POINT_ID)
  private String lastRecoveryPointId;

  public static final String SERIALIZED_NAME_LAST_RECOVERY_POINT_RECEIVED = "lastRecoveryPointReceived";
  @SerializedName(SERIALIZED_NAME_LAST_RECOVERY_POINT_RECEIVED)
  private OffsetDateTime lastRecoveryPointReceived;

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private String licenseType;

  public static final String SERIALIZED_NAME_MIGRATION_PROGRESS_PERCENTAGE = "migrationProgressPercentage";
  @SerializedName(SERIALIZED_NAME_MIGRATION_PROGRESS_PERCENTAGE)
  private Integer migrationProgressPercentage;

  public static final String SERIALIZED_NAME_MIGRATION_RECOVERY_POINT_ID = "migrationRecoveryPointId";
  @SerializedName(SERIALIZED_NAME_MIGRATION_RECOVERY_POINT_ID)
  private String migrationRecoveryPointId;

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private String osType;

  public static final String SERIALIZED_NAME_PERFORM_AUTO_RESYNC = "performAutoResync";
  @SerializedName(SERIALIZED_NAME_PERFORM_AUTO_RESYNC)
  private String performAutoResync;

  public static final String SERIALIZED_NAME_PROTECTED_DISKS = "protectedDisks";
  @SerializedName(SERIALIZED_NAME_PROTECTED_DISKS)
  private List<VMwareCbtProtectedDiskDetails> protectedDisks = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESYNC_PROGRESS_PERCENTAGE = "resyncProgressPercentage";
  @SerializedName(SERIALIZED_NAME_RESYNC_PROGRESS_PERCENTAGE)
  private Integer resyncProgressPercentage;

  /**
   * The resync state.
   */
  @JsonAdapter(ResyncStateEnum.Adapter.class)
  public enum ResyncStateEnum {
    NONE("None"),
    
    PREPARED_FOR_RESYNCHRONIZATION("PreparedForResynchronization"),
    
    STARTED_RESYNCHRONIZATION("StartedResynchronization");

    private String value;

    ResyncStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResyncStateEnum fromValue(String value) {
      for (ResyncStateEnum b : ResyncStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResyncStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResyncStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResyncStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResyncStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResyncStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESYNC_STATE = "resyncState";
  @SerializedName(SERIALIZED_NAME_RESYNC_STATE)
  private ResyncStateEnum resyncState;

  public static final String SERIALIZED_NAME_SNAPSHOT_RUN_AS_ACCOUNT_ID = "snapshotRunAsAccountId";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_RUN_AS_ACCOUNT_ID)
  private String snapshotRunAsAccountId;

  public static final String SERIALIZED_NAME_TARGET_AVAILABILITY_SET_ID = "targetAvailabilitySetId";
  @SerializedName(SERIALIZED_NAME_TARGET_AVAILABILITY_SET_ID)
  private String targetAvailabilitySetId;

  public static final String SERIALIZED_NAME_TARGET_BOOT_DIAGNOSTICS_STORAGE_ACCOUNT_ID = "targetBootDiagnosticsStorageAccountId";
  @SerializedName(SERIALIZED_NAME_TARGET_BOOT_DIAGNOSTICS_STORAGE_ACCOUNT_ID)
  private String targetBootDiagnosticsStorageAccountId;

  public static final String SERIALIZED_NAME_TARGET_LOCATION = "targetLocation";
  @SerializedName(SERIALIZED_NAME_TARGET_LOCATION)
  private String targetLocation;

  public static final String SERIALIZED_NAME_TARGET_NETWORK_ID = "targetNetworkId";
  @SerializedName(SERIALIZED_NAME_TARGET_NETWORK_ID)
  private String targetNetworkId;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_GROUP_ID = "targetResourceGroupId";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_GROUP_ID)
  private String targetResourceGroupId;

  public static final String SERIALIZED_NAME_TARGET_VM_NAME = "targetVmName";
  @SerializedName(SERIALIZED_NAME_TARGET_VM_NAME)
  private String targetVmName;

  public static final String SERIALIZED_NAME_TARGET_VM_SIZE = "targetVmSize";
  @SerializedName(SERIALIZED_NAME_TARGET_VM_SIZE)
  private String targetVmSize;

  public static final String SERIALIZED_NAME_VM_NICS = "vmNics";
  @SerializedName(SERIALIZED_NAME_VM_NICS)
  private List<VMwareCbtNicDetails> vmNics = new ArrayList<>();

  public static final String SERIALIZED_NAME_VMWARE_MACHINE_ID = "vmwareMachineId";
  @SerializedName(SERIALIZED_NAME_VMWARE_MACHINE_ID)
  private String vmwareMachineId;

  public VMwareCbtMigrationDetails() {
    this.instanceType = this.getClass().getSimpleName();
  }

  public VMwareCbtMigrationDetails(
     String dataMoverRunAsAccountId, 
     Integer initialSeedingProgressPercentage, 
     String lastRecoveryPointId, 
     OffsetDateTime lastRecoveryPointReceived, 
     Integer migrationProgressPercentage, 
     String migrationRecoveryPointId, 
     String osType, 
     Integer resyncProgressPercentage, 
     ResyncStateEnum resyncState, 
     String snapshotRunAsAccountId, 
     String targetLocation, 
     String vmwareMachineId, 
     String instanceType
  ) {
    this();
    this.dataMoverRunAsAccountId = dataMoverRunAsAccountId;
    this.initialSeedingProgressPercentage = initialSeedingProgressPercentage;
    this.lastRecoveryPointId = lastRecoveryPointId;
    this.lastRecoveryPointReceived = lastRecoveryPointReceived;
    this.migrationProgressPercentage = migrationProgressPercentage;
    this.migrationRecoveryPointId = migrationRecoveryPointId;
    this.osType = osType;
    this.resyncProgressPercentage = resyncProgressPercentage;
    this.resyncState = resyncState;
    this.snapshotRunAsAccountId = snapshotRunAsAccountId;
    this.targetLocation = targetLocation;
    this.vmwareMachineId = vmwareMachineId;
    this.instanceType = instanceType;
  }

  /**
   * The data mover RunAs account Id.
   * @return dataMoverRunAsAccountId
   */
  @javax.annotation.Nullable
  public String getDataMoverRunAsAccountId() {
    return dataMoverRunAsAccountId;
  }



  /**
   * The initial seeding progress percentage.
   * @return initialSeedingProgressPercentage
   */
  @javax.annotation.Nullable
  public Integer getInitialSeedingProgressPercentage() {
    return initialSeedingProgressPercentage;
  }



  /**
   * The last recovery point Id.
   * @return lastRecoveryPointId
   */
  @javax.annotation.Nullable
  public String getLastRecoveryPointId() {
    return lastRecoveryPointId;
  }



  /**
   * The last recovery point received time.
   * @return lastRecoveryPointReceived
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastRecoveryPointReceived() {
    return lastRecoveryPointReceived;
  }



  public VMwareCbtMigrationDetails licenseType(String licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * License Type of the VM to be used.
   * @return licenseType
   */
  @javax.annotation.Nullable
  public String getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(String licenseType) {
    this.licenseType = licenseType;
  }


  /**
   * The migration progress percentage.
   * @return migrationProgressPercentage
   */
  @javax.annotation.Nullable
  public Integer getMigrationProgressPercentage() {
    return migrationProgressPercentage;
  }



  /**
   * The recovery point Id to which the VM was migrated.
   * @return migrationRecoveryPointId
   */
  @javax.annotation.Nullable
  public String getMigrationRecoveryPointId() {
    return migrationRecoveryPointId;
  }



  /**
   * The type of the OS on the VM.
   * @return osType
   */
  @javax.annotation.Nullable
  public String getOsType() {
    return osType;
  }



  public VMwareCbtMigrationDetails performAutoResync(String performAutoResync) {
    this.performAutoResync = performAutoResync;
    return this;
  }

  /**
   * A value indicating whether auto resync is to be done.
   * @return performAutoResync
   */
  @javax.annotation.Nullable
  public String getPerformAutoResync() {
    return performAutoResync;
  }

  public void setPerformAutoResync(String performAutoResync) {
    this.performAutoResync = performAutoResync;
  }


  public VMwareCbtMigrationDetails protectedDisks(List<VMwareCbtProtectedDiskDetails> protectedDisks) {
    this.protectedDisks = protectedDisks;
    return this;
  }

  public VMwareCbtMigrationDetails addProtectedDisksItem(VMwareCbtProtectedDiskDetails protectedDisksItem) {
    if (this.protectedDisks == null) {
      this.protectedDisks = new ArrayList<>();
    }
    this.protectedDisks.add(protectedDisksItem);
    return this;
  }

  /**
   * The list of protected disks.
   * @return protectedDisks
   */
  @javax.annotation.Nullable
  public List<VMwareCbtProtectedDiskDetails> getProtectedDisks() {
    return protectedDisks;
  }

  public void setProtectedDisks(List<VMwareCbtProtectedDiskDetails> protectedDisks) {
    this.protectedDisks = protectedDisks;
  }


  /**
   * The resync progress percentage.
   * @return resyncProgressPercentage
   */
  @javax.annotation.Nullable
  public Integer getResyncProgressPercentage() {
    return resyncProgressPercentage;
  }



  /**
   * The resync state.
   * @return resyncState
   */
  @javax.annotation.Nullable
  public ResyncStateEnum getResyncState() {
    return resyncState;
  }



  /**
   * The snapshot RunAs account Id.
   * @return snapshotRunAsAccountId
   */
  @javax.annotation.Nullable
  public String getSnapshotRunAsAccountId() {
    return snapshotRunAsAccountId;
  }



  public VMwareCbtMigrationDetails targetAvailabilitySetId(String targetAvailabilitySetId) {
    this.targetAvailabilitySetId = targetAvailabilitySetId;
    return this;
  }

  /**
   * The target availability set Id.
   * @return targetAvailabilitySetId
   */
  @javax.annotation.Nullable
  public String getTargetAvailabilitySetId() {
    return targetAvailabilitySetId;
  }

  public void setTargetAvailabilitySetId(String targetAvailabilitySetId) {
    this.targetAvailabilitySetId = targetAvailabilitySetId;
  }


  public VMwareCbtMigrationDetails targetBootDiagnosticsStorageAccountId(String targetBootDiagnosticsStorageAccountId) {
    this.targetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
    return this;
  }

  /**
   * The target boot diagnostics storage account ARM Id.
   * @return targetBootDiagnosticsStorageAccountId
   */
  @javax.annotation.Nullable
  public String getTargetBootDiagnosticsStorageAccountId() {
    return targetBootDiagnosticsStorageAccountId;
  }

  public void setTargetBootDiagnosticsStorageAccountId(String targetBootDiagnosticsStorageAccountId) {
    this.targetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
  }


  /**
   * The target location.
   * @return targetLocation
   */
  @javax.annotation.Nullable
  public String getTargetLocation() {
    return targetLocation;
  }



  public VMwareCbtMigrationDetails targetNetworkId(String targetNetworkId) {
    this.targetNetworkId = targetNetworkId;
    return this;
  }

  /**
   * The target network Id.
   * @return targetNetworkId
   */
  @javax.annotation.Nullable
  public String getTargetNetworkId() {
    return targetNetworkId;
  }

  public void setTargetNetworkId(String targetNetworkId) {
    this.targetNetworkId = targetNetworkId;
  }


  public VMwareCbtMigrationDetails targetResourceGroupId(String targetResourceGroupId) {
    this.targetResourceGroupId = targetResourceGroupId;
    return this;
  }

  /**
   * The target resource group Id.
   * @return targetResourceGroupId
   */
  @javax.annotation.Nullable
  public String getTargetResourceGroupId() {
    return targetResourceGroupId;
  }

  public void setTargetResourceGroupId(String targetResourceGroupId) {
    this.targetResourceGroupId = targetResourceGroupId;
  }


  public VMwareCbtMigrationDetails targetVmName(String targetVmName) {
    this.targetVmName = targetVmName;
    return this;
  }

  /**
   * Target VM name.
   * @return targetVmName
   */
  @javax.annotation.Nullable
  public String getTargetVmName() {
    return targetVmName;
  }

  public void setTargetVmName(String targetVmName) {
    this.targetVmName = targetVmName;
  }


  public VMwareCbtMigrationDetails targetVmSize(String targetVmSize) {
    this.targetVmSize = targetVmSize;
    return this;
  }

  /**
   * The target VM size.
   * @return targetVmSize
   */
  @javax.annotation.Nullable
  public String getTargetVmSize() {
    return targetVmSize;
  }

  public void setTargetVmSize(String targetVmSize) {
    this.targetVmSize = targetVmSize;
  }


  public VMwareCbtMigrationDetails vmNics(List<VMwareCbtNicDetails> vmNics) {
    this.vmNics = vmNics;
    return this;
  }

  public VMwareCbtMigrationDetails addVmNicsItem(VMwareCbtNicDetails vmNicsItem) {
    if (this.vmNics == null) {
      this.vmNics = new ArrayList<>();
    }
    this.vmNics.add(vmNicsItem);
    return this;
  }

  /**
   * The network details.
   * @return vmNics
   */
  @javax.annotation.Nullable
  public List<VMwareCbtNicDetails> getVmNics() {
    return vmNics;
  }

  public void setVmNics(List<VMwareCbtNicDetails> vmNics) {
    this.vmNics = vmNics;
  }


  /**
   * The ARM Id of the VM discovered in VMware.
   * @return vmwareMachineId
   */
  @javax.annotation.Nullable
  public String getVmwareMachineId() {
    return vmwareMachineId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VMwareCbtMigrationDetails vmwareCbtMigrationDetails = (VMwareCbtMigrationDetails) o;
    return Objects.equals(this.dataMoverRunAsAccountId, vmwareCbtMigrationDetails.dataMoverRunAsAccountId) &&
        Objects.equals(this.initialSeedingProgressPercentage, vmwareCbtMigrationDetails.initialSeedingProgressPercentage) &&
        Objects.equals(this.lastRecoveryPointId, vmwareCbtMigrationDetails.lastRecoveryPointId) &&
        Objects.equals(this.lastRecoveryPointReceived, vmwareCbtMigrationDetails.lastRecoveryPointReceived) &&
        Objects.equals(this.licenseType, vmwareCbtMigrationDetails.licenseType) &&
        Objects.equals(this.migrationProgressPercentage, vmwareCbtMigrationDetails.migrationProgressPercentage) &&
        Objects.equals(this.migrationRecoveryPointId, vmwareCbtMigrationDetails.migrationRecoveryPointId) &&
        Objects.equals(this.osType, vmwareCbtMigrationDetails.osType) &&
        Objects.equals(this.performAutoResync, vmwareCbtMigrationDetails.performAutoResync) &&
        Objects.equals(this.protectedDisks, vmwareCbtMigrationDetails.protectedDisks) &&
        Objects.equals(this.resyncProgressPercentage, vmwareCbtMigrationDetails.resyncProgressPercentage) &&
        Objects.equals(this.resyncState, vmwareCbtMigrationDetails.resyncState) &&
        Objects.equals(this.snapshotRunAsAccountId, vmwareCbtMigrationDetails.snapshotRunAsAccountId) &&
        Objects.equals(this.targetAvailabilitySetId, vmwareCbtMigrationDetails.targetAvailabilitySetId) &&
        Objects.equals(this.targetBootDiagnosticsStorageAccountId, vmwareCbtMigrationDetails.targetBootDiagnosticsStorageAccountId) &&
        Objects.equals(this.targetLocation, vmwareCbtMigrationDetails.targetLocation) &&
        Objects.equals(this.targetNetworkId, vmwareCbtMigrationDetails.targetNetworkId) &&
        Objects.equals(this.targetResourceGroupId, vmwareCbtMigrationDetails.targetResourceGroupId) &&
        Objects.equals(this.targetVmName, vmwareCbtMigrationDetails.targetVmName) &&
        Objects.equals(this.targetVmSize, vmwareCbtMigrationDetails.targetVmSize) &&
        Objects.equals(this.vmNics, vmwareCbtMigrationDetails.vmNics) &&
        Objects.equals(this.vmwareMachineId, vmwareCbtMigrationDetails.vmwareMachineId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataMoverRunAsAccountId, initialSeedingProgressPercentage, lastRecoveryPointId, lastRecoveryPointReceived, licenseType, migrationProgressPercentage, migrationRecoveryPointId, osType, performAutoResync, protectedDisks, resyncProgressPercentage, resyncState, snapshotRunAsAccountId, targetAvailabilitySetId, targetBootDiagnosticsStorageAccountId, targetLocation, targetNetworkId, targetResourceGroupId, targetVmName, targetVmSize, vmNics, vmwareMachineId, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VMwareCbtMigrationDetails {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    dataMoverRunAsAccountId: ").append(toIndentedString(dataMoverRunAsAccountId)).append("\n");
    sb.append("    initialSeedingProgressPercentage: ").append(toIndentedString(initialSeedingProgressPercentage)).append("\n");
    sb.append("    lastRecoveryPointId: ").append(toIndentedString(lastRecoveryPointId)).append("\n");
    sb.append("    lastRecoveryPointReceived: ").append(toIndentedString(lastRecoveryPointReceived)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    migrationProgressPercentage: ").append(toIndentedString(migrationProgressPercentage)).append("\n");
    sb.append("    migrationRecoveryPointId: ").append(toIndentedString(migrationRecoveryPointId)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    performAutoResync: ").append(toIndentedString(performAutoResync)).append("\n");
    sb.append("    protectedDisks: ").append(toIndentedString(protectedDisks)).append("\n");
    sb.append("    resyncProgressPercentage: ").append(toIndentedString(resyncProgressPercentage)).append("\n");
    sb.append("    resyncState: ").append(toIndentedString(resyncState)).append("\n");
    sb.append("    snapshotRunAsAccountId: ").append(toIndentedString(snapshotRunAsAccountId)).append("\n");
    sb.append("    targetAvailabilitySetId: ").append(toIndentedString(targetAvailabilitySetId)).append("\n");
    sb.append("    targetBootDiagnosticsStorageAccountId: ").append(toIndentedString(targetBootDiagnosticsStorageAccountId)).append("\n");
    sb.append("    targetLocation: ").append(toIndentedString(targetLocation)).append("\n");
    sb.append("    targetNetworkId: ").append(toIndentedString(targetNetworkId)).append("\n");
    sb.append("    targetResourceGroupId: ").append(toIndentedString(targetResourceGroupId)).append("\n");
    sb.append("    targetVmName: ").append(toIndentedString(targetVmName)).append("\n");
    sb.append("    targetVmSize: ").append(toIndentedString(targetVmSize)).append("\n");
    sb.append("    vmNics: ").append(toIndentedString(vmNics)).append("\n");
    sb.append("    vmwareMachineId: ").append(toIndentedString(vmwareMachineId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VMwareCbtMigrationDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VMwareCbtMigrationDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VMwareCbtMigrationDetails is not found in the empty JSON string", VMwareCbtMigrationDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VMwareCbtMigrationDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VMwareCbtMigrationDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VMwareCbtMigrationDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VMwareCbtMigrationDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VMwareCbtMigrationDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VMwareCbtMigrationDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VMwareCbtMigrationDetails>() {
           @Override
           public void write(JsonWriter out, VMwareCbtMigrationDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VMwareCbtMigrationDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VMwareCbtMigrationDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VMwareCbtMigrationDetails
   * @throws IOException if the JSON string is invalid with respect to VMwareCbtMigrationDetails
   */
  public static VMwareCbtMigrationDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VMwareCbtMigrationDetails.class);
  }

  /**
   * Convert an instance of VMwareCbtMigrationDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

