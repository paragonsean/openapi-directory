/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateRecoveryPlanInput;
import org.openapitools.client.model.RecoveryPlan;
import org.openapitools.client.model.RecoveryPlanCollection;
import org.openapitools.client.model.RecoveryPlanPlannedFailoverInput;
import org.openapitools.client.model.RecoveryPlanTestFailoverCleanupInput;
import org.openapitools.client.model.RecoveryPlanTestFailoverInput;
import org.openapitools.client.model.RecoveryPlanUnplannedFailoverInput;
import org.openapitools.client.model.UpdateRecoveryPlanInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReplicationRecoveryPlansApi
 */
@Disabled
public class ReplicationRecoveryPlansApiTest {

    private final ReplicationRecoveryPlansApi api = new ReplicationRecoveryPlansApi();

    /**
     * Creates a recovery plan with the given details.
     *
     * The operation to create a recovery plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationRecoveryPlansCreateTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String recoveryPlanName = null;
        CreateRecoveryPlanInput input = null;
        RecoveryPlan response = api.replicationRecoveryPlansCreate(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input);
        // TODO: test validations
    }

    /**
     * Deletes the specified recovery plan.
     *
     * Delete a recovery plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationRecoveryPlansDeleteTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String recoveryPlanName = null;
        api.replicationRecoveryPlansDelete(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName);
        // TODO: test validations
    }

    /**
     * Execute commit failover of the recovery plan.
     *
     * The operation to commit the fail over of a recovery plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationRecoveryPlansFailoverCommitTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String recoveryPlanName = null;
        RecoveryPlan response = api.replicationRecoveryPlansFailoverCommit(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName);
        // TODO: test validations
    }

    /**
     * Gets the requested recovery plan.
     *
     * Gets the details of the recovery plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationRecoveryPlansGetTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String recoveryPlanName = null;
        RecoveryPlan response = api.replicationRecoveryPlansGet(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName);
        // TODO: test validations
    }

    /**
     * Gets the list of recovery plans.
     *
     * Lists the recovery plans in the vault.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationRecoveryPlansListTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        RecoveryPlanCollection response = api.replicationRecoveryPlansList(apiVersion, resourceName, resourceGroupName, subscriptionId);
        // TODO: test validations
    }

    /**
     * Execute planned failover of the recovery plan.
     *
     * The operation to start the planned failover of a recovery plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationRecoveryPlansPlannedFailoverTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String recoveryPlanName = null;
        RecoveryPlanPlannedFailoverInput input = null;
        RecoveryPlan response = api.replicationRecoveryPlansPlannedFailover(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input);
        // TODO: test validations
    }

    /**
     * Execute reprotect of the recovery plan.
     *
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationRecoveryPlansReprotectTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String recoveryPlanName = null;
        RecoveryPlan response = api.replicationRecoveryPlansReprotect(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName);
        // TODO: test validations
    }

    /**
     * Execute test failover of the recovery plan.
     *
     * The operation to start the test failover of a recovery plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationRecoveryPlansTestFailoverTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String recoveryPlanName = null;
        RecoveryPlanTestFailoverInput input = null;
        RecoveryPlan response = api.replicationRecoveryPlansTestFailover(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input);
        // TODO: test validations
    }

    /**
     * Execute test failover cleanup of the recovery plan.
     *
     * The operation to cleanup test failover of a recovery plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationRecoveryPlansTestFailoverCleanupTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String recoveryPlanName = null;
        RecoveryPlanTestFailoverCleanupInput input = null;
        RecoveryPlan response = api.replicationRecoveryPlansTestFailoverCleanup(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input);
        // TODO: test validations
    }

    /**
     * Execute unplanned failover of the recovery plan.
     *
     * The operation to start the failover of a recovery plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationRecoveryPlansUnplannedFailoverTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String recoveryPlanName = null;
        RecoveryPlanUnplannedFailoverInput input = null;
        RecoveryPlan response = api.replicationRecoveryPlansUnplannedFailover(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input);
        // TODO: test validations
    }

    /**
     * Updates the given recovery plan.
     *
     * The operation to update a recovery plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicationRecoveryPlansUpdateTest() throws ApiException {
        String apiVersion = null;
        String resourceName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String recoveryPlanName = null;
        UpdateRecoveryPlanInput input = null;
        RecoveryPlan response = api.replicationRecoveryPlansUpdate(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input);
        // TODO: test validations
    }

}
