/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateRecoveryPlanInput from '../model/CreateRecoveryPlanInput';
import RecoveryPlan from '../model/RecoveryPlan';
import RecoveryPlanCollection from '../model/RecoveryPlanCollection';
import RecoveryPlanPlannedFailoverInput from '../model/RecoveryPlanPlannedFailoverInput';
import RecoveryPlanTestFailoverCleanupInput from '../model/RecoveryPlanTestFailoverCleanupInput';
import RecoveryPlanTestFailoverInput from '../model/RecoveryPlanTestFailoverInput';
import RecoveryPlanUnplannedFailoverInput from '../model/RecoveryPlanUnplannedFailoverInput';
import UpdateRecoveryPlanInput from '../model/UpdateRecoveryPlanInput';

/**
* ReplicationRecoveryPlans service.
* @module api/ReplicationRecoveryPlansApi
* @version 2018-01-10
*/
export default class ReplicationRecoveryPlansApi {

    /**
    * Constructs a new ReplicationRecoveryPlansApi. 
    * @alias module:api/ReplicationRecoveryPlansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the replicationRecoveryPlansCreate operation.
     * @callback module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a recovery plan with the given details.
     * The operation to create a recovery plan.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} recoveryPlanName Recovery plan name.
     * @param {module:model/CreateRecoveryPlanInput} input Recovery Plan creation input.
     * @param {module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryPlan}
     */
    replicationRecoveryPlansCreate(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, callback) {
      let postBody = input;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansCreate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansCreate");
      }
      // verify the required parameter 'recoveryPlanName' is set
      if (recoveryPlanName === undefined || recoveryPlanName === null) {
        throw new Error("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansCreate");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling replicationRecoveryPlansCreate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'recoveryPlanName': recoveryPlanName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecoveryPlan;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryPlansDelete operation.
     * @callback module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified recovery plan.
     * Delete a recovery plan.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} recoveryPlanName Recovery plan name.
     * @param {module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicationRecoveryPlansDelete(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansDelete");
      }
      // verify the required parameter 'recoveryPlanName' is set
      if (recoveryPlanName === undefined || recoveryPlanName === null) {
        throw new Error("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansDelete");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'recoveryPlanName': recoveryPlanName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryPlansFailoverCommit operation.
     * @callback module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansFailoverCommitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute commit failover of the recovery plan.
     * The operation to commit the fail over of a recovery plan.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} recoveryPlanName Recovery plan name.
     * @param {module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansFailoverCommitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryPlan}
     */
    replicationRecoveryPlansFailoverCommit(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansFailoverCommit");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansFailoverCommit");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansFailoverCommit");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansFailoverCommit");
      }
      // verify the required parameter 'recoveryPlanName' is set
      if (recoveryPlanName === undefined || recoveryPlanName === null) {
        throw new Error("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansFailoverCommit");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'recoveryPlanName': recoveryPlanName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecoveryPlan;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/failoverCommit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryPlansGet operation.
     * @callback module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the requested recovery plan.
     * Gets the details of the recovery plan.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} recoveryPlanName Name of the recovery plan.
     * @param {module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryPlan}
     */
    replicationRecoveryPlansGet(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansGet");
      }
      // verify the required parameter 'recoveryPlanName' is set
      if (recoveryPlanName === undefined || recoveryPlanName === null) {
        throw new Error("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansGet");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'recoveryPlanName': recoveryPlanName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecoveryPlan;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryPlansList operation.
     * @callback module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryPlanCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of recovery plans.
     * Lists the recovery plans in the vault.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryPlanCollection}
     */
    replicationRecoveryPlansList(apiVersion, resourceName, resourceGroupName, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansList");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansList");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecoveryPlanCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryPlansPlannedFailover operation.
     * @callback module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansPlannedFailoverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute planned failover of the recovery plan.
     * The operation to start the planned failover of a recovery plan.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} recoveryPlanName Recovery plan name.
     * @param {module:model/RecoveryPlanPlannedFailoverInput} input Failover input.
     * @param {module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansPlannedFailoverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryPlan}
     */
    replicationRecoveryPlansPlannedFailover(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, callback) {
      let postBody = input;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansPlannedFailover");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansPlannedFailover");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansPlannedFailover");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansPlannedFailover");
      }
      // verify the required parameter 'recoveryPlanName' is set
      if (recoveryPlanName === undefined || recoveryPlanName === null) {
        throw new Error("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansPlannedFailover");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling replicationRecoveryPlansPlannedFailover");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'recoveryPlanName': recoveryPlanName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecoveryPlan;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/plannedFailover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryPlansReprotect operation.
     * @callback module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansReprotectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute reprotect of the recovery plan.
     * The operation to reprotect(reverse replicate) a recovery plan.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} recoveryPlanName Recovery plan name.
     * @param {module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansReprotectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryPlan}
     */
    replicationRecoveryPlansReprotect(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansReprotect");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansReprotect");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansReprotect");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansReprotect");
      }
      // verify the required parameter 'recoveryPlanName' is set
      if (recoveryPlanName === undefined || recoveryPlanName === null) {
        throw new Error("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansReprotect");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'recoveryPlanName': recoveryPlanName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecoveryPlan;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/reProtect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryPlansTestFailover operation.
     * @callback module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansTestFailoverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute test failover of the recovery plan.
     * The operation to start the test failover of a recovery plan.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} recoveryPlanName Recovery plan name.
     * @param {module:model/RecoveryPlanTestFailoverInput} input Failover input.
     * @param {module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansTestFailoverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryPlan}
     */
    replicationRecoveryPlansTestFailover(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, callback) {
      let postBody = input;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansTestFailover");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansTestFailover");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansTestFailover");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansTestFailover");
      }
      // verify the required parameter 'recoveryPlanName' is set
      if (recoveryPlanName === undefined || recoveryPlanName === null) {
        throw new Error("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansTestFailover");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling replicationRecoveryPlansTestFailover");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'recoveryPlanName': recoveryPlanName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecoveryPlan;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryPlansTestFailoverCleanup operation.
     * @callback module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansTestFailoverCleanupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute test failover cleanup of the recovery plan.
     * The operation to cleanup test failover of a recovery plan.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} recoveryPlanName Recovery plan name.
     * @param {module:model/RecoveryPlanTestFailoverCleanupInput} input Test failover cleanup input.
     * @param {module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansTestFailoverCleanupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryPlan}
     */
    replicationRecoveryPlansTestFailoverCleanup(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, callback) {
      let postBody = input;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansTestFailoverCleanup");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansTestFailoverCleanup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansTestFailoverCleanup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansTestFailoverCleanup");
      }
      // verify the required parameter 'recoveryPlanName' is set
      if (recoveryPlanName === undefined || recoveryPlanName === null) {
        throw new Error("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansTestFailoverCleanup");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling replicationRecoveryPlansTestFailoverCleanup");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'recoveryPlanName': recoveryPlanName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecoveryPlan;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailoverCleanup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryPlansUnplannedFailover operation.
     * @callback module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansUnplannedFailoverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute unplanned failover of the recovery plan.
     * The operation to start the failover of a recovery plan.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} recoveryPlanName Recovery plan name.
     * @param {module:model/RecoveryPlanUnplannedFailoverInput} input Failover input.
     * @param {module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansUnplannedFailoverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryPlan}
     */
    replicationRecoveryPlansUnplannedFailover(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, callback) {
      let postBody = input;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansUnplannedFailover");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansUnplannedFailover");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansUnplannedFailover");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansUnplannedFailover");
      }
      // verify the required parameter 'recoveryPlanName' is set
      if (recoveryPlanName === undefined || recoveryPlanName === null) {
        throw new Error("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansUnplannedFailover");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling replicationRecoveryPlansUnplannedFailover");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'recoveryPlanName': recoveryPlanName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecoveryPlan;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/unplannedFailover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryPlansUpdate operation.
     * @callback module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} recoveryPlanName Recovery plan name.
     * @param {module:model/UpdateRecoveryPlanInput} input Update recovery plan input
     * @param {module:api/ReplicationRecoveryPlansApi~replicationRecoveryPlansUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryPlan}
     */
    replicationRecoveryPlansUpdate(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, callback) {
      let postBody = input;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansUpdate");
      }
      // verify the required parameter 'recoveryPlanName' is set
      if (recoveryPlanName === undefined || recoveryPlanName === null) {
        throw new Error("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansUpdate");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling replicationRecoveryPlansUpdate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'recoveryPlanName': recoveryPlanName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecoveryPlan;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
