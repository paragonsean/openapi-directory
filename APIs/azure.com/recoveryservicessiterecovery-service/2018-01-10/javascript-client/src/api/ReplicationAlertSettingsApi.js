/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Alert from '../model/Alert';
import AlertCollection from '../model/AlertCollection';
import ConfigureAlertRequest from '../model/ConfigureAlertRequest';

/**
* ReplicationAlertSettings service.
* @module api/ReplicationAlertSettingsApi
* @version 2018-01-10
*/
export default class ReplicationAlertSettingsApi {

    /**
    * Constructs a new ReplicationAlertSettingsApi. 
    * @alias module:api/ReplicationAlertSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the replicationAlertSettingsCreate operation.
     * @callback module:api/ReplicationAlertSettingsApi~replicationAlertSettingsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures email notifications for this vault.
     * Create or update an email notification(alert) configuration.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} alertSettingName The name of the email notification(alert) configuration.
     * @param {module:model/ConfigureAlertRequest} request The input to configure the email notification(alert).
     * @param {module:api/ReplicationAlertSettingsApi~replicationAlertSettingsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    replicationAlertSettingsCreate(apiVersion, resourceName, resourceGroupName, subscriptionId, alertSettingName, request, callback) {
      let postBody = request;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationAlertSettingsCreate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationAlertSettingsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationAlertSettingsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationAlertSettingsCreate");
      }
      // verify the required parameter 'alertSettingName' is set
      if (alertSettingName === undefined || alertSettingName === null) {
        throw new Error("Missing the required parameter 'alertSettingName' when calling replicationAlertSettingsCreate");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling replicationAlertSettingsCreate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'alertSettingName': alertSettingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationAlertSettings/{alertSettingName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationAlertSettingsGet operation.
     * @callback module:api/ReplicationAlertSettingsApi~replicationAlertSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an email notification(alert) configuration.
     * Gets the details of the specified email notification(alert) configuration.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} alertSettingName The name of the email notification configuration.
     * @param {module:api/ReplicationAlertSettingsApi~replicationAlertSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    replicationAlertSettingsGet(apiVersion, resourceName, resourceGroupName, subscriptionId, alertSettingName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationAlertSettingsGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationAlertSettingsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationAlertSettingsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationAlertSettingsGet");
      }
      // verify the required parameter 'alertSettingName' is set
      if (alertSettingName === undefined || alertSettingName === null) {
        throw new Error("Missing the required parameter 'alertSettingName' when calling replicationAlertSettingsGet");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'alertSettingName': alertSettingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationAlertSettings/{alertSettingName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationAlertSettingsList operation.
     * @callback module:api/ReplicationAlertSettingsApi~replicationAlertSettingsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of configured email notification(alert) configurations.
     * Gets the list of email notification(alert) configurations for the vault.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {module:api/ReplicationAlertSettingsApi~replicationAlertSettingsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertCollection}
     */
    replicationAlertSettingsList(apiVersion, resourceName, resourceGroupName, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationAlertSettingsList");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationAlertSettingsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationAlertSettingsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationAlertSettingsList");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationAlertSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
