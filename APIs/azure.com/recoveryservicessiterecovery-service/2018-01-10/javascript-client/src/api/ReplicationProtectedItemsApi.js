/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplyRecoveryPointInput from '../model/ApplyRecoveryPointInput';
import DisableProtectionInput from '../model/DisableProtectionInput';
import EnableProtectionInput from '../model/EnableProtectionInput';
import PlannedFailoverInput from '../model/PlannedFailoverInput';
import ReplicationProtectedItem from '../model/ReplicationProtectedItem';
import ReplicationProtectedItemCollection from '../model/ReplicationProtectedItemCollection';
import ReverseReplicationInput from '../model/ReverseReplicationInput';
import TestFailoverCleanupInput from '../model/TestFailoverCleanupInput';
import TestFailoverInput from '../model/TestFailoverInput';
import UnplannedFailoverInput from '../model/UnplannedFailoverInput';
import UpdateMobilityServiceRequest from '../model/UpdateMobilityServiceRequest';
import UpdateReplicationProtectedItemInput from '../model/UpdateReplicationProtectedItemInput';

/**
* ReplicationProtectedItems service.
* @module api/ReplicationProtectedItemsApi
* @version 2018-01-10
*/
export default class ReplicationProtectedItemsApi {

    /**
    * Constructs a new ReplicationProtectedItemsApi. 
    * @alias module:api/ReplicationProtectedItemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the replicationProtectedItemsApplyRecoveryPoint operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsApplyRecoveryPointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName The ARM fabric name.
     * @param {String} protectionContainerName The protection container name.
     * @param {String} replicatedProtectedItemName The replicated protected item's name.
     * @param {module:model/ApplyRecoveryPointInput} applyRecoveryPointInput The ApplyRecoveryPointInput.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsApplyRecoveryPointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItem}
     */
    replicationProtectedItemsApplyRecoveryPoint(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput, callback) {
      let postBody = applyRecoveryPointInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsApplyRecoveryPoint");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsApplyRecoveryPoint");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsApplyRecoveryPoint");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsApplyRecoveryPoint");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsApplyRecoveryPoint");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsApplyRecoveryPoint");
      }
      // verify the required parameter 'replicatedProtectedItemName' is set
      if (replicatedProtectedItemName === undefined || replicatedProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsApplyRecoveryPoint");
      }
      // verify the required parameter 'applyRecoveryPointInput' is set
      if (applyRecoveryPointInput === undefined || applyRecoveryPointInput === null) {
        throw new Error("Missing the required parameter 'applyRecoveryPointInput' when calling replicationProtectedItemsApplyRecoveryPoint");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicatedProtectedItemName': replicatedProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/applyRecoveryPoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsCreate operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Name of the fabric.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} replicatedProtectedItemName A name for the replication protected item.
     * @param {module:model/EnableProtectionInput} input Enable Protection Input.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItem}
     */
    replicationProtectedItemsCreate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, input, callback) {
      let postBody = input;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsCreate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsCreate");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsCreate");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsCreate");
      }
      // verify the required parameter 'replicatedProtectedItemName' is set
      if (replicatedProtectedItemName === undefined || replicatedProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsCreate");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling replicationProtectedItemsCreate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicatedProtectedItemName': replicatedProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsDelete operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} replicatedProtectedItemName Replication protected item name.
     * @param {module:model/DisableProtectionInput} disableProtectionInput Disable protection input.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicationProtectedItemsDelete(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput, callback) {
      let postBody = disableProtectionInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsDelete");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsDelete");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsDelete");
      }
      // verify the required parameter 'replicatedProtectedItemName' is set
      if (replicatedProtectedItemName === undefined || replicatedProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsDelete");
      }
      // verify the required parameter 'disableProtectionInput' is set
      if (disableProtectionInput === undefined || disableProtectionInput === null) {
        throw new Error("Missing the required parameter 'disableProtectionInput' when calling replicationProtectedItemsDelete");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicatedProtectedItemName': replicatedProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsFailoverCommit operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsFailoverCommitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute commit failover
     * Operation to commit the failover of the replication protected item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Unique fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} replicatedProtectedItemName Replication protected item name.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsFailoverCommitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItem}
     */
    replicationProtectedItemsFailoverCommit(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsFailoverCommit");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsFailoverCommit");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsFailoverCommit");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsFailoverCommit");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsFailoverCommit");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsFailoverCommit");
      }
      // verify the required parameter 'replicatedProtectedItemName' is set
      if (replicatedProtectedItemName === undefined || replicatedProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsFailoverCommit");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicatedProtectedItemName': replicatedProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/failoverCommit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsGet operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of a Replication protected item.
     * Gets the details of an ASR replication protected item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric unique name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} replicatedProtectedItemName Replication protected item name.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItem}
     */
    replicationProtectedItemsGet(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsGet");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsGet");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsGet");
      }
      // verify the required parameter 'replicatedProtectedItemName' is set
      if (replicatedProtectedItemName === undefined || replicatedProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsGet");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicatedProtectedItemName': replicatedProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsList operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItemCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] The pagination token. Possible values: \"FabricId\" or \"FabricId_CloudId\" or null
     * @param {String} [filter] OData filter options.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItemCollection}
     */
    replicationProtectedItemsList(apiVersion, resourceName, resourceGroupName, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsList");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsList");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        'skipToken': opts['skipToken'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItemCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectedItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsListByReplicationProtectionContainers operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsListByReplicationProtectionContainersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItemCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of Replication protected items.
     * Gets the list of ASR replication protected items in the protection container.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsListByReplicationProtectionContainersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItemCollection}
     */
    replicationProtectedItemsListByReplicationProtectionContainers(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsListByReplicationProtectionContainers");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItemCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsPlannedFailover operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsPlannedFailoverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute planned failover
     * Operation to initiate a planned failover of the replication protected item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Unique fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} replicatedProtectedItemName Replication protected item name.
     * @param {module:model/PlannedFailoverInput} failoverInput Disable protection input.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsPlannedFailoverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItem}
     */
    replicationProtectedItemsPlannedFailover(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, callback) {
      let postBody = failoverInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsPlannedFailover");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsPlannedFailover");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsPlannedFailover");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsPlannedFailover");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsPlannedFailover");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsPlannedFailover");
      }
      // verify the required parameter 'replicatedProtectedItemName' is set
      if (replicatedProtectedItemName === undefined || replicatedProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsPlannedFailover");
      }
      // verify the required parameter 'failoverInput' is set
      if (failoverInput === undefined || failoverInput === null) {
        throw new Error("Missing the required parameter 'failoverInput' when calling replicationProtectedItemsPlannedFailover");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicatedProtectedItemName': replicatedProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/plannedFailover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsPurge operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsPurgeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purges protection.
     * The operation to delete or purge a replication protected item. This operation will force delete the replication protected item. Use the remove operation on replication protected item to perform a clean disable replication for the item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} replicatedProtectedItemName Replication protected item name.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsPurgeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicationProtectedItemsPurge(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsPurge");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsPurge");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsPurge");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsPurge");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsPurge");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsPurge");
      }
      // verify the required parameter 'replicatedProtectedItemName' is set
      if (replicatedProtectedItemName === undefined || replicatedProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsPurge");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicatedProtectedItemName': replicatedProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsRepairReplication operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsRepairReplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resynchronize or repair replication.
     * The operation to start resynchronize/repair replication for a replication protected item requiring resynchronization.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName The name of the fabric.
     * @param {String} protectionContainerName The name of the container.
     * @param {String} replicatedProtectedItemName The name of the replication protected item.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsRepairReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItem}
     */
    replicationProtectedItemsRepairReplication(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsRepairReplication");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsRepairReplication");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsRepairReplication");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsRepairReplication");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsRepairReplication");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsRepairReplication");
      }
      // verify the required parameter 'replicatedProtectedItemName' is set
      if (replicatedProtectedItemName === undefined || replicatedProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsRepairReplication");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicatedProtectedItemName': replicatedProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/repairReplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsReprotect operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsReprotectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute Reverse Replication\\Reprotect
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Unique fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} replicatedProtectedItemName Replication protected item name.
     * @param {module:model/ReverseReplicationInput} rrInput Disable protection input.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsReprotectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItem}
     */
    replicationProtectedItemsReprotect(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, rrInput, callback) {
      let postBody = rrInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsReprotect");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsReprotect");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsReprotect");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsReprotect");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsReprotect");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsReprotect");
      }
      // verify the required parameter 'replicatedProtectedItemName' is set
      if (replicatedProtectedItemName === undefined || replicatedProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsReprotect");
      }
      // verify the required parameter 'rrInput' is set
      if (rrInput === undefined || rrInput === null) {
        throw new Error("Missing the required parameter 'rrInput' when calling replicationProtectedItemsReprotect");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicatedProtectedItemName': replicatedProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/reProtect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsTestFailover operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsTestFailoverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute test failover
     * Operation to perform a test failover of the replication protected item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Unique fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} replicatedProtectedItemName Replication protected item name.
     * @param {module:model/TestFailoverInput} failoverInput Test failover input.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsTestFailoverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItem}
     */
    replicationProtectedItemsTestFailover(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, callback) {
      let postBody = failoverInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsTestFailover");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsTestFailover");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsTestFailover");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsTestFailover");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsTestFailover");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsTestFailover");
      }
      // verify the required parameter 'replicatedProtectedItemName' is set
      if (replicatedProtectedItemName === undefined || replicatedProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsTestFailover");
      }
      // verify the required parameter 'failoverInput' is set
      if (failoverInput === undefined || failoverInput === null) {
        throw new Error("Missing the required parameter 'failoverInput' when calling replicationProtectedItemsTestFailover");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicatedProtectedItemName': replicatedProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsTestFailoverCleanup operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsTestFailoverCleanupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute test failover cleanup.
     * Operation to clean up the test failover of a replication protected item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Unique fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} replicatedProtectedItemName Replication protected item name.
     * @param {module:model/TestFailoverCleanupInput} cleanupInput Test failover cleanup input.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsTestFailoverCleanupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItem}
     */
    replicationProtectedItemsTestFailoverCleanup(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, cleanupInput, callback) {
      let postBody = cleanupInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsTestFailoverCleanup");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsTestFailoverCleanup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsTestFailoverCleanup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsTestFailoverCleanup");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsTestFailoverCleanup");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsTestFailoverCleanup");
      }
      // verify the required parameter 'replicatedProtectedItemName' is set
      if (replicatedProtectedItemName === undefined || replicatedProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsTestFailoverCleanup");
      }
      // verify the required parameter 'cleanupInput' is set
      if (cleanupInput === undefined || cleanupInput === null) {
        throw new Error("Missing the required parameter 'cleanupInput' when calling replicationProtectedItemsTestFailoverCleanup");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicatedProtectedItemName': replicatedProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailoverCleanup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsUnplannedFailover operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsUnplannedFailoverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute unplanned failover
     * Operation to initiate a failover of the replication protected item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Unique fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} replicatedProtectedItemName Replication protected item name.
     * @param {module:model/UnplannedFailoverInput} failoverInput Disable protection input.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsUnplannedFailoverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItem}
     */
    replicationProtectedItemsUnplannedFailover(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, callback) {
      let postBody = failoverInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsUnplannedFailover");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsUnplannedFailover");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsUnplannedFailover");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsUnplannedFailover");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsUnplannedFailover");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsUnplannedFailover");
      }
      // verify the required parameter 'replicatedProtectedItemName' is set
      if (replicatedProtectedItemName === undefined || replicatedProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsUnplannedFailover");
      }
      // verify the required parameter 'failoverInput' is set
      if (failoverInput === undefined || failoverInput === null) {
        throw new Error("Missing the required parameter 'failoverInput' when calling replicationProtectedItemsUnplannedFailover");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicatedProtectedItemName': replicatedProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/unplannedFailover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsUpdate operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} replicatedProtectedItemName Replication protected item name.
     * @param {module:model/UpdateReplicationProtectedItemInput} updateProtectionInput Update protection input.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItem}
     */
    replicationProtectedItemsUpdate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput, callback) {
      let postBody = updateProtectionInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsUpdate");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsUpdate");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsUpdate");
      }
      // verify the required parameter 'replicatedProtectedItemName' is set
      if (replicatedProtectedItemName === undefined || replicatedProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicatedProtectedItemName' when calling replicationProtectedItemsUpdate");
      }
      // verify the required parameter 'updateProtectionInput' is set
      if (updateProtectionInput === undefined || updateProtectionInput === null) {
        throw new Error("Missing the required parameter 'updateProtectionInput' when calling replicationProtectedItemsUpdate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicatedProtectedItemName': replicatedProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectedItemsUpdateMobilityService operation.
     * @callback module:api/ReplicationProtectedItemsApi~replicationProtectedItemsUpdateMobilityServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationProtectedItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName The name of the fabric containing the protected item.
     * @param {String} protectionContainerName The name of the container containing the protected item.
     * @param {String} replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @param {module:model/UpdateMobilityServiceRequest} updateMobilityServiceRequest Request to update the mobility service on the protected item.
     * @param {module:api/ReplicationProtectedItemsApi~replicationProtectedItemsUpdateMobilityServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationProtectedItem}
     */
    replicationProtectedItemsUpdateMobilityService(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, replicationProtectedItemName, updateMobilityServiceRequest, callback) {
      let postBody = updateMobilityServiceRequest;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectedItemsUpdateMobilityService");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectedItemsUpdateMobilityService");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectedItemsUpdateMobilityService");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectedItemsUpdateMobilityService");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectedItemsUpdateMobilityService");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectedItemsUpdateMobilityService");
      }
      // verify the required parameter 'replicationProtectedItemName' is set
      if (replicationProtectedItemName === undefined || replicationProtectedItemName === null) {
        throw new Error("Missing the required parameter 'replicationProtectedItemName' when calling replicationProtectedItemsUpdateMobilityService");
      }
      // verify the required parameter 'updateMobilityServiceRequest' is set
      if (updateMobilityServiceRequest === undefined || updateMobilityServiceRequest === null) {
        throw new Error("Missing the required parameter 'updateMobilityServiceRequest' when calling replicationProtectedItemsUpdateMobilityService");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'replicationProtectedItemName': replicationProtectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicationProtectedItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicationProtectedItemName}/updateMobilityService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
