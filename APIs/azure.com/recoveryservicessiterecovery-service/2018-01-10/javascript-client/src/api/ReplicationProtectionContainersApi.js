/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateProtectionContainerInput from '../model/CreateProtectionContainerInput';
import DiscoverProtectableItemRequest from '../model/DiscoverProtectableItemRequest';
import ProtectionContainer from '../model/ProtectionContainer';
import ProtectionContainerCollection from '../model/ProtectionContainerCollection';
import SwitchProtectionInput from '../model/SwitchProtectionInput';

/**
* ReplicationProtectionContainers service.
* @module api/ReplicationProtectionContainersApi
* @version 2018-01-10
*/
export default class ReplicationProtectionContainersApi {

    /**
    * Constructs a new ReplicationProtectionContainersApi. 
    * @alias module:api/ReplicationProtectionContainersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the replicationProtectionContainersCreate operation.
     * @callback module:api/ReplicationProtectionContainersApi~replicationProtectionContainersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionContainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a protection container.
     * Operation to create a protection container.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Unique fabric ARM name.
     * @param {String} protectionContainerName Unique protection container ARM name.
     * @param {module:model/CreateProtectionContainerInput} creationInput Creation input.
     * @param {module:api/ReplicationProtectionContainersApi~replicationProtectionContainersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionContainer}
     */
    replicationProtectionContainersCreate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, creationInput, callback) {
      let postBody = creationInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersCreate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectionContainersCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersCreate");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectionContainersCreate");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainersCreate");
      }
      // verify the required parameter 'creationInput' is set
      if (creationInput === undefined || creationInput === null) {
        throw new Error("Missing the required parameter 'creationInput' when calling replicationProtectionContainersCreate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProtectionContainer;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectionContainersDelete operation.
     * @callback module:api/ReplicationProtectionContainersApi~replicationProtectionContainersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a protection container.
     * Operation to remove a protection container.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Unique fabric ARM name.
     * @param {String} protectionContainerName Unique protection container ARM name.
     * @param {module:api/ReplicationProtectionContainersApi~replicationProtectionContainersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicationProtectionContainersDelete(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectionContainersDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersDelete");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectionContainersDelete");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainersDelete");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectionContainersDiscoverProtectableItem operation.
     * @callback module:api/ReplicationProtectionContainersApi~replicationProtectionContainersDiscoverProtectableItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionContainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.)
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName The name of the fabric.
     * @param {String} protectionContainerName The name of the protection container.
     * @param {module:model/DiscoverProtectableItemRequest} discoverProtectableItemRequest The request object to add a protectable item.
     * @param {module:api/ReplicationProtectionContainersApi~replicationProtectionContainersDiscoverProtectableItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionContainer}
     */
    replicationProtectionContainersDiscoverProtectableItem(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, discoverProtectableItemRequest, callback) {
      let postBody = discoverProtectableItemRequest;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersDiscoverProtectableItem");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectionContainersDiscoverProtectableItem");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersDiscoverProtectableItem");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersDiscoverProtectableItem");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectionContainersDiscoverProtectableItem");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainersDiscoverProtectableItem");
      }
      // verify the required parameter 'discoverProtectableItemRequest' is set
      if (discoverProtectableItemRequest === undefined || discoverProtectableItemRequest === null) {
        throw new Error("Missing the required parameter 'discoverProtectableItemRequest' when calling replicationProtectionContainersDiscoverProtectableItem");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProtectionContainer;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/discoverProtectableItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectionContainersGet operation.
     * @callback module:api/ReplicationProtectionContainersApi~replicationProtectionContainersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionContainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the protection container details.
     * Gets the details of a protection container.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {module:api/ReplicationProtectionContainersApi~replicationProtectionContainersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionContainer}
     */
    replicationProtectionContainersGet(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectionContainersGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersGet");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectionContainersGet");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainersGet");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProtectionContainer;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectionContainersList operation.
     * @callback module:api/ReplicationProtectionContainersApi~replicationProtectionContainersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionContainerCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of all protection containers in a vault.
     * Lists the protection containers in a vault.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {module:api/ReplicationProtectionContainersApi~replicationProtectionContainersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionContainerCollection}
     */
    replicationProtectionContainersList(apiVersion, resourceName, resourceGroupName, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersList");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectionContainersList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersList");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProtectionContainerCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectionContainersListByReplicationFabrics operation.
     * @callback module:api/ReplicationProtectionContainersApi~replicationProtectionContainersListByReplicationFabricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionContainerCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of protection container for a fabric.
     * Lists the protection containers in the specified fabric.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {module:api/ReplicationProtectionContainersApi~replicationProtectionContainersListByReplicationFabricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionContainerCollection}
     */
    replicationProtectionContainersListByReplicationFabrics(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersListByReplicationFabrics");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectionContainersListByReplicationFabrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersListByReplicationFabrics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersListByReplicationFabrics");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectionContainersListByReplicationFabrics");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProtectionContainerCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationProtectionContainersSwitchProtection operation.
     * @callback module:api/ReplicationProtectionContainersApi~replicationProtectionContainersSwitchProtectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionContainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Unique fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {module:model/SwitchProtectionInput} switchInput Switch protection input.
     * @param {module:api/ReplicationProtectionContainersApi~replicationProtectionContainersSwitchProtectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionContainer}
     */
    replicationProtectionContainersSwitchProtection(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, switchInput, callback) {
      let postBody = switchInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersSwitchProtection");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationProtectionContainersSwitchProtection");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersSwitchProtection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersSwitchProtection");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationProtectionContainersSwitchProtection");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainersSwitchProtection");
      }
      // verify the required parameter 'switchInput' is set
      if (switchInput === undefined || switchInput === null) {
        throw new Error("Missing the required parameter 'switchInput' when calling replicationProtectionContainersSwitchProtection");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProtectionContainer;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/switchprotection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
