/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecoveryPlanActionDetails from './RecoveryPlanActionDetails';

/**
 * The RecoveryPlanAction model module.
 * @module model/RecoveryPlanAction
 * @version 2018-01-10
 */
class RecoveryPlanAction {
    /**
     * Constructs a new <code>RecoveryPlanAction</code>.
     * Recovery plan action details.
     * @alias module:model/RecoveryPlanAction
     * @param actionName {String} The action name.
     * @param customDetails {module:model/RecoveryPlanActionDetails} 
     * @param failoverDirections {Array.<module:model/RecoveryPlanAction.FailoverDirectionsEnum>} The list of failover directions.
     * @param failoverTypes {Array.<module:model/RecoveryPlanAction.FailoverTypesEnum>} The list of failover types.
     */
    constructor(actionName, customDetails, failoverDirections, failoverTypes) { 
        
        RecoveryPlanAction.initialize(this, actionName, customDetails, failoverDirections, failoverTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actionName, customDetails, failoverDirections, failoverTypes) { 
        obj['actionName'] = actionName;
        obj['customDetails'] = customDetails;
        obj['failoverDirections'] = failoverDirections;
        obj['failoverTypes'] = failoverTypes;
    }

    /**
     * Constructs a <code>RecoveryPlanAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecoveryPlanAction} obj Optional instance to populate.
     * @return {module:model/RecoveryPlanAction} The populated <code>RecoveryPlanAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecoveryPlanAction();

            if (data.hasOwnProperty('actionName')) {
                obj['actionName'] = ApiClient.convertToType(data['actionName'], 'String');
            }
            if (data.hasOwnProperty('customDetails')) {
                obj['customDetails'] = RecoveryPlanActionDetails.constructFromObject(data['customDetails']);
            }
            if (data.hasOwnProperty('failoverDirections')) {
                obj['failoverDirections'] = ApiClient.convertToType(data['failoverDirections'], ['String']);
            }
            if (data.hasOwnProperty('failoverTypes')) {
                obj['failoverTypes'] = ApiClient.convertToType(data['failoverTypes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecoveryPlanAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecoveryPlanAction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RecoveryPlanAction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['actionName'] && !(typeof data['actionName'] === 'string' || data['actionName'] instanceof String)) {
            throw new Error("Expected the field `actionName` to be a primitive type in the JSON string but got " + data['actionName']);
        }
        // validate the optional field `customDetails`
        if (data['customDetails']) { // data not null
          RecoveryPlanActionDetails.validateJSON(data['customDetails']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['failoverDirections'])) {
            throw new Error("Expected the field `failoverDirections` to be an array in the JSON data but got " + data['failoverDirections']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['failoverTypes'])) {
            throw new Error("Expected the field `failoverTypes` to be an array in the JSON data but got " + data['failoverTypes']);
        }

        return true;
    }


}

RecoveryPlanAction.RequiredProperties = ["actionName", "customDetails", "failoverDirections", "failoverTypes"];

/**
 * The action name.
 * @member {String} actionName
 */
RecoveryPlanAction.prototype['actionName'] = undefined;

/**
 * @member {module:model/RecoveryPlanActionDetails} customDetails
 */
RecoveryPlanAction.prototype['customDetails'] = undefined;

/**
 * The list of failover directions.
 * @member {Array.<module:model/RecoveryPlanAction.FailoverDirectionsEnum>} failoverDirections
 */
RecoveryPlanAction.prototype['failoverDirections'] = undefined;

/**
 * The list of failover types.
 * @member {Array.<module:model/RecoveryPlanAction.FailoverTypesEnum>} failoverTypes
 */
RecoveryPlanAction.prototype['failoverTypes'] = undefined;





/**
 * Allowed values for the <code>failoverDirections</code> property.
 * @enum {String}
 * @readonly
 */
RecoveryPlanAction['FailoverDirectionsEnum'] = {

    /**
     * value: "PrimaryToRecovery"
     * @const
     */
    "PrimaryToRecovery": "PrimaryToRecovery",

    /**
     * value: "RecoveryToPrimary"
     * @const
     */
    "RecoveryToPrimary": "RecoveryToPrimary"
};


/**
 * Allowed values for the <code>failoverTypes</code> property.
 * @enum {String}
 * @readonly
 */
RecoveryPlanAction['FailoverTypesEnum'] = {

    /**
     * value: "ReverseReplicate"
     * @const
     */
    "ReverseReplicate": "ReverseReplicate",

    /**
     * value: "Commit"
     * @const
     */
    "Commit": "Commit",

    /**
     * value: "PlannedFailover"
     * @const
     */
    "PlannedFailover": "PlannedFailover",

    /**
     * value: "UnplannedFailover"
     * @const
     */
    "UnplannedFailover": "UnplannedFailover",

    /**
     * value: "DisableProtection"
     * @const
     */
    "DisableProtection": "DisableProtection",

    /**
     * value: "TestFailover"
     * @const
     */
    "TestFailover": "TestFailover",

    /**
     * value: "TestFailoverCleanup"
     * @const
     */
    "TestFailoverCleanup": "TestFailoverCleanup",

    /**
     * value: "Failback"
     * @const
     */
    "Failback": "Failback",

    /**
     * value: "FinalizeFailback"
     * @const
     */
    "FinalizeFailback": "FinalizeFailback",

    /**
     * value: "ChangePit"
     * @const
     */
    "ChangePit": "ChangePit",

    /**
     * value: "RepairReplication"
     * @const
     */
    "RepairReplication": "RepairReplication",

    /**
     * value: "SwitchProtection"
     * @const
     */
    "SwitchProtection": "SwitchProtection",

    /**
     * value: "CompleteMigration"
     * @const
     */
    "CompleteMigration": "CompleteMigration"
};



export default RecoveryPlanAction;

