/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FabricSpecificDetails from './FabricSpecificDetails';
import MasterTargetServer from './MasterTargetServer';
import ProcessServer from './ProcessServer';
import RunAsAccount from './RunAsAccount';
import VersionDetails from './VersionDetails';

/**
 * The VMwareDetails model module.
 * @module model/VMwareDetails
 * @version 2018-01-10
 */
class VMwareDetails {
    /**
     * Constructs a new <code>VMwareDetails</code>.
     * Store the fabric details specific to the VMware fabric.
     * @alias module:model/VMwareDetails
     * @extends module:model/FabricSpecificDetails
     * @implements module:model/FabricSpecificDetails
     */
    constructor() { 
        FabricSpecificDetails.initialize(this);
        VMwareDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VMwareDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VMwareDetails} obj Optional instance to populate.
     * @return {module:model/VMwareDetails} The populated <code>VMwareDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VMwareDetails();
            FabricSpecificDetails.constructFromObject(data, obj);
            FabricSpecificDetails.constructFromObject(data, obj);

            if (data.hasOwnProperty('agentCount')) {
                obj['agentCount'] = ApiClient.convertToType(data['agentCount'], 'String');
            }
            if (data.hasOwnProperty('agentExpiryDate')) {
                obj['agentExpiryDate'] = ApiClient.convertToType(data['agentExpiryDate'], 'Date');
            }
            if (data.hasOwnProperty('agentVersion')) {
                obj['agentVersion'] = ApiClient.convertToType(data['agentVersion'], 'String');
            }
            if (data.hasOwnProperty('agentVersionDetails')) {
                obj['agentVersionDetails'] = VersionDetails.constructFromObject(data['agentVersionDetails']);
            }
            if (data.hasOwnProperty('availableMemoryInBytes')) {
                obj['availableMemoryInBytes'] = ApiClient.convertToType(data['availableMemoryInBytes'], 'Number');
            }
            if (data.hasOwnProperty('availableSpaceInBytes')) {
                obj['availableSpaceInBytes'] = ApiClient.convertToType(data['availableSpaceInBytes'], 'Number');
            }
            if (data.hasOwnProperty('cpuLoad')) {
                obj['cpuLoad'] = ApiClient.convertToType(data['cpuLoad'], 'String');
            }
            if (data.hasOwnProperty('cpuLoadStatus')) {
                obj['cpuLoadStatus'] = ApiClient.convertToType(data['cpuLoadStatus'], 'String');
            }
            if (data.hasOwnProperty('csServiceStatus')) {
                obj['csServiceStatus'] = ApiClient.convertToType(data['csServiceStatus'], 'String');
            }
            if (data.hasOwnProperty('databaseServerLoad')) {
                obj['databaseServerLoad'] = ApiClient.convertToType(data['databaseServerLoad'], 'String');
            }
            if (data.hasOwnProperty('databaseServerLoadStatus')) {
                obj['databaseServerLoadStatus'] = ApiClient.convertToType(data['databaseServerLoadStatus'], 'String');
            }
            if (data.hasOwnProperty('hostName')) {
                obj['hostName'] = ApiClient.convertToType(data['hostName'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('lastHeartbeat')) {
                obj['lastHeartbeat'] = ApiClient.convertToType(data['lastHeartbeat'], 'Date');
            }
            if (data.hasOwnProperty('masterTargetServers')) {
                obj['masterTargetServers'] = ApiClient.convertToType(data['masterTargetServers'], [MasterTargetServer]);
            }
            if (data.hasOwnProperty('memoryUsageStatus')) {
                obj['memoryUsageStatus'] = ApiClient.convertToType(data['memoryUsageStatus'], 'String');
            }
            if (data.hasOwnProperty('processServerCount')) {
                obj['processServerCount'] = ApiClient.convertToType(data['processServerCount'], 'String');
            }
            if (data.hasOwnProperty('processServers')) {
                obj['processServers'] = ApiClient.convertToType(data['processServers'], [ProcessServer]);
            }
            if (data.hasOwnProperty('protectedServers')) {
                obj['protectedServers'] = ApiClient.convertToType(data['protectedServers'], 'String');
            }
            if (data.hasOwnProperty('psTemplateVersion')) {
                obj['psTemplateVersion'] = ApiClient.convertToType(data['psTemplateVersion'], 'String');
            }
            if (data.hasOwnProperty('replicationPairCount')) {
                obj['replicationPairCount'] = ApiClient.convertToType(data['replicationPairCount'], 'String');
            }
            if (data.hasOwnProperty('runAsAccounts')) {
                obj['runAsAccounts'] = ApiClient.convertToType(data['runAsAccounts'], [RunAsAccount]);
            }
            if (data.hasOwnProperty('spaceUsageStatus')) {
                obj['spaceUsageStatus'] = ApiClient.convertToType(data['spaceUsageStatus'], 'String');
            }
            if (data.hasOwnProperty('sslCertExpiryDate')) {
                obj['sslCertExpiryDate'] = ApiClient.convertToType(data['sslCertExpiryDate'], 'Date');
            }
            if (data.hasOwnProperty('sslCertExpiryRemainingDays')) {
                obj['sslCertExpiryRemainingDays'] = ApiClient.convertToType(data['sslCertExpiryRemainingDays'], 'Number');
            }
            if (data.hasOwnProperty('systemLoad')) {
                obj['systemLoad'] = ApiClient.convertToType(data['systemLoad'], 'String');
            }
            if (data.hasOwnProperty('systemLoadStatus')) {
                obj['systemLoadStatus'] = ApiClient.convertToType(data['systemLoadStatus'], 'String');
            }
            if (data.hasOwnProperty('totalMemoryInBytes')) {
                obj['totalMemoryInBytes'] = ApiClient.convertToType(data['totalMemoryInBytes'], 'Number');
            }
            if (data.hasOwnProperty('totalSpaceInBytes')) {
                obj['totalSpaceInBytes'] = ApiClient.convertToType(data['totalSpaceInBytes'], 'Number');
            }
            if (data.hasOwnProperty('versionStatus')) {
                obj['versionStatus'] = ApiClient.convertToType(data['versionStatus'], 'String');
            }
            if (data.hasOwnProperty('webLoad')) {
                obj['webLoad'] = ApiClient.convertToType(data['webLoad'], 'String');
            }
            if (data.hasOwnProperty('webLoadStatus')) {
                obj['webLoadStatus'] = ApiClient.convertToType(data['webLoadStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VMwareDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VMwareDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['agentCount'] && !(typeof data['agentCount'] === 'string' || data['agentCount'] instanceof String)) {
            throw new Error("Expected the field `agentCount` to be a primitive type in the JSON string but got " + data['agentCount']);
        }
        // ensure the json data is a string
        if (data['agentVersion'] && !(typeof data['agentVersion'] === 'string' || data['agentVersion'] instanceof String)) {
            throw new Error("Expected the field `agentVersion` to be a primitive type in the JSON string but got " + data['agentVersion']);
        }
        // validate the optional field `agentVersionDetails`
        if (data['agentVersionDetails']) { // data not null
          VersionDetails.validateJSON(data['agentVersionDetails']);
        }
        // ensure the json data is a string
        if (data['cpuLoad'] && !(typeof data['cpuLoad'] === 'string' || data['cpuLoad'] instanceof String)) {
            throw new Error("Expected the field `cpuLoad` to be a primitive type in the JSON string but got " + data['cpuLoad']);
        }
        // ensure the json data is a string
        if (data['cpuLoadStatus'] && !(typeof data['cpuLoadStatus'] === 'string' || data['cpuLoadStatus'] instanceof String)) {
            throw new Error("Expected the field `cpuLoadStatus` to be a primitive type in the JSON string but got " + data['cpuLoadStatus']);
        }
        // ensure the json data is a string
        if (data['csServiceStatus'] && !(typeof data['csServiceStatus'] === 'string' || data['csServiceStatus'] instanceof String)) {
            throw new Error("Expected the field `csServiceStatus` to be a primitive type in the JSON string but got " + data['csServiceStatus']);
        }
        // ensure the json data is a string
        if (data['databaseServerLoad'] && !(typeof data['databaseServerLoad'] === 'string' || data['databaseServerLoad'] instanceof String)) {
            throw new Error("Expected the field `databaseServerLoad` to be a primitive type in the JSON string but got " + data['databaseServerLoad']);
        }
        // ensure the json data is a string
        if (data['databaseServerLoadStatus'] && !(typeof data['databaseServerLoadStatus'] === 'string' || data['databaseServerLoadStatus'] instanceof String)) {
            throw new Error("Expected the field `databaseServerLoadStatus` to be a primitive type in the JSON string but got " + data['databaseServerLoadStatus']);
        }
        // ensure the json data is a string
        if (data['hostName'] && !(typeof data['hostName'] === 'string' || data['hostName'] instanceof String)) {
            throw new Error("Expected the field `hostName` to be a primitive type in the JSON string but got " + data['hostName']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        if (data['masterTargetServers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['masterTargetServers'])) {
                throw new Error("Expected the field `masterTargetServers` to be an array in the JSON data but got " + data['masterTargetServers']);
            }
            // validate the optional field `masterTargetServers` (array)
            for (const item of data['masterTargetServers']) {
                MasterTargetServer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['memoryUsageStatus'] && !(typeof data['memoryUsageStatus'] === 'string' || data['memoryUsageStatus'] instanceof String)) {
            throw new Error("Expected the field `memoryUsageStatus` to be a primitive type in the JSON string but got " + data['memoryUsageStatus']);
        }
        // ensure the json data is a string
        if (data['processServerCount'] && !(typeof data['processServerCount'] === 'string' || data['processServerCount'] instanceof String)) {
            throw new Error("Expected the field `processServerCount` to be a primitive type in the JSON string but got " + data['processServerCount']);
        }
        if (data['processServers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['processServers'])) {
                throw new Error("Expected the field `processServers` to be an array in the JSON data but got " + data['processServers']);
            }
            // validate the optional field `processServers` (array)
            for (const item of data['processServers']) {
                ProcessServer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['protectedServers'] && !(typeof data['protectedServers'] === 'string' || data['protectedServers'] instanceof String)) {
            throw new Error("Expected the field `protectedServers` to be a primitive type in the JSON string but got " + data['protectedServers']);
        }
        // ensure the json data is a string
        if (data['psTemplateVersion'] && !(typeof data['psTemplateVersion'] === 'string' || data['psTemplateVersion'] instanceof String)) {
            throw new Error("Expected the field `psTemplateVersion` to be a primitive type in the JSON string but got " + data['psTemplateVersion']);
        }
        // ensure the json data is a string
        if (data['replicationPairCount'] && !(typeof data['replicationPairCount'] === 'string' || data['replicationPairCount'] instanceof String)) {
            throw new Error("Expected the field `replicationPairCount` to be a primitive type in the JSON string but got " + data['replicationPairCount']);
        }
        if (data['runAsAccounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['runAsAccounts'])) {
                throw new Error("Expected the field `runAsAccounts` to be an array in the JSON data but got " + data['runAsAccounts']);
            }
            // validate the optional field `runAsAccounts` (array)
            for (const item of data['runAsAccounts']) {
                RunAsAccount.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['spaceUsageStatus'] && !(typeof data['spaceUsageStatus'] === 'string' || data['spaceUsageStatus'] instanceof String)) {
            throw new Error("Expected the field `spaceUsageStatus` to be a primitive type in the JSON string but got " + data['spaceUsageStatus']);
        }
        // ensure the json data is a string
        if (data['systemLoad'] && !(typeof data['systemLoad'] === 'string' || data['systemLoad'] instanceof String)) {
            throw new Error("Expected the field `systemLoad` to be a primitive type in the JSON string but got " + data['systemLoad']);
        }
        // ensure the json data is a string
        if (data['systemLoadStatus'] && !(typeof data['systemLoadStatus'] === 'string' || data['systemLoadStatus'] instanceof String)) {
            throw new Error("Expected the field `systemLoadStatus` to be a primitive type in the JSON string but got " + data['systemLoadStatus']);
        }
        // ensure the json data is a string
        if (data['versionStatus'] && !(typeof data['versionStatus'] === 'string' || data['versionStatus'] instanceof String)) {
            throw new Error("Expected the field `versionStatus` to be a primitive type in the JSON string but got " + data['versionStatus']);
        }
        // ensure the json data is a string
        if (data['webLoad'] && !(typeof data['webLoad'] === 'string' || data['webLoad'] instanceof String)) {
            throw new Error("Expected the field `webLoad` to be a primitive type in the JSON string but got " + data['webLoad']);
        }
        // ensure the json data is a string
        if (data['webLoadStatus'] && !(typeof data['webLoadStatus'] === 'string' || data['webLoadStatus'] instanceof String)) {
            throw new Error("Expected the field `webLoadStatus` to be a primitive type in the JSON string but got " + data['webLoadStatus']);
        }

        return true;
    }


}



/**
 * The number of source and target servers configured to talk to this CS.
 * @member {String} agentCount
 */
VMwareDetails.prototype['agentCount'] = undefined;

/**
 * Agent expiry date.
 * @member {Date} agentExpiryDate
 */
VMwareDetails.prototype['agentExpiryDate'] = undefined;

/**
 * The agent Version.
 * @member {String} agentVersion
 */
VMwareDetails.prototype['agentVersion'] = undefined;

/**
 * @member {module:model/VersionDetails} agentVersionDetails
 */
VMwareDetails.prototype['agentVersionDetails'] = undefined;

/**
 * The available memory.
 * @member {Number} availableMemoryInBytes
 */
VMwareDetails.prototype['availableMemoryInBytes'] = undefined;

/**
 * The available space.
 * @member {Number} availableSpaceInBytes
 */
VMwareDetails.prototype['availableSpaceInBytes'] = undefined;

/**
 * The percentage of the CPU load.
 * @member {String} cpuLoad
 */
VMwareDetails.prototype['cpuLoad'] = undefined;

/**
 * The CPU load status.
 * @member {String} cpuLoadStatus
 */
VMwareDetails.prototype['cpuLoadStatus'] = undefined;

/**
 * The CS service status.
 * @member {String} csServiceStatus
 */
VMwareDetails.prototype['csServiceStatus'] = undefined;

/**
 * The database server load.
 * @member {String} databaseServerLoad
 */
VMwareDetails.prototype['databaseServerLoad'] = undefined;

/**
 * The database server load status.
 * @member {String} databaseServerLoadStatus
 */
VMwareDetails.prototype['databaseServerLoadStatus'] = undefined;

/**
 * The host name.
 * @member {String} hostName
 */
VMwareDetails.prototype['hostName'] = undefined;

/**
 * The IP address.
 * @member {String} ipAddress
 */
VMwareDetails.prototype['ipAddress'] = undefined;

/**
 * The last heartbeat received from CS server.
 * @member {Date} lastHeartbeat
 */
VMwareDetails.prototype['lastHeartbeat'] = undefined;

/**
 * The list of Master Target servers associated with the fabric.
 * @member {Array.<module:model/MasterTargetServer>} masterTargetServers
 */
VMwareDetails.prototype['masterTargetServers'] = undefined;

/**
 * The memory usage status.
 * @member {String} memoryUsageStatus
 */
VMwareDetails.prototype['memoryUsageStatus'] = undefined;

/**
 * The number of process servers.
 * @member {String} processServerCount
 */
VMwareDetails.prototype['processServerCount'] = undefined;

/**
 * The list of Process Servers associated with the fabric.
 * @member {Array.<module:model/ProcessServer>} processServers
 */
VMwareDetails.prototype['processServers'] = undefined;

/**
 * The number of protected servers.
 * @member {String} protectedServers
 */
VMwareDetails.prototype['protectedServers'] = undefined;

/**
 * PS template version.
 * @member {String} psTemplateVersion
 */
VMwareDetails.prototype['psTemplateVersion'] = undefined;

/**
 * The number of replication pairs configured in this CS.
 * @member {String} replicationPairCount
 */
VMwareDetails.prototype['replicationPairCount'] = undefined;

/**
 * The list of run as accounts created on the server.
 * @member {Array.<module:model/RunAsAccount>} runAsAccounts
 */
VMwareDetails.prototype['runAsAccounts'] = undefined;

/**
 * The space usage status.
 * @member {String} spaceUsageStatus
 */
VMwareDetails.prototype['spaceUsageStatus'] = undefined;

/**
 * CS SSL cert expiry date.
 * @member {Date} sslCertExpiryDate
 */
VMwareDetails.prototype['sslCertExpiryDate'] = undefined;

/**
 * CS SSL cert expiry date.
 * @member {Number} sslCertExpiryRemainingDays
 */
VMwareDetails.prototype['sslCertExpiryRemainingDays'] = undefined;

/**
 * The percentage of the system load.
 * @member {String} systemLoad
 */
VMwareDetails.prototype['systemLoad'] = undefined;

/**
 * The system load status.
 * @member {String} systemLoadStatus
 */
VMwareDetails.prototype['systemLoadStatus'] = undefined;

/**
 * The total memory.
 * @member {Number} totalMemoryInBytes
 */
VMwareDetails.prototype['totalMemoryInBytes'] = undefined;

/**
 * The total space.
 * @member {Number} totalSpaceInBytes
 */
VMwareDetails.prototype['totalSpaceInBytes'] = undefined;

/**
 * Version status
 * @member {String} versionStatus
 */
VMwareDetails.prototype['versionStatus'] = undefined;

/**
 * The web load.
 * @member {String} webLoad
 */
VMwareDetails.prototype['webLoad'] = undefined;

/**
 * The web load status.
 * @member {String} webLoadStatus
 */
VMwareDetails.prototype['webLoadStatus'] = undefined;


// Implement FabricSpecificDetails interface:
/**
 * Gets the class type. Overridden in derived classes.
 * @member {String} instanceType
 */
FabricSpecificDetails.prototype['instanceType'] = undefined;




export default VMwareDetails;

