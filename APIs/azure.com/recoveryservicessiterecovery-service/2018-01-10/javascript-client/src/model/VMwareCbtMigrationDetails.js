/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MigrationProviderSpecificSettings from './MigrationProviderSpecificSettings';
import VMwareCbtNicDetails from './VMwareCbtNicDetails';
import VMwareCbtProtectedDiskDetails from './VMwareCbtProtectedDiskDetails';

/**
 * The VMwareCbtMigrationDetails model module.
 * @module model/VMwareCbtMigrationDetails
 * @version 2018-01-10
 */
class VMwareCbtMigrationDetails {
    /**
     * Constructs a new <code>VMwareCbtMigrationDetails</code>.
     * VMwareCbt provider specific settings.
     * @alias module:model/VMwareCbtMigrationDetails
     * @extends module:model/MigrationProviderSpecificSettings
     * @implements module:model/MigrationProviderSpecificSettings
     */
    constructor() { 
        MigrationProviderSpecificSettings.initialize(this);
        VMwareCbtMigrationDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VMwareCbtMigrationDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VMwareCbtMigrationDetails} obj Optional instance to populate.
     * @return {module:model/VMwareCbtMigrationDetails} The populated <code>VMwareCbtMigrationDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VMwareCbtMigrationDetails();
            MigrationProviderSpecificSettings.constructFromObject(data, obj);
            MigrationProviderSpecificSettings.constructFromObject(data, obj);

            if (data.hasOwnProperty('dataMoverRunAsAccountId')) {
                obj['dataMoverRunAsAccountId'] = ApiClient.convertToType(data['dataMoverRunAsAccountId'], 'String');
            }
            if (data.hasOwnProperty('initialSeedingProgressPercentage')) {
                obj['initialSeedingProgressPercentage'] = ApiClient.convertToType(data['initialSeedingProgressPercentage'], 'Number');
            }
            if (data.hasOwnProperty('lastRecoveryPointId')) {
                obj['lastRecoveryPointId'] = ApiClient.convertToType(data['lastRecoveryPointId'], 'String');
            }
            if (data.hasOwnProperty('lastRecoveryPointReceived')) {
                obj['lastRecoveryPointReceived'] = ApiClient.convertToType(data['lastRecoveryPointReceived'], 'Date');
            }
            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = ApiClient.convertToType(data['licenseType'], 'String');
            }
            if (data.hasOwnProperty('migrationProgressPercentage')) {
                obj['migrationProgressPercentage'] = ApiClient.convertToType(data['migrationProgressPercentage'], 'Number');
            }
            if (data.hasOwnProperty('migrationRecoveryPointId')) {
                obj['migrationRecoveryPointId'] = ApiClient.convertToType(data['migrationRecoveryPointId'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('performAutoResync')) {
                obj['performAutoResync'] = ApiClient.convertToType(data['performAutoResync'], 'String');
            }
            if (data.hasOwnProperty('protectedDisks')) {
                obj['protectedDisks'] = ApiClient.convertToType(data['protectedDisks'], [VMwareCbtProtectedDiskDetails]);
            }
            if (data.hasOwnProperty('resyncProgressPercentage')) {
                obj['resyncProgressPercentage'] = ApiClient.convertToType(data['resyncProgressPercentage'], 'Number');
            }
            if (data.hasOwnProperty('resyncState')) {
                obj['resyncState'] = ApiClient.convertToType(data['resyncState'], 'String');
            }
            if (data.hasOwnProperty('snapshotRunAsAccountId')) {
                obj['snapshotRunAsAccountId'] = ApiClient.convertToType(data['snapshotRunAsAccountId'], 'String');
            }
            if (data.hasOwnProperty('targetAvailabilitySetId')) {
                obj['targetAvailabilitySetId'] = ApiClient.convertToType(data['targetAvailabilitySetId'], 'String');
            }
            if (data.hasOwnProperty('targetBootDiagnosticsStorageAccountId')) {
                obj['targetBootDiagnosticsStorageAccountId'] = ApiClient.convertToType(data['targetBootDiagnosticsStorageAccountId'], 'String');
            }
            if (data.hasOwnProperty('targetLocation')) {
                obj['targetLocation'] = ApiClient.convertToType(data['targetLocation'], 'String');
            }
            if (data.hasOwnProperty('targetNetworkId')) {
                obj['targetNetworkId'] = ApiClient.convertToType(data['targetNetworkId'], 'String');
            }
            if (data.hasOwnProperty('targetResourceGroupId')) {
                obj['targetResourceGroupId'] = ApiClient.convertToType(data['targetResourceGroupId'], 'String');
            }
            if (data.hasOwnProperty('targetVmName')) {
                obj['targetVmName'] = ApiClient.convertToType(data['targetVmName'], 'String');
            }
            if (data.hasOwnProperty('targetVmSize')) {
                obj['targetVmSize'] = ApiClient.convertToType(data['targetVmSize'], 'String');
            }
            if (data.hasOwnProperty('vmNics')) {
                obj['vmNics'] = ApiClient.convertToType(data['vmNics'], [VMwareCbtNicDetails]);
            }
            if (data.hasOwnProperty('vmwareMachineId')) {
                obj['vmwareMachineId'] = ApiClient.convertToType(data['vmwareMachineId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VMwareCbtMigrationDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VMwareCbtMigrationDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataMoverRunAsAccountId'] && !(typeof data['dataMoverRunAsAccountId'] === 'string' || data['dataMoverRunAsAccountId'] instanceof String)) {
            throw new Error("Expected the field `dataMoverRunAsAccountId` to be a primitive type in the JSON string but got " + data['dataMoverRunAsAccountId']);
        }
        // ensure the json data is a string
        if (data['lastRecoveryPointId'] && !(typeof data['lastRecoveryPointId'] === 'string' || data['lastRecoveryPointId'] instanceof String)) {
            throw new Error("Expected the field `lastRecoveryPointId` to be a primitive type in the JSON string but got " + data['lastRecoveryPointId']);
        }
        // ensure the json data is a string
        if (data['licenseType'] && !(typeof data['licenseType'] === 'string' || data['licenseType'] instanceof String)) {
            throw new Error("Expected the field `licenseType` to be a primitive type in the JSON string but got " + data['licenseType']);
        }
        // ensure the json data is a string
        if (data['migrationRecoveryPointId'] && !(typeof data['migrationRecoveryPointId'] === 'string' || data['migrationRecoveryPointId'] instanceof String)) {
            throw new Error("Expected the field `migrationRecoveryPointId` to be a primitive type in the JSON string but got " + data['migrationRecoveryPointId']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['performAutoResync'] && !(typeof data['performAutoResync'] === 'string' || data['performAutoResync'] instanceof String)) {
            throw new Error("Expected the field `performAutoResync` to be a primitive type in the JSON string but got " + data['performAutoResync']);
        }
        if (data['protectedDisks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['protectedDisks'])) {
                throw new Error("Expected the field `protectedDisks` to be an array in the JSON data but got " + data['protectedDisks']);
            }
            // validate the optional field `protectedDisks` (array)
            for (const item of data['protectedDisks']) {
                VMwareCbtProtectedDiskDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['resyncState'] && !(typeof data['resyncState'] === 'string' || data['resyncState'] instanceof String)) {
            throw new Error("Expected the field `resyncState` to be a primitive type in the JSON string but got " + data['resyncState']);
        }
        // ensure the json data is a string
        if (data['snapshotRunAsAccountId'] && !(typeof data['snapshotRunAsAccountId'] === 'string' || data['snapshotRunAsAccountId'] instanceof String)) {
            throw new Error("Expected the field `snapshotRunAsAccountId` to be a primitive type in the JSON string but got " + data['snapshotRunAsAccountId']);
        }
        // ensure the json data is a string
        if (data['targetAvailabilitySetId'] && !(typeof data['targetAvailabilitySetId'] === 'string' || data['targetAvailabilitySetId'] instanceof String)) {
            throw new Error("Expected the field `targetAvailabilitySetId` to be a primitive type in the JSON string but got " + data['targetAvailabilitySetId']);
        }
        // ensure the json data is a string
        if (data['targetBootDiagnosticsStorageAccountId'] && !(typeof data['targetBootDiagnosticsStorageAccountId'] === 'string' || data['targetBootDiagnosticsStorageAccountId'] instanceof String)) {
            throw new Error("Expected the field `targetBootDiagnosticsStorageAccountId` to be a primitive type in the JSON string but got " + data['targetBootDiagnosticsStorageAccountId']);
        }
        // ensure the json data is a string
        if (data['targetLocation'] && !(typeof data['targetLocation'] === 'string' || data['targetLocation'] instanceof String)) {
            throw new Error("Expected the field `targetLocation` to be a primitive type in the JSON string but got " + data['targetLocation']);
        }
        // ensure the json data is a string
        if (data['targetNetworkId'] && !(typeof data['targetNetworkId'] === 'string' || data['targetNetworkId'] instanceof String)) {
            throw new Error("Expected the field `targetNetworkId` to be a primitive type in the JSON string but got " + data['targetNetworkId']);
        }
        // ensure the json data is a string
        if (data['targetResourceGroupId'] && !(typeof data['targetResourceGroupId'] === 'string' || data['targetResourceGroupId'] instanceof String)) {
            throw new Error("Expected the field `targetResourceGroupId` to be a primitive type in the JSON string but got " + data['targetResourceGroupId']);
        }
        // ensure the json data is a string
        if (data['targetVmName'] && !(typeof data['targetVmName'] === 'string' || data['targetVmName'] instanceof String)) {
            throw new Error("Expected the field `targetVmName` to be a primitive type in the JSON string but got " + data['targetVmName']);
        }
        // ensure the json data is a string
        if (data['targetVmSize'] && !(typeof data['targetVmSize'] === 'string' || data['targetVmSize'] instanceof String)) {
            throw new Error("Expected the field `targetVmSize` to be a primitive type in the JSON string but got " + data['targetVmSize']);
        }
        if (data['vmNics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vmNics'])) {
                throw new Error("Expected the field `vmNics` to be an array in the JSON data but got " + data['vmNics']);
            }
            // validate the optional field `vmNics` (array)
            for (const item of data['vmNics']) {
                VMwareCbtNicDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['vmwareMachineId'] && !(typeof data['vmwareMachineId'] === 'string' || data['vmwareMachineId'] instanceof String)) {
            throw new Error("Expected the field `vmwareMachineId` to be a primitive type in the JSON string but got " + data['vmwareMachineId']);
        }

        return true;
    }


}



/**
 * The data mover RunAs account Id.
 * @member {String} dataMoverRunAsAccountId
 */
VMwareCbtMigrationDetails.prototype['dataMoverRunAsAccountId'] = undefined;

/**
 * The initial seeding progress percentage.
 * @member {Number} initialSeedingProgressPercentage
 */
VMwareCbtMigrationDetails.prototype['initialSeedingProgressPercentage'] = undefined;

/**
 * The last recovery point Id.
 * @member {String} lastRecoveryPointId
 */
VMwareCbtMigrationDetails.prototype['lastRecoveryPointId'] = undefined;

/**
 * The last recovery point received time.
 * @member {Date} lastRecoveryPointReceived
 */
VMwareCbtMigrationDetails.prototype['lastRecoveryPointReceived'] = undefined;

/**
 * License Type of the VM to be used.
 * @member {String} licenseType
 */
VMwareCbtMigrationDetails.prototype['licenseType'] = undefined;

/**
 * The migration progress percentage.
 * @member {Number} migrationProgressPercentage
 */
VMwareCbtMigrationDetails.prototype['migrationProgressPercentage'] = undefined;

/**
 * The recovery point Id to which the VM was migrated.
 * @member {String} migrationRecoveryPointId
 */
VMwareCbtMigrationDetails.prototype['migrationRecoveryPointId'] = undefined;

/**
 * The type of the OS on the VM.
 * @member {String} osType
 */
VMwareCbtMigrationDetails.prototype['osType'] = undefined;

/**
 * A value indicating whether auto resync is to be done.
 * @member {String} performAutoResync
 */
VMwareCbtMigrationDetails.prototype['performAutoResync'] = undefined;

/**
 * The list of protected disks.
 * @member {Array.<module:model/VMwareCbtProtectedDiskDetails>} protectedDisks
 */
VMwareCbtMigrationDetails.prototype['protectedDisks'] = undefined;

/**
 * The resync progress percentage.
 * @member {Number} resyncProgressPercentage
 */
VMwareCbtMigrationDetails.prototype['resyncProgressPercentage'] = undefined;

/**
 * The resync state.
 * @member {module:model/VMwareCbtMigrationDetails.ResyncStateEnum} resyncState
 */
VMwareCbtMigrationDetails.prototype['resyncState'] = undefined;

/**
 * The snapshot RunAs account Id.
 * @member {String} snapshotRunAsAccountId
 */
VMwareCbtMigrationDetails.prototype['snapshotRunAsAccountId'] = undefined;

/**
 * The target availability set Id.
 * @member {String} targetAvailabilitySetId
 */
VMwareCbtMigrationDetails.prototype['targetAvailabilitySetId'] = undefined;

/**
 * The target boot diagnostics storage account ARM Id.
 * @member {String} targetBootDiagnosticsStorageAccountId
 */
VMwareCbtMigrationDetails.prototype['targetBootDiagnosticsStorageAccountId'] = undefined;

/**
 * The target location.
 * @member {String} targetLocation
 */
VMwareCbtMigrationDetails.prototype['targetLocation'] = undefined;

/**
 * The target network Id.
 * @member {String} targetNetworkId
 */
VMwareCbtMigrationDetails.prototype['targetNetworkId'] = undefined;

/**
 * The target resource group Id.
 * @member {String} targetResourceGroupId
 */
VMwareCbtMigrationDetails.prototype['targetResourceGroupId'] = undefined;

/**
 * Target VM name.
 * @member {String} targetVmName
 */
VMwareCbtMigrationDetails.prototype['targetVmName'] = undefined;

/**
 * The target VM size.
 * @member {String} targetVmSize
 */
VMwareCbtMigrationDetails.prototype['targetVmSize'] = undefined;

/**
 * The network details.
 * @member {Array.<module:model/VMwareCbtNicDetails>} vmNics
 */
VMwareCbtMigrationDetails.prototype['vmNics'] = undefined;

/**
 * The ARM Id of the VM discovered in VMware.
 * @member {String} vmwareMachineId
 */
VMwareCbtMigrationDetails.prototype['vmwareMachineId'] = undefined;


// Implement MigrationProviderSpecificSettings interface:
/**
 * Gets the instance type.
 * @member {String} instanceType
 */
MigrationProviderSpecificSettings.prototype['instanceType'] = undefined;



/**
 * Allowed values for the <code>resyncState</code> property.
 * @enum {String}
 * @readonly
 */
VMwareCbtMigrationDetails['ResyncStateEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "PreparedForResynchronization"
     * @const
     */
    "PreparedForResynchronization": "PreparedForResynchronization",

    /**
     * value: "StartedResynchronization"
     * @const
     */
    "StartedResynchronization": "StartedResynchronization"
};



export default VMwareCbtMigrationDetails;

