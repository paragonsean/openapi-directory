/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVMwareCbtNicDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVMwareCbtNicDetails::OAIVMwareCbtNicDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVMwareCbtNicDetails::OAIVMwareCbtNicDetails() {
    this->initializeModel();
}

OAIVMwareCbtNicDetails::~OAIVMwareCbtNicDetails() {}

void OAIVMwareCbtNicDetails::initializeModel() {

    m_is_primary_nic_isSet = false;
    m_is_primary_nic_isValid = false;

    m_is_selected_for_migration_isSet = false;
    m_is_selected_for_migration_isValid = false;

    m_nic_id_isSet = false;
    m_nic_id_isValid = false;

    m_source_ip_address_isSet = false;
    m_source_ip_address_isValid = false;

    m_source_ip_address_type_isSet = false;
    m_source_ip_address_type_isValid = false;

    m_source_network_id_isSet = false;
    m_source_network_id_isValid = false;

    m_target_ip_address_isSet = false;
    m_target_ip_address_isValid = false;

    m_target_ip_address_type_isSet = false;
    m_target_ip_address_type_isValid = false;

    m_target_subnet_name_isSet = false;
    m_target_subnet_name_isValid = false;
}

void OAIVMwareCbtNicDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVMwareCbtNicDetails::fromJsonObject(QJsonObject json) {

    m_is_primary_nic_isValid = ::OpenAPI::fromJsonValue(m_is_primary_nic, json[QString("isPrimaryNic")]);
    m_is_primary_nic_isSet = !json[QString("isPrimaryNic")].isNull() && m_is_primary_nic_isValid;

    m_is_selected_for_migration_isValid = ::OpenAPI::fromJsonValue(m_is_selected_for_migration, json[QString("isSelectedForMigration")]);
    m_is_selected_for_migration_isSet = !json[QString("isSelectedForMigration")].isNull() && m_is_selected_for_migration_isValid;

    m_nic_id_isValid = ::OpenAPI::fromJsonValue(m_nic_id, json[QString("nicId")]);
    m_nic_id_isSet = !json[QString("nicId")].isNull() && m_nic_id_isValid;

    m_source_ip_address_isValid = ::OpenAPI::fromJsonValue(m_source_ip_address, json[QString("sourceIPAddress")]);
    m_source_ip_address_isSet = !json[QString("sourceIPAddress")].isNull() && m_source_ip_address_isValid;

    m_source_ip_address_type_isValid = ::OpenAPI::fromJsonValue(m_source_ip_address_type, json[QString("sourceIPAddressType")]);
    m_source_ip_address_type_isSet = !json[QString("sourceIPAddressType")].isNull() && m_source_ip_address_type_isValid;

    m_source_network_id_isValid = ::OpenAPI::fromJsonValue(m_source_network_id, json[QString("sourceNetworkId")]);
    m_source_network_id_isSet = !json[QString("sourceNetworkId")].isNull() && m_source_network_id_isValid;

    m_target_ip_address_isValid = ::OpenAPI::fromJsonValue(m_target_ip_address, json[QString("targetIPAddress")]);
    m_target_ip_address_isSet = !json[QString("targetIPAddress")].isNull() && m_target_ip_address_isValid;

    m_target_ip_address_type_isValid = ::OpenAPI::fromJsonValue(m_target_ip_address_type, json[QString("targetIPAddressType")]);
    m_target_ip_address_type_isSet = !json[QString("targetIPAddressType")].isNull() && m_target_ip_address_type_isValid;

    m_target_subnet_name_isValid = ::OpenAPI::fromJsonValue(m_target_subnet_name, json[QString("targetSubnetName")]);
    m_target_subnet_name_isSet = !json[QString("targetSubnetName")].isNull() && m_target_subnet_name_isValid;
}

QString OAIVMwareCbtNicDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVMwareCbtNicDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_is_primary_nic_isSet) {
        obj.insert(QString("isPrimaryNic"), ::OpenAPI::toJsonValue(m_is_primary_nic));
    }
    if (m_is_selected_for_migration_isSet) {
        obj.insert(QString("isSelectedForMigration"), ::OpenAPI::toJsonValue(m_is_selected_for_migration));
    }
    if (m_nic_id_isSet) {
        obj.insert(QString("nicId"), ::OpenAPI::toJsonValue(m_nic_id));
    }
    if (m_source_ip_address_isSet) {
        obj.insert(QString("sourceIPAddress"), ::OpenAPI::toJsonValue(m_source_ip_address));
    }
    if (m_source_ip_address_type_isSet) {
        obj.insert(QString("sourceIPAddressType"), ::OpenAPI::toJsonValue(m_source_ip_address_type));
    }
    if (m_source_network_id_isSet) {
        obj.insert(QString("sourceNetworkId"), ::OpenAPI::toJsonValue(m_source_network_id));
    }
    if (m_target_ip_address_isSet) {
        obj.insert(QString("targetIPAddress"), ::OpenAPI::toJsonValue(m_target_ip_address));
    }
    if (m_target_ip_address_type_isSet) {
        obj.insert(QString("targetIPAddressType"), ::OpenAPI::toJsonValue(m_target_ip_address_type));
    }
    if (m_target_subnet_name_isSet) {
        obj.insert(QString("targetSubnetName"), ::OpenAPI::toJsonValue(m_target_subnet_name));
    }
    return obj;
}

QString OAIVMwareCbtNicDetails::getIsPrimaryNic() const {
    return m_is_primary_nic;
}
void OAIVMwareCbtNicDetails::setIsPrimaryNic(const QString &is_primary_nic) {
    m_is_primary_nic = is_primary_nic;
    m_is_primary_nic_isSet = true;
}

bool OAIVMwareCbtNicDetails::is_is_primary_nic_Set() const{
    return m_is_primary_nic_isSet;
}

bool OAIVMwareCbtNicDetails::is_is_primary_nic_Valid() const{
    return m_is_primary_nic_isValid;
}

QString OAIVMwareCbtNicDetails::getIsSelectedForMigration() const {
    return m_is_selected_for_migration;
}
void OAIVMwareCbtNicDetails::setIsSelectedForMigration(const QString &is_selected_for_migration) {
    m_is_selected_for_migration = is_selected_for_migration;
    m_is_selected_for_migration_isSet = true;
}

bool OAIVMwareCbtNicDetails::is_is_selected_for_migration_Set() const{
    return m_is_selected_for_migration_isSet;
}

bool OAIVMwareCbtNicDetails::is_is_selected_for_migration_Valid() const{
    return m_is_selected_for_migration_isValid;
}

QString OAIVMwareCbtNicDetails::getNicId() const {
    return m_nic_id;
}
void OAIVMwareCbtNicDetails::setNicId(const QString &nic_id) {
    m_nic_id = nic_id;
    m_nic_id_isSet = true;
}

bool OAIVMwareCbtNicDetails::is_nic_id_Set() const{
    return m_nic_id_isSet;
}

bool OAIVMwareCbtNicDetails::is_nic_id_Valid() const{
    return m_nic_id_isValid;
}

QString OAIVMwareCbtNicDetails::getSourceIpAddress() const {
    return m_source_ip_address;
}
void OAIVMwareCbtNicDetails::setSourceIpAddress(const QString &source_ip_address) {
    m_source_ip_address = source_ip_address;
    m_source_ip_address_isSet = true;
}

bool OAIVMwareCbtNicDetails::is_source_ip_address_Set() const{
    return m_source_ip_address_isSet;
}

bool OAIVMwareCbtNicDetails::is_source_ip_address_Valid() const{
    return m_source_ip_address_isValid;
}

QString OAIVMwareCbtNicDetails::getSourceIpAddressType() const {
    return m_source_ip_address_type;
}
void OAIVMwareCbtNicDetails::setSourceIpAddressType(const QString &source_ip_address_type) {
    m_source_ip_address_type = source_ip_address_type;
    m_source_ip_address_type_isSet = true;
}

bool OAIVMwareCbtNicDetails::is_source_ip_address_type_Set() const{
    return m_source_ip_address_type_isSet;
}

bool OAIVMwareCbtNicDetails::is_source_ip_address_type_Valid() const{
    return m_source_ip_address_type_isValid;
}

QString OAIVMwareCbtNicDetails::getSourceNetworkId() const {
    return m_source_network_id;
}
void OAIVMwareCbtNicDetails::setSourceNetworkId(const QString &source_network_id) {
    m_source_network_id = source_network_id;
    m_source_network_id_isSet = true;
}

bool OAIVMwareCbtNicDetails::is_source_network_id_Set() const{
    return m_source_network_id_isSet;
}

bool OAIVMwareCbtNicDetails::is_source_network_id_Valid() const{
    return m_source_network_id_isValid;
}

QString OAIVMwareCbtNicDetails::getTargetIpAddress() const {
    return m_target_ip_address;
}
void OAIVMwareCbtNicDetails::setTargetIpAddress(const QString &target_ip_address) {
    m_target_ip_address = target_ip_address;
    m_target_ip_address_isSet = true;
}

bool OAIVMwareCbtNicDetails::is_target_ip_address_Set() const{
    return m_target_ip_address_isSet;
}

bool OAIVMwareCbtNicDetails::is_target_ip_address_Valid() const{
    return m_target_ip_address_isValid;
}

QString OAIVMwareCbtNicDetails::getTargetIpAddressType() const {
    return m_target_ip_address_type;
}
void OAIVMwareCbtNicDetails::setTargetIpAddressType(const QString &target_ip_address_type) {
    m_target_ip_address_type = target_ip_address_type;
    m_target_ip_address_type_isSet = true;
}

bool OAIVMwareCbtNicDetails::is_target_ip_address_type_Set() const{
    return m_target_ip_address_type_isSet;
}

bool OAIVMwareCbtNicDetails::is_target_ip_address_type_Valid() const{
    return m_target_ip_address_type_isValid;
}

QString OAIVMwareCbtNicDetails::getTargetSubnetName() const {
    return m_target_subnet_name;
}
void OAIVMwareCbtNicDetails::setTargetSubnetName(const QString &target_subnet_name) {
    m_target_subnet_name = target_subnet_name;
    m_target_subnet_name_isSet = true;
}

bool OAIVMwareCbtNicDetails::is_target_subnet_name_Set() const{
    return m_target_subnet_name_isSet;
}

bool OAIVMwareCbtNicDetails::is_target_subnet_name_Valid() const{
    return m_target_subnet_name_isValid;
}

bool OAIVMwareCbtNicDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_primary_nic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_selected_for_migration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip_address_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_ip_address_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_subnet_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVMwareCbtNicDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
