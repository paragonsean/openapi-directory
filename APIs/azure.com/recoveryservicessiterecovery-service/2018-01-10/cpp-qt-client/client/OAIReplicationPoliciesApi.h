/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReplicationPoliciesApi_H
#define OAI_OAIReplicationPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreatePolicyInput.h"
#include "OAIPolicy.h"
#include "OAIPolicyCollection.h"
#include "OAIUpdatePolicyInput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReplicationPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIReplicationPoliciesApi(const int timeOut = 0);
    ~OAIReplicationPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  input OAICreatePolicyInput [required]
    */
    virtual void replicationPoliciesCreate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &policy_name, const OAICreatePolicyInput &input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  policy_name QString [required]
    */
    virtual void replicationPoliciesDelete(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &policy_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  policy_name QString [required]
    */
    virtual void replicationPoliciesGet(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &policy_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void replicationPoliciesList(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  input OAIUpdatePolicyInput [required]
    */
    virtual void replicationPoliciesUpdate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &policy_name, const OAIUpdatePolicyInput &input);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void replicationPoliciesCreateCallback(OAIHttpRequestWorker *worker);
    void replicationPoliciesDeleteCallback(OAIHttpRequestWorker *worker);
    void replicationPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void replicationPoliciesListCallback(OAIHttpRequestWorker *worker);
    void replicationPoliciesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void replicationPoliciesCreateSignal(OAIPolicy summary);
    void replicationPoliciesDeleteSignal();
    void replicationPoliciesGetSignal(OAIPolicy summary);
    void replicationPoliciesListSignal(OAIPolicyCollection summary);
    void replicationPoliciesUpdateSignal(OAIPolicy summary);


    void replicationPoliciesCreateSignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void replicationPoliciesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void replicationPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void replicationPoliciesListSignalFull(OAIHttpRequestWorker *worker, OAIPolicyCollection summary);
    void replicationPoliciesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);

    Q_DECL_DEPRECATED_X("Use replicationPoliciesCreateSignalError() instead")
    void replicationPoliciesCreateSignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationPoliciesCreateSignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationPoliciesDeleteSignalError() instead")
    void replicationPoliciesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationPoliciesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationPoliciesGetSignalError() instead")
    void replicationPoliciesGetSignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationPoliciesGetSignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationPoliciesListSignalError() instead")
    void replicationPoliciesListSignalE(OAIPolicyCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationPoliciesListSignalError(OAIPolicyCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationPoliciesUpdateSignalError() instead")
    void replicationPoliciesUpdateSignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationPoliciesUpdateSignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use replicationPoliciesCreateSignalErrorFull() instead")
    void replicationPoliciesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationPoliciesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationPoliciesDeleteSignalErrorFull() instead")
    void replicationPoliciesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationPoliciesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationPoliciesGetSignalErrorFull() instead")
    void replicationPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationPoliciesListSignalErrorFull() instead")
    void replicationPoliciesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationPoliciesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationPoliciesUpdateSignalErrorFull() instead")
    void replicationPoliciesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationPoliciesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
