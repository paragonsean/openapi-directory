/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInMageAzureV2EventDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInMageAzureV2EventDetails::OAIInMageAzureV2EventDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInMageAzureV2EventDetails::OAIInMageAzureV2EventDetails() {
    this->initializeModel();
}

OAIInMageAzureV2EventDetails::~OAIInMageAzureV2EventDetails() {}

void OAIInMageAzureV2EventDetails::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_component_isSet = false;
    m_component_isValid = false;

    m_corrective_action_isSet = false;
    m_corrective_action_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_site_name_isSet = false;
    m_site_name_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIInMageAzureV2EventDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInMageAzureV2EventDetails::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_component_isValid = ::OpenAPI::fromJsonValue(m_component, json[QString("component")]);
    m_component_isSet = !json[QString("component")].isNull() && m_component_isValid;

    m_corrective_action_isValid = ::OpenAPI::fromJsonValue(m_corrective_action, json[QString("correctiveAction")]);
    m_corrective_action_isSet = !json[QString("correctiveAction")].isNull() && m_corrective_action_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_site_name_isValid = ::OpenAPI::fromJsonValue(m_site_name, json[QString("siteName")]);
    m_site_name_isSet = !json[QString("siteName")].isNull() && m_site_name_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIInMageAzureV2EventDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInMageAzureV2EventDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_component_isSet) {
        obj.insert(QString("component"), ::OpenAPI::toJsonValue(m_component));
    }
    if (m_corrective_action_isSet) {
        obj.insert(QString("correctiveAction"), ::OpenAPI::toJsonValue(m_corrective_action));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_site_name_isSet) {
        obj.insert(QString("siteName"), ::OpenAPI::toJsonValue(m_site_name));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIInMageAzureV2EventDetails::getCategory() const {
    return m_category;
}
void OAIInMageAzureV2EventDetails::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIInMageAzureV2EventDetails::is_category_Set() const{
    return m_category_isSet;
}

bool OAIInMageAzureV2EventDetails::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIInMageAzureV2EventDetails::getComponent() const {
    return m_component;
}
void OAIInMageAzureV2EventDetails::setComponent(const QString &component) {
    m_component = component;
    m_component_isSet = true;
}

bool OAIInMageAzureV2EventDetails::is_component_Set() const{
    return m_component_isSet;
}

bool OAIInMageAzureV2EventDetails::is_component_Valid() const{
    return m_component_isValid;
}

QString OAIInMageAzureV2EventDetails::getCorrectiveAction() const {
    return m_corrective_action;
}
void OAIInMageAzureV2EventDetails::setCorrectiveAction(const QString &corrective_action) {
    m_corrective_action = corrective_action;
    m_corrective_action_isSet = true;
}

bool OAIInMageAzureV2EventDetails::is_corrective_action_Set() const{
    return m_corrective_action_isSet;
}

bool OAIInMageAzureV2EventDetails::is_corrective_action_Valid() const{
    return m_corrective_action_isValid;
}

QString OAIInMageAzureV2EventDetails::getDetails() const {
    return m_details;
}
void OAIInMageAzureV2EventDetails::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIInMageAzureV2EventDetails::is_details_Set() const{
    return m_details_isSet;
}

bool OAIInMageAzureV2EventDetails::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIInMageAzureV2EventDetails::getEventType() const {
    return m_event_type;
}
void OAIInMageAzureV2EventDetails::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIInMageAzureV2EventDetails::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIInMageAzureV2EventDetails::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIInMageAzureV2EventDetails::getSiteName() const {
    return m_site_name;
}
void OAIInMageAzureV2EventDetails::setSiteName(const QString &site_name) {
    m_site_name = site_name;
    m_site_name_isSet = true;
}

bool OAIInMageAzureV2EventDetails::is_site_name_Set() const{
    return m_site_name_isSet;
}

bool OAIInMageAzureV2EventDetails::is_site_name_Valid() const{
    return m_site_name_isValid;
}

QString OAIInMageAzureV2EventDetails::getSummary() const {
    return m_summary;
}
void OAIInMageAzureV2EventDetails::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIInMageAzureV2EventDetails::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIInMageAzureV2EventDetails::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIInMageAzureV2EventDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIInMageAzureV2EventDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInMageAzureV2EventDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInMageAzureV2EventDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIInMageAzureV2EventDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corrective_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInMageAzureV2EventDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
