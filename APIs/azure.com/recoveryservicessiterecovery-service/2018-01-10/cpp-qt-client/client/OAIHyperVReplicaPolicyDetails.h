/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHyperVReplicaPolicyDetails.h
 *
 * Hyper-V Replica Blue specific protection profile details.
 */

#ifndef OAIHyperVReplicaPolicyDetails_H
#define OAIHyperVReplicaPolicyDetails_H

#include <QJsonObject>

#include "OAIPolicyProviderSpecificDetails.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHyperVReplicaPolicyDetails : public OAIObject {
public:
    OAIHyperVReplicaPolicyDetails();
    OAIHyperVReplicaPolicyDetails(QString json);
    ~OAIHyperVReplicaPolicyDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAllowedAuthenticationType() const;
    void setAllowedAuthenticationType(const qint32 &allowed_authentication_type);
    bool is_allowed_authentication_type_Set() const;
    bool is_allowed_authentication_type_Valid() const;

    qint32 getApplicationConsistentSnapshotFrequencyInHours() const;
    void setApplicationConsistentSnapshotFrequencyInHours(const qint32 &application_consistent_snapshot_frequency_in_hours);
    bool is_application_consistent_snapshot_frequency_in_hours_Set() const;
    bool is_application_consistent_snapshot_frequency_in_hours_Valid() const;

    QString getCompression() const;
    void setCompression(const QString &compression);
    bool is_compression_Set() const;
    bool is_compression_Valid() const;

    QString getInitialReplicationMethod() const;
    void setInitialReplicationMethod(const QString &initial_replication_method);
    bool is_initial_replication_method_Set() const;
    bool is_initial_replication_method_Valid() const;

    QString getOfflineReplicationExportPath() const;
    void setOfflineReplicationExportPath(const QString &offline_replication_export_path);
    bool is_offline_replication_export_path_Set() const;
    bool is_offline_replication_export_path_Valid() const;

    QString getOfflineReplicationImportPath() const;
    void setOfflineReplicationImportPath(const QString &offline_replication_import_path);
    bool is_offline_replication_import_path_Set() const;
    bool is_offline_replication_import_path_Valid() const;

    QString getOnlineReplicationStartTime() const;
    void setOnlineReplicationStartTime(const QString &online_replication_start_time);
    bool is_online_replication_start_time_Set() const;
    bool is_online_replication_start_time_Valid() const;

    qint32 getRecoveryPoints() const;
    void setRecoveryPoints(const qint32 &recovery_points);
    bool is_recovery_points_Set() const;
    bool is_recovery_points_Valid() const;

    QString getReplicaDeletionOption() const;
    void setReplicaDeletionOption(const QString &replica_deletion_option);
    bool is_replica_deletion_option_Set() const;
    bool is_replica_deletion_option_Valid() const;

    qint32 getReplicationPort() const;
    void setReplicationPort(const qint32 &replication_port);
    bool is_replication_port_Set() const;
    bool is_replication_port_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_allowed_authentication_type;
    bool m_allowed_authentication_type_isSet;
    bool m_allowed_authentication_type_isValid;

    qint32 m_application_consistent_snapshot_frequency_in_hours;
    bool m_application_consistent_snapshot_frequency_in_hours_isSet;
    bool m_application_consistent_snapshot_frequency_in_hours_isValid;

    QString m_compression;
    bool m_compression_isSet;
    bool m_compression_isValid;

    QString m_initial_replication_method;
    bool m_initial_replication_method_isSet;
    bool m_initial_replication_method_isValid;

    QString m_offline_replication_export_path;
    bool m_offline_replication_export_path_isSet;
    bool m_offline_replication_export_path_isValid;

    QString m_offline_replication_import_path;
    bool m_offline_replication_import_path_isSet;
    bool m_offline_replication_import_path_isValid;

    QString m_online_replication_start_time;
    bool m_online_replication_start_time_isSet;
    bool m_online_replication_start_time_isValid;

    qint32 m_recovery_points;
    bool m_recovery_points_isSet;
    bool m_recovery_points_isValid;

    QString m_replica_deletion_option;
    bool m_replica_deletion_option_isSet;
    bool m_replica_deletion_option_isValid;

    qint32 m_replication_port;
    bool m_replication_port_isSet;
    bool m_replication_port_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHyperVReplicaPolicyDetails)

#endif // OAIHyperVReplicaPolicyDetails_H
