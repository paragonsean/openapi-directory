/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVMwareCbtProtectedDiskDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVMwareCbtProtectedDiskDetails::OAIVMwareCbtProtectedDiskDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVMwareCbtProtectedDiskDetails::OAIVMwareCbtProtectedDiskDetails() {
    this->initializeModel();
}

OAIVMwareCbtProtectedDiskDetails::~OAIVMwareCbtProtectedDiskDetails() {}

void OAIVMwareCbtProtectedDiskDetails::initializeModel() {

    m_capacity_in_bytes_isSet = false;
    m_capacity_in_bytes_isValid = false;

    m_disk_id_isSet = false;
    m_disk_id_isValid = false;

    m_disk_name_isSet = false;
    m_disk_name_isValid = false;

    m_disk_path_isSet = false;
    m_disk_path_isValid = false;

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_is_os_disk_isSet = false;
    m_is_os_disk_isValid = false;

    m_log_storage_account_id_isSet = false;
    m_log_storage_account_id_isValid = false;

    m_log_storage_account_sas_secret_name_isSet = false;
    m_log_storage_account_sas_secret_name_isValid = false;

    m_seed_managed_disk_id_isSet = false;
    m_seed_managed_disk_id_isValid = false;

    m_target_managed_disk_id_isSet = false;
    m_target_managed_disk_id_isValid = false;
}

void OAIVMwareCbtProtectedDiskDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVMwareCbtProtectedDiskDetails::fromJsonObject(QJsonObject json) {

    m_capacity_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_capacity_in_bytes, json[QString("capacityInBytes")]);
    m_capacity_in_bytes_isSet = !json[QString("capacityInBytes")].isNull() && m_capacity_in_bytes_isValid;

    m_disk_id_isValid = ::OpenAPI::fromJsonValue(m_disk_id, json[QString("diskId")]);
    m_disk_id_isSet = !json[QString("diskId")].isNull() && m_disk_id_isValid;

    m_disk_name_isValid = ::OpenAPI::fromJsonValue(m_disk_name, json[QString("diskName")]);
    m_disk_name_isSet = !json[QString("diskName")].isNull() && m_disk_name_isValid;

    m_disk_path_isValid = ::OpenAPI::fromJsonValue(m_disk_path, json[QString("diskPath")]);
    m_disk_path_isSet = !json[QString("diskPath")].isNull() && m_disk_path_isValid;

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_is_os_disk_isValid = ::OpenAPI::fromJsonValue(m_is_os_disk, json[QString("isOSDisk")]);
    m_is_os_disk_isSet = !json[QString("isOSDisk")].isNull() && m_is_os_disk_isValid;

    m_log_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_log_storage_account_id, json[QString("logStorageAccountId")]);
    m_log_storage_account_id_isSet = !json[QString("logStorageAccountId")].isNull() && m_log_storage_account_id_isValid;

    m_log_storage_account_sas_secret_name_isValid = ::OpenAPI::fromJsonValue(m_log_storage_account_sas_secret_name, json[QString("logStorageAccountSasSecretName")]);
    m_log_storage_account_sas_secret_name_isSet = !json[QString("logStorageAccountSasSecretName")].isNull() && m_log_storage_account_sas_secret_name_isValid;

    m_seed_managed_disk_id_isValid = ::OpenAPI::fromJsonValue(m_seed_managed_disk_id, json[QString("seedManagedDiskId")]);
    m_seed_managed_disk_id_isSet = !json[QString("seedManagedDiskId")].isNull() && m_seed_managed_disk_id_isValid;

    m_target_managed_disk_id_isValid = ::OpenAPI::fromJsonValue(m_target_managed_disk_id, json[QString("targetManagedDiskId")]);
    m_target_managed_disk_id_isSet = !json[QString("targetManagedDiskId")].isNull() && m_target_managed_disk_id_isValid;
}

QString OAIVMwareCbtProtectedDiskDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVMwareCbtProtectedDiskDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_in_bytes_isSet) {
        obj.insert(QString("capacityInBytes"), ::OpenAPI::toJsonValue(m_capacity_in_bytes));
    }
    if (m_disk_id_isSet) {
        obj.insert(QString("diskId"), ::OpenAPI::toJsonValue(m_disk_id));
    }
    if (m_disk_name_isSet) {
        obj.insert(QString("diskName"), ::OpenAPI::toJsonValue(m_disk_name));
    }
    if (m_disk_path_isSet) {
        obj.insert(QString("diskPath"), ::OpenAPI::toJsonValue(m_disk_path));
    }
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_is_os_disk_isSet) {
        obj.insert(QString("isOSDisk"), ::OpenAPI::toJsonValue(m_is_os_disk));
    }
    if (m_log_storage_account_id_isSet) {
        obj.insert(QString("logStorageAccountId"), ::OpenAPI::toJsonValue(m_log_storage_account_id));
    }
    if (m_log_storage_account_sas_secret_name_isSet) {
        obj.insert(QString("logStorageAccountSasSecretName"), ::OpenAPI::toJsonValue(m_log_storage_account_sas_secret_name));
    }
    if (m_seed_managed_disk_id_isSet) {
        obj.insert(QString("seedManagedDiskId"), ::OpenAPI::toJsonValue(m_seed_managed_disk_id));
    }
    if (m_target_managed_disk_id_isSet) {
        obj.insert(QString("targetManagedDiskId"), ::OpenAPI::toJsonValue(m_target_managed_disk_id));
    }
    return obj;
}

qint64 OAIVMwareCbtProtectedDiskDetails::getCapacityInBytes() const {
    return m_capacity_in_bytes;
}
void OAIVMwareCbtProtectedDiskDetails::setCapacityInBytes(const qint64 &capacity_in_bytes) {
    m_capacity_in_bytes = capacity_in_bytes;
    m_capacity_in_bytes_isSet = true;
}

bool OAIVMwareCbtProtectedDiskDetails::is_capacity_in_bytes_Set() const{
    return m_capacity_in_bytes_isSet;
}

bool OAIVMwareCbtProtectedDiskDetails::is_capacity_in_bytes_Valid() const{
    return m_capacity_in_bytes_isValid;
}

QString OAIVMwareCbtProtectedDiskDetails::getDiskId() const {
    return m_disk_id;
}
void OAIVMwareCbtProtectedDiskDetails::setDiskId(const QString &disk_id) {
    m_disk_id = disk_id;
    m_disk_id_isSet = true;
}

bool OAIVMwareCbtProtectedDiskDetails::is_disk_id_Set() const{
    return m_disk_id_isSet;
}

bool OAIVMwareCbtProtectedDiskDetails::is_disk_id_Valid() const{
    return m_disk_id_isValid;
}

QString OAIVMwareCbtProtectedDiskDetails::getDiskName() const {
    return m_disk_name;
}
void OAIVMwareCbtProtectedDiskDetails::setDiskName(const QString &disk_name) {
    m_disk_name = disk_name;
    m_disk_name_isSet = true;
}

bool OAIVMwareCbtProtectedDiskDetails::is_disk_name_Set() const{
    return m_disk_name_isSet;
}

bool OAIVMwareCbtProtectedDiskDetails::is_disk_name_Valid() const{
    return m_disk_name_isValid;
}

QString OAIVMwareCbtProtectedDiskDetails::getDiskPath() const {
    return m_disk_path;
}
void OAIVMwareCbtProtectedDiskDetails::setDiskPath(const QString &disk_path) {
    m_disk_path = disk_path;
    m_disk_path_isSet = true;
}

bool OAIVMwareCbtProtectedDiskDetails::is_disk_path_Set() const{
    return m_disk_path_isSet;
}

bool OAIVMwareCbtProtectedDiskDetails::is_disk_path_Valid() const{
    return m_disk_path_isValid;
}

QString OAIVMwareCbtProtectedDiskDetails::getDiskType() const {
    return m_disk_type;
}
void OAIVMwareCbtProtectedDiskDetails::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIVMwareCbtProtectedDiskDetails::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIVMwareCbtProtectedDiskDetails::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

QString OAIVMwareCbtProtectedDiskDetails::getIsOsDisk() const {
    return m_is_os_disk;
}
void OAIVMwareCbtProtectedDiskDetails::setIsOsDisk(const QString &is_os_disk) {
    m_is_os_disk = is_os_disk;
    m_is_os_disk_isSet = true;
}

bool OAIVMwareCbtProtectedDiskDetails::is_is_os_disk_Set() const{
    return m_is_os_disk_isSet;
}

bool OAIVMwareCbtProtectedDiskDetails::is_is_os_disk_Valid() const{
    return m_is_os_disk_isValid;
}

QString OAIVMwareCbtProtectedDiskDetails::getLogStorageAccountId() const {
    return m_log_storage_account_id;
}
void OAIVMwareCbtProtectedDiskDetails::setLogStorageAccountId(const QString &log_storage_account_id) {
    m_log_storage_account_id = log_storage_account_id;
    m_log_storage_account_id_isSet = true;
}

bool OAIVMwareCbtProtectedDiskDetails::is_log_storage_account_id_Set() const{
    return m_log_storage_account_id_isSet;
}

bool OAIVMwareCbtProtectedDiskDetails::is_log_storage_account_id_Valid() const{
    return m_log_storage_account_id_isValid;
}

QString OAIVMwareCbtProtectedDiskDetails::getLogStorageAccountSasSecretName() const {
    return m_log_storage_account_sas_secret_name;
}
void OAIVMwareCbtProtectedDiskDetails::setLogStorageAccountSasSecretName(const QString &log_storage_account_sas_secret_name) {
    m_log_storage_account_sas_secret_name = log_storage_account_sas_secret_name;
    m_log_storage_account_sas_secret_name_isSet = true;
}

bool OAIVMwareCbtProtectedDiskDetails::is_log_storage_account_sas_secret_name_Set() const{
    return m_log_storage_account_sas_secret_name_isSet;
}

bool OAIVMwareCbtProtectedDiskDetails::is_log_storage_account_sas_secret_name_Valid() const{
    return m_log_storage_account_sas_secret_name_isValid;
}

QString OAIVMwareCbtProtectedDiskDetails::getSeedManagedDiskId() const {
    return m_seed_managed_disk_id;
}
void OAIVMwareCbtProtectedDiskDetails::setSeedManagedDiskId(const QString &seed_managed_disk_id) {
    m_seed_managed_disk_id = seed_managed_disk_id;
    m_seed_managed_disk_id_isSet = true;
}

bool OAIVMwareCbtProtectedDiskDetails::is_seed_managed_disk_id_Set() const{
    return m_seed_managed_disk_id_isSet;
}

bool OAIVMwareCbtProtectedDiskDetails::is_seed_managed_disk_id_Valid() const{
    return m_seed_managed_disk_id_isValid;
}

QString OAIVMwareCbtProtectedDiskDetails::getTargetManagedDiskId() const {
    return m_target_managed_disk_id;
}
void OAIVMwareCbtProtectedDiskDetails::setTargetManagedDiskId(const QString &target_managed_disk_id) {
    m_target_managed_disk_id = target_managed_disk_id;
    m_target_managed_disk_id_isSet = true;
}

bool OAIVMwareCbtProtectedDiskDetails::is_target_managed_disk_id_Set() const{
    return m_target_managed_disk_id_isSet;
}

bool OAIVMwareCbtProtectedDiskDetails::is_target_managed_disk_id_Valid() const{
    return m_target_managed_disk_id_isValid;
}

bool OAIVMwareCbtProtectedDiskDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_os_disk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_storage_account_sas_secret_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seed_managed_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_managed_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVMwareCbtProtectedDiskDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
