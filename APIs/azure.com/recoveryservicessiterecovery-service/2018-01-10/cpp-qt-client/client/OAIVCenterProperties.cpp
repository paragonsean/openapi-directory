/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVCenterProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVCenterProperties::OAIVCenterProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVCenterProperties::OAIVCenterProperties() {
    this->initializeModel();
}

OAIVCenterProperties::~OAIVCenterProperties() {}

void OAIVCenterProperties::initializeModel() {

    m_discovery_status_isSet = false;
    m_discovery_status_isValid = false;

    m_fabric_arm_resource_name_isSet = false;
    m_fabric_arm_resource_name_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_health_errors_isSet = false;
    m_health_errors_isValid = false;

    m_infrastructure_id_isSet = false;
    m_infrastructure_id_isValid = false;

    m_internal_id_isSet = false;
    m_internal_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_last_heartbeat_isSet = false;
    m_last_heartbeat_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_process_server_id_isSet = false;
    m_process_server_id_isValid = false;

    m_run_as_account_id_isSet = false;
    m_run_as_account_id_isValid = false;
}

void OAIVCenterProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVCenterProperties::fromJsonObject(QJsonObject json) {

    m_discovery_status_isValid = ::OpenAPI::fromJsonValue(m_discovery_status, json[QString("discoveryStatus")]);
    m_discovery_status_isSet = !json[QString("discoveryStatus")].isNull() && m_discovery_status_isValid;

    m_fabric_arm_resource_name_isValid = ::OpenAPI::fromJsonValue(m_fabric_arm_resource_name, json[QString("fabricArmResourceName")]);
    m_fabric_arm_resource_name_isSet = !json[QString("fabricArmResourceName")].isNull() && m_fabric_arm_resource_name_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_health_errors_isValid = ::OpenAPI::fromJsonValue(m_health_errors, json[QString("healthErrors")]);
    m_health_errors_isSet = !json[QString("healthErrors")].isNull() && m_health_errors_isValid;

    m_infrastructure_id_isValid = ::OpenAPI::fromJsonValue(m_infrastructure_id, json[QString("infrastructureId")]);
    m_infrastructure_id_isSet = !json[QString("infrastructureId")].isNull() && m_infrastructure_id_isValid;

    m_internal_id_isValid = ::OpenAPI::fromJsonValue(m_internal_id, json[QString("internalId")]);
    m_internal_id_isSet = !json[QString("internalId")].isNull() && m_internal_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_last_heartbeat_isValid = ::OpenAPI::fromJsonValue(m_last_heartbeat, json[QString("lastHeartbeat")]);
    m_last_heartbeat_isSet = !json[QString("lastHeartbeat")].isNull() && m_last_heartbeat_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_process_server_id_isValid = ::OpenAPI::fromJsonValue(m_process_server_id, json[QString("processServerId")]);
    m_process_server_id_isSet = !json[QString("processServerId")].isNull() && m_process_server_id_isValid;

    m_run_as_account_id_isValid = ::OpenAPI::fromJsonValue(m_run_as_account_id, json[QString("runAsAccountId")]);
    m_run_as_account_id_isSet = !json[QString("runAsAccountId")].isNull() && m_run_as_account_id_isValid;
}

QString OAIVCenterProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVCenterProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_discovery_status_isSet) {
        obj.insert(QString("discoveryStatus"), ::OpenAPI::toJsonValue(m_discovery_status));
    }
    if (m_fabric_arm_resource_name_isSet) {
        obj.insert(QString("fabricArmResourceName"), ::OpenAPI::toJsonValue(m_fabric_arm_resource_name));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_health_errors.size() > 0) {
        obj.insert(QString("healthErrors"), ::OpenAPI::toJsonValue(m_health_errors));
    }
    if (m_infrastructure_id_isSet) {
        obj.insert(QString("infrastructureId"), ::OpenAPI::toJsonValue(m_infrastructure_id));
    }
    if (m_internal_id_isSet) {
        obj.insert(QString("internalId"), ::OpenAPI::toJsonValue(m_internal_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_last_heartbeat_isSet) {
        obj.insert(QString("lastHeartbeat"), ::OpenAPI::toJsonValue(m_last_heartbeat));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_process_server_id_isSet) {
        obj.insert(QString("processServerId"), ::OpenAPI::toJsonValue(m_process_server_id));
    }
    if (m_run_as_account_id_isSet) {
        obj.insert(QString("runAsAccountId"), ::OpenAPI::toJsonValue(m_run_as_account_id));
    }
    return obj;
}

QString OAIVCenterProperties::getDiscoveryStatus() const {
    return m_discovery_status;
}
void OAIVCenterProperties::setDiscoveryStatus(const QString &discovery_status) {
    m_discovery_status = discovery_status;
    m_discovery_status_isSet = true;
}

bool OAIVCenterProperties::is_discovery_status_Set() const{
    return m_discovery_status_isSet;
}

bool OAIVCenterProperties::is_discovery_status_Valid() const{
    return m_discovery_status_isValid;
}

QString OAIVCenterProperties::getFabricArmResourceName() const {
    return m_fabric_arm_resource_name;
}
void OAIVCenterProperties::setFabricArmResourceName(const QString &fabric_arm_resource_name) {
    m_fabric_arm_resource_name = fabric_arm_resource_name;
    m_fabric_arm_resource_name_isSet = true;
}

bool OAIVCenterProperties::is_fabric_arm_resource_name_Set() const{
    return m_fabric_arm_resource_name_isSet;
}

bool OAIVCenterProperties::is_fabric_arm_resource_name_Valid() const{
    return m_fabric_arm_resource_name_isValid;
}

QString OAIVCenterProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIVCenterProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIVCenterProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIVCenterProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QList<OAIHealthError> OAIVCenterProperties::getHealthErrors() const {
    return m_health_errors;
}
void OAIVCenterProperties::setHealthErrors(const QList<OAIHealthError> &health_errors) {
    m_health_errors = health_errors;
    m_health_errors_isSet = true;
}

bool OAIVCenterProperties::is_health_errors_Set() const{
    return m_health_errors_isSet;
}

bool OAIVCenterProperties::is_health_errors_Valid() const{
    return m_health_errors_isValid;
}

QString OAIVCenterProperties::getInfrastructureId() const {
    return m_infrastructure_id;
}
void OAIVCenterProperties::setInfrastructureId(const QString &infrastructure_id) {
    m_infrastructure_id = infrastructure_id;
    m_infrastructure_id_isSet = true;
}

bool OAIVCenterProperties::is_infrastructure_id_Set() const{
    return m_infrastructure_id_isSet;
}

bool OAIVCenterProperties::is_infrastructure_id_Valid() const{
    return m_infrastructure_id_isValid;
}

QString OAIVCenterProperties::getInternalId() const {
    return m_internal_id;
}
void OAIVCenterProperties::setInternalId(const QString &internal_id) {
    m_internal_id = internal_id;
    m_internal_id_isSet = true;
}

bool OAIVCenterProperties::is_internal_id_Set() const{
    return m_internal_id_isSet;
}

bool OAIVCenterProperties::is_internal_id_Valid() const{
    return m_internal_id_isValid;
}

QString OAIVCenterProperties::getIpAddress() const {
    return m_ip_address;
}
void OAIVCenterProperties::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIVCenterProperties::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIVCenterProperties::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QDateTime OAIVCenterProperties::getLastHeartbeat() const {
    return m_last_heartbeat;
}
void OAIVCenterProperties::setLastHeartbeat(const QDateTime &last_heartbeat) {
    m_last_heartbeat = last_heartbeat;
    m_last_heartbeat_isSet = true;
}

bool OAIVCenterProperties::is_last_heartbeat_Set() const{
    return m_last_heartbeat_isSet;
}

bool OAIVCenterProperties::is_last_heartbeat_Valid() const{
    return m_last_heartbeat_isValid;
}

QString OAIVCenterProperties::getPort() const {
    return m_port;
}
void OAIVCenterProperties::setPort(const QString &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIVCenterProperties::is_port_Set() const{
    return m_port_isSet;
}

bool OAIVCenterProperties::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIVCenterProperties::getProcessServerId() const {
    return m_process_server_id;
}
void OAIVCenterProperties::setProcessServerId(const QString &process_server_id) {
    m_process_server_id = process_server_id;
    m_process_server_id_isSet = true;
}

bool OAIVCenterProperties::is_process_server_id_Set() const{
    return m_process_server_id_isSet;
}

bool OAIVCenterProperties::is_process_server_id_Valid() const{
    return m_process_server_id_isValid;
}

QString OAIVCenterProperties::getRunAsAccountId() const {
    return m_run_as_account_id;
}
void OAIVCenterProperties::setRunAsAccountId(const QString &run_as_account_id) {
    m_run_as_account_id = run_as_account_id;
    m_run_as_account_id_isSet = true;
}

bool OAIVCenterProperties::is_run_as_account_id_Set() const{
    return m_run_as_account_id_isSet;
}

bool OAIVCenterProperties::is_run_as_account_id_Valid() const{
    return m_run_as_account_id_isValid;
}

bool OAIVCenterProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discovery_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_arm_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_infrastructure_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_heartbeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_as_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVCenterProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
