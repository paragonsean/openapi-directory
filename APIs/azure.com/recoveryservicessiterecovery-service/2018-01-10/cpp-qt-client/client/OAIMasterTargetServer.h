/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMasterTargetServer.h
 *
 * Details of a Master Target Server.
 */

#ifndef OAIMasterTargetServer_H
#define OAIMasterTargetServer_H

#include <QJsonObject>

#include "OAIDataStore.h"
#include "OAIHealthError.h"
#include "OAIRetentionVolume.h"
#include "OAIVersionDetails.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVersionDetails;
class OAIDataStore;
class OAIHealthError;
class OAIRetentionVolume;

class OAIMasterTargetServer : public OAIObject {
public:
    OAIMasterTargetServer();
    OAIMasterTargetServer(QString json);
    ~OAIMasterTargetServer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getAgentExpiryDate() const;
    void setAgentExpiryDate(const QDateTime &agent_expiry_date);
    bool is_agent_expiry_date_Set() const;
    bool is_agent_expiry_date_Valid() const;

    QString getAgentVersion() const;
    void setAgentVersion(const QString &agent_version);
    bool is_agent_version_Set() const;
    bool is_agent_version_Valid() const;

    OAIVersionDetails getAgentVersionDetails() const;
    void setAgentVersionDetails(const OAIVersionDetails &agent_version_details);
    bool is_agent_version_details_Set() const;
    bool is_agent_version_details_Valid() const;

    QList<OAIDataStore> getDataStores() const;
    void setDataStores(const QList<OAIDataStore> &data_stores);
    bool is_data_stores_Set() const;
    bool is_data_stores_Valid() const;

    qint32 getDiskCount() const;
    void setDiskCount(const qint32 &disk_count);
    bool is_disk_count_Set() const;
    bool is_disk_count_Valid() const;

    QList<OAIHealthError> getHealthErrors() const;
    void setHealthErrors(const QList<OAIHealthError> &health_errors);
    bool is_health_errors_Set() const;
    bool is_health_errors_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    QDateTime getLastHeartbeat() const;
    void setLastHeartbeat(const QDateTime &last_heartbeat);
    bool is_last_heartbeat_Set() const;
    bool is_last_heartbeat_Valid() const;

    QDateTime getMarsAgentExpiryDate() const;
    void setMarsAgentExpiryDate(const QDateTime &mars_agent_expiry_date);
    bool is_mars_agent_expiry_date_Set() const;
    bool is_mars_agent_expiry_date_Valid() const;

    QString getMarsAgentVersion() const;
    void setMarsAgentVersion(const QString &mars_agent_version);
    bool is_mars_agent_version_Set() const;
    bool is_mars_agent_version_Valid() const;

    OAIVersionDetails getMarsAgentVersionDetails() const;
    void setMarsAgentVersionDetails(const OAIVersionDetails &mars_agent_version_details);
    bool is_mars_agent_version_details_Set() const;
    bool is_mars_agent_version_details_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOsType() const;
    void setOsType(const QString &os_type);
    bool is_os_type_Set() const;
    bool is_os_type_Valid() const;

    QString getOsVersion() const;
    void setOsVersion(const QString &os_version);
    bool is_os_version_Set() const;
    bool is_os_version_Valid() const;

    QList<OAIRetentionVolume> getRetentionVolumes() const;
    void setRetentionVolumes(const QList<OAIRetentionVolume> &retention_volumes);
    bool is_retention_volumes_Set() const;
    bool is_retention_volumes_Valid() const;

    QList<OAIHealthError> getValidationErrors() const;
    void setValidationErrors(const QList<OAIHealthError> &validation_errors);
    bool is_validation_errors_Set() const;
    bool is_validation_errors_Valid() const;

    QString getVersionStatus() const;
    void setVersionStatus(const QString &version_status);
    bool is_version_status_Set() const;
    bool is_version_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_agent_expiry_date;
    bool m_agent_expiry_date_isSet;
    bool m_agent_expiry_date_isValid;

    QString m_agent_version;
    bool m_agent_version_isSet;
    bool m_agent_version_isValid;

    OAIVersionDetails m_agent_version_details;
    bool m_agent_version_details_isSet;
    bool m_agent_version_details_isValid;

    QList<OAIDataStore> m_data_stores;
    bool m_data_stores_isSet;
    bool m_data_stores_isValid;

    qint32 m_disk_count;
    bool m_disk_count_isSet;
    bool m_disk_count_isValid;

    QList<OAIHealthError> m_health_errors;
    bool m_health_errors_isSet;
    bool m_health_errors_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    QDateTime m_last_heartbeat;
    bool m_last_heartbeat_isSet;
    bool m_last_heartbeat_isValid;

    QDateTime m_mars_agent_expiry_date;
    bool m_mars_agent_expiry_date_isSet;
    bool m_mars_agent_expiry_date_isValid;

    QString m_mars_agent_version;
    bool m_mars_agent_version_isSet;
    bool m_mars_agent_version_isValid;

    OAIVersionDetails m_mars_agent_version_details;
    bool m_mars_agent_version_details_isSet;
    bool m_mars_agent_version_details_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_os_type;
    bool m_os_type_isSet;
    bool m_os_type_isValid;

    QString m_os_version;
    bool m_os_version_isSet;
    bool m_os_version_isValid;

    QList<OAIRetentionVolume> m_retention_volumes;
    bool m_retention_volumes_isSet;
    bool m_retention_volumes_isValid;

    QList<OAIHealthError> m_validation_errors;
    bool m_validation_errors_isSet;
    bool m_validation_errors_isValid;

    QString m_version_status;
    bool m_version_status_isSet;
    bool m_version_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMasterTargetServer)

#endif // OAIMasterTargetServer_H
