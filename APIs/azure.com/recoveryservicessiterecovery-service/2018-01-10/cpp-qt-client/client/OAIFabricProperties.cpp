/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFabricProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFabricProperties::OAIFabricProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFabricProperties::OAIFabricProperties() {
    this->initializeModel();
}

OAIFabricProperties::~OAIFabricProperties() {}

void OAIFabricProperties::initializeModel() {

    m_bcdr_state_isSet = false;
    m_bcdr_state_isValid = false;

    m_custom_details_isSet = false;
    m_custom_details_isValid = false;

    m_encryption_details_isSet = false;
    m_encryption_details_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_health_isSet = false;
    m_health_isValid = false;

    m_health_error_details_isSet = false;
    m_health_error_details_isValid = false;

    m_internal_identifier_isSet = false;
    m_internal_identifier_isValid = false;

    m_rollover_encryption_details_isSet = false;
    m_rollover_encryption_details_isValid = false;
}

void OAIFabricProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFabricProperties::fromJsonObject(QJsonObject json) {

    m_bcdr_state_isValid = ::OpenAPI::fromJsonValue(m_bcdr_state, json[QString("bcdrState")]);
    m_bcdr_state_isSet = !json[QString("bcdrState")].isNull() && m_bcdr_state_isValid;

    m_custom_details_isValid = ::OpenAPI::fromJsonValue(m_custom_details, json[QString("customDetails")]);
    m_custom_details_isSet = !json[QString("customDetails")].isNull() && m_custom_details_isValid;

    m_encryption_details_isValid = ::OpenAPI::fromJsonValue(m_encryption_details, json[QString("encryptionDetails")]);
    m_encryption_details_isSet = !json[QString("encryptionDetails")].isNull() && m_encryption_details_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_health_isValid = ::OpenAPI::fromJsonValue(m_health, json[QString("health")]);
    m_health_isSet = !json[QString("health")].isNull() && m_health_isValid;

    m_health_error_details_isValid = ::OpenAPI::fromJsonValue(m_health_error_details, json[QString("healthErrorDetails")]);
    m_health_error_details_isSet = !json[QString("healthErrorDetails")].isNull() && m_health_error_details_isValid;

    m_internal_identifier_isValid = ::OpenAPI::fromJsonValue(m_internal_identifier, json[QString("internalIdentifier")]);
    m_internal_identifier_isSet = !json[QString("internalIdentifier")].isNull() && m_internal_identifier_isValid;

    m_rollover_encryption_details_isValid = ::OpenAPI::fromJsonValue(m_rollover_encryption_details, json[QString("rolloverEncryptionDetails")]);
    m_rollover_encryption_details_isSet = !json[QString("rolloverEncryptionDetails")].isNull() && m_rollover_encryption_details_isValid;
}

QString OAIFabricProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFabricProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_bcdr_state_isSet) {
        obj.insert(QString("bcdrState"), ::OpenAPI::toJsonValue(m_bcdr_state));
    }
    if (m_custom_details.isSet()) {
        obj.insert(QString("customDetails"), ::OpenAPI::toJsonValue(m_custom_details));
    }
    if (m_encryption_details.isSet()) {
        obj.insert(QString("encryptionDetails"), ::OpenAPI::toJsonValue(m_encryption_details));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_health_isSet) {
        obj.insert(QString("health"), ::OpenAPI::toJsonValue(m_health));
    }
    if (m_health_error_details.size() > 0) {
        obj.insert(QString("healthErrorDetails"), ::OpenAPI::toJsonValue(m_health_error_details));
    }
    if (m_internal_identifier_isSet) {
        obj.insert(QString("internalIdentifier"), ::OpenAPI::toJsonValue(m_internal_identifier));
    }
    if (m_rollover_encryption_details.isSet()) {
        obj.insert(QString("rolloverEncryptionDetails"), ::OpenAPI::toJsonValue(m_rollover_encryption_details));
    }
    return obj;
}

QString OAIFabricProperties::getBcdrState() const {
    return m_bcdr_state;
}
void OAIFabricProperties::setBcdrState(const QString &bcdr_state) {
    m_bcdr_state = bcdr_state;
    m_bcdr_state_isSet = true;
}

bool OAIFabricProperties::is_bcdr_state_Set() const{
    return m_bcdr_state_isSet;
}

bool OAIFabricProperties::is_bcdr_state_Valid() const{
    return m_bcdr_state_isValid;
}

OAIFabricSpecificDetails OAIFabricProperties::getCustomDetails() const {
    return m_custom_details;
}
void OAIFabricProperties::setCustomDetails(const OAIFabricSpecificDetails &custom_details) {
    m_custom_details = custom_details;
    m_custom_details_isSet = true;
}

bool OAIFabricProperties::is_custom_details_Set() const{
    return m_custom_details_isSet;
}

bool OAIFabricProperties::is_custom_details_Valid() const{
    return m_custom_details_isValid;
}

OAIEncryptionDetails OAIFabricProperties::getEncryptionDetails() const {
    return m_encryption_details;
}
void OAIFabricProperties::setEncryptionDetails(const OAIEncryptionDetails &encryption_details) {
    m_encryption_details = encryption_details;
    m_encryption_details_isSet = true;
}

bool OAIFabricProperties::is_encryption_details_Set() const{
    return m_encryption_details_isSet;
}

bool OAIFabricProperties::is_encryption_details_Valid() const{
    return m_encryption_details_isValid;
}

QString OAIFabricProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIFabricProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIFabricProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIFabricProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIFabricProperties::getHealth() const {
    return m_health;
}
void OAIFabricProperties::setHealth(const QString &health) {
    m_health = health;
    m_health_isSet = true;
}

bool OAIFabricProperties::is_health_Set() const{
    return m_health_isSet;
}

bool OAIFabricProperties::is_health_Valid() const{
    return m_health_isValid;
}

QList<OAIHealthError> OAIFabricProperties::getHealthErrorDetails() const {
    return m_health_error_details;
}
void OAIFabricProperties::setHealthErrorDetails(const QList<OAIHealthError> &health_error_details) {
    m_health_error_details = health_error_details;
    m_health_error_details_isSet = true;
}

bool OAIFabricProperties::is_health_error_details_Set() const{
    return m_health_error_details_isSet;
}

bool OAIFabricProperties::is_health_error_details_Valid() const{
    return m_health_error_details_isValid;
}

QString OAIFabricProperties::getInternalIdentifier() const {
    return m_internal_identifier;
}
void OAIFabricProperties::setInternalIdentifier(const QString &internal_identifier) {
    m_internal_identifier = internal_identifier;
    m_internal_identifier_isSet = true;
}

bool OAIFabricProperties::is_internal_identifier_Set() const{
    return m_internal_identifier_isSet;
}

bool OAIFabricProperties::is_internal_identifier_Valid() const{
    return m_internal_identifier_isValid;
}

OAIEncryptionDetails OAIFabricProperties::getRolloverEncryptionDetails() const {
    return m_rollover_encryption_details;
}
void OAIFabricProperties::setRolloverEncryptionDetails(const OAIEncryptionDetails &rollover_encryption_details) {
    m_rollover_encryption_details = rollover_encryption_details;
    m_rollover_encryption_details_isSet = true;
}

bool OAIFabricProperties::is_rollover_encryption_details_Set() const{
    return m_rollover_encryption_details_isSet;
}

bool OAIFabricProperties::is_rollover_encryption_details_Valid() const{
    return m_rollover_encryption_details_isValid;
}

bool OAIFabricProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bcdr_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_error_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollover_encryption_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFabricProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
