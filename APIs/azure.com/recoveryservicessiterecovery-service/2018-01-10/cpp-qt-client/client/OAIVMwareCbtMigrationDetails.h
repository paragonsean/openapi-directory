/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVMwareCbtMigrationDetails.h
 *
 * VMwareCbt provider specific settings.
 */

#ifndef OAIVMwareCbtMigrationDetails_H
#define OAIVMwareCbtMigrationDetails_H

#include <QJsonObject>

#include "OAIMigrationProviderSpecificSettings.h"
#include "OAIVMwareCbtNicDetails.h"
#include "OAIVMwareCbtProtectedDiskDetails.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVMwareCbtProtectedDiskDetails;
class OAIVMwareCbtNicDetails;

class OAIVMwareCbtMigrationDetails : public OAIObject {
public:
    OAIVMwareCbtMigrationDetails();
    OAIVMwareCbtMigrationDetails(QString json);
    ~OAIVMwareCbtMigrationDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDataMoverRunAsAccountId() const;
    void setDataMoverRunAsAccountId(const QString &data_mover_run_as_account_id);
    bool is_data_mover_run_as_account_id_Set() const;
    bool is_data_mover_run_as_account_id_Valid() const;

    qint32 getInitialSeedingProgressPercentage() const;
    void setInitialSeedingProgressPercentage(const qint32 &initial_seeding_progress_percentage);
    bool is_initial_seeding_progress_percentage_Set() const;
    bool is_initial_seeding_progress_percentage_Valid() const;

    QString getLastRecoveryPointId() const;
    void setLastRecoveryPointId(const QString &last_recovery_point_id);
    bool is_last_recovery_point_id_Set() const;
    bool is_last_recovery_point_id_Valid() const;

    QDateTime getLastRecoveryPointReceived() const;
    void setLastRecoveryPointReceived(const QDateTime &last_recovery_point_received);
    bool is_last_recovery_point_received_Set() const;
    bool is_last_recovery_point_received_Valid() const;

    QString getLicenseType() const;
    void setLicenseType(const QString &license_type);
    bool is_license_type_Set() const;
    bool is_license_type_Valid() const;

    qint32 getMigrationProgressPercentage() const;
    void setMigrationProgressPercentage(const qint32 &migration_progress_percentage);
    bool is_migration_progress_percentage_Set() const;
    bool is_migration_progress_percentage_Valid() const;

    QString getMigrationRecoveryPointId() const;
    void setMigrationRecoveryPointId(const QString &migration_recovery_point_id);
    bool is_migration_recovery_point_id_Set() const;
    bool is_migration_recovery_point_id_Valid() const;

    QString getOsType() const;
    void setOsType(const QString &os_type);
    bool is_os_type_Set() const;
    bool is_os_type_Valid() const;

    QString getPerformAutoResync() const;
    void setPerformAutoResync(const QString &perform_auto_resync);
    bool is_perform_auto_resync_Set() const;
    bool is_perform_auto_resync_Valid() const;

    QList<OAIVMwareCbtProtectedDiskDetails> getProtectedDisks() const;
    void setProtectedDisks(const QList<OAIVMwareCbtProtectedDiskDetails> &protected_disks);
    bool is_protected_disks_Set() const;
    bool is_protected_disks_Valid() const;

    qint32 getResyncProgressPercentage() const;
    void setResyncProgressPercentage(const qint32 &resync_progress_percentage);
    bool is_resync_progress_percentage_Set() const;
    bool is_resync_progress_percentage_Valid() const;

    QString getResyncState() const;
    void setResyncState(const QString &resync_state);
    bool is_resync_state_Set() const;
    bool is_resync_state_Valid() const;

    QString getSnapshotRunAsAccountId() const;
    void setSnapshotRunAsAccountId(const QString &snapshot_run_as_account_id);
    bool is_snapshot_run_as_account_id_Set() const;
    bool is_snapshot_run_as_account_id_Valid() const;

    QString getTargetAvailabilitySetId() const;
    void setTargetAvailabilitySetId(const QString &target_availability_set_id);
    bool is_target_availability_set_id_Set() const;
    bool is_target_availability_set_id_Valid() const;

    QString getTargetBootDiagnosticsStorageAccountId() const;
    void setTargetBootDiagnosticsStorageAccountId(const QString &target_boot_diagnostics_storage_account_id);
    bool is_target_boot_diagnostics_storage_account_id_Set() const;
    bool is_target_boot_diagnostics_storage_account_id_Valid() const;

    QString getTargetLocation() const;
    void setTargetLocation(const QString &target_location);
    bool is_target_location_Set() const;
    bool is_target_location_Valid() const;

    QString getTargetNetworkId() const;
    void setTargetNetworkId(const QString &target_network_id);
    bool is_target_network_id_Set() const;
    bool is_target_network_id_Valid() const;

    QString getTargetResourceGroupId() const;
    void setTargetResourceGroupId(const QString &target_resource_group_id);
    bool is_target_resource_group_id_Set() const;
    bool is_target_resource_group_id_Valid() const;

    QString getTargetVmName() const;
    void setTargetVmName(const QString &target_vm_name);
    bool is_target_vm_name_Set() const;
    bool is_target_vm_name_Valid() const;

    QString getTargetVmSize() const;
    void setTargetVmSize(const QString &target_vm_size);
    bool is_target_vm_size_Set() const;
    bool is_target_vm_size_Valid() const;

    QList<OAIVMwareCbtNicDetails> getVmNics() const;
    void setVmNics(const QList<OAIVMwareCbtNicDetails> &vm_nics);
    bool is_vm_nics_Set() const;
    bool is_vm_nics_Valid() const;

    QString getVmwareMachineId() const;
    void setVmwareMachineId(const QString &vmware_machine_id);
    bool is_vmware_machine_id_Set() const;
    bool is_vmware_machine_id_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_data_mover_run_as_account_id;
    bool m_data_mover_run_as_account_id_isSet;
    bool m_data_mover_run_as_account_id_isValid;

    qint32 m_initial_seeding_progress_percentage;
    bool m_initial_seeding_progress_percentage_isSet;
    bool m_initial_seeding_progress_percentage_isValid;

    QString m_last_recovery_point_id;
    bool m_last_recovery_point_id_isSet;
    bool m_last_recovery_point_id_isValid;

    QDateTime m_last_recovery_point_received;
    bool m_last_recovery_point_received_isSet;
    bool m_last_recovery_point_received_isValid;

    QString m_license_type;
    bool m_license_type_isSet;
    bool m_license_type_isValid;

    qint32 m_migration_progress_percentage;
    bool m_migration_progress_percentage_isSet;
    bool m_migration_progress_percentage_isValid;

    QString m_migration_recovery_point_id;
    bool m_migration_recovery_point_id_isSet;
    bool m_migration_recovery_point_id_isValid;

    QString m_os_type;
    bool m_os_type_isSet;
    bool m_os_type_isValid;

    QString m_perform_auto_resync;
    bool m_perform_auto_resync_isSet;
    bool m_perform_auto_resync_isValid;

    QList<OAIVMwareCbtProtectedDiskDetails> m_protected_disks;
    bool m_protected_disks_isSet;
    bool m_protected_disks_isValid;

    qint32 m_resync_progress_percentage;
    bool m_resync_progress_percentage_isSet;
    bool m_resync_progress_percentage_isValid;

    QString m_resync_state;
    bool m_resync_state_isSet;
    bool m_resync_state_isValid;

    QString m_snapshot_run_as_account_id;
    bool m_snapshot_run_as_account_id_isSet;
    bool m_snapshot_run_as_account_id_isValid;

    QString m_target_availability_set_id;
    bool m_target_availability_set_id_isSet;
    bool m_target_availability_set_id_isValid;

    QString m_target_boot_diagnostics_storage_account_id;
    bool m_target_boot_diagnostics_storage_account_id_isSet;
    bool m_target_boot_diagnostics_storage_account_id_isValid;

    QString m_target_location;
    bool m_target_location_isSet;
    bool m_target_location_isValid;

    QString m_target_network_id;
    bool m_target_network_id_isSet;
    bool m_target_network_id_isValid;

    QString m_target_resource_group_id;
    bool m_target_resource_group_id_isSet;
    bool m_target_resource_group_id_isValid;

    QString m_target_vm_name;
    bool m_target_vm_name_isSet;
    bool m_target_vm_name_isValid;

    QString m_target_vm_size;
    bool m_target_vm_size_isSet;
    bool m_target_vm_size_isValid;

    QList<OAIVMwareCbtNicDetails> m_vm_nics;
    bool m_vm_nics_isSet;
    bool m_vm_nics_isValid;

    QString m_vmware_machine_id;
    bool m_vmware_machine_id_isSet;
    bool m_vmware_machine_id_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVMwareCbtMigrationDetails)

#endif // OAIVMwareCbtMigrationDetails_H
