/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHyperVReplicaAzureEnableProtectionInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHyperVReplicaAzureEnableProtectionInput::OAIHyperVReplicaAzureEnableProtectionInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHyperVReplicaAzureEnableProtectionInput::OAIHyperVReplicaAzureEnableProtectionInput() {
    this->initializeModel();
}

OAIHyperVReplicaAzureEnableProtectionInput::~OAIHyperVReplicaAzureEnableProtectionInput() {}

void OAIHyperVReplicaAzureEnableProtectionInput::initializeModel() {

    m_disks_to_include_isSet = false;
    m_disks_to_include_isValid = false;

    m_enable_rdp_on_target_option_isSet = false;
    m_enable_rdp_on_target_option_isValid = false;

    m_hv_host_vm_id_isSet = false;
    m_hv_host_vm_id_isValid = false;

    m_log_storage_account_id_isSet = false;
    m_log_storage_account_id_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_target_azure_network_id_isSet = false;
    m_target_azure_network_id_isValid = false;

    m_target_azure_subnet_id_isSet = false;
    m_target_azure_subnet_id_isValid = false;

    m_target_azure_v1_resource_group_id_isSet = false;
    m_target_azure_v1_resource_group_id_isValid = false;

    m_target_azure_v2_resource_group_id_isSet = false;
    m_target_azure_v2_resource_group_id_isValid = false;

    m_target_azure_vm_name_isSet = false;
    m_target_azure_vm_name_isValid = false;

    m_target_storage_account_id_isSet = false;
    m_target_storage_account_id_isValid = false;

    m_use_managed_disks_isSet = false;
    m_use_managed_disks_isValid = false;

    m_vhd_id_isSet = false;
    m_vhd_id_isValid = false;

    m_vm_name_isSet = false;
    m_vm_name_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIHyperVReplicaAzureEnableProtectionInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHyperVReplicaAzureEnableProtectionInput::fromJsonObject(QJsonObject json) {

    m_disks_to_include_isValid = ::OpenAPI::fromJsonValue(m_disks_to_include, json[QString("disksToInclude")]);
    m_disks_to_include_isSet = !json[QString("disksToInclude")].isNull() && m_disks_to_include_isValid;

    m_enable_rdp_on_target_option_isValid = ::OpenAPI::fromJsonValue(m_enable_rdp_on_target_option, json[QString("enableRdpOnTargetOption")]);
    m_enable_rdp_on_target_option_isSet = !json[QString("enableRdpOnTargetOption")].isNull() && m_enable_rdp_on_target_option_isValid;

    m_hv_host_vm_id_isValid = ::OpenAPI::fromJsonValue(m_hv_host_vm_id, json[QString("hvHostVmId")]);
    m_hv_host_vm_id_isSet = !json[QString("hvHostVmId")].isNull() && m_hv_host_vm_id_isValid;

    m_log_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_log_storage_account_id, json[QString("logStorageAccountId")]);
    m_log_storage_account_id_isSet = !json[QString("logStorageAccountId")].isNull() && m_log_storage_account_id_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_target_azure_network_id_isValid = ::OpenAPI::fromJsonValue(m_target_azure_network_id, json[QString("targetAzureNetworkId")]);
    m_target_azure_network_id_isSet = !json[QString("targetAzureNetworkId")].isNull() && m_target_azure_network_id_isValid;

    m_target_azure_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_target_azure_subnet_id, json[QString("targetAzureSubnetId")]);
    m_target_azure_subnet_id_isSet = !json[QString("targetAzureSubnetId")].isNull() && m_target_azure_subnet_id_isValid;

    m_target_azure_v1_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_target_azure_v1_resource_group_id, json[QString("targetAzureV1ResourceGroupId")]);
    m_target_azure_v1_resource_group_id_isSet = !json[QString("targetAzureV1ResourceGroupId")].isNull() && m_target_azure_v1_resource_group_id_isValid;

    m_target_azure_v2_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_target_azure_v2_resource_group_id, json[QString("targetAzureV2ResourceGroupId")]);
    m_target_azure_v2_resource_group_id_isSet = !json[QString("targetAzureV2ResourceGroupId")].isNull() && m_target_azure_v2_resource_group_id_isValid;

    m_target_azure_vm_name_isValid = ::OpenAPI::fromJsonValue(m_target_azure_vm_name, json[QString("targetAzureVmName")]);
    m_target_azure_vm_name_isSet = !json[QString("targetAzureVmName")].isNull() && m_target_azure_vm_name_isValid;

    m_target_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_target_storage_account_id, json[QString("targetStorageAccountId")]);
    m_target_storage_account_id_isSet = !json[QString("targetStorageAccountId")].isNull() && m_target_storage_account_id_isValid;

    m_use_managed_disks_isValid = ::OpenAPI::fromJsonValue(m_use_managed_disks, json[QString("useManagedDisks")]);
    m_use_managed_disks_isSet = !json[QString("useManagedDisks")].isNull() && m_use_managed_disks_isValid;

    m_vhd_id_isValid = ::OpenAPI::fromJsonValue(m_vhd_id, json[QString("vhdId")]);
    m_vhd_id_isSet = !json[QString("vhdId")].isNull() && m_vhd_id_isValid;

    m_vm_name_isValid = ::OpenAPI::fromJsonValue(m_vm_name, json[QString("vmName")]);
    m_vm_name_isSet = !json[QString("vmName")].isNull() && m_vm_name_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHyperVReplicaAzureEnableProtectionInput::asJsonObject() const {
    QJsonObject obj;
    if (m_disks_to_include.size() > 0) {
        obj.insert(QString("disksToInclude"), ::OpenAPI::toJsonValue(m_disks_to_include));
    }
    if (m_enable_rdp_on_target_option_isSet) {
        obj.insert(QString("enableRdpOnTargetOption"), ::OpenAPI::toJsonValue(m_enable_rdp_on_target_option));
    }
    if (m_hv_host_vm_id_isSet) {
        obj.insert(QString("hvHostVmId"), ::OpenAPI::toJsonValue(m_hv_host_vm_id));
    }
    if (m_log_storage_account_id_isSet) {
        obj.insert(QString("logStorageAccountId"), ::OpenAPI::toJsonValue(m_log_storage_account_id));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_target_azure_network_id_isSet) {
        obj.insert(QString("targetAzureNetworkId"), ::OpenAPI::toJsonValue(m_target_azure_network_id));
    }
    if (m_target_azure_subnet_id_isSet) {
        obj.insert(QString("targetAzureSubnetId"), ::OpenAPI::toJsonValue(m_target_azure_subnet_id));
    }
    if (m_target_azure_v1_resource_group_id_isSet) {
        obj.insert(QString("targetAzureV1ResourceGroupId"), ::OpenAPI::toJsonValue(m_target_azure_v1_resource_group_id));
    }
    if (m_target_azure_v2_resource_group_id_isSet) {
        obj.insert(QString("targetAzureV2ResourceGroupId"), ::OpenAPI::toJsonValue(m_target_azure_v2_resource_group_id));
    }
    if (m_target_azure_vm_name_isSet) {
        obj.insert(QString("targetAzureVmName"), ::OpenAPI::toJsonValue(m_target_azure_vm_name));
    }
    if (m_target_storage_account_id_isSet) {
        obj.insert(QString("targetStorageAccountId"), ::OpenAPI::toJsonValue(m_target_storage_account_id));
    }
    if (m_use_managed_disks_isSet) {
        obj.insert(QString("useManagedDisks"), ::OpenAPI::toJsonValue(m_use_managed_disks));
    }
    if (m_vhd_id_isSet) {
        obj.insert(QString("vhdId"), ::OpenAPI::toJsonValue(m_vhd_id));
    }
    if (m_vm_name_isSet) {
        obj.insert(QString("vmName"), ::OpenAPI::toJsonValue(m_vm_name));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QList<QString> OAIHyperVReplicaAzureEnableProtectionInput::getDisksToInclude() const {
    return m_disks_to_include;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setDisksToInclude(const QList<QString> &disks_to_include) {
    m_disks_to_include = disks_to_include;
    m_disks_to_include_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_disks_to_include_Set() const{
    return m_disks_to_include_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_disks_to_include_Valid() const{
    return m_disks_to_include_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getEnableRdpOnTargetOption() const {
    return m_enable_rdp_on_target_option;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setEnableRdpOnTargetOption(const QString &enable_rdp_on_target_option) {
    m_enable_rdp_on_target_option = enable_rdp_on_target_option;
    m_enable_rdp_on_target_option_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_enable_rdp_on_target_option_Set() const{
    return m_enable_rdp_on_target_option_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_enable_rdp_on_target_option_Valid() const{
    return m_enable_rdp_on_target_option_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getHvHostVmId() const {
    return m_hv_host_vm_id;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setHvHostVmId(const QString &hv_host_vm_id) {
    m_hv_host_vm_id = hv_host_vm_id;
    m_hv_host_vm_id_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_hv_host_vm_id_Set() const{
    return m_hv_host_vm_id_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_hv_host_vm_id_Valid() const{
    return m_hv_host_vm_id_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getLogStorageAccountId() const {
    return m_log_storage_account_id;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setLogStorageAccountId(const QString &log_storage_account_id) {
    m_log_storage_account_id = log_storage_account_id;
    m_log_storage_account_id_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_log_storage_account_id_Set() const{
    return m_log_storage_account_id_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_log_storage_account_id_Valid() const{
    return m_log_storage_account_id_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getOsType() const {
    return m_os_type;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getTargetAzureNetworkId() const {
    return m_target_azure_network_id;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setTargetAzureNetworkId(const QString &target_azure_network_id) {
    m_target_azure_network_id = target_azure_network_id;
    m_target_azure_network_id_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_target_azure_network_id_Set() const{
    return m_target_azure_network_id_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_target_azure_network_id_Valid() const{
    return m_target_azure_network_id_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getTargetAzureSubnetId() const {
    return m_target_azure_subnet_id;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setTargetAzureSubnetId(const QString &target_azure_subnet_id) {
    m_target_azure_subnet_id = target_azure_subnet_id;
    m_target_azure_subnet_id_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_target_azure_subnet_id_Set() const{
    return m_target_azure_subnet_id_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_target_azure_subnet_id_Valid() const{
    return m_target_azure_subnet_id_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getTargetAzureV1ResourceGroupId() const {
    return m_target_azure_v1_resource_group_id;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setTargetAzureV1ResourceGroupId(const QString &target_azure_v1_resource_group_id) {
    m_target_azure_v1_resource_group_id = target_azure_v1_resource_group_id;
    m_target_azure_v1_resource_group_id_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_target_azure_v1_resource_group_id_Set() const{
    return m_target_azure_v1_resource_group_id_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_target_azure_v1_resource_group_id_Valid() const{
    return m_target_azure_v1_resource_group_id_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getTargetAzureV2ResourceGroupId() const {
    return m_target_azure_v2_resource_group_id;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setTargetAzureV2ResourceGroupId(const QString &target_azure_v2_resource_group_id) {
    m_target_azure_v2_resource_group_id = target_azure_v2_resource_group_id;
    m_target_azure_v2_resource_group_id_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_target_azure_v2_resource_group_id_Set() const{
    return m_target_azure_v2_resource_group_id_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_target_azure_v2_resource_group_id_Valid() const{
    return m_target_azure_v2_resource_group_id_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getTargetAzureVmName() const {
    return m_target_azure_vm_name;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setTargetAzureVmName(const QString &target_azure_vm_name) {
    m_target_azure_vm_name = target_azure_vm_name;
    m_target_azure_vm_name_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_target_azure_vm_name_Set() const{
    return m_target_azure_vm_name_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_target_azure_vm_name_Valid() const{
    return m_target_azure_vm_name_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getTargetStorageAccountId() const {
    return m_target_storage_account_id;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setTargetStorageAccountId(const QString &target_storage_account_id) {
    m_target_storage_account_id = target_storage_account_id;
    m_target_storage_account_id_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_target_storage_account_id_Set() const{
    return m_target_storage_account_id_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_target_storage_account_id_Valid() const{
    return m_target_storage_account_id_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getUseManagedDisks() const {
    return m_use_managed_disks;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setUseManagedDisks(const QString &use_managed_disks) {
    m_use_managed_disks = use_managed_disks;
    m_use_managed_disks_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_use_managed_disks_Set() const{
    return m_use_managed_disks_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_use_managed_disks_Valid() const{
    return m_use_managed_disks_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getVhdId() const {
    return m_vhd_id;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setVhdId(const QString &vhd_id) {
    m_vhd_id = vhd_id;
    m_vhd_id_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_vhd_id_Set() const{
    return m_vhd_id_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_vhd_id_Valid() const{
    return m_vhd_id_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getVmName() const {
    return m_vm_name;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setVmName(const QString &vm_name) {
    m_vm_name = vm_name;
    m_vm_name_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_vm_name_Set() const{
    return m_vm_name_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_vm_name_Valid() const{
    return m_vm_name_isValid;
}

QString OAIHyperVReplicaAzureEnableProtectionInput::getInstanceType() const {
    return m_instance_type;
}
void OAIHyperVReplicaAzureEnableProtectionInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disks_to_include.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_rdp_on_target_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hv_host_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_azure_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_azure_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_azure_v1_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_azure_v2_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_azure_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_managed_disks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vhd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHyperVReplicaAzureEnableProtectionInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
