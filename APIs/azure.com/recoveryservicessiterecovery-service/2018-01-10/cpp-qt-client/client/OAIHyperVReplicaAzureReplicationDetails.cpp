/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHyperVReplicaAzureReplicationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHyperVReplicaAzureReplicationDetails::OAIHyperVReplicaAzureReplicationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHyperVReplicaAzureReplicationDetails::OAIHyperVReplicaAzureReplicationDetails() {
    this->initializeModel();
}

OAIHyperVReplicaAzureReplicationDetails::~OAIHyperVReplicaAzureReplicationDetails() {}

void OAIHyperVReplicaAzureReplicationDetails::initializeModel() {

    m_azure_vm_disk_details_isSet = false;
    m_azure_vm_disk_details_isValid = false;

    m_enable_rdp_on_target_option_isSet = false;
    m_enable_rdp_on_target_option_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_initial_replication_details_isSet = false;
    m_initial_replication_details_isValid = false;

    m_last_replicated_time_isSet = false;
    m_last_replicated_time_isValid = false;

    m_last_rpo_calculated_time_isSet = false;
    m_last_rpo_calculated_time_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_o_s_details_isSet = false;
    m_o_s_details_isValid = false;

    m_recovery_availability_set_id_isSet = false;
    m_recovery_availability_set_id_isValid = false;

    m_recovery_azure_log_storage_account_id_isSet = false;
    m_recovery_azure_log_storage_account_id_isValid = false;

    m_recovery_azure_resource_group_id_isSet = false;
    m_recovery_azure_resource_group_id_isValid = false;

    m_recovery_azure_storage_account_isSet = false;
    m_recovery_azure_storage_account_isValid = false;

    m_recovery_azure_vm_size_isSet = false;
    m_recovery_azure_vm_size_isValid = false;

    m_recovery_azure_vm_name_isSet = false;
    m_recovery_azure_vm_name_isValid = false;

    m_rpo_in_seconds_isSet = false;
    m_rpo_in_seconds_isValid = false;

    m_selected_recovery_azure_network_id_isSet = false;
    m_selected_recovery_azure_network_id_isValid = false;

    m_selected_source_nic_id_isSet = false;
    m_selected_source_nic_id_isValid = false;

    m_source_vm_cpu_count_isSet = false;
    m_source_vm_cpu_count_isValid = false;

    m_source_vm_ram_size_in_mb_isSet = false;
    m_source_vm_ram_size_in_mb_isValid = false;

    m_use_managed_disks_isSet = false;
    m_use_managed_disks_isValid = false;

    m_vm_id_isSet = false;
    m_vm_id_isValid = false;

    m_vm_nics_isSet = false;
    m_vm_nics_isValid = false;

    m_vm_protection_state_isSet = false;
    m_vm_protection_state_isValid = false;

    m_vm_protection_state_description_isSet = false;
    m_vm_protection_state_description_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIHyperVReplicaAzureReplicationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHyperVReplicaAzureReplicationDetails::fromJsonObject(QJsonObject json) {

    m_azure_vm_disk_details_isValid = ::OpenAPI::fromJsonValue(m_azure_vm_disk_details, json[QString("azureVmDiskDetails")]);
    m_azure_vm_disk_details_isSet = !json[QString("azureVmDiskDetails")].isNull() && m_azure_vm_disk_details_isValid;

    m_enable_rdp_on_target_option_isValid = ::OpenAPI::fromJsonValue(m_enable_rdp_on_target_option, json[QString("enableRdpOnTargetOption")]);
    m_enable_rdp_on_target_option_isSet = !json[QString("enableRdpOnTargetOption")].isNull() && m_enable_rdp_on_target_option_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("encryption")]);
    m_encryption_isSet = !json[QString("encryption")].isNull() && m_encryption_isValid;

    m_initial_replication_details_isValid = ::OpenAPI::fromJsonValue(m_initial_replication_details, json[QString("initialReplicationDetails")]);
    m_initial_replication_details_isSet = !json[QString("initialReplicationDetails")].isNull() && m_initial_replication_details_isValid;

    m_last_replicated_time_isValid = ::OpenAPI::fromJsonValue(m_last_replicated_time, json[QString("lastReplicatedTime")]);
    m_last_replicated_time_isSet = !json[QString("lastReplicatedTime")].isNull() && m_last_replicated_time_isValid;

    m_last_rpo_calculated_time_isValid = ::OpenAPI::fromJsonValue(m_last_rpo_calculated_time, json[QString("lastRpoCalculatedTime")]);
    m_last_rpo_calculated_time_isSet = !json[QString("lastRpoCalculatedTime")].isNull() && m_last_rpo_calculated_time_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_o_s_details_isValid = ::OpenAPI::fromJsonValue(m_o_s_details, json[QString("oSDetails")]);
    m_o_s_details_isSet = !json[QString("oSDetails")].isNull() && m_o_s_details_isValid;

    m_recovery_availability_set_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_availability_set_id, json[QString("recoveryAvailabilitySetId")]);
    m_recovery_availability_set_id_isSet = !json[QString("recoveryAvailabilitySetId")].isNull() && m_recovery_availability_set_id_isValid;

    m_recovery_azure_log_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_log_storage_account_id, json[QString("recoveryAzureLogStorageAccountId")]);
    m_recovery_azure_log_storage_account_id_isSet = !json[QString("recoveryAzureLogStorageAccountId")].isNull() && m_recovery_azure_log_storage_account_id_isValid;

    m_recovery_azure_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_resource_group_id, json[QString("recoveryAzureResourceGroupId")]);
    m_recovery_azure_resource_group_id_isSet = !json[QString("recoveryAzureResourceGroupId")].isNull() && m_recovery_azure_resource_group_id_isValid;

    m_recovery_azure_storage_account_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_storage_account, json[QString("recoveryAzureStorageAccount")]);
    m_recovery_azure_storage_account_isSet = !json[QString("recoveryAzureStorageAccount")].isNull() && m_recovery_azure_storage_account_isValid;

    m_recovery_azure_vm_size_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_vm_size, json[QString("recoveryAzureVMSize")]);
    m_recovery_azure_vm_size_isSet = !json[QString("recoveryAzureVMSize")].isNull() && m_recovery_azure_vm_size_isValid;

    m_recovery_azure_vm_name_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_vm_name, json[QString("recoveryAzureVmName")]);
    m_recovery_azure_vm_name_isSet = !json[QString("recoveryAzureVmName")].isNull() && m_recovery_azure_vm_name_isValid;

    m_rpo_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_rpo_in_seconds, json[QString("rpoInSeconds")]);
    m_rpo_in_seconds_isSet = !json[QString("rpoInSeconds")].isNull() && m_rpo_in_seconds_isValid;

    m_selected_recovery_azure_network_id_isValid = ::OpenAPI::fromJsonValue(m_selected_recovery_azure_network_id, json[QString("selectedRecoveryAzureNetworkId")]);
    m_selected_recovery_azure_network_id_isSet = !json[QString("selectedRecoveryAzureNetworkId")].isNull() && m_selected_recovery_azure_network_id_isValid;

    m_selected_source_nic_id_isValid = ::OpenAPI::fromJsonValue(m_selected_source_nic_id, json[QString("selectedSourceNicId")]);
    m_selected_source_nic_id_isSet = !json[QString("selectedSourceNicId")].isNull() && m_selected_source_nic_id_isValid;

    m_source_vm_cpu_count_isValid = ::OpenAPI::fromJsonValue(m_source_vm_cpu_count, json[QString("sourceVmCpuCount")]);
    m_source_vm_cpu_count_isSet = !json[QString("sourceVmCpuCount")].isNull() && m_source_vm_cpu_count_isValid;

    m_source_vm_ram_size_in_mb_isValid = ::OpenAPI::fromJsonValue(m_source_vm_ram_size_in_mb, json[QString("sourceVmRamSizeInMB")]);
    m_source_vm_ram_size_in_mb_isSet = !json[QString("sourceVmRamSizeInMB")].isNull() && m_source_vm_ram_size_in_mb_isValid;

    m_use_managed_disks_isValid = ::OpenAPI::fromJsonValue(m_use_managed_disks, json[QString("useManagedDisks")]);
    m_use_managed_disks_isSet = !json[QString("useManagedDisks")].isNull() && m_use_managed_disks_isValid;

    m_vm_id_isValid = ::OpenAPI::fromJsonValue(m_vm_id, json[QString("vmId")]);
    m_vm_id_isSet = !json[QString("vmId")].isNull() && m_vm_id_isValid;

    m_vm_nics_isValid = ::OpenAPI::fromJsonValue(m_vm_nics, json[QString("vmNics")]);
    m_vm_nics_isSet = !json[QString("vmNics")].isNull() && m_vm_nics_isValid;

    m_vm_protection_state_isValid = ::OpenAPI::fromJsonValue(m_vm_protection_state, json[QString("vmProtectionState")]);
    m_vm_protection_state_isSet = !json[QString("vmProtectionState")].isNull() && m_vm_protection_state_isValid;

    m_vm_protection_state_description_isValid = ::OpenAPI::fromJsonValue(m_vm_protection_state_description, json[QString("vmProtectionStateDescription")]);
    m_vm_protection_state_description_isSet = !json[QString("vmProtectionStateDescription")].isNull() && m_vm_protection_state_description_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHyperVReplicaAzureReplicationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_vm_disk_details.size() > 0) {
        obj.insert(QString("azureVmDiskDetails"), ::OpenAPI::toJsonValue(m_azure_vm_disk_details));
    }
    if (m_enable_rdp_on_target_option_isSet) {
        obj.insert(QString("enableRdpOnTargetOption"), ::OpenAPI::toJsonValue(m_enable_rdp_on_target_option));
    }
    if (m_encryption_isSet) {
        obj.insert(QString("encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_initial_replication_details.isSet()) {
        obj.insert(QString("initialReplicationDetails"), ::OpenAPI::toJsonValue(m_initial_replication_details));
    }
    if (m_last_replicated_time_isSet) {
        obj.insert(QString("lastReplicatedTime"), ::OpenAPI::toJsonValue(m_last_replicated_time));
    }
    if (m_last_rpo_calculated_time_isSet) {
        obj.insert(QString("lastRpoCalculatedTime"), ::OpenAPI::toJsonValue(m_last_rpo_calculated_time));
    }
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_o_s_details.isSet()) {
        obj.insert(QString("oSDetails"), ::OpenAPI::toJsonValue(m_o_s_details));
    }
    if (m_recovery_availability_set_id_isSet) {
        obj.insert(QString("recoveryAvailabilitySetId"), ::OpenAPI::toJsonValue(m_recovery_availability_set_id));
    }
    if (m_recovery_azure_log_storage_account_id_isSet) {
        obj.insert(QString("recoveryAzureLogStorageAccountId"), ::OpenAPI::toJsonValue(m_recovery_azure_log_storage_account_id));
    }
    if (m_recovery_azure_resource_group_id_isSet) {
        obj.insert(QString("recoveryAzureResourceGroupId"), ::OpenAPI::toJsonValue(m_recovery_azure_resource_group_id));
    }
    if (m_recovery_azure_storage_account_isSet) {
        obj.insert(QString("recoveryAzureStorageAccount"), ::OpenAPI::toJsonValue(m_recovery_azure_storage_account));
    }
    if (m_recovery_azure_vm_size_isSet) {
        obj.insert(QString("recoveryAzureVMSize"), ::OpenAPI::toJsonValue(m_recovery_azure_vm_size));
    }
    if (m_recovery_azure_vm_name_isSet) {
        obj.insert(QString("recoveryAzureVmName"), ::OpenAPI::toJsonValue(m_recovery_azure_vm_name));
    }
    if (m_rpo_in_seconds_isSet) {
        obj.insert(QString("rpoInSeconds"), ::OpenAPI::toJsonValue(m_rpo_in_seconds));
    }
    if (m_selected_recovery_azure_network_id_isSet) {
        obj.insert(QString("selectedRecoveryAzureNetworkId"), ::OpenAPI::toJsonValue(m_selected_recovery_azure_network_id));
    }
    if (m_selected_source_nic_id_isSet) {
        obj.insert(QString("selectedSourceNicId"), ::OpenAPI::toJsonValue(m_selected_source_nic_id));
    }
    if (m_source_vm_cpu_count_isSet) {
        obj.insert(QString("sourceVmCpuCount"), ::OpenAPI::toJsonValue(m_source_vm_cpu_count));
    }
    if (m_source_vm_ram_size_in_mb_isSet) {
        obj.insert(QString("sourceVmRamSizeInMB"), ::OpenAPI::toJsonValue(m_source_vm_ram_size_in_mb));
    }
    if (m_use_managed_disks_isSet) {
        obj.insert(QString("useManagedDisks"), ::OpenAPI::toJsonValue(m_use_managed_disks));
    }
    if (m_vm_id_isSet) {
        obj.insert(QString("vmId"), ::OpenAPI::toJsonValue(m_vm_id));
    }
    if (m_vm_nics.size() > 0) {
        obj.insert(QString("vmNics"), ::OpenAPI::toJsonValue(m_vm_nics));
    }
    if (m_vm_protection_state_isSet) {
        obj.insert(QString("vmProtectionState"), ::OpenAPI::toJsonValue(m_vm_protection_state));
    }
    if (m_vm_protection_state_description_isSet) {
        obj.insert(QString("vmProtectionStateDescription"), ::OpenAPI::toJsonValue(m_vm_protection_state_description));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QList<OAIAzureVmDiskDetails> OAIHyperVReplicaAzureReplicationDetails::getAzureVmDiskDetails() const {
    return m_azure_vm_disk_details;
}
void OAIHyperVReplicaAzureReplicationDetails::setAzureVmDiskDetails(const QList<OAIAzureVmDiskDetails> &azure_vm_disk_details) {
    m_azure_vm_disk_details = azure_vm_disk_details;
    m_azure_vm_disk_details_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_azure_vm_disk_details_Set() const{
    return m_azure_vm_disk_details_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_azure_vm_disk_details_Valid() const{
    return m_azure_vm_disk_details_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getEnableRdpOnTargetOption() const {
    return m_enable_rdp_on_target_option;
}
void OAIHyperVReplicaAzureReplicationDetails::setEnableRdpOnTargetOption(const QString &enable_rdp_on_target_option) {
    m_enable_rdp_on_target_option = enable_rdp_on_target_option;
    m_enable_rdp_on_target_option_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_enable_rdp_on_target_option_Set() const{
    return m_enable_rdp_on_target_option_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_enable_rdp_on_target_option_Valid() const{
    return m_enable_rdp_on_target_option_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getEncryption() const {
    return m_encryption;
}
void OAIHyperVReplicaAzureReplicationDetails::setEncryption(const QString &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_encryption_Valid() const{
    return m_encryption_isValid;
}

OAIInitialReplicationDetails OAIHyperVReplicaAzureReplicationDetails::getInitialReplicationDetails() const {
    return m_initial_replication_details;
}
void OAIHyperVReplicaAzureReplicationDetails::setInitialReplicationDetails(const OAIInitialReplicationDetails &initial_replication_details) {
    m_initial_replication_details = initial_replication_details;
    m_initial_replication_details_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_initial_replication_details_Set() const{
    return m_initial_replication_details_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_initial_replication_details_Valid() const{
    return m_initial_replication_details_isValid;
}

QDateTime OAIHyperVReplicaAzureReplicationDetails::getLastReplicatedTime() const {
    return m_last_replicated_time;
}
void OAIHyperVReplicaAzureReplicationDetails::setLastReplicatedTime(const QDateTime &last_replicated_time) {
    m_last_replicated_time = last_replicated_time;
    m_last_replicated_time_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_last_replicated_time_Set() const{
    return m_last_replicated_time_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_last_replicated_time_Valid() const{
    return m_last_replicated_time_isValid;
}

QDateTime OAIHyperVReplicaAzureReplicationDetails::getLastRpoCalculatedTime() const {
    return m_last_rpo_calculated_time;
}
void OAIHyperVReplicaAzureReplicationDetails::setLastRpoCalculatedTime(const QDateTime &last_rpo_calculated_time) {
    m_last_rpo_calculated_time = last_rpo_calculated_time;
    m_last_rpo_calculated_time_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_last_rpo_calculated_time_Set() const{
    return m_last_rpo_calculated_time_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_last_rpo_calculated_time_Valid() const{
    return m_last_rpo_calculated_time_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getLicenseType() const {
    return m_license_type;
}
void OAIHyperVReplicaAzureReplicationDetails::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_license_type_Valid() const{
    return m_license_type_isValid;
}

OAIOSDetails OAIHyperVReplicaAzureReplicationDetails::getOSDetails() const {
    return m_o_s_details;
}
void OAIHyperVReplicaAzureReplicationDetails::setOSDetails(const OAIOSDetails &o_s_details) {
    m_o_s_details = o_s_details;
    m_o_s_details_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_o_s_details_Set() const{
    return m_o_s_details_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_o_s_details_Valid() const{
    return m_o_s_details_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getRecoveryAvailabilitySetId() const {
    return m_recovery_availability_set_id;
}
void OAIHyperVReplicaAzureReplicationDetails::setRecoveryAvailabilitySetId(const QString &recovery_availability_set_id) {
    m_recovery_availability_set_id = recovery_availability_set_id;
    m_recovery_availability_set_id_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_recovery_availability_set_id_Set() const{
    return m_recovery_availability_set_id_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_recovery_availability_set_id_Valid() const{
    return m_recovery_availability_set_id_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getRecoveryAzureLogStorageAccountId() const {
    return m_recovery_azure_log_storage_account_id;
}
void OAIHyperVReplicaAzureReplicationDetails::setRecoveryAzureLogStorageAccountId(const QString &recovery_azure_log_storage_account_id) {
    m_recovery_azure_log_storage_account_id = recovery_azure_log_storage_account_id;
    m_recovery_azure_log_storage_account_id_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_recovery_azure_log_storage_account_id_Set() const{
    return m_recovery_azure_log_storage_account_id_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_recovery_azure_log_storage_account_id_Valid() const{
    return m_recovery_azure_log_storage_account_id_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getRecoveryAzureResourceGroupId() const {
    return m_recovery_azure_resource_group_id;
}
void OAIHyperVReplicaAzureReplicationDetails::setRecoveryAzureResourceGroupId(const QString &recovery_azure_resource_group_id) {
    m_recovery_azure_resource_group_id = recovery_azure_resource_group_id;
    m_recovery_azure_resource_group_id_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_recovery_azure_resource_group_id_Set() const{
    return m_recovery_azure_resource_group_id_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_recovery_azure_resource_group_id_Valid() const{
    return m_recovery_azure_resource_group_id_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getRecoveryAzureStorageAccount() const {
    return m_recovery_azure_storage_account;
}
void OAIHyperVReplicaAzureReplicationDetails::setRecoveryAzureStorageAccount(const QString &recovery_azure_storage_account) {
    m_recovery_azure_storage_account = recovery_azure_storage_account;
    m_recovery_azure_storage_account_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_recovery_azure_storage_account_Set() const{
    return m_recovery_azure_storage_account_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_recovery_azure_storage_account_Valid() const{
    return m_recovery_azure_storage_account_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getRecoveryAzureVmSize() const {
    return m_recovery_azure_vm_size;
}
void OAIHyperVReplicaAzureReplicationDetails::setRecoveryAzureVmSize(const QString &recovery_azure_vm_size) {
    m_recovery_azure_vm_size = recovery_azure_vm_size;
    m_recovery_azure_vm_size_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_recovery_azure_vm_size_Set() const{
    return m_recovery_azure_vm_size_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_recovery_azure_vm_size_Valid() const{
    return m_recovery_azure_vm_size_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getRecoveryAzureVmName() const {
    return m_recovery_azure_vm_name;
}
void OAIHyperVReplicaAzureReplicationDetails::setRecoveryAzureVmName(const QString &recovery_azure_vm_name) {
    m_recovery_azure_vm_name = recovery_azure_vm_name;
    m_recovery_azure_vm_name_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_recovery_azure_vm_name_Set() const{
    return m_recovery_azure_vm_name_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_recovery_azure_vm_name_Valid() const{
    return m_recovery_azure_vm_name_isValid;
}

qint64 OAIHyperVReplicaAzureReplicationDetails::getRpoInSeconds() const {
    return m_rpo_in_seconds;
}
void OAIHyperVReplicaAzureReplicationDetails::setRpoInSeconds(const qint64 &rpo_in_seconds) {
    m_rpo_in_seconds = rpo_in_seconds;
    m_rpo_in_seconds_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_rpo_in_seconds_Set() const{
    return m_rpo_in_seconds_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_rpo_in_seconds_Valid() const{
    return m_rpo_in_seconds_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getSelectedRecoveryAzureNetworkId() const {
    return m_selected_recovery_azure_network_id;
}
void OAIHyperVReplicaAzureReplicationDetails::setSelectedRecoveryAzureNetworkId(const QString &selected_recovery_azure_network_id) {
    m_selected_recovery_azure_network_id = selected_recovery_azure_network_id;
    m_selected_recovery_azure_network_id_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_selected_recovery_azure_network_id_Set() const{
    return m_selected_recovery_azure_network_id_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_selected_recovery_azure_network_id_Valid() const{
    return m_selected_recovery_azure_network_id_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getSelectedSourceNicId() const {
    return m_selected_source_nic_id;
}
void OAIHyperVReplicaAzureReplicationDetails::setSelectedSourceNicId(const QString &selected_source_nic_id) {
    m_selected_source_nic_id = selected_source_nic_id;
    m_selected_source_nic_id_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_selected_source_nic_id_Set() const{
    return m_selected_source_nic_id_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_selected_source_nic_id_Valid() const{
    return m_selected_source_nic_id_isValid;
}

qint32 OAIHyperVReplicaAzureReplicationDetails::getSourceVmCpuCount() const {
    return m_source_vm_cpu_count;
}
void OAIHyperVReplicaAzureReplicationDetails::setSourceVmCpuCount(const qint32 &source_vm_cpu_count) {
    m_source_vm_cpu_count = source_vm_cpu_count;
    m_source_vm_cpu_count_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_source_vm_cpu_count_Set() const{
    return m_source_vm_cpu_count_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_source_vm_cpu_count_Valid() const{
    return m_source_vm_cpu_count_isValid;
}

qint32 OAIHyperVReplicaAzureReplicationDetails::getSourceVmRamSizeInMb() const {
    return m_source_vm_ram_size_in_mb;
}
void OAIHyperVReplicaAzureReplicationDetails::setSourceVmRamSizeInMb(const qint32 &source_vm_ram_size_in_mb) {
    m_source_vm_ram_size_in_mb = source_vm_ram_size_in_mb;
    m_source_vm_ram_size_in_mb_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_source_vm_ram_size_in_mb_Set() const{
    return m_source_vm_ram_size_in_mb_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_source_vm_ram_size_in_mb_Valid() const{
    return m_source_vm_ram_size_in_mb_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getUseManagedDisks() const {
    return m_use_managed_disks;
}
void OAIHyperVReplicaAzureReplicationDetails::setUseManagedDisks(const QString &use_managed_disks) {
    m_use_managed_disks = use_managed_disks;
    m_use_managed_disks_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_use_managed_disks_Set() const{
    return m_use_managed_disks_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_use_managed_disks_Valid() const{
    return m_use_managed_disks_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getVmId() const {
    return m_vm_id;
}
void OAIHyperVReplicaAzureReplicationDetails::setVmId(const QString &vm_id) {
    m_vm_id = vm_id;
    m_vm_id_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_vm_id_Set() const{
    return m_vm_id_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_vm_id_Valid() const{
    return m_vm_id_isValid;
}

QList<OAIVMNicDetails> OAIHyperVReplicaAzureReplicationDetails::getVmNics() const {
    return m_vm_nics;
}
void OAIHyperVReplicaAzureReplicationDetails::setVmNics(const QList<OAIVMNicDetails> &vm_nics) {
    m_vm_nics = vm_nics;
    m_vm_nics_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_vm_nics_Set() const{
    return m_vm_nics_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_vm_nics_Valid() const{
    return m_vm_nics_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getVmProtectionState() const {
    return m_vm_protection_state;
}
void OAIHyperVReplicaAzureReplicationDetails::setVmProtectionState(const QString &vm_protection_state) {
    m_vm_protection_state = vm_protection_state;
    m_vm_protection_state_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_vm_protection_state_Set() const{
    return m_vm_protection_state_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_vm_protection_state_Valid() const{
    return m_vm_protection_state_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getVmProtectionStateDescription() const {
    return m_vm_protection_state_description;
}
void OAIHyperVReplicaAzureReplicationDetails::setVmProtectionStateDescription(const QString &vm_protection_state_description) {
    m_vm_protection_state_description = vm_protection_state_description;
    m_vm_protection_state_description_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_vm_protection_state_description_Set() const{
    return m_vm_protection_state_description_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_vm_protection_state_description_Valid() const{
    return m_vm_protection_state_description_isValid;
}

QString OAIHyperVReplicaAzureReplicationDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIHyperVReplicaAzureReplicationDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIHyperVReplicaAzureReplicationDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIHyperVReplicaAzureReplicationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_vm_disk_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_rdp_on_target_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_replication_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_replicated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_rpo_calculated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_s_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_availability_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_log_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_storage_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpo_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_recovery_azure_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_source_nic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vm_cpu_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vm_ram_size_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_managed_disks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_nics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_protection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_protection_state_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHyperVReplicaAzureReplicationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
