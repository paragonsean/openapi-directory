/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIA2AEventDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIA2AEventDetails::OAIA2AEventDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIA2AEventDetails::OAIA2AEventDetails() {
    this->initializeModel();
}

OAIA2AEventDetails::~OAIA2AEventDetails() {}

void OAIA2AEventDetails::initializeModel() {

    m_fabric_location_isSet = false;
    m_fabric_location_isValid = false;

    m_fabric_name_isSet = false;
    m_fabric_name_isValid = false;

    m_fabric_object_id_isSet = false;
    m_fabric_object_id_isValid = false;

    m_protected_item_name_isSet = false;
    m_protected_item_name_isValid = false;

    m_remote_fabric_location_isSet = false;
    m_remote_fabric_location_isValid = false;

    m_remote_fabric_name_isSet = false;
    m_remote_fabric_name_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIA2AEventDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIA2AEventDetails::fromJsonObject(QJsonObject json) {

    m_fabric_location_isValid = ::OpenAPI::fromJsonValue(m_fabric_location, json[QString("fabricLocation")]);
    m_fabric_location_isSet = !json[QString("fabricLocation")].isNull() && m_fabric_location_isValid;

    m_fabric_name_isValid = ::OpenAPI::fromJsonValue(m_fabric_name, json[QString("fabricName")]);
    m_fabric_name_isSet = !json[QString("fabricName")].isNull() && m_fabric_name_isValid;

    m_fabric_object_id_isValid = ::OpenAPI::fromJsonValue(m_fabric_object_id, json[QString("fabricObjectId")]);
    m_fabric_object_id_isSet = !json[QString("fabricObjectId")].isNull() && m_fabric_object_id_isValid;

    m_protected_item_name_isValid = ::OpenAPI::fromJsonValue(m_protected_item_name, json[QString("protectedItemName")]);
    m_protected_item_name_isSet = !json[QString("protectedItemName")].isNull() && m_protected_item_name_isValid;

    m_remote_fabric_location_isValid = ::OpenAPI::fromJsonValue(m_remote_fabric_location, json[QString("remoteFabricLocation")]);
    m_remote_fabric_location_isSet = !json[QString("remoteFabricLocation")].isNull() && m_remote_fabric_location_isValid;

    m_remote_fabric_name_isValid = ::OpenAPI::fromJsonValue(m_remote_fabric_name, json[QString("remoteFabricName")]);
    m_remote_fabric_name_isSet = !json[QString("remoteFabricName")].isNull() && m_remote_fabric_name_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIA2AEventDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIA2AEventDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_fabric_location_isSet) {
        obj.insert(QString("fabricLocation"), ::OpenAPI::toJsonValue(m_fabric_location));
    }
    if (m_fabric_name_isSet) {
        obj.insert(QString("fabricName"), ::OpenAPI::toJsonValue(m_fabric_name));
    }
    if (m_fabric_object_id_isSet) {
        obj.insert(QString("fabricObjectId"), ::OpenAPI::toJsonValue(m_fabric_object_id));
    }
    if (m_protected_item_name_isSet) {
        obj.insert(QString("protectedItemName"), ::OpenAPI::toJsonValue(m_protected_item_name));
    }
    if (m_remote_fabric_location_isSet) {
        obj.insert(QString("remoteFabricLocation"), ::OpenAPI::toJsonValue(m_remote_fabric_location));
    }
    if (m_remote_fabric_name_isSet) {
        obj.insert(QString("remoteFabricName"), ::OpenAPI::toJsonValue(m_remote_fabric_name));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIA2AEventDetails::getFabricLocation() const {
    return m_fabric_location;
}
void OAIA2AEventDetails::setFabricLocation(const QString &fabric_location) {
    m_fabric_location = fabric_location;
    m_fabric_location_isSet = true;
}

bool OAIA2AEventDetails::is_fabric_location_Set() const{
    return m_fabric_location_isSet;
}

bool OAIA2AEventDetails::is_fabric_location_Valid() const{
    return m_fabric_location_isValid;
}

QString OAIA2AEventDetails::getFabricName() const {
    return m_fabric_name;
}
void OAIA2AEventDetails::setFabricName(const QString &fabric_name) {
    m_fabric_name = fabric_name;
    m_fabric_name_isSet = true;
}

bool OAIA2AEventDetails::is_fabric_name_Set() const{
    return m_fabric_name_isSet;
}

bool OAIA2AEventDetails::is_fabric_name_Valid() const{
    return m_fabric_name_isValid;
}

QString OAIA2AEventDetails::getFabricObjectId() const {
    return m_fabric_object_id;
}
void OAIA2AEventDetails::setFabricObjectId(const QString &fabric_object_id) {
    m_fabric_object_id = fabric_object_id;
    m_fabric_object_id_isSet = true;
}

bool OAIA2AEventDetails::is_fabric_object_id_Set() const{
    return m_fabric_object_id_isSet;
}

bool OAIA2AEventDetails::is_fabric_object_id_Valid() const{
    return m_fabric_object_id_isValid;
}

QString OAIA2AEventDetails::getProtectedItemName() const {
    return m_protected_item_name;
}
void OAIA2AEventDetails::setProtectedItemName(const QString &protected_item_name) {
    m_protected_item_name = protected_item_name;
    m_protected_item_name_isSet = true;
}

bool OAIA2AEventDetails::is_protected_item_name_Set() const{
    return m_protected_item_name_isSet;
}

bool OAIA2AEventDetails::is_protected_item_name_Valid() const{
    return m_protected_item_name_isValid;
}

QString OAIA2AEventDetails::getRemoteFabricLocation() const {
    return m_remote_fabric_location;
}
void OAIA2AEventDetails::setRemoteFabricLocation(const QString &remote_fabric_location) {
    m_remote_fabric_location = remote_fabric_location;
    m_remote_fabric_location_isSet = true;
}

bool OAIA2AEventDetails::is_remote_fabric_location_Set() const{
    return m_remote_fabric_location_isSet;
}

bool OAIA2AEventDetails::is_remote_fabric_location_Valid() const{
    return m_remote_fabric_location_isValid;
}

QString OAIA2AEventDetails::getRemoteFabricName() const {
    return m_remote_fabric_name;
}
void OAIA2AEventDetails::setRemoteFabricName(const QString &remote_fabric_name) {
    m_remote_fabric_name = remote_fabric_name;
    m_remote_fabric_name_isSet = true;
}

bool OAIA2AEventDetails::is_remote_fabric_name_Set() const{
    return m_remote_fabric_name_isSet;
}

bool OAIA2AEventDetails::is_remote_fabric_name_Valid() const{
    return m_remote_fabric_name_isValid;
}

QString OAIA2AEventDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIA2AEventDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIA2AEventDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIA2AEventDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIA2AEventDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fabric_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_item_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_fabric_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_fabric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIA2AEventDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
