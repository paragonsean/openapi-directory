/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInMageBasePolicyDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInMageBasePolicyDetails::OAIInMageBasePolicyDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInMageBasePolicyDetails::OAIInMageBasePolicyDetails() {
    this->initializeModel();
}

OAIInMageBasePolicyDetails::~OAIInMageBasePolicyDetails() {}

void OAIInMageBasePolicyDetails::initializeModel() {

    m_app_consistent_frequency_in_minutes_isSet = false;
    m_app_consistent_frequency_in_minutes_isValid = false;

    m_multi_vm_sync_status_isSet = false;
    m_multi_vm_sync_status_isValid = false;

    m_recovery_point_history_isSet = false;
    m_recovery_point_history_isValid = false;

    m_recovery_point_threshold_in_minutes_isSet = false;
    m_recovery_point_threshold_in_minutes_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIInMageBasePolicyDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInMageBasePolicyDetails::fromJsonObject(QJsonObject json) {

    m_app_consistent_frequency_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_app_consistent_frequency_in_minutes, json[QString("appConsistentFrequencyInMinutes")]);
    m_app_consistent_frequency_in_minutes_isSet = !json[QString("appConsistentFrequencyInMinutes")].isNull() && m_app_consistent_frequency_in_minutes_isValid;

    m_multi_vm_sync_status_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_sync_status, json[QString("multiVmSyncStatus")]);
    m_multi_vm_sync_status_isSet = !json[QString("multiVmSyncStatus")].isNull() && m_multi_vm_sync_status_isValid;

    m_recovery_point_history_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_history, json[QString("recoveryPointHistory")]);
    m_recovery_point_history_isSet = !json[QString("recoveryPointHistory")].isNull() && m_recovery_point_history_isValid;

    m_recovery_point_threshold_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_threshold_in_minutes, json[QString("recoveryPointThresholdInMinutes")]);
    m_recovery_point_threshold_in_minutes_isSet = !json[QString("recoveryPointThresholdInMinutes")].isNull() && m_recovery_point_threshold_in_minutes_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIInMageBasePolicyDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInMageBasePolicyDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_app_consistent_frequency_in_minutes_isSet) {
        obj.insert(QString("appConsistentFrequencyInMinutes"), ::OpenAPI::toJsonValue(m_app_consistent_frequency_in_minutes));
    }
    if (m_multi_vm_sync_status_isSet) {
        obj.insert(QString("multiVmSyncStatus"), ::OpenAPI::toJsonValue(m_multi_vm_sync_status));
    }
    if (m_recovery_point_history_isSet) {
        obj.insert(QString("recoveryPointHistory"), ::OpenAPI::toJsonValue(m_recovery_point_history));
    }
    if (m_recovery_point_threshold_in_minutes_isSet) {
        obj.insert(QString("recoveryPointThresholdInMinutes"), ::OpenAPI::toJsonValue(m_recovery_point_threshold_in_minutes));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

qint32 OAIInMageBasePolicyDetails::getAppConsistentFrequencyInMinutes() const {
    return m_app_consistent_frequency_in_minutes;
}
void OAIInMageBasePolicyDetails::setAppConsistentFrequencyInMinutes(const qint32 &app_consistent_frequency_in_minutes) {
    m_app_consistent_frequency_in_minutes = app_consistent_frequency_in_minutes;
    m_app_consistent_frequency_in_minutes_isSet = true;
}

bool OAIInMageBasePolicyDetails::is_app_consistent_frequency_in_minutes_Set() const{
    return m_app_consistent_frequency_in_minutes_isSet;
}

bool OAIInMageBasePolicyDetails::is_app_consistent_frequency_in_minutes_Valid() const{
    return m_app_consistent_frequency_in_minutes_isValid;
}

QString OAIInMageBasePolicyDetails::getMultiVmSyncStatus() const {
    return m_multi_vm_sync_status;
}
void OAIInMageBasePolicyDetails::setMultiVmSyncStatus(const QString &multi_vm_sync_status) {
    m_multi_vm_sync_status = multi_vm_sync_status;
    m_multi_vm_sync_status_isSet = true;
}

bool OAIInMageBasePolicyDetails::is_multi_vm_sync_status_Set() const{
    return m_multi_vm_sync_status_isSet;
}

bool OAIInMageBasePolicyDetails::is_multi_vm_sync_status_Valid() const{
    return m_multi_vm_sync_status_isValid;
}

qint32 OAIInMageBasePolicyDetails::getRecoveryPointHistory() const {
    return m_recovery_point_history;
}
void OAIInMageBasePolicyDetails::setRecoveryPointHistory(const qint32 &recovery_point_history) {
    m_recovery_point_history = recovery_point_history;
    m_recovery_point_history_isSet = true;
}

bool OAIInMageBasePolicyDetails::is_recovery_point_history_Set() const{
    return m_recovery_point_history_isSet;
}

bool OAIInMageBasePolicyDetails::is_recovery_point_history_Valid() const{
    return m_recovery_point_history_isValid;
}

qint32 OAIInMageBasePolicyDetails::getRecoveryPointThresholdInMinutes() const {
    return m_recovery_point_threshold_in_minutes;
}
void OAIInMageBasePolicyDetails::setRecoveryPointThresholdInMinutes(const qint32 &recovery_point_threshold_in_minutes) {
    m_recovery_point_threshold_in_minutes = recovery_point_threshold_in_minutes;
    m_recovery_point_threshold_in_minutes_isSet = true;
}

bool OAIInMageBasePolicyDetails::is_recovery_point_threshold_in_minutes_Set() const{
    return m_recovery_point_threshold_in_minutes_isSet;
}

bool OAIInMageBasePolicyDetails::is_recovery_point_threshold_in_minutes_Valid() const{
    return m_recovery_point_threshold_in_minutes_isValid;
}

QString OAIInMageBasePolicyDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIInMageBasePolicyDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInMageBasePolicyDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInMageBasePolicyDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIInMageBasePolicyDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_consistent_frequency_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_sync_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_threshold_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInMageBasePolicyDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
