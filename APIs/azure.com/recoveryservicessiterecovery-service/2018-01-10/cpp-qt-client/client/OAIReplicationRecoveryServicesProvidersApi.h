/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReplicationRecoveryServicesProvidersApi_H
#define OAI_OAIReplicationRecoveryServicesProvidersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddRecoveryServicesProviderInput.h"
#include "OAIRecoveryServicesProvider.h"
#include "OAIRecoveryServicesProviderCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReplicationRecoveryServicesProvidersApi : public QObject {
    Q_OBJECT

public:
    OAIReplicationRecoveryServicesProvidersApi(const int timeOut = 0);
    ~OAIReplicationRecoveryServicesProvidersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  provider_name QString [required]
    * @param[in]  add_provider_input OAIAddRecoveryServicesProviderInput [required]
    */
    virtual void replicationRecoveryServicesProvidersCreate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &provider_name, const OAIAddRecoveryServicesProviderInput &add_provider_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  provider_name QString [required]
    */
    virtual void replicationRecoveryServicesProvidersDelete(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &provider_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  provider_name QString [required]
    */
    virtual void replicationRecoveryServicesProvidersGet(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &provider_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void replicationRecoveryServicesProvidersList(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    */
    virtual void replicationRecoveryServicesProvidersListByReplicationFabrics(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  provider_name QString [required]
    */
    virtual void replicationRecoveryServicesProvidersPurge(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &provider_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  provider_name QString [required]
    */
    virtual void replicationRecoveryServicesProvidersRefreshProvider(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &provider_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void replicationRecoveryServicesProvidersCreateCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryServicesProvidersDeleteCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryServicesProvidersGetCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryServicesProvidersListCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryServicesProvidersListByReplicationFabricsCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryServicesProvidersPurgeCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryServicesProvidersRefreshProviderCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void replicationRecoveryServicesProvidersCreateSignal(OAIRecoveryServicesProvider summary);
    void replicationRecoveryServicesProvidersDeleteSignal();
    void replicationRecoveryServicesProvidersGetSignal(OAIRecoveryServicesProvider summary);
    void replicationRecoveryServicesProvidersListSignal(OAIRecoveryServicesProviderCollection summary);
    void replicationRecoveryServicesProvidersListByReplicationFabricsSignal(OAIRecoveryServicesProviderCollection summary);
    void replicationRecoveryServicesProvidersPurgeSignal();
    void replicationRecoveryServicesProvidersRefreshProviderSignal(OAIRecoveryServicesProvider summary);


    void replicationRecoveryServicesProvidersCreateSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryServicesProvider summary);
    void replicationRecoveryServicesProvidersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void replicationRecoveryServicesProvidersGetSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryServicesProvider summary);
    void replicationRecoveryServicesProvidersListSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryServicesProviderCollection summary);
    void replicationRecoveryServicesProvidersListByReplicationFabricsSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryServicesProviderCollection summary);
    void replicationRecoveryServicesProvidersPurgeSignalFull(OAIHttpRequestWorker *worker);
    void replicationRecoveryServicesProvidersRefreshProviderSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryServicesProvider summary);

    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersCreateSignalError() instead")
    void replicationRecoveryServicesProvidersCreateSignalE(OAIRecoveryServicesProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersCreateSignalError(OAIRecoveryServicesProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersDeleteSignalError() instead")
    void replicationRecoveryServicesProvidersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersGetSignalError() instead")
    void replicationRecoveryServicesProvidersGetSignalE(OAIRecoveryServicesProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersGetSignalError(OAIRecoveryServicesProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersListSignalError() instead")
    void replicationRecoveryServicesProvidersListSignalE(OAIRecoveryServicesProviderCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersListSignalError(OAIRecoveryServicesProviderCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersListByReplicationFabricsSignalError() instead")
    void replicationRecoveryServicesProvidersListByReplicationFabricsSignalE(OAIRecoveryServicesProviderCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersListByReplicationFabricsSignalError(OAIRecoveryServicesProviderCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersPurgeSignalError() instead")
    void replicationRecoveryServicesProvidersPurgeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersPurgeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersRefreshProviderSignalError() instead")
    void replicationRecoveryServicesProvidersRefreshProviderSignalE(OAIRecoveryServicesProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersRefreshProviderSignalError(OAIRecoveryServicesProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersCreateSignalErrorFull() instead")
    void replicationRecoveryServicesProvidersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersDeleteSignalErrorFull() instead")
    void replicationRecoveryServicesProvidersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersGetSignalErrorFull() instead")
    void replicationRecoveryServicesProvidersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersListSignalErrorFull() instead")
    void replicationRecoveryServicesProvidersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersListByReplicationFabricsSignalErrorFull() instead")
    void replicationRecoveryServicesProvidersListByReplicationFabricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersListByReplicationFabricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersPurgeSignalErrorFull() instead")
    void replicationRecoveryServicesProvidersPurgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersPurgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryServicesProvidersRefreshProviderSignalErrorFull() instead")
    void replicationRecoveryServicesProvidersRefreshProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryServicesProvidersRefreshProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
