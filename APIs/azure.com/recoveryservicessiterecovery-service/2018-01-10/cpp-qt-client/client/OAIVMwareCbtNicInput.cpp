/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVMwareCbtNicInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVMwareCbtNicInput::OAIVMwareCbtNicInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVMwareCbtNicInput::OAIVMwareCbtNicInput() {
    this->initializeModel();
}

OAIVMwareCbtNicInput::~OAIVMwareCbtNicInput() {}

void OAIVMwareCbtNicInput::initializeModel() {

    m_is_primary_nic_isSet = false;
    m_is_primary_nic_isValid = false;

    m_is_selected_for_migration_isSet = false;
    m_is_selected_for_migration_isValid = false;

    m_nic_id_isSet = false;
    m_nic_id_isValid = false;

    m_target_static_ip_address_isSet = false;
    m_target_static_ip_address_isValid = false;

    m_target_subnet_name_isSet = false;
    m_target_subnet_name_isValid = false;
}

void OAIVMwareCbtNicInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVMwareCbtNicInput::fromJsonObject(QJsonObject json) {

    m_is_primary_nic_isValid = ::OpenAPI::fromJsonValue(m_is_primary_nic, json[QString("isPrimaryNic")]);
    m_is_primary_nic_isSet = !json[QString("isPrimaryNic")].isNull() && m_is_primary_nic_isValid;

    m_is_selected_for_migration_isValid = ::OpenAPI::fromJsonValue(m_is_selected_for_migration, json[QString("isSelectedForMigration")]);
    m_is_selected_for_migration_isSet = !json[QString("isSelectedForMigration")].isNull() && m_is_selected_for_migration_isValid;

    m_nic_id_isValid = ::OpenAPI::fromJsonValue(m_nic_id, json[QString("nicId")]);
    m_nic_id_isSet = !json[QString("nicId")].isNull() && m_nic_id_isValid;

    m_target_static_ip_address_isValid = ::OpenAPI::fromJsonValue(m_target_static_ip_address, json[QString("targetStaticIPAddress")]);
    m_target_static_ip_address_isSet = !json[QString("targetStaticIPAddress")].isNull() && m_target_static_ip_address_isValid;

    m_target_subnet_name_isValid = ::OpenAPI::fromJsonValue(m_target_subnet_name, json[QString("targetSubnetName")]);
    m_target_subnet_name_isSet = !json[QString("targetSubnetName")].isNull() && m_target_subnet_name_isValid;
}

QString OAIVMwareCbtNicInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVMwareCbtNicInput::asJsonObject() const {
    QJsonObject obj;
    if (m_is_primary_nic_isSet) {
        obj.insert(QString("isPrimaryNic"), ::OpenAPI::toJsonValue(m_is_primary_nic));
    }
    if (m_is_selected_for_migration_isSet) {
        obj.insert(QString("isSelectedForMigration"), ::OpenAPI::toJsonValue(m_is_selected_for_migration));
    }
    if (m_nic_id_isSet) {
        obj.insert(QString("nicId"), ::OpenAPI::toJsonValue(m_nic_id));
    }
    if (m_target_static_ip_address_isSet) {
        obj.insert(QString("targetStaticIPAddress"), ::OpenAPI::toJsonValue(m_target_static_ip_address));
    }
    if (m_target_subnet_name_isSet) {
        obj.insert(QString("targetSubnetName"), ::OpenAPI::toJsonValue(m_target_subnet_name));
    }
    return obj;
}

QString OAIVMwareCbtNicInput::getIsPrimaryNic() const {
    return m_is_primary_nic;
}
void OAIVMwareCbtNicInput::setIsPrimaryNic(const QString &is_primary_nic) {
    m_is_primary_nic = is_primary_nic;
    m_is_primary_nic_isSet = true;
}

bool OAIVMwareCbtNicInput::is_is_primary_nic_Set() const{
    return m_is_primary_nic_isSet;
}

bool OAIVMwareCbtNicInput::is_is_primary_nic_Valid() const{
    return m_is_primary_nic_isValid;
}

QString OAIVMwareCbtNicInput::getIsSelectedForMigration() const {
    return m_is_selected_for_migration;
}
void OAIVMwareCbtNicInput::setIsSelectedForMigration(const QString &is_selected_for_migration) {
    m_is_selected_for_migration = is_selected_for_migration;
    m_is_selected_for_migration_isSet = true;
}

bool OAIVMwareCbtNicInput::is_is_selected_for_migration_Set() const{
    return m_is_selected_for_migration_isSet;
}

bool OAIVMwareCbtNicInput::is_is_selected_for_migration_Valid() const{
    return m_is_selected_for_migration_isValid;
}

QString OAIVMwareCbtNicInput::getNicId() const {
    return m_nic_id;
}
void OAIVMwareCbtNicInput::setNicId(const QString &nic_id) {
    m_nic_id = nic_id;
    m_nic_id_isSet = true;
}

bool OAIVMwareCbtNicInput::is_nic_id_Set() const{
    return m_nic_id_isSet;
}

bool OAIVMwareCbtNicInput::is_nic_id_Valid() const{
    return m_nic_id_isValid;
}

QString OAIVMwareCbtNicInput::getTargetStaticIpAddress() const {
    return m_target_static_ip_address;
}
void OAIVMwareCbtNicInput::setTargetStaticIpAddress(const QString &target_static_ip_address) {
    m_target_static_ip_address = target_static_ip_address;
    m_target_static_ip_address_isSet = true;
}

bool OAIVMwareCbtNicInput::is_target_static_ip_address_Set() const{
    return m_target_static_ip_address_isSet;
}

bool OAIVMwareCbtNicInput::is_target_static_ip_address_Valid() const{
    return m_target_static_ip_address_isValid;
}

QString OAIVMwareCbtNicInput::getTargetSubnetName() const {
    return m_target_subnet_name;
}
void OAIVMwareCbtNicInput::setTargetSubnetName(const QString &target_subnet_name) {
    m_target_subnet_name = target_subnet_name;
    m_target_subnet_name_isSet = true;
}

bool OAIVMwareCbtNicInput::is_target_subnet_name_Set() const{
    return m_target_subnet_name_isSet;
}

bool OAIVMwareCbtNicInput::is_target_subnet_name_Valid() const{
    return m_target_subnet_name_isValid;
}

bool OAIVMwareCbtNicInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_primary_nic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_selected_for_migration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_static_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_subnet_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVMwareCbtNicInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_primary_nic_isValid && m_nic_id_isValid && true;
}

} // namespace OpenAPI
