/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecoveryPlanProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecoveryPlanProperties::OAIRecoveryPlanProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecoveryPlanProperties::OAIRecoveryPlanProperties() {
    this->initializeModel();
}

OAIRecoveryPlanProperties::~OAIRecoveryPlanProperties() {}

void OAIRecoveryPlanProperties::initializeModel() {

    m_allowed_operations_isSet = false;
    m_allowed_operations_isValid = false;

    m_current_scenario_isSet = false;
    m_current_scenario_isValid = false;

    m_current_scenario_status_isSet = false;
    m_current_scenario_status_isValid = false;

    m_current_scenario_status_description_isSet = false;
    m_current_scenario_status_description_isValid = false;

    m_failover_deployment_model_isSet = false;
    m_failover_deployment_model_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_last_planned_failover_time_isSet = false;
    m_last_planned_failover_time_isValid = false;

    m_last_test_failover_time_isSet = false;
    m_last_test_failover_time_isValid = false;

    m_last_unplanned_failover_time_isSet = false;
    m_last_unplanned_failover_time_isValid = false;

    m_primary_fabric_friendly_name_isSet = false;
    m_primary_fabric_friendly_name_isValid = false;

    m_primary_fabric_id_isSet = false;
    m_primary_fabric_id_isValid = false;

    m_recovery_fabric_friendly_name_isSet = false;
    m_recovery_fabric_friendly_name_isValid = false;

    m_recovery_fabric_id_isSet = false;
    m_recovery_fabric_id_isValid = false;

    m_replication_providers_isSet = false;
    m_replication_providers_isValid = false;
}

void OAIRecoveryPlanProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecoveryPlanProperties::fromJsonObject(QJsonObject json) {

    m_allowed_operations_isValid = ::OpenAPI::fromJsonValue(m_allowed_operations, json[QString("allowedOperations")]);
    m_allowed_operations_isSet = !json[QString("allowedOperations")].isNull() && m_allowed_operations_isValid;

    m_current_scenario_isValid = ::OpenAPI::fromJsonValue(m_current_scenario, json[QString("currentScenario")]);
    m_current_scenario_isSet = !json[QString("currentScenario")].isNull() && m_current_scenario_isValid;

    m_current_scenario_status_isValid = ::OpenAPI::fromJsonValue(m_current_scenario_status, json[QString("currentScenarioStatus")]);
    m_current_scenario_status_isSet = !json[QString("currentScenarioStatus")].isNull() && m_current_scenario_status_isValid;

    m_current_scenario_status_description_isValid = ::OpenAPI::fromJsonValue(m_current_scenario_status_description, json[QString("currentScenarioStatusDescription")]);
    m_current_scenario_status_description_isSet = !json[QString("currentScenarioStatusDescription")].isNull() && m_current_scenario_status_description_isValid;

    m_failover_deployment_model_isValid = ::OpenAPI::fromJsonValue(m_failover_deployment_model, json[QString("failoverDeploymentModel")]);
    m_failover_deployment_model_isSet = !json[QString("failoverDeploymentModel")].isNull() && m_failover_deployment_model_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_last_planned_failover_time_isValid = ::OpenAPI::fromJsonValue(m_last_planned_failover_time, json[QString("lastPlannedFailoverTime")]);
    m_last_planned_failover_time_isSet = !json[QString("lastPlannedFailoverTime")].isNull() && m_last_planned_failover_time_isValid;

    m_last_test_failover_time_isValid = ::OpenAPI::fromJsonValue(m_last_test_failover_time, json[QString("lastTestFailoverTime")]);
    m_last_test_failover_time_isSet = !json[QString("lastTestFailoverTime")].isNull() && m_last_test_failover_time_isValid;

    m_last_unplanned_failover_time_isValid = ::OpenAPI::fromJsonValue(m_last_unplanned_failover_time, json[QString("lastUnplannedFailoverTime")]);
    m_last_unplanned_failover_time_isSet = !json[QString("lastUnplannedFailoverTime")].isNull() && m_last_unplanned_failover_time_isValid;

    m_primary_fabric_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_primary_fabric_friendly_name, json[QString("primaryFabricFriendlyName")]);
    m_primary_fabric_friendly_name_isSet = !json[QString("primaryFabricFriendlyName")].isNull() && m_primary_fabric_friendly_name_isValid;

    m_primary_fabric_id_isValid = ::OpenAPI::fromJsonValue(m_primary_fabric_id, json[QString("primaryFabricId")]);
    m_primary_fabric_id_isSet = !json[QString("primaryFabricId")].isNull() && m_primary_fabric_id_isValid;

    m_recovery_fabric_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_recovery_fabric_friendly_name, json[QString("recoveryFabricFriendlyName")]);
    m_recovery_fabric_friendly_name_isSet = !json[QString("recoveryFabricFriendlyName")].isNull() && m_recovery_fabric_friendly_name_isValid;

    m_recovery_fabric_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_fabric_id, json[QString("recoveryFabricId")]);
    m_recovery_fabric_id_isSet = !json[QString("recoveryFabricId")].isNull() && m_recovery_fabric_id_isValid;

    m_replication_providers_isValid = ::OpenAPI::fromJsonValue(m_replication_providers, json[QString("replicationProviders")]);
    m_replication_providers_isSet = !json[QString("replicationProviders")].isNull() && m_replication_providers_isValid;
}

QString OAIRecoveryPlanProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecoveryPlanProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_operations.size() > 0) {
        obj.insert(QString("allowedOperations"), ::OpenAPI::toJsonValue(m_allowed_operations));
    }
    if (m_current_scenario.isSet()) {
        obj.insert(QString("currentScenario"), ::OpenAPI::toJsonValue(m_current_scenario));
    }
    if (m_current_scenario_status_isSet) {
        obj.insert(QString("currentScenarioStatus"), ::OpenAPI::toJsonValue(m_current_scenario_status));
    }
    if (m_current_scenario_status_description_isSet) {
        obj.insert(QString("currentScenarioStatusDescription"), ::OpenAPI::toJsonValue(m_current_scenario_status_description));
    }
    if (m_failover_deployment_model_isSet) {
        obj.insert(QString("failoverDeploymentModel"), ::OpenAPI::toJsonValue(m_failover_deployment_model));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_last_planned_failover_time_isSet) {
        obj.insert(QString("lastPlannedFailoverTime"), ::OpenAPI::toJsonValue(m_last_planned_failover_time));
    }
    if (m_last_test_failover_time_isSet) {
        obj.insert(QString("lastTestFailoverTime"), ::OpenAPI::toJsonValue(m_last_test_failover_time));
    }
    if (m_last_unplanned_failover_time_isSet) {
        obj.insert(QString("lastUnplannedFailoverTime"), ::OpenAPI::toJsonValue(m_last_unplanned_failover_time));
    }
    if (m_primary_fabric_friendly_name_isSet) {
        obj.insert(QString("primaryFabricFriendlyName"), ::OpenAPI::toJsonValue(m_primary_fabric_friendly_name));
    }
    if (m_primary_fabric_id_isSet) {
        obj.insert(QString("primaryFabricId"), ::OpenAPI::toJsonValue(m_primary_fabric_id));
    }
    if (m_recovery_fabric_friendly_name_isSet) {
        obj.insert(QString("recoveryFabricFriendlyName"), ::OpenAPI::toJsonValue(m_recovery_fabric_friendly_name));
    }
    if (m_recovery_fabric_id_isSet) {
        obj.insert(QString("recoveryFabricId"), ::OpenAPI::toJsonValue(m_recovery_fabric_id));
    }
    if (m_replication_providers.size() > 0) {
        obj.insert(QString("replicationProviders"), ::OpenAPI::toJsonValue(m_replication_providers));
    }
    return obj;
}

QList<QString> OAIRecoveryPlanProperties::getAllowedOperations() const {
    return m_allowed_operations;
}
void OAIRecoveryPlanProperties::setAllowedOperations(const QList<QString> &allowed_operations) {
    m_allowed_operations = allowed_operations;
    m_allowed_operations_isSet = true;
}

bool OAIRecoveryPlanProperties::is_allowed_operations_Set() const{
    return m_allowed_operations_isSet;
}

bool OAIRecoveryPlanProperties::is_allowed_operations_Valid() const{
    return m_allowed_operations_isValid;
}

OAICurrentScenarioDetails OAIRecoveryPlanProperties::getCurrentScenario() const {
    return m_current_scenario;
}
void OAIRecoveryPlanProperties::setCurrentScenario(const OAICurrentScenarioDetails &current_scenario) {
    m_current_scenario = current_scenario;
    m_current_scenario_isSet = true;
}

bool OAIRecoveryPlanProperties::is_current_scenario_Set() const{
    return m_current_scenario_isSet;
}

bool OAIRecoveryPlanProperties::is_current_scenario_Valid() const{
    return m_current_scenario_isValid;
}

QString OAIRecoveryPlanProperties::getCurrentScenarioStatus() const {
    return m_current_scenario_status;
}
void OAIRecoveryPlanProperties::setCurrentScenarioStatus(const QString &current_scenario_status) {
    m_current_scenario_status = current_scenario_status;
    m_current_scenario_status_isSet = true;
}

bool OAIRecoveryPlanProperties::is_current_scenario_status_Set() const{
    return m_current_scenario_status_isSet;
}

bool OAIRecoveryPlanProperties::is_current_scenario_status_Valid() const{
    return m_current_scenario_status_isValid;
}

QString OAIRecoveryPlanProperties::getCurrentScenarioStatusDescription() const {
    return m_current_scenario_status_description;
}
void OAIRecoveryPlanProperties::setCurrentScenarioStatusDescription(const QString &current_scenario_status_description) {
    m_current_scenario_status_description = current_scenario_status_description;
    m_current_scenario_status_description_isSet = true;
}

bool OAIRecoveryPlanProperties::is_current_scenario_status_description_Set() const{
    return m_current_scenario_status_description_isSet;
}

bool OAIRecoveryPlanProperties::is_current_scenario_status_description_Valid() const{
    return m_current_scenario_status_description_isValid;
}

QString OAIRecoveryPlanProperties::getFailoverDeploymentModel() const {
    return m_failover_deployment_model;
}
void OAIRecoveryPlanProperties::setFailoverDeploymentModel(const QString &failover_deployment_model) {
    m_failover_deployment_model = failover_deployment_model;
    m_failover_deployment_model_isSet = true;
}

bool OAIRecoveryPlanProperties::is_failover_deployment_model_Set() const{
    return m_failover_deployment_model_isSet;
}

bool OAIRecoveryPlanProperties::is_failover_deployment_model_Valid() const{
    return m_failover_deployment_model_isValid;
}

QString OAIRecoveryPlanProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIRecoveryPlanProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIRecoveryPlanProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIRecoveryPlanProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QList<OAIRecoveryPlanGroup> OAIRecoveryPlanProperties::getGroups() const {
    return m_groups;
}
void OAIRecoveryPlanProperties::setGroups(const QList<OAIRecoveryPlanGroup> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIRecoveryPlanProperties::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIRecoveryPlanProperties::is_groups_Valid() const{
    return m_groups_isValid;
}

QDateTime OAIRecoveryPlanProperties::getLastPlannedFailoverTime() const {
    return m_last_planned_failover_time;
}
void OAIRecoveryPlanProperties::setLastPlannedFailoverTime(const QDateTime &last_planned_failover_time) {
    m_last_planned_failover_time = last_planned_failover_time;
    m_last_planned_failover_time_isSet = true;
}

bool OAIRecoveryPlanProperties::is_last_planned_failover_time_Set() const{
    return m_last_planned_failover_time_isSet;
}

bool OAIRecoveryPlanProperties::is_last_planned_failover_time_Valid() const{
    return m_last_planned_failover_time_isValid;
}

QDateTime OAIRecoveryPlanProperties::getLastTestFailoverTime() const {
    return m_last_test_failover_time;
}
void OAIRecoveryPlanProperties::setLastTestFailoverTime(const QDateTime &last_test_failover_time) {
    m_last_test_failover_time = last_test_failover_time;
    m_last_test_failover_time_isSet = true;
}

bool OAIRecoveryPlanProperties::is_last_test_failover_time_Set() const{
    return m_last_test_failover_time_isSet;
}

bool OAIRecoveryPlanProperties::is_last_test_failover_time_Valid() const{
    return m_last_test_failover_time_isValid;
}

QDateTime OAIRecoveryPlanProperties::getLastUnplannedFailoverTime() const {
    return m_last_unplanned_failover_time;
}
void OAIRecoveryPlanProperties::setLastUnplannedFailoverTime(const QDateTime &last_unplanned_failover_time) {
    m_last_unplanned_failover_time = last_unplanned_failover_time;
    m_last_unplanned_failover_time_isSet = true;
}

bool OAIRecoveryPlanProperties::is_last_unplanned_failover_time_Set() const{
    return m_last_unplanned_failover_time_isSet;
}

bool OAIRecoveryPlanProperties::is_last_unplanned_failover_time_Valid() const{
    return m_last_unplanned_failover_time_isValid;
}

QString OAIRecoveryPlanProperties::getPrimaryFabricFriendlyName() const {
    return m_primary_fabric_friendly_name;
}
void OAIRecoveryPlanProperties::setPrimaryFabricFriendlyName(const QString &primary_fabric_friendly_name) {
    m_primary_fabric_friendly_name = primary_fabric_friendly_name;
    m_primary_fabric_friendly_name_isSet = true;
}

bool OAIRecoveryPlanProperties::is_primary_fabric_friendly_name_Set() const{
    return m_primary_fabric_friendly_name_isSet;
}

bool OAIRecoveryPlanProperties::is_primary_fabric_friendly_name_Valid() const{
    return m_primary_fabric_friendly_name_isValid;
}

QString OAIRecoveryPlanProperties::getPrimaryFabricId() const {
    return m_primary_fabric_id;
}
void OAIRecoveryPlanProperties::setPrimaryFabricId(const QString &primary_fabric_id) {
    m_primary_fabric_id = primary_fabric_id;
    m_primary_fabric_id_isSet = true;
}

bool OAIRecoveryPlanProperties::is_primary_fabric_id_Set() const{
    return m_primary_fabric_id_isSet;
}

bool OAIRecoveryPlanProperties::is_primary_fabric_id_Valid() const{
    return m_primary_fabric_id_isValid;
}

QString OAIRecoveryPlanProperties::getRecoveryFabricFriendlyName() const {
    return m_recovery_fabric_friendly_name;
}
void OAIRecoveryPlanProperties::setRecoveryFabricFriendlyName(const QString &recovery_fabric_friendly_name) {
    m_recovery_fabric_friendly_name = recovery_fabric_friendly_name;
    m_recovery_fabric_friendly_name_isSet = true;
}

bool OAIRecoveryPlanProperties::is_recovery_fabric_friendly_name_Set() const{
    return m_recovery_fabric_friendly_name_isSet;
}

bool OAIRecoveryPlanProperties::is_recovery_fabric_friendly_name_Valid() const{
    return m_recovery_fabric_friendly_name_isValid;
}

QString OAIRecoveryPlanProperties::getRecoveryFabricId() const {
    return m_recovery_fabric_id;
}
void OAIRecoveryPlanProperties::setRecoveryFabricId(const QString &recovery_fabric_id) {
    m_recovery_fabric_id = recovery_fabric_id;
    m_recovery_fabric_id_isSet = true;
}

bool OAIRecoveryPlanProperties::is_recovery_fabric_id_Set() const{
    return m_recovery_fabric_id_isSet;
}

bool OAIRecoveryPlanProperties::is_recovery_fabric_id_Valid() const{
    return m_recovery_fabric_id_isValid;
}

QList<QString> OAIRecoveryPlanProperties::getReplicationProviders() const {
    return m_replication_providers;
}
void OAIRecoveryPlanProperties::setReplicationProviders(const QList<QString> &replication_providers) {
    m_replication_providers = replication_providers;
    m_replication_providers_isSet = true;
}

bool OAIRecoveryPlanProperties::is_replication_providers_Set() const{
    return m_replication_providers_isSet;
}

bool OAIRecoveryPlanProperties::is_replication_providers_Valid() const{
    return m_replication_providers_isValid;
}

bool OAIRecoveryPlanProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_scenario.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_scenario_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_scenario_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_deployment_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_planned_failover_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_test_failover_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_unplanned_failover_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_fabric_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_fabric_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_fabric_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_fabric_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecoveryPlanProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
