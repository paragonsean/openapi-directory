/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHyperVReplicaAzureReprotectInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHyperVReplicaAzureReprotectInput::OAIHyperVReplicaAzureReprotectInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHyperVReplicaAzureReprotectInput::OAIHyperVReplicaAzureReprotectInput() {
    this->initializeModel();
}

OAIHyperVReplicaAzureReprotectInput::~OAIHyperVReplicaAzureReprotectInput() {}

void OAIHyperVReplicaAzureReprotectInput::initializeModel() {

    m_hv_host_vm_id_isSet = false;
    m_hv_host_vm_id_isValid = false;

    m_log_storage_account_id_isSet = false;
    m_log_storage_account_id_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_storage_account_id_isSet = false;
    m_storage_account_id_isValid = false;

    m_v_hdid_isSet = false;
    m_v_hdid_isValid = false;

    m_vm_name_isSet = false;
    m_vm_name_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIHyperVReplicaAzureReprotectInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHyperVReplicaAzureReprotectInput::fromJsonObject(QJsonObject json) {

    m_hv_host_vm_id_isValid = ::OpenAPI::fromJsonValue(m_hv_host_vm_id, json[QString("hvHostVmId")]);
    m_hv_host_vm_id_isSet = !json[QString("hvHostVmId")].isNull() && m_hv_host_vm_id_isValid;

    m_log_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_log_storage_account_id, json[QString("logStorageAccountId")]);
    m_log_storage_account_id_isSet = !json[QString("logStorageAccountId")].isNull() && m_log_storage_account_id_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_id, json[QString("storageAccountId")]);
    m_storage_account_id_isSet = !json[QString("storageAccountId")].isNull() && m_storage_account_id_isValid;

    m_v_hdid_isValid = ::OpenAPI::fromJsonValue(m_v_hdid, json[QString("vHDId")]);
    m_v_hdid_isSet = !json[QString("vHDId")].isNull() && m_v_hdid_isValid;

    m_vm_name_isValid = ::OpenAPI::fromJsonValue(m_vm_name, json[QString("vmName")]);
    m_vm_name_isSet = !json[QString("vmName")].isNull() && m_vm_name_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIHyperVReplicaAzureReprotectInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHyperVReplicaAzureReprotectInput::asJsonObject() const {
    QJsonObject obj;
    if (m_hv_host_vm_id_isSet) {
        obj.insert(QString("hvHostVmId"), ::OpenAPI::toJsonValue(m_hv_host_vm_id));
    }
    if (m_log_storage_account_id_isSet) {
        obj.insert(QString("logStorageAccountId"), ::OpenAPI::toJsonValue(m_log_storage_account_id));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_storage_account_id_isSet) {
        obj.insert(QString("storageAccountId"), ::OpenAPI::toJsonValue(m_storage_account_id));
    }
    if (m_v_hdid_isSet) {
        obj.insert(QString("vHDId"), ::OpenAPI::toJsonValue(m_v_hdid));
    }
    if (m_vm_name_isSet) {
        obj.insert(QString("vmName"), ::OpenAPI::toJsonValue(m_vm_name));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIHyperVReplicaAzureReprotectInput::getHvHostVmId() const {
    return m_hv_host_vm_id;
}
void OAIHyperVReplicaAzureReprotectInput::setHvHostVmId(const QString &hv_host_vm_id) {
    m_hv_host_vm_id = hv_host_vm_id;
    m_hv_host_vm_id_isSet = true;
}

bool OAIHyperVReplicaAzureReprotectInput::is_hv_host_vm_id_Set() const{
    return m_hv_host_vm_id_isSet;
}

bool OAIHyperVReplicaAzureReprotectInput::is_hv_host_vm_id_Valid() const{
    return m_hv_host_vm_id_isValid;
}

QString OAIHyperVReplicaAzureReprotectInput::getLogStorageAccountId() const {
    return m_log_storage_account_id;
}
void OAIHyperVReplicaAzureReprotectInput::setLogStorageAccountId(const QString &log_storage_account_id) {
    m_log_storage_account_id = log_storage_account_id;
    m_log_storage_account_id_isSet = true;
}

bool OAIHyperVReplicaAzureReprotectInput::is_log_storage_account_id_Set() const{
    return m_log_storage_account_id_isSet;
}

bool OAIHyperVReplicaAzureReprotectInput::is_log_storage_account_id_Valid() const{
    return m_log_storage_account_id_isValid;
}

QString OAIHyperVReplicaAzureReprotectInput::getOsType() const {
    return m_os_type;
}
void OAIHyperVReplicaAzureReprotectInput::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIHyperVReplicaAzureReprotectInput::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIHyperVReplicaAzureReprotectInput::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIHyperVReplicaAzureReprotectInput::getStorageAccountId() const {
    return m_storage_account_id;
}
void OAIHyperVReplicaAzureReprotectInput::setStorageAccountId(const QString &storage_account_id) {
    m_storage_account_id = storage_account_id;
    m_storage_account_id_isSet = true;
}

bool OAIHyperVReplicaAzureReprotectInput::is_storage_account_id_Set() const{
    return m_storage_account_id_isSet;
}

bool OAIHyperVReplicaAzureReprotectInput::is_storage_account_id_Valid() const{
    return m_storage_account_id_isValid;
}

QString OAIHyperVReplicaAzureReprotectInput::getVHdid() const {
    return m_v_hdid;
}
void OAIHyperVReplicaAzureReprotectInput::setVHdid(const QString &v_hdid) {
    m_v_hdid = v_hdid;
    m_v_hdid_isSet = true;
}

bool OAIHyperVReplicaAzureReprotectInput::is_v_hdid_Set() const{
    return m_v_hdid_isSet;
}

bool OAIHyperVReplicaAzureReprotectInput::is_v_hdid_Valid() const{
    return m_v_hdid_isValid;
}

QString OAIHyperVReplicaAzureReprotectInput::getVmName() const {
    return m_vm_name;
}
void OAIHyperVReplicaAzureReprotectInput::setVmName(const QString &vm_name) {
    m_vm_name = vm_name;
    m_vm_name_isSet = true;
}

bool OAIHyperVReplicaAzureReprotectInput::is_vm_name_Set() const{
    return m_vm_name_isSet;
}

bool OAIHyperVReplicaAzureReprotectInput::is_vm_name_Valid() const{
    return m_vm_name_isValid;
}

QString OAIHyperVReplicaAzureReprotectInput::getInstanceType() const {
    return m_instance_type;
}
void OAIHyperVReplicaAzureReprotectInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIHyperVReplicaAzureReprotectInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIHyperVReplicaAzureReprotectInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIHyperVReplicaAzureReprotectInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hv_host_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_hdid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHyperVReplicaAzureReprotectInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
