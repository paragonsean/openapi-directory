/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecoveryPlanHyperVReplicaAzureFailoverInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecoveryPlanHyperVReplicaAzureFailoverInput::OAIRecoveryPlanHyperVReplicaAzureFailoverInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecoveryPlanHyperVReplicaAzureFailoverInput::OAIRecoveryPlanHyperVReplicaAzureFailoverInput() {
    this->initializeModel();
}

OAIRecoveryPlanHyperVReplicaAzureFailoverInput::~OAIRecoveryPlanHyperVReplicaAzureFailoverInput() {}

void OAIRecoveryPlanHyperVReplicaAzureFailoverInput::initializeModel() {

    m_primary_kek_certificate_pfx_isSet = false;
    m_primary_kek_certificate_pfx_isValid = false;

    m_recovery_point_type_isSet = false;
    m_recovery_point_type_isValid = false;

    m_secondary_kek_certificate_pfx_isSet = false;
    m_secondary_kek_certificate_pfx_isValid = false;

    m_vault_location_isSet = false;
    m_vault_location_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIRecoveryPlanHyperVReplicaAzureFailoverInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecoveryPlanHyperVReplicaAzureFailoverInput::fromJsonObject(QJsonObject json) {

    m_primary_kek_certificate_pfx_isValid = ::OpenAPI::fromJsonValue(m_primary_kek_certificate_pfx, json[QString("primaryKekCertificatePfx")]);
    m_primary_kek_certificate_pfx_isSet = !json[QString("primaryKekCertificatePfx")].isNull() && m_primary_kek_certificate_pfx_isValid;

    m_recovery_point_type_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_type, json[QString("recoveryPointType")]);
    m_recovery_point_type_isSet = !json[QString("recoveryPointType")].isNull() && m_recovery_point_type_isValid;

    m_secondary_kek_certificate_pfx_isValid = ::OpenAPI::fromJsonValue(m_secondary_kek_certificate_pfx, json[QString("secondaryKekCertificatePfx")]);
    m_secondary_kek_certificate_pfx_isSet = !json[QString("secondaryKekCertificatePfx")].isNull() && m_secondary_kek_certificate_pfx_isValid;

    m_vault_location_isValid = ::OpenAPI::fromJsonValue(m_vault_location, json[QString("vaultLocation")]);
    m_vault_location_isSet = !json[QString("vaultLocation")].isNull() && m_vault_location_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIRecoveryPlanHyperVReplicaAzureFailoverInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecoveryPlanHyperVReplicaAzureFailoverInput::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_kek_certificate_pfx_isSet) {
        obj.insert(QString("primaryKekCertificatePfx"), ::OpenAPI::toJsonValue(m_primary_kek_certificate_pfx));
    }
    if (m_recovery_point_type_isSet) {
        obj.insert(QString("recoveryPointType"), ::OpenAPI::toJsonValue(m_recovery_point_type));
    }
    if (m_secondary_kek_certificate_pfx_isSet) {
        obj.insert(QString("secondaryKekCertificatePfx"), ::OpenAPI::toJsonValue(m_secondary_kek_certificate_pfx));
    }
    if (m_vault_location_isSet) {
        obj.insert(QString("vaultLocation"), ::OpenAPI::toJsonValue(m_vault_location));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIRecoveryPlanHyperVReplicaAzureFailoverInput::getPrimaryKekCertificatePfx() const {
    return m_primary_kek_certificate_pfx;
}
void OAIRecoveryPlanHyperVReplicaAzureFailoverInput::setPrimaryKekCertificatePfx(const QString &primary_kek_certificate_pfx) {
    m_primary_kek_certificate_pfx = primary_kek_certificate_pfx;
    m_primary_kek_certificate_pfx_isSet = true;
}

bool OAIRecoveryPlanHyperVReplicaAzureFailoverInput::is_primary_kek_certificate_pfx_Set() const{
    return m_primary_kek_certificate_pfx_isSet;
}

bool OAIRecoveryPlanHyperVReplicaAzureFailoverInput::is_primary_kek_certificate_pfx_Valid() const{
    return m_primary_kek_certificate_pfx_isValid;
}

QString OAIRecoveryPlanHyperVReplicaAzureFailoverInput::getRecoveryPointType() const {
    return m_recovery_point_type;
}
void OAIRecoveryPlanHyperVReplicaAzureFailoverInput::setRecoveryPointType(const QString &recovery_point_type) {
    m_recovery_point_type = recovery_point_type;
    m_recovery_point_type_isSet = true;
}

bool OAIRecoveryPlanHyperVReplicaAzureFailoverInput::is_recovery_point_type_Set() const{
    return m_recovery_point_type_isSet;
}

bool OAIRecoveryPlanHyperVReplicaAzureFailoverInput::is_recovery_point_type_Valid() const{
    return m_recovery_point_type_isValid;
}

QString OAIRecoveryPlanHyperVReplicaAzureFailoverInput::getSecondaryKekCertificatePfx() const {
    return m_secondary_kek_certificate_pfx;
}
void OAIRecoveryPlanHyperVReplicaAzureFailoverInput::setSecondaryKekCertificatePfx(const QString &secondary_kek_certificate_pfx) {
    m_secondary_kek_certificate_pfx = secondary_kek_certificate_pfx;
    m_secondary_kek_certificate_pfx_isSet = true;
}

bool OAIRecoveryPlanHyperVReplicaAzureFailoverInput::is_secondary_kek_certificate_pfx_Set() const{
    return m_secondary_kek_certificate_pfx_isSet;
}

bool OAIRecoveryPlanHyperVReplicaAzureFailoverInput::is_secondary_kek_certificate_pfx_Valid() const{
    return m_secondary_kek_certificate_pfx_isValid;
}

QString OAIRecoveryPlanHyperVReplicaAzureFailoverInput::getVaultLocation() const {
    return m_vault_location;
}
void OAIRecoveryPlanHyperVReplicaAzureFailoverInput::setVaultLocation(const QString &vault_location) {
    m_vault_location = vault_location;
    m_vault_location_isSet = true;
}

bool OAIRecoveryPlanHyperVReplicaAzureFailoverInput::is_vault_location_Set() const{
    return m_vault_location_isSet;
}

bool OAIRecoveryPlanHyperVReplicaAzureFailoverInput::is_vault_location_Valid() const{
    return m_vault_location_isValid;
}

QString OAIRecoveryPlanHyperVReplicaAzureFailoverInput::getInstanceType() const {
    return m_instance_type;
}
void OAIRecoveryPlanHyperVReplicaAzureFailoverInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIRecoveryPlanHyperVReplicaAzureFailoverInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIRecoveryPlanHyperVReplicaAzureFailoverInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIRecoveryPlanHyperVReplicaAzureFailoverInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_kek_certificate_pfx_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_kek_certificate_pfx_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecoveryPlanHyperVReplicaAzureFailoverInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
