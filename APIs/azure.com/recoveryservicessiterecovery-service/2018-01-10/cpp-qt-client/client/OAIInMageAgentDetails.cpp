/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInMageAgentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInMageAgentDetails::OAIInMageAgentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInMageAgentDetails::OAIInMageAgentDetails() {
    this->initializeModel();
}

OAIInMageAgentDetails::~OAIInMageAgentDetails() {}

void OAIInMageAgentDetails::initializeModel() {

    m_agent_expiry_date_isSet = false;
    m_agent_expiry_date_isValid = false;

    m_agent_update_status_isSet = false;
    m_agent_update_status_isValid = false;

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_post_update_reboot_status_isSet = false;
    m_post_update_reboot_status_isValid = false;
}

void OAIInMageAgentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInMageAgentDetails::fromJsonObject(QJsonObject json) {

    m_agent_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_agent_expiry_date, json[QString("agentExpiryDate")]);
    m_agent_expiry_date_isSet = !json[QString("agentExpiryDate")].isNull() && m_agent_expiry_date_isValid;

    m_agent_update_status_isValid = ::OpenAPI::fromJsonValue(m_agent_update_status, json[QString("agentUpdateStatus")]);
    m_agent_update_status_isSet = !json[QString("agentUpdateStatus")].isNull() && m_agent_update_status_isValid;

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_post_update_reboot_status_isValid = ::OpenAPI::fromJsonValue(m_post_update_reboot_status, json[QString("postUpdateRebootStatus")]);
    m_post_update_reboot_status_isSet = !json[QString("postUpdateRebootStatus")].isNull() && m_post_update_reboot_status_isValid;
}

QString OAIInMageAgentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInMageAgentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_expiry_date_isSet) {
        obj.insert(QString("agentExpiryDate"), ::OpenAPI::toJsonValue(m_agent_expiry_date));
    }
    if (m_agent_update_status_isSet) {
        obj.insert(QString("agentUpdateStatus"), ::OpenAPI::toJsonValue(m_agent_update_status));
    }
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_post_update_reboot_status_isSet) {
        obj.insert(QString("postUpdateRebootStatus"), ::OpenAPI::toJsonValue(m_post_update_reboot_status));
    }
    return obj;
}

QDateTime OAIInMageAgentDetails::getAgentExpiryDate() const {
    return m_agent_expiry_date;
}
void OAIInMageAgentDetails::setAgentExpiryDate(const QDateTime &agent_expiry_date) {
    m_agent_expiry_date = agent_expiry_date;
    m_agent_expiry_date_isSet = true;
}

bool OAIInMageAgentDetails::is_agent_expiry_date_Set() const{
    return m_agent_expiry_date_isSet;
}

bool OAIInMageAgentDetails::is_agent_expiry_date_Valid() const{
    return m_agent_expiry_date_isValid;
}

QString OAIInMageAgentDetails::getAgentUpdateStatus() const {
    return m_agent_update_status;
}
void OAIInMageAgentDetails::setAgentUpdateStatus(const QString &agent_update_status) {
    m_agent_update_status = agent_update_status;
    m_agent_update_status_isSet = true;
}

bool OAIInMageAgentDetails::is_agent_update_status_Set() const{
    return m_agent_update_status_isSet;
}

bool OAIInMageAgentDetails::is_agent_update_status_Valid() const{
    return m_agent_update_status_isValid;
}

QString OAIInMageAgentDetails::getAgentVersion() const {
    return m_agent_version;
}
void OAIInMageAgentDetails::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIInMageAgentDetails::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIInMageAgentDetails::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

QString OAIInMageAgentDetails::getPostUpdateRebootStatus() const {
    return m_post_update_reboot_status;
}
void OAIInMageAgentDetails::setPostUpdateRebootStatus(const QString &post_update_reboot_status) {
    m_post_update_reboot_status = post_update_reboot_status;
    m_post_update_reboot_status_isSet = true;
}

bool OAIInMageAgentDetails::is_post_update_reboot_status_Set() const{
    return m_post_update_reboot_status_isSet;
}

bool OAIInMageAgentDetails::is_post_update_reboot_status_Valid() const{
    return m_post_update_reboot_status_isValid;
}

bool OAIInMageAgentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_update_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_update_reboot_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInMageAgentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
