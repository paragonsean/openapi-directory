/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVMwareCbtProtectionContainerMappingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVMwareCbtProtectionContainerMappingDetails::OAIVMwareCbtProtectionContainerMappingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVMwareCbtProtectionContainerMappingDetails::OAIVMwareCbtProtectionContainerMappingDetails() {
    this->initializeModel();
}

OAIVMwareCbtProtectionContainerMappingDetails::~OAIVMwareCbtProtectionContainerMappingDetails() {}

void OAIVMwareCbtProtectionContainerMappingDetails::initializeModel() {

    m_key_vault_id_isSet = false;
    m_key_vault_id_isValid = false;

    m_key_vault_uri_isSet = false;
    m_key_vault_uri_isValid = false;

    m_service_bus_connection_string_secret_name_isSet = false;
    m_service_bus_connection_string_secret_name_isValid = false;

    m_storage_account_id_isSet = false;
    m_storage_account_id_isValid = false;

    m_storage_account_sas_secret_name_isSet = false;
    m_storage_account_sas_secret_name_isValid = false;

    m_target_location_isSet = false;
    m_target_location_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIVMwareCbtProtectionContainerMappingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVMwareCbtProtectionContainerMappingDetails::fromJsonObject(QJsonObject json) {

    m_key_vault_id_isValid = ::OpenAPI::fromJsonValue(m_key_vault_id, json[QString("keyVaultId")]);
    m_key_vault_id_isSet = !json[QString("keyVaultId")].isNull() && m_key_vault_id_isValid;

    m_key_vault_uri_isValid = ::OpenAPI::fromJsonValue(m_key_vault_uri, json[QString("keyVaultUri")]);
    m_key_vault_uri_isSet = !json[QString("keyVaultUri")].isNull() && m_key_vault_uri_isValid;

    m_service_bus_connection_string_secret_name_isValid = ::OpenAPI::fromJsonValue(m_service_bus_connection_string_secret_name, json[QString("serviceBusConnectionStringSecretName")]);
    m_service_bus_connection_string_secret_name_isSet = !json[QString("serviceBusConnectionStringSecretName")].isNull() && m_service_bus_connection_string_secret_name_isValid;

    m_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_id, json[QString("storageAccountId")]);
    m_storage_account_id_isSet = !json[QString("storageAccountId")].isNull() && m_storage_account_id_isValid;

    m_storage_account_sas_secret_name_isValid = ::OpenAPI::fromJsonValue(m_storage_account_sas_secret_name, json[QString("storageAccountSasSecretName")]);
    m_storage_account_sas_secret_name_isSet = !json[QString("storageAccountSasSecretName")].isNull() && m_storage_account_sas_secret_name_isValid;

    m_target_location_isValid = ::OpenAPI::fromJsonValue(m_target_location, json[QString("targetLocation")]);
    m_target_location_isSet = !json[QString("targetLocation")].isNull() && m_target_location_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIVMwareCbtProtectionContainerMappingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVMwareCbtProtectionContainerMappingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_key_vault_id_isSet) {
        obj.insert(QString("keyVaultId"), ::OpenAPI::toJsonValue(m_key_vault_id));
    }
    if (m_key_vault_uri_isSet) {
        obj.insert(QString("keyVaultUri"), ::OpenAPI::toJsonValue(m_key_vault_uri));
    }
    if (m_service_bus_connection_string_secret_name_isSet) {
        obj.insert(QString("serviceBusConnectionStringSecretName"), ::OpenAPI::toJsonValue(m_service_bus_connection_string_secret_name));
    }
    if (m_storage_account_id_isSet) {
        obj.insert(QString("storageAccountId"), ::OpenAPI::toJsonValue(m_storage_account_id));
    }
    if (m_storage_account_sas_secret_name_isSet) {
        obj.insert(QString("storageAccountSasSecretName"), ::OpenAPI::toJsonValue(m_storage_account_sas_secret_name));
    }
    if (m_target_location_isSet) {
        obj.insert(QString("targetLocation"), ::OpenAPI::toJsonValue(m_target_location));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIVMwareCbtProtectionContainerMappingDetails::getKeyVaultId() const {
    return m_key_vault_id;
}
void OAIVMwareCbtProtectionContainerMappingDetails::setKeyVaultId(const QString &key_vault_id) {
    m_key_vault_id = key_vault_id;
    m_key_vault_id_isSet = true;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_key_vault_id_Set() const{
    return m_key_vault_id_isSet;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_key_vault_id_Valid() const{
    return m_key_vault_id_isValid;
}

QString OAIVMwareCbtProtectionContainerMappingDetails::getKeyVaultUri() const {
    return m_key_vault_uri;
}
void OAIVMwareCbtProtectionContainerMappingDetails::setKeyVaultUri(const QString &key_vault_uri) {
    m_key_vault_uri = key_vault_uri;
    m_key_vault_uri_isSet = true;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_key_vault_uri_Set() const{
    return m_key_vault_uri_isSet;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_key_vault_uri_Valid() const{
    return m_key_vault_uri_isValid;
}

QString OAIVMwareCbtProtectionContainerMappingDetails::getServiceBusConnectionStringSecretName() const {
    return m_service_bus_connection_string_secret_name;
}
void OAIVMwareCbtProtectionContainerMappingDetails::setServiceBusConnectionStringSecretName(const QString &service_bus_connection_string_secret_name) {
    m_service_bus_connection_string_secret_name = service_bus_connection_string_secret_name;
    m_service_bus_connection_string_secret_name_isSet = true;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_service_bus_connection_string_secret_name_Set() const{
    return m_service_bus_connection_string_secret_name_isSet;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_service_bus_connection_string_secret_name_Valid() const{
    return m_service_bus_connection_string_secret_name_isValid;
}

QString OAIVMwareCbtProtectionContainerMappingDetails::getStorageAccountId() const {
    return m_storage_account_id;
}
void OAIVMwareCbtProtectionContainerMappingDetails::setStorageAccountId(const QString &storage_account_id) {
    m_storage_account_id = storage_account_id;
    m_storage_account_id_isSet = true;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_storage_account_id_Set() const{
    return m_storage_account_id_isSet;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_storage_account_id_Valid() const{
    return m_storage_account_id_isValid;
}

QString OAIVMwareCbtProtectionContainerMappingDetails::getStorageAccountSasSecretName() const {
    return m_storage_account_sas_secret_name;
}
void OAIVMwareCbtProtectionContainerMappingDetails::setStorageAccountSasSecretName(const QString &storage_account_sas_secret_name) {
    m_storage_account_sas_secret_name = storage_account_sas_secret_name;
    m_storage_account_sas_secret_name_isSet = true;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_storage_account_sas_secret_name_Set() const{
    return m_storage_account_sas_secret_name_isSet;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_storage_account_sas_secret_name_Valid() const{
    return m_storage_account_sas_secret_name_isValid;
}

QString OAIVMwareCbtProtectionContainerMappingDetails::getTargetLocation() const {
    return m_target_location;
}
void OAIVMwareCbtProtectionContainerMappingDetails::setTargetLocation(const QString &target_location) {
    m_target_location = target_location;
    m_target_location_isSet = true;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_target_location_Set() const{
    return m_target_location_isSet;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_target_location_Valid() const{
    return m_target_location_isValid;
}

QString OAIVMwareCbtProtectionContainerMappingDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIVMwareCbtProtectionContainerMappingDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_vault_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_vault_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_bus_connection_string_secret_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_sas_secret_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVMwareCbtProtectionContainerMappingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
