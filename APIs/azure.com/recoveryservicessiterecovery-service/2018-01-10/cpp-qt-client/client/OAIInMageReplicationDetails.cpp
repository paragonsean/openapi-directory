/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInMageReplicationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInMageReplicationDetails::OAIInMageReplicationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInMageReplicationDetails::OAIInMageReplicationDetails() {
    this->initializeModel();
}

OAIInMageReplicationDetails::~OAIInMageReplicationDetails() {}

void OAIInMageReplicationDetails::initializeModel() {

    m_active_site_type_isSet = false;
    m_active_site_type_isValid = false;

    m_agent_details_isSet = false;
    m_agent_details_isValid = false;

    m_azure_storage_account_id_isSet = false;
    m_azure_storage_account_id_isValid = false;

    m_compressed_data_rate_in_mb_isSet = false;
    m_compressed_data_rate_in_mb_isValid = false;

    m_consistency_points_isSet = false;
    m_consistency_points_isValid = false;

    m_datastores_isSet = false;
    m_datastores_isValid = false;

    m_discovery_type_isSet = false;
    m_discovery_type_isValid = false;

    m_disk_resized_isSet = false;
    m_disk_resized_isValid = false;

    m_infrastructure_vm_id_isSet = false;
    m_infrastructure_vm_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_last_heartbeat_isSet = false;
    m_last_heartbeat_isValid = false;

    m_last_rpo_calculated_time_isSet = false;
    m_last_rpo_calculated_time_isValid = false;

    m_last_update_received_time_isSet = false;
    m_last_update_received_time_isValid = false;

    m_master_target_id_isSet = false;
    m_master_target_id_isValid = false;

    m_multi_vm_group_id_isSet = false;
    m_multi_vm_group_id_isValid = false;

    m_multi_vm_group_name_isSet = false;
    m_multi_vm_group_name_isValid = false;

    m_multi_vm_sync_status_isSet = false;
    m_multi_vm_sync_status_isValid = false;

    m_os_details_isSet = false;
    m_os_details_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_process_server_id_isSet = false;
    m_process_server_id_isValid = false;

    m_protected_disks_isSet = false;
    m_protected_disks_isValid = false;

    m_protection_stage_isSet = false;
    m_protection_stage_isValid = false;

    m_reboot_after_update_status_isSet = false;
    m_reboot_after_update_status_isValid = false;

    m_replica_id_isSet = false;
    m_replica_id_isValid = false;

    m_resync_details_isSet = false;
    m_resync_details_isValid = false;

    m_retention_window_end_isSet = false;
    m_retention_window_end_isValid = false;

    m_retention_window_start_isSet = false;
    m_retention_window_start_isValid = false;

    m_rpo_in_seconds_isSet = false;
    m_rpo_in_seconds_isValid = false;

    m_source_vm_cpu_count_isSet = false;
    m_source_vm_cpu_count_isValid = false;

    m_source_vm_ram_size_in_mb_isSet = false;
    m_source_vm_ram_size_in_mb_isValid = false;

    m_uncompressed_data_rate_in_mb_isSet = false;
    m_uncompressed_data_rate_in_mb_isValid = false;

    m_v_center_infrastructure_id_isSet = false;
    m_v_center_infrastructure_id_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;

    m_vm_id_isSet = false;
    m_vm_id_isValid = false;

    m_vm_nics_isSet = false;
    m_vm_nics_isValid = false;

    m_vm_protection_state_isSet = false;
    m_vm_protection_state_isValid = false;

    m_vm_protection_state_description_isSet = false;
    m_vm_protection_state_description_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIInMageReplicationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInMageReplicationDetails::fromJsonObject(QJsonObject json) {

    m_active_site_type_isValid = ::OpenAPI::fromJsonValue(m_active_site_type, json[QString("activeSiteType")]);
    m_active_site_type_isSet = !json[QString("activeSiteType")].isNull() && m_active_site_type_isValid;

    m_agent_details_isValid = ::OpenAPI::fromJsonValue(m_agent_details, json[QString("agentDetails")]);
    m_agent_details_isSet = !json[QString("agentDetails")].isNull() && m_agent_details_isValid;

    m_azure_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_azure_storage_account_id, json[QString("azureStorageAccountId")]);
    m_azure_storage_account_id_isSet = !json[QString("azureStorageAccountId")].isNull() && m_azure_storage_account_id_isValid;

    m_compressed_data_rate_in_mb_isValid = ::OpenAPI::fromJsonValue(m_compressed_data_rate_in_mb, json[QString("compressedDataRateInMB")]);
    m_compressed_data_rate_in_mb_isSet = !json[QString("compressedDataRateInMB")].isNull() && m_compressed_data_rate_in_mb_isValid;

    m_consistency_points_isValid = ::OpenAPI::fromJsonValue(m_consistency_points, json[QString("consistencyPoints")]);
    m_consistency_points_isSet = !json[QString("consistencyPoints")].isNull() && m_consistency_points_isValid;

    m_datastores_isValid = ::OpenAPI::fromJsonValue(m_datastores, json[QString("datastores")]);
    m_datastores_isSet = !json[QString("datastores")].isNull() && m_datastores_isValid;

    m_discovery_type_isValid = ::OpenAPI::fromJsonValue(m_discovery_type, json[QString("discoveryType")]);
    m_discovery_type_isSet = !json[QString("discoveryType")].isNull() && m_discovery_type_isValid;

    m_disk_resized_isValid = ::OpenAPI::fromJsonValue(m_disk_resized, json[QString("diskResized")]);
    m_disk_resized_isSet = !json[QString("diskResized")].isNull() && m_disk_resized_isValid;

    m_infrastructure_vm_id_isValid = ::OpenAPI::fromJsonValue(m_infrastructure_vm_id, json[QString("infrastructureVmId")]);
    m_infrastructure_vm_id_isSet = !json[QString("infrastructureVmId")].isNull() && m_infrastructure_vm_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_last_heartbeat_isValid = ::OpenAPI::fromJsonValue(m_last_heartbeat, json[QString("lastHeartbeat")]);
    m_last_heartbeat_isSet = !json[QString("lastHeartbeat")].isNull() && m_last_heartbeat_isValid;

    m_last_rpo_calculated_time_isValid = ::OpenAPI::fromJsonValue(m_last_rpo_calculated_time, json[QString("lastRpoCalculatedTime")]);
    m_last_rpo_calculated_time_isSet = !json[QString("lastRpoCalculatedTime")].isNull() && m_last_rpo_calculated_time_isValid;

    m_last_update_received_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_received_time, json[QString("lastUpdateReceivedTime")]);
    m_last_update_received_time_isSet = !json[QString("lastUpdateReceivedTime")].isNull() && m_last_update_received_time_isValid;

    m_master_target_id_isValid = ::OpenAPI::fromJsonValue(m_master_target_id, json[QString("masterTargetId")]);
    m_master_target_id_isSet = !json[QString("masterTargetId")].isNull() && m_master_target_id_isValid;

    m_multi_vm_group_id_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_group_id, json[QString("multiVmGroupId")]);
    m_multi_vm_group_id_isSet = !json[QString("multiVmGroupId")].isNull() && m_multi_vm_group_id_isValid;

    m_multi_vm_group_name_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_group_name, json[QString("multiVmGroupName")]);
    m_multi_vm_group_name_isSet = !json[QString("multiVmGroupName")].isNull() && m_multi_vm_group_name_isValid;

    m_multi_vm_sync_status_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_sync_status, json[QString("multiVmSyncStatus")]);
    m_multi_vm_sync_status_isSet = !json[QString("multiVmSyncStatus")].isNull() && m_multi_vm_sync_status_isValid;

    m_os_details_isValid = ::OpenAPI::fromJsonValue(m_os_details, json[QString("osDetails")]);
    m_os_details_isSet = !json[QString("osDetails")].isNull() && m_os_details_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_process_server_id_isValid = ::OpenAPI::fromJsonValue(m_process_server_id, json[QString("processServerId")]);
    m_process_server_id_isSet = !json[QString("processServerId")].isNull() && m_process_server_id_isValid;

    m_protected_disks_isValid = ::OpenAPI::fromJsonValue(m_protected_disks, json[QString("protectedDisks")]);
    m_protected_disks_isSet = !json[QString("protectedDisks")].isNull() && m_protected_disks_isValid;

    m_protection_stage_isValid = ::OpenAPI::fromJsonValue(m_protection_stage, json[QString("protectionStage")]);
    m_protection_stage_isSet = !json[QString("protectionStage")].isNull() && m_protection_stage_isValid;

    m_reboot_after_update_status_isValid = ::OpenAPI::fromJsonValue(m_reboot_after_update_status, json[QString("rebootAfterUpdateStatus")]);
    m_reboot_after_update_status_isSet = !json[QString("rebootAfterUpdateStatus")].isNull() && m_reboot_after_update_status_isValid;

    m_replica_id_isValid = ::OpenAPI::fromJsonValue(m_replica_id, json[QString("replicaId")]);
    m_replica_id_isSet = !json[QString("replicaId")].isNull() && m_replica_id_isValid;

    m_resync_details_isValid = ::OpenAPI::fromJsonValue(m_resync_details, json[QString("resyncDetails")]);
    m_resync_details_isSet = !json[QString("resyncDetails")].isNull() && m_resync_details_isValid;

    m_retention_window_end_isValid = ::OpenAPI::fromJsonValue(m_retention_window_end, json[QString("retentionWindowEnd")]);
    m_retention_window_end_isSet = !json[QString("retentionWindowEnd")].isNull() && m_retention_window_end_isValid;

    m_retention_window_start_isValid = ::OpenAPI::fromJsonValue(m_retention_window_start, json[QString("retentionWindowStart")]);
    m_retention_window_start_isSet = !json[QString("retentionWindowStart")].isNull() && m_retention_window_start_isValid;

    m_rpo_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_rpo_in_seconds, json[QString("rpoInSeconds")]);
    m_rpo_in_seconds_isSet = !json[QString("rpoInSeconds")].isNull() && m_rpo_in_seconds_isValid;

    m_source_vm_cpu_count_isValid = ::OpenAPI::fromJsonValue(m_source_vm_cpu_count, json[QString("sourceVmCpuCount")]);
    m_source_vm_cpu_count_isSet = !json[QString("sourceVmCpuCount")].isNull() && m_source_vm_cpu_count_isValid;

    m_source_vm_ram_size_in_mb_isValid = ::OpenAPI::fromJsonValue(m_source_vm_ram_size_in_mb, json[QString("sourceVmRamSizeInMB")]);
    m_source_vm_ram_size_in_mb_isSet = !json[QString("sourceVmRamSizeInMB")].isNull() && m_source_vm_ram_size_in_mb_isValid;

    m_uncompressed_data_rate_in_mb_isValid = ::OpenAPI::fromJsonValue(m_uncompressed_data_rate_in_mb, json[QString("uncompressedDataRateInMB")]);
    m_uncompressed_data_rate_in_mb_isSet = !json[QString("uncompressedDataRateInMB")].isNull() && m_uncompressed_data_rate_in_mb_isValid;

    m_v_center_infrastructure_id_isValid = ::OpenAPI::fromJsonValue(m_v_center_infrastructure_id, json[QString("vCenterInfrastructureId")]);
    m_v_center_infrastructure_id_isSet = !json[QString("vCenterInfrastructureId")].isNull() && m_v_center_infrastructure_id_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("validationErrors")]);
    m_validation_errors_isSet = !json[QString("validationErrors")].isNull() && m_validation_errors_isValid;

    m_vm_id_isValid = ::OpenAPI::fromJsonValue(m_vm_id, json[QString("vmId")]);
    m_vm_id_isSet = !json[QString("vmId")].isNull() && m_vm_id_isValid;

    m_vm_nics_isValid = ::OpenAPI::fromJsonValue(m_vm_nics, json[QString("vmNics")]);
    m_vm_nics_isSet = !json[QString("vmNics")].isNull() && m_vm_nics_isValid;

    m_vm_protection_state_isValid = ::OpenAPI::fromJsonValue(m_vm_protection_state, json[QString("vmProtectionState")]);
    m_vm_protection_state_isSet = !json[QString("vmProtectionState")].isNull() && m_vm_protection_state_isValid;

    m_vm_protection_state_description_isValid = ::OpenAPI::fromJsonValue(m_vm_protection_state_description, json[QString("vmProtectionStateDescription")]);
    m_vm_protection_state_description_isSet = !json[QString("vmProtectionStateDescription")].isNull() && m_vm_protection_state_description_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIInMageReplicationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInMageReplicationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_active_site_type_isSet) {
        obj.insert(QString("activeSiteType"), ::OpenAPI::toJsonValue(m_active_site_type));
    }
    if (m_agent_details.isSet()) {
        obj.insert(QString("agentDetails"), ::OpenAPI::toJsonValue(m_agent_details));
    }
    if (m_azure_storage_account_id_isSet) {
        obj.insert(QString("azureStorageAccountId"), ::OpenAPI::toJsonValue(m_azure_storage_account_id));
    }
    if (m_compressed_data_rate_in_mb_isSet) {
        obj.insert(QString("compressedDataRateInMB"), ::OpenAPI::toJsonValue(m_compressed_data_rate_in_mb));
    }
    if (m_consistency_points.size() > 0) {
        obj.insert(QString("consistencyPoints"), ::OpenAPI::toJsonValue(m_consistency_points));
    }
    if (m_datastores.size() > 0) {
        obj.insert(QString("datastores"), ::OpenAPI::toJsonValue(m_datastores));
    }
    if (m_discovery_type_isSet) {
        obj.insert(QString("discoveryType"), ::OpenAPI::toJsonValue(m_discovery_type));
    }
    if (m_disk_resized_isSet) {
        obj.insert(QString("diskResized"), ::OpenAPI::toJsonValue(m_disk_resized));
    }
    if (m_infrastructure_vm_id_isSet) {
        obj.insert(QString("infrastructureVmId"), ::OpenAPI::toJsonValue(m_infrastructure_vm_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_last_heartbeat_isSet) {
        obj.insert(QString("lastHeartbeat"), ::OpenAPI::toJsonValue(m_last_heartbeat));
    }
    if (m_last_rpo_calculated_time_isSet) {
        obj.insert(QString("lastRpoCalculatedTime"), ::OpenAPI::toJsonValue(m_last_rpo_calculated_time));
    }
    if (m_last_update_received_time_isSet) {
        obj.insert(QString("lastUpdateReceivedTime"), ::OpenAPI::toJsonValue(m_last_update_received_time));
    }
    if (m_master_target_id_isSet) {
        obj.insert(QString("masterTargetId"), ::OpenAPI::toJsonValue(m_master_target_id));
    }
    if (m_multi_vm_group_id_isSet) {
        obj.insert(QString("multiVmGroupId"), ::OpenAPI::toJsonValue(m_multi_vm_group_id));
    }
    if (m_multi_vm_group_name_isSet) {
        obj.insert(QString("multiVmGroupName"), ::OpenAPI::toJsonValue(m_multi_vm_group_name));
    }
    if (m_multi_vm_sync_status_isSet) {
        obj.insert(QString("multiVmSyncStatus"), ::OpenAPI::toJsonValue(m_multi_vm_sync_status));
    }
    if (m_os_details.isSet()) {
        obj.insert(QString("osDetails"), ::OpenAPI::toJsonValue(m_os_details));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_process_server_id_isSet) {
        obj.insert(QString("processServerId"), ::OpenAPI::toJsonValue(m_process_server_id));
    }
    if (m_protected_disks.size() > 0) {
        obj.insert(QString("protectedDisks"), ::OpenAPI::toJsonValue(m_protected_disks));
    }
    if (m_protection_stage_isSet) {
        obj.insert(QString("protectionStage"), ::OpenAPI::toJsonValue(m_protection_stage));
    }
    if (m_reboot_after_update_status_isSet) {
        obj.insert(QString("rebootAfterUpdateStatus"), ::OpenAPI::toJsonValue(m_reboot_after_update_status));
    }
    if (m_replica_id_isSet) {
        obj.insert(QString("replicaId"), ::OpenAPI::toJsonValue(m_replica_id));
    }
    if (m_resync_details.isSet()) {
        obj.insert(QString("resyncDetails"), ::OpenAPI::toJsonValue(m_resync_details));
    }
    if (m_retention_window_end_isSet) {
        obj.insert(QString("retentionWindowEnd"), ::OpenAPI::toJsonValue(m_retention_window_end));
    }
    if (m_retention_window_start_isSet) {
        obj.insert(QString("retentionWindowStart"), ::OpenAPI::toJsonValue(m_retention_window_start));
    }
    if (m_rpo_in_seconds_isSet) {
        obj.insert(QString("rpoInSeconds"), ::OpenAPI::toJsonValue(m_rpo_in_seconds));
    }
    if (m_source_vm_cpu_count_isSet) {
        obj.insert(QString("sourceVmCpuCount"), ::OpenAPI::toJsonValue(m_source_vm_cpu_count));
    }
    if (m_source_vm_ram_size_in_mb_isSet) {
        obj.insert(QString("sourceVmRamSizeInMB"), ::OpenAPI::toJsonValue(m_source_vm_ram_size_in_mb));
    }
    if (m_uncompressed_data_rate_in_mb_isSet) {
        obj.insert(QString("uncompressedDataRateInMB"), ::OpenAPI::toJsonValue(m_uncompressed_data_rate_in_mb));
    }
    if (m_v_center_infrastructure_id_isSet) {
        obj.insert(QString("vCenterInfrastructureId"), ::OpenAPI::toJsonValue(m_v_center_infrastructure_id));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("validationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    if (m_vm_id_isSet) {
        obj.insert(QString("vmId"), ::OpenAPI::toJsonValue(m_vm_id));
    }
    if (m_vm_nics.size() > 0) {
        obj.insert(QString("vmNics"), ::OpenAPI::toJsonValue(m_vm_nics));
    }
    if (m_vm_protection_state_isSet) {
        obj.insert(QString("vmProtectionState"), ::OpenAPI::toJsonValue(m_vm_protection_state));
    }
    if (m_vm_protection_state_description_isSet) {
        obj.insert(QString("vmProtectionStateDescription"), ::OpenAPI::toJsonValue(m_vm_protection_state_description));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIInMageReplicationDetails::getActiveSiteType() const {
    return m_active_site_type;
}
void OAIInMageReplicationDetails::setActiveSiteType(const QString &active_site_type) {
    m_active_site_type = active_site_type;
    m_active_site_type_isSet = true;
}

bool OAIInMageReplicationDetails::is_active_site_type_Set() const{
    return m_active_site_type_isSet;
}

bool OAIInMageReplicationDetails::is_active_site_type_Valid() const{
    return m_active_site_type_isValid;
}

OAIInMageAgentDetails OAIInMageReplicationDetails::getAgentDetails() const {
    return m_agent_details;
}
void OAIInMageReplicationDetails::setAgentDetails(const OAIInMageAgentDetails &agent_details) {
    m_agent_details = agent_details;
    m_agent_details_isSet = true;
}

bool OAIInMageReplicationDetails::is_agent_details_Set() const{
    return m_agent_details_isSet;
}

bool OAIInMageReplicationDetails::is_agent_details_Valid() const{
    return m_agent_details_isValid;
}

QString OAIInMageReplicationDetails::getAzureStorageAccountId() const {
    return m_azure_storage_account_id;
}
void OAIInMageReplicationDetails::setAzureStorageAccountId(const QString &azure_storage_account_id) {
    m_azure_storage_account_id = azure_storage_account_id;
    m_azure_storage_account_id_isSet = true;
}

bool OAIInMageReplicationDetails::is_azure_storage_account_id_Set() const{
    return m_azure_storage_account_id_isSet;
}

bool OAIInMageReplicationDetails::is_azure_storage_account_id_Valid() const{
    return m_azure_storage_account_id_isValid;
}

double OAIInMageReplicationDetails::getCompressedDataRateInMb() const {
    return m_compressed_data_rate_in_mb;
}
void OAIInMageReplicationDetails::setCompressedDataRateInMb(const double &compressed_data_rate_in_mb) {
    m_compressed_data_rate_in_mb = compressed_data_rate_in_mb;
    m_compressed_data_rate_in_mb_isSet = true;
}

bool OAIInMageReplicationDetails::is_compressed_data_rate_in_mb_Set() const{
    return m_compressed_data_rate_in_mb_isSet;
}

bool OAIInMageReplicationDetails::is_compressed_data_rate_in_mb_Valid() const{
    return m_compressed_data_rate_in_mb_isValid;
}

QMap<QString, QDateTime> OAIInMageReplicationDetails::getConsistencyPoints() const {
    return m_consistency_points;
}
void OAIInMageReplicationDetails::setConsistencyPoints(const QMap<QString, QDateTime> &consistency_points) {
    m_consistency_points = consistency_points;
    m_consistency_points_isSet = true;
}

bool OAIInMageReplicationDetails::is_consistency_points_Set() const{
    return m_consistency_points_isSet;
}

bool OAIInMageReplicationDetails::is_consistency_points_Valid() const{
    return m_consistency_points_isValid;
}

QList<QString> OAIInMageReplicationDetails::getDatastores() const {
    return m_datastores;
}
void OAIInMageReplicationDetails::setDatastores(const QList<QString> &datastores) {
    m_datastores = datastores;
    m_datastores_isSet = true;
}

bool OAIInMageReplicationDetails::is_datastores_Set() const{
    return m_datastores_isSet;
}

bool OAIInMageReplicationDetails::is_datastores_Valid() const{
    return m_datastores_isValid;
}

QString OAIInMageReplicationDetails::getDiscoveryType() const {
    return m_discovery_type;
}
void OAIInMageReplicationDetails::setDiscoveryType(const QString &discovery_type) {
    m_discovery_type = discovery_type;
    m_discovery_type_isSet = true;
}

bool OAIInMageReplicationDetails::is_discovery_type_Set() const{
    return m_discovery_type_isSet;
}

bool OAIInMageReplicationDetails::is_discovery_type_Valid() const{
    return m_discovery_type_isValid;
}

QString OAIInMageReplicationDetails::getDiskResized() const {
    return m_disk_resized;
}
void OAIInMageReplicationDetails::setDiskResized(const QString &disk_resized) {
    m_disk_resized = disk_resized;
    m_disk_resized_isSet = true;
}

bool OAIInMageReplicationDetails::is_disk_resized_Set() const{
    return m_disk_resized_isSet;
}

bool OAIInMageReplicationDetails::is_disk_resized_Valid() const{
    return m_disk_resized_isValid;
}

QString OAIInMageReplicationDetails::getInfrastructureVmId() const {
    return m_infrastructure_vm_id;
}
void OAIInMageReplicationDetails::setInfrastructureVmId(const QString &infrastructure_vm_id) {
    m_infrastructure_vm_id = infrastructure_vm_id;
    m_infrastructure_vm_id_isSet = true;
}

bool OAIInMageReplicationDetails::is_infrastructure_vm_id_Set() const{
    return m_infrastructure_vm_id_isSet;
}

bool OAIInMageReplicationDetails::is_infrastructure_vm_id_Valid() const{
    return m_infrastructure_vm_id_isValid;
}

QString OAIInMageReplicationDetails::getIpAddress() const {
    return m_ip_address;
}
void OAIInMageReplicationDetails::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIInMageReplicationDetails::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIInMageReplicationDetails::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QDateTime OAIInMageReplicationDetails::getLastHeartbeat() const {
    return m_last_heartbeat;
}
void OAIInMageReplicationDetails::setLastHeartbeat(const QDateTime &last_heartbeat) {
    m_last_heartbeat = last_heartbeat;
    m_last_heartbeat_isSet = true;
}

bool OAIInMageReplicationDetails::is_last_heartbeat_Set() const{
    return m_last_heartbeat_isSet;
}

bool OAIInMageReplicationDetails::is_last_heartbeat_Valid() const{
    return m_last_heartbeat_isValid;
}

QDateTime OAIInMageReplicationDetails::getLastRpoCalculatedTime() const {
    return m_last_rpo_calculated_time;
}
void OAIInMageReplicationDetails::setLastRpoCalculatedTime(const QDateTime &last_rpo_calculated_time) {
    m_last_rpo_calculated_time = last_rpo_calculated_time;
    m_last_rpo_calculated_time_isSet = true;
}

bool OAIInMageReplicationDetails::is_last_rpo_calculated_time_Set() const{
    return m_last_rpo_calculated_time_isSet;
}

bool OAIInMageReplicationDetails::is_last_rpo_calculated_time_Valid() const{
    return m_last_rpo_calculated_time_isValid;
}

QDateTime OAIInMageReplicationDetails::getLastUpdateReceivedTime() const {
    return m_last_update_received_time;
}
void OAIInMageReplicationDetails::setLastUpdateReceivedTime(const QDateTime &last_update_received_time) {
    m_last_update_received_time = last_update_received_time;
    m_last_update_received_time_isSet = true;
}

bool OAIInMageReplicationDetails::is_last_update_received_time_Set() const{
    return m_last_update_received_time_isSet;
}

bool OAIInMageReplicationDetails::is_last_update_received_time_Valid() const{
    return m_last_update_received_time_isValid;
}

QString OAIInMageReplicationDetails::getMasterTargetId() const {
    return m_master_target_id;
}
void OAIInMageReplicationDetails::setMasterTargetId(const QString &master_target_id) {
    m_master_target_id = master_target_id;
    m_master_target_id_isSet = true;
}

bool OAIInMageReplicationDetails::is_master_target_id_Set() const{
    return m_master_target_id_isSet;
}

bool OAIInMageReplicationDetails::is_master_target_id_Valid() const{
    return m_master_target_id_isValid;
}

QString OAIInMageReplicationDetails::getMultiVmGroupId() const {
    return m_multi_vm_group_id;
}
void OAIInMageReplicationDetails::setMultiVmGroupId(const QString &multi_vm_group_id) {
    m_multi_vm_group_id = multi_vm_group_id;
    m_multi_vm_group_id_isSet = true;
}

bool OAIInMageReplicationDetails::is_multi_vm_group_id_Set() const{
    return m_multi_vm_group_id_isSet;
}

bool OAIInMageReplicationDetails::is_multi_vm_group_id_Valid() const{
    return m_multi_vm_group_id_isValid;
}

QString OAIInMageReplicationDetails::getMultiVmGroupName() const {
    return m_multi_vm_group_name;
}
void OAIInMageReplicationDetails::setMultiVmGroupName(const QString &multi_vm_group_name) {
    m_multi_vm_group_name = multi_vm_group_name;
    m_multi_vm_group_name_isSet = true;
}

bool OAIInMageReplicationDetails::is_multi_vm_group_name_Set() const{
    return m_multi_vm_group_name_isSet;
}

bool OAIInMageReplicationDetails::is_multi_vm_group_name_Valid() const{
    return m_multi_vm_group_name_isValid;
}

QString OAIInMageReplicationDetails::getMultiVmSyncStatus() const {
    return m_multi_vm_sync_status;
}
void OAIInMageReplicationDetails::setMultiVmSyncStatus(const QString &multi_vm_sync_status) {
    m_multi_vm_sync_status = multi_vm_sync_status;
    m_multi_vm_sync_status_isSet = true;
}

bool OAIInMageReplicationDetails::is_multi_vm_sync_status_Set() const{
    return m_multi_vm_sync_status_isSet;
}

bool OAIInMageReplicationDetails::is_multi_vm_sync_status_Valid() const{
    return m_multi_vm_sync_status_isValid;
}

OAIOSDiskDetails OAIInMageReplicationDetails::getOsDetails() const {
    return m_os_details;
}
void OAIInMageReplicationDetails::setOsDetails(const OAIOSDiskDetails &os_details) {
    m_os_details = os_details;
    m_os_details_isSet = true;
}

bool OAIInMageReplicationDetails::is_os_details_Set() const{
    return m_os_details_isSet;
}

bool OAIInMageReplicationDetails::is_os_details_Valid() const{
    return m_os_details_isValid;
}

QString OAIInMageReplicationDetails::getOsVersion() const {
    return m_os_version;
}
void OAIInMageReplicationDetails::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIInMageReplicationDetails::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIInMageReplicationDetails::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIInMageReplicationDetails::getProcessServerId() const {
    return m_process_server_id;
}
void OAIInMageReplicationDetails::setProcessServerId(const QString &process_server_id) {
    m_process_server_id = process_server_id;
    m_process_server_id_isSet = true;
}

bool OAIInMageReplicationDetails::is_process_server_id_Set() const{
    return m_process_server_id_isSet;
}

bool OAIInMageReplicationDetails::is_process_server_id_Valid() const{
    return m_process_server_id_isValid;
}

QList<OAIInMageProtectedDiskDetails> OAIInMageReplicationDetails::getProtectedDisks() const {
    return m_protected_disks;
}
void OAIInMageReplicationDetails::setProtectedDisks(const QList<OAIInMageProtectedDiskDetails> &protected_disks) {
    m_protected_disks = protected_disks;
    m_protected_disks_isSet = true;
}

bool OAIInMageReplicationDetails::is_protected_disks_Set() const{
    return m_protected_disks_isSet;
}

bool OAIInMageReplicationDetails::is_protected_disks_Valid() const{
    return m_protected_disks_isValid;
}

QString OAIInMageReplicationDetails::getProtectionStage() const {
    return m_protection_stage;
}
void OAIInMageReplicationDetails::setProtectionStage(const QString &protection_stage) {
    m_protection_stage = protection_stage;
    m_protection_stage_isSet = true;
}

bool OAIInMageReplicationDetails::is_protection_stage_Set() const{
    return m_protection_stage_isSet;
}

bool OAIInMageReplicationDetails::is_protection_stage_Valid() const{
    return m_protection_stage_isValid;
}

QString OAIInMageReplicationDetails::getRebootAfterUpdateStatus() const {
    return m_reboot_after_update_status;
}
void OAIInMageReplicationDetails::setRebootAfterUpdateStatus(const QString &reboot_after_update_status) {
    m_reboot_after_update_status = reboot_after_update_status;
    m_reboot_after_update_status_isSet = true;
}

bool OAIInMageReplicationDetails::is_reboot_after_update_status_Set() const{
    return m_reboot_after_update_status_isSet;
}

bool OAIInMageReplicationDetails::is_reboot_after_update_status_Valid() const{
    return m_reboot_after_update_status_isValid;
}

QString OAIInMageReplicationDetails::getReplicaId() const {
    return m_replica_id;
}
void OAIInMageReplicationDetails::setReplicaId(const QString &replica_id) {
    m_replica_id = replica_id;
    m_replica_id_isSet = true;
}

bool OAIInMageReplicationDetails::is_replica_id_Set() const{
    return m_replica_id_isSet;
}

bool OAIInMageReplicationDetails::is_replica_id_Valid() const{
    return m_replica_id_isValid;
}

OAIInitialReplicationDetails OAIInMageReplicationDetails::getResyncDetails() const {
    return m_resync_details;
}
void OAIInMageReplicationDetails::setResyncDetails(const OAIInitialReplicationDetails &resync_details) {
    m_resync_details = resync_details;
    m_resync_details_isSet = true;
}

bool OAIInMageReplicationDetails::is_resync_details_Set() const{
    return m_resync_details_isSet;
}

bool OAIInMageReplicationDetails::is_resync_details_Valid() const{
    return m_resync_details_isValid;
}

QDateTime OAIInMageReplicationDetails::getRetentionWindowEnd() const {
    return m_retention_window_end;
}
void OAIInMageReplicationDetails::setRetentionWindowEnd(const QDateTime &retention_window_end) {
    m_retention_window_end = retention_window_end;
    m_retention_window_end_isSet = true;
}

bool OAIInMageReplicationDetails::is_retention_window_end_Set() const{
    return m_retention_window_end_isSet;
}

bool OAIInMageReplicationDetails::is_retention_window_end_Valid() const{
    return m_retention_window_end_isValid;
}

QDateTime OAIInMageReplicationDetails::getRetentionWindowStart() const {
    return m_retention_window_start;
}
void OAIInMageReplicationDetails::setRetentionWindowStart(const QDateTime &retention_window_start) {
    m_retention_window_start = retention_window_start;
    m_retention_window_start_isSet = true;
}

bool OAIInMageReplicationDetails::is_retention_window_start_Set() const{
    return m_retention_window_start_isSet;
}

bool OAIInMageReplicationDetails::is_retention_window_start_Valid() const{
    return m_retention_window_start_isValid;
}

qint64 OAIInMageReplicationDetails::getRpoInSeconds() const {
    return m_rpo_in_seconds;
}
void OAIInMageReplicationDetails::setRpoInSeconds(const qint64 &rpo_in_seconds) {
    m_rpo_in_seconds = rpo_in_seconds;
    m_rpo_in_seconds_isSet = true;
}

bool OAIInMageReplicationDetails::is_rpo_in_seconds_Set() const{
    return m_rpo_in_seconds_isSet;
}

bool OAIInMageReplicationDetails::is_rpo_in_seconds_Valid() const{
    return m_rpo_in_seconds_isValid;
}

qint32 OAIInMageReplicationDetails::getSourceVmCpuCount() const {
    return m_source_vm_cpu_count;
}
void OAIInMageReplicationDetails::setSourceVmCpuCount(const qint32 &source_vm_cpu_count) {
    m_source_vm_cpu_count = source_vm_cpu_count;
    m_source_vm_cpu_count_isSet = true;
}

bool OAIInMageReplicationDetails::is_source_vm_cpu_count_Set() const{
    return m_source_vm_cpu_count_isSet;
}

bool OAIInMageReplicationDetails::is_source_vm_cpu_count_Valid() const{
    return m_source_vm_cpu_count_isValid;
}

qint32 OAIInMageReplicationDetails::getSourceVmRamSizeInMb() const {
    return m_source_vm_ram_size_in_mb;
}
void OAIInMageReplicationDetails::setSourceVmRamSizeInMb(const qint32 &source_vm_ram_size_in_mb) {
    m_source_vm_ram_size_in_mb = source_vm_ram_size_in_mb;
    m_source_vm_ram_size_in_mb_isSet = true;
}

bool OAIInMageReplicationDetails::is_source_vm_ram_size_in_mb_Set() const{
    return m_source_vm_ram_size_in_mb_isSet;
}

bool OAIInMageReplicationDetails::is_source_vm_ram_size_in_mb_Valid() const{
    return m_source_vm_ram_size_in_mb_isValid;
}

double OAIInMageReplicationDetails::getUncompressedDataRateInMb() const {
    return m_uncompressed_data_rate_in_mb;
}
void OAIInMageReplicationDetails::setUncompressedDataRateInMb(const double &uncompressed_data_rate_in_mb) {
    m_uncompressed_data_rate_in_mb = uncompressed_data_rate_in_mb;
    m_uncompressed_data_rate_in_mb_isSet = true;
}

bool OAIInMageReplicationDetails::is_uncompressed_data_rate_in_mb_Set() const{
    return m_uncompressed_data_rate_in_mb_isSet;
}

bool OAIInMageReplicationDetails::is_uncompressed_data_rate_in_mb_Valid() const{
    return m_uncompressed_data_rate_in_mb_isValid;
}

QString OAIInMageReplicationDetails::getVCenterInfrastructureId() const {
    return m_v_center_infrastructure_id;
}
void OAIInMageReplicationDetails::setVCenterInfrastructureId(const QString &v_center_infrastructure_id) {
    m_v_center_infrastructure_id = v_center_infrastructure_id;
    m_v_center_infrastructure_id_isSet = true;
}

bool OAIInMageReplicationDetails::is_v_center_infrastructure_id_Set() const{
    return m_v_center_infrastructure_id_isSet;
}

bool OAIInMageReplicationDetails::is_v_center_infrastructure_id_Valid() const{
    return m_v_center_infrastructure_id_isValid;
}

QList<OAIHealthError> OAIInMageReplicationDetails::getValidationErrors() const {
    return m_validation_errors;
}
void OAIInMageReplicationDetails::setValidationErrors(const QList<OAIHealthError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIInMageReplicationDetails::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIInMageReplicationDetails::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

QString OAIInMageReplicationDetails::getVmId() const {
    return m_vm_id;
}
void OAIInMageReplicationDetails::setVmId(const QString &vm_id) {
    m_vm_id = vm_id;
    m_vm_id_isSet = true;
}

bool OAIInMageReplicationDetails::is_vm_id_Set() const{
    return m_vm_id_isSet;
}

bool OAIInMageReplicationDetails::is_vm_id_Valid() const{
    return m_vm_id_isValid;
}

QList<OAIVMNicDetails> OAIInMageReplicationDetails::getVmNics() const {
    return m_vm_nics;
}
void OAIInMageReplicationDetails::setVmNics(const QList<OAIVMNicDetails> &vm_nics) {
    m_vm_nics = vm_nics;
    m_vm_nics_isSet = true;
}

bool OAIInMageReplicationDetails::is_vm_nics_Set() const{
    return m_vm_nics_isSet;
}

bool OAIInMageReplicationDetails::is_vm_nics_Valid() const{
    return m_vm_nics_isValid;
}

QString OAIInMageReplicationDetails::getVmProtectionState() const {
    return m_vm_protection_state;
}
void OAIInMageReplicationDetails::setVmProtectionState(const QString &vm_protection_state) {
    m_vm_protection_state = vm_protection_state;
    m_vm_protection_state_isSet = true;
}

bool OAIInMageReplicationDetails::is_vm_protection_state_Set() const{
    return m_vm_protection_state_isSet;
}

bool OAIInMageReplicationDetails::is_vm_protection_state_Valid() const{
    return m_vm_protection_state_isValid;
}

QString OAIInMageReplicationDetails::getVmProtectionStateDescription() const {
    return m_vm_protection_state_description;
}
void OAIInMageReplicationDetails::setVmProtectionStateDescription(const QString &vm_protection_state_description) {
    m_vm_protection_state_description = vm_protection_state_description;
    m_vm_protection_state_description_isSet = true;
}

bool OAIInMageReplicationDetails::is_vm_protection_state_description_Set() const{
    return m_vm_protection_state_description_isSet;
}

bool OAIInMageReplicationDetails::is_vm_protection_state_description_Valid() const{
    return m_vm_protection_state_description_isValid;
}

QString OAIInMageReplicationDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIInMageReplicationDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInMageReplicationDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInMageReplicationDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIInMageReplicationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_site_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compressed_data_rate_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consistency_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_resized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infrastructure_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_heartbeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_rpo_calculated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_received_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_sync_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reboot_after_update_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resync_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_window_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_window_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpo_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vm_cpu_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vm_ram_size_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uncompressed_data_rate_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_center_infrastructure_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_nics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_protection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_protection_state_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInMageReplicationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
