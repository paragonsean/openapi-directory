/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrationItemProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrationItemProperties::OAIMigrationItemProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrationItemProperties::OAIMigrationItemProperties() {
    this->initializeModel();
}

OAIMigrationItemProperties::~OAIMigrationItemProperties() {}

void OAIMigrationItemProperties::initializeModel() {

    m_allowed_operations_isSet = false;
    m_allowed_operations_isValid = false;

    m_current_job_isSet = false;
    m_current_job_isValid = false;

    m_event_correlation_id_isSet = false;
    m_event_correlation_id_isValid = false;

    m_health_isSet = false;
    m_health_isValid = false;

    m_health_errors_isSet = false;
    m_health_errors_isValid = false;

    m_last_test_migration_status_isSet = false;
    m_last_test_migration_status_isValid = false;

    m_last_test_migration_time_isSet = false;
    m_last_test_migration_time_isValid = false;

    m_machine_name_isSet = false;
    m_machine_name_isValid = false;

    m_migration_state_isSet = false;
    m_migration_state_isValid = false;

    m_migration_state_description_isSet = false;
    m_migration_state_description_isValid = false;

    m_policy_friendly_name_isSet = false;
    m_policy_friendly_name_isValid = false;

    m_policy_id_isSet = false;
    m_policy_id_isValid = false;

    m_provider_specific_details_isSet = false;
    m_provider_specific_details_isValid = false;

    m_test_migrate_state_isSet = false;
    m_test_migrate_state_isValid = false;

    m_test_migrate_state_description_isSet = false;
    m_test_migrate_state_description_isValid = false;
}

void OAIMigrationItemProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrationItemProperties::fromJsonObject(QJsonObject json) {

    m_allowed_operations_isValid = ::OpenAPI::fromJsonValue(m_allowed_operations, json[QString("allowedOperations")]);
    m_allowed_operations_isSet = !json[QString("allowedOperations")].isNull() && m_allowed_operations_isValid;

    m_current_job_isValid = ::OpenAPI::fromJsonValue(m_current_job, json[QString("currentJob")]);
    m_current_job_isSet = !json[QString("currentJob")].isNull() && m_current_job_isValid;

    m_event_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_event_correlation_id, json[QString("eventCorrelationId")]);
    m_event_correlation_id_isSet = !json[QString("eventCorrelationId")].isNull() && m_event_correlation_id_isValid;

    m_health_isValid = ::OpenAPI::fromJsonValue(m_health, json[QString("health")]);
    m_health_isSet = !json[QString("health")].isNull() && m_health_isValid;

    m_health_errors_isValid = ::OpenAPI::fromJsonValue(m_health_errors, json[QString("healthErrors")]);
    m_health_errors_isSet = !json[QString("healthErrors")].isNull() && m_health_errors_isValid;

    m_last_test_migration_status_isValid = ::OpenAPI::fromJsonValue(m_last_test_migration_status, json[QString("lastTestMigrationStatus")]);
    m_last_test_migration_status_isSet = !json[QString("lastTestMigrationStatus")].isNull() && m_last_test_migration_status_isValid;

    m_last_test_migration_time_isValid = ::OpenAPI::fromJsonValue(m_last_test_migration_time, json[QString("lastTestMigrationTime")]);
    m_last_test_migration_time_isSet = !json[QString("lastTestMigrationTime")].isNull() && m_last_test_migration_time_isValid;

    m_machine_name_isValid = ::OpenAPI::fromJsonValue(m_machine_name, json[QString("machineName")]);
    m_machine_name_isSet = !json[QString("machineName")].isNull() && m_machine_name_isValid;

    m_migration_state_isValid = ::OpenAPI::fromJsonValue(m_migration_state, json[QString("migrationState")]);
    m_migration_state_isSet = !json[QString("migrationState")].isNull() && m_migration_state_isValid;

    m_migration_state_description_isValid = ::OpenAPI::fromJsonValue(m_migration_state_description, json[QString("migrationStateDescription")]);
    m_migration_state_description_isSet = !json[QString("migrationStateDescription")].isNull() && m_migration_state_description_isValid;

    m_policy_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_policy_friendly_name, json[QString("policyFriendlyName")]);
    m_policy_friendly_name_isSet = !json[QString("policyFriendlyName")].isNull() && m_policy_friendly_name_isValid;

    m_policy_id_isValid = ::OpenAPI::fromJsonValue(m_policy_id, json[QString("policyId")]);
    m_policy_id_isSet = !json[QString("policyId")].isNull() && m_policy_id_isValid;

    m_provider_specific_details_isValid = ::OpenAPI::fromJsonValue(m_provider_specific_details, json[QString("providerSpecificDetails")]);
    m_provider_specific_details_isSet = !json[QString("providerSpecificDetails")].isNull() && m_provider_specific_details_isValid;

    m_test_migrate_state_isValid = ::OpenAPI::fromJsonValue(m_test_migrate_state, json[QString("testMigrateState")]);
    m_test_migrate_state_isSet = !json[QString("testMigrateState")].isNull() && m_test_migrate_state_isValid;

    m_test_migrate_state_description_isValid = ::OpenAPI::fromJsonValue(m_test_migrate_state_description, json[QString("testMigrateStateDescription")]);
    m_test_migrate_state_description_isSet = !json[QString("testMigrateStateDescription")].isNull() && m_test_migrate_state_description_isValid;
}

QString OAIMigrationItemProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrationItemProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_operations.size() > 0) {
        obj.insert(QString("allowedOperations"), ::OpenAPI::toJsonValue(m_allowed_operations));
    }
    if (m_current_job.isSet()) {
        obj.insert(QString("currentJob"), ::OpenAPI::toJsonValue(m_current_job));
    }
    if (m_event_correlation_id_isSet) {
        obj.insert(QString("eventCorrelationId"), ::OpenAPI::toJsonValue(m_event_correlation_id));
    }
    if (m_health_isSet) {
        obj.insert(QString("health"), ::OpenAPI::toJsonValue(m_health));
    }
    if (m_health_errors.size() > 0) {
        obj.insert(QString("healthErrors"), ::OpenAPI::toJsonValue(m_health_errors));
    }
    if (m_last_test_migration_status_isSet) {
        obj.insert(QString("lastTestMigrationStatus"), ::OpenAPI::toJsonValue(m_last_test_migration_status));
    }
    if (m_last_test_migration_time_isSet) {
        obj.insert(QString("lastTestMigrationTime"), ::OpenAPI::toJsonValue(m_last_test_migration_time));
    }
    if (m_machine_name_isSet) {
        obj.insert(QString("machineName"), ::OpenAPI::toJsonValue(m_machine_name));
    }
    if (m_migration_state_isSet) {
        obj.insert(QString("migrationState"), ::OpenAPI::toJsonValue(m_migration_state));
    }
    if (m_migration_state_description_isSet) {
        obj.insert(QString("migrationStateDescription"), ::OpenAPI::toJsonValue(m_migration_state_description));
    }
    if (m_policy_friendly_name_isSet) {
        obj.insert(QString("policyFriendlyName"), ::OpenAPI::toJsonValue(m_policy_friendly_name));
    }
    if (m_policy_id_isSet) {
        obj.insert(QString("policyId"), ::OpenAPI::toJsonValue(m_policy_id));
    }
    if (m_provider_specific_details.isSet()) {
        obj.insert(QString("providerSpecificDetails"), ::OpenAPI::toJsonValue(m_provider_specific_details));
    }
    if (m_test_migrate_state_isSet) {
        obj.insert(QString("testMigrateState"), ::OpenAPI::toJsonValue(m_test_migrate_state));
    }
    if (m_test_migrate_state_description_isSet) {
        obj.insert(QString("testMigrateStateDescription"), ::OpenAPI::toJsonValue(m_test_migrate_state_description));
    }
    return obj;
}

QList<QString> OAIMigrationItemProperties::getAllowedOperations() const {
    return m_allowed_operations;
}
void OAIMigrationItemProperties::setAllowedOperations(const QList<QString> &allowed_operations) {
    m_allowed_operations = allowed_operations;
    m_allowed_operations_isSet = true;
}

bool OAIMigrationItemProperties::is_allowed_operations_Set() const{
    return m_allowed_operations_isSet;
}

bool OAIMigrationItemProperties::is_allowed_operations_Valid() const{
    return m_allowed_operations_isValid;
}

OAICurrentJobDetails OAIMigrationItemProperties::getCurrentJob() const {
    return m_current_job;
}
void OAIMigrationItemProperties::setCurrentJob(const OAICurrentJobDetails &current_job) {
    m_current_job = current_job;
    m_current_job_isSet = true;
}

bool OAIMigrationItemProperties::is_current_job_Set() const{
    return m_current_job_isSet;
}

bool OAIMigrationItemProperties::is_current_job_Valid() const{
    return m_current_job_isValid;
}

QString OAIMigrationItemProperties::getEventCorrelationId() const {
    return m_event_correlation_id;
}
void OAIMigrationItemProperties::setEventCorrelationId(const QString &event_correlation_id) {
    m_event_correlation_id = event_correlation_id;
    m_event_correlation_id_isSet = true;
}

bool OAIMigrationItemProperties::is_event_correlation_id_Set() const{
    return m_event_correlation_id_isSet;
}

bool OAIMigrationItemProperties::is_event_correlation_id_Valid() const{
    return m_event_correlation_id_isValid;
}

QString OAIMigrationItemProperties::getHealth() const {
    return m_health;
}
void OAIMigrationItemProperties::setHealth(const QString &health) {
    m_health = health;
    m_health_isSet = true;
}

bool OAIMigrationItemProperties::is_health_Set() const{
    return m_health_isSet;
}

bool OAIMigrationItemProperties::is_health_Valid() const{
    return m_health_isValid;
}

QList<OAIHealthError> OAIMigrationItemProperties::getHealthErrors() const {
    return m_health_errors;
}
void OAIMigrationItemProperties::setHealthErrors(const QList<OAIHealthError> &health_errors) {
    m_health_errors = health_errors;
    m_health_errors_isSet = true;
}

bool OAIMigrationItemProperties::is_health_errors_Set() const{
    return m_health_errors_isSet;
}

bool OAIMigrationItemProperties::is_health_errors_Valid() const{
    return m_health_errors_isValid;
}

QString OAIMigrationItemProperties::getLastTestMigrationStatus() const {
    return m_last_test_migration_status;
}
void OAIMigrationItemProperties::setLastTestMigrationStatus(const QString &last_test_migration_status) {
    m_last_test_migration_status = last_test_migration_status;
    m_last_test_migration_status_isSet = true;
}

bool OAIMigrationItemProperties::is_last_test_migration_status_Set() const{
    return m_last_test_migration_status_isSet;
}

bool OAIMigrationItemProperties::is_last_test_migration_status_Valid() const{
    return m_last_test_migration_status_isValid;
}

QDateTime OAIMigrationItemProperties::getLastTestMigrationTime() const {
    return m_last_test_migration_time;
}
void OAIMigrationItemProperties::setLastTestMigrationTime(const QDateTime &last_test_migration_time) {
    m_last_test_migration_time = last_test_migration_time;
    m_last_test_migration_time_isSet = true;
}

bool OAIMigrationItemProperties::is_last_test_migration_time_Set() const{
    return m_last_test_migration_time_isSet;
}

bool OAIMigrationItemProperties::is_last_test_migration_time_Valid() const{
    return m_last_test_migration_time_isValid;
}

QString OAIMigrationItemProperties::getMachineName() const {
    return m_machine_name;
}
void OAIMigrationItemProperties::setMachineName(const QString &machine_name) {
    m_machine_name = machine_name;
    m_machine_name_isSet = true;
}

bool OAIMigrationItemProperties::is_machine_name_Set() const{
    return m_machine_name_isSet;
}

bool OAIMigrationItemProperties::is_machine_name_Valid() const{
    return m_machine_name_isValid;
}

QString OAIMigrationItemProperties::getMigrationState() const {
    return m_migration_state;
}
void OAIMigrationItemProperties::setMigrationState(const QString &migration_state) {
    m_migration_state = migration_state;
    m_migration_state_isSet = true;
}

bool OAIMigrationItemProperties::is_migration_state_Set() const{
    return m_migration_state_isSet;
}

bool OAIMigrationItemProperties::is_migration_state_Valid() const{
    return m_migration_state_isValid;
}

QString OAIMigrationItemProperties::getMigrationStateDescription() const {
    return m_migration_state_description;
}
void OAIMigrationItemProperties::setMigrationStateDescription(const QString &migration_state_description) {
    m_migration_state_description = migration_state_description;
    m_migration_state_description_isSet = true;
}

bool OAIMigrationItemProperties::is_migration_state_description_Set() const{
    return m_migration_state_description_isSet;
}

bool OAIMigrationItemProperties::is_migration_state_description_Valid() const{
    return m_migration_state_description_isValid;
}

QString OAIMigrationItemProperties::getPolicyFriendlyName() const {
    return m_policy_friendly_name;
}
void OAIMigrationItemProperties::setPolicyFriendlyName(const QString &policy_friendly_name) {
    m_policy_friendly_name = policy_friendly_name;
    m_policy_friendly_name_isSet = true;
}

bool OAIMigrationItemProperties::is_policy_friendly_name_Set() const{
    return m_policy_friendly_name_isSet;
}

bool OAIMigrationItemProperties::is_policy_friendly_name_Valid() const{
    return m_policy_friendly_name_isValid;
}

QString OAIMigrationItemProperties::getPolicyId() const {
    return m_policy_id;
}
void OAIMigrationItemProperties::setPolicyId(const QString &policy_id) {
    m_policy_id = policy_id;
    m_policy_id_isSet = true;
}

bool OAIMigrationItemProperties::is_policy_id_Set() const{
    return m_policy_id_isSet;
}

bool OAIMigrationItemProperties::is_policy_id_Valid() const{
    return m_policy_id_isValid;
}

OAIMigrationProviderSpecificSettings OAIMigrationItemProperties::getProviderSpecificDetails() const {
    return m_provider_specific_details;
}
void OAIMigrationItemProperties::setProviderSpecificDetails(const OAIMigrationProviderSpecificSettings &provider_specific_details) {
    m_provider_specific_details = provider_specific_details;
    m_provider_specific_details_isSet = true;
}

bool OAIMigrationItemProperties::is_provider_specific_details_Set() const{
    return m_provider_specific_details_isSet;
}

bool OAIMigrationItemProperties::is_provider_specific_details_Valid() const{
    return m_provider_specific_details_isValid;
}

QString OAIMigrationItemProperties::getTestMigrateState() const {
    return m_test_migrate_state;
}
void OAIMigrationItemProperties::setTestMigrateState(const QString &test_migrate_state) {
    m_test_migrate_state = test_migrate_state;
    m_test_migrate_state_isSet = true;
}

bool OAIMigrationItemProperties::is_test_migrate_state_Set() const{
    return m_test_migrate_state_isSet;
}

bool OAIMigrationItemProperties::is_test_migrate_state_Valid() const{
    return m_test_migrate_state_isValid;
}

QString OAIMigrationItemProperties::getTestMigrateStateDescription() const {
    return m_test_migrate_state_description;
}
void OAIMigrationItemProperties::setTestMigrateStateDescription(const QString &test_migrate_state_description) {
    m_test_migrate_state_description = test_migrate_state_description;
    m_test_migrate_state_description_isSet = true;
}

bool OAIMigrationItemProperties::is_test_migrate_state_description_Set() const{
    return m_test_migrate_state_description_isSet;
}

bool OAIMigrationItemProperties::is_test_migrate_state_description_Valid() const{
    return m_test_migrate_state_description_isValid;
}

bool OAIMigrationItemProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_test_migration_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_test_migration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_state_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_specific_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_migrate_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_migrate_state_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrationItemProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
