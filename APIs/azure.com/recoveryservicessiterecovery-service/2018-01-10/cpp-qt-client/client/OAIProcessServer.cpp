/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessServer::OAIProcessServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessServer::OAIProcessServer() {
    this->initializeModel();
}

OAIProcessServer::~OAIProcessServer() {}

void OAIProcessServer::initializeModel() {

    m_agent_expiry_date_isSet = false;
    m_agent_expiry_date_isValid = false;

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_agent_version_details_isSet = false;
    m_agent_version_details_isValid = false;

    m_available_memory_in_bytes_isSet = false;
    m_available_memory_in_bytes_isValid = false;

    m_available_space_in_bytes_isSet = false;
    m_available_space_in_bytes_isValid = false;

    m_cpu_load_isSet = false;
    m_cpu_load_isValid = false;

    m_cpu_load_status_isSet = false;
    m_cpu_load_status_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_health_errors_isSet = false;
    m_health_errors_isValid = false;

    m_host_id_isSet = false;
    m_host_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_last_heartbeat_isSet = false;
    m_last_heartbeat_isValid = false;

    m_machine_count_isSet = false;
    m_machine_count_isValid = false;

    m_memory_usage_status_isSet = false;
    m_memory_usage_status_isValid = false;

    m_mobility_service_updates_isSet = false;
    m_mobility_service_updates_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_ps_service_status_isSet = false;
    m_ps_service_status_isValid = false;

    m_replication_pair_count_isSet = false;
    m_replication_pair_count_isValid = false;

    m_space_usage_status_isSet = false;
    m_space_usage_status_isValid = false;

    m_ssl_cert_expiry_date_isSet = false;
    m_ssl_cert_expiry_date_isValid = false;

    m_ssl_cert_expiry_remaining_days_isSet = false;
    m_ssl_cert_expiry_remaining_days_isValid = false;

    m_system_load_isSet = false;
    m_system_load_isValid = false;

    m_system_load_status_isSet = false;
    m_system_load_status_isValid = false;

    m_total_memory_in_bytes_isSet = false;
    m_total_memory_in_bytes_isValid = false;

    m_total_space_in_bytes_isSet = false;
    m_total_space_in_bytes_isValid = false;

    m_version_status_isSet = false;
    m_version_status_isValid = false;
}

void OAIProcessServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessServer::fromJsonObject(QJsonObject json) {

    m_agent_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_agent_expiry_date, json[QString("agentExpiryDate")]);
    m_agent_expiry_date_isSet = !json[QString("agentExpiryDate")].isNull() && m_agent_expiry_date_isValid;

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_agent_version_details_isValid = ::OpenAPI::fromJsonValue(m_agent_version_details, json[QString("agentVersionDetails")]);
    m_agent_version_details_isSet = !json[QString("agentVersionDetails")].isNull() && m_agent_version_details_isValid;

    m_available_memory_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_available_memory_in_bytes, json[QString("availableMemoryInBytes")]);
    m_available_memory_in_bytes_isSet = !json[QString("availableMemoryInBytes")].isNull() && m_available_memory_in_bytes_isValid;

    m_available_space_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_available_space_in_bytes, json[QString("availableSpaceInBytes")]);
    m_available_space_in_bytes_isSet = !json[QString("availableSpaceInBytes")].isNull() && m_available_space_in_bytes_isValid;

    m_cpu_load_isValid = ::OpenAPI::fromJsonValue(m_cpu_load, json[QString("cpuLoad")]);
    m_cpu_load_isSet = !json[QString("cpuLoad")].isNull() && m_cpu_load_isValid;

    m_cpu_load_status_isValid = ::OpenAPI::fromJsonValue(m_cpu_load_status, json[QString("cpuLoadStatus")]);
    m_cpu_load_status_isSet = !json[QString("cpuLoadStatus")].isNull() && m_cpu_load_status_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_health_errors_isValid = ::OpenAPI::fromJsonValue(m_health_errors, json[QString("healthErrors")]);
    m_health_errors_isSet = !json[QString("healthErrors")].isNull() && m_health_errors_isValid;

    m_host_id_isValid = ::OpenAPI::fromJsonValue(m_host_id, json[QString("hostId")]);
    m_host_id_isSet = !json[QString("hostId")].isNull() && m_host_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_last_heartbeat_isValid = ::OpenAPI::fromJsonValue(m_last_heartbeat, json[QString("lastHeartbeat")]);
    m_last_heartbeat_isSet = !json[QString("lastHeartbeat")].isNull() && m_last_heartbeat_isValid;

    m_machine_count_isValid = ::OpenAPI::fromJsonValue(m_machine_count, json[QString("machineCount")]);
    m_machine_count_isSet = !json[QString("machineCount")].isNull() && m_machine_count_isValid;

    m_memory_usage_status_isValid = ::OpenAPI::fromJsonValue(m_memory_usage_status, json[QString("memoryUsageStatus")]);
    m_memory_usage_status_isSet = !json[QString("memoryUsageStatus")].isNull() && m_memory_usage_status_isValid;

    m_mobility_service_updates_isValid = ::OpenAPI::fromJsonValue(m_mobility_service_updates, json[QString("mobilityServiceUpdates")]);
    m_mobility_service_updates_isSet = !json[QString("mobilityServiceUpdates")].isNull() && m_mobility_service_updates_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_ps_service_status_isValid = ::OpenAPI::fromJsonValue(m_ps_service_status, json[QString("psServiceStatus")]);
    m_ps_service_status_isSet = !json[QString("psServiceStatus")].isNull() && m_ps_service_status_isValid;

    m_replication_pair_count_isValid = ::OpenAPI::fromJsonValue(m_replication_pair_count, json[QString("replicationPairCount")]);
    m_replication_pair_count_isSet = !json[QString("replicationPairCount")].isNull() && m_replication_pair_count_isValid;

    m_space_usage_status_isValid = ::OpenAPI::fromJsonValue(m_space_usage_status, json[QString("spaceUsageStatus")]);
    m_space_usage_status_isSet = !json[QString("spaceUsageStatus")].isNull() && m_space_usage_status_isValid;

    m_ssl_cert_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_ssl_cert_expiry_date, json[QString("sslCertExpiryDate")]);
    m_ssl_cert_expiry_date_isSet = !json[QString("sslCertExpiryDate")].isNull() && m_ssl_cert_expiry_date_isValid;

    m_ssl_cert_expiry_remaining_days_isValid = ::OpenAPI::fromJsonValue(m_ssl_cert_expiry_remaining_days, json[QString("sslCertExpiryRemainingDays")]);
    m_ssl_cert_expiry_remaining_days_isSet = !json[QString("sslCertExpiryRemainingDays")].isNull() && m_ssl_cert_expiry_remaining_days_isValid;

    m_system_load_isValid = ::OpenAPI::fromJsonValue(m_system_load, json[QString("systemLoad")]);
    m_system_load_isSet = !json[QString("systemLoad")].isNull() && m_system_load_isValid;

    m_system_load_status_isValid = ::OpenAPI::fromJsonValue(m_system_load_status, json[QString("systemLoadStatus")]);
    m_system_load_status_isSet = !json[QString("systemLoadStatus")].isNull() && m_system_load_status_isValid;

    m_total_memory_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_memory_in_bytes, json[QString("totalMemoryInBytes")]);
    m_total_memory_in_bytes_isSet = !json[QString("totalMemoryInBytes")].isNull() && m_total_memory_in_bytes_isValid;

    m_total_space_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_space_in_bytes, json[QString("totalSpaceInBytes")]);
    m_total_space_in_bytes_isSet = !json[QString("totalSpaceInBytes")].isNull() && m_total_space_in_bytes_isValid;

    m_version_status_isValid = ::OpenAPI::fromJsonValue(m_version_status, json[QString("versionStatus")]);
    m_version_status_isSet = !json[QString("versionStatus")].isNull() && m_version_status_isValid;
}

QString OAIProcessServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessServer::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_expiry_date_isSet) {
        obj.insert(QString("agentExpiryDate"), ::OpenAPI::toJsonValue(m_agent_expiry_date));
    }
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_agent_version_details.isSet()) {
        obj.insert(QString("agentVersionDetails"), ::OpenAPI::toJsonValue(m_agent_version_details));
    }
    if (m_available_memory_in_bytes_isSet) {
        obj.insert(QString("availableMemoryInBytes"), ::OpenAPI::toJsonValue(m_available_memory_in_bytes));
    }
    if (m_available_space_in_bytes_isSet) {
        obj.insert(QString("availableSpaceInBytes"), ::OpenAPI::toJsonValue(m_available_space_in_bytes));
    }
    if (m_cpu_load_isSet) {
        obj.insert(QString("cpuLoad"), ::OpenAPI::toJsonValue(m_cpu_load));
    }
    if (m_cpu_load_status_isSet) {
        obj.insert(QString("cpuLoadStatus"), ::OpenAPI::toJsonValue(m_cpu_load_status));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_health_errors.size() > 0) {
        obj.insert(QString("healthErrors"), ::OpenAPI::toJsonValue(m_health_errors));
    }
    if (m_host_id_isSet) {
        obj.insert(QString("hostId"), ::OpenAPI::toJsonValue(m_host_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_last_heartbeat_isSet) {
        obj.insert(QString("lastHeartbeat"), ::OpenAPI::toJsonValue(m_last_heartbeat));
    }
    if (m_machine_count_isSet) {
        obj.insert(QString("machineCount"), ::OpenAPI::toJsonValue(m_machine_count));
    }
    if (m_memory_usage_status_isSet) {
        obj.insert(QString("memoryUsageStatus"), ::OpenAPI::toJsonValue(m_memory_usage_status));
    }
    if (m_mobility_service_updates.size() > 0) {
        obj.insert(QString("mobilityServiceUpdates"), ::OpenAPI::toJsonValue(m_mobility_service_updates));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_ps_service_status_isSet) {
        obj.insert(QString("psServiceStatus"), ::OpenAPI::toJsonValue(m_ps_service_status));
    }
    if (m_replication_pair_count_isSet) {
        obj.insert(QString("replicationPairCount"), ::OpenAPI::toJsonValue(m_replication_pair_count));
    }
    if (m_space_usage_status_isSet) {
        obj.insert(QString("spaceUsageStatus"), ::OpenAPI::toJsonValue(m_space_usage_status));
    }
    if (m_ssl_cert_expiry_date_isSet) {
        obj.insert(QString("sslCertExpiryDate"), ::OpenAPI::toJsonValue(m_ssl_cert_expiry_date));
    }
    if (m_ssl_cert_expiry_remaining_days_isSet) {
        obj.insert(QString("sslCertExpiryRemainingDays"), ::OpenAPI::toJsonValue(m_ssl_cert_expiry_remaining_days));
    }
    if (m_system_load_isSet) {
        obj.insert(QString("systemLoad"), ::OpenAPI::toJsonValue(m_system_load));
    }
    if (m_system_load_status_isSet) {
        obj.insert(QString("systemLoadStatus"), ::OpenAPI::toJsonValue(m_system_load_status));
    }
    if (m_total_memory_in_bytes_isSet) {
        obj.insert(QString("totalMemoryInBytes"), ::OpenAPI::toJsonValue(m_total_memory_in_bytes));
    }
    if (m_total_space_in_bytes_isSet) {
        obj.insert(QString("totalSpaceInBytes"), ::OpenAPI::toJsonValue(m_total_space_in_bytes));
    }
    if (m_version_status_isSet) {
        obj.insert(QString("versionStatus"), ::OpenAPI::toJsonValue(m_version_status));
    }
    return obj;
}

QDateTime OAIProcessServer::getAgentExpiryDate() const {
    return m_agent_expiry_date;
}
void OAIProcessServer::setAgentExpiryDate(const QDateTime &agent_expiry_date) {
    m_agent_expiry_date = agent_expiry_date;
    m_agent_expiry_date_isSet = true;
}

bool OAIProcessServer::is_agent_expiry_date_Set() const{
    return m_agent_expiry_date_isSet;
}

bool OAIProcessServer::is_agent_expiry_date_Valid() const{
    return m_agent_expiry_date_isValid;
}

QString OAIProcessServer::getAgentVersion() const {
    return m_agent_version;
}
void OAIProcessServer::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIProcessServer::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIProcessServer::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

OAIVersionDetails OAIProcessServer::getAgentVersionDetails() const {
    return m_agent_version_details;
}
void OAIProcessServer::setAgentVersionDetails(const OAIVersionDetails &agent_version_details) {
    m_agent_version_details = agent_version_details;
    m_agent_version_details_isSet = true;
}

bool OAIProcessServer::is_agent_version_details_Set() const{
    return m_agent_version_details_isSet;
}

bool OAIProcessServer::is_agent_version_details_Valid() const{
    return m_agent_version_details_isValid;
}

qint64 OAIProcessServer::getAvailableMemoryInBytes() const {
    return m_available_memory_in_bytes;
}
void OAIProcessServer::setAvailableMemoryInBytes(const qint64 &available_memory_in_bytes) {
    m_available_memory_in_bytes = available_memory_in_bytes;
    m_available_memory_in_bytes_isSet = true;
}

bool OAIProcessServer::is_available_memory_in_bytes_Set() const{
    return m_available_memory_in_bytes_isSet;
}

bool OAIProcessServer::is_available_memory_in_bytes_Valid() const{
    return m_available_memory_in_bytes_isValid;
}

qint64 OAIProcessServer::getAvailableSpaceInBytes() const {
    return m_available_space_in_bytes;
}
void OAIProcessServer::setAvailableSpaceInBytes(const qint64 &available_space_in_bytes) {
    m_available_space_in_bytes = available_space_in_bytes;
    m_available_space_in_bytes_isSet = true;
}

bool OAIProcessServer::is_available_space_in_bytes_Set() const{
    return m_available_space_in_bytes_isSet;
}

bool OAIProcessServer::is_available_space_in_bytes_Valid() const{
    return m_available_space_in_bytes_isValid;
}

QString OAIProcessServer::getCpuLoad() const {
    return m_cpu_load;
}
void OAIProcessServer::setCpuLoad(const QString &cpu_load) {
    m_cpu_load = cpu_load;
    m_cpu_load_isSet = true;
}

bool OAIProcessServer::is_cpu_load_Set() const{
    return m_cpu_load_isSet;
}

bool OAIProcessServer::is_cpu_load_Valid() const{
    return m_cpu_load_isValid;
}

QString OAIProcessServer::getCpuLoadStatus() const {
    return m_cpu_load_status;
}
void OAIProcessServer::setCpuLoadStatus(const QString &cpu_load_status) {
    m_cpu_load_status = cpu_load_status;
    m_cpu_load_status_isSet = true;
}

bool OAIProcessServer::is_cpu_load_status_Set() const{
    return m_cpu_load_status_isSet;
}

bool OAIProcessServer::is_cpu_load_status_Valid() const{
    return m_cpu_load_status_isValid;
}

QString OAIProcessServer::getFriendlyName() const {
    return m_friendly_name;
}
void OAIProcessServer::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIProcessServer::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIProcessServer::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QList<OAIHealthError> OAIProcessServer::getHealthErrors() const {
    return m_health_errors;
}
void OAIProcessServer::setHealthErrors(const QList<OAIHealthError> &health_errors) {
    m_health_errors = health_errors;
    m_health_errors_isSet = true;
}

bool OAIProcessServer::is_health_errors_Set() const{
    return m_health_errors_isSet;
}

bool OAIProcessServer::is_health_errors_Valid() const{
    return m_health_errors_isValid;
}

QString OAIProcessServer::getHostId() const {
    return m_host_id;
}
void OAIProcessServer::setHostId(const QString &host_id) {
    m_host_id = host_id;
    m_host_id_isSet = true;
}

bool OAIProcessServer::is_host_id_Set() const{
    return m_host_id_isSet;
}

bool OAIProcessServer::is_host_id_Valid() const{
    return m_host_id_isValid;
}

QString OAIProcessServer::getId() const {
    return m_id;
}
void OAIProcessServer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProcessServer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProcessServer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProcessServer::getIpAddress() const {
    return m_ip_address;
}
void OAIProcessServer::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIProcessServer::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIProcessServer::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QDateTime OAIProcessServer::getLastHeartbeat() const {
    return m_last_heartbeat;
}
void OAIProcessServer::setLastHeartbeat(const QDateTime &last_heartbeat) {
    m_last_heartbeat = last_heartbeat;
    m_last_heartbeat_isSet = true;
}

bool OAIProcessServer::is_last_heartbeat_Set() const{
    return m_last_heartbeat_isSet;
}

bool OAIProcessServer::is_last_heartbeat_Valid() const{
    return m_last_heartbeat_isValid;
}

QString OAIProcessServer::getMachineCount() const {
    return m_machine_count;
}
void OAIProcessServer::setMachineCount(const QString &machine_count) {
    m_machine_count = machine_count;
    m_machine_count_isSet = true;
}

bool OAIProcessServer::is_machine_count_Set() const{
    return m_machine_count_isSet;
}

bool OAIProcessServer::is_machine_count_Valid() const{
    return m_machine_count_isValid;
}

QString OAIProcessServer::getMemoryUsageStatus() const {
    return m_memory_usage_status;
}
void OAIProcessServer::setMemoryUsageStatus(const QString &memory_usage_status) {
    m_memory_usage_status = memory_usage_status;
    m_memory_usage_status_isSet = true;
}

bool OAIProcessServer::is_memory_usage_status_Set() const{
    return m_memory_usage_status_isSet;
}

bool OAIProcessServer::is_memory_usage_status_Valid() const{
    return m_memory_usage_status_isValid;
}

QList<OAIMobilityServiceUpdate> OAIProcessServer::getMobilityServiceUpdates() const {
    return m_mobility_service_updates;
}
void OAIProcessServer::setMobilityServiceUpdates(const QList<OAIMobilityServiceUpdate> &mobility_service_updates) {
    m_mobility_service_updates = mobility_service_updates;
    m_mobility_service_updates_isSet = true;
}

bool OAIProcessServer::is_mobility_service_updates_Set() const{
    return m_mobility_service_updates_isSet;
}

bool OAIProcessServer::is_mobility_service_updates_Valid() const{
    return m_mobility_service_updates_isValid;
}

QString OAIProcessServer::getOsType() const {
    return m_os_type;
}
void OAIProcessServer::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIProcessServer::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIProcessServer::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIProcessServer::getOsVersion() const {
    return m_os_version;
}
void OAIProcessServer::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIProcessServer::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIProcessServer::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIProcessServer::getPsServiceStatus() const {
    return m_ps_service_status;
}
void OAIProcessServer::setPsServiceStatus(const QString &ps_service_status) {
    m_ps_service_status = ps_service_status;
    m_ps_service_status_isSet = true;
}

bool OAIProcessServer::is_ps_service_status_Set() const{
    return m_ps_service_status_isSet;
}

bool OAIProcessServer::is_ps_service_status_Valid() const{
    return m_ps_service_status_isValid;
}

QString OAIProcessServer::getReplicationPairCount() const {
    return m_replication_pair_count;
}
void OAIProcessServer::setReplicationPairCount(const QString &replication_pair_count) {
    m_replication_pair_count = replication_pair_count;
    m_replication_pair_count_isSet = true;
}

bool OAIProcessServer::is_replication_pair_count_Set() const{
    return m_replication_pair_count_isSet;
}

bool OAIProcessServer::is_replication_pair_count_Valid() const{
    return m_replication_pair_count_isValid;
}

QString OAIProcessServer::getSpaceUsageStatus() const {
    return m_space_usage_status;
}
void OAIProcessServer::setSpaceUsageStatus(const QString &space_usage_status) {
    m_space_usage_status = space_usage_status;
    m_space_usage_status_isSet = true;
}

bool OAIProcessServer::is_space_usage_status_Set() const{
    return m_space_usage_status_isSet;
}

bool OAIProcessServer::is_space_usage_status_Valid() const{
    return m_space_usage_status_isValid;
}

QDateTime OAIProcessServer::getSslCertExpiryDate() const {
    return m_ssl_cert_expiry_date;
}
void OAIProcessServer::setSslCertExpiryDate(const QDateTime &ssl_cert_expiry_date) {
    m_ssl_cert_expiry_date = ssl_cert_expiry_date;
    m_ssl_cert_expiry_date_isSet = true;
}

bool OAIProcessServer::is_ssl_cert_expiry_date_Set() const{
    return m_ssl_cert_expiry_date_isSet;
}

bool OAIProcessServer::is_ssl_cert_expiry_date_Valid() const{
    return m_ssl_cert_expiry_date_isValid;
}

qint32 OAIProcessServer::getSslCertExpiryRemainingDays() const {
    return m_ssl_cert_expiry_remaining_days;
}
void OAIProcessServer::setSslCertExpiryRemainingDays(const qint32 &ssl_cert_expiry_remaining_days) {
    m_ssl_cert_expiry_remaining_days = ssl_cert_expiry_remaining_days;
    m_ssl_cert_expiry_remaining_days_isSet = true;
}

bool OAIProcessServer::is_ssl_cert_expiry_remaining_days_Set() const{
    return m_ssl_cert_expiry_remaining_days_isSet;
}

bool OAIProcessServer::is_ssl_cert_expiry_remaining_days_Valid() const{
    return m_ssl_cert_expiry_remaining_days_isValid;
}

QString OAIProcessServer::getSystemLoad() const {
    return m_system_load;
}
void OAIProcessServer::setSystemLoad(const QString &system_load) {
    m_system_load = system_load;
    m_system_load_isSet = true;
}

bool OAIProcessServer::is_system_load_Set() const{
    return m_system_load_isSet;
}

bool OAIProcessServer::is_system_load_Valid() const{
    return m_system_load_isValid;
}

QString OAIProcessServer::getSystemLoadStatus() const {
    return m_system_load_status;
}
void OAIProcessServer::setSystemLoadStatus(const QString &system_load_status) {
    m_system_load_status = system_load_status;
    m_system_load_status_isSet = true;
}

bool OAIProcessServer::is_system_load_status_Set() const{
    return m_system_load_status_isSet;
}

bool OAIProcessServer::is_system_load_status_Valid() const{
    return m_system_load_status_isValid;
}

qint64 OAIProcessServer::getTotalMemoryInBytes() const {
    return m_total_memory_in_bytes;
}
void OAIProcessServer::setTotalMemoryInBytes(const qint64 &total_memory_in_bytes) {
    m_total_memory_in_bytes = total_memory_in_bytes;
    m_total_memory_in_bytes_isSet = true;
}

bool OAIProcessServer::is_total_memory_in_bytes_Set() const{
    return m_total_memory_in_bytes_isSet;
}

bool OAIProcessServer::is_total_memory_in_bytes_Valid() const{
    return m_total_memory_in_bytes_isValid;
}

qint64 OAIProcessServer::getTotalSpaceInBytes() const {
    return m_total_space_in_bytes;
}
void OAIProcessServer::setTotalSpaceInBytes(const qint64 &total_space_in_bytes) {
    m_total_space_in_bytes = total_space_in_bytes;
    m_total_space_in_bytes_isSet = true;
}

bool OAIProcessServer::is_total_space_in_bytes_Set() const{
    return m_total_space_in_bytes_isSet;
}

bool OAIProcessServer::is_total_space_in_bytes_Valid() const{
    return m_total_space_in_bytes_isValid;
}

QString OAIProcessServer::getVersionStatus() const {
    return m_version_status;
}
void OAIProcessServer::setVersionStatus(const QString &version_status) {
    m_version_status = version_status;
    m_version_status_isSet = true;
}

bool OAIProcessServer::is_version_status_Set() const{
    return m_version_status_isSet;
}

bool OAIProcessServer::is_version_status_Valid() const{
    return m_version_status_isValid;
}

bool OAIProcessServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_version_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_memory_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_space_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_load_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_heartbeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_usage_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_service_updates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ps_service_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_pair_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_usage_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_cert_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_cert_expiry_remaining_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_load_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_memory_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_space_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
