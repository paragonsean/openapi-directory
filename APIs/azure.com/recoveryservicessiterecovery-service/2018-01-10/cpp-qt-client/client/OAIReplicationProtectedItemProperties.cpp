/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationProtectedItemProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationProtectedItemProperties::OAIReplicationProtectedItemProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationProtectedItemProperties::OAIReplicationProtectedItemProperties() {
    this->initializeModel();
}

OAIReplicationProtectedItemProperties::~OAIReplicationProtectedItemProperties() {}

void OAIReplicationProtectedItemProperties::initializeModel() {

    m_active_location_isSet = false;
    m_active_location_isValid = false;

    m_allowed_operations_isSet = false;
    m_allowed_operations_isValid = false;

    m_current_scenario_isSet = false;
    m_current_scenario_isValid = false;

    m_failover_health_isSet = false;
    m_failover_health_isValid = false;

    m_failover_recovery_point_id_isSet = false;
    m_failover_recovery_point_id_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_health_errors_isSet = false;
    m_health_errors_isValid = false;

    m_last_successful_failover_time_isSet = false;
    m_last_successful_failover_time_isValid = false;

    m_last_successful_test_failover_time_isSet = false;
    m_last_successful_test_failover_time_isValid = false;

    m_policy_friendly_name_isSet = false;
    m_policy_friendly_name_isValid = false;

    m_policy_id_isSet = false;
    m_policy_id_isValid = false;

    m_primary_fabric_friendly_name_isSet = false;
    m_primary_fabric_friendly_name_isValid = false;

    m_primary_fabric_provider_isSet = false;
    m_primary_fabric_provider_isValid = false;

    m_primary_protection_container_friendly_name_isSet = false;
    m_primary_protection_container_friendly_name_isValid = false;

    m_protectable_item_id_isSet = false;
    m_protectable_item_id_isValid = false;

    m_protected_item_type_isSet = false;
    m_protected_item_type_isValid = false;

    m_protection_state_isSet = false;
    m_protection_state_isValid = false;

    m_protection_state_description_isSet = false;
    m_protection_state_description_isValid = false;

    m_provider_specific_details_isSet = false;
    m_provider_specific_details_isValid = false;

    m_recovery_container_id_isSet = false;
    m_recovery_container_id_isValid = false;

    m_recovery_fabric_friendly_name_isSet = false;
    m_recovery_fabric_friendly_name_isValid = false;

    m_recovery_fabric_id_isSet = false;
    m_recovery_fabric_id_isValid = false;

    m_recovery_protection_container_friendly_name_isSet = false;
    m_recovery_protection_container_friendly_name_isValid = false;

    m_recovery_services_provider_id_isSet = false;
    m_recovery_services_provider_id_isValid = false;

    m_replication_health_isSet = false;
    m_replication_health_isValid = false;

    m_test_failover_state_isSet = false;
    m_test_failover_state_isValid = false;

    m_test_failover_state_description_isSet = false;
    m_test_failover_state_description_isValid = false;
}

void OAIReplicationProtectedItemProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationProtectedItemProperties::fromJsonObject(QJsonObject json) {

    m_active_location_isValid = ::OpenAPI::fromJsonValue(m_active_location, json[QString("activeLocation")]);
    m_active_location_isSet = !json[QString("activeLocation")].isNull() && m_active_location_isValid;

    m_allowed_operations_isValid = ::OpenAPI::fromJsonValue(m_allowed_operations, json[QString("allowedOperations")]);
    m_allowed_operations_isSet = !json[QString("allowedOperations")].isNull() && m_allowed_operations_isValid;

    m_current_scenario_isValid = ::OpenAPI::fromJsonValue(m_current_scenario, json[QString("currentScenario")]);
    m_current_scenario_isSet = !json[QString("currentScenario")].isNull() && m_current_scenario_isValid;

    m_failover_health_isValid = ::OpenAPI::fromJsonValue(m_failover_health, json[QString("failoverHealth")]);
    m_failover_health_isSet = !json[QString("failoverHealth")].isNull() && m_failover_health_isValid;

    m_failover_recovery_point_id_isValid = ::OpenAPI::fromJsonValue(m_failover_recovery_point_id, json[QString("failoverRecoveryPointId")]);
    m_failover_recovery_point_id_isSet = !json[QString("failoverRecoveryPointId")].isNull() && m_failover_recovery_point_id_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_health_errors_isValid = ::OpenAPI::fromJsonValue(m_health_errors, json[QString("healthErrors")]);
    m_health_errors_isSet = !json[QString("healthErrors")].isNull() && m_health_errors_isValid;

    m_last_successful_failover_time_isValid = ::OpenAPI::fromJsonValue(m_last_successful_failover_time, json[QString("lastSuccessfulFailoverTime")]);
    m_last_successful_failover_time_isSet = !json[QString("lastSuccessfulFailoverTime")].isNull() && m_last_successful_failover_time_isValid;

    m_last_successful_test_failover_time_isValid = ::OpenAPI::fromJsonValue(m_last_successful_test_failover_time, json[QString("lastSuccessfulTestFailoverTime")]);
    m_last_successful_test_failover_time_isSet = !json[QString("lastSuccessfulTestFailoverTime")].isNull() && m_last_successful_test_failover_time_isValid;

    m_policy_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_policy_friendly_name, json[QString("policyFriendlyName")]);
    m_policy_friendly_name_isSet = !json[QString("policyFriendlyName")].isNull() && m_policy_friendly_name_isValid;

    m_policy_id_isValid = ::OpenAPI::fromJsonValue(m_policy_id, json[QString("policyId")]);
    m_policy_id_isSet = !json[QString("policyId")].isNull() && m_policy_id_isValid;

    m_primary_fabric_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_primary_fabric_friendly_name, json[QString("primaryFabricFriendlyName")]);
    m_primary_fabric_friendly_name_isSet = !json[QString("primaryFabricFriendlyName")].isNull() && m_primary_fabric_friendly_name_isValid;

    m_primary_fabric_provider_isValid = ::OpenAPI::fromJsonValue(m_primary_fabric_provider, json[QString("primaryFabricProvider")]);
    m_primary_fabric_provider_isSet = !json[QString("primaryFabricProvider")].isNull() && m_primary_fabric_provider_isValid;

    m_primary_protection_container_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_primary_protection_container_friendly_name, json[QString("primaryProtectionContainerFriendlyName")]);
    m_primary_protection_container_friendly_name_isSet = !json[QString("primaryProtectionContainerFriendlyName")].isNull() && m_primary_protection_container_friendly_name_isValid;

    m_protectable_item_id_isValid = ::OpenAPI::fromJsonValue(m_protectable_item_id, json[QString("protectableItemId")]);
    m_protectable_item_id_isSet = !json[QString("protectableItemId")].isNull() && m_protectable_item_id_isValid;

    m_protected_item_type_isValid = ::OpenAPI::fromJsonValue(m_protected_item_type, json[QString("protectedItemType")]);
    m_protected_item_type_isSet = !json[QString("protectedItemType")].isNull() && m_protected_item_type_isValid;

    m_protection_state_isValid = ::OpenAPI::fromJsonValue(m_protection_state, json[QString("protectionState")]);
    m_protection_state_isSet = !json[QString("protectionState")].isNull() && m_protection_state_isValid;

    m_protection_state_description_isValid = ::OpenAPI::fromJsonValue(m_protection_state_description, json[QString("protectionStateDescription")]);
    m_protection_state_description_isSet = !json[QString("protectionStateDescription")].isNull() && m_protection_state_description_isValid;

    m_provider_specific_details_isValid = ::OpenAPI::fromJsonValue(m_provider_specific_details, json[QString("providerSpecificDetails")]);
    m_provider_specific_details_isSet = !json[QString("providerSpecificDetails")].isNull() && m_provider_specific_details_isValid;

    m_recovery_container_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_container_id, json[QString("recoveryContainerId")]);
    m_recovery_container_id_isSet = !json[QString("recoveryContainerId")].isNull() && m_recovery_container_id_isValid;

    m_recovery_fabric_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_recovery_fabric_friendly_name, json[QString("recoveryFabricFriendlyName")]);
    m_recovery_fabric_friendly_name_isSet = !json[QString("recoveryFabricFriendlyName")].isNull() && m_recovery_fabric_friendly_name_isValid;

    m_recovery_fabric_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_fabric_id, json[QString("recoveryFabricId")]);
    m_recovery_fabric_id_isSet = !json[QString("recoveryFabricId")].isNull() && m_recovery_fabric_id_isValid;

    m_recovery_protection_container_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_recovery_protection_container_friendly_name, json[QString("recoveryProtectionContainerFriendlyName")]);
    m_recovery_protection_container_friendly_name_isSet = !json[QString("recoveryProtectionContainerFriendlyName")].isNull() && m_recovery_protection_container_friendly_name_isValid;

    m_recovery_services_provider_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_services_provider_id, json[QString("recoveryServicesProviderId")]);
    m_recovery_services_provider_id_isSet = !json[QString("recoveryServicesProviderId")].isNull() && m_recovery_services_provider_id_isValid;

    m_replication_health_isValid = ::OpenAPI::fromJsonValue(m_replication_health, json[QString("replicationHealth")]);
    m_replication_health_isSet = !json[QString("replicationHealth")].isNull() && m_replication_health_isValid;

    m_test_failover_state_isValid = ::OpenAPI::fromJsonValue(m_test_failover_state, json[QString("testFailoverState")]);
    m_test_failover_state_isSet = !json[QString("testFailoverState")].isNull() && m_test_failover_state_isValid;

    m_test_failover_state_description_isValid = ::OpenAPI::fromJsonValue(m_test_failover_state_description, json[QString("testFailoverStateDescription")]);
    m_test_failover_state_description_isSet = !json[QString("testFailoverStateDescription")].isNull() && m_test_failover_state_description_isValid;
}

QString OAIReplicationProtectedItemProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationProtectedItemProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_active_location_isSet) {
        obj.insert(QString("activeLocation"), ::OpenAPI::toJsonValue(m_active_location));
    }
    if (m_allowed_operations.size() > 0) {
        obj.insert(QString("allowedOperations"), ::OpenAPI::toJsonValue(m_allowed_operations));
    }
    if (m_current_scenario.isSet()) {
        obj.insert(QString("currentScenario"), ::OpenAPI::toJsonValue(m_current_scenario));
    }
    if (m_failover_health_isSet) {
        obj.insert(QString("failoverHealth"), ::OpenAPI::toJsonValue(m_failover_health));
    }
    if (m_failover_recovery_point_id_isSet) {
        obj.insert(QString("failoverRecoveryPointId"), ::OpenAPI::toJsonValue(m_failover_recovery_point_id));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_health_errors.size() > 0) {
        obj.insert(QString("healthErrors"), ::OpenAPI::toJsonValue(m_health_errors));
    }
    if (m_last_successful_failover_time_isSet) {
        obj.insert(QString("lastSuccessfulFailoverTime"), ::OpenAPI::toJsonValue(m_last_successful_failover_time));
    }
    if (m_last_successful_test_failover_time_isSet) {
        obj.insert(QString("lastSuccessfulTestFailoverTime"), ::OpenAPI::toJsonValue(m_last_successful_test_failover_time));
    }
    if (m_policy_friendly_name_isSet) {
        obj.insert(QString("policyFriendlyName"), ::OpenAPI::toJsonValue(m_policy_friendly_name));
    }
    if (m_policy_id_isSet) {
        obj.insert(QString("policyId"), ::OpenAPI::toJsonValue(m_policy_id));
    }
    if (m_primary_fabric_friendly_name_isSet) {
        obj.insert(QString("primaryFabricFriendlyName"), ::OpenAPI::toJsonValue(m_primary_fabric_friendly_name));
    }
    if (m_primary_fabric_provider_isSet) {
        obj.insert(QString("primaryFabricProvider"), ::OpenAPI::toJsonValue(m_primary_fabric_provider));
    }
    if (m_primary_protection_container_friendly_name_isSet) {
        obj.insert(QString("primaryProtectionContainerFriendlyName"), ::OpenAPI::toJsonValue(m_primary_protection_container_friendly_name));
    }
    if (m_protectable_item_id_isSet) {
        obj.insert(QString("protectableItemId"), ::OpenAPI::toJsonValue(m_protectable_item_id));
    }
    if (m_protected_item_type_isSet) {
        obj.insert(QString("protectedItemType"), ::OpenAPI::toJsonValue(m_protected_item_type));
    }
    if (m_protection_state_isSet) {
        obj.insert(QString("protectionState"), ::OpenAPI::toJsonValue(m_protection_state));
    }
    if (m_protection_state_description_isSet) {
        obj.insert(QString("protectionStateDescription"), ::OpenAPI::toJsonValue(m_protection_state_description));
    }
    if (m_provider_specific_details.isSet()) {
        obj.insert(QString("providerSpecificDetails"), ::OpenAPI::toJsonValue(m_provider_specific_details));
    }
    if (m_recovery_container_id_isSet) {
        obj.insert(QString("recoveryContainerId"), ::OpenAPI::toJsonValue(m_recovery_container_id));
    }
    if (m_recovery_fabric_friendly_name_isSet) {
        obj.insert(QString("recoveryFabricFriendlyName"), ::OpenAPI::toJsonValue(m_recovery_fabric_friendly_name));
    }
    if (m_recovery_fabric_id_isSet) {
        obj.insert(QString("recoveryFabricId"), ::OpenAPI::toJsonValue(m_recovery_fabric_id));
    }
    if (m_recovery_protection_container_friendly_name_isSet) {
        obj.insert(QString("recoveryProtectionContainerFriendlyName"), ::OpenAPI::toJsonValue(m_recovery_protection_container_friendly_name));
    }
    if (m_recovery_services_provider_id_isSet) {
        obj.insert(QString("recoveryServicesProviderId"), ::OpenAPI::toJsonValue(m_recovery_services_provider_id));
    }
    if (m_replication_health_isSet) {
        obj.insert(QString("replicationHealth"), ::OpenAPI::toJsonValue(m_replication_health));
    }
    if (m_test_failover_state_isSet) {
        obj.insert(QString("testFailoverState"), ::OpenAPI::toJsonValue(m_test_failover_state));
    }
    if (m_test_failover_state_description_isSet) {
        obj.insert(QString("testFailoverStateDescription"), ::OpenAPI::toJsonValue(m_test_failover_state_description));
    }
    return obj;
}

QString OAIReplicationProtectedItemProperties::getActiveLocation() const {
    return m_active_location;
}
void OAIReplicationProtectedItemProperties::setActiveLocation(const QString &active_location) {
    m_active_location = active_location;
    m_active_location_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_active_location_Set() const{
    return m_active_location_isSet;
}

bool OAIReplicationProtectedItemProperties::is_active_location_Valid() const{
    return m_active_location_isValid;
}

QList<QString> OAIReplicationProtectedItemProperties::getAllowedOperations() const {
    return m_allowed_operations;
}
void OAIReplicationProtectedItemProperties::setAllowedOperations(const QList<QString> &allowed_operations) {
    m_allowed_operations = allowed_operations;
    m_allowed_operations_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_allowed_operations_Set() const{
    return m_allowed_operations_isSet;
}

bool OAIReplicationProtectedItemProperties::is_allowed_operations_Valid() const{
    return m_allowed_operations_isValid;
}

OAICurrentScenarioDetails OAIReplicationProtectedItemProperties::getCurrentScenario() const {
    return m_current_scenario;
}
void OAIReplicationProtectedItemProperties::setCurrentScenario(const OAICurrentScenarioDetails &current_scenario) {
    m_current_scenario = current_scenario;
    m_current_scenario_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_current_scenario_Set() const{
    return m_current_scenario_isSet;
}

bool OAIReplicationProtectedItemProperties::is_current_scenario_Valid() const{
    return m_current_scenario_isValid;
}

QString OAIReplicationProtectedItemProperties::getFailoverHealth() const {
    return m_failover_health;
}
void OAIReplicationProtectedItemProperties::setFailoverHealth(const QString &failover_health) {
    m_failover_health = failover_health;
    m_failover_health_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_failover_health_Set() const{
    return m_failover_health_isSet;
}

bool OAIReplicationProtectedItemProperties::is_failover_health_Valid() const{
    return m_failover_health_isValid;
}

QString OAIReplicationProtectedItemProperties::getFailoverRecoveryPointId() const {
    return m_failover_recovery_point_id;
}
void OAIReplicationProtectedItemProperties::setFailoverRecoveryPointId(const QString &failover_recovery_point_id) {
    m_failover_recovery_point_id = failover_recovery_point_id;
    m_failover_recovery_point_id_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_failover_recovery_point_id_Set() const{
    return m_failover_recovery_point_id_isSet;
}

bool OAIReplicationProtectedItemProperties::is_failover_recovery_point_id_Valid() const{
    return m_failover_recovery_point_id_isValid;
}

QString OAIReplicationProtectedItemProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIReplicationProtectedItemProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIReplicationProtectedItemProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QList<OAIHealthError> OAIReplicationProtectedItemProperties::getHealthErrors() const {
    return m_health_errors;
}
void OAIReplicationProtectedItemProperties::setHealthErrors(const QList<OAIHealthError> &health_errors) {
    m_health_errors = health_errors;
    m_health_errors_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_health_errors_Set() const{
    return m_health_errors_isSet;
}

bool OAIReplicationProtectedItemProperties::is_health_errors_Valid() const{
    return m_health_errors_isValid;
}

QDateTime OAIReplicationProtectedItemProperties::getLastSuccessfulFailoverTime() const {
    return m_last_successful_failover_time;
}
void OAIReplicationProtectedItemProperties::setLastSuccessfulFailoverTime(const QDateTime &last_successful_failover_time) {
    m_last_successful_failover_time = last_successful_failover_time;
    m_last_successful_failover_time_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_last_successful_failover_time_Set() const{
    return m_last_successful_failover_time_isSet;
}

bool OAIReplicationProtectedItemProperties::is_last_successful_failover_time_Valid() const{
    return m_last_successful_failover_time_isValid;
}

QDateTime OAIReplicationProtectedItemProperties::getLastSuccessfulTestFailoverTime() const {
    return m_last_successful_test_failover_time;
}
void OAIReplicationProtectedItemProperties::setLastSuccessfulTestFailoverTime(const QDateTime &last_successful_test_failover_time) {
    m_last_successful_test_failover_time = last_successful_test_failover_time;
    m_last_successful_test_failover_time_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_last_successful_test_failover_time_Set() const{
    return m_last_successful_test_failover_time_isSet;
}

bool OAIReplicationProtectedItemProperties::is_last_successful_test_failover_time_Valid() const{
    return m_last_successful_test_failover_time_isValid;
}

QString OAIReplicationProtectedItemProperties::getPolicyFriendlyName() const {
    return m_policy_friendly_name;
}
void OAIReplicationProtectedItemProperties::setPolicyFriendlyName(const QString &policy_friendly_name) {
    m_policy_friendly_name = policy_friendly_name;
    m_policy_friendly_name_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_policy_friendly_name_Set() const{
    return m_policy_friendly_name_isSet;
}

bool OAIReplicationProtectedItemProperties::is_policy_friendly_name_Valid() const{
    return m_policy_friendly_name_isValid;
}

QString OAIReplicationProtectedItemProperties::getPolicyId() const {
    return m_policy_id;
}
void OAIReplicationProtectedItemProperties::setPolicyId(const QString &policy_id) {
    m_policy_id = policy_id;
    m_policy_id_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_policy_id_Set() const{
    return m_policy_id_isSet;
}

bool OAIReplicationProtectedItemProperties::is_policy_id_Valid() const{
    return m_policy_id_isValid;
}

QString OAIReplicationProtectedItemProperties::getPrimaryFabricFriendlyName() const {
    return m_primary_fabric_friendly_name;
}
void OAIReplicationProtectedItemProperties::setPrimaryFabricFriendlyName(const QString &primary_fabric_friendly_name) {
    m_primary_fabric_friendly_name = primary_fabric_friendly_name;
    m_primary_fabric_friendly_name_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_primary_fabric_friendly_name_Set() const{
    return m_primary_fabric_friendly_name_isSet;
}

bool OAIReplicationProtectedItemProperties::is_primary_fabric_friendly_name_Valid() const{
    return m_primary_fabric_friendly_name_isValid;
}

QString OAIReplicationProtectedItemProperties::getPrimaryFabricProvider() const {
    return m_primary_fabric_provider;
}
void OAIReplicationProtectedItemProperties::setPrimaryFabricProvider(const QString &primary_fabric_provider) {
    m_primary_fabric_provider = primary_fabric_provider;
    m_primary_fabric_provider_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_primary_fabric_provider_Set() const{
    return m_primary_fabric_provider_isSet;
}

bool OAIReplicationProtectedItemProperties::is_primary_fabric_provider_Valid() const{
    return m_primary_fabric_provider_isValid;
}

QString OAIReplicationProtectedItemProperties::getPrimaryProtectionContainerFriendlyName() const {
    return m_primary_protection_container_friendly_name;
}
void OAIReplicationProtectedItemProperties::setPrimaryProtectionContainerFriendlyName(const QString &primary_protection_container_friendly_name) {
    m_primary_protection_container_friendly_name = primary_protection_container_friendly_name;
    m_primary_protection_container_friendly_name_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_primary_protection_container_friendly_name_Set() const{
    return m_primary_protection_container_friendly_name_isSet;
}

bool OAIReplicationProtectedItemProperties::is_primary_protection_container_friendly_name_Valid() const{
    return m_primary_protection_container_friendly_name_isValid;
}

QString OAIReplicationProtectedItemProperties::getProtectableItemId() const {
    return m_protectable_item_id;
}
void OAIReplicationProtectedItemProperties::setProtectableItemId(const QString &protectable_item_id) {
    m_protectable_item_id = protectable_item_id;
    m_protectable_item_id_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_protectable_item_id_Set() const{
    return m_protectable_item_id_isSet;
}

bool OAIReplicationProtectedItemProperties::is_protectable_item_id_Valid() const{
    return m_protectable_item_id_isValid;
}

QString OAIReplicationProtectedItemProperties::getProtectedItemType() const {
    return m_protected_item_type;
}
void OAIReplicationProtectedItemProperties::setProtectedItemType(const QString &protected_item_type) {
    m_protected_item_type = protected_item_type;
    m_protected_item_type_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_protected_item_type_Set() const{
    return m_protected_item_type_isSet;
}

bool OAIReplicationProtectedItemProperties::is_protected_item_type_Valid() const{
    return m_protected_item_type_isValid;
}

QString OAIReplicationProtectedItemProperties::getProtectionState() const {
    return m_protection_state;
}
void OAIReplicationProtectedItemProperties::setProtectionState(const QString &protection_state) {
    m_protection_state = protection_state;
    m_protection_state_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_protection_state_Set() const{
    return m_protection_state_isSet;
}

bool OAIReplicationProtectedItemProperties::is_protection_state_Valid() const{
    return m_protection_state_isValid;
}

QString OAIReplicationProtectedItemProperties::getProtectionStateDescription() const {
    return m_protection_state_description;
}
void OAIReplicationProtectedItemProperties::setProtectionStateDescription(const QString &protection_state_description) {
    m_protection_state_description = protection_state_description;
    m_protection_state_description_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_protection_state_description_Set() const{
    return m_protection_state_description_isSet;
}

bool OAIReplicationProtectedItemProperties::is_protection_state_description_Valid() const{
    return m_protection_state_description_isValid;
}

OAIReplicationProviderSpecificSettings OAIReplicationProtectedItemProperties::getProviderSpecificDetails() const {
    return m_provider_specific_details;
}
void OAIReplicationProtectedItemProperties::setProviderSpecificDetails(const OAIReplicationProviderSpecificSettings &provider_specific_details) {
    m_provider_specific_details = provider_specific_details;
    m_provider_specific_details_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_provider_specific_details_Set() const{
    return m_provider_specific_details_isSet;
}

bool OAIReplicationProtectedItemProperties::is_provider_specific_details_Valid() const{
    return m_provider_specific_details_isValid;
}

QString OAIReplicationProtectedItemProperties::getRecoveryContainerId() const {
    return m_recovery_container_id;
}
void OAIReplicationProtectedItemProperties::setRecoveryContainerId(const QString &recovery_container_id) {
    m_recovery_container_id = recovery_container_id;
    m_recovery_container_id_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_recovery_container_id_Set() const{
    return m_recovery_container_id_isSet;
}

bool OAIReplicationProtectedItemProperties::is_recovery_container_id_Valid() const{
    return m_recovery_container_id_isValid;
}

QString OAIReplicationProtectedItemProperties::getRecoveryFabricFriendlyName() const {
    return m_recovery_fabric_friendly_name;
}
void OAIReplicationProtectedItemProperties::setRecoveryFabricFriendlyName(const QString &recovery_fabric_friendly_name) {
    m_recovery_fabric_friendly_name = recovery_fabric_friendly_name;
    m_recovery_fabric_friendly_name_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_recovery_fabric_friendly_name_Set() const{
    return m_recovery_fabric_friendly_name_isSet;
}

bool OAIReplicationProtectedItemProperties::is_recovery_fabric_friendly_name_Valid() const{
    return m_recovery_fabric_friendly_name_isValid;
}

QString OAIReplicationProtectedItemProperties::getRecoveryFabricId() const {
    return m_recovery_fabric_id;
}
void OAIReplicationProtectedItemProperties::setRecoveryFabricId(const QString &recovery_fabric_id) {
    m_recovery_fabric_id = recovery_fabric_id;
    m_recovery_fabric_id_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_recovery_fabric_id_Set() const{
    return m_recovery_fabric_id_isSet;
}

bool OAIReplicationProtectedItemProperties::is_recovery_fabric_id_Valid() const{
    return m_recovery_fabric_id_isValid;
}

QString OAIReplicationProtectedItemProperties::getRecoveryProtectionContainerFriendlyName() const {
    return m_recovery_protection_container_friendly_name;
}
void OAIReplicationProtectedItemProperties::setRecoveryProtectionContainerFriendlyName(const QString &recovery_protection_container_friendly_name) {
    m_recovery_protection_container_friendly_name = recovery_protection_container_friendly_name;
    m_recovery_protection_container_friendly_name_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_recovery_protection_container_friendly_name_Set() const{
    return m_recovery_protection_container_friendly_name_isSet;
}

bool OAIReplicationProtectedItemProperties::is_recovery_protection_container_friendly_name_Valid() const{
    return m_recovery_protection_container_friendly_name_isValid;
}

QString OAIReplicationProtectedItemProperties::getRecoveryServicesProviderId() const {
    return m_recovery_services_provider_id;
}
void OAIReplicationProtectedItemProperties::setRecoveryServicesProviderId(const QString &recovery_services_provider_id) {
    m_recovery_services_provider_id = recovery_services_provider_id;
    m_recovery_services_provider_id_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_recovery_services_provider_id_Set() const{
    return m_recovery_services_provider_id_isSet;
}

bool OAIReplicationProtectedItemProperties::is_recovery_services_provider_id_Valid() const{
    return m_recovery_services_provider_id_isValid;
}

QString OAIReplicationProtectedItemProperties::getReplicationHealth() const {
    return m_replication_health;
}
void OAIReplicationProtectedItemProperties::setReplicationHealth(const QString &replication_health) {
    m_replication_health = replication_health;
    m_replication_health_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_replication_health_Set() const{
    return m_replication_health_isSet;
}

bool OAIReplicationProtectedItemProperties::is_replication_health_Valid() const{
    return m_replication_health_isValid;
}

QString OAIReplicationProtectedItemProperties::getTestFailoverState() const {
    return m_test_failover_state;
}
void OAIReplicationProtectedItemProperties::setTestFailoverState(const QString &test_failover_state) {
    m_test_failover_state = test_failover_state;
    m_test_failover_state_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_test_failover_state_Set() const{
    return m_test_failover_state_isSet;
}

bool OAIReplicationProtectedItemProperties::is_test_failover_state_Valid() const{
    return m_test_failover_state_isValid;
}

QString OAIReplicationProtectedItemProperties::getTestFailoverStateDescription() const {
    return m_test_failover_state_description;
}
void OAIReplicationProtectedItemProperties::setTestFailoverStateDescription(const QString &test_failover_state_description) {
    m_test_failover_state_description = test_failover_state_description;
    m_test_failover_state_description_isSet = true;
}

bool OAIReplicationProtectedItemProperties::is_test_failover_state_description_Set() const{
    return m_test_failover_state_description_isSet;
}

bool OAIReplicationProtectedItemProperties::is_test_failover_state_description_Valid() const{
    return m_test_failover_state_description_isValid;
}

bool OAIReplicationProtectedItemProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_scenario.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_health_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_recovery_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_successful_failover_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_successful_test_failover_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_fabric_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_fabric_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_protection_container_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protectable_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_state_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_specific_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_fabric_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_fabric_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_protection_container_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_services_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_health_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_failover_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_failover_state_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationProtectedItemProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
