/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestFailoverInputProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestFailoverInputProperties::OAITestFailoverInputProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestFailoverInputProperties::OAITestFailoverInputProperties() {
    this->initializeModel();
}

OAITestFailoverInputProperties::~OAITestFailoverInputProperties() {}

void OAITestFailoverInputProperties::initializeModel() {

    m_failover_direction_isSet = false;
    m_failover_direction_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_network_type_isSet = false;
    m_network_type_isValid = false;

    m_provider_specific_details_isSet = false;
    m_provider_specific_details_isValid = false;

    m_skip_test_failover_cleanup_isSet = false;
    m_skip_test_failover_cleanup_isValid = false;
}

void OAITestFailoverInputProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestFailoverInputProperties::fromJsonObject(QJsonObject json) {

    m_failover_direction_isValid = ::OpenAPI::fromJsonValue(m_failover_direction, json[QString("failoverDirection")]);
    m_failover_direction_isSet = !json[QString("failoverDirection")].isNull() && m_failover_direction_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("networkId")]);
    m_network_id_isSet = !json[QString("networkId")].isNull() && m_network_id_isValid;

    m_network_type_isValid = ::OpenAPI::fromJsonValue(m_network_type, json[QString("networkType")]);
    m_network_type_isSet = !json[QString("networkType")].isNull() && m_network_type_isValid;

    m_provider_specific_details_isValid = ::OpenAPI::fromJsonValue(m_provider_specific_details, json[QString("providerSpecificDetails")]);
    m_provider_specific_details_isSet = !json[QString("providerSpecificDetails")].isNull() && m_provider_specific_details_isValid;

    m_skip_test_failover_cleanup_isValid = ::OpenAPI::fromJsonValue(m_skip_test_failover_cleanup, json[QString("skipTestFailoverCleanup")]);
    m_skip_test_failover_cleanup_isSet = !json[QString("skipTestFailoverCleanup")].isNull() && m_skip_test_failover_cleanup_isValid;
}

QString OAITestFailoverInputProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestFailoverInputProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_failover_direction_isSet) {
        obj.insert(QString("failoverDirection"), ::OpenAPI::toJsonValue(m_failover_direction));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("networkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_network_type_isSet) {
        obj.insert(QString("networkType"), ::OpenAPI::toJsonValue(m_network_type));
    }
    if (m_provider_specific_details.isSet()) {
        obj.insert(QString("providerSpecificDetails"), ::OpenAPI::toJsonValue(m_provider_specific_details));
    }
    if (m_skip_test_failover_cleanup_isSet) {
        obj.insert(QString("skipTestFailoverCleanup"), ::OpenAPI::toJsonValue(m_skip_test_failover_cleanup));
    }
    return obj;
}

QString OAITestFailoverInputProperties::getFailoverDirection() const {
    return m_failover_direction;
}
void OAITestFailoverInputProperties::setFailoverDirection(const QString &failover_direction) {
    m_failover_direction = failover_direction;
    m_failover_direction_isSet = true;
}

bool OAITestFailoverInputProperties::is_failover_direction_Set() const{
    return m_failover_direction_isSet;
}

bool OAITestFailoverInputProperties::is_failover_direction_Valid() const{
    return m_failover_direction_isValid;
}

QString OAITestFailoverInputProperties::getNetworkId() const {
    return m_network_id;
}
void OAITestFailoverInputProperties::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAITestFailoverInputProperties::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAITestFailoverInputProperties::is_network_id_Valid() const{
    return m_network_id_isValid;
}

QString OAITestFailoverInputProperties::getNetworkType() const {
    return m_network_type;
}
void OAITestFailoverInputProperties::setNetworkType(const QString &network_type) {
    m_network_type = network_type;
    m_network_type_isSet = true;
}

bool OAITestFailoverInputProperties::is_network_type_Set() const{
    return m_network_type_isSet;
}

bool OAITestFailoverInputProperties::is_network_type_Valid() const{
    return m_network_type_isValid;
}

OAIProviderSpecificFailoverInput OAITestFailoverInputProperties::getProviderSpecificDetails() const {
    return m_provider_specific_details;
}
void OAITestFailoverInputProperties::setProviderSpecificDetails(const OAIProviderSpecificFailoverInput &provider_specific_details) {
    m_provider_specific_details = provider_specific_details;
    m_provider_specific_details_isSet = true;
}

bool OAITestFailoverInputProperties::is_provider_specific_details_Set() const{
    return m_provider_specific_details_isSet;
}

bool OAITestFailoverInputProperties::is_provider_specific_details_Valid() const{
    return m_provider_specific_details_isValid;
}

QString OAITestFailoverInputProperties::getSkipTestFailoverCleanup() const {
    return m_skip_test_failover_cleanup;
}
void OAITestFailoverInputProperties::setSkipTestFailoverCleanup(const QString &skip_test_failover_cleanup) {
    m_skip_test_failover_cleanup = skip_test_failover_cleanup;
    m_skip_test_failover_cleanup_isSet = true;
}

bool OAITestFailoverInputProperties::is_skip_test_failover_cleanup_Set() const{
    return m_skip_test_failover_cleanup_isSet;
}

bool OAITestFailoverInputProperties::is_skip_test_failover_cleanup_Valid() const{
    return m_skip_test_failover_cleanup_isValid;
}

bool OAITestFailoverInputProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failover_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_specific_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_test_failover_cleanup_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestFailoverInputProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
