/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVMwareCbtUpdateMigrationItemInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVMwareCbtUpdateMigrationItemInput::OAIVMwareCbtUpdateMigrationItemInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVMwareCbtUpdateMigrationItemInput::OAIVMwareCbtUpdateMigrationItemInput() {
    this->initializeModel();
}

OAIVMwareCbtUpdateMigrationItemInput::~OAIVMwareCbtUpdateMigrationItemInput() {}

void OAIVMwareCbtUpdateMigrationItemInput::initializeModel() {

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_perform_auto_resync_isSet = false;
    m_perform_auto_resync_isValid = false;

    m_target_availability_set_id_isSet = false;
    m_target_availability_set_id_isValid = false;

    m_target_boot_diagnostics_storage_account_id_isSet = false;
    m_target_boot_diagnostics_storage_account_id_isValid = false;

    m_target_network_id_isSet = false;
    m_target_network_id_isValid = false;

    m_target_resource_group_id_isSet = false;
    m_target_resource_group_id_isValid = false;

    m_target_vm_name_isSet = false;
    m_target_vm_name_isValid = false;

    m_target_vm_size_isSet = false;
    m_target_vm_size_isValid = false;

    m_vm_nics_isSet = false;
    m_vm_nics_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIVMwareCbtUpdateMigrationItemInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVMwareCbtUpdateMigrationItemInput::fromJsonObject(QJsonObject json) {

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_perform_auto_resync_isValid = ::OpenAPI::fromJsonValue(m_perform_auto_resync, json[QString("performAutoResync")]);
    m_perform_auto_resync_isSet = !json[QString("performAutoResync")].isNull() && m_perform_auto_resync_isValid;

    m_target_availability_set_id_isValid = ::OpenAPI::fromJsonValue(m_target_availability_set_id, json[QString("targetAvailabilitySetId")]);
    m_target_availability_set_id_isSet = !json[QString("targetAvailabilitySetId")].isNull() && m_target_availability_set_id_isValid;

    m_target_boot_diagnostics_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_target_boot_diagnostics_storage_account_id, json[QString("targetBootDiagnosticsStorageAccountId")]);
    m_target_boot_diagnostics_storage_account_id_isSet = !json[QString("targetBootDiagnosticsStorageAccountId")].isNull() && m_target_boot_diagnostics_storage_account_id_isValid;

    m_target_network_id_isValid = ::OpenAPI::fromJsonValue(m_target_network_id, json[QString("targetNetworkId")]);
    m_target_network_id_isSet = !json[QString("targetNetworkId")].isNull() && m_target_network_id_isValid;

    m_target_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_target_resource_group_id, json[QString("targetResourceGroupId")]);
    m_target_resource_group_id_isSet = !json[QString("targetResourceGroupId")].isNull() && m_target_resource_group_id_isValid;

    m_target_vm_name_isValid = ::OpenAPI::fromJsonValue(m_target_vm_name, json[QString("targetVmName")]);
    m_target_vm_name_isSet = !json[QString("targetVmName")].isNull() && m_target_vm_name_isValid;

    m_target_vm_size_isValid = ::OpenAPI::fromJsonValue(m_target_vm_size, json[QString("targetVmSize")]);
    m_target_vm_size_isSet = !json[QString("targetVmSize")].isNull() && m_target_vm_size_isValid;

    m_vm_nics_isValid = ::OpenAPI::fromJsonValue(m_vm_nics, json[QString("vmNics")]);
    m_vm_nics_isSet = !json[QString("vmNics")].isNull() && m_vm_nics_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIVMwareCbtUpdateMigrationItemInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVMwareCbtUpdateMigrationItemInput::asJsonObject() const {
    QJsonObject obj;
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_perform_auto_resync_isSet) {
        obj.insert(QString("performAutoResync"), ::OpenAPI::toJsonValue(m_perform_auto_resync));
    }
    if (m_target_availability_set_id_isSet) {
        obj.insert(QString("targetAvailabilitySetId"), ::OpenAPI::toJsonValue(m_target_availability_set_id));
    }
    if (m_target_boot_diagnostics_storage_account_id_isSet) {
        obj.insert(QString("targetBootDiagnosticsStorageAccountId"), ::OpenAPI::toJsonValue(m_target_boot_diagnostics_storage_account_id));
    }
    if (m_target_network_id_isSet) {
        obj.insert(QString("targetNetworkId"), ::OpenAPI::toJsonValue(m_target_network_id));
    }
    if (m_target_resource_group_id_isSet) {
        obj.insert(QString("targetResourceGroupId"), ::OpenAPI::toJsonValue(m_target_resource_group_id));
    }
    if (m_target_vm_name_isSet) {
        obj.insert(QString("targetVmName"), ::OpenAPI::toJsonValue(m_target_vm_name));
    }
    if (m_target_vm_size_isSet) {
        obj.insert(QString("targetVmSize"), ::OpenAPI::toJsonValue(m_target_vm_size));
    }
    if (m_vm_nics.size() > 0) {
        obj.insert(QString("vmNics"), ::OpenAPI::toJsonValue(m_vm_nics));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIVMwareCbtUpdateMigrationItemInput::getLicenseType() const {
    return m_license_type;
}
void OAIVMwareCbtUpdateMigrationItemInput::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_license_type_Valid() const{
    return m_license_type_isValid;
}

QString OAIVMwareCbtUpdateMigrationItemInput::getPerformAutoResync() const {
    return m_perform_auto_resync;
}
void OAIVMwareCbtUpdateMigrationItemInput::setPerformAutoResync(const QString &perform_auto_resync) {
    m_perform_auto_resync = perform_auto_resync;
    m_perform_auto_resync_isSet = true;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_perform_auto_resync_Set() const{
    return m_perform_auto_resync_isSet;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_perform_auto_resync_Valid() const{
    return m_perform_auto_resync_isValid;
}

QString OAIVMwareCbtUpdateMigrationItemInput::getTargetAvailabilitySetId() const {
    return m_target_availability_set_id;
}
void OAIVMwareCbtUpdateMigrationItemInput::setTargetAvailabilitySetId(const QString &target_availability_set_id) {
    m_target_availability_set_id = target_availability_set_id;
    m_target_availability_set_id_isSet = true;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_target_availability_set_id_Set() const{
    return m_target_availability_set_id_isSet;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_target_availability_set_id_Valid() const{
    return m_target_availability_set_id_isValid;
}

QString OAIVMwareCbtUpdateMigrationItemInput::getTargetBootDiagnosticsStorageAccountId() const {
    return m_target_boot_diagnostics_storage_account_id;
}
void OAIVMwareCbtUpdateMigrationItemInput::setTargetBootDiagnosticsStorageAccountId(const QString &target_boot_diagnostics_storage_account_id) {
    m_target_boot_diagnostics_storage_account_id = target_boot_diagnostics_storage_account_id;
    m_target_boot_diagnostics_storage_account_id_isSet = true;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_target_boot_diagnostics_storage_account_id_Set() const{
    return m_target_boot_diagnostics_storage_account_id_isSet;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_target_boot_diagnostics_storage_account_id_Valid() const{
    return m_target_boot_diagnostics_storage_account_id_isValid;
}

QString OAIVMwareCbtUpdateMigrationItemInput::getTargetNetworkId() const {
    return m_target_network_id;
}
void OAIVMwareCbtUpdateMigrationItemInput::setTargetNetworkId(const QString &target_network_id) {
    m_target_network_id = target_network_id;
    m_target_network_id_isSet = true;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_target_network_id_Set() const{
    return m_target_network_id_isSet;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_target_network_id_Valid() const{
    return m_target_network_id_isValid;
}

QString OAIVMwareCbtUpdateMigrationItemInput::getTargetResourceGroupId() const {
    return m_target_resource_group_id;
}
void OAIVMwareCbtUpdateMigrationItemInput::setTargetResourceGroupId(const QString &target_resource_group_id) {
    m_target_resource_group_id = target_resource_group_id;
    m_target_resource_group_id_isSet = true;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_target_resource_group_id_Set() const{
    return m_target_resource_group_id_isSet;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_target_resource_group_id_Valid() const{
    return m_target_resource_group_id_isValid;
}

QString OAIVMwareCbtUpdateMigrationItemInput::getTargetVmName() const {
    return m_target_vm_name;
}
void OAIVMwareCbtUpdateMigrationItemInput::setTargetVmName(const QString &target_vm_name) {
    m_target_vm_name = target_vm_name;
    m_target_vm_name_isSet = true;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_target_vm_name_Set() const{
    return m_target_vm_name_isSet;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_target_vm_name_Valid() const{
    return m_target_vm_name_isValid;
}

QString OAIVMwareCbtUpdateMigrationItemInput::getTargetVmSize() const {
    return m_target_vm_size;
}
void OAIVMwareCbtUpdateMigrationItemInput::setTargetVmSize(const QString &target_vm_size) {
    m_target_vm_size = target_vm_size;
    m_target_vm_size_isSet = true;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_target_vm_size_Set() const{
    return m_target_vm_size_isSet;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_target_vm_size_Valid() const{
    return m_target_vm_size_isValid;
}

QList<OAIVMwareCbtNicInput> OAIVMwareCbtUpdateMigrationItemInput::getVmNics() const {
    return m_vm_nics;
}
void OAIVMwareCbtUpdateMigrationItemInput::setVmNics(const QList<OAIVMwareCbtNicInput> &vm_nics) {
    m_vm_nics = vm_nics;
    m_vm_nics_isSet = true;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_vm_nics_Set() const{
    return m_vm_nics_isSet;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_vm_nics_Valid() const{
    return m_vm_nics_isValid;
}

QString OAIVMwareCbtUpdateMigrationItemInput::getInstanceType() const {
    return m_instance_type;
}
void OAIVMwareCbtUpdateMigrationItemInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIVMwareCbtUpdateMigrationItemInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIVMwareCbtUpdateMigrationItemInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perform_auto_resync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_availability_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_boot_diagnostics_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_nics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVMwareCbtUpdateMigrationItemInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
