/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSDiskDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSDiskDetails::OAIOSDiskDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSDiskDetails::OAIOSDiskDetails() {
    this->initializeModel();
}

OAIOSDiskDetails::~OAIOSDiskDetails() {}

void OAIOSDiskDetails::initializeModel() {

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_os_vhd_id_isSet = false;
    m_os_vhd_id_isValid = false;

    m_vhd_name_isSet = false;
    m_vhd_name_isValid = false;
}

void OAIOSDiskDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSDiskDetails::fromJsonObject(QJsonObject json) {

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_os_vhd_id_isValid = ::OpenAPI::fromJsonValue(m_os_vhd_id, json[QString("osVhdId")]);
    m_os_vhd_id_isSet = !json[QString("osVhdId")].isNull() && m_os_vhd_id_isValid;

    m_vhd_name_isValid = ::OpenAPI::fromJsonValue(m_vhd_name, json[QString("vhdName")]);
    m_vhd_name_isSet = !json[QString("vhdName")].isNull() && m_vhd_name_isValid;
}

QString OAIOSDiskDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSDiskDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_os_vhd_id_isSet) {
        obj.insert(QString("osVhdId"), ::OpenAPI::toJsonValue(m_os_vhd_id));
    }
    if (m_vhd_name_isSet) {
        obj.insert(QString("vhdName"), ::OpenAPI::toJsonValue(m_vhd_name));
    }
    return obj;
}

QString OAIOSDiskDetails::getOsType() const {
    return m_os_type;
}
void OAIOSDiskDetails::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIOSDiskDetails::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIOSDiskDetails::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIOSDiskDetails::getOsVhdId() const {
    return m_os_vhd_id;
}
void OAIOSDiskDetails::setOsVhdId(const QString &os_vhd_id) {
    m_os_vhd_id = os_vhd_id;
    m_os_vhd_id_isSet = true;
}

bool OAIOSDiskDetails::is_os_vhd_id_Set() const{
    return m_os_vhd_id_isSet;
}

bool OAIOSDiskDetails::is_os_vhd_id_Valid() const{
    return m_os_vhd_id_isValid;
}

QString OAIOSDiskDetails::getVhdName() const {
    return m_vhd_name;
}
void OAIOSDiskDetails::setVhdName(const QString &vhd_name) {
    m_vhd_name = vhd_name;
    m_vhd_name_isSet = true;
}

bool OAIOSDiskDetails::is_vhd_name_Set() const{
    return m_vhd_name_isSet;
}

bool OAIOSDiskDetails::is_vhd_name_Valid() const{
    return m_vhd_name_isValid;
}

bool OAIOSDiskDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_vhd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vhd_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSDiskDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
