/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceHealthSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceHealthSummary::OAIResourceHealthSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceHealthSummary::OAIResourceHealthSummary() {
    this->initializeModel();
}

OAIResourceHealthSummary::~OAIResourceHealthSummary() {}

void OAIResourceHealthSummary::initializeModel() {

    m_categorized_resource_counts_isSet = false;
    m_categorized_resource_counts_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_resource_count_isSet = false;
    m_resource_count_isValid = false;
}

void OAIResourceHealthSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceHealthSummary::fromJsonObject(QJsonObject json) {

    m_categorized_resource_counts_isValid = ::OpenAPI::fromJsonValue(m_categorized_resource_counts, json[QString("categorizedResourceCounts")]);
    m_categorized_resource_counts_isSet = !json[QString("categorizedResourceCounts")].isNull() && m_categorized_resource_counts_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_resource_count_isValid = ::OpenAPI::fromJsonValue(m_resource_count, json[QString("resourceCount")]);
    m_resource_count_isSet = !json[QString("resourceCount")].isNull() && m_resource_count_isValid;
}

QString OAIResourceHealthSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceHealthSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_categorized_resource_counts.size() > 0) {
        obj.insert(QString("categorizedResourceCounts"), ::OpenAPI::toJsonValue(m_categorized_resource_counts));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_resource_count_isSet) {
        obj.insert(QString("resourceCount"), ::OpenAPI::toJsonValue(m_resource_count));
    }
    return obj;
}

QMap<QString, qint32> OAIResourceHealthSummary::getCategorizedResourceCounts() const {
    return m_categorized_resource_counts;
}
void OAIResourceHealthSummary::setCategorizedResourceCounts(const QMap<QString, qint32> &categorized_resource_counts) {
    m_categorized_resource_counts = categorized_resource_counts;
    m_categorized_resource_counts_isSet = true;
}

bool OAIResourceHealthSummary::is_categorized_resource_counts_Set() const{
    return m_categorized_resource_counts_isSet;
}

bool OAIResourceHealthSummary::is_categorized_resource_counts_Valid() const{
    return m_categorized_resource_counts_isValid;
}

QList<OAIHealthErrorSummary> OAIResourceHealthSummary::getIssues() const {
    return m_issues;
}
void OAIResourceHealthSummary::setIssues(const QList<OAIHealthErrorSummary> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIResourceHealthSummary::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIResourceHealthSummary::is_issues_Valid() const{
    return m_issues_isValid;
}

qint32 OAIResourceHealthSummary::getResourceCount() const {
    return m_resource_count;
}
void OAIResourceHealthSummary::setResourceCount(const qint32 &resource_count) {
    m_resource_count = resource_count;
    m_resource_count_isSet = true;
}

bool OAIResourceHealthSummary::is_resource_count_Set() const{
    return m_resource_count_isSet;
}

bool OAIResourceHealthSummary::is_resource_count_Valid() const{
    return m_resource_count_isValid;
}

bool OAIResourceHealthSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categorized_resource_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceHealthSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
