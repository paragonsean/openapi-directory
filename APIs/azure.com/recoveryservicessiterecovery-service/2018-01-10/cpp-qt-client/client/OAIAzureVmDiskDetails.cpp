/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureVmDiskDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureVmDiskDetails::OAIAzureVmDiskDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureVmDiskDetails::OAIAzureVmDiskDetails() {
    this->initializeModel();
}

OAIAzureVmDiskDetails::~OAIAzureVmDiskDetails() {}

void OAIAzureVmDiskDetails::initializeModel() {

    m_lun_id_isSet = false;
    m_lun_id_isValid = false;

    m_max_size_mb_isSet = false;
    m_max_size_mb_isValid = false;

    m_target_disk_location_isSet = false;
    m_target_disk_location_isValid = false;

    m_target_disk_name_isSet = false;
    m_target_disk_name_isValid = false;

    m_vhd_id_isSet = false;
    m_vhd_id_isValid = false;

    m_vhd_name_isSet = false;
    m_vhd_name_isValid = false;

    m_vhd_type_isSet = false;
    m_vhd_type_isValid = false;
}

void OAIAzureVmDiskDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureVmDiskDetails::fromJsonObject(QJsonObject json) {

    m_lun_id_isValid = ::OpenAPI::fromJsonValue(m_lun_id, json[QString("lunId")]);
    m_lun_id_isSet = !json[QString("lunId")].isNull() && m_lun_id_isValid;

    m_max_size_mb_isValid = ::OpenAPI::fromJsonValue(m_max_size_mb, json[QString("maxSizeMB")]);
    m_max_size_mb_isSet = !json[QString("maxSizeMB")].isNull() && m_max_size_mb_isValid;

    m_target_disk_location_isValid = ::OpenAPI::fromJsonValue(m_target_disk_location, json[QString("targetDiskLocation")]);
    m_target_disk_location_isSet = !json[QString("targetDiskLocation")].isNull() && m_target_disk_location_isValid;

    m_target_disk_name_isValid = ::OpenAPI::fromJsonValue(m_target_disk_name, json[QString("targetDiskName")]);
    m_target_disk_name_isSet = !json[QString("targetDiskName")].isNull() && m_target_disk_name_isValid;

    m_vhd_id_isValid = ::OpenAPI::fromJsonValue(m_vhd_id, json[QString("vhdId")]);
    m_vhd_id_isSet = !json[QString("vhdId")].isNull() && m_vhd_id_isValid;

    m_vhd_name_isValid = ::OpenAPI::fromJsonValue(m_vhd_name, json[QString("vhdName")]);
    m_vhd_name_isSet = !json[QString("vhdName")].isNull() && m_vhd_name_isValid;

    m_vhd_type_isValid = ::OpenAPI::fromJsonValue(m_vhd_type, json[QString("vhdType")]);
    m_vhd_type_isSet = !json[QString("vhdType")].isNull() && m_vhd_type_isValid;
}

QString OAIAzureVmDiskDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureVmDiskDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_lun_id_isSet) {
        obj.insert(QString("lunId"), ::OpenAPI::toJsonValue(m_lun_id));
    }
    if (m_max_size_mb_isSet) {
        obj.insert(QString("maxSizeMB"), ::OpenAPI::toJsonValue(m_max_size_mb));
    }
    if (m_target_disk_location_isSet) {
        obj.insert(QString("targetDiskLocation"), ::OpenAPI::toJsonValue(m_target_disk_location));
    }
    if (m_target_disk_name_isSet) {
        obj.insert(QString("targetDiskName"), ::OpenAPI::toJsonValue(m_target_disk_name));
    }
    if (m_vhd_id_isSet) {
        obj.insert(QString("vhdId"), ::OpenAPI::toJsonValue(m_vhd_id));
    }
    if (m_vhd_name_isSet) {
        obj.insert(QString("vhdName"), ::OpenAPI::toJsonValue(m_vhd_name));
    }
    if (m_vhd_type_isSet) {
        obj.insert(QString("vhdType"), ::OpenAPI::toJsonValue(m_vhd_type));
    }
    return obj;
}

QString OAIAzureVmDiskDetails::getLunId() const {
    return m_lun_id;
}
void OAIAzureVmDiskDetails::setLunId(const QString &lun_id) {
    m_lun_id = lun_id;
    m_lun_id_isSet = true;
}

bool OAIAzureVmDiskDetails::is_lun_id_Set() const{
    return m_lun_id_isSet;
}

bool OAIAzureVmDiskDetails::is_lun_id_Valid() const{
    return m_lun_id_isValid;
}

QString OAIAzureVmDiskDetails::getMaxSizeMb() const {
    return m_max_size_mb;
}
void OAIAzureVmDiskDetails::setMaxSizeMb(const QString &max_size_mb) {
    m_max_size_mb = max_size_mb;
    m_max_size_mb_isSet = true;
}

bool OAIAzureVmDiskDetails::is_max_size_mb_Set() const{
    return m_max_size_mb_isSet;
}

bool OAIAzureVmDiskDetails::is_max_size_mb_Valid() const{
    return m_max_size_mb_isValid;
}

QString OAIAzureVmDiskDetails::getTargetDiskLocation() const {
    return m_target_disk_location;
}
void OAIAzureVmDiskDetails::setTargetDiskLocation(const QString &target_disk_location) {
    m_target_disk_location = target_disk_location;
    m_target_disk_location_isSet = true;
}

bool OAIAzureVmDiskDetails::is_target_disk_location_Set() const{
    return m_target_disk_location_isSet;
}

bool OAIAzureVmDiskDetails::is_target_disk_location_Valid() const{
    return m_target_disk_location_isValid;
}

QString OAIAzureVmDiskDetails::getTargetDiskName() const {
    return m_target_disk_name;
}
void OAIAzureVmDiskDetails::setTargetDiskName(const QString &target_disk_name) {
    m_target_disk_name = target_disk_name;
    m_target_disk_name_isSet = true;
}

bool OAIAzureVmDiskDetails::is_target_disk_name_Set() const{
    return m_target_disk_name_isSet;
}

bool OAIAzureVmDiskDetails::is_target_disk_name_Valid() const{
    return m_target_disk_name_isValid;
}

QString OAIAzureVmDiskDetails::getVhdId() const {
    return m_vhd_id;
}
void OAIAzureVmDiskDetails::setVhdId(const QString &vhd_id) {
    m_vhd_id = vhd_id;
    m_vhd_id_isSet = true;
}

bool OAIAzureVmDiskDetails::is_vhd_id_Set() const{
    return m_vhd_id_isSet;
}

bool OAIAzureVmDiskDetails::is_vhd_id_Valid() const{
    return m_vhd_id_isValid;
}

QString OAIAzureVmDiskDetails::getVhdName() const {
    return m_vhd_name;
}
void OAIAzureVmDiskDetails::setVhdName(const QString &vhd_name) {
    m_vhd_name = vhd_name;
    m_vhd_name_isSet = true;
}

bool OAIAzureVmDiskDetails::is_vhd_name_Set() const{
    return m_vhd_name_isSet;
}

bool OAIAzureVmDiskDetails::is_vhd_name_Valid() const{
    return m_vhd_name_isValid;
}

QString OAIAzureVmDiskDetails::getVhdType() const {
    return m_vhd_type;
}
void OAIAzureVmDiskDetails::setVhdType(const QString &vhd_type) {
    m_vhd_type = vhd_type;
    m_vhd_type_isSet = true;
}

bool OAIAzureVmDiskDetails::is_vhd_type_Set() const{
    return m_vhd_type_isSet;
}

bool OAIAzureVmDiskDetails::is_vhd_type_Valid() const{
    return m_vhd_type_isValid;
}

bool OAIAzureVmDiskDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lun_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_disk_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_disk_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vhd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vhd_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vhd_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureVmDiskDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
