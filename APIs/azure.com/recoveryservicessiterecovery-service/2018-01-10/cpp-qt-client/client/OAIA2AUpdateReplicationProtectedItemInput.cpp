/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIA2AUpdateReplicationProtectedItemInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIA2AUpdateReplicationProtectedItemInput::OAIA2AUpdateReplicationProtectedItemInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIA2AUpdateReplicationProtectedItemInput::OAIA2AUpdateReplicationProtectedItemInput() {
    this->initializeModel();
}

OAIA2AUpdateReplicationProtectedItemInput::~OAIA2AUpdateReplicationProtectedItemInput() {}

void OAIA2AUpdateReplicationProtectedItemInput::initializeModel() {

    m_disk_encryption_info_isSet = false;
    m_disk_encryption_info_isValid = false;

    m_managed_disk_update_details_isSet = false;
    m_managed_disk_update_details_isValid = false;

    m_recovery_boot_diag_storage_account_id_isSet = false;
    m_recovery_boot_diag_storage_account_id_isValid = false;

    m_recovery_cloud_service_id_isSet = false;
    m_recovery_cloud_service_id_isValid = false;

    m_recovery_resource_group_id_isSet = false;
    m_recovery_resource_group_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIA2AUpdateReplicationProtectedItemInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIA2AUpdateReplicationProtectedItemInput::fromJsonObject(QJsonObject json) {

    m_disk_encryption_info_isValid = ::OpenAPI::fromJsonValue(m_disk_encryption_info, json[QString("diskEncryptionInfo")]);
    m_disk_encryption_info_isSet = !json[QString("diskEncryptionInfo")].isNull() && m_disk_encryption_info_isValid;

    m_managed_disk_update_details_isValid = ::OpenAPI::fromJsonValue(m_managed_disk_update_details, json[QString("managedDiskUpdateDetails")]);
    m_managed_disk_update_details_isSet = !json[QString("managedDiskUpdateDetails")].isNull() && m_managed_disk_update_details_isValid;

    m_recovery_boot_diag_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_boot_diag_storage_account_id, json[QString("recoveryBootDiagStorageAccountId")]);
    m_recovery_boot_diag_storage_account_id_isSet = !json[QString("recoveryBootDiagStorageAccountId")].isNull() && m_recovery_boot_diag_storage_account_id_isValid;

    m_recovery_cloud_service_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_cloud_service_id, json[QString("recoveryCloudServiceId")]);
    m_recovery_cloud_service_id_isSet = !json[QString("recoveryCloudServiceId")].isNull() && m_recovery_cloud_service_id_isValid;

    m_recovery_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_resource_group_id, json[QString("recoveryResourceGroupId")]);
    m_recovery_resource_group_id_isSet = !json[QString("recoveryResourceGroupId")].isNull() && m_recovery_resource_group_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIA2AUpdateReplicationProtectedItemInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIA2AUpdateReplicationProtectedItemInput::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_encryption_info.isSet()) {
        obj.insert(QString("diskEncryptionInfo"), ::OpenAPI::toJsonValue(m_disk_encryption_info));
    }
    if (m_managed_disk_update_details.size() > 0) {
        obj.insert(QString("managedDiskUpdateDetails"), ::OpenAPI::toJsonValue(m_managed_disk_update_details));
    }
    if (m_recovery_boot_diag_storage_account_id_isSet) {
        obj.insert(QString("recoveryBootDiagStorageAccountId"), ::OpenAPI::toJsonValue(m_recovery_boot_diag_storage_account_id));
    }
    if (m_recovery_cloud_service_id_isSet) {
        obj.insert(QString("recoveryCloudServiceId"), ::OpenAPI::toJsonValue(m_recovery_cloud_service_id));
    }
    if (m_recovery_resource_group_id_isSet) {
        obj.insert(QString("recoveryResourceGroupId"), ::OpenAPI::toJsonValue(m_recovery_resource_group_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

OAIDiskEncryptionInfo OAIA2AUpdateReplicationProtectedItemInput::getDiskEncryptionInfo() const {
    return m_disk_encryption_info;
}
void OAIA2AUpdateReplicationProtectedItemInput::setDiskEncryptionInfo(const OAIDiskEncryptionInfo &disk_encryption_info) {
    m_disk_encryption_info = disk_encryption_info;
    m_disk_encryption_info_isSet = true;
}

bool OAIA2AUpdateReplicationProtectedItemInput::is_disk_encryption_info_Set() const{
    return m_disk_encryption_info_isSet;
}

bool OAIA2AUpdateReplicationProtectedItemInput::is_disk_encryption_info_Valid() const{
    return m_disk_encryption_info_isValid;
}

QList<OAIA2AVmManagedDiskUpdateDetails> OAIA2AUpdateReplicationProtectedItemInput::getManagedDiskUpdateDetails() const {
    return m_managed_disk_update_details;
}
void OAIA2AUpdateReplicationProtectedItemInput::setManagedDiskUpdateDetails(const QList<OAIA2AVmManagedDiskUpdateDetails> &managed_disk_update_details) {
    m_managed_disk_update_details = managed_disk_update_details;
    m_managed_disk_update_details_isSet = true;
}

bool OAIA2AUpdateReplicationProtectedItemInput::is_managed_disk_update_details_Set() const{
    return m_managed_disk_update_details_isSet;
}

bool OAIA2AUpdateReplicationProtectedItemInput::is_managed_disk_update_details_Valid() const{
    return m_managed_disk_update_details_isValid;
}

QString OAIA2AUpdateReplicationProtectedItemInput::getRecoveryBootDiagStorageAccountId() const {
    return m_recovery_boot_diag_storage_account_id;
}
void OAIA2AUpdateReplicationProtectedItemInput::setRecoveryBootDiagStorageAccountId(const QString &recovery_boot_diag_storage_account_id) {
    m_recovery_boot_diag_storage_account_id = recovery_boot_diag_storage_account_id;
    m_recovery_boot_diag_storage_account_id_isSet = true;
}

bool OAIA2AUpdateReplicationProtectedItemInput::is_recovery_boot_diag_storage_account_id_Set() const{
    return m_recovery_boot_diag_storage_account_id_isSet;
}

bool OAIA2AUpdateReplicationProtectedItemInput::is_recovery_boot_diag_storage_account_id_Valid() const{
    return m_recovery_boot_diag_storage_account_id_isValid;
}

QString OAIA2AUpdateReplicationProtectedItemInput::getRecoveryCloudServiceId() const {
    return m_recovery_cloud_service_id;
}
void OAIA2AUpdateReplicationProtectedItemInput::setRecoveryCloudServiceId(const QString &recovery_cloud_service_id) {
    m_recovery_cloud_service_id = recovery_cloud_service_id;
    m_recovery_cloud_service_id_isSet = true;
}

bool OAIA2AUpdateReplicationProtectedItemInput::is_recovery_cloud_service_id_Set() const{
    return m_recovery_cloud_service_id_isSet;
}

bool OAIA2AUpdateReplicationProtectedItemInput::is_recovery_cloud_service_id_Valid() const{
    return m_recovery_cloud_service_id_isValid;
}

QString OAIA2AUpdateReplicationProtectedItemInput::getRecoveryResourceGroupId() const {
    return m_recovery_resource_group_id;
}
void OAIA2AUpdateReplicationProtectedItemInput::setRecoveryResourceGroupId(const QString &recovery_resource_group_id) {
    m_recovery_resource_group_id = recovery_resource_group_id;
    m_recovery_resource_group_id_isSet = true;
}

bool OAIA2AUpdateReplicationProtectedItemInput::is_recovery_resource_group_id_Set() const{
    return m_recovery_resource_group_id_isSet;
}

bool OAIA2AUpdateReplicationProtectedItemInput::is_recovery_resource_group_id_Valid() const{
    return m_recovery_resource_group_id_isValid;
}

QString OAIA2AUpdateReplicationProtectedItemInput::getInstanceType() const {
    return m_instance_type;
}
void OAIA2AUpdateReplicationProtectedItemInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIA2AUpdateReplicationProtectedItemInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIA2AUpdateReplicationProtectedItemInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIA2AUpdateReplicationProtectedItemInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_encryption_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_disk_update_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_boot_diag_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_cloud_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIA2AUpdateReplicationProtectedItemInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
