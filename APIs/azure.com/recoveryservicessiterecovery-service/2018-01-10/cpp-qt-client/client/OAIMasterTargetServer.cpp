/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMasterTargetServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMasterTargetServer::OAIMasterTargetServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMasterTargetServer::OAIMasterTargetServer() {
    this->initializeModel();
}

OAIMasterTargetServer::~OAIMasterTargetServer() {}

void OAIMasterTargetServer::initializeModel() {

    m_agent_expiry_date_isSet = false;
    m_agent_expiry_date_isValid = false;

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_agent_version_details_isSet = false;
    m_agent_version_details_isValid = false;

    m_data_stores_isSet = false;
    m_data_stores_isValid = false;

    m_disk_count_isSet = false;
    m_disk_count_isValid = false;

    m_health_errors_isSet = false;
    m_health_errors_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_last_heartbeat_isSet = false;
    m_last_heartbeat_isValid = false;

    m_mars_agent_expiry_date_isSet = false;
    m_mars_agent_expiry_date_isValid = false;

    m_mars_agent_version_isSet = false;
    m_mars_agent_version_isValid = false;

    m_mars_agent_version_details_isSet = false;
    m_mars_agent_version_details_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_retention_volumes_isSet = false;
    m_retention_volumes_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;

    m_version_status_isSet = false;
    m_version_status_isValid = false;
}

void OAIMasterTargetServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMasterTargetServer::fromJsonObject(QJsonObject json) {

    m_agent_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_agent_expiry_date, json[QString("agentExpiryDate")]);
    m_agent_expiry_date_isSet = !json[QString("agentExpiryDate")].isNull() && m_agent_expiry_date_isValid;

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_agent_version_details_isValid = ::OpenAPI::fromJsonValue(m_agent_version_details, json[QString("agentVersionDetails")]);
    m_agent_version_details_isSet = !json[QString("agentVersionDetails")].isNull() && m_agent_version_details_isValid;

    m_data_stores_isValid = ::OpenAPI::fromJsonValue(m_data_stores, json[QString("dataStores")]);
    m_data_stores_isSet = !json[QString("dataStores")].isNull() && m_data_stores_isValid;

    m_disk_count_isValid = ::OpenAPI::fromJsonValue(m_disk_count, json[QString("diskCount")]);
    m_disk_count_isSet = !json[QString("diskCount")].isNull() && m_disk_count_isValid;

    m_health_errors_isValid = ::OpenAPI::fromJsonValue(m_health_errors, json[QString("healthErrors")]);
    m_health_errors_isSet = !json[QString("healthErrors")].isNull() && m_health_errors_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_last_heartbeat_isValid = ::OpenAPI::fromJsonValue(m_last_heartbeat, json[QString("lastHeartbeat")]);
    m_last_heartbeat_isSet = !json[QString("lastHeartbeat")].isNull() && m_last_heartbeat_isValid;

    m_mars_agent_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_mars_agent_expiry_date, json[QString("marsAgentExpiryDate")]);
    m_mars_agent_expiry_date_isSet = !json[QString("marsAgentExpiryDate")].isNull() && m_mars_agent_expiry_date_isValid;

    m_mars_agent_version_isValid = ::OpenAPI::fromJsonValue(m_mars_agent_version, json[QString("marsAgentVersion")]);
    m_mars_agent_version_isSet = !json[QString("marsAgentVersion")].isNull() && m_mars_agent_version_isValid;

    m_mars_agent_version_details_isValid = ::OpenAPI::fromJsonValue(m_mars_agent_version_details, json[QString("marsAgentVersionDetails")]);
    m_mars_agent_version_details_isSet = !json[QString("marsAgentVersionDetails")].isNull() && m_mars_agent_version_details_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_retention_volumes_isValid = ::OpenAPI::fromJsonValue(m_retention_volumes, json[QString("retentionVolumes")]);
    m_retention_volumes_isSet = !json[QString("retentionVolumes")].isNull() && m_retention_volumes_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("validationErrors")]);
    m_validation_errors_isSet = !json[QString("validationErrors")].isNull() && m_validation_errors_isValid;

    m_version_status_isValid = ::OpenAPI::fromJsonValue(m_version_status, json[QString("versionStatus")]);
    m_version_status_isSet = !json[QString("versionStatus")].isNull() && m_version_status_isValid;
}

QString OAIMasterTargetServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMasterTargetServer::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_expiry_date_isSet) {
        obj.insert(QString("agentExpiryDate"), ::OpenAPI::toJsonValue(m_agent_expiry_date));
    }
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_agent_version_details.isSet()) {
        obj.insert(QString("agentVersionDetails"), ::OpenAPI::toJsonValue(m_agent_version_details));
    }
    if (m_data_stores.size() > 0) {
        obj.insert(QString("dataStores"), ::OpenAPI::toJsonValue(m_data_stores));
    }
    if (m_disk_count_isSet) {
        obj.insert(QString("diskCount"), ::OpenAPI::toJsonValue(m_disk_count));
    }
    if (m_health_errors.size() > 0) {
        obj.insert(QString("healthErrors"), ::OpenAPI::toJsonValue(m_health_errors));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_last_heartbeat_isSet) {
        obj.insert(QString("lastHeartbeat"), ::OpenAPI::toJsonValue(m_last_heartbeat));
    }
    if (m_mars_agent_expiry_date_isSet) {
        obj.insert(QString("marsAgentExpiryDate"), ::OpenAPI::toJsonValue(m_mars_agent_expiry_date));
    }
    if (m_mars_agent_version_isSet) {
        obj.insert(QString("marsAgentVersion"), ::OpenAPI::toJsonValue(m_mars_agent_version));
    }
    if (m_mars_agent_version_details.isSet()) {
        obj.insert(QString("marsAgentVersionDetails"), ::OpenAPI::toJsonValue(m_mars_agent_version_details));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_retention_volumes.size() > 0) {
        obj.insert(QString("retentionVolumes"), ::OpenAPI::toJsonValue(m_retention_volumes));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("validationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    if (m_version_status_isSet) {
        obj.insert(QString("versionStatus"), ::OpenAPI::toJsonValue(m_version_status));
    }
    return obj;
}

QDateTime OAIMasterTargetServer::getAgentExpiryDate() const {
    return m_agent_expiry_date;
}
void OAIMasterTargetServer::setAgentExpiryDate(const QDateTime &agent_expiry_date) {
    m_agent_expiry_date = agent_expiry_date;
    m_agent_expiry_date_isSet = true;
}

bool OAIMasterTargetServer::is_agent_expiry_date_Set() const{
    return m_agent_expiry_date_isSet;
}

bool OAIMasterTargetServer::is_agent_expiry_date_Valid() const{
    return m_agent_expiry_date_isValid;
}

QString OAIMasterTargetServer::getAgentVersion() const {
    return m_agent_version;
}
void OAIMasterTargetServer::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIMasterTargetServer::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIMasterTargetServer::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

OAIVersionDetails OAIMasterTargetServer::getAgentVersionDetails() const {
    return m_agent_version_details;
}
void OAIMasterTargetServer::setAgentVersionDetails(const OAIVersionDetails &agent_version_details) {
    m_agent_version_details = agent_version_details;
    m_agent_version_details_isSet = true;
}

bool OAIMasterTargetServer::is_agent_version_details_Set() const{
    return m_agent_version_details_isSet;
}

bool OAIMasterTargetServer::is_agent_version_details_Valid() const{
    return m_agent_version_details_isValid;
}

QList<OAIDataStore> OAIMasterTargetServer::getDataStores() const {
    return m_data_stores;
}
void OAIMasterTargetServer::setDataStores(const QList<OAIDataStore> &data_stores) {
    m_data_stores = data_stores;
    m_data_stores_isSet = true;
}

bool OAIMasterTargetServer::is_data_stores_Set() const{
    return m_data_stores_isSet;
}

bool OAIMasterTargetServer::is_data_stores_Valid() const{
    return m_data_stores_isValid;
}

qint32 OAIMasterTargetServer::getDiskCount() const {
    return m_disk_count;
}
void OAIMasterTargetServer::setDiskCount(const qint32 &disk_count) {
    m_disk_count = disk_count;
    m_disk_count_isSet = true;
}

bool OAIMasterTargetServer::is_disk_count_Set() const{
    return m_disk_count_isSet;
}

bool OAIMasterTargetServer::is_disk_count_Valid() const{
    return m_disk_count_isValid;
}

QList<OAIHealthError> OAIMasterTargetServer::getHealthErrors() const {
    return m_health_errors;
}
void OAIMasterTargetServer::setHealthErrors(const QList<OAIHealthError> &health_errors) {
    m_health_errors = health_errors;
    m_health_errors_isSet = true;
}

bool OAIMasterTargetServer::is_health_errors_Set() const{
    return m_health_errors_isSet;
}

bool OAIMasterTargetServer::is_health_errors_Valid() const{
    return m_health_errors_isValid;
}

QString OAIMasterTargetServer::getId() const {
    return m_id;
}
void OAIMasterTargetServer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMasterTargetServer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMasterTargetServer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMasterTargetServer::getIpAddress() const {
    return m_ip_address;
}
void OAIMasterTargetServer::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIMasterTargetServer::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIMasterTargetServer::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QDateTime OAIMasterTargetServer::getLastHeartbeat() const {
    return m_last_heartbeat;
}
void OAIMasterTargetServer::setLastHeartbeat(const QDateTime &last_heartbeat) {
    m_last_heartbeat = last_heartbeat;
    m_last_heartbeat_isSet = true;
}

bool OAIMasterTargetServer::is_last_heartbeat_Set() const{
    return m_last_heartbeat_isSet;
}

bool OAIMasterTargetServer::is_last_heartbeat_Valid() const{
    return m_last_heartbeat_isValid;
}

QDateTime OAIMasterTargetServer::getMarsAgentExpiryDate() const {
    return m_mars_agent_expiry_date;
}
void OAIMasterTargetServer::setMarsAgentExpiryDate(const QDateTime &mars_agent_expiry_date) {
    m_mars_agent_expiry_date = mars_agent_expiry_date;
    m_mars_agent_expiry_date_isSet = true;
}

bool OAIMasterTargetServer::is_mars_agent_expiry_date_Set() const{
    return m_mars_agent_expiry_date_isSet;
}

bool OAIMasterTargetServer::is_mars_agent_expiry_date_Valid() const{
    return m_mars_agent_expiry_date_isValid;
}

QString OAIMasterTargetServer::getMarsAgentVersion() const {
    return m_mars_agent_version;
}
void OAIMasterTargetServer::setMarsAgentVersion(const QString &mars_agent_version) {
    m_mars_agent_version = mars_agent_version;
    m_mars_agent_version_isSet = true;
}

bool OAIMasterTargetServer::is_mars_agent_version_Set() const{
    return m_mars_agent_version_isSet;
}

bool OAIMasterTargetServer::is_mars_agent_version_Valid() const{
    return m_mars_agent_version_isValid;
}

OAIVersionDetails OAIMasterTargetServer::getMarsAgentVersionDetails() const {
    return m_mars_agent_version_details;
}
void OAIMasterTargetServer::setMarsAgentVersionDetails(const OAIVersionDetails &mars_agent_version_details) {
    m_mars_agent_version_details = mars_agent_version_details;
    m_mars_agent_version_details_isSet = true;
}

bool OAIMasterTargetServer::is_mars_agent_version_details_Set() const{
    return m_mars_agent_version_details_isSet;
}

bool OAIMasterTargetServer::is_mars_agent_version_details_Valid() const{
    return m_mars_agent_version_details_isValid;
}

QString OAIMasterTargetServer::getName() const {
    return m_name;
}
void OAIMasterTargetServer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMasterTargetServer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMasterTargetServer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMasterTargetServer::getOsType() const {
    return m_os_type;
}
void OAIMasterTargetServer::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIMasterTargetServer::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIMasterTargetServer::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIMasterTargetServer::getOsVersion() const {
    return m_os_version;
}
void OAIMasterTargetServer::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIMasterTargetServer::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIMasterTargetServer::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QList<OAIRetentionVolume> OAIMasterTargetServer::getRetentionVolumes() const {
    return m_retention_volumes;
}
void OAIMasterTargetServer::setRetentionVolumes(const QList<OAIRetentionVolume> &retention_volumes) {
    m_retention_volumes = retention_volumes;
    m_retention_volumes_isSet = true;
}

bool OAIMasterTargetServer::is_retention_volumes_Set() const{
    return m_retention_volumes_isSet;
}

bool OAIMasterTargetServer::is_retention_volumes_Valid() const{
    return m_retention_volumes_isValid;
}

QList<OAIHealthError> OAIMasterTargetServer::getValidationErrors() const {
    return m_validation_errors;
}
void OAIMasterTargetServer::setValidationErrors(const QList<OAIHealthError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIMasterTargetServer::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIMasterTargetServer::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

QString OAIMasterTargetServer::getVersionStatus() const {
    return m_version_status;
}
void OAIMasterTargetServer::setVersionStatus(const QString &version_status) {
    m_version_status = version_status;
    m_version_status_isSet = true;
}

bool OAIMasterTargetServer::is_version_status_Set() const{
    return m_version_status_isSet;
}

bool OAIMasterTargetServer::is_version_status_Valid() const{
    return m_version_status_isValid;
}

bool OAIMasterTargetServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_version_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_stores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_heartbeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mars_agent_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mars_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mars_agent_version_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMasterTargetServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
