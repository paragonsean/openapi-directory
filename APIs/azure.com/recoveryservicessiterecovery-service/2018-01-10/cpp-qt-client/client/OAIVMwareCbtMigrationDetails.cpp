/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVMwareCbtMigrationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVMwareCbtMigrationDetails::OAIVMwareCbtMigrationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVMwareCbtMigrationDetails::OAIVMwareCbtMigrationDetails() {
    this->initializeModel();
}

OAIVMwareCbtMigrationDetails::~OAIVMwareCbtMigrationDetails() {}

void OAIVMwareCbtMigrationDetails::initializeModel() {

    m_data_mover_run_as_account_id_isSet = false;
    m_data_mover_run_as_account_id_isValid = false;

    m_initial_seeding_progress_percentage_isSet = false;
    m_initial_seeding_progress_percentage_isValid = false;

    m_last_recovery_point_id_isSet = false;
    m_last_recovery_point_id_isValid = false;

    m_last_recovery_point_received_isSet = false;
    m_last_recovery_point_received_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_migration_progress_percentage_isSet = false;
    m_migration_progress_percentage_isValid = false;

    m_migration_recovery_point_id_isSet = false;
    m_migration_recovery_point_id_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_perform_auto_resync_isSet = false;
    m_perform_auto_resync_isValid = false;

    m_protected_disks_isSet = false;
    m_protected_disks_isValid = false;

    m_resync_progress_percentage_isSet = false;
    m_resync_progress_percentage_isValid = false;

    m_resync_state_isSet = false;
    m_resync_state_isValid = false;

    m_snapshot_run_as_account_id_isSet = false;
    m_snapshot_run_as_account_id_isValid = false;

    m_target_availability_set_id_isSet = false;
    m_target_availability_set_id_isValid = false;

    m_target_boot_diagnostics_storage_account_id_isSet = false;
    m_target_boot_diagnostics_storage_account_id_isValid = false;

    m_target_location_isSet = false;
    m_target_location_isValid = false;

    m_target_network_id_isSet = false;
    m_target_network_id_isValid = false;

    m_target_resource_group_id_isSet = false;
    m_target_resource_group_id_isValid = false;

    m_target_vm_name_isSet = false;
    m_target_vm_name_isValid = false;

    m_target_vm_size_isSet = false;
    m_target_vm_size_isValid = false;

    m_vm_nics_isSet = false;
    m_vm_nics_isValid = false;

    m_vmware_machine_id_isSet = false;
    m_vmware_machine_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIVMwareCbtMigrationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVMwareCbtMigrationDetails::fromJsonObject(QJsonObject json) {

    m_data_mover_run_as_account_id_isValid = ::OpenAPI::fromJsonValue(m_data_mover_run_as_account_id, json[QString("dataMoverRunAsAccountId")]);
    m_data_mover_run_as_account_id_isSet = !json[QString("dataMoverRunAsAccountId")].isNull() && m_data_mover_run_as_account_id_isValid;

    m_initial_seeding_progress_percentage_isValid = ::OpenAPI::fromJsonValue(m_initial_seeding_progress_percentage, json[QString("initialSeedingProgressPercentage")]);
    m_initial_seeding_progress_percentage_isSet = !json[QString("initialSeedingProgressPercentage")].isNull() && m_initial_seeding_progress_percentage_isValid;

    m_last_recovery_point_id_isValid = ::OpenAPI::fromJsonValue(m_last_recovery_point_id, json[QString("lastRecoveryPointId")]);
    m_last_recovery_point_id_isSet = !json[QString("lastRecoveryPointId")].isNull() && m_last_recovery_point_id_isValid;

    m_last_recovery_point_received_isValid = ::OpenAPI::fromJsonValue(m_last_recovery_point_received, json[QString("lastRecoveryPointReceived")]);
    m_last_recovery_point_received_isSet = !json[QString("lastRecoveryPointReceived")].isNull() && m_last_recovery_point_received_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_migration_progress_percentage_isValid = ::OpenAPI::fromJsonValue(m_migration_progress_percentage, json[QString("migrationProgressPercentage")]);
    m_migration_progress_percentage_isSet = !json[QString("migrationProgressPercentage")].isNull() && m_migration_progress_percentage_isValid;

    m_migration_recovery_point_id_isValid = ::OpenAPI::fromJsonValue(m_migration_recovery_point_id, json[QString("migrationRecoveryPointId")]);
    m_migration_recovery_point_id_isSet = !json[QString("migrationRecoveryPointId")].isNull() && m_migration_recovery_point_id_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_perform_auto_resync_isValid = ::OpenAPI::fromJsonValue(m_perform_auto_resync, json[QString("performAutoResync")]);
    m_perform_auto_resync_isSet = !json[QString("performAutoResync")].isNull() && m_perform_auto_resync_isValid;

    m_protected_disks_isValid = ::OpenAPI::fromJsonValue(m_protected_disks, json[QString("protectedDisks")]);
    m_protected_disks_isSet = !json[QString("protectedDisks")].isNull() && m_protected_disks_isValid;

    m_resync_progress_percentage_isValid = ::OpenAPI::fromJsonValue(m_resync_progress_percentage, json[QString("resyncProgressPercentage")]);
    m_resync_progress_percentage_isSet = !json[QString("resyncProgressPercentage")].isNull() && m_resync_progress_percentage_isValid;

    m_resync_state_isValid = ::OpenAPI::fromJsonValue(m_resync_state, json[QString("resyncState")]);
    m_resync_state_isSet = !json[QString("resyncState")].isNull() && m_resync_state_isValid;

    m_snapshot_run_as_account_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_run_as_account_id, json[QString("snapshotRunAsAccountId")]);
    m_snapshot_run_as_account_id_isSet = !json[QString("snapshotRunAsAccountId")].isNull() && m_snapshot_run_as_account_id_isValid;

    m_target_availability_set_id_isValid = ::OpenAPI::fromJsonValue(m_target_availability_set_id, json[QString("targetAvailabilitySetId")]);
    m_target_availability_set_id_isSet = !json[QString("targetAvailabilitySetId")].isNull() && m_target_availability_set_id_isValid;

    m_target_boot_diagnostics_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_target_boot_diagnostics_storage_account_id, json[QString("targetBootDiagnosticsStorageAccountId")]);
    m_target_boot_diagnostics_storage_account_id_isSet = !json[QString("targetBootDiagnosticsStorageAccountId")].isNull() && m_target_boot_diagnostics_storage_account_id_isValid;

    m_target_location_isValid = ::OpenAPI::fromJsonValue(m_target_location, json[QString("targetLocation")]);
    m_target_location_isSet = !json[QString("targetLocation")].isNull() && m_target_location_isValid;

    m_target_network_id_isValid = ::OpenAPI::fromJsonValue(m_target_network_id, json[QString("targetNetworkId")]);
    m_target_network_id_isSet = !json[QString("targetNetworkId")].isNull() && m_target_network_id_isValid;

    m_target_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_target_resource_group_id, json[QString("targetResourceGroupId")]);
    m_target_resource_group_id_isSet = !json[QString("targetResourceGroupId")].isNull() && m_target_resource_group_id_isValid;

    m_target_vm_name_isValid = ::OpenAPI::fromJsonValue(m_target_vm_name, json[QString("targetVmName")]);
    m_target_vm_name_isSet = !json[QString("targetVmName")].isNull() && m_target_vm_name_isValid;

    m_target_vm_size_isValid = ::OpenAPI::fromJsonValue(m_target_vm_size, json[QString("targetVmSize")]);
    m_target_vm_size_isSet = !json[QString("targetVmSize")].isNull() && m_target_vm_size_isValid;

    m_vm_nics_isValid = ::OpenAPI::fromJsonValue(m_vm_nics, json[QString("vmNics")]);
    m_vm_nics_isSet = !json[QString("vmNics")].isNull() && m_vm_nics_isValid;

    m_vmware_machine_id_isValid = ::OpenAPI::fromJsonValue(m_vmware_machine_id, json[QString("vmwareMachineId")]);
    m_vmware_machine_id_isSet = !json[QString("vmwareMachineId")].isNull() && m_vmware_machine_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIVMwareCbtMigrationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVMwareCbtMigrationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_data_mover_run_as_account_id_isSet) {
        obj.insert(QString("dataMoverRunAsAccountId"), ::OpenAPI::toJsonValue(m_data_mover_run_as_account_id));
    }
    if (m_initial_seeding_progress_percentage_isSet) {
        obj.insert(QString("initialSeedingProgressPercentage"), ::OpenAPI::toJsonValue(m_initial_seeding_progress_percentage));
    }
    if (m_last_recovery_point_id_isSet) {
        obj.insert(QString("lastRecoveryPointId"), ::OpenAPI::toJsonValue(m_last_recovery_point_id));
    }
    if (m_last_recovery_point_received_isSet) {
        obj.insert(QString("lastRecoveryPointReceived"), ::OpenAPI::toJsonValue(m_last_recovery_point_received));
    }
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_migration_progress_percentage_isSet) {
        obj.insert(QString("migrationProgressPercentage"), ::OpenAPI::toJsonValue(m_migration_progress_percentage));
    }
    if (m_migration_recovery_point_id_isSet) {
        obj.insert(QString("migrationRecoveryPointId"), ::OpenAPI::toJsonValue(m_migration_recovery_point_id));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_perform_auto_resync_isSet) {
        obj.insert(QString("performAutoResync"), ::OpenAPI::toJsonValue(m_perform_auto_resync));
    }
    if (m_protected_disks.size() > 0) {
        obj.insert(QString("protectedDisks"), ::OpenAPI::toJsonValue(m_protected_disks));
    }
    if (m_resync_progress_percentage_isSet) {
        obj.insert(QString("resyncProgressPercentage"), ::OpenAPI::toJsonValue(m_resync_progress_percentage));
    }
    if (m_resync_state_isSet) {
        obj.insert(QString("resyncState"), ::OpenAPI::toJsonValue(m_resync_state));
    }
    if (m_snapshot_run_as_account_id_isSet) {
        obj.insert(QString("snapshotRunAsAccountId"), ::OpenAPI::toJsonValue(m_snapshot_run_as_account_id));
    }
    if (m_target_availability_set_id_isSet) {
        obj.insert(QString("targetAvailabilitySetId"), ::OpenAPI::toJsonValue(m_target_availability_set_id));
    }
    if (m_target_boot_diagnostics_storage_account_id_isSet) {
        obj.insert(QString("targetBootDiagnosticsStorageAccountId"), ::OpenAPI::toJsonValue(m_target_boot_diagnostics_storage_account_id));
    }
    if (m_target_location_isSet) {
        obj.insert(QString("targetLocation"), ::OpenAPI::toJsonValue(m_target_location));
    }
    if (m_target_network_id_isSet) {
        obj.insert(QString("targetNetworkId"), ::OpenAPI::toJsonValue(m_target_network_id));
    }
    if (m_target_resource_group_id_isSet) {
        obj.insert(QString("targetResourceGroupId"), ::OpenAPI::toJsonValue(m_target_resource_group_id));
    }
    if (m_target_vm_name_isSet) {
        obj.insert(QString("targetVmName"), ::OpenAPI::toJsonValue(m_target_vm_name));
    }
    if (m_target_vm_size_isSet) {
        obj.insert(QString("targetVmSize"), ::OpenAPI::toJsonValue(m_target_vm_size));
    }
    if (m_vm_nics.size() > 0) {
        obj.insert(QString("vmNics"), ::OpenAPI::toJsonValue(m_vm_nics));
    }
    if (m_vmware_machine_id_isSet) {
        obj.insert(QString("vmwareMachineId"), ::OpenAPI::toJsonValue(m_vmware_machine_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIVMwareCbtMigrationDetails::getDataMoverRunAsAccountId() const {
    return m_data_mover_run_as_account_id;
}
void OAIVMwareCbtMigrationDetails::setDataMoverRunAsAccountId(const QString &data_mover_run_as_account_id) {
    m_data_mover_run_as_account_id = data_mover_run_as_account_id;
    m_data_mover_run_as_account_id_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_data_mover_run_as_account_id_Set() const{
    return m_data_mover_run_as_account_id_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_data_mover_run_as_account_id_Valid() const{
    return m_data_mover_run_as_account_id_isValid;
}

qint32 OAIVMwareCbtMigrationDetails::getInitialSeedingProgressPercentage() const {
    return m_initial_seeding_progress_percentage;
}
void OAIVMwareCbtMigrationDetails::setInitialSeedingProgressPercentage(const qint32 &initial_seeding_progress_percentage) {
    m_initial_seeding_progress_percentage = initial_seeding_progress_percentage;
    m_initial_seeding_progress_percentage_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_initial_seeding_progress_percentage_Set() const{
    return m_initial_seeding_progress_percentage_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_initial_seeding_progress_percentage_Valid() const{
    return m_initial_seeding_progress_percentage_isValid;
}

QString OAIVMwareCbtMigrationDetails::getLastRecoveryPointId() const {
    return m_last_recovery_point_id;
}
void OAIVMwareCbtMigrationDetails::setLastRecoveryPointId(const QString &last_recovery_point_id) {
    m_last_recovery_point_id = last_recovery_point_id;
    m_last_recovery_point_id_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_last_recovery_point_id_Set() const{
    return m_last_recovery_point_id_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_last_recovery_point_id_Valid() const{
    return m_last_recovery_point_id_isValid;
}

QDateTime OAIVMwareCbtMigrationDetails::getLastRecoveryPointReceived() const {
    return m_last_recovery_point_received;
}
void OAIVMwareCbtMigrationDetails::setLastRecoveryPointReceived(const QDateTime &last_recovery_point_received) {
    m_last_recovery_point_received = last_recovery_point_received;
    m_last_recovery_point_received_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_last_recovery_point_received_Set() const{
    return m_last_recovery_point_received_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_last_recovery_point_received_Valid() const{
    return m_last_recovery_point_received_isValid;
}

QString OAIVMwareCbtMigrationDetails::getLicenseType() const {
    return m_license_type;
}
void OAIVMwareCbtMigrationDetails::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_license_type_Valid() const{
    return m_license_type_isValid;
}

qint32 OAIVMwareCbtMigrationDetails::getMigrationProgressPercentage() const {
    return m_migration_progress_percentage;
}
void OAIVMwareCbtMigrationDetails::setMigrationProgressPercentage(const qint32 &migration_progress_percentage) {
    m_migration_progress_percentage = migration_progress_percentage;
    m_migration_progress_percentage_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_migration_progress_percentage_Set() const{
    return m_migration_progress_percentage_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_migration_progress_percentage_Valid() const{
    return m_migration_progress_percentage_isValid;
}

QString OAIVMwareCbtMigrationDetails::getMigrationRecoveryPointId() const {
    return m_migration_recovery_point_id;
}
void OAIVMwareCbtMigrationDetails::setMigrationRecoveryPointId(const QString &migration_recovery_point_id) {
    m_migration_recovery_point_id = migration_recovery_point_id;
    m_migration_recovery_point_id_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_migration_recovery_point_id_Set() const{
    return m_migration_recovery_point_id_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_migration_recovery_point_id_Valid() const{
    return m_migration_recovery_point_id_isValid;
}

QString OAIVMwareCbtMigrationDetails::getOsType() const {
    return m_os_type;
}
void OAIVMwareCbtMigrationDetails::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIVMwareCbtMigrationDetails::getPerformAutoResync() const {
    return m_perform_auto_resync;
}
void OAIVMwareCbtMigrationDetails::setPerformAutoResync(const QString &perform_auto_resync) {
    m_perform_auto_resync = perform_auto_resync;
    m_perform_auto_resync_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_perform_auto_resync_Set() const{
    return m_perform_auto_resync_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_perform_auto_resync_Valid() const{
    return m_perform_auto_resync_isValid;
}

QList<OAIVMwareCbtProtectedDiskDetails> OAIVMwareCbtMigrationDetails::getProtectedDisks() const {
    return m_protected_disks;
}
void OAIVMwareCbtMigrationDetails::setProtectedDisks(const QList<OAIVMwareCbtProtectedDiskDetails> &protected_disks) {
    m_protected_disks = protected_disks;
    m_protected_disks_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_protected_disks_Set() const{
    return m_protected_disks_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_protected_disks_Valid() const{
    return m_protected_disks_isValid;
}

qint32 OAIVMwareCbtMigrationDetails::getResyncProgressPercentage() const {
    return m_resync_progress_percentage;
}
void OAIVMwareCbtMigrationDetails::setResyncProgressPercentage(const qint32 &resync_progress_percentage) {
    m_resync_progress_percentage = resync_progress_percentage;
    m_resync_progress_percentage_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_resync_progress_percentage_Set() const{
    return m_resync_progress_percentage_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_resync_progress_percentage_Valid() const{
    return m_resync_progress_percentage_isValid;
}

QString OAIVMwareCbtMigrationDetails::getResyncState() const {
    return m_resync_state;
}
void OAIVMwareCbtMigrationDetails::setResyncState(const QString &resync_state) {
    m_resync_state = resync_state;
    m_resync_state_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_resync_state_Set() const{
    return m_resync_state_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_resync_state_Valid() const{
    return m_resync_state_isValid;
}

QString OAIVMwareCbtMigrationDetails::getSnapshotRunAsAccountId() const {
    return m_snapshot_run_as_account_id;
}
void OAIVMwareCbtMigrationDetails::setSnapshotRunAsAccountId(const QString &snapshot_run_as_account_id) {
    m_snapshot_run_as_account_id = snapshot_run_as_account_id;
    m_snapshot_run_as_account_id_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_snapshot_run_as_account_id_Set() const{
    return m_snapshot_run_as_account_id_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_snapshot_run_as_account_id_Valid() const{
    return m_snapshot_run_as_account_id_isValid;
}

QString OAIVMwareCbtMigrationDetails::getTargetAvailabilitySetId() const {
    return m_target_availability_set_id;
}
void OAIVMwareCbtMigrationDetails::setTargetAvailabilitySetId(const QString &target_availability_set_id) {
    m_target_availability_set_id = target_availability_set_id;
    m_target_availability_set_id_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_target_availability_set_id_Set() const{
    return m_target_availability_set_id_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_target_availability_set_id_Valid() const{
    return m_target_availability_set_id_isValid;
}

QString OAIVMwareCbtMigrationDetails::getTargetBootDiagnosticsStorageAccountId() const {
    return m_target_boot_diagnostics_storage_account_id;
}
void OAIVMwareCbtMigrationDetails::setTargetBootDiagnosticsStorageAccountId(const QString &target_boot_diagnostics_storage_account_id) {
    m_target_boot_diagnostics_storage_account_id = target_boot_diagnostics_storage_account_id;
    m_target_boot_diagnostics_storage_account_id_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_target_boot_diagnostics_storage_account_id_Set() const{
    return m_target_boot_diagnostics_storage_account_id_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_target_boot_diagnostics_storage_account_id_Valid() const{
    return m_target_boot_diagnostics_storage_account_id_isValid;
}

QString OAIVMwareCbtMigrationDetails::getTargetLocation() const {
    return m_target_location;
}
void OAIVMwareCbtMigrationDetails::setTargetLocation(const QString &target_location) {
    m_target_location = target_location;
    m_target_location_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_target_location_Set() const{
    return m_target_location_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_target_location_Valid() const{
    return m_target_location_isValid;
}

QString OAIVMwareCbtMigrationDetails::getTargetNetworkId() const {
    return m_target_network_id;
}
void OAIVMwareCbtMigrationDetails::setTargetNetworkId(const QString &target_network_id) {
    m_target_network_id = target_network_id;
    m_target_network_id_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_target_network_id_Set() const{
    return m_target_network_id_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_target_network_id_Valid() const{
    return m_target_network_id_isValid;
}

QString OAIVMwareCbtMigrationDetails::getTargetResourceGroupId() const {
    return m_target_resource_group_id;
}
void OAIVMwareCbtMigrationDetails::setTargetResourceGroupId(const QString &target_resource_group_id) {
    m_target_resource_group_id = target_resource_group_id;
    m_target_resource_group_id_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_target_resource_group_id_Set() const{
    return m_target_resource_group_id_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_target_resource_group_id_Valid() const{
    return m_target_resource_group_id_isValid;
}

QString OAIVMwareCbtMigrationDetails::getTargetVmName() const {
    return m_target_vm_name;
}
void OAIVMwareCbtMigrationDetails::setTargetVmName(const QString &target_vm_name) {
    m_target_vm_name = target_vm_name;
    m_target_vm_name_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_target_vm_name_Set() const{
    return m_target_vm_name_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_target_vm_name_Valid() const{
    return m_target_vm_name_isValid;
}

QString OAIVMwareCbtMigrationDetails::getTargetVmSize() const {
    return m_target_vm_size;
}
void OAIVMwareCbtMigrationDetails::setTargetVmSize(const QString &target_vm_size) {
    m_target_vm_size = target_vm_size;
    m_target_vm_size_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_target_vm_size_Set() const{
    return m_target_vm_size_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_target_vm_size_Valid() const{
    return m_target_vm_size_isValid;
}

QList<OAIVMwareCbtNicDetails> OAIVMwareCbtMigrationDetails::getVmNics() const {
    return m_vm_nics;
}
void OAIVMwareCbtMigrationDetails::setVmNics(const QList<OAIVMwareCbtNicDetails> &vm_nics) {
    m_vm_nics = vm_nics;
    m_vm_nics_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_vm_nics_Set() const{
    return m_vm_nics_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_vm_nics_Valid() const{
    return m_vm_nics_isValid;
}

QString OAIVMwareCbtMigrationDetails::getVmwareMachineId() const {
    return m_vmware_machine_id;
}
void OAIVMwareCbtMigrationDetails::setVmwareMachineId(const QString &vmware_machine_id) {
    m_vmware_machine_id = vmware_machine_id;
    m_vmware_machine_id_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_vmware_machine_id_Set() const{
    return m_vmware_machine_id_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_vmware_machine_id_Valid() const{
    return m_vmware_machine_id_isValid;
}

QString OAIVMwareCbtMigrationDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIVMwareCbtMigrationDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIVMwareCbtMigrationDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIVMwareCbtMigrationDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIVMwareCbtMigrationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_mover_run_as_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_seeding_progress_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_recovery_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_recovery_point_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_progress_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_recovery_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perform_auto_resync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resync_progress_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resync_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_run_as_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_availability_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_boot_diagnostics_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_nics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVMwareCbtMigrationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
