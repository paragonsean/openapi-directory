/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetentionVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetentionVolume::OAIRetentionVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetentionVolume::OAIRetentionVolume() {
    this->initializeModel();
}

OAIRetentionVolume::~OAIRetentionVolume() {}

void OAIRetentionVolume::initializeModel() {

    m_capacity_in_bytes_isSet = false;
    m_capacity_in_bytes_isValid = false;

    m_free_space_in_bytes_isSet = false;
    m_free_space_in_bytes_isValid = false;

    m_threshold_percentage_isSet = false;
    m_threshold_percentage_isValid = false;

    m_volume_name_isSet = false;
    m_volume_name_isValid = false;
}

void OAIRetentionVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetentionVolume::fromJsonObject(QJsonObject json) {

    m_capacity_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_capacity_in_bytes, json[QString("capacityInBytes")]);
    m_capacity_in_bytes_isSet = !json[QString("capacityInBytes")].isNull() && m_capacity_in_bytes_isValid;

    m_free_space_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_free_space_in_bytes, json[QString("freeSpaceInBytes")]);
    m_free_space_in_bytes_isSet = !json[QString("freeSpaceInBytes")].isNull() && m_free_space_in_bytes_isValid;

    m_threshold_percentage_isValid = ::OpenAPI::fromJsonValue(m_threshold_percentage, json[QString("thresholdPercentage")]);
    m_threshold_percentage_isSet = !json[QString("thresholdPercentage")].isNull() && m_threshold_percentage_isValid;

    m_volume_name_isValid = ::OpenAPI::fromJsonValue(m_volume_name, json[QString("volumeName")]);
    m_volume_name_isSet = !json[QString("volumeName")].isNull() && m_volume_name_isValid;
}

QString OAIRetentionVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetentionVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_in_bytes_isSet) {
        obj.insert(QString("capacityInBytes"), ::OpenAPI::toJsonValue(m_capacity_in_bytes));
    }
    if (m_free_space_in_bytes_isSet) {
        obj.insert(QString("freeSpaceInBytes"), ::OpenAPI::toJsonValue(m_free_space_in_bytes));
    }
    if (m_threshold_percentage_isSet) {
        obj.insert(QString("thresholdPercentage"), ::OpenAPI::toJsonValue(m_threshold_percentage));
    }
    if (m_volume_name_isSet) {
        obj.insert(QString("volumeName"), ::OpenAPI::toJsonValue(m_volume_name));
    }
    return obj;
}

qint64 OAIRetentionVolume::getCapacityInBytes() const {
    return m_capacity_in_bytes;
}
void OAIRetentionVolume::setCapacityInBytes(const qint64 &capacity_in_bytes) {
    m_capacity_in_bytes = capacity_in_bytes;
    m_capacity_in_bytes_isSet = true;
}

bool OAIRetentionVolume::is_capacity_in_bytes_Set() const{
    return m_capacity_in_bytes_isSet;
}

bool OAIRetentionVolume::is_capacity_in_bytes_Valid() const{
    return m_capacity_in_bytes_isValid;
}

qint64 OAIRetentionVolume::getFreeSpaceInBytes() const {
    return m_free_space_in_bytes;
}
void OAIRetentionVolume::setFreeSpaceInBytes(const qint64 &free_space_in_bytes) {
    m_free_space_in_bytes = free_space_in_bytes;
    m_free_space_in_bytes_isSet = true;
}

bool OAIRetentionVolume::is_free_space_in_bytes_Set() const{
    return m_free_space_in_bytes_isSet;
}

bool OAIRetentionVolume::is_free_space_in_bytes_Valid() const{
    return m_free_space_in_bytes_isValid;
}

qint32 OAIRetentionVolume::getThresholdPercentage() const {
    return m_threshold_percentage;
}
void OAIRetentionVolume::setThresholdPercentage(const qint32 &threshold_percentage) {
    m_threshold_percentage = threshold_percentage;
    m_threshold_percentage_isSet = true;
}

bool OAIRetentionVolume::is_threshold_percentage_Set() const{
    return m_threshold_percentage_isSet;
}

bool OAIRetentionVolume::is_threshold_percentage_Valid() const{
    return m_threshold_percentage_isValid;
}

QString OAIRetentionVolume::getVolumeName() const {
    return m_volume_name;
}
void OAIRetentionVolume::setVolumeName(const QString &volume_name) {
    m_volume_name = volume_name;
    m_volume_name_isSet = true;
}

bool OAIRetentionVolume::is_volume_name_Set() const{
    return m_volume_name_isSet;
}

bool OAIRetentionVolume::is_volume_name_Valid() const{
    return m_volume_name_isValid;
}

bool OAIRetentionVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_space_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetentionVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
