/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMakeup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMakeup::OAIMakeup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMakeup::OAIMakeup() {
    this->initializeModel();
}

OAIMakeup::~OAIMakeup() {}

void OAIMakeup::initializeModel() {

    m_eye_makeup_isSet = false;
    m_eye_makeup_isValid = false;

    m_lip_makeup_isSet = false;
    m_lip_makeup_isValid = false;
}

void OAIMakeup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMakeup::fromJsonObject(QJsonObject json) {

    m_eye_makeup_isValid = ::OpenAPI::fromJsonValue(m_eye_makeup, json[QString("eyeMakeup")]);
    m_eye_makeup_isSet = !json[QString("eyeMakeup")].isNull() && m_eye_makeup_isValid;

    m_lip_makeup_isValid = ::OpenAPI::fromJsonValue(m_lip_makeup, json[QString("lipMakeup")]);
    m_lip_makeup_isSet = !json[QString("lipMakeup")].isNull() && m_lip_makeup_isValid;
}

QString OAIMakeup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMakeup::asJsonObject() const {
    QJsonObject obj;
    if (m_eye_makeup_isSet) {
        obj.insert(QString("eyeMakeup"), ::OpenAPI::toJsonValue(m_eye_makeup));
    }
    if (m_lip_makeup_isSet) {
        obj.insert(QString("lipMakeup"), ::OpenAPI::toJsonValue(m_lip_makeup));
    }
    return obj;
}

bool OAIMakeup::isEyeMakeup() const {
    return m_eye_makeup;
}
void OAIMakeup::setEyeMakeup(const bool &eye_makeup) {
    m_eye_makeup = eye_makeup;
    m_eye_makeup_isSet = true;
}

bool OAIMakeup::is_eye_makeup_Set() const{
    return m_eye_makeup_isSet;
}

bool OAIMakeup::is_eye_makeup_Valid() const{
    return m_eye_makeup_isValid;
}

bool OAIMakeup::isLipMakeup() const {
    return m_lip_makeup;
}
void OAIMakeup::setLipMakeup(const bool &lip_makeup) {
    m_lip_makeup = lip_makeup;
    m_lip_makeup_isSet = true;
}

bool OAIMakeup::is_lip_makeup_Set() const{
    return m_lip_makeup_isSet;
}

bool OAIMakeup::is_lip_makeup_Valid() const{
    return m_lip_makeup_isValid;
}

bool OAIMakeup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eye_makeup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lip_makeup_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMakeup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
