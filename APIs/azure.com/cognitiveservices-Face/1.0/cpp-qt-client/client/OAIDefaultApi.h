/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIApplySnapshotRequest.h"
#include "OAIDetectedFace.h"
#include "OAIFaceList.h"
#include "OAIFace_DetectWithUrl_request.h"
#include "OAIFindSimilarRequest.h"
#include "OAIGroupRequest.h"
#include "OAIGroupResult.h"
#include "OAIIdentifyRequest.h"
#include "OAIIdentifyResult.h"
#include "OAILargeFaceList.h"
#include "OAILargePersonGroup.h"
#include "OAIMetaDataContract.h"
#include "OAINameAndUserDataContract.h"
#include "OAIOperationStatus.h"
#include "OAIPersistedFace.h"
#include "OAIPerson.h"
#include "OAIPersonGroup.h"
#include "OAISimilarFace.h"
#include "OAISnapshot.h"
#include "OAITakeSnapshotRequest.h"
#include "OAITrainingStatus.h"
#include "OAIUpdateFaceRequest.h"
#include "OAIUpdateSnapshotRequest.h"
#include "OAIVerifyFaceToFaceRequest.h"
#include "OAIVerifyResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  image_url OAIFace_DetectWithUrl_request [required]
    * @param[in]  return_face_id bool [optional]
    * @param[in]  return_face_landmarks bool [optional]
    * @param[in]  return_face_attributes QList<QString> [optional]
    * @param[in]  recognition_model QString [optional]
    * @param[in]  return_recognition_model bool [optional]
    * @param[in]  detection_model QString [optional]
    */
    virtual void faceDetectWithUrl(const OAIFace_DetectWithUrl_request &image_url, const ::OpenAPI::OptionalParam<bool> &return_face_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &return_face_landmarks = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &return_face_attributes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &recognition_model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_recognition_model = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &detection_model = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIFindSimilarRequest [required]
    */
    virtual void faceFindSimilar(const OAIFindSimilarRequest &body);

    /**
    * @param[in]  body OAIGroupRequest [required]
    */
    virtual void faceGroup(const OAIGroupRequest &body);

    /**
    * @param[in]  body OAIIdentifyRequest [required]
    */
    virtual void faceIdentify(const OAIIdentifyRequest &body);

    /**
    * @param[in]  face_list_id QString [required]
    * @param[in]  image_url OAIFace_DetectWithUrl_request [required]
    * @param[in]  user_data QString [optional]
    * @param[in]  target_face QList<qint32> [optional]
    * @param[in]  detection_model QString [optional]
    */
    virtual void faceListAddFaceFromUrl(const QString &face_list_id, const OAIFace_DetectWithUrl_request &image_url, const ::OpenAPI::OptionalParam<QString> &user_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &target_face = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &detection_model = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  face_list_id QString [required]
    * @param[in]  body OAIMetaDataContract [required]
    */
    virtual void faceListCreate(const QString &face_list_id, const OAIMetaDataContract &body);

    /**
    * @param[in]  face_list_id QString [required]
    */
    virtual void faceListDelete(const QString &face_list_id);

    /**
    * @param[in]  face_list_id QString [required]
    * @param[in]  persisted_face_id QString [required]
    */
    virtual void faceListDeleteFace(const QString &face_list_id, const QString &persisted_face_id);

    /**
    * @param[in]  face_list_id QString [required]
    * @param[in]  return_recognition_model bool [optional]
    */
    virtual void faceListGet(const QString &face_list_id, const ::OpenAPI::OptionalParam<bool> &return_recognition_model = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  return_recognition_model bool [optional]
    */
    virtual void faceListList(const ::OpenAPI::OptionalParam<bool> &return_recognition_model = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  face_list_id QString [required]
    * @param[in]  body OAINameAndUserDataContract [required]
    */
    virtual void faceListUpdate(const QString &face_list_id, const OAINameAndUserDataContract &body);

    /**
    * @param[in]  body OAIVerifyFaceToFaceRequest [required]
    */
    virtual void faceVerifyFaceToFace(const OAIVerifyFaceToFaceRequest &body);

    /**
    * @param[in]  large_face_list_id QString [required]
    * @param[in]  image_url OAIFace_DetectWithUrl_request [required]
    * @param[in]  user_data QString [optional]
    * @param[in]  target_face QList<qint32> [optional]
    * @param[in]  detection_model QString [optional]
    */
    virtual void largeFaceListAddFaceFromUrl(const QString &large_face_list_id, const OAIFace_DetectWithUrl_request &image_url, const ::OpenAPI::OptionalParam<QString> &user_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &target_face = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &detection_model = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  large_face_list_id QString [required]
    * @param[in]  body OAIMetaDataContract [required]
    */
    virtual void largeFaceListCreate(const QString &large_face_list_id, const OAIMetaDataContract &body);

    /**
    * @param[in]  large_face_list_id QString [required]
    */
    virtual void largeFaceListDelete(const QString &large_face_list_id);

    /**
    * @param[in]  large_face_list_id QString [required]
    * @param[in]  persisted_face_id QString [required]
    */
    virtual void largeFaceListDeleteFace(const QString &large_face_list_id, const QString &persisted_face_id);

    /**
    * @param[in]  large_face_list_id QString [required]
    * @param[in]  return_recognition_model bool [optional]
    */
    virtual void largeFaceListGet(const QString &large_face_list_id, const ::OpenAPI::OptionalParam<bool> &return_recognition_model = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  large_face_list_id QString [required]
    * @param[in]  persisted_face_id QString [required]
    */
    virtual void largeFaceListGetFace(const QString &large_face_list_id, const QString &persisted_face_id);

    /**
    * @param[in]  large_face_list_id QString [required]
    */
    virtual void largeFaceListGetTrainingStatus(const QString &large_face_list_id);

    /**
    * @param[in]  return_recognition_model bool [optional]
    */
    virtual void largeFaceListList(const ::OpenAPI::OptionalParam<bool> &return_recognition_model = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  large_face_list_id QString [required]
    * @param[in]  start QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void largeFaceListListFaces(const QString &large_face_list_id, const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  large_face_list_id QString [required]
    */
    virtual void largeFaceListTrain(const QString &large_face_list_id);

    /**
    * @param[in]  large_face_list_id QString [required]
    * @param[in]  body OAINameAndUserDataContract [required]
    */
    virtual void largeFaceListUpdate(const QString &large_face_list_id, const OAINameAndUserDataContract &body);

    /**
    * @param[in]  large_face_list_id QString [required]
    * @param[in]  persisted_face_id QString [required]
    * @param[in]  body OAIUpdateFaceRequest [required]
    */
    virtual void largeFaceListUpdateFace(const QString &large_face_list_id, const QString &persisted_face_id, const OAIUpdateFaceRequest &body);

    /**
    * @param[in]  large_person_group_id QString [required]
    * @param[in]  body OAIMetaDataContract [required]
    */
    virtual void largePersonGroupCreate(const QString &large_person_group_id, const OAIMetaDataContract &body);

    /**
    * @param[in]  large_person_group_id QString [required]
    */
    virtual void largePersonGroupDelete(const QString &large_person_group_id);

    /**
    * @param[in]  large_person_group_id QString [required]
    * @param[in]  return_recognition_model bool [optional]
    */
    virtual void largePersonGroupGet(const QString &large_person_group_id, const ::OpenAPI::OptionalParam<bool> &return_recognition_model = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  large_person_group_id QString [required]
    */
    virtual void largePersonGroupGetTrainingStatus(const QString &large_person_group_id);

    /**
    * @param[in]  start QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  return_recognition_model bool [optional]
    */
    virtual void largePersonGroupList(const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &return_recognition_model = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  large_person_group_id QString [required]
    * @param[in]  person_id QString [required]
    * @param[in]  image_url OAIFace_DetectWithUrl_request [required]
    * @param[in]  user_data QString [optional]
    * @param[in]  target_face QList<qint32> [optional]
    * @param[in]  detection_model QString [optional]
    */
    virtual void largePersonGroupPersonAddFaceFromUrl(const QString &large_person_group_id, const QString &person_id, const OAIFace_DetectWithUrl_request &image_url, const ::OpenAPI::OptionalParam<QString> &user_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &target_face = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &detection_model = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  large_person_group_id QString [required]
    * @param[in]  body OAINameAndUserDataContract [required]
    */
    virtual void largePersonGroupPersonCreate(const QString &large_person_group_id, const OAINameAndUserDataContract &body);

    /**
    * @param[in]  large_person_group_id QString [required]
    * @param[in]  person_id QString [required]
    */
    virtual void largePersonGroupPersonDelete(const QString &large_person_group_id, const QString &person_id);

    /**
    * @param[in]  large_person_group_id QString [required]
    * @param[in]  person_id QString [required]
    * @param[in]  persisted_face_id QString [required]
    */
    virtual void largePersonGroupPersonDeleteFace(const QString &large_person_group_id, const QString &person_id, const QString &persisted_face_id);

    /**
    * @param[in]  large_person_group_id QString [required]
    * @param[in]  person_id QString [required]
    */
    virtual void largePersonGroupPersonGet(const QString &large_person_group_id, const QString &person_id);

    /**
    * @param[in]  large_person_group_id QString [required]
    * @param[in]  person_id QString [required]
    * @param[in]  persisted_face_id QString [required]
    */
    virtual void largePersonGroupPersonGetFace(const QString &large_person_group_id, const QString &person_id, const QString &persisted_face_id);

    /**
    * @param[in]  large_person_group_id QString [required]
    * @param[in]  start QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void largePersonGroupPersonList(const QString &large_person_group_id, const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  large_person_group_id QString [required]
    * @param[in]  person_id QString [required]
    * @param[in]  body OAINameAndUserDataContract [required]
    */
    virtual void largePersonGroupPersonUpdate(const QString &large_person_group_id, const QString &person_id, const OAINameAndUserDataContract &body);

    /**
    * @param[in]  large_person_group_id QString [required]
    * @param[in]  person_id QString [required]
    * @param[in]  persisted_face_id QString [required]
    * @param[in]  body OAIUpdateFaceRequest [required]
    */
    virtual void largePersonGroupPersonUpdateFace(const QString &large_person_group_id, const QString &person_id, const QString &persisted_face_id, const OAIUpdateFaceRequest &body);

    /**
    * @param[in]  large_person_group_id QString [required]
    */
    virtual void largePersonGroupTrain(const QString &large_person_group_id);

    /**
    * @param[in]  large_person_group_id QString [required]
    * @param[in]  body OAINameAndUserDataContract [required]
    */
    virtual void largePersonGroupUpdate(const QString &large_person_group_id, const OAINameAndUserDataContract &body);

    /**
    * @param[in]  person_group_id QString [required]
    * @param[in]  body OAIMetaDataContract [required]
    */
    virtual void personGroupCreate(const QString &person_group_id, const OAIMetaDataContract &body);

    /**
    * @param[in]  person_group_id QString [required]
    */
    virtual void personGroupDelete(const QString &person_group_id);

    /**
    * @param[in]  person_group_id QString [required]
    * @param[in]  return_recognition_model bool [optional]
    */
    virtual void personGroupGet(const QString &person_group_id, const ::OpenAPI::OptionalParam<bool> &return_recognition_model = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  person_group_id QString [required]
    */
    virtual void personGroupGetTrainingStatus(const QString &person_group_id);

    /**
    * @param[in]  start QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  return_recognition_model bool [optional]
    */
    virtual void personGroupList(const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &return_recognition_model = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  person_group_id QString [required]
    * @param[in]  person_id QString [required]
    * @param[in]  image_url OAIFace_DetectWithUrl_request [required]
    * @param[in]  user_data QString [optional]
    * @param[in]  target_face QList<qint32> [optional]
    * @param[in]  detection_model QString [optional]
    */
    virtual void personGroupPersonAddFaceFromUrl(const QString &person_group_id, const QString &person_id, const OAIFace_DetectWithUrl_request &image_url, const ::OpenAPI::OptionalParam<QString> &user_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &target_face = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &detection_model = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  person_group_id QString [required]
    * @param[in]  body OAINameAndUserDataContract [required]
    */
    virtual void personGroupPersonCreate(const QString &person_group_id, const OAINameAndUserDataContract &body);

    /**
    * @param[in]  person_group_id QString [required]
    * @param[in]  person_id QString [required]
    */
    virtual void personGroupPersonDelete(const QString &person_group_id, const QString &person_id);

    /**
    * @param[in]  person_group_id QString [required]
    * @param[in]  person_id QString [required]
    * @param[in]  persisted_face_id QString [required]
    */
    virtual void personGroupPersonDeleteFace(const QString &person_group_id, const QString &person_id, const QString &persisted_face_id);

    /**
    * @param[in]  person_group_id QString [required]
    * @param[in]  person_id QString [required]
    */
    virtual void personGroupPersonGet(const QString &person_group_id, const QString &person_id);

    /**
    * @param[in]  person_group_id QString [required]
    * @param[in]  person_id QString [required]
    * @param[in]  persisted_face_id QString [required]
    */
    virtual void personGroupPersonGetFace(const QString &person_group_id, const QString &person_id, const QString &persisted_face_id);

    /**
    * @param[in]  person_group_id QString [required]
    * @param[in]  start QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void personGroupPersonList(const QString &person_group_id, const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  person_group_id QString [required]
    * @param[in]  person_id QString [required]
    * @param[in]  body OAINameAndUserDataContract [required]
    */
    virtual void personGroupPersonUpdate(const QString &person_group_id, const QString &person_id, const OAINameAndUserDataContract &body);

    /**
    * @param[in]  person_group_id QString [required]
    * @param[in]  person_id QString [required]
    * @param[in]  persisted_face_id QString [required]
    * @param[in]  body OAIUpdateFaceRequest [required]
    */
    virtual void personGroupPersonUpdateFace(const QString &person_group_id, const QString &person_id, const QString &persisted_face_id, const OAIUpdateFaceRequest &body);

    /**
    * @param[in]  person_group_id QString [required]
    */
    virtual void personGroupTrain(const QString &person_group_id);

    /**
    * @param[in]  person_group_id QString [required]
    * @param[in]  body OAINameAndUserDataContract [required]
    */
    virtual void personGroupUpdate(const QString &person_group_id, const OAINameAndUserDataContract &body);

    /**
    * @param[in]  snapshot_id QString [required]
    * @param[in]  body OAIApplySnapshotRequest [required]
    */
    virtual void snapshotApply(const QString &snapshot_id, const OAIApplySnapshotRequest &body);

    /**
    * @param[in]  snapshot_id QString [required]
    */
    virtual void snapshotDelete(const QString &snapshot_id);

    /**
    * @param[in]  snapshot_id QString [required]
    */
    virtual void snapshotGet(const QString &snapshot_id);

    /**
    * @param[in]  operation_id QString [required]
    */
    virtual void snapshotGetOperationStatus(const QString &operation_id);

    /**
    * @param[in]  type QString [optional]
    * @param[in]  apply_scope QList<QString> [optional]
    */
    virtual void snapshotList(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &apply_scope = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  body OAITakeSnapshotRequest [required]
    */
    virtual void snapshotTake(const OAITakeSnapshotRequest &body);

    /**
    * @param[in]  snapshot_id QString [required]
    * @param[in]  body OAIUpdateSnapshotRequest [required]
    */
    virtual void snapshotUpdate(const QString &snapshot_id, const OAIUpdateSnapshotRequest &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void faceDetectWithUrlCallback(OAIHttpRequestWorker *worker);
    void faceFindSimilarCallback(OAIHttpRequestWorker *worker);
    void faceGroupCallback(OAIHttpRequestWorker *worker);
    void faceIdentifyCallback(OAIHttpRequestWorker *worker);
    void faceListAddFaceFromUrlCallback(OAIHttpRequestWorker *worker);
    void faceListCreateCallback(OAIHttpRequestWorker *worker);
    void faceListDeleteCallback(OAIHttpRequestWorker *worker);
    void faceListDeleteFaceCallback(OAIHttpRequestWorker *worker);
    void faceListGetCallback(OAIHttpRequestWorker *worker);
    void faceListListCallback(OAIHttpRequestWorker *worker);
    void faceListUpdateCallback(OAIHttpRequestWorker *worker);
    void faceVerifyFaceToFaceCallback(OAIHttpRequestWorker *worker);
    void largeFaceListAddFaceFromUrlCallback(OAIHttpRequestWorker *worker);
    void largeFaceListCreateCallback(OAIHttpRequestWorker *worker);
    void largeFaceListDeleteCallback(OAIHttpRequestWorker *worker);
    void largeFaceListDeleteFaceCallback(OAIHttpRequestWorker *worker);
    void largeFaceListGetCallback(OAIHttpRequestWorker *worker);
    void largeFaceListGetFaceCallback(OAIHttpRequestWorker *worker);
    void largeFaceListGetTrainingStatusCallback(OAIHttpRequestWorker *worker);
    void largeFaceListListCallback(OAIHttpRequestWorker *worker);
    void largeFaceListListFacesCallback(OAIHttpRequestWorker *worker);
    void largeFaceListTrainCallback(OAIHttpRequestWorker *worker);
    void largeFaceListUpdateCallback(OAIHttpRequestWorker *worker);
    void largeFaceListUpdateFaceCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupCreateCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupDeleteCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupGetCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupGetTrainingStatusCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupListCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupPersonAddFaceFromUrlCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupPersonCreateCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupPersonDeleteCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupPersonDeleteFaceCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupPersonGetCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupPersonGetFaceCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupPersonListCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupPersonUpdateCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupPersonUpdateFaceCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupTrainCallback(OAIHttpRequestWorker *worker);
    void largePersonGroupUpdateCallback(OAIHttpRequestWorker *worker);
    void personGroupCreateCallback(OAIHttpRequestWorker *worker);
    void personGroupDeleteCallback(OAIHttpRequestWorker *worker);
    void personGroupGetCallback(OAIHttpRequestWorker *worker);
    void personGroupGetTrainingStatusCallback(OAIHttpRequestWorker *worker);
    void personGroupListCallback(OAIHttpRequestWorker *worker);
    void personGroupPersonAddFaceFromUrlCallback(OAIHttpRequestWorker *worker);
    void personGroupPersonCreateCallback(OAIHttpRequestWorker *worker);
    void personGroupPersonDeleteCallback(OAIHttpRequestWorker *worker);
    void personGroupPersonDeleteFaceCallback(OAIHttpRequestWorker *worker);
    void personGroupPersonGetCallback(OAIHttpRequestWorker *worker);
    void personGroupPersonGetFaceCallback(OAIHttpRequestWorker *worker);
    void personGroupPersonListCallback(OAIHttpRequestWorker *worker);
    void personGroupPersonUpdateCallback(OAIHttpRequestWorker *worker);
    void personGroupPersonUpdateFaceCallback(OAIHttpRequestWorker *worker);
    void personGroupTrainCallback(OAIHttpRequestWorker *worker);
    void personGroupUpdateCallback(OAIHttpRequestWorker *worker);
    void snapshotApplyCallback(OAIHttpRequestWorker *worker);
    void snapshotDeleteCallback(OAIHttpRequestWorker *worker);
    void snapshotGetCallback(OAIHttpRequestWorker *worker);
    void snapshotGetOperationStatusCallback(OAIHttpRequestWorker *worker);
    void snapshotListCallback(OAIHttpRequestWorker *worker);
    void snapshotTakeCallback(OAIHttpRequestWorker *worker);
    void snapshotUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void faceDetectWithUrlSignal(QList<OAIDetectedFace> summary);
    void faceFindSimilarSignal(QList<OAISimilarFace> summary);
    void faceGroupSignal(OAIGroupResult summary);
    void faceIdentifySignal(QList<OAIIdentifyResult> summary);
    void faceListAddFaceFromUrlSignal(OAIPersistedFace summary);
    void faceListCreateSignal();
    void faceListDeleteSignal();
    void faceListDeleteFaceSignal();
    void faceListGetSignal(OAIFaceList summary);
    void faceListListSignal(QList<OAIFaceList> summary);
    void faceListUpdateSignal();
    void faceVerifyFaceToFaceSignal(OAIVerifyResult summary);
    void largeFaceListAddFaceFromUrlSignal(OAIPersistedFace summary);
    void largeFaceListCreateSignal();
    void largeFaceListDeleteSignal();
    void largeFaceListDeleteFaceSignal();
    void largeFaceListGetSignal(OAILargeFaceList summary);
    void largeFaceListGetFaceSignal(OAIPersistedFace summary);
    void largeFaceListGetTrainingStatusSignal(OAITrainingStatus summary);
    void largeFaceListListSignal(QList<OAILargeFaceList> summary);
    void largeFaceListListFacesSignal(QList<OAIPersistedFace> summary);
    void largeFaceListTrainSignal();
    void largeFaceListUpdateSignal();
    void largeFaceListUpdateFaceSignal();
    void largePersonGroupCreateSignal();
    void largePersonGroupDeleteSignal();
    void largePersonGroupGetSignal(OAILargePersonGroup summary);
    void largePersonGroupGetTrainingStatusSignal(OAITrainingStatus summary);
    void largePersonGroupListSignal(QList<OAILargePersonGroup> summary);
    void largePersonGroupPersonAddFaceFromUrlSignal(OAIPersistedFace summary);
    void largePersonGroupPersonCreateSignal(OAIPerson summary);
    void largePersonGroupPersonDeleteSignal();
    void largePersonGroupPersonDeleteFaceSignal();
    void largePersonGroupPersonGetSignal(OAIPerson summary);
    void largePersonGroupPersonGetFaceSignal(OAIPersistedFace summary);
    void largePersonGroupPersonListSignal(QList<OAIPerson> summary);
    void largePersonGroupPersonUpdateSignal();
    void largePersonGroupPersonUpdateFaceSignal();
    void largePersonGroupTrainSignal();
    void largePersonGroupUpdateSignal();
    void personGroupCreateSignal();
    void personGroupDeleteSignal();
    void personGroupGetSignal(OAIPersonGroup summary);
    void personGroupGetTrainingStatusSignal(OAITrainingStatus summary);
    void personGroupListSignal(QList<OAIPersonGroup> summary);
    void personGroupPersonAddFaceFromUrlSignal(OAIPersistedFace summary);
    void personGroupPersonCreateSignal(OAIPerson summary);
    void personGroupPersonDeleteSignal();
    void personGroupPersonDeleteFaceSignal();
    void personGroupPersonGetSignal(OAIPerson summary);
    void personGroupPersonGetFaceSignal(OAIPersistedFace summary);
    void personGroupPersonListSignal(QList<OAIPerson> summary);
    void personGroupPersonUpdateSignal();
    void personGroupPersonUpdateFaceSignal();
    void personGroupTrainSignal();
    void personGroupUpdateSignal();
    void snapshotApplySignal();
    void snapshotDeleteSignal();
    void snapshotGetSignal(OAISnapshot summary);
    void snapshotGetOperationStatusSignal(OAIOperationStatus summary);
    void snapshotListSignal(QList<OAISnapshot> summary);
    void snapshotTakeSignal();
    void snapshotUpdateSignal();


    void faceDetectWithUrlSignalFull(OAIHttpRequestWorker *worker, QList<OAIDetectedFace> summary);
    void faceFindSimilarSignalFull(OAIHttpRequestWorker *worker, QList<OAISimilarFace> summary);
    void faceGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroupResult summary);
    void faceIdentifySignalFull(OAIHttpRequestWorker *worker, QList<OAIIdentifyResult> summary);
    void faceListAddFaceFromUrlSignalFull(OAIHttpRequestWorker *worker, OAIPersistedFace summary);
    void faceListCreateSignalFull(OAIHttpRequestWorker *worker);
    void faceListDeleteSignalFull(OAIHttpRequestWorker *worker);
    void faceListDeleteFaceSignalFull(OAIHttpRequestWorker *worker);
    void faceListGetSignalFull(OAIHttpRequestWorker *worker, OAIFaceList summary);
    void faceListListSignalFull(OAIHttpRequestWorker *worker, QList<OAIFaceList> summary);
    void faceListUpdateSignalFull(OAIHttpRequestWorker *worker);
    void faceVerifyFaceToFaceSignalFull(OAIHttpRequestWorker *worker, OAIVerifyResult summary);
    void largeFaceListAddFaceFromUrlSignalFull(OAIHttpRequestWorker *worker, OAIPersistedFace summary);
    void largeFaceListCreateSignalFull(OAIHttpRequestWorker *worker);
    void largeFaceListDeleteSignalFull(OAIHttpRequestWorker *worker);
    void largeFaceListDeleteFaceSignalFull(OAIHttpRequestWorker *worker);
    void largeFaceListGetSignalFull(OAIHttpRequestWorker *worker, OAILargeFaceList summary);
    void largeFaceListGetFaceSignalFull(OAIHttpRequestWorker *worker, OAIPersistedFace summary);
    void largeFaceListGetTrainingStatusSignalFull(OAIHttpRequestWorker *worker, OAITrainingStatus summary);
    void largeFaceListListSignalFull(OAIHttpRequestWorker *worker, QList<OAILargeFaceList> summary);
    void largeFaceListListFacesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPersistedFace> summary);
    void largeFaceListTrainSignalFull(OAIHttpRequestWorker *worker);
    void largeFaceListUpdateSignalFull(OAIHttpRequestWorker *worker);
    void largeFaceListUpdateFaceSignalFull(OAIHttpRequestWorker *worker);
    void largePersonGroupCreateSignalFull(OAIHttpRequestWorker *worker);
    void largePersonGroupDeleteSignalFull(OAIHttpRequestWorker *worker);
    void largePersonGroupGetSignalFull(OAIHttpRequestWorker *worker, OAILargePersonGroup summary);
    void largePersonGroupGetTrainingStatusSignalFull(OAIHttpRequestWorker *worker, OAITrainingStatus summary);
    void largePersonGroupListSignalFull(OAIHttpRequestWorker *worker, QList<OAILargePersonGroup> summary);
    void largePersonGroupPersonAddFaceFromUrlSignalFull(OAIHttpRequestWorker *worker, OAIPersistedFace summary);
    void largePersonGroupPersonCreateSignalFull(OAIHttpRequestWorker *worker, OAIPerson summary);
    void largePersonGroupPersonDeleteSignalFull(OAIHttpRequestWorker *worker);
    void largePersonGroupPersonDeleteFaceSignalFull(OAIHttpRequestWorker *worker);
    void largePersonGroupPersonGetSignalFull(OAIHttpRequestWorker *worker, OAIPerson summary);
    void largePersonGroupPersonGetFaceSignalFull(OAIHttpRequestWorker *worker, OAIPersistedFace summary);
    void largePersonGroupPersonListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPerson> summary);
    void largePersonGroupPersonUpdateSignalFull(OAIHttpRequestWorker *worker);
    void largePersonGroupPersonUpdateFaceSignalFull(OAIHttpRequestWorker *worker);
    void largePersonGroupTrainSignalFull(OAIHttpRequestWorker *worker);
    void largePersonGroupUpdateSignalFull(OAIHttpRequestWorker *worker);
    void personGroupCreateSignalFull(OAIHttpRequestWorker *worker);
    void personGroupDeleteSignalFull(OAIHttpRequestWorker *worker);
    void personGroupGetSignalFull(OAIHttpRequestWorker *worker, OAIPersonGroup summary);
    void personGroupGetTrainingStatusSignalFull(OAIHttpRequestWorker *worker, OAITrainingStatus summary);
    void personGroupListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPersonGroup> summary);
    void personGroupPersonAddFaceFromUrlSignalFull(OAIHttpRequestWorker *worker, OAIPersistedFace summary);
    void personGroupPersonCreateSignalFull(OAIHttpRequestWorker *worker, OAIPerson summary);
    void personGroupPersonDeleteSignalFull(OAIHttpRequestWorker *worker);
    void personGroupPersonDeleteFaceSignalFull(OAIHttpRequestWorker *worker);
    void personGroupPersonGetSignalFull(OAIHttpRequestWorker *worker, OAIPerson summary);
    void personGroupPersonGetFaceSignalFull(OAIHttpRequestWorker *worker, OAIPersistedFace summary);
    void personGroupPersonListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPerson> summary);
    void personGroupPersonUpdateSignalFull(OAIHttpRequestWorker *worker);
    void personGroupPersonUpdateFaceSignalFull(OAIHttpRequestWorker *worker);
    void personGroupTrainSignalFull(OAIHttpRequestWorker *worker);
    void personGroupUpdateSignalFull(OAIHttpRequestWorker *worker);
    void snapshotApplySignalFull(OAIHttpRequestWorker *worker);
    void snapshotDeleteSignalFull(OAIHttpRequestWorker *worker);
    void snapshotGetSignalFull(OAIHttpRequestWorker *worker, OAISnapshot summary);
    void snapshotGetOperationStatusSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void snapshotListSignalFull(OAIHttpRequestWorker *worker, QList<OAISnapshot> summary);
    void snapshotTakeSignalFull(OAIHttpRequestWorker *worker);
    void snapshotUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use faceDetectWithUrlSignalError() instead")
    void faceDetectWithUrlSignalE(QList<OAIDetectedFace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void faceDetectWithUrlSignalError(QList<OAIDetectedFace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceFindSimilarSignalError() instead")
    void faceFindSimilarSignalE(QList<OAISimilarFace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void faceFindSimilarSignalError(QList<OAISimilarFace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceGroupSignalError() instead")
    void faceGroupSignalE(OAIGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void faceGroupSignalError(OAIGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceIdentifySignalError() instead")
    void faceIdentifySignalE(QList<OAIIdentifyResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void faceIdentifySignalError(QList<OAIIdentifyResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListAddFaceFromUrlSignalError() instead")
    void faceListAddFaceFromUrlSignalE(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void faceListAddFaceFromUrlSignalError(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListCreateSignalError() instead")
    void faceListCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void faceListCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListDeleteSignalError() instead")
    void faceListDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void faceListDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListDeleteFaceSignalError() instead")
    void faceListDeleteFaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void faceListDeleteFaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListGetSignalError() instead")
    void faceListGetSignalE(OAIFaceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void faceListGetSignalError(OAIFaceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListListSignalError() instead")
    void faceListListSignalE(QList<OAIFaceList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void faceListListSignalError(QList<OAIFaceList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListUpdateSignalError() instead")
    void faceListUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void faceListUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceVerifyFaceToFaceSignalError() instead")
    void faceVerifyFaceToFaceSignalE(OAIVerifyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void faceVerifyFaceToFaceSignalError(OAIVerifyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListAddFaceFromUrlSignalError() instead")
    void largeFaceListAddFaceFromUrlSignalE(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListAddFaceFromUrlSignalError(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListCreateSignalError() instead")
    void largeFaceListCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListDeleteSignalError() instead")
    void largeFaceListDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListDeleteFaceSignalError() instead")
    void largeFaceListDeleteFaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListDeleteFaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListGetSignalError() instead")
    void largeFaceListGetSignalE(OAILargeFaceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListGetSignalError(OAILargeFaceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListGetFaceSignalError() instead")
    void largeFaceListGetFaceSignalE(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListGetFaceSignalError(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListGetTrainingStatusSignalError() instead")
    void largeFaceListGetTrainingStatusSignalE(OAITrainingStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListGetTrainingStatusSignalError(OAITrainingStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListListSignalError() instead")
    void largeFaceListListSignalE(QList<OAILargeFaceList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListListSignalError(QList<OAILargeFaceList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListListFacesSignalError() instead")
    void largeFaceListListFacesSignalE(QList<OAIPersistedFace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListListFacesSignalError(QList<OAIPersistedFace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListTrainSignalError() instead")
    void largeFaceListTrainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListTrainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListUpdateSignalError() instead")
    void largeFaceListUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListUpdateFaceSignalError() instead")
    void largeFaceListUpdateFaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListUpdateFaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupCreateSignalError() instead")
    void largePersonGroupCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupDeleteSignalError() instead")
    void largePersonGroupDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupGetSignalError() instead")
    void largePersonGroupGetSignalE(OAILargePersonGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupGetSignalError(OAILargePersonGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupGetTrainingStatusSignalError() instead")
    void largePersonGroupGetTrainingStatusSignalE(OAITrainingStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupGetTrainingStatusSignalError(OAITrainingStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupListSignalError() instead")
    void largePersonGroupListSignalE(QList<OAILargePersonGroup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupListSignalError(QList<OAILargePersonGroup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonAddFaceFromUrlSignalError() instead")
    void largePersonGroupPersonAddFaceFromUrlSignalE(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonAddFaceFromUrlSignalError(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonCreateSignalError() instead")
    void largePersonGroupPersonCreateSignalE(OAIPerson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonCreateSignalError(OAIPerson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonDeleteSignalError() instead")
    void largePersonGroupPersonDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonDeleteFaceSignalError() instead")
    void largePersonGroupPersonDeleteFaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonDeleteFaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonGetSignalError() instead")
    void largePersonGroupPersonGetSignalE(OAIPerson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonGetSignalError(OAIPerson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonGetFaceSignalError() instead")
    void largePersonGroupPersonGetFaceSignalE(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonGetFaceSignalError(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonListSignalError() instead")
    void largePersonGroupPersonListSignalE(QList<OAIPerson> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonListSignalError(QList<OAIPerson> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonUpdateSignalError() instead")
    void largePersonGroupPersonUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonUpdateFaceSignalError() instead")
    void largePersonGroupPersonUpdateFaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonUpdateFaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupTrainSignalError() instead")
    void largePersonGroupTrainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupTrainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupUpdateSignalError() instead")
    void largePersonGroupUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupCreateSignalError() instead")
    void personGroupCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupDeleteSignalError() instead")
    void personGroupDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupGetSignalError() instead")
    void personGroupGetSignalE(OAIPersonGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupGetSignalError(OAIPersonGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupGetTrainingStatusSignalError() instead")
    void personGroupGetTrainingStatusSignalE(OAITrainingStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupGetTrainingStatusSignalError(OAITrainingStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupListSignalError() instead")
    void personGroupListSignalE(QList<OAIPersonGroup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupListSignalError(QList<OAIPersonGroup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonAddFaceFromUrlSignalError() instead")
    void personGroupPersonAddFaceFromUrlSignalE(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonAddFaceFromUrlSignalError(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonCreateSignalError() instead")
    void personGroupPersonCreateSignalE(OAIPerson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonCreateSignalError(OAIPerson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonDeleteSignalError() instead")
    void personGroupPersonDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonDeleteFaceSignalError() instead")
    void personGroupPersonDeleteFaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonDeleteFaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonGetSignalError() instead")
    void personGroupPersonGetSignalE(OAIPerson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonGetSignalError(OAIPerson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonGetFaceSignalError() instead")
    void personGroupPersonGetFaceSignalE(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonGetFaceSignalError(OAIPersistedFace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonListSignalError() instead")
    void personGroupPersonListSignalE(QList<OAIPerson> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonListSignalError(QList<OAIPerson> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonUpdateSignalError() instead")
    void personGroupPersonUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonUpdateFaceSignalError() instead")
    void personGroupPersonUpdateFaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonUpdateFaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupTrainSignalError() instead")
    void personGroupTrainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupTrainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupUpdateSignalError() instead")
    void personGroupUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotApplySignalError() instead")
    void snapshotApplySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotApplySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotDeleteSignalError() instead")
    void snapshotDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotGetSignalError() instead")
    void snapshotGetSignalE(OAISnapshot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotGetSignalError(OAISnapshot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotGetOperationStatusSignalError() instead")
    void snapshotGetOperationStatusSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotGetOperationStatusSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotListSignalError() instead")
    void snapshotListSignalE(QList<OAISnapshot> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotListSignalError(QList<OAISnapshot> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotTakeSignalError() instead")
    void snapshotTakeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotTakeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotUpdateSignalError() instead")
    void snapshotUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use faceDetectWithUrlSignalErrorFull() instead")
    void faceDetectWithUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceDetectWithUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceFindSimilarSignalErrorFull() instead")
    void faceFindSimilarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceFindSimilarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceGroupSignalErrorFull() instead")
    void faceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceIdentifySignalErrorFull() instead")
    void faceIdentifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceIdentifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListAddFaceFromUrlSignalErrorFull() instead")
    void faceListAddFaceFromUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceListAddFaceFromUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListCreateSignalErrorFull() instead")
    void faceListCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceListCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListDeleteSignalErrorFull() instead")
    void faceListDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceListDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListDeleteFaceSignalErrorFull() instead")
    void faceListDeleteFaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceListDeleteFaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListGetSignalErrorFull() instead")
    void faceListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListListSignalErrorFull() instead")
    void faceListListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceListListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceListUpdateSignalErrorFull() instead")
    void faceListUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceListUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use faceVerifyFaceToFaceSignalErrorFull() instead")
    void faceVerifyFaceToFaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void faceVerifyFaceToFaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListAddFaceFromUrlSignalErrorFull() instead")
    void largeFaceListAddFaceFromUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListAddFaceFromUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListCreateSignalErrorFull() instead")
    void largeFaceListCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListDeleteSignalErrorFull() instead")
    void largeFaceListDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListDeleteFaceSignalErrorFull() instead")
    void largeFaceListDeleteFaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListDeleteFaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListGetSignalErrorFull() instead")
    void largeFaceListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListGetFaceSignalErrorFull() instead")
    void largeFaceListGetFaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListGetFaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListGetTrainingStatusSignalErrorFull() instead")
    void largeFaceListGetTrainingStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListGetTrainingStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListListSignalErrorFull() instead")
    void largeFaceListListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListListFacesSignalErrorFull() instead")
    void largeFaceListListFacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListListFacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListTrainSignalErrorFull() instead")
    void largeFaceListTrainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListTrainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListUpdateSignalErrorFull() instead")
    void largeFaceListUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largeFaceListUpdateFaceSignalErrorFull() instead")
    void largeFaceListUpdateFaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largeFaceListUpdateFaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupCreateSignalErrorFull() instead")
    void largePersonGroupCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupDeleteSignalErrorFull() instead")
    void largePersonGroupDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupGetSignalErrorFull() instead")
    void largePersonGroupGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupGetTrainingStatusSignalErrorFull() instead")
    void largePersonGroupGetTrainingStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupGetTrainingStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupListSignalErrorFull() instead")
    void largePersonGroupListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonAddFaceFromUrlSignalErrorFull() instead")
    void largePersonGroupPersonAddFaceFromUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonAddFaceFromUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonCreateSignalErrorFull() instead")
    void largePersonGroupPersonCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonDeleteSignalErrorFull() instead")
    void largePersonGroupPersonDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonDeleteFaceSignalErrorFull() instead")
    void largePersonGroupPersonDeleteFaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonDeleteFaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonGetSignalErrorFull() instead")
    void largePersonGroupPersonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonGetFaceSignalErrorFull() instead")
    void largePersonGroupPersonGetFaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonGetFaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonListSignalErrorFull() instead")
    void largePersonGroupPersonListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonUpdateSignalErrorFull() instead")
    void largePersonGroupPersonUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupPersonUpdateFaceSignalErrorFull() instead")
    void largePersonGroupPersonUpdateFaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupPersonUpdateFaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupTrainSignalErrorFull() instead")
    void largePersonGroupTrainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupTrainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use largePersonGroupUpdateSignalErrorFull() instead")
    void largePersonGroupUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void largePersonGroupUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupCreateSignalErrorFull() instead")
    void personGroupCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupDeleteSignalErrorFull() instead")
    void personGroupDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupGetSignalErrorFull() instead")
    void personGroupGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupGetTrainingStatusSignalErrorFull() instead")
    void personGroupGetTrainingStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupGetTrainingStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupListSignalErrorFull() instead")
    void personGroupListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonAddFaceFromUrlSignalErrorFull() instead")
    void personGroupPersonAddFaceFromUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonAddFaceFromUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonCreateSignalErrorFull() instead")
    void personGroupPersonCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonDeleteSignalErrorFull() instead")
    void personGroupPersonDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonDeleteFaceSignalErrorFull() instead")
    void personGroupPersonDeleteFaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonDeleteFaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonGetSignalErrorFull() instead")
    void personGroupPersonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonGetFaceSignalErrorFull() instead")
    void personGroupPersonGetFaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonGetFaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonListSignalErrorFull() instead")
    void personGroupPersonListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonUpdateSignalErrorFull() instead")
    void personGroupPersonUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupPersonUpdateFaceSignalErrorFull() instead")
    void personGroupPersonUpdateFaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupPersonUpdateFaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupTrainSignalErrorFull() instead")
    void personGroupTrainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupTrainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personGroupUpdateSignalErrorFull() instead")
    void personGroupUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personGroupUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotApplySignalErrorFull() instead")
    void snapshotApplySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotApplySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotDeleteSignalErrorFull() instead")
    void snapshotDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotGetSignalErrorFull() instead")
    void snapshotGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotGetOperationStatusSignalErrorFull() instead")
    void snapshotGetOperationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotGetOperationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotListSignalErrorFull() instead")
    void snapshotListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotTakeSignalErrorFull() instead")
    void snapshotTakeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotTakeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotUpdateSignalErrorFull() instead")
    void snapshotUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
