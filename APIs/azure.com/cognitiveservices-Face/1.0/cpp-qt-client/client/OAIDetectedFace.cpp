/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectedFace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectedFace::OAIDetectedFace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectedFace::OAIDetectedFace() {
    this->initializeModel();
}

OAIDetectedFace::~OAIDetectedFace() {}

void OAIDetectedFace::initializeModel() {

    m_face_attributes_isSet = false;
    m_face_attributes_isValid = false;

    m_face_id_isSet = false;
    m_face_id_isValid = false;

    m_face_landmarks_isSet = false;
    m_face_landmarks_isValid = false;

    m_face_rectangle_isSet = false;
    m_face_rectangle_isValid = false;

    m_recognition_model_isSet = false;
    m_recognition_model_isValid = false;
}

void OAIDetectedFace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectedFace::fromJsonObject(QJsonObject json) {

    m_face_attributes_isValid = ::OpenAPI::fromJsonValue(m_face_attributes, json[QString("faceAttributes")]);
    m_face_attributes_isSet = !json[QString("faceAttributes")].isNull() && m_face_attributes_isValid;

    m_face_id_isValid = ::OpenAPI::fromJsonValue(m_face_id, json[QString("faceId")]);
    m_face_id_isSet = !json[QString("faceId")].isNull() && m_face_id_isValid;

    m_face_landmarks_isValid = ::OpenAPI::fromJsonValue(m_face_landmarks, json[QString("faceLandmarks")]);
    m_face_landmarks_isSet = !json[QString("faceLandmarks")].isNull() && m_face_landmarks_isValid;

    m_face_rectangle_isValid = ::OpenAPI::fromJsonValue(m_face_rectangle, json[QString("faceRectangle")]);
    m_face_rectangle_isSet = !json[QString("faceRectangle")].isNull() && m_face_rectangle_isValid;

    m_recognition_model_isValid = ::OpenAPI::fromJsonValue(m_recognition_model, json[QString("recognitionModel")]);
    m_recognition_model_isSet = !json[QString("recognitionModel")].isNull() && m_recognition_model_isValid;
}

QString OAIDetectedFace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectedFace::asJsonObject() const {
    QJsonObject obj;
    if (m_face_attributes.isSet()) {
        obj.insert(QString("faceAttributes"), ::OpenAPI::toJsonValue(m_face_attributes));
    }
    if (m_face_id_isSet) {
        obj.insert(QString("faceId"), ::OpenAPI::toJsonValue(m_face_id));
    }
    if (m_face_landmarks.isSet()) {
        obj.insert(QString("faceLandmarks"), ::OpenAPI::toJsonValue(m_face_landmarks));
    }
    if (m_face_rectangle.isSet()) {
        obj.insert(QString("faceRectangle"), ::OpenAPI::toJsonValue(m_face_rectangle));
    }
    if (m_recognition_model.isSet()) {
        obj.insert(QString("recognitionModel"), ::OpenAPI::toJsonValue(m_recognition_model));
    }
    return obj;
}

OAIFaceAttributes OAIDetectedFace::getFaceAttributes() const {
    return m_face_attributes;
}
void OAIDetectedFace::setFaceAttributes(const OAIFaceAttributes &face_attributes) {
    m_face_attributes = face_attributes;
    m_face_attributes_isSet = true;
}

bool OAIDetectedFace::is_face_attributes_Set() const{
    return m_face_attributes_isSet;
}

bool OAIDetectedFace::is_face_attributes_Valid() const{
    return m_face_attributes_isValid;
}

QString OAIDetectedFace::getFaceId() const {
    return m_face_id;
}
void OAIDetectedFace::setFaceId(const QString &face_id) {
    m_face_id = face_id;
    m_face_id_isSet = true;
}

bool OAIDetectedFace::is_face_id_Set() const{
    return m_face_id_isSet;
}

bool OAIDetectedFace::is_face_id_Valid() const{
    return m_face_id_isValid;
}

OAIFaceLandmarks OAIDetectedFace::getFaceLandmarks() const {
    return m_face_landmarks;
}
void OAIDetectedFace::setFaceLandmarks(const OAIFaceLandmarks &face_landmarks) {
    m_face_landmarks = face_landmarks;
    m_face_landmarks_isSet = true;
}

bool OAIDetectedFace::is_face_landmarks_Set() const{
    return m_face_landmarks_isSet;
}

bool OAIDetectedFace::is_face_landmarks_Valid() const{
    return m_face_landmarks_isValid;
}

OAIFaceRectangle OAIDetectedFace::getFaceRectangle() const {
    return m_face_rectangle;
}
void OAIDetectedFace::setFaceRectangle(const OAIFaceRectangle &face_rectangle) {
    m_face_rectangle = face_rectangle;
    m_face_rectangle_isSet = true;
}

bool OAIDetectedFace::is_face_rectangle_Set() const{
    return m_face_rectangle_isSet;
}

bool OAIDetectedFace::is_face_rectangle_Valid() const{
    return m_face_rectangle_isValid;
}

OAIRecognitionModel OAIDetectedFace::getRecognitionModel() const {
    return m_recognition_model;
}
void OAIDetectedFace::setRecognitionModel(const OAIRecognitionModel &recognition_model) {
    m_recognition_model = recognition_model;
    m_recognition_model_isSet = true;
}

bool OAIDetectedFace::is_recognition_model_Set() const{
    return m_recognition_model_isSet;
}

bool OAIDetectedFace::is_recognition_model_Valid() const{
    return m_recognition_model_isValid;
}

bool OAIDetectedFace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_face_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_landmarks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_rectangle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recognition_model.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectedFace::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_face_rectangle_isValid && true;
}

} // namespace OpenAPI
