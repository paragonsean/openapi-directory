/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHair::OAIHair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHair::OAIHair() {
    this->initializeModel();
}

OAIHair::~OAIHair() {}

void OAIHair::initializeModel() {

    m_bald_isSet = false;
    m_bald_isValid = false;

    m_hair_color_isSet = false;
    m_hair_color_isValid = false;

    m_invisible_isSet = false;
    m_invisible_isValid = false;
}

void OAIHair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHair::fromJsonObject(QJsonObject json) {

    m_bald_isValid = ::OpenAPI::fromJsonValue(m_bald, json[QString("bald")]);
    m_bald_isSet = !json[QString("bald")].isNull() && m_bald_isValid;

    m_hair_color_isValid = ::OpenAPI::fromJsonValue(m_hair_color, json[QString("hairColor")]);
    m_hair_color_isSet = !json[QString("hairColor")].isNull() && m_hair_color_isValid;

    m_invisible_isValid = ::OpenAPI::fromJsonValue(m_invisible, json[QString("invisible")]);
    m_invisible_isSet = !json[QString("invisible")].isNull() && m_invisible_isValid;
}

QString OAIHair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHair::asJsonObject() const {
    QJsonObject obj;
    if (m_bald_isSet) {
        obj.insert(QString("bald"), ::OpenAPI::toJsonValue(m_bald));
    }
    if (m_hair_color.size() > 0) {
        obj.insert(QString("hairColor"), ::OpenAPI::toJsonValue(m_hair_color));
    }
    if (m_invisible_isSet) {
        obj.insert(QString("invisible"), ::OpenAPI::toJsonValue(m_invisible));
    }
    return obj;
}

double OAIHair::getBald() const {
    return m_bald;
}
void OAIHair::setBald(const double &bald) {
    m_bald = bald;
    m_bald_isSet = true;
}

bool OAIHair::is_bald_Set() const{
    return m_bald_isSet;
}

bool OAIHair::is_bald_Valid() const{
    return m_bald_isValid;
}

QList<OAIHairColor> OAIHair::getHairColor() const {
    return m_hair_color;
}
void OAIHair::setHairColor(const QList<OAIHairColor> &hair_color) {
    m_hair_color = hair_color;
    m_hair_color_isSet = true;
}

bool OAIHair::is_hair_color_Set() const{
    return m_hair_color_isSet;
}

bool OAIHair::is_hair_color_Valid() const{
    return m_hair_color_isValid;
}

bool OAIHair::isInvisible() const {
    return m_invisible;
}
void OAIHair::setInvisible(const bool &invisible) {
    m_invisible = invisible;
    m_invisible_isSet = true;
}

bool OAIHair::is_invisible_Set() const{
    return m_invisible_isSet;
}

bool OAIHair::is_invisible_Valid() const{
    return m_invisible_isValid;
}

bool OAIHair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bald_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hair_color.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invisible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHair::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
