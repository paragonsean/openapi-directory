/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeadPose.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeadPose::OAIHeadPose(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeadPose::OAIHeadPose() {
    this->initializeModel();
}

OAIHeadPose::~OAIHeadPose() {}

void OAIHeadPose::initializeModel() {

    m_pitch_isSet = false;
    m_pitch_isValid = false;

    m_roll_isSet = false;
    m_roll_isValid = false;

    m_yaw_isSet = false;
    m_yaw_isValid = false;
}

void OAIHeadPose::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeadPose::fromJsonObject(QJsonObject json) {

    m_pitch_isValid = ::OpenAPI::fromJsonValue(m_pitch, json[QString("pitch")]);
    m_pitch_isSet = !json[QString("pitch")].isNull() && m_pitch_isValid;

    m_roll_isValid = ::OpenAPI::fromJsonValue(m_roll, json[QString("roll")]);
    m_roll_isSet = !json[QString("roll")].isNull() && m_roll_isValid;

    m_yaw_isValid = ::OpenAPI::fromJsonValue(m_yaw, json[QString("yaw")]);
    m_yaw_isSet = !json[QString("yaw")].isNull() && m_yaw_isValid;
}

QString OAIHeadPose::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeadPose::asJsonObject() const {
    QJsonObject obj;
    if (m_pitch_isSet) {
        obj.insert(QString("pitch"), ::OpenAPI::toJsonValue(m_pitch));
    }
    if (m_roll_isSet) {
        obj.insert(QString("roll"), ::OpenAPI::toJsonValue(m_roll));
    }
    if (m_yaw_isSet) {
        obj.insert(QString("yaw"), ::OpenAPI::toJsonValue(m_yaw));
    }
    return obj;
}

double OAIHeadPose::getPitch() const {
    return m_pitch;
}
void OAIHeadPose::setPitch(const double &pitch) {
    m_pitch = pitch;
    m_pitch_isSet = true;
}

bool OAIHeadPose::is_pitch_Set() const{
    return m_pitch_isSet;
}

bool OAIHeadPose::is_pitch_Valid() const{
    return m_pitch_isValid;
}

double OAIHeadPose::getRoll() const {
    return m_roll;
}
void OAIHeadPose::setRoll(const double &roll) {
    m_roll = roll;
    m_roll_isSet = true;
}

bool OAIHeadPose::is_roll_Set() const{
    return m_roll_isSet;
}

bool OAIHeadPose::is_roll_Valid() const{
    return m_roll_isValid;
}

double OAIHeadPose::getYaw() const {
    return m_yaw;
}
void OAIHeadPose::setYaw(const double &yaw) {
    m_yaw = yaw;
    m_yaw_isSet = true;
}

bool OAIHeadPose::is_yaw_Set() const{
    return m_yaw_isSet;
}

bool OAIHeadPose::is_yaw_Valid() const{
    return m_yaw_isValid;
}

bool OAIHeadPose::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pitch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yaw_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeadPose::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
