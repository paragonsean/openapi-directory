/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmotion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmotion::OAIEmotion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmotion::OAIEmotion() {
    this->initializeModel();
}

OAIEmotion::~OAIEmotion() {}

void OAIEmotion::initializeModel() {

    m_anger_isSet = false;
    m_anger_isValid = false;

    m_contempt_isSet = false;
    m_contempt_isValid = false;

    m_disgust_isSet = false;
    m_disgust_isValid = false;

    m_fear_isSet = false;
    m_fear_isValid = false;

    m_happiness_isSet = false;
    m_happiness_isValid = false;

    m_neutral_isSet = false;
    m_neutral_isValid = false;

    m_sadness_isSet = false;
    m_sadness_isValid = false;

    m_surprise_isSet = false;
    m_surprise_isValid = false;
}

void OAIEmotion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmotion::fromJsonObject(QJsonObject json) {

    m_anger_isValid = ::OpenAPI::fromJsonValue(m_anger, json[QString("anger")]);
    m_anger_isSet = !json[QString("anger")].isNull() && m_anger_isValid;

    m_contempt_isValid = ::OpenAPI::fromJsonValue(m_contempt, json[QString("contempt")]);
    m_contempt_isSet = !json[QString("contempt")].isNull() && m_contempt_isValid;

    m_disgust_isValid = ::OpenAPI::fromJsonValue(m_disgust, json[QString("disgust")]);
    m_disgust_isSet = !json[QString("disgust")].isNull() && m_disgust_isValid;

    m_fear_isValid = ::OpenAPI::fromJsonValue(m_fear, json[QString("fear")]);
    m_fear_isSet = !json[QString("fear")].isNull() && m_fear_isValid;

    m_happiness_isValid = ::OpenAPI::fromJsonValue(m_happiness, json[QString("happiness")]);
    m_happiness_isSet = !json[QString("happiness")].isNull() && m_happiness_isValid;

    m_neutral_isValid = ::OpenAPI::fromJsonValue(m_neutral, json[QString("neutral")]);
    m_neutral_isSet = !json[QString("neutral")].isNull() && m_neutral_isValid;

    m_sadness_isValid = ::OpenAPI::fromJsonValue(m_sadness, json[QString("sadness")]);
    m_sadness_isSet = !json[QString("sadness")].isNull() && m_sadness_isValid;

    m_surprise_isValid = ::OpenAPI::fromJsonValue(m_surprise, json[QString("surprise")]);
    m_surprise_isSet = !json[QString("surprise")].isNull() && m_surprise_isValid;
}

QString OAIEmotion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmotion::asJsonObject() const {
    QJsonObject obj;
    if (m_anger_isSet) {
        obj.insert(QString("anger"), ::OpenAPI::toJsonValue(m_anger));
    }
    if (m_contempt_isSet) {
        obj.insert(QString("contempt"), ::OpenAPI::toJsonValue(m_contempt));
    }
    if (m_disgust_isSet) {
        obj.insert(QString("disgust"), ::OpenAPI::toJsonValue(m_disgust));
    }
    if (m_fear_isSet) {
        obj.insert(QString("fear"), ::OpenAPI::toJsonValue(m_fear));
    }
    if (m_happiness_isSet) {
        obj.insert(QString("happiness"), ::OpenAPI::toJsonValue(m_happiness));
    }
    if (m_neutral_isSet) {
        obj.insert(QString("neutral"), ::OpenAPI::toJsonValue(m_neutral));
    }
    if (m_sadness_isSet) {
        obj.insert(QString("sadness"), ::OpenAPI::toJsonValue(m_sadness));
    }
    if (m_surprise_isSet) {
        obj.insert(QString("surprise"), ::OpenAPI::toJsonValue(m_surprise));
    }
    return obj;
}

double OAIEmotion::getAnger() const {
    return m_anger;
}
void OAIEmotion::setAnger(const double &anger) {
    m_anger = anger;
    m_anger_isSet = true;
}

bool OAIEmotion::is_anger_Set() const{
    return m_anger_isSet;
}

bool OAIEmotion::is_anger_Valid() const{
    return m_anger_isValid;
}

double OAIEmotion::getContempt() const {
    return m_contempt;
}
void OAIEmotion::setContempt(const double &contempt) {
    m_contempt = contempt;
    m_contempt_isSet = true;
}

bool OAIEmotion::is_contempt_Set() const{
    return m_contempt_isSet;
}

bool OAIEmotion::is_contempt_Valid() const{
    return m_contempt_isValid;
}

double OAIEmotion::getDisgust() const {
    return m_disgust;
}
void OAIEmotion::setDisgust(const double &disgust) {
    m_disgust = disgust;
    m_disgust_isSet = true;
}

bool OAIEmotion::is_disgust_Set() const{
    return m_disgust_isSet;
}

bool OAIEmotion::is_disgust_Valid() const{
    return m_disgust_isValid;
}

double OAIEmotion::getFear() const {
    return m_fear;
}
void OAIEmotion::setFear(const double &fear) {
    m_fear = fear;
    m_fear_isSet = true;
}

bool OAIEmotion::is_fear_Set() const{
    return m_fear_isSet;
}

bool OAIEmotion::is_fear_Valid() const{
    return m_fear_isValid;
}

double OAIEmotion::getHappiness() const {
    return m_happiness;
}
void OAIEmotion::setHappiness(const double &happiness) {
    m_happiness = happiness;
    m_happiness_isSet = true;
}

bool OAIEmotion::is_happiness_Set() const{
    return m_happiness_isSet;
}

bool OAIEmotion::is_happiness_Valid() const{
    return m_happiness_isValid;
}

double OAIEmotion::getNeutral() const {
    return m_neutral;
}
void OAIEmotion::setNeutral(const double &neutral) {
    m_neutral = neutral;
    m_neutral_isSet = true;
}

bool OAIEmotion::is_neutral_Set() const{
    return m_neutral_isSet;
}

bool OAIEmotion::is_neutral_Valid() const{
    return m_neutral_isValid;
}

double OAIEmotion::getSadness() const {
    return m_sadness;
}
void OAIEmotion::setSadness(const double &sadness) {
    m_sadness = sadness;
    m_sadness_isSet = true;
}

bool OAIEmotion::is_sadness_Set() const{
    return m_sadness_isSet;
}

bool OAIEmotion::is_sadness_Valid() const{
    return m_sadness_isValid;
}

double OAIEmotion::getSurprise() const {
    return m_surprise;
}
void OAIEmotion::setSurprise(const double &surprise) {
    m_surprise = surprise;
    m_surprise_isSet = true;
}

bool OAIEmotion::is_surprise_Set() const{
    return m_surprise_isSet;
}

bool OAIEmotion::is_surprise_Valid() const{
    return m_surprise_isValid;
}

bool OAIEmotion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disgust_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fear_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_happiness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neutral_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sadness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surprise_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmotion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
