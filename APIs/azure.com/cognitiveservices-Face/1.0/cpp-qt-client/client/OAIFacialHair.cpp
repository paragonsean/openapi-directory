/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacialHair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacialHair::OAIFacialHair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacialHair::OAIFacialHair() {
    this->initializeModel();
}

OAIFacialHair::~OAIFacialHair() {}

void OAIFacialHair::initializeModel() {

    m_beard_isSet = false;
    m_beard_isValid = false;

    m_moustache_isSet = false;
    m_moustache_isValid = false;

    m_sideburns_isSet = false;
    m_sideburns_isValid = false;
}

void OAIFacialHair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacialHair::fromJsonObject(QJsonObject json) {

    m_beard_isValid = ::OpenAPI::fromJsonValue(m_beard, json[QString("beard")]);
    m_beard_isSet = !json[QString("beard")].isNull() && m_beard_isValid;

    m_moustache_isValid = ::OpenAPI::fromJsonValue(m_moustache, json[QString("moustache")]);
    m_moustache_isSet = !json[QString("moustache")].isNull() && m_moustache_isValid;

    m_sideburns_isValid = ::OpenAPI::fromJsonValue(m_sideburns, json[QString("sideburns")]);
    m_sideburns_isSet = !json[QString("sideburns")].isNull() && m_sideburns_isValid;
}

QString OAIFacialHair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacialHair::asJsonObject() const {
    QJsonObject obj;
    if (m_beard_isSet) {
        obj.insert(QString("beard"), ::OpenAPI::toJsonValue(m_beard));
    }
    if (m_moustache_isSet) {
        obj.insert(QString("moustache"), ::OpenAPI::toJsonValue(m_moustache));
    }
    if (m_sideburns_isSet) {
        obj.insert(QString("sideburns"), ::OpenAPI::toJsonValue(m_sideburns));
    }
    return obj;
}

double OAIFacialHair::getBeard() const {
    return m_beard;
}
void OAIFacialHair::setBeard(const double &beard) {
    m_beard = beard;
    m_beard_isSet = true;
}

bool OAIFacialHair::is_beard_Set() const{
    return m_beard_isSet;
}

bool OAIFacialHair::is_beard_Valid() const{
    return m_beard_isValid;
}

double OAIFacialHair::getMoustache() const {
    return m_moustache;
}
void OAIFacialHair::setMoustache(const double &moustache) {
    m_moustache = moustache;
    m_moustache_isSet = true;
}

bool OAIFacialHair::is_moustache_Set() const{
    return m_moustache_isSet;
}

bool OAIFacialHair::is_moustache_Valid() const{
    return m_moustache_isValid;
}

double OAIFacialHair::getSideburns() const {
    return m_sideburns;
}
void OAIFacialHair::setSideburns(const double &sideburns) {
    m_sideburns = sideburns;
    m_sideburns_isSet = true;
}

bool OAIFacialHair::is_sideburns_Set() const{
    return m_sideburns_isSet;
}

bool OAIFacialHair::is_sideburns_Valid() const{
    return m_sideburns_isValid;
}

bool OAIFacialHair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moustache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sideburns_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacialHair::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
