/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindSimilarRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindSimilarRequest::OAIFindSimilarRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindSimilarRequest::OAIFindSimilarRequest() {
    this->initializeModel();
}

OAIFindSimilarRequest::~OAIFindSimilarRequest() {}

void OAIFindSimilarRequest::initializeModel() {

    m_face_id_isSet = false;
    m_face_id_isValid = false;

    m_face_ids_isSet = false;
    m_face_ids_isValid = false;

    m_face_list_id_isSet = false;
    m_face_list_id_isValid = false;

    m_large_face_list_id_isSet = false;
    m_large_face_list_id_isValid = false;

    m_max_num_of_candidates_returned_isSet = false;
    m_max_num_of_candidates_returned_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;
}

void OAIFindSimilarRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindSimilarRequest::fromJsonObject(QJsonObject json) {

    m_face_id_isValid = ::OpenAPI::fromJsonValue(m_face_id, json[QString("faceId")]);
    m_face_id_isSet = !json[QString("faceId")].isNull() && m_face_id_isValid;

    m_face_ids_isValid = ::OpenAPI::fromJsonValue(m_face_ids, json[QString("faceIds")]);
    m_face_ids_isSet = !json[QString("faceIds")].isNull() && m_face_ids_isValid;

    m_face_list_id_isValid = ::OpenAPI::fromJsonValue(m_face_list_id, json[QString("faceListId")]);
    m_face_list_id_isSet = !json[QString("faceListId")].isNull() && m_face_list_id_isValid;

    m_large_face_list_id_isValid = ::OpenAPI::fromJsonValue(m_large_face_list_id, json[QString("largeFaceListId")]);
    m_large_face_list_id_isSet = !json[QString("largeFaceListId")].isNull() && m_large_face_list_id_isValid;

    m_max_num_of_candidates_returned_isValid = ::OpenAPI::fromJsonValue(m_max_num_of_candidates_returned, json[QString("maxNumOfCandidatesReturned")]);
    m_max_num_of_candidates_returned_isSet = !json[QString("maxNumOfCandidatesReturned")].isNull() && m_max_num_of_candidates_returned_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;
}

QString OAIFindSimilarRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindSimilarRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_face_id_isSet) {
        obj.insert(QString("faceId"), ::OpenAPI::toJsonValue(m_face_id));
    }
    if (m_face_ids.size() > 0) {
        obj.insert(QString("faceIds"), ::OpenAPI::toJsonValue(m_face_ids));
    }
    if (m_face_list_id_isSet) {
        obj.insert(QString("faceListId"), ::OpenAPI::toJsonValue(m_face_list_id));
    }
    if (m_large_face_list_id_isSet) {
        obj.insert(QString("largeFaceListId"), ::OpenAPI::toJsonValue(m_large_face_list_id));
    }
    if (m_max_num_of_candidates_returned_isSet) {
        obj.insert(QString("maxNumOfCandidatesReturned"), ::OpenAPI::toJsonValue(m_max_num_of_candidates_returned));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    return obj;
}

QString OAIFindSimilarRequest::getFaceId() const {
    return m_face_id;
}
void OAIFindSimilarRequest::setFaceId(const QString &face_id) {
    m_face_id = face_id;
    m_face_id_isSet = true;
}

bool OAIFindSimilarRequest::is_face_id_Set() const{
    return m_face_id_isSet;
}

bool OAIFindSimilarRequest::is_face_id_Valid() const{
    return m_face_id_isValid;
}

QList<QString> OAIFindSimilarRequest::getFaceIds() const {
    return m_face_ids;
}
void OAIFindSimilarRequest::setFaceIds(const QList<QString> &face_ids) {
    m_face_ids = face_ids;
    m_face_ids_isSet = true;
}

bool OAIFindSimilarRequest::is_face_ids_Set() const{
    return m_face_ids_isSet;
}

bool OAIFindSimilarRequest::is_face_ids_Valid() const{
    return m_face_ids_isValid;
}

QString OAIFindSimilarRequest::getFaceListId() const {
    return m_face_list_id;
}
void OAIFindSimilarRequest::setFaceListId(const QString &face_list_id) {
    m_face_list_id = face_list_id;
    m_face_list_id_isSet = true;
}

bool OAIFindSimilarRequest::is_face_list_id_Set() const{
    return m_face_list_id_isSet;
}

bool OAIFindSimilarRequest::is_face_list_id_Valid() const{
    return m_face_list_id_isValid;
}

QString OAIFindSimilarRequest::getLargeFaceListId() const {
    return m_large_face_list_id;
}
void OAIFindSimilarRequest::setLargeFaceListId(const QString &large_face_list_id) {
    m_large_face_list_id = large_face_list_id;
    m_large_face_list_id_isSet = true;
}

bool OAIFindSimilarRequest::is_large_face_list_id_Set() const{
    return m_large_face_list_id_isSet;
}

bool OAIFindSimilarRequest::is_large_face_list_id_Valid() const{
    return m_large_face_list_id_isValid;
}

qint32 OAIFindSimilarRequest::getMaxNumOfCandidatesReturned() const {
    return m_max_num_of_candidates_returned;
}
void OAIFindSimilarRequest::setMaxNumOfCandidatesReturned(const qint32 &max_num_of_candidates_returned) {
    m_max_num_of_candidates_returned = max_num_of_candidates_returned;
    m_max_num_of_candidates_returned_isSet = true;
}

bool OAIFindSimilarRequest::is_max_num_of_candidates_returned_Set() const{
    return m_max_num_of_candidates_returned_isSet;
}

bool OAIFindSimilarRequest::is_max_num_of_candidates_returned_Valid() const{
    return m_max_num_of_candidates_returned_isValid;
}

QString OAIFindSimilarRequest::getMode() const {
    return m_mode;
}
void OAIFindSimilarRequest::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIFindSimilarRequest::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIFindSimilarRequest::is_mode_Valid() const{
    return m_mode_isValid;
}

bool OAIFindSimilarRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_face_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_face_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_num_of_candidates_returned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindSimilarRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_face_id_isValid && true;
}

} // namespace OpenAPI
