/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFaceLandmarks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFaceLandmarks::OAIFaceLandmarks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFaceLandmarks::OAIFaceLandmarks() {
    this->initializeModel();
}

OAIFaceLandmarks::~OAIFaceLandmarks() {}

void OAIFaceLandmarks::initializeModel() {

    m_eye_left_bottom_isSet = false;
    m_eye_left_bottom_isValid = false;

    m_eye_left_inner_isSet = false;
    m_eye_left_inner_isValid = false;

    m_eye_left_outer_isSet = false;
    m_eye_left_outer_isValid = false;

    m_eye_left_top_isSet = false;
    m_eye_left_top_isValid = false;

    m_eye_right_bottom_isSet = false;
    m_eye_right_bottom_isValid = false;

    m_eye_right_inner_isSet = false;
    m_eye_right_inner_isValid = false;

    m_eye_right_outer_isSet = false;
    m_eye_right_outer_isValid = false;

    m_eye_right_top_isSet = false;
    m_eye_right_top_isValid = false;

    m_eyebrow_left_inner_isSet = false;
    m_eyebrow_left_inner_isValid = false;

    m_eyebrow_left_outer_isSet = false;
    m_eyebrow_left_outer_isValid = false;

    m_eyebrow_right_inner_isSet = false;
    m_eyebrow_right_inner_isValid = false;

    m_eyebrow_right_outer_isSet = false;
    m_eyebrow_right_outer_isValid = false;

    m_mouth_left_isSet = false;
    m_mouth_left_isValid = false;

    m_mouth_right_isSet = false;
    m_mouth_right_isValid = false;

    m_nose_left_alar_out_tip_isSet = false;
    m_nose_left_alar_out_tip_isValid = false;

    m_nose_left_alar_top_isSet = false;
    m_nose_left_alar_top_isValid = false;

    m_nose_right_alar_out_tip_isSet = false;
    m_nose_right_alar_out_tip_isValid = false;

    m_nose_right_alar_top_isSet = false;
    m_nose_right_alar_top_isValid = false;

    m_nose_root_left_isSet = false;
    m_nose_root_left_isValid = false;

    m_nose_root_right_isSet = false;
    m_nose_root_right_isValid = false;

    m_nose_tip_isSet = false;
    m_nose_tip_isValid = false;

    m_pupil_left_isSet = false;
    m_pupil_left_isValid = false;

    m_pupil_right_isSet = false;
    m_pupil_right_isValid = false;

    m_under_lip_bottom_isSet = false;
    m_under_lip_bottom_isValid = false;

    m_under_lip_top_isSet = false;
    m_under_lip_top_isValid = false;

    m_upper_lip_bottom_isSet = false;
    m_upper_lip_bottom_isValid = false;

    m_upper_lip_top_isSet = false;
    m_upper_lip_top_isValid = false;
}

void OAIFaceLandmarks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFaceLandmarks::fromJsonObject(QJsonObject json) {

    m_eye_left_bottom_isValid = ::OpenAPI::fromJsonValue(m_eye_left_bottom, json[QString("eyeLeftBottom")]);
    m_eye_left_bottom_isSet = !json[QString("eyeLeftBottom")].isNull() && m_eye_left_bottom_isValid;

    m_eye_left_inner_isValid = ::OpenAPI::fromJsonValue(m_eye_left_inner, json[QString("eyeLeftInner")]);
    m_eye_left_inner_isSet = !json[QString("eyeLeftInner")].isNull() && m_eye_left_inner_isValid;

    m_eye_left_outer_isValid = ::OpenAPI::fromJsonValue(m_eye_left_outer, json[QString("eyeLeftOuter")]);
    m_eye_left_outer_isSet = !json[QString("eyeLeftOuter")].isNull() && m_eye_left_outer_isValid;

    m_eye_left_top_isValid = ::OpenAPI::fromJsonValue(m_eye_left_top, json[QString("eyeLeftTop")]);
    m_eye_left_top_isSet = !json[QString("eyeLeftTop")].isNull() && m_eye_left_top_isValid;

    m_eye_right_bottom_isValid = ::OpenAPI::fromJsonValue(m_eye_right_bottom, json[QString("eyeRightBottom")]);
    m_eye_right_bottom_isSet = !json[QString("eyeRightBottom")].isNull() && m_eye_right_bottom_isValid;

    m_eye_right_inner_isValid = ::OpenAPI::fromJsonValue(m_eye_right_inner, json[QString("eyeRightInner")]);
    m_eye_right_inner_isSet = !json[QString("eyeRightInner")].isNull() && m_eye_right_inner_isValid;

    m_eye_right_outer_isValid = ::OpenAPI::fromJsonValue(m_eye_right_outer, json[QString("eyeRightOuter")]);
    m_eye_right_outer_isSet = !json[QString("eyeRightOuter")].isNull() && m_eye_right_outer_isValid;

    m_eye_right_top_isValid = ::OpenAPI::fromJsonValue(m_eye_right_top, json[QString("eyeRightTop")]);
    m_eye_right_top_isSet = !json[QString("eyeRightTop")].isNull() && m_eye_right_top_isValid;

    m_eyebrow_left_inner_isValid = ::OpenAPI::fromJsonValue(m_eyebrow_left_inner, json[QString("eyebrowLeftInner")]);
    m_eyebrow_left_inner_isSet = !json[QString("eyebrowLeftInner")].isNull() && m_eyebrow_left_inner_isValid;

    m_eyebrow_left_outer_isValid = ::OpenAPI::fromJsonValue(m_eyebrow_left_outer, json[QString("eyebrowLeftOuter")]);
    m_eyebrow_left_outer_isSet = !json[QString("eyebrowLeftOuter")].isNull() && m_eyebrow_left_outer_isValid;

    m_eyebrow_right_inner_isValid = ::OpenAPI::fromJsonValue(m_eyebrow_right_inner, json[QString("eyebrowRightInner")]);
    m_eyebrow_right_inner_isSet = !json[QString("eyebrowRightInner")].isNull() && m_eyebrow_right_inner_isValid;

    m_eyebrow_right_outer_isValid = ::OpenAPI::fromJsonValue(m_eyebrow_right_outer, json[QString("eyebrowRightOuter")]);
    m_eyebrow_right_outer_isSet = !json[QString("eyebrowRightOuter")].isNull() && m_eyebrow_right_outer_isValid;

    m_mouth_left_isValid = ::OpenAPI::fromJsonValue(m_mouth_left, json[QString("mouthLeft")]);
    m_mouth_left_isSet = !json[QString("mouthLeft")].isNull() && m_mouth_left_isValid;

    m_mouth_right_isValid = ::OpenAPI::fromJsonValue(m_mouth_right, json[QString("mouthRight")]);
    m_mouth_right_isSet = !json[QString("mouthRight")].isNull() && m_mouth_right_isValid;

    m_nose_left_alar_out_tip_isValid = ::OpenAPI::fromJsonValue(m_nose_left_alar_out_tip, json[QString("noseLeftAlarOutTip")]);
    m_nose_left_alar_out_tip_isSet = !json[QString("noseLeftAlarOutTip")].isNull() && m_nose_left_alar_out_tip_isValid;

    m_nose_left_alar_top_isValid = ::OpenAPI::fromJsonValue(m_nose_left_alar_top, json[QString("noseLeftAlarTop")]);
    m_nose_left_alar_top_isSet = !json[QString("noseLeftAlarTop")].isNull() && m_nose_left_alar_top_isValid;

    m_nose_right_alar_out_tip_isValid = ::OpenAPI::fromJsonValue(m_nose_right_alar_out_tip, json[QString("noseRightAlarOutTip")]);
    m_nose_right_alar_out_tip_isSet = !json[QString("noseRightAlarOutTip")].isNull() && m_nose_right_alar_out_tip_isValid;

    m_nose_right_alar_top_isValid = ::OpenAPI::fromJsonValue(m_nose_right_alar_top, json[QString("noseRightAlarTop")]);
    m_nose_right_alar_top_isSet = !json[QString("noseRightAlarTop")].isNull() && m_nose_right_alar_top_isValid;

    m_nose_root_left_isValid = ::OpenAPI::fromJsonValue(m_nose_root_left, json[QString("noseRootLeft")]);
    m_nose_root_left_isSet = !json[QString("noseRootLeft")].isNull() && m_nose_root_left_isValid;

    m_nose_root_right_isValid = ::OpenAPI::fromJsonValue(m_nose_root_right, json[QString("noseRootRight")]);
    m_nose_root_right_isSet = !json[QString("noseRootRight")].isNull() && m_nose_root_right_isValid;

    m_nose_tip_isValid = ::OpenAPI::fromJsonValue(m_nose_tip, json[QString("noseTip")]);
    m_nose_tip_isSet = !json[QString("noseTip")].isNull() && m_nose_tip_isValid;

    m_pupil_left_isValid = ::OpenAPI::fromJsonValue(m_pupil_left, json[QString("pupilLeft")]);
    m_pupil_left_isSet = !json[QString("pupilLeft")].isNull() && m_pupil_left_isValid;

    m_pupil_right_isValid = ::OpenAPI::fromJsonValue(m_pupil_right, json[QString("pupilRight")]);
    m_pupil_right_isSet = !json[QString("pupilRight")].isNull() && m_pupil_right_isValid;

    m_under_lip_bottom_isValid = ::OpenAPI::fromJsonValue(m_under_lip_bottom, json[QString("underLipBottom")]);
    m_under_lip_bottom_isSet = !json[QString("underLipBottom")].isNull() && m_under_lip_bottom_isValid;

    m_under_lip_top_isValid = ::OpenAPI::fromJsonValue(m_under_lip_top, json[QString("underLipTop")]);
    m_under_lip_top_isSet = !json[QString("underLipTop")].isNull() && m_under_lip_top_isValid;

    m_upper_lip_bottom_isValid = ::OpenAPI::fromJsonValue(m_upper_lip_bottom, json[QString("upperLipBottom")]);
    m_upper_lip_bottom_isSet = !json[QString("upperLipBottom")].isNull() && m_upper_lip_bottom_isValid;

    m_upper_lip_top_isValid = ::OpenAPI::fromJsonValue(m_upper_lip_top, json[QString("upperLipTop")]);
    m_upper_lip_top_isSet = !json[QString("upperLipTop")].isNull() && m_upper_lip_top_isValid;
}

QString OAIFaceLandmarks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFaceLandmarks::asJsonObject() const {
    QJsonObject obj;
    if (m_eye_left_bottom.isSet()) {
        obj.insert(QString("eyeLeftBottom"), ::OpenAPI::toJsonValue(m_eye_left_bottom));
    }
    if (m_eye_left_inner.isSet()) {
        obj.insert(QString("eyeLeftInner"), ::OpenAPI::toJsonValue(m_eye_left_inner));
    }
    if (m_eye_left_outer.isSet()) {
        obj.insert(QString("eyeLeftOuter"), ::OpenAPI::toJsonValue(m_eye_left_outer));
    }
    if (m_eye_left_top.isSet()) {
        obj.insert(QString("eyeLeftTop"), ::OpenAPI::toJsonValue(m_eye_left_top));
    }
    if (m_eye_right_bottom.isSet()) {
        obj.insert(QString("eyeRightBottom"), ::OpenAPI::toJsonValue(m_eye_right_bottom));
    }
    if (m_eye_right_inner.isSet()) {
        obj.insert(QString("eyeRightInner"), ::OpenAPI::toJsonValue(m_eye_right_inner));
    }
    if (m_eye_right_outer.isSet()) {
        obj.insert(QString("eyeRightOuter"), ::OpenAPI::toJsonValue(m_eye_right_outer));
    }
    if (m_eye_right_top.isSet()) {
        obj.insert(QString("eyeRightTop"), ::OpenAPI::toJsonValue(m_eye_right_top));
    }
    if (m_eyebrow_left_inner.isSet()) {
        obj.insert(QString("eyebrowLeftInner"), ::OpenAPI::toJsonValue(m_eyebrow_left_inner));
    }
    if (m_eyebrow_left_outer.isSet()) {
        obj.insert(QString("eyebrowLeftOuter"), ::OpenAPI::toJsonValue(m_eyebrow_left_outer));
    }
    if (m_eyebrow_right_inner.isSet()) {
        obj.insert(QString("eyebrowRightInner"), ::OpenAPI::toJsonValue(m_eyebrow_right_inner));
    }
    if (m_eyebrow_right_outer.isSet()) {
        obj.insert(QString("eyebrowRightOuter"), ::OpenAPI::toJsonValue(m_eyebrow_right_outer));
    }
    if (m_mouth_left.isSet()) {
        obj.insert(QString("mouthLeft"), ::OpenAPI::toJsonValue(m_mouth_left));
    }
    if (m_mouth_right.isSet()) {
        obj.insert(QString("mouthRight"), ::OpenAPI::toJsonValue(m_mouth_right));
    }
    if (m_nose_left_alar_out_tip.isSet()) {
        obj.insert(QString("noseLeftAlarOutTip"), ::OpenAPI::toJsonValue(m_nose_left_alar_out_tip));
    }
    if (m_nose_left_alar_top.isSet()) {
        obj.insert(QString("noseLeftAlarTop"), ::OpenAPI::toJsonValue(m_nose_left_alar_top));
    }
    if (m_nose_right_alar_out_tip.isSet()) {
        obj.insert(QString("noseRightAlarOutTip"), ::OpenAPI::toJsonValue(m_nose_right_alar_out_tip));
    }
    if (m_nose_right_alar_top.isSet()) {
        obj.insert(QString("noseRightAlarTop"), ::OpenAPI::toJsonValue(m_nose_right_alar_top));
    }
    if (m_nose_root_left.isSet()) {
        obj.insert(QString("noseRootLeft"), ::OpenAPI::toJsonValue(m_nose_root_left));
    }
    if (m_nose_root_right.isSet()) {
        obj.insert(QString("noseRootRight"), ::OpenAPI::toJsonValue(m_nose_root_right));
    }
    if (m_nose_tip.isSet()) {
        obj.insert(QString("noseTip"), ::OpenAPI::toJsonValue(m_nose_tip));
    }
    if (m_pupil_left.isSet()) {
        obj.insert(QString("pupilLeft"), ::OpenAPI::toJsonValue(m_pupil_left));
    }
    if (m_pupil_right.isSet()) {
        obj.insert(QString("pupilRight"), ::OpenAPI::toJsonValue(m_pupil_right));
    }
    if (m_under_lip_bottom.isSet()) {
        obj.insert(QString("underLipBottom"), ::OpenAPI::toJsonValue(m_under_lip_bottom));
    }
    if (m_under_lip_top.isSet()) {
        obj.insert(QString("underLipTop"), ::OpenAPI::toJsonValue(m_under_lip_top));
    }
    if (m_upper_lip_bottom.isSet()) {
        obj.insert(QString("upperLipBottom"), ::OpenAPI::toJsonValue(m_upper_lip_bottom));
    }
    if (m_upper_lip_top.isSet()) {
        obj.insert(QString("upperLipTop"), ::OpenAPI::toJsonValue(m_upper_lip_top));
    }
    return obj;
}

OAICoordinate OAIFaceLandmarks::getEyeLeftBottom() const {
    return m_eye_left_bottom;
}
void OAIFaceLandmarks::setEyeLeftBottom(const OAICoordinate &eye_left_bottom) {
    m_eye_left_bottom = eye_left_bottom;
    m_eye_left_bottom_isSet = true;
}

bool OAIFaceLandmarks::is_eye_left_bottom_Set() const{
    return m_eye_left_bottom_isSet;
}

bool OAIFaceLandmarks::is_eye_left_bottom_Valid() const{
    return m_eye_left_bottom_isValid;
}

OAICoordinate OAIFaceLandmarks::getEyeLeftInner() const {
    return m_eye_left_inner;
}
void OAIFaceLandmarks::setEyeLeftInner(const OAICoordinate &eye_left_inner) {
    m_eye_left_inner = eye_left_inner;
    m_eye_left_inner_isSet = true;
}

bool OAIFaceLandmarks::is_eye_left_inner_Set() const{
    return m_eye_left_inner_isSet;
}

bool OAIFaceLandmarks::is_eye_left_inner_Valid() const{
    return m_eye_left_inner_isValid;
}

OAICoordinate OAIFaceLandmarks::getEyeLeftOuter() const {
    return m_eye_left_outer;
}
void OAIFaceLandmarks::setEyeLeftOuter(const OAICoordinate &eye_left_outer) {
    m_eye_left_outer = eye_left_outer;
    m_eye_left_outer_isSet = true;
}

bool OAIFaceLandmarks::is_eye_left_outer_Set() const{
    return m_eye_left_outer_isSet;
}

bool OAIFaceLandmarks::is_eye_left_outer_Valid() const{
    return m_eye_left_outer_isValid;
}

OAICoordinate OAIFaceLandmarks::getEyeLeftTop() const {
    return m_eye_left_top;
}
void OAIFaceLandmarks::setEyeLeftTop(const OAICoordinate &eye_left_top) {
    m_eye_left_top = eye_left_top;
    m_eye_left_top_isSet = true;
}

bool OAIFaceLandmarks::is_eye_left_top_Set() const{
    return m_eye_left_top_isSet;
}

bool OAIFaceLandmarks::is_eye_left_top_Valid() const{
    return m_eye_left_top_isValid;
}

OAICoordinate OAIFaceLandmarks::getEyeRightBottom() const {
    return m_eye_right_bottom;
}
void OAIFaceLandmarks::setEyeRightBottom(const OAICoordinate &eye_right_bottom) {
    m_eye_right_bottom = eye_right_bottom;
    m_eye_right_bottom_isSet = true;
}

bool OAIFaceLandmarks::is_eye_right_bottom_Set() const{
    return m_eye_right_bottom_isSet;
}

bool OAIFaceLandmarks::is_eye_right_bottom_Valid() const{
    return m_eye_right_bottom_isValid;
}

OAICoordinate OAIFaceLandmarks::getEyeRightInner() const {
    return m_eye_right_inner;
}
void OAIFaceLandmarks::setEyeRightInner(const OAICoordinate &eye_right_inner) {
    m_eye_right_inner = eye_right_inner;
    m_eye_right_inner_isSet = true;
}

bool OAIFaceLandmarks::is_eye_right_inner_Set() const{
    return m_eye_right_inner_isSet;
}

bool OAIFaceLandmarks::is_eye_right_inner_Valid() const{
    return m_eye_right_inner_isValid;
}

OAICoordinate OAIFaceLandmarks::getEyeRightOuter() const {
    return m_eye_right_outer;
}
void OAIFaceLandmarks::setEyeRightOuter(const OAICoordinate &eye_right_outer) {
    m_eye_right_outer = eye_right_outer;
    m_eye_right_outer_isSet = true;
}

bool OAIFaceLandmarks::is_eye_right_outer_Set() const{
    return m_eye_right_outer_isSet;
}

bool OAIFaceLandmarks::is_eye_right_outer_Valid() const{
    return m_eye_right_outer_isValid;
}

OAICoordinate OAIFaceLandmarks::getEyeRightTop() const {
    return m_eye_right_top;
}
void OAIFaceLandmarks::setEyeRightTop(const OAICoordinate &eye_right_top) {
    m_eye_right_top = eye_right_top;
    m_eye_right_top_isSet = true;
}

bool OAIFaceLandmarks::is_eye_right_top_Set() const{
    return m_eye_right_top_isSet;
}

bool OAIFaceLandmarks::is_eye_right_top_Valid() const{
    return m_eye_right_top_isValid;
}

OAICoordinate OAIFaceLandmarks::getEyebrowLeftInner() const {
    return m_eyebrow_left_inner;
}
void OAIFaceLandmarks::setEyebrowLeftInner(const OAICoordinate &eyebrow_left_inner) {
    m_eyebrow_left_inner = eyebrow_left_inner;
    m_eyebrow_left_inner_isSet = true;
}

bool OAIFaceLandmarks::is_eyebrow_left_inner_Set() const{
    return m_eyebrow_left_inner_isSet;
}

bool OAIFaceLandmarks::is_eyebrow_left_inner_Valid() const{
    return m_eyebrow_left_inner_isValid;
}

OAICoordinate OAIFaceLandmarks::getEyebrowLeftOuter() const {
    return m_eyebrow_left_outer;
}
void OAIFaceLandmarks::setEyebrowLeftOuter(const OAICoordinate &eyebrow_left_outer) {
    m_eyebrow_left_outer = eyebrow_left_outer;
    m_eyebrow_left_outer_isSet = true;
}

bool OAIFaceLandmarks::is_eyebrow_left_outer_Set() const{
    return m_eyebrow_left_outer_isSet;
}

bool OAIFaceLandmarks::is_eyebrow_left_outer_Valid() const{
    return m_eyebrow_left_outer_isValid;
}

OAICoordinate OAIFaceLandmarks::getEyebrowRightInner() const {
    return m_eyebrow_right_inner;
}
void OAIFaceLandmarks::setEyebrowRightInner(const OAICoordinate &eyebrow_right_inner) {
    m_eyebrow_right_inner = eyebrow_right_inner;
    m_eyebrow_right_inner_isSet = true;
}

bool OAIFaceLandmarks::is_eyebrow_right_inner_Set() const{
    return m_eyebrow_right_inner_isSet;
}

bool OAIFaceLandmarks::is_eyebrow_right_inner_Valid() const{
    return m_eyebrow_right_inner_isValid;
}

OAICoordinate OAIFaceLandmarks::getEyebrowRightOuter() const {
    return m_eyebrow_right_outer;
}
void OAIFaceLandmarks::setEyebrowRightOuter(const OAICoordinate &eyebrow_right_outer) {
    m_eyebrow_right_outer = eyebrow_right_outer;
    m_eyebrow_right_outer_isSet = true;
}

bool OAIFaceLandmarks::is_eyebrow_right_outer_Set() const{
    return m_eyebrow_right_outer_isSet;
}

bool OAIFaceLandmarks::is_eyebrow_right_outer_Valid() const{
    return m_eyebrow_right_outer_isValid;
}

OAICoordinate OAIFaceLandmarks::getMouthLeft() const {
    return m_mouth_left;
}
void OAIFaceLandmarks::setMouthLeft(const OAICoordinate &mouth_left) {
    m_mouth_left = mouth_left;
    m_mouth_left_isSet = true;
}

bool OAIFaceLandmarks::is_mouth_left_Set() const{
    return m_mouth_left_isSet;
}

bool OAIFaceLandmarks::is_mouth_left_Valid() const{
    return m_mouth_left_isValid;
}

OAICoordinate OAIFaceLandmarks::getMouthRight() const {
    return m_mouth_right;
}
void OAIFaceLandmarks::setMouthRight(const OAICoordinate &mouth_right) {
    m_mouth_right = mouth_right;
    m_mouth_right_isSet = true;
}

bool OAIFaceLandmarks::is_mouth_right_Set() const{
    return m_mouth_right_isSet;
}

bool OAIFaceLandmarks::is_mouth_right_Valid() const{
    return m_mouth_right_isValid;
}

OAICoordinate OAIFaceLandmarks::getNoseLeftAlarOutTip() const {
    return m_nose_left_alar_out_tip;
}
void OAIFaceLandmarks::setNoseLeftAlarOutTip(const OAICoordinate &nose_left_alar_out_tip) {
    m_nose_left_alar_out_tip = nose_left_alar_out_tip;
    m_nose_left_alar_out_tip_isSet = true;
}

bool OAIFaceLandmarks::is_nose_left_alar_out_tip_Set() const{
    return m_nose_left_alar_out_tip_isSet;
}

bool OAIFaceLandmarks::is_nose_left_alar_out_tip_Valid() const{
    return m_nose_left_alar_out_tip_isValid;
}

OAICoordinate OAIFaceLandmarks::getNoseLeftAlarTop() const {
    return m_nose_left_alar_top;
}
void OAIFaceLandmarks::setNoseLeftAlarTop(const OAICoordinate &nose_left_alar_top) {
    m_nose_left_alar_top = nose_left_alar_top;
    m_nose_left_alar_top_isSet = true;
}

bool OAIFaceLandmarks::is_nose_left_alar_top_Set() const{
    return m_nose_left_alar_top_isSet;
}

bool OAIFaceLandmarks::is_nose_left_alar_top_Valid() const{
    return m_nose_left_alar_top_isValid;
}

OAICoordinate OAIFaceLandmarks::getNoseRightAlarOutTip() const {
    return m_nose_right_alar_out_tip;
}
void OAIFaceLandmarks::setNoseRightAlarOutTip(const OAICoordinate &nose_right_alar_out_tip) {
    m_nose_right_alar_out_tip = nose_right_alar_out_tip;
    m_nose_right_alar_out_tip_isSet = true;
}

bool OAIFaceLandmarks::is_nose_right_alar_out_tip_Set() const{
    return m_nose_right_alar_out_tip_isSet;
}

bool OAIFaceLandmarks::is_nose_right_alar_out_tip_Valid() const{
    return m_nose_right_alar_out_tip_isValid;
}

OAICoordinate OAIFaceLandmarks::getNoseRightAlarTop() const {
    return m_nose_right_alar_top;
}
void OAIFaceLandmarks::setNoseRightAlarTop(const OAICoordinate &nose_right_alar_top) {
    m_nose_right_alar_top = nose_right_alar_top;
    m_nose_right_alar_top_isSet = true;
}

bool OAIFaceLandmarks::is_nose_right_alar_top_Set() const{
    return m_nose_right_alar_top_isSet;
}

bool OAIFaceLandmarks::is_nose_right_alar_top_Valid() const{
    return m_nose_right_alar_top_isValid;
}

OAICoordinate OAIFaceLandmarks::getNoseRootLeft() const {
    return m_nose_root_left;
}
void OAIFaceLandmarks::setNoseRootLeft(const OAICoordinate &nose_root_left) {
    m_nose_root_left = nose_root_left;
    m_nose_root_left_isSet = true;
}

bool OAIFaceLandmarks::is_nose_root_left_Set() const{
    return m_nose_root_left_isSet;
}

bool OAIFaceLandmarks::is_nose_root_left_Valid() const{
    return m_nose_root_left_isValid;
}

OAICoordinate OAIFaceLandmarks::getNoseRootRight() const {
    return m_nose_root_right;
}
void OAIFaceLandmarks::setNoseRootRight(const OAICoordinate &nose_root_right) {
    m_nose_root_right = nose_root_right;
    m_nose_root_right_isSet = true;
}

bool OAIFaceLandmarks::is_nose_root_right_Set() const{
    return m_nose_root_right_isSet;
}

bool OAIFaceLandmarks::is_nose_root_right_Valid() const{
    return m_nose_root_right_isValid;
}

OAICoordinate OAIFaceLandmarks::getNoseTip() const {
    return m_nose_tip;
}
void OAIFaceLandmarks::setNoseTip(const OAICoordinate &nose_tip) {
    m_nose_tip = nose_tip;
    m_nose_tip_isSet = true;
}

bool OAIFaceLandmarks::is_nose_tip_Set() const{
    return m_nose_tip_isSet;
}

bool OAIFaceLandmarks::is_nose_tip_Valid() const{
    return m_nose_tip_isValid;
}

OAICoordinate OAIFaceLandmarks::getPupilLeft() const {
    return m_pupil_left;
}
void OAIFaceLandmarks::setPupilLeft(const OAICoordinate &pupil_left) {
    m_pupil_left = pupil_left;
    m_pupil_left_isSet = true;
}

bool OAIFaceLandmarks::is_pupil_left_Set() const{
    return m_pupil_left_isSet;
}

bool OAIFaceLandmarks::is_pupil_left_Valid() const{
    return m_pupil_left_isValid;
}

OAICoordinate OAIFaceLandmarks::getPupilRight() const {
    return m_pupil_right;
}
void OAIFaceLandmarks::setPupilRight(const OAICoordinate &pupil_right) {
    m_pupil_right = pupil_right;
    m_pupil_right_isSet = true;
}

bool OAIFaceLandmarks::is_pupil_right_Set() const{
    return m_pupil_right_isSet;
}

bool OAIFaceLandmarks::is_pupil_right_Valid() const{
    return m_pupil_right_isValid;
}

OAICoordinate OAIFaceLandmarks::getUnderLipBottom() const {
    return m_under_lip_bottom;
}
void OAIFaceLandmarks::setUnderLipBottom(const OAICoordinate &under_lip_bottom) {
    m_under_lip_bottom = under_lip_bottom;
    m_under_lip_bottom_isSet = true;
}

bool OAIFaceLandmarks::is_under_lip_bottom_Set() const{
    return m_under_lip_bottom_isSet;
}

bool OAIFaceLandmarks::is_under_lip_bottom_Valid() const{
    return m_under_lip_bottom_isValid;
}

OAICoordinate OAIFaceLandmarks::getUnderLipTop() const {
    return m_under_lip_top;
}
void OAIFaceLandmarks::setUnderLipTop(const OAICoordinate &under_lip_top) {
    m_under_lip_top = under_lip_top;
    m_under_lip_top_isSet = true;
}

bool OAIFaceLandmarks::is_under_lip_top_Set() const{
    return m_under_lip_top_isSet;
}

bool OAIFaceLandmarks::is_under_lip_top_Valid() const{
    return m_under_lip_top_isValid;
}

OAICoordinate OAIFaceLandmarks::getUpperLipBottom() const {
    return m_upper_lip_bottom;
}
void OAIFaceLandmarks::setUpperLipBottom(const OAICoordinate &upper_lip_bottom) {
    m_upper_lip_bottom = upper_lip_bottom;
    m_upper_lip_bottom_isSet = true;
}

bool OAIFaceLandmarks::is_upper_lip_bottom_Set() const{
    return m_upper_lip_bottom_isSet;
}

bool OAIFaceLandmarks::is_upper_lip_bottom_Valid() const{
    return m_upper_lip_bottom_isValid;
}

OAICoordinate OAIFaceLandmarks::getUpperLipTop() const {
    return m_upper_lip_top;
}
void OAIFaceLandmarks::setUpperLipTop(const OAICoordinate &upper_lip_top) {
    m_upper_lip_top = upper_lip_top;
    m_upper_lip_top_isSet = true;
}

bool OAIFaceLandmarks::is_upper_lip_top_Set() const{
    return m_upper_lip_top_isSet;
}

bool OAIFaceLandmarks::is_upper_lip_top_Valid() const{
    return m_upper_lip_top_isValid;
}

bool OAIFaceLandmarks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eye_left_bottom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eye_left_inner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eye_left_outer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eye_left_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eye_right_bottom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eye_right_inner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eye_right_outer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eye_right_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eyebrow_left_inner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eyebrow_left_outer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eyebrow_right_inner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eyebrow_right_outer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mouth_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mouth_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nose_left_alar_out_tip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nose_left_alar_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nose_right_alar_out_tip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nose_right_alar_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nose_root_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nose_root_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nose_tip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pupil_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pupil_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_under_lip_bottom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_under_lip_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_lip_bottom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_lip_top.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFaceLandmarks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
