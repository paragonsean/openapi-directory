/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentifyResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentifyResult::OAIIdentifyResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentifyResult::OAIIdentifyResult() {
    this->initializeModel();
}

OAIIdentifyResult::~OAIIdentifyResult() {}

void OAIIdentifyResult::initializeModel() {

    m_candidates_isSet = false;
    m_candidates_isValid = false;

    m_face_id_isSet = false;
    m_face_id_isValid = false;
}

void OAIIdentifyResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentifyResult::fromJsonObject(QJsonObject json) {

    m_candidates_isValid = ::OpenAPI::fromJsonValue(m_candidates, json[QString("candidates")]);
    m_candidates_isSet = !json[QString("candidates")].isNull() && m_candidates_isValid;

    m_face_id_isValid = ::OpenAPI::fromJsonValue(m_face_id, json[QString("faceId")]);
    m_face_id_isSet = !json[QString("faceId")].isNull() && m_face_id_isValid;
}

QString OAIIdentifyResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentifyResult::asJsonObject() const {
    QJsonObject obj;
    if (m_candidates.size() > 0) {
        obj.insert(QString("candidates"), ::OpenAPI::toJsonValue(m_candidates));
    }
    if (m_face_id_isSet) {
        obj.insert(QString("faceId"), ::OpenAPI::toJsonValue(m_face_id));
    }
    return obj;
}

QList<OAIIdentifyCandidate> OAIIdentifyResult::getCandidates() const {
    return m_candidates;
}
void OAIIdentifyResult::setCandidates(const QList<OAIIdentifyCandidate> &candidates) {
    m_candidates = candidates;
    m_candidates_isSet = true;
}

bool OAIIdentifyResult::is_candidates_Set() const{
    return m_candidates_isSet;
}

bool OAIIdentifyResult::is_candidates_Valid() const{
    return m_candidates_isValid;
}

QString OAIIdentifyResult::getFaceId() const {
    return m_face_id;
}
void OAIIdentifyResult::setFaceId(const QString &face_id) {
    m_face_id = face_id;
    m_face_id_isSet = true;
}

bool OAIIdentifyResult::is_face_id_Set() const{
    return m_face_id_isSet;
}

bool OAIIdentifyResult::is_face_id_Valid() const{
    return m_face_id_isValid;
}

bool OAIIdentifyResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentifyResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_candidates_isValid && m_face_id_isValid && true;
}

} // namespace OpenAPI
