/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationStatus::OAIOperationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationStatus::OAIOperationStatus() {
    this->initializeModel();
}

OAIOperationStatus::~OAIOperationStatus() {}

void OAIOperationStatus::initializeModel() {

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_action_time_isSet = false;
    m_last_action_time_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_resource_location_isSet = false;
    m_resource_location_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIOperationStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationStatus::fromJsonObject(QJsonObject json) {

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_last_action_time_isValid = ::OpenAPI::fromJsonValue(m_last_action_time, json[QString("lastActionTime")]);
    m_last_action_time_isSet = !json[QString("lastActionTime")].isNull() && m_last_action_time_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_resource_location_isValid = ::OpenAPI::fromJsonValue(m_resource_location, json[QString("resourceLocation")]);
    m_resource_location_isSet = !json[QString("resourceLocation")].isNull() && m_resource_location_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIOperationStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_action_time_isSet) {
        obj.insert(QString("lastActionTime"), ::OpenAPI::toJsonValue(m_last_action_time));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_resource_location_isSet) {
        obj.insert(QString("resourceLocation"), ::OpenAPI::toJsonValue(m_resource_location));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAIOperationStatus::getCreatedTime() const {
    return m_created_time;
}
void OAIOperationStatus::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIOperationStatus::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIOperationStatus::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIOperationStatus::getLastActionTime() const {
    return m_last_action_time;
}
void OAIOperationStatus::setLastActionTime(const QDateTime &last_action_time) {
    m_last_action_time = last_action_time;
    m_last_action_time_isSet = true;
}

bool OAIOperationStatus::is_last_action_time_Set() const{
    return m_last_action_time_isSet;
}

bool OAIOperationStatus::is_last_action_time_Valid() const{
    return m_last_action_time_isValid;
}

QString OAIOperationStatus::getMessage() const {
    return m_message;
}
void OAIOperationStatus::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIOperationStatus::is_message_Set() const{
    return m_message_isSet;
}

bool OAIOperationStatus::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIOperationStatus::getResourceLocation() const {
    return m_resource_location;
}
void OAIOperationStatus::setResourceLocation(const QString &resource_location) {
    m_resource_location = resource_location;
    m_resource_location_isSet = true;
}

bool OAIOperationStatus::is_resource_location_Set() const{
    return m_resource_location_isSet;
}

bool OAIOperationStatus::is_resource_location_Valid() const{
    return m_resource_location_isValid;
}

QString OAIOperationStatus::getStatus() const {
    return m_status;
}
void OAIOperationStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOperationStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOperationStatus::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIOperationStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_action_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_time_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
