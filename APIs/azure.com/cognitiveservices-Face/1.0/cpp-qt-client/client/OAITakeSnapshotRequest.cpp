/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITakeSnapshotRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITakeSnapshotRequest::OAITakeSnapshotRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITakeSnapshotRequest::OAITakeSnapshotRequest() {
    this->initializeModel();
}

OAITakeSnapshotRequest::~OAITakeSnapshotRequest() {}

void OAITakeSnapshotRequest::initializeModel() {

    m_apply_scope_isSet = false;
    m_apply_scope_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_data_isSet = false;
    m_user_data_isValid = false;
}

void OAITakeSnapshotRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITakeSnapshotRequest::fromJsonObject(QJsonObject json) {

    m_apply_scope_isValid = ::OpenAPI::fromJsonValue(m_apply_scope, json[QString("applyScope")]);
    m_apply_scope_isSet = !json[QString("applyScope")].isNull() && m_apply_scope_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_data_isValid = ::OpenAPI::fromJsonValue(m_user_data, json[QString("userData")]);
    m_user_data_isSet = !json[QString("userData")].isNull() && m_user_data_isValid;
}

QString OAITakeSnapshotRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITakeSnapshotRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_scope.size() > 0) {
        obj.insert(QString("applyScope"), ::OpenAPI::toJsonValue(m_apply_scope));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_data_isSet) {
        obj.insert(QString("userData"), ::OpenAPI::toJsonValue(m_user_data));
    }
    return obj;
}

QList<QString> OAITakeSnapshotRequest::getApplyScope() const {
    return m_apply_scope;
}
void OAITakeSnapshotRequest::setApplyScope(const QList<QString> &apply_scope) {
    m_apply_scope = apply_scope;
    m_apply_scope_isSet = true;
}

bool OAITakeSnapshotRequest::is_apply_scope_Set() const{
    return m_apply_scope_isSet;
}

bool OAITakeSnapshotRequest::is_apply_scope_Valid() const{
    return m_apply_scope_isValid;
}

QString OAITakeSnapshotRequest::getObjectId() const {
    return m_object_id;
}
void OAITakeSnapshotRequest::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAITakeSnapshotRequest::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAITakeSnapshotRequest::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAITakeSnapshotRequest::getType() const {
    return m_type;
}
void OAITakeSnapshotRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITakeSnapshotRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAITakeSnapshotRequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITakeSnapshotRequest::getUserData() const {
    return m_user_data;
}
void OAITakeSnapshotRequest::setUserData(const QString &user_data) {
    m_user_data = user_data;
    m_user_data_isSet = true;
}

bool OAITakeSnapshotRequest::is_user_data_Set() const{
    return m_user_data_isSet;
}

bool OAITakeSnapshotRequest::is_user_data_Valid() const{
    return m_user_data_isValid;
}

bool OAITakeSnapshotRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_scope.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITakeSnapshotRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_apply_scope_isValid && m_object_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
