/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFaceAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFaceAttributes::OAIFaceAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFaceAttributes::OAIFaceAttributes() {
    this->initializeModel();
}

OAIFaceAttributes::~OAIFaceAttributes() {}

void OAIFaceAttributes::initializeModel() {

    m_accessories_isSet = false;
    m_accessories_isValid = false;

    m_age_isSet = false;
    m_age_isValid = false;

    m_blur_isSet = false;
    m_blur_isValid = false;

    m_emotion_isSet = false;
    m_emotion_isValid = false;

    m_exposure_isSet = false;
    m_exposure_isValid = false;

    m_facial_hair_isSet = false;
    m_facial_hair_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_glasses_isSet = false;
    m_glasses_isValid = false;

    m_hair_isSet = false;
    m_hair_isValid = false;

    m_head_pose_isSet = false;
    m_head_pose_isValid = false;

    m_makeup_isSet = false;
    m_makeup_isValid = false;

    m_noise_isSet = false;
    m_noise_isValid = false;

    m_occlusion_isSet = false;
    m_occlusion_isValid = false;

    m_smile_isSet = false;
    m_smile_isValid = false;
}

void OAIFaceAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFaceAttributes::fromJsonObject(QJsonObject json) {

    m_accessories_isValid = ::OpenAPI::fromJsonValue(m_accessories, json[QString("accessories")]);
    m_accessories_isSet = !json[QString("accessories")].isNull() && m_accessories_isValid;

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_blur_isValid = ::OpenAPI::fromJsonValue(m_blur, json[QString("blur")]);
    m_blur_isSet = !json[QString("blur")].isNull() && m_blur_isValid;

    m_emotion_isValid = ::OpenAPI::fromJsonValue(m_emotion, json[QString("emotion")]);
    m_emotion_isSet = !json[QString("emotion")].isNull() && m_emotion_isValid;

    m_exposure_isValid = ::OpenAPI::fromJsonValue(m_exposure, json[QString("exposure")]);
    m_exposure_isSet = !json[QString("exposure")].isNull() && m_exposure_isValid;

    m_facial_hair_isValid = ::OpenAPI::fromJsonValue(m_facial_hair, json[QString("facialHair")]);
    m_facial_hair_isSet = !json[QString("facialHair")].isNull() && m_facial_hair_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_glasses_isValid = ::OpenAPI::fromJsonValue(m_glasses, json[QString("glasses")]);
    m_glasses_isSet = !json[QString("glasses")].isNull() && m_glasses_isValid;

    m_hair_isValid = ::OpenAPI::fromJsonValue(m_hair, json[QString("hair")]);
    m_hair_isSet = !json[QString("hair")].isNull() && m_hair_isValid;

    m_head_pose_isValid = ::OpenAPI::fromJsonValue(m_head_pose, json[QString("headPose")]);
    m_head_pose_isSet = !json[QString("headPose")].isNull() && m_head_pose_isValid;

    m_makeup_isValid = ::OpenAPI::fromJsonValue(m_makeup, json[QString("makeup")]);
    m_makeup_isSet = !json[QString("makeup")].isNull() && m_makeup_isValid;

    m_noise_isValid = ::OpenAPI::fromJsonValue(m_noise, json[QString("noise")]);
    m_noise_isSet = !json[QString("noise")].isNull() && m_noise_isValid;

    m_occlusion_isValid = ::OpenAPI::fromJsonValue(m_occlusion, json[QString("occlusion")]);
    m_occlusion_isSet = !json[QString("occlusion")].isNull() && m_occlusion_isValid;

    m_smile_isValid = ::OpenAPI::fromJsonValue(m_smile, json[QString("smile")]);
    m_smile_isSet = !json[QString("smile")].isNull() && m_smile_isValid;
}

QString OAIFaceAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFaceAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_accessories.size() > 0) {
        obj.insert(QString("accessories"), ::OpenAPI::toJsonValue(m_accessories));
    }
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_blur.isSet()) {
        obj.insert(QString("blur"), ::OpenAPI::toJsonValue(m_blur));
    }
    if (m_emotion.isSet()) {
        obj.insert(QString("emotion"), ::OpenAPI::toJsonValue(m_emotion));
    }
    if (m_exposure.isSet()) {
        obj.insert(QString("exposure"), ::OpenAPI::toJsonValue(m_exposure));
    }
    if (m_facial_hair.isSet()) {
        obj.insert(QString("facialHair"), ::OpenAPI::toJsonValue(m_facial_hair));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_glasses_isSet) {
        obj.insert(QString("glasses"), ::OpenAPI::toJsonValue(m_glasses));
    }
    if (m_hair.isSet()) {
        obj.insert(QString("hair"), ::OpenAPI::toJsonValue(m_hair));
    }
    if (m_head_pose.isSet()) {
        obj.insert(QString("headPose"), ::OpenAPI::toJsonValue(m_head_pose));
    }
    if (m_makeup.isSet()) {
        obj.insert(QString("makeup"), ::OpenAPI::toJsonValue(m_makeup));
    }
    if (m_noise.isSet()) {
        obj.insert(QString("noise"), ::OpenAPI::toJsonValue(m_noise));
    }
    if (m_occlusion.isSet()) {
        obj.insert(QString("occlusion"), ::OpenAPI::toJsonValue(m_occlusion));
    }
    if (m_smile_isSet) {
        obj.insert(QString("smile"), ::OpenAPI::toJsonValue(m_smile));
    }
    return obj;
}

QList<OAIAccessory> OAIFaceAttributes::getAccessories() const {
    return m_accessories;
}
void OAIFaceAttributes::setAccessories(const QList<OAIAccessory> &accessories) {
    m_accessories = accessories;
    m_accessories_isSet = true;
}

bool OAIFaceAttributes::is_accessories_Set() const{
    return m_accessories_isSet;
}

bool OAIFaceAttributes::is_accessories_Valid() const{
    return m_accessories_isValid;
}

double OAIFaceAttributes::getAge() const {
    return m_age;
}
void OAIFaceAttributes::setAge(const double &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIFaceAttributes::is_age_Set() const{
    return m_age_isSet;
}

bool OAIFaceAttributes::is_age_Valid() const{
    return m_age_isValid;
}

OAIBlur OAIFaceAttributes::getBlur() const {
    return m_blur;
}
void OAIFaceAttributes::setBlur(const OAIBlur &blur) {
    m_blur = blur;
    m_blur_isSet = true;
}

bool OAIFaceAttributes::is_blur_Set() const{
    return m_blur_isSet;
}

bool OAIFaceAttributes::is_blur_Valid() const{
    return m_blur_isValid;
}

OAIEmotion OAIFaceAttributes::getEmotion() const {
    return m_emotion;
}
void OAIFaceAttributes::setEmotion(const OAIEmotion &emotion) {
    m_emotion = emotion;
    m_emotion_isSet = true;
}

bool OAIFaceAttributes::is_emotion_Set() const{
    return m_emotion_isSet;
}

bool OAIFaceAttributes::is_emotion_Valid() const{
    return m_emotion_isValid;
}

OAIExposure OAIFaceAttributes::getExposure() const {
    return m_exposure;
}
void OAIFaceAttributes::setExposure(const OAIExposure &exposure) {
    m_exposure = exposure;
    m_exposure_isSet = true;
}

bool OAIFaceAttributes::is_exposure_Set() const{
    return m_exposure_isSet;
}

bool OAIFaceAttributes::is_exposure_Valid() const{
    return m_exposure_isValid;
}

OAIFacialHair OAIFaceAttributes::getFacialHair() const {
    return m_facial_hair;
}
void OAIFaceAttributes::setFacialHair(const OAIFacialHair &facial_hair) {
    m_facial_hair = facial_hair;
    m_facial_hair_isSet = true;
}

bool OAIFaceAttributes::is_facial_hair_Set() const{
    return m_facial_hair_isSet;
}

bool OAIFaceAttributes::is_facial_hair_Valid() const{
    return m_facial_hair_isValid;
}

QString OAIFaceAttributes::getGender() const {
    return m_gender;
}
void OAIFaceAttributes::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIFaceAttributes::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIFaceAttributes::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIFaceAttributes::getGlasses() const {
    return m_glasses;
}
void OAIFaceAttributes::setGlasses(const QString &glasses) {
    m_glasses = glasses;
    m_glasses_isSet = true;
}

bool OAIFaceAttributes::is_glasses_Set() const{
    return m_glasses_isSet;
}

bool OAIFaceAttributes::is_glasses_Valid() const{
    return m_glasses_isValid;
}

OAIHair OAIFaceAttributes::getHair() const {
    return m_hair;
}
void OAIFaceAttributes::setHair(const OAIHair &hair) {
    m_hair = hair;
    m_hair_isSet = true;
}

bool OAIFaceAttributes::is_hair_Set() const{
    return m_hair_isSet;
}

bool OAIFaceAttributes::is_hair_Valid() const{
    return m_hair_isValid;
}

OAIHeadPose OAIFaceAttributes::getHeadPose() const {
    return m_head_pose;
}
void OAIFaceAttributes::setHeadPose(const OAIHeadPose &head_pose) {
    m_head_pose = head_pose;
    m_head_pose_isSet = true;
}

bool OAIFaceAttributes::is_head_pose_Set() const{
    return m_head_pose_isSet;
}

bool OAIFaceAttributes::is_head_pose_Valid() const{
    return m_head_pose_isValid;
}

OAIMakeup OAIFaceAttributes::getMakeup() const {
    return m_makeup;
}
void OAIFaceAttributes::setMakeup(const OAIMakeup &makeup) {
    m_makeup = makeup;
    m_makeup_isSet = true;
}

bool OAIFaceAttributes::is_makeup_Set() const{
    return m_makeup_isSet;
}

bool OAIFaceAttributes::is_makeup_Valid() const{
    return m_makeup_isValid;
}

OAINoise OAIFaceAttributes::getNoise() const {
    return m_noise;
}
void OAIFaceAttributes::setNoise(const OAINoise &noise) {
    m_noise = noise;
    m_noise_isSet = true;
}

bool OAIFaceAttributes::is_noise_Set() const{
    return m_noise_isSet;
}

bool OAIFaceAttributes::is_noise_Valid() const{
    return m_noise_isValid;
}

OAIOcclusion OAIFaceAttributes::getOcclusion() const {
    return m_occlusion;
}
void OAIFaceAttributes::setOcclusion(const OAIOcclusion &occlusion) {
    m_occlusion = occlusion;
    m_occlusion_isSet = true;
}

bool OAIFaceAttributes::is_occlusion_Set() const{
    return m_occlusion_isSet;
}

bool OAIFaceAttributes::is_occlusion_Valid() const{
    return m_occlusion_isValid;
}

double OAIFaceAttributes::getSmile() const {
    return m_smile;
}
void OAIFaceAttributes::setSmile(const double &smile) {
    m_smile = smile;
    m_smile_isSet = true;
}

bool OAIFaceAttributes::is_smile_Set() const{
    return m_smile_isSet;
}

bool OAIFaceAttributes::is_smile_Valid() const{
    return m_smile_isValid;
}

bool OAIFaceAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blur.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_emotion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exposure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_facial_hair.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glasses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hair.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_pose.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_makeup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_noise.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_occlusion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_smile_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFaceAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
