/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerifyResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerifyResult::OAIVerifyResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerifyResult::OAIVerifyResult() {
    this->initializeModel();
}

OAIVerifyResult::~OAIVerifyResult() {}

void OAIVerifyResult::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_is_identical_isSet = false;
    m_is_identical_isValid = false;
}

void OAIVerifyResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerifyResult::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_is_identical_isValid = ::OpenAPI::fromJsonValue(m_is_identical, json[QString("isIdentical")]);
    m_is_identical_isSet = !json[QString("isIdentical")].isNull() && m_is_identical_isValid;
}

QString OAIVerifyResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerifyResult::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_is_identical_isSet) {
        obj.insert(QString("isIdentical"), ::OpenAPI::toJsonValue(m_is_identical));
    }
    return obj;
}

double OAIVerifyResult::getConfidence() const {
    return m_confidence;
}
void OAIVerifyResult::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIVerifyResult::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIVerifyResult::is_confidence_Valid() const{
    return m_confidence_isValid;
}

bool OAIVerifyResult::isIsIdentical() const {
    return m_is_identical;
}
void OAIVerifyResult::setIsIdentical(const bool &is_identical) {
    m_is_identical = is_identical;
    m_is_identical_isSet = true;
}

bool OAIVerifyResult::is_is_identical_Set() const{
    return m_is_identical_isSet;
}

bool OAIVerifyResult::is_is_identical_Valid() const{
    return m_is_identical_isValid;
}

bool OAIVerifyResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_identical_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerifyResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confidence_isValid && m_is_identical_isValid && true;
}

} // namespace OpenAPI
