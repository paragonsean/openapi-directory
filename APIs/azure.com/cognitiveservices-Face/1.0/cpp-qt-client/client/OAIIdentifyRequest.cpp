/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentifyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentifyRequest::OAIIdentifyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentifyRequest::OAIIdentifyRequest() {
    this->initializeModel();
}

OAIIdentifyRequest::~OAIIdentifyRequest() {}

void OAIIdentifyRequest::initializeModel() {

    m_confidence_threshold_isSet = false;
    m_confidence_threshold_isValid = false;

    m_face_ids_isSet = false;
    m_face_ids_isValid = false;

    m_large_person_group_id_isSet = false;
    m_large_person_group_id_isValid = false;

    m_max_num_of_candidates_returned_isSet = false;
    m_max_num_of_candidates_returned_isValid = false;

    m_person_group_id_isSet = false;
    m_person_group_id_isValid = false;
}

void OAIIdentifyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentifyRequest::fromJsonObject(QJsonObject json) {

    m_confidence_threshold_isValid = ::OpenAPI::fromJsonValue(m_confidence_threshold, json[QString("confidenceThreshold")]);
    m_confidence_threshold_isSet = !json[QString("confidenceThreshold")].isNull() && m_confidence_threshold_isValid;

    m_face_ids_isValid = ::OpenAPI::fromJsonValue(m_face_ids, json[QString("faceIds")]);
    m_face_ids_isSet = !json[QString("faceIds")].isNull() && m_face_ids_isValid;

    m_large_person_group_id_isValid = ::OpenAPI::fromJsonValue(m_large_person_group_id, json[QString("largePersonGroupId")]);
    m_large_person_group_id_isSet = !json[QString("largePersonGroupId")].isNull() && m_large_person_group_id_isValid;

    m_max_num_of_candidates_returned_isValid = ::OpenAPI::fromJsonValue(m_max_num_of_candidates_returned, json[QString("maxNumOfCandidatesReturned")]);
    m_max_num_of_candidates_returned_isSet = !json[QString("maxNumOfCandidatesReturned")].isNull() && m_max_num_of_candidates_returned_isValid;

    m_person_group_id_isValid = ::OpenAPI::fromJsonValue(m_person_group_id, json[QString("personGroupId")]);
    m_person_group_id_isSet = !json[QString("personGroupId")].isNull() && m_person_group_id_isValid;
}

QString OAIIdentifyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentifyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_threshold_isSet) {
        obj.insert(QString("confidenceThreshold"), ::OpenAPI::toJsonValue(m_confidence_threshold));
    }
    if (m_face_ids.size() > 0) {
        obj.insert(QString("faceIds"), ::OpenAPI::toJsonValue(m_face_ids));
    }
    if (m_large_person_group_id_isSet) {
        obj.insert(QString("largePersonGroupId"), ::OpenAPI::toJsonValue(m_large_person_group_id));
    }
    if (m_max_num_of_candidates_returned_isSet) {
        obj.insert(QString("maxNumOfCandidatesReturned"), ::OpenAPI::toJsonValue(m_max_num_of_candidates_returned));
    }
    if (m_person_group_id_isSet) {
        obj.insert(QString("personGroupId"), ::OpenAPI::toJsonValue(m_person_group_id));
    }
    return obj;
}

double OAIIdentifyRequest::getConfidenceThreshold() const {
    return m_confidence_threshold;
}
void OAIIdentifyRequest::setConfidenceThreshold(const double &confidence_threshold) {
    m_confidence_threshold = confidence_threshold;
    m_confidence_threshold_isSet = true;
}

bool OAIIdentifyRequest::is_confidence_threshold_Set() const{
    return m_confidence_threshold_isSet;
}

bool OAIIdentifyRequest::is_confidence_threshold_Valid() const{
    return m_confidence_threshold_isValid;
}

QList<QString> OAIIdentifyRequest::getFaceIds() const {
    return m_face_ids;
}
void OAIIdentifyRequest::setFaceIds(const QList<QString> &face_ids) {
    m_face_ids = face_ids;
    m_face_ids_isSet = true;
}

bool OAIIdentifyRequest::is_face_ids_Set() const{
    return m_face_ids_isSet;
}

bool OAIIdentifyRequest::is_face_ids_Valid() const{
    return m_face_ids_isValid;
}

QString OAIIdentifyRequest::getLargePersonGroupId() const {
    return m_large_person_group_id;
}
void OAIIdentifyRequest::setLargePersonGroupId(const QString &large_person_group_id) {
    m_large_person_group_id = large_person_group_id;
    m_large_person_group_id_isSet = true;
}

bool OAIIdentifyRequest::is_large_person_group_id_Set() const{
    return m_large_person_group_id_isSet;
}

bool OAIIdentifyRequest::is_large_person_group_id_Valid() const{
    return m_large_person_group_id_isValid;
}

qint32 OAIIdentifyRequest::getMaxNumOfCandidatesReturned() const {
    return m_max_num_of_candidates_returned;
}
void OAIIdentifyRequest::setMaxNumOfCandidatesReturned(const qint32 &max_num_of_candidates_returned) {
    m_max_num_of_candidates_returned = max_num_of_candidates_returned;
    m_max_num_of_candidates_returned_isSet = true;
}

bool OAIIdentifyRequest::is_max_num_of_candidates_returned_Set() const{
    return m_max_num_of_candidates_returned_isSet;
}

bool OAIIdentifyRequest::is_max_num_of_candidates_returned_Valid() const{
    return m_max_num_of_candidates_returned_isValid;
}

QString OAIIdentifyRequest::getPersonGroupId() const {
    return m_person_group_id;
}
void OAIIdentifyRequest::setPersonGroupId(const QString &person_group_id) {
    m_person_group_id = person_group_id;
    m_person_group_id_isSet = true;
}

bool OAIIdentifyRequest::is_person_group_id_Set() const{
    return m_person_group_id_isSet;
}

bool OAIIdentifyRequest::is_person_group_id_Valid() const{
    return m_person_group_id_isValid;
}

bool OAIIdentifyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_person_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_num_of_candidates_returned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentifyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_face_ids_isValid && true;
}

} // namespace OpenAPI
