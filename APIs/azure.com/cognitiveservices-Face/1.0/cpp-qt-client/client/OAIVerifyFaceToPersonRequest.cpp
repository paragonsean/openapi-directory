/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerifyFaceToPersonRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerifyFaceToPersonRequest::OAIVerifyFaceToPersonRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerifyFaceToPersonRequest::OAIVerifyFaceToPersonRequest() {
    this->initializeModel();
}

OAIVerifyFaceToPersonRequest::~OAIVerifyFaceToPersonRequest() {}

void OAIVerifyFaceToPersonRequest::initializeModel() {

    m_face_id_isSet = false;
    m_face_id_isValid = false;

    m_large_person_group_id_isSet = false;
    m_large_person_group_id_isValid = false;

    m_person_group_id_isSet = false;
    m_person_group_id_isValid = false;

    m_person_id_isSet = false;
    m_person_id_isValid = false;
}

void OAIVerifyFaceToPersonRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerifyFaceToPersonRequest::fromJsonObject(QJsonObject json) {

    m_face_id_isValid = ::OpenAPI::fromJsonValue(m_face_id, json[QString("faceId")]);
    m_face_id_isSet = !json[QString("faceId")].isNull() && m_face_id_isValid;

    m_large_person_group_id_isValid = ::OpenAPI::fromJsonValue(m_large_person_group_id, json[QString("largePersonGroupId")]);
    m_large_person_group_id_isSet = !json[QString("largePersonGroupId")].isNull() && m_large_person_group_id_isValid;

    m_person_group_id_isValid = ::OpenAPI::fromJsonValue(m_person_group_id, json[QString("personGroupId")]);
    m_person_group_id_isSet = !json[QString("personGroupId")].isNull() && m_person_group_id_isValid;

    m_person_id_isValid = ::OpenAPI::fromJsonValue(m_person_id, json[QString("personId")]);
    m_person_id_isSet = !json[QString("personId")].isNull() && m_person_id_isValid;
}

QString OAIVerifyFaceToPersonRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerifyFaceToPersonRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_face_id_isSet) {
        obj.insert(QString("faceId"), ::OpenAPI::toJsonValue(m_face_id));
    }
    if (m_large_person_group_id_isSet) {
        obj.insert(QString("largePersonGroupId"), ::OpenAPI::toJsonValue(m_large_person_group_id));
    }
    if (m_person_group_id_isSet) {
        obj.insert(QString("personGroupId"), ::OpenAPI::toJsonValue(m_person_group_id));
    }
    if (m_person_id_isSet) {
        obj.insert(QString("personId"), ::OpenAPI::toJsonValue(m_person_id));
    }
    return obj;
}

QString OAIVerifyFaceToPersonRequest::getFaceId() const {
    return m_face_id;
}
void OAIVerifyFaceToPersonRequest::setFaceId(const QString &face_id) {
    m_face_id = face_id;
    m_face_id_isSet = true;
}

bool OAIVerifyFaceToPersonRequest::is_face_id_Set() const{
    return m_face_id_isSet;
}

bool OAIVerifyFaceToPersonRequest::is_face_id_Valid() const{
    return m_face_id_isValid;
}

QString OAIVerifyFaceToPersonRequest::getLargePersonGroupId() const {
    return m_large_person_group_id;
}
void OAIVerifyFaceToPersonRequest::setLargePersonGroupId(const QString &large_person_group_id) {
    m_large_person_group_id = large_person_group_id;
    m_large_person_group_id_isSet = true;
}

bool OAIVerifyFaceToPersonRequest::is_large_person_group_id_Set() const{
    return m_large_person_group_id_isSet;
}

bool OAIVerifyFaceToPersonRequest::is_large_person_group_id_Valid() const{
    return m_large_person_group_id_isValid;
}

QString OAIVerifyFaceToPersonRequest::getPersonGroupId() const {
    return m_person_group_id;
}
void OAIVerifyFaceToPersonRequest::setPersonGroupId(const QString &person_group_id) {
    m_person_group_id = person_group_id;
    m_person_group_id_isSet = true;
}

bool OAIVerifyFaceToPersonRequest::is_person_group_id_Set() const{
    return m_person_group_id_isSet;
}

bool OAIVerifyFaceToPersonRequest::is_person_group_id_Valid() const{
    return m_person_group_id_isValid;
}

QString OAIVerifyFaceToPersonRequest::getPersonId() const {
    return m_person_id;
}
void OAIVerifyFaceToPersonRequest::setPersonId(const QString &person_id) {
    m_person_id = person_id;
    m_person_id_isSet = true;
}

bool OAIVerifyFaceToPersonRequest::is_person_id_Set() const{
    return m_person_id_isSet;
}

bool OAIVerifyFaceToPersonRequest::is_person_id_Valid() const{
    return m_person_id_isValid;
}

bool OAIVerifyFaceToPersonRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_face_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_person_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerifyFaceToPersonRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_face_id_isValid && m_person_id_isValid && true;
}

} // namespace OpenAPI
