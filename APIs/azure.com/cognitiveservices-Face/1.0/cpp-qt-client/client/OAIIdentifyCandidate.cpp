/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentifyCandidate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentifyCandidate::OAIIdentifyCandidate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentifyCandidate::OAIIdentifyCandidate() {
    this->initializeModel();
}

OAIIdentifyCandidate::~OAIIdentifyCandidate() {}

void OAIIdentifyCandidate::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_person_id_isSet = false;
    m_person_id_isValid = false;
}

void OAIIdentifyCandidate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentifyCandidate::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_person_id_isValid = ::OpenAPI::fromJsonValue(m_person_id, json[QString("personId")]);
    m_person_id_isSet = !json[QString("personId")].isNull() && m_person_id_isValid;
}

QString OAIIdentifyCandidate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentifyCandidate::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_person_id_isSet) {
        obj.insert(QString("personId"), ::OpenAPI::toJsonValue(m_person_id));
    }
    return obj;
}

double OAIIdentifyCandidate::getConfidence() const {
    return m_confidence;
}
void OAIIdentifyCandidate::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIIdentifyCandidate::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIIdentifyCandidate::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIIdentifyCandidate::getPersonId() const {
    return m_person_id;
}
void OAIIdentifyCandidate::setPersonId(const QString &person_id) {
    m_person_id = person_id;
    m_person_id_isSet = true;
}

bool OAIIdentifyCandidate::is_person_id_Set() const{
    return m_person_id_isSet;
}

bool OAIIdentifyCandidate::is_person_id_Valid() const{
    return m_person_id_isValid;
}

bool OAIIdentifyCandidate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentifyCandidate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confidence_isValid && m_person_id_isValid && true;
}

} // namespace OpenAPI
