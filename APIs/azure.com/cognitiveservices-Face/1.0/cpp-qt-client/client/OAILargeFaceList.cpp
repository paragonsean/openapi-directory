/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILargeFaceList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILargeFaceList::OAILargeFaceList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILargeFaceList::OAILargeFaceList() {
    this->initializeModel();
}

OAILargeFaceList::~OAILargeFaceList() {}

void OAILargeFaceList::initializeModel() {

    m_large_face_list_id_isSet = false;
    m_large_face_list_id_isValid = false;

    m_recognition_model_isSet = false;
    m_recognition_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_user_data_isSet = false;
    m_user_data_isValid = false;
}

void OAILargeFaceList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILargeFaceList::fromJsonObject(QJsonObject json) {

    m_large_face_list_id_isValid = ::OpenAPI::fromJsonValue(m_large_face_list_id, json[QString("largeFaceListId")]);
    m_large_face_list_id_isSet = !json[QString("largeFaceListId")].isNull() && m_large_face_list_id_isValid;

    m_recognition_model_isValid = ::OpenAPI::fromJsonValue(m_recognition_model, json[QString("recognitionModel")]);
    m_recognition_model_isSet = !json[QString("recognitionModel")].isNull() && m_recognition_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_user_data_isValid = ::OpenAPI::fromJsonValue(m_user_data, json[QString("userData")]);
    m_user_data_isSet = !json[QString("userData")].isNull() && m_user_data_isValid;
}

QString OAILargeFaceList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILargeFaceList::asJsonObject() const {
    QJsonObject obj;
    if (m_large_face_list_id_isSet) {
        obj.insert(QString("largeFaceListId"), ::OpenAPI::toJsonValue(m_large_face_list_id));
    }
    if (m_recognition_model.isSet()) {
        obj.insert(QString("recognitionModel"), ::OpenAPI::toJsonValue(m_recognition_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_user_data_isSet) {
        obj.insert(QString("userData"), ::OpenAPI::toJsonValue(m_user_data));
    }
    return obj;
}

QString OAILargeFaceList::getLargeFaceListId() const {
    return m_large_face_list_id;
}
void OAILargeFaceList::setLargeFaceListId(const QString &large_face_list_id) {
    m_large_face_list_id = large_face_list_id;
    m_large_face_list_id_isSet = true;
}

bool OAILargeFaceList::is_large_face_list_id_Set() const{
    return m_large_face_list_id_isSet;
}

bool OAILargeFaceList::is_large_face_list_id_Valid() const{
    return m_large_face_list_id_isValid;
}

OAIRecognitionModel OAILargeFaceList::getRecognitionModel() const {
    return m_recognition_model;
}
void OAILargeFaceList::setRecognitionModel(const OAIRecognitionModel &recognition_model) {
    m_recognition_model = recognition_model;
    m_recognition_model_isSet = true;
}

bool OAILargeFaceList::is_recognition_model_Set() const{
    return m_recognition_model_isSet;
}

bool OAILargeFaceList::is_recognition_model_Valid() const{
    return m_recognition_model_isValid;
}

QString OAILargeFaceList::getName() const {
    return m_name;
}
void OAILargeFaceList::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILargeFaceList::is_name_Set() const{
    return m_name_isSet;
}

bool OAILargeFaceList::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILargeFaceList::getUserData() const {
    return m_user_data;
}
void OAILargeFaceList::setUserData(const QString &user_data) {
    m_user_data = user_data;
    m_user_data_isSet = true;
}

bool OAILargeFaceList::is_user_data_Set() const{
    return m_user_data_isSet;
}

bool OAILargeFaceList::is_user_data_Valid() const{
    return m_user_data_isValid;
}

bool OAILargeFaceList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_large_face_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recognition_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILargeFaceList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_large_face_list_id_isValid && true;
}

} // namespace OpenAPI
