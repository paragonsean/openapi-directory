/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerifyFaceToFaceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerifyFaceToFaceRequest::OAIVerifyFaceToFaceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerifyFaceToFaceRequest::OAIVerifyFaceToFaceRequest() {
    this->initializeModel();
}

OAIVerifyFaceToFaceRequest::~OAIVerifyFaceToFaceRequest() {}

void OAIVerifyFaceToFaceRequest::initializeModel() {

    m_face_id1_isSet = false;
    m_face_id1_isValid = false;

    m_face_id2_isSet = false;
    m_face_id2_isValid = false;
}

void OAIVerifyFaceToFaceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerifyFaceToFaceRequest::fromJsonObject(QJsonObject json) {

    m_face_id1_isValid = ::OpenAPI::fromJsonValue(m_face_id1, json[QString("faceId1")]);
    m_face_id1_isSet = !json[QString("faceId1")].isNull() && m_face_id1_isValid;

    m_face_id2_isValid = ::OpenAPI::fromJsonValue(m_face_id2, json[QString("faceId2")]);
    m_face_id2_isSet = !json[QString("faceId2")].isNull() && m_face_id2_isValid;
}

QString OAIVerifyFaceToFaceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerifyFaceToFaceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_face_id1_isSet) {
        obj.insert(QString("faceId1"), ::OpenAPI::toJsonValue(m_face_id1));
    }
    if (m_face_id2_isSet) {
        obj.insert(QString("faceId2"), ::OpenAPI::toJsonValue(m_face_id2));
    }
    return obj;
}

QString OAIVerifyFaceToFaceRequest::getFaceId1() const {
    return m_face_id1;
}
void OAIVerifyFaceToFaceRequest::setFaceId1(const QString &face_id1) {
    m_face_id1 = face_id1;
    m_face_id1_isSet = true;
}

bool OAIVerifyFaceToFaceRequest::is_face_id1_Set() const{
    return m_face_id1_isSet;
}

bool OAIVerifyFaceToFaceRequest::is_face_id1_Valid() const{
    return m_face_id1_isValid;
}

QString OAIVerifyFaceToFaceRequest::getFaceId2() const {
    return m_face_id2;
}
void OAIVerifyFaceToFaceRequest::setFaceId2(const QString &face_id2) {
    m_face_id2 = face_id2;
    m_face_id2_isSet = true;
}

bool OAIVerifyFaceToFaceRequest::is_face_id2_Set() const{
    return m_face_id2_isSet;
}

bool OAIVerifyFaceToFaceRequest::is_face_id2_Valid() const{
    return m_face_id2_isValid;
}

bool OAIVerifyFaceToFaceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_face_id1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_id2_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerifyFaceToFaceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_face_id1_isValid && m_face_id2_isValid && true;
}

} // namespace OpenAPI
