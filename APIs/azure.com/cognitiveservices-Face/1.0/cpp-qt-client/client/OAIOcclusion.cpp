/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOcclusion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOcclusion::OAIOcclusion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOcclusion::OAIOcclusion() {
    this->initializeModel();
}

OAIOcclusion::~OAIOcclusion() {}

void OAIOcclusion::initializeModel() {

    m_eye_occluded_isSet = false;
    m_eye_occluded_isValid = false;

    m_forehead_occluded_isSet = false;
    m_forehead_occluded_isValid = false;

    m_mouth_occluded_isSet = false;
    m_mouth_occluded_isValid = false;
}

void OAIOcclusion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOcclusion::fromJsonObject(QJsonObject json) {

    m_eye_occluded_isValid = ::OpenAPI::fromJsonValue(m_eye_occluded, json[QString("eyeOccluded")]);
    m_eye_occluded_isSet = !json[QString("eyeOccluded")].isNull() && m_eye_occluded_isValid;

    m_forehead_occluded_isValid = ::OpenAPI::fromJsonValue(m_forehead_occluded, json[QString("foreheadOccluded")]);
    m_forehead_occluded_isSet = !json[QString("foreheadOccluded")].isNull() && m_forehead_occluded_isValid;

    m_mouth_occluded_isValid = ::OpenAPI::fromJsonValue(m_mouth_occluded, json[QString("mouthOccluded")]);
    m_mouth_occluded_isSet = !json[QString("mouthOccluded")].isNull() && m_mouth_occluded_isValid;
}

QString OAIOcclusion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOcclusion::asJsonObject() const {
    QJsonObject obj;
    if (m_eye_occluded_isSet) {
        obj.insert(QString("eyeOccluded"), ::OpenAPI::toJsonValue(m_eye_occluded));
    }
    if (m_forehead_occluded_isSet) {
        obj.insert(QString("foreheadOccluded"), ::OpenAPI::toJsonValue(m_forehead_occluded));
    }
    if (m_mouth_occluded_isSet) {
        obj.insert(QString("mouthOccluded"), ::OpenAPI::toJsonValue(m_mouth_occluded));
    }
    return obj;
}

bool OAIOcclusion::isEyeOccluded() const {
    return m_eye_occluded;
}
void OAIOcclusion::setEyeOccluded(const bool &eye_occluded) {
    m_eye_occluded = eye_occluded;
    m_eye_occluded_isSet = true;
}

bool OAIOcclusion::is_eye_occluded_Set() const{
    return m_eye_occluded_isSet;
}

bool OAIOcclusion::is_eye_occluded_Valid() const{
    return m_eye_occluded_isValid;
}

bool OAIOcclusion::isForeheadOccluded() const {
    return m_forehead_occluded;
}
void OAIOcclusion::setForeheadOccluded(const bool &forehead_occluded) {
    m_forehead_occluded = forehead_occluded;
    m_forehead_occluded_isSet = true;
}

bool OAIOcclusion::is_forehead_occluded_Set() const{
    return m_forehead_occluded_isSet;
}

bool OAIOcclusion::is_forehead_occluded_Valid() const{
    return m_forehead_occluded_isValid;
}

bool OAIOcclusion::isMouthOccluded() const {
    return m_mouth_occluded;
}
void OAIOcclusion::setMouthOccluded(const bool &mouth_occluded) {
    m_mouth_occluded = mouth_occluded;
    m_mouth_occluded_isSet = true;
}

bool OAIOcclusion::is_mouth_occluded_Set() const{
    return m_mouth_occluded_isSet;
}

bool OAIOcclusion::is_mouth_occluded_Valid() const{
    return m_mouth_occluded_isValid;
}

bool OAIOcclusion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eye_occluded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forehead_occluded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mouth_occluded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOcclusion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
