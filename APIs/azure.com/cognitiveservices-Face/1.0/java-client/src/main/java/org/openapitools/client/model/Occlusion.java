/*
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties describing occlusions on a given face.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:23.692507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Occlusion {
  public static final String SERIALIZED_NAME_EYE_OCCLUDED = "eyeOccluded";
  @SerializedName(SERIALIZED_NAME_EYE_OCCLUDED)
  private Boolean eyeOccluded;

  public static final String SERIALIZED_NAME_FOREHEAD_OCCLUDED = "foreheadOccluded";
  @SerializedName(SERIALIZED_NAME_FOREHEAD_OCCLUDED)
  private Boolean foreheadOccluded;

  public static final String SERIALIZED_NAME_MOUTH_OCCLUDED = "mouthOccluded";
  @SerializedName(SERIALIZED_NAME_MOUTH_OCCLUDED)
  private Boolean mouthOccluded;

  public Occlusion() {
  }

  public Occlusion eyeOccluded(Boolean eyeOccluded) {
    this.eyeOccluded = eyeOccluded;
    return this;
  }

  /**
   * A boolean value indicating whether eyes are occluded.
   * @return eyeOccluded
   */
  @javax.annotation.Nullable
  public Boolean getEyeOccluded() {
    return eyeOccluded;
  }

  public void setEyeOccluded(Boolean eyeOccluded) {
    this.eyeOccluded = eyeOccluded;
  }


  public Occlusion foreheadOccluded(Boolean foreheadOccluded) {
    this.foreheadOccluded = foreheadOccluded;
    return this;
  }

  /**
   * A boolean value indicating whether forehead is occluded.
   * @return foreheadOccluded
   */
  @javax.annotation.Nullable
  public Boolean getForeheadOccluded() {
    return foreheadOccluded;
  }

  public void setForeheadOccluded(Boolean foreheadOccluded) {
    this.foreheadOccluded = foreheadOccluded;
  }


  public Occlusion mouthOccluded(Boolean mouthOccluded) {
    this.mouthOccluded = mouthOccluded;
    return this;
  }

  /**
   * A boolean value indicating whether the mouth is occluded.
   * @return mouthOccluded
   */
  @javax.annotation.Nullable
  public Boolean getMouthOccluded() {
    return mouthOccluded;
  }

  public void setMouthOccluded(Boolean mouthOccluded) {
    this.mouthOccluded = mouthOccluded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Occlusion occlusion = (Occlusion) o;
    return Objects.equals(this.eyeOccluded, occlusion.eyeOccluded) &&
        Objects.equals(this.foreheadOccluded, occlusion.foreheadOccluded) &&
        Objects.equals(this.mouthOccluded, occlusion.mouthOccluded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eyeOccluded, foreheadOccluded, mouthOccluded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Occlusion {\n");
    sb.append("    eyeOccluded: ").append(toIndentedString(eyeOccluded)).append("\n");
    sb.append("    foreheadOccluded: ").append(toIndentedString(foreheadOccluded)).append("\n");
    sb.append("    mouthOccluded: ").append(toIndentedString(mouthOccluded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eyeOccluded");
    openapiFields.add("foreheadOccluded");
    openapiFields.add("mouthOccluded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Occlusion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Occlusion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Occlusion is not found in the empty JSON string", Occlusion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Occlusion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Occlusion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Occlusion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Occlusion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Occlusion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Occlusion.class));

       return (TypeAdapter<T>) new TypeAdapter<Occlusion>() {
           @Override
           public void write(JsonWriter out, Occlusion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Occlusion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Occlusion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Occlusion
   * @throws IOException if the JSON string is invalid with respect to Occlusion
   */
  public static Occlusion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Occlusion.class);
  }

  /**
   * Convert an instance of Occlusion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

