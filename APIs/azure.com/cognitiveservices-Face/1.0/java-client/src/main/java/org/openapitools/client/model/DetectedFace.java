/*
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.FaceAttributes;
import org.openapitools.client.model.FaceLandmarks;
import org.openapitools.client.model.FaceRectangle;
import org.openapitools.client.model.RecognitionModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detected Face object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:23.692507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetectedFace {
  public static final String SERIALIZED_NAME_FACE_ATTRIBUTES = "faceAttributes";
  @SerializedName(SERIALIZED_NAME_FACE_ATTRIBUTES)
  private FaceAttributes faceAttributes;

  public static final String SERIALIZED_NAME_FACE_ID = "faceId";
  @SerializedName(SERIALIZED_NAME_FACE_ID)
  private UUID faceId;

  public static final String SERIALIZED_NAME_FACE_LANDMARKS = "faceLandmarks";
  @SerializedName(SERIALIZED_NAME_FACE_LANDMARKS)
  private FaceLandmarks faceLandmarks;

  public static final String SERIALIZED_NAME_FACE_RECTANGLE = "faceRectangle";
  @SerializedName(SERIALIZED_NAME_FACE_RECTANGLE)
  private FaceRectangle faceRectangle;

  public static final String SERIALIZED_NAME_RECOGNITION_MODEL = "recognitionModel";
  @SerializedName(SERIALIZED_NAME_RECOGNITION_MODEL)
  private RecognitionModel recognitionModel = RecognitionModel._01;

  public DetectedFace() {
  }

  public DetectedFace faceAttributes(FaceAttributes faceAttributes) {
    this.faceAttributes = faceAttributes;
    return this;
  }

  /**
   * Get faceAttributes
   * @return faceAttributes
   */
  @javax.annotation.Nullable
  public FaceAttributes getFaceAttributes() {
    return faceAttributes;
  }

  public void setFaceAttributes(FaceAttributes faceAttributes) {
    this.faceAttributes = faceAttributes;
  }


  public DetectedFace faceId(UUID faceId) {
    this.faceId = faceId;
    return this;
  }

  /**
   * Get faceId
   * @return faceId
   */
  @javax.annotation.Nullable
  public UUID getFaceId() {
    return faceId;
  }

  public void setFaceId(UUID faceId) {
    this.faceId = faceId;
  }


  public DetectedFace faceLandmarks(FaceLandmarks faceLandmarks) {
    this.faceLandmarks = faceLandmarks;
    return this;
  }

  /**
   * Get faceLandmarks
   * @return faceLandmarks
   */
  @javax.annotation.Nullable
  public FaceLandmarks getFaceLandmarks() {
    return faceLandmarks;
  }

  public void setFaceLandmarks(FaceLandmarks faceLandmarks) {
    this.faceLandmarks = faceLandmarks;
  }


  public DetectedFace faceRectangle(FaceRectangle faceRectangle) {
    this.faceRectangle = faceRectangle;
    return this;
  }

  /**
   * Get faceRectangle
   * @return faceRectangle
   */
  @javax.annotation.Nonnull
  public FaceRectangle getFaceRectangle() {
    return faceRectangle;
  }

  public void setFaceRectangle(FaceRectangle faceRectangle) {
    this.faceRectangle = faceRectangle;
  }


  public DetectedFace recognitionModel(RecognitionModel recognitionModel) {
    this.recognitionModel = recognitionModel;
    return this;
  }

  /**
   * Get recognitionModel
   * @return recognitionModel
   */
  @javax.annotation.Nullable
  public RecognitionModel getRecognitionModel() {
    return recognitionModel;
  }

  public void setRecognitionModel(RecognitionModel recognitionModel) {
    this.recognitionModel = recognitionModel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetectedFace detectedFace = (DetectedFace) o;
    return Objects.equals(this.faceAttributes, detectedFace.faceAttributes) &&
        Objects.equals(this.faceId, detectedFace.faceId) &&
        Objects.equals(this.faceLandmarks, detectedFace.faceLandmarks) &&
        Objects.equals(this.faceRectangle, detectedFace.faceRectangle) &&
        Objects.equals(this.recognitionModel, detectedFace.recognitionModel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(faceAttributes, faceId, faceLandmarks, faceRectangle, recognitionModel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetectedFace {\n");
    sb.append("    faceAttributes: ").append(toIndentedString(faceAttributes)).append("\n");
    sb.append("    faceId: ").append(toIndentedString(faceId)).append("\n");
    sb.append("    faceLandmarks: ").append(toIndentedString(faceLandmarks)).append("\n");
    sb.append("    faceRectangle: ").append(toIndentedString(faceRectangle)).append("\n");
    sb.append("    recognitionModel: ").append(toIndentedString(recognitionModel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("faceAttributes");
    openapiFields.add("faceId");
    openapiFields.add("faceLandmarks");
    openapiFields.add("faceRectangle");
    openapiFields.add("recognitionModel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("faceRectangle");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetectedFace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetectedFace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetectedFace is not found in the empty JSON string", DetectedFace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetectedFace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetectedFace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DetectedFace.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `faceAttributes`
      if (jsonObj.get("faceAttributes") != null && !jsonObj.get("faceAttributes").isJsonNull()) {
        FaceAttributes.validateJsonElement(jsonObj.get("faceAttributes"));
      }
      if ((jsonObj.get("faceId") != null && !jsonObj.get("faceId").isJsonNull()) && !jsonObj.get("faceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `faceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("faceId").toString()));
      }
      // validate the optional field `faceLandmarks`
      if (jsonObj.get("faceLandmarks") != null && !jsonObj.get("faceLandmarks").isJsonNull()) {
        FaceLandmarks.validateJsonElement(jsonObj.get("faceLandmarks"));
      }
      // validate the required field `faceRectangle`
      FaceRectangle.validateJsonElement(jsonObj.get("faceRectangle"));
      // validate the optional field `recognitionModel`
      if (jsonObj.get("recognitionModel") != null && !jsonObj.get("recognitionModel").isJsonNull()) {
        RecognitionModel.validateJsonElement(jsonObj.get("recognitionModel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetectedFace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetectedFace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetectedFace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetectedFace.class));

       return (TypeAdapter<T>) new TypeAdapter<DetectedFace>() {
           @Override
           public void write(JsonWriter out, DetectedFace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetectedFace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetectedFace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetectedFace
   * @throws IOException if the JSON string is invalid with respect to DetectedFace
   */
  public static DetectedFace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetectedFace.class);
  }

  /**
   * Convert an instance of DetectedFace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

