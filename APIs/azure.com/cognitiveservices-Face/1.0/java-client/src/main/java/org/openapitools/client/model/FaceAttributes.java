/*
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Accessory;
import org.openapitools.client.model.Blur;
import org.openapitools.client.model.Emotion;
import org.openapitools.client.model.Exposure;
import org.openapitools.client.model.FacialHair;
import org.openapitools.client.model.Hair;
import org.openapitools.client.model.HeadPose;
import org.openapitools.client.model.Makeup;
import org.openapitools.client.model.Noise;
import org.openapitools.client.model.Occlusion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Face Attributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:23.692507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FaceAttributes {
  public static final String SERIALIZED_NAME_ACCESSORIES = "accessories";
  @SerializedName(SERIALIZED_NAME_ACCESSORIES)
  private List<Accessory> accessories = new ArrayList<>();

  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private BigDecimal age;

  public static final String SERIALIZED_NAME_BLUR = "blur";
  @SerializedName(SERIALIZED_NAME_BLUR)
  private Blur blur;

  public static final String SERIALIZED_NAME_EMOTION = "emotion";
  @SerializedName(SERIALIZED_NAME_EMOTION)
  private Emotion emotion;

  public static final String SERIALIZED_NAME_EXPOSURE = "exposure";
  @SerializedName(SERIALIZED_NAME_EXPOSURE)
  private Exposure exposure;

  public static final String SERIALIZED_NAME_FACIAL_HAIR = "facialHair";
  @SerializedName(SERIALIZED_NAME_FACIAL_HAIR)
  private FacialHair facialHair;

  /**
   * Possible gender of the face.
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    MALE("male"),
    
    FEMALE("female");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  /**
   * Glasses type if any of the face.
   */
  @JsonAdapter(GlassesEnum.Adapter.class)
  public enum GlassesEnum {
    NO_GLASSES("noGlasses"),
    
    READING_GLASSES("readingGlasses"),
    
    SUNGLASSES("sunglasses"),
    
    SWIMMING_GOGGLES("swimmingGoggles");

    private String value;

    GlassesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GlassesEnum fromValue(String value) {
      for (GlassesEnum b : GlassesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GlassesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GlassesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GlassesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GlassesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GlassesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GLASSES = "glasses";
  @SerializedName(SERIALIZED_NAME_GLASSES)
  private GlassesEnum glasses;

  public static final String SERIALIZED_NAME_HAIR = "hair";
  @SerializedName(SERIALIZED_NAME_HAIR)
  private Hair hair;

  public static final String SERIALIZED_NAME_HEAD_POSE = "headPose";
  @SerializedName(SERIALIZED_NAME_HEAD_POSE)
  private HeadPose headPose;

  public static final String SERIALIZED_NAME_MAKEUP = "makeup";
  @SerializedName(SERIALIZED_NAME_MAKEUP)
  private Makeup makeup;

  public static final String SERIALIZED_NAME_NOISE = "noise";
  @SerializedName(SERIALIZED_NAME_NOISE)
  private Noise noise;

  public static final String SERIALIZED_NAME_OCCLUSION = "occlusion";
  @SerializedName(SERIALIZED_NAME_OCCLUSION)
  private Occlusion occlusion;

  public static final String SERIALIZED_NAME_SMILE = "smile";
  @SerializedName(SERIALIZED_NAME_SMILE)
  private BigDecimal smile;

  public FaceAttributes() {
  }

  public FaceAttributes accessories(List<Accessory> accessories) {
    this.accessories = accessories;
    return this;
  }

  public FaceAttributes addAccessoriesItem(Accessory accessoriesItem) {
    if (this.accessories == null) {
      this.accessories = new ArrayList<>();
    }
    this.accessories.add(accessoriesItem);
    return this;
  }

  /**
   * Properties describing any accessories on a given face.
   * @return accessories
   */
  @javax.annotation.Nullable
  public List<Accessory> getAccessories() {
    return accessories;
  }

  public void setAccessories(List<Accessory> accessories) {
    this.accessories = accessories;
  }


  public FaceAttributes age(BigDecimal age) {
    this.age = age;
    return this;
  }

  /**
   * Age in years
   * @return age
   */
  @javax.annotation.Nullable
  public BigDecimal getAge() {
    return age;
  }

  public void setAge(BigDecimal age) {
    this.age = age;
  }


  public FaceAttributes blur(Blur blur) {
    this.blur = blur;
    return this;
  }

  /**
   * Get blur
   * @return blur
   */
  @javax.annotation.Nullable
  public Blur getBlur() {
    return blur;
  }

  public void setBlur(Blur blur) {
    this.blur = blur;
  }


  public FaceAttributes emotion(Emotion emotion) {
    this.emotion = emotion;
    return this;
  }

  /**
   * Get emotion
   * @return emotion
   */
  @javax.annotation.Nullable
  public Emotion getEmotion() {
    return emotion;
  }

  public void setEmotion(Emotion emotion) {
    this.emotion = emotion;
  }


  public FaceAttributes exposure(Exposure exposure) {
    this.exposure = exposure;
    return this;
  }

  /**
   * Get exposure
   * @return exposure
   */
  @javax.annotation.Nullable
  public Exposure getExposure() {
    return exposure;
  }

  public void setExposure(Exposure exposure) {
    this.exposure = exposure;
  }


  public FaceAttributes facialHair(FacialHair facialHair) {
    this.facialHair = facialHair;
    return this;
  }

  /**
   * Get facialHair
   * @return facialHair
   */
  @javax.annotation.Nullable
  public FacialHair getFacialHair() {
    return facialHair;
  }

  public void setFacialHair(FacialHair facialHair) {
    this.facialHair = facialHair;
  }


  public FaceAttributes gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Possible gender of the face.
   * @return gender
   */
  @javax.annotation.Nullable
  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }


  public FaceAttributes glasses(GlassesEnum glasses) {
    this.glasses = glasses;
    return this;
  }

  /**
   * Glasses type if any of the face.
   * @return glasses
   */
  @javax.annotation.Nullable
  public GlassesEnum getGlasses() {
    return glasses;
  }

  public void setGlasses(GlassesEnum glasses) {
    this.glasses = glasses;
  }


  public FaceAttributes hair(Hair hair) {
    this.hair = hair;
    return this;
  }

  /**
   * Get hair
   * @return hair
   */
  @javax.annotation.Nullable
  public Hair getHair() {
    return hair;
  }

  public void setHair(Hair hair) {
    this.hair = hair;
  }


  public FaceAttributes headPose(HeadPose headPose) {
    this.headPose = headPose;
    return this;
  }

  /**
   * Get headPose
   * @return headPose
   */
  @javax.annotation.Nullable
  public HeadPose getHeadPose() {
    return headPose;
  }

  public void setHeadPose(HeadPose headPose) {
    this.headPose = headPose;
  }


  public FaceAttributes makeup(Makeup makeup) {
    this.makeup = makeup;
    return this;
  }

  /**
   * Get makeup
   * @return makeup
   */
  @javax.annotation.Nullable
  public Makeup getMakeup() {
    return makeup;
  }

  public void setMakeup(Makeup makeup) {
    this.makeup = makeup;
  }


  public FaceAttributes noise(Noise noise) {
    this.noise = noise;
    return this;
  }

  /**
   * Get noise
   * @return noise
   */
  @javax.annotation.Nullable
  public Noise getNoise() {
    return noise;
  }

  public void setNoise(Noise noise) {
    this.noise = noise;
  }


  public FaceAttributes occlusion(Occlusion occlusion) {
    this.occlusion = occlusion;
    return this;
  }

  /**
   * Get occlusion
   * @return occlusion
   */
  @javax.annotation.Nullable
  public Occlusion getOcclusion() {
    return occlusion;
  }

  public void setOcclusion(Occlusion occlusion) {
    this.occlusion = occlusion;
  }


  public FaceAttributes smile(BigDecimal smile) {
    this.smile = smile;
    return this;
  }

  /**
   * A number ranging from 0 to 1 indicating the intensity level associated with a property.
   * minimum: 0
   * maximum: 1
   * @return smile
   */
  @javax.annotation.Nullable
  public BigDecimal getSmile() {
    return smile;
  }

  public void setSmile(BigDecimal smile) {
    this.smile = smile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FaceAttributes faceAttributes = (FaceAttributes) o;
    return Objects.equals(this.accessories, faceAttributes.accessories) &&
        Objects.equals(this.age, faceAttributes.age) &&
        Objects.equals(this.blur, faceAttributes.blur) &&
        Objects.equals(this.emotion, faceAttributes.emotion) &&
        Objects.equals(this.exposure, faceAttributes.exposure) &&
        Objects.equals(this.facialHair, faceAttributes.facialHair) &&
        Objects.equals(this.gender, faceAttributes.gender) &&
        Objects.equals(this.glasses, faceAttributes.glasses) &&
        Objects.equals(this.hair, faceAttributes.hair) &&
        Objects.equals(this.headPose, faceAttributes.headPose) &&
        Objects.equals(this.makeup, faceAttributes.makeup) &&
        Objects.equals(this.noise, faceAttributes.noise) &&
        Objects.equals(this.occlusion, faceAttributes.occlusion) &&
        Objects.equals(this.smile, faceAttributes.smile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessories, age, blur, emotion, exposure, facialHair, gender, glasses, hair, headPose, makeup, noise, occlusion, smile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FaceAttributes {\n");
    sb.append("    accessories: ").append(toIndentedString(accessories)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    blur: ").append(toIndentedString(blur)).append("\n");
    sb.append("    emotion: ").append(toIndentedString(emotion)).append("\n");
    sb.append("    exposure: ").append(toIndentedString(exposure)).append("\n");
    sb.append("    facialHair: ").append(toIndentedString(facialHair)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    glasses: ").append(toIndentedString(glasses)).append("\n");
    sb.append("    hair: ").append(toIndentedString(hair)).append("\n");
    sb.append("    headPose: ").append(toIndentedString(headPose)).append("\n");
    sb.append("    makeup: ").append(toIndentedString(makeup)).append("\n");
    sb.append("    noise: ").append(toIndentedString(noise)).append("\n");
    sb.append("    occlusion: ").append(toIndentedString(occlusion)).append("\n");
    sb.append("    smile: ").append(toIndentedString(smile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessories");
    openapiFields.add("age");
    openapiFields.add("blur");
    openapiFields.add("emotion");
    openapiFields.add("exposure");
    openapiFields.add("facialHair");
    openapiFields.add("gender");
    openapiFields.add("glasses");
    openapiFields.add("hair");
    openapiFields.add("headPose");
    openapiFields.add("makeup");
    openapiFields.add("noise");
    openapiFields.add("occlusion");
    openapiFields.add("smile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FaceAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FaceAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FaceAttributes is not found in the empty JSON string", FaceAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FaceAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FaceAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accessories") != null && !jsonObj.get("accessories").isJsonNull()) {
        JsonArray jsonArrayaccessories = jsonObj.getAsJsonArray("accessories");
        if (jsonArrayaccessories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accessories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accessories` to be an array in the JSON string but got `%s`", jsonObj.get("accessories").toString()));
          }

          // validate the optional field `accessories` (array)
          for (int i = 0; i < jsonArrayaccessories.size(); i++) {
            Accessory.validateJsonElement(jsonArrayaccessories.get(i));
          };
        }
      }
      // validate the optional field `blur`
      if (jsonObj.get("blur") != null && !jsonObj.get("blur").isJsonNull()) {
        Blur.validateJsonElement(jsonObj.get("blur"));
      }
      // validate the optional field `emotion`
      if (jsonObj.get("emotion") != null && !jsonObj.get("emotion").isJsonNull()) {
        Emotion.validateJsonElement(jsonObj.get("emotion"));
      }
      // validate the optional field `exposure`
      if (jsonObj.get("exposure") != null && !jsonObj.get("exposure").isJsonNull()) {
        Exposure.validateJsonElement(jsonObj.get("exposure"));
      }
      // validate the optional field `facialHair`
      if (jsonObj.get("facialHair") != null && !jsonObj.get("facialHair").isJsonNull()) {
        FacialHair.validateJsonElement(jsonObj.get("facialHair"));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        GenderEnum.validateJsonElement(jsonObj.get("gender"));
      }
      if ((jsonObj.get("glasses") != null && !jsonObj.get("glasses").isJsonNull()) && !jsonObj.get("glasses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `glasses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("glasses").toString()));
      }
      // validate the optional field `glasses`
      if (jsonObj.get("glasses") != null && !jsonObj.get("glasses").isJsonNull()) {
        GlassesEnum.validateJsonElement(jsonObj.get("glasses"));
      }
      // validate the optional field `hair`
      if (jsonObj.get("hair") != null && !jsonObj.get("hair").isJsonNull()) {
        Hair.validateJsonElement(jsonObj.get("hair"));
      }
      // validate the optional field `headPose`
      if (jsonObj.get("headPose") != null && !jsonObj.get("headPose").isJsonNull()) {
        HeadPose.validateJsonElement(jsonObj.get("headPose"));
      }
      // validate the optional field `makeup`
      if (jsonObj.get("makeup") != null && !jsonObj.get("makeup").isJsonNull()) {
        Makeup.validateJsonElement(jsonObj.get("makeup"));
      }
      // validate the optional field `noise`
      if (jsonObj.get("noise") != null && !jsonObj.get("noise").isJsonNull()) {
        Noise.validateJsonElement(jsonObj.get("noise"));
      }
      // validate the optional field `occlusion`
      if (jsonObj.get("occlusion") != null && !jsonObj.get("occlusion").isJsonNull()) {
        Occlusion.validateJsonElement(jsonObj.get("occlusion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FaceAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FaceAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FaceAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FaceAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<FaceAttributes>() {
           @Override
           public void write(JsonWriter out, FaceAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FaceAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FaceAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FaceAttributes
   * @throws IOException if the JSON string is invalid with respect to FaceAttributes
   */
  public static FaceAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FaceAttributes.class);
  }

  /**
   * Convert an instance of FaceAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

