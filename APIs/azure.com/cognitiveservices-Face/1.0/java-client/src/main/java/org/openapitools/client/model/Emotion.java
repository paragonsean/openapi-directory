/*
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties describing facial emotion in form of confidence ranging from 0 to 1.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:23.692507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Emotion {
  public static final String SERIALIZED_NAME_ANGER = "anger";
  @SerializedName(SERIALIZED_NAME_ANGER)
  private BigDecimal anger;

  public static final String SERIALIZED_NAME_CONTEMPT = "contempt";
  @SerializedName(SERIALIZED_NAME_CONTEMPT)
  private BigDecimal contempt;

  public static final String SERIALIZED_NAME_DISGUST = "disgust";
  @SerializedName(SERIALIZED_NAME_DISGUST)
  private BigDecimal disgust;

  public static final String SERIALIZED_NAME_FEAR = "fear";
  @SerializedName(SERIALIZED_NAME_FEAR)
  private BigDecimal fear;

  public static final String SERIALIZED_NAME_HAPPINESS = "happiness";
  @SerializedName(SERIALIZED_NAME_HAPPINESS)
  private BigDecimal happiness;

  public static final String SERIALIZED_NAME_NEUTRAL = "neutral";
  @SerializedName(SERIALIZED_NAME_NEUTRAL)
  private BigDecimal neutral;

  public static final String SERIALIZED_NAME_SADNESS = "sadness";
  @SerializedName(SERIALIZED_NAME_SADNESS)
  private BigDecimal sadness;

  public static final String SERIALIZED_NAME_SURPRISE = "surprise";
  @SerializedName(SERIALIZED_NAME_SURPRISE)
  private BigDecimal surprise;

  public Emotion() {
  }

  public Emotion anger(BigDecimal anger) {
    this.anger = anger;
    return this;
  }

  /**
   * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
   * minimum: 0
   * maximum: 1
   * @return anger
   */
  @javax.annotation.Nullable
  public BigDecimal getAnger() {
    return anger;
  }

  public void setAnger(BigDecimal anger) {
    this.anger = anger;
  }


  public Emotion contempt(BigDecimal contempt) {
    this.contempt = contempt;
    return this;
  }

  /**
   * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
   * minimum: 0
   * maximum: 1
   * @return contempt
   */
  @javax.annotation.Nullable
  public BigDecimal getContempt() {
    return contempt;
  }

  public void setContempt(BigDecimal contempt) {
    this.contempt = contempt;
  }


  public Emotion disgust(BigDecimal disgust) {
    this.disgust = disgust;
    return this;
  }

  /**
   * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
   * minimum: 0
   * maximum: 1
   * @return disgust
   */
  @javax.annotation.Nullable
  public BigDecimal getDisgust() {
    return disgust;
  }

  public void setDisgust(BigDecimal disgust) {
    this.disgust = disgust;
  }


  public Emotion fear(BigDecimal fear) {
    this.fear = fear;
    return this;
  }

  /**
   * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
   * minimum: 0
   * maximum: 1
   * @return fear
   */
  @javax.annotation.Nullable
  public BigDecimal getFear() {
    return fear;
  }

  public void setFear(BigDecimal fear) {
    this.fear = fear;
  }


  public Emotion happiness(BigDecimal happiness) {
    this.happiness = happiness;
    return this;
  }

  /**
   * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
   * minimum: 0
   * maximum: 1
   * @return happiness
   */
  @javax.annotation.Nullable
  public BigDecimal getHappiness() {
    return happiness;
  }

  public void setHappiness(BigDecimal happiness) {
    this.happiness = happiness;
  }


  public Emotion neutral(BigDecimal neutral) {
    this.neutral = neutral;
    return this;
  }

  /**
   * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
   * minimum: 0
   * maximum: 1
   * @return neutral
   */
  @javax.annotation.Nullable
  public BigDecimal getNeutral() {
    return neutral;
  }

  public void setNeutral(BigDecimal neutral) {
    this.neutral = neutral;
  }


  public Emotion sadness(BigDecimal sadness) {
    this.sadness = sadness;
    return this;
  }

  /**
   * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
   * minimum: 0
   * maximum: 1
   * @return sadness
   */
  @javax.annotation.Nullable
  public BigDecimal getSadness() {
    return sadness;
  }

  public void setSadness(BigDecimal sadness) {
    this.sadness = sadness;
  }


  public Emotion surprise(BigDecimal surprise) {
    this.surprise = surprise;
    return this;
  }

  /**
   * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
   * minimum: 0
   * maximum: 1
   * @return surprise
   */
  @javax.annotation.Nullable
  public BigDecimal getSurprise() {
    return surprise;
  }

  public void setSurprise(BigDecimal surprise) {
    this.surprise = surprise;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Emotion emotion = (Emotion) o;
    return Objects.equals(this.anger, emotion.anger) &&
        Objects.equals(this.contempt, emotion.contempt) &&
        Objects.equals(this.disgust, emotion.disgust) &&
        Objects.equals(this.fear, emotion.fear) &&
        Objects.equals(this.happiness, emotion.happiness) &&
        Objects.equals(this.neutral, emotion.neutral) &&
        Objects.equals(this.sadness, emotion.sadness) &&
        Objects.equals(this.surprise, emotion.surprise);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anger, contempt, disgust, fear, happiness, neutral, sadness, surprise);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Emotion {\n");
    sb.append("    anger: ").append(toIndentedString(anger)).append("\n");
    sb.append("    contempt: ").append(toIndentedString(contempt)).append("\n");
    sb.append("    disgust: ").append(toIndentedString(disgust)).append("\n");
    sb.append("    fear: ").append(toIndentedString(fear)).append("\n");
    sb.append("    happiness: ").append(toIndentedString(happiness)).append("\n");
    sb.append("    neutral: ").append(toIndentedString(neutral)).append("\n");
    sb.append("    sadness: ").append(toIndentedString(sadness)).append("\n");
    sb.append("    surprise: ").append(toIndentedString(surprise)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anger");
    openapiFields.add("contempt");
    openapiFields.add("disgust");
    openapiFields.add("fear");
    openapiFields.add("happiness");
    openapiFields.add("neutral");
    openapiFields.add("sadness");
    openapiFields.add("surprise");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Emotion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Emotion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Emotion is not found in the empty JSON string", Emotion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Emotion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Emotion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Emotion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Emotion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Emotion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Emotion.class));

       return (TypeAdapter<T>) new TypeAdapter<Emotion>() {
           @Override
           public void write(JsonWriter out, Emotion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Emotion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Emotion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Emotion
   * @throws IOException if the JSON string is invalid with respect to Emotion
   */
  public static Emotion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Emotion.class);
  }

  /**
   * Convert an instance of Emotion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

