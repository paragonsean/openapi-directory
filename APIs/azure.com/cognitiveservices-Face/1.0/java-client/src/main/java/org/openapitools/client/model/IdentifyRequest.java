/*
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request body for identify face operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:23.692507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentifyRequest {
  public static final String SERIALIZED_NAME_CONFIDENCE_THRESHOLD = "confidenceThreshold";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_THRESHOLD)
  private BigDecimal confidenceThreshold;

  public static final String SERIALIZED_NAME_FACE_IDS = "faceIds";
  @SerializedName(SERIALIZED_NAME_FACE_IDS)
  private List<UUID> faceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LARGE_PERSON_GROUP_ID = "largePersonGroupId";
  @SerializedName(SERIALIZED_NAME_LARGE_PERSON_GROUP_ID)
  private String largePersonGroupId;

  public static final String SERIALIZED_NAME_MAX_NUM_OF_CANDIDATES_RETURNED = "maxNumOfCandidatesReturned";
  @SerializedName(SERIALIZED_NAME_MAX_NUM_OF_CANDIDATES_RETURNED)
  private Integer maxNumOfCandidatesReturned;

  public static final String SERIALIZED_NAME_PERSON_GROUP_ID = "personGroupId";
  @SerializedName(SERIALIZED_NAME_PERSON_GROUP_ID)
  private String personGroupId;

  public IdentifyRequest() {
  }

  public IdentifyRequest confidenceThreshold(BigDecimal confidenceThreshold) {
    this.confidenceThreshold = confidenceThreshold;
    return this;
  }

  /**
   * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
   * minimum: 0
   * maximum: 1
   * @return confidenceThreshold
   */
  @javax.annotation.Nullable
  public BigDecimal getConfidenceThreshold() {
    return confidenceThreshold;
  }

  public void setConfidenceThreshold(BigDecimal confidenceThreshold) {
    this.confidenceThreshold = confidenceThreshold;
  }


  public IdentifyRequest faceIds(List<UUID> faceIds) {
    this.faceIds = faceIds;
    return this;
  }

  public IdentifyRequest addFaceIdsItem(UUID faceIdsItem) {
    if (this.faceIds == null) {
      this.faceIds = new ArrayList<>();
    }
    this.faceIds.add(faceIdsItem);
    return this;
  }

  /**
   * Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10].
   * @return faceIds
   */
  @javax.annotation.Nonnull
  public List<UUID> getFaceIds() {
    return faceIds;
  }

  public void setFaceIds(List<UUID> faceIds) {
    this.faceIds = faceIds;
  }


  public IdentifyRequest largePersonGroupId(String largePersonGroupId) {
    this.largePersonGroupId = largePersonGroupId;
    return this;
  }

  /**
   * LargePersonGroupId of the target large person group, created by LargePersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.
   * @return largePersonGroupId
   */
  @javax.annotation.Nullable
  public String getLargePersonGroupId() {
    return largePersonGroupId;
  }

  public void setLargePersonGroupId(String largePersonGroupId) {
    this.largePersonGroupId = largePersonGroupId;
  }


  public IdentifyRequest maxNumOfCandidatesReturned(Integer maxNumOfCandidatesReturned) {
    this.maxNumOfCandidatesReturned = maxNumOfCandidatesReturned;
    return this;
  }

  /**
   * The range of maxNumOfCandidatesReturned is between 1 and 5 (default is 1).
   * minimum: 1
   * maximum: 5
   * @return maxNumOfCandidatesReturned
   */
  @javax.annotation.Nullable
  public Integer getMaxNumOfCandidatesReturned() {
    return maxNumOfCandidatesReturned;
  }

  public void setMaxNumOfCandidatesReturned(Integer maxNumOfCandidatesReturned) {
    this.maxNumOfCandidatesReturned = maxNumOfCandidatesReturned;
  }


  public IdentifyRequest personGroupId(String personGroupId) {
    this.personGroupId = personGroupId;
    return this;
  }

  /**
   * PersonGroupId of the target person group, created by PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.
   * @return personGroupId
   */
  @javax.annotation.Nullable
  public String getPersonGroupId() {
    return personGroupId;
  }

  public void setPersonGroupId(String personGroupId) {
    this.personGroupId = personGroupId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentifyRequest identifyRequest = (IdentifyRequest) o;
    return Objects.equals(this.confidenceThreshold, identifyRequest.confidenceThreshold) &&
        Objects.equals(this.faceIds, identifyRequest.faceIds) &&
        Objects.equals(this.largePersonGroupId, identifyRequest.largePersonGroupId) &&
        Objects.equals(this.maxNumOfCandidatesReturned, identifyRequest.maxNumOfCandidatesReturned) &&
        Objects.equals(this.personGroupId, identifyRequest.personGroupId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidenceThreshold, faceIds, largePersonGroupId, maxNumOfCandidatesReturned, personGroupId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentifyRequest {\n");
    sb.append("    confidenceThreshold: ").append(toIndentedString(confidenceThreshold)).append("\n");
    sb.append("    faceIds: ").append(toIndentedString(faceIds)).append("\n");
    sb.append("    largePersonGroupId: ").append(toIndentedString(largePersonGroupId)).append("\n");
    sb.append("    maxNumOfCandidatesReturned: ").append(toIndentedString(maxNumOfCandidatesReturned)).append("\n");
    sb.append("    personGroupId: ").append(toIndentedString(personGroupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidenceThreshold");
    openapiFields.add("faceIds");
    openapiFields.add("largePersonGroupId");
    openapiFields.add("maxNumOfCandidatesReturned");
    openapiFields.add("personGroupId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("faceIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentifyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentifyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentifyRequest is not found in the empty JSON string", IdentifyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentifyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentifyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IdentifyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("faceIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("faceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `faceIds` to be an array in the JSON string but got `%s`", jsonObj.get("faceIds").toString()));
      }
      if ((jsonObj.get("largePersonGroupId") != null && !jsonObj.get("largePersonGroupId").isJsonNull()) && !jsonObj.get("largePersonGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `largePersonGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("largePersonGroupId").toString()));
      }
      if ((jsonObj.get("personGroupId") != null && !jsonObj.get("personGroupId").isJsonNull()) && !jsonObj.get("personGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personGroupId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentifyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentifyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentifyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentifyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentifyRequest>() {
           @Override
           public void write(JsonWriter out, IdentifyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentifyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentifyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentifyRequest
   * @throws IOException if the JSON string is invalid with respect to IdentifyRequest
   */
  public static IdentifyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentifyRequest.class);
  }

  /**
   * Convert an instance of IdentifyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

