/*
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Coordinate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of 27-point face landmarks pointing to the important positions of face components.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:23.692507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FaceLandmarks {
  public static final String SERIALIZED_NAME_EYE_LEFT_BOTTOM = "eyeLeftBottom";
  @SerializedName(SERIALIZED_NAME_EYE_LEFT_BOTTOM)
  private Coordinate eyeLeftBottom;

  public static final String SERIALIZED_NAME_EYE_LEFT_INNER = "eyeLeftInner";
  @SerializedName(SERIALIZED_NAME_EYE_LEFT_INNER)
  private Coordinate eyeLeftInner;

  public static final String SERIALIZED_NAME_EYE_LEFT_OUTER = "eyeLeftOuter";
  @SerializedName(SERIALIZED_NAME_EYE_LEFT_OUTER)
  private Coordinate eyeLeftOuter;

  public static final String SERIALIZED_NAME_EYE_LEFT_TOP = "eyeLeftTop";
  @SerializedName(SERIALIZED_NAME_EYE_LEFT_TOP)
  private Coordinate eyeLeftTop;

  public static final String SERIALIZED_NAME_EYE_RIGHT_BOTTOM = "eyeRightBottom";
  @SerializedName(SERIALIZED_NAME_EYE_RIGHT_BOTTOM)
  private Coordinate eyeRightBottom;

  public static final String SERIALIZED_NAME_EYE_RIGHT_INNER = "eyeRightInner";
  @SerializedName(SERIALIZED_NAME_EYE_RIGHT_INNER)
  private Coordinate eyeRightInner;

  public static final String SERIALIZED_NAME_EYE_RIGHT_OUTER = "eyeRightOuter";
  @SerializedName(SERIALIZED_NAME_EYE_RIGHT_OUTER)
  private Coordinate eyeRightOuter;

  public static final String SERIALIZED_NAME_EYE_RIGHT_TOP = "eyeRightTop";
  @SerializedName(SERIALIZED_NAME_EYE_RIGHT_TOP)
  private Coordinate eyeRightTop;

  public static final String SERIALIZED_NAME_EYEBROW_LEFT_INNER = "eyebrowLeftInner";
  @SerializedName(SERIALIZED_NAME_EYEBROW_LEFT_INNER)
  private Coordinate eyebrowLeftInner;

  public static final String SERIALIZED_NAME_EYEBROW_LEFT_OUTER = "eyebrowLeftOuter";
  @SerializedName(SERIALIZED_NAME_EYEBROW_LEFT_OUTER)
  private Coordinate eyebrowLeftOuter;

  public static final String SERIALIZED_NAME_EYEBROW_RIGHT_INNER = "eyebrowRightInner";
  @SerializedName(SERIALIZED_NAME_EYEBROW_RIGHT_INNER)
  private Coordinate eyebrowRightInner;

  public static final String SERIALIZED_NAME_EYEBROW_RIGHT_OUTER = "eyebrowRightOuter";
  @SerializedName(SERIALIZED_NAME_EYEBROW_RIGHT_OUTER)
  private Coordinate eyebrowRightOuter;

  public static final String SERIALIZED_NAME_MOUTH_LEFT = "mouthLeft";
  @SerializedName(SERIALIZED_NAME_MOUTH_LEFT)
  private Coordinate mouthLeft;

  public static final String SERIALIZED_NAME_MOUTH_RIGHT = "mouthRight";
  @SerializedName(SERIALIZED_NAME_MOUTH_RIGHT)
  private Coordinate mouthRight;

  public static final String SERIALIZED_NAME_NOSE_LEFT_ALAR_OUT_TIP = "noseLeftAlarOutTip";
  @SerializedName(SERIALIZED_NAME_NOSE_LEFT_ALAR_OUT_TIP)
  private Coordinate noseLeftAlarOutTip;

  public static final String SERIALIZED_NAME_NOSE_LEFT_ALAR_TOP = "noseLeftAlarTop";
  @SerializedName(SERIALIZED_NAME_NOSE_LEFT_ALAR_TOP)
  private Coordinate noseLeftAlarTop;

  public static final String SERIALIZED_NAME_NOSE_RIGHT_ALAR_OUT_TIP = "noseRightAlarOutTip";
  @SerializedName(SERIALIZED_NAME_NOSE_RIGHT_ALAR_OUT_TIP)
  private Coordinate noseRightAlarOutTip;

  public static final String SERIALIZED_NAME_NOSE_RIGHT_ALAR_TOP = "noseRightAlarTop";
  @SerializedName(SERIALIZED_NAME_NOSE_RIGHT_ALAR_TOP)
  private Coordinate noseRightAlarTop;

  public static final String SERIALIZED_NAME_NOSE_ROOT_LEFT = "noseRootLeft";
  @SerializedName(SERIALIZED_NAME_NOSE_ROOT_LEFT)
  private Coordinate noseRootLeft;

  public static final String SERIALIZED_NAME_NOSE_ROOT_RIGHT = "noseRootRight";
  @SerializedName(SERIALIZED_NAME_NOSE_ROOT_RIGHT)
  private Coordinate noseRootRight;

  public static final String SERIALIZED_NAME_NOSE_TIP = "noseTip";
  @SerializedName(SERIALIZED_NAME_NOSE_TIP)
  private Coordinate noseTip;

  public static final String SERIALIZED_NAME_PUPIL_LEFT = "pupilLeft";
  @SerializedName(SERIALIZED_NAME_PUPIL_LEFT)
  private Coordinate pupilLeft;

  public static final String SERIALIZED_NAME_PUPIL_RIGHT = "pupilRight";
  @SerializedName(SERIALIZED_NAME_PUPIL_RIGHT)
  private Coordinate pupilRight;

  public static final String SERIALIZED_NAME_UNDER_LIP_BOTTOM = "underLipBottom";
  @SerializedName(SERIALIZED_NAME_UNDER_LIP_BOTTOM)
  private Coordinate underLipBottom;

  public static final String SERIALIZED_NAME_UNDER_LIP_TOP = "underLipTop";
  @SerializedName(SERIALIZED_NAME_UNDER_LIP_TOP)
  private Coordinate underLipTop;

  public static final String SERIALIZED_NAME_UPPER_LIP_BOTTOM = "upperLipBottom";
  @SerializedName(SERIALIZED_NAME_UPPER_LIP_BOTTOM)
  private Coordinate upperLipBottom;

  public static final String SERIALIZED_NAME_UPPER_LIP_TOP = "upperLipTop";
  @SerializedName(SERIALIZED_NAME_UPPER_LIP_TOP)
  private Coordinate upperLipTop;

  public FaceLandmarks() {
  }

  public FaceLandmarks eyeLeftBottom(Coordinate eyeLeftBottom) {
    this.eyeLeftBottom = eyeLeftBottom;
    return this;
  }

  /**
   * Get eyeLeftBottom
   * @return eyeLeftBottom
   */
  @javax.annotation.Nullable
  public Coordinate getEyeLeftBottom() {
    return eyeLeftBottom;
  }

  public void setEyeLeftBottom(Coordinate eyeLeftBottom) {
    this.eyeLeftBottom = eyeLeftBottom;
  }


  public FaceLandmarks eyeLeftInner(Coordinate eyeLeftInner) {
    this.eyeLeftInner = eyeLeftInner;
    return this;
  }

  /**
   * Get eyeLeftInner
   * @return eyeLeftInner
   */
  @javax.annotation.Nullable
  public Coordinate getEyeLeftInner() {
    return eyeLeftInner;
  }

  public void setEyeLeftInner(Coordinate eyeLeftInner) {
    this.eyeLeftInner = eyeLeftInner;
  }


  public FaceLandmarks eyeLeftOuter(Coordinate eyeLeftOuter) {
    this.eyeLeftOuter = eyeLeftOuter;
    return this;
  }

  /**
   * Get eyeLeftOuter
   * @return eyeLeftOuter
   */
  @javax.annotation.Nullable
  public Coordinate getEyeLeftOuter() {
    return eyeLeftOuter;
  }

  public void setEyeLeftOuter(Coordinate eyeLeftOuter) {
    this.eyeLeftOuter = eyeLeftOuter;
  }


  public FaceLandmarks eyeLeftTop(Coordinate eyeLeftTop) {
    this.eyeLeftTop = eyeLeftTop;
    return this;
  }

  /**
   * Get eyeLeftTop
   * @return eyeLeftTop
   */
  @javax.annotation.Nullable
  public Coordinate getEyeLeftTop() {
    return eyeLeftTop;
  }

  public void setEyeLeftTop(Coordinate eyeLeftTop) {
    this.eyeLeftTop = eyeLeftTop;
  }


  public FaceLandmarks eyeRightBottom(Coordinate eyeRightBottom) {
    this.eyeRightBottom = eyeRightBottom;
    return this;
  }

  /**
   * Get eyeRightBottom
   * @return eyeRightBottom
   */
  @javax.annotation.Nullable
  public Coordinate getEyeRightBottom() {
    return eyeRightBottom;
  }

  public void setEyeRightBottom(Coordinate eyeRightBottom) {
    this.eyeRightBottom = eyeRightBottom;
  }


  public FaceLandmarks eyeRightInner(Coordinate eyeRightInner) {
    this.eyeRightInner = eyeRightInner;
    return this;
  }

  /**
   * Get eyeRightInner
   * @return eyeRightInner
   */
  @javax.annotation.Nullable
  public Coordinate getEyeRightInner() {
    return eyeRightInner;
  }

  public void setEyeRightInner(Coordinate eyeRightInner) {
    this.eyeRightInner = eyeRightInner;
  }


  public FaceLandmarks eyeRightOuter(Coordinate eyeRightOuter) {
    this.eyeRightOuter = eyeRightOuter;
    return this;
  }

  /**
   * Get eyeRightOuter
   * @return eyeRightOuter
   */
  @javax.annotation.Nullable
  public Coordinate getEyeRightOuter() {
    return eyeRightOuter;
  }

  public void setEyeRightOuter(Coordinate eyeRightOuter) {
    this.eyeRightOuter = eyeRightOuter;
  }


  public FaceLandmarks eyeRightTop(Coordinate eyeRightTop) {
    this.eyeRightTop = eyeRightTop;
    return this;
  }

  /**
   * Get eyeRightTop
   * @return eyeRightTop
   */
  @javax.annotation.Nullable
  public Coordinate getEyeRightTop() {
    return eyeRightTop;
  }

  public void setEyeRightTop(Coordinate eyeRightTop) {
    this.eyeRightTop = eyeRightTop;
  }


  public FaceLandmarks eyebrowLeftInner(Coordinate eyebrowLeftInner) {
    this.eyebrowLeftInner = eyebrowLeftInner;
    return this;
  }

  /**
   * Get eyebrowLeftInner
   * @return eyebrowLeftInner
   */
  @javax.annotation.Nullable
  public Coordinate getEyebrowLeftInner() {
    return eyebrowLeftInner;
  }

  public void setEyebrowLeftInner(Coordinate eyebrowLeftInner) {
    this.eyebrowLeftInner = eyebrowLeftInner;
  }


  public FaceLandmarks eyebrowLeftOuter(Coordinate eyebrowLeftOuter) {
    this.eyebrowLeftOuter = eyebrowLeftOuter;
    return this;
  }

  /**
   * Get eyebrowLeftOuter
   * @return eyebrowLeftOuter
   */
  @javax.annotation.Nullable
  public Coordinate getEyebrowLeftOuter() {
    return eyebrowLeftOuter;
  }

  public void setEyebrowLeftOuter(Coordinate eyebrowLeftOuter) {
    this.eyebrowLeftOuter = eyebrowLeftOuter;
  }


  public FaceLandmarks eyebrowRightInner(Coordinate eyebrowRightInner) {
    this.eyebrowRightInner = eyebrowRightInner;
    return this;
  }

  /**
   * Get eyebrowRightInner
   * @return eyebrowRightInner
   */
  @javax.annotation.Nullable
  public Coordinate getEyebrowRightInner() {
    return eyebrowRightInner;
  }

  public void setEyebrowRightInner(Coordinate eyebrowRightInner) {
    this.eyebrowRightInner = eyebrowRightInner;
  }


  public FaceLandmarks eyebrowRightOuter(Coordinate eyebrowRightOuter) {
    this.eyebrowRightOuter = eyebrowRightOuter;
    return this;
  }

  /**
   * Get eyebrowRightOuter
   * @return eyebrowRightOuter
   */
  @javax.annotation.Nullable
  public Coordinate getEyebrowRightOuter() {
    return eyebrowRightOuter;
  }

  public void setEyebrowRightOuter(Coordinate eyebrowRightOuter) {
    this.eyebrowRightOuter = eyebrowRightOuter;
  }


  public FaceLandmarks mouthLeft(Coordinate mouthLeft) {
    this.mouthLeft = mouthLeft;
    return this;
  }

  /**
   * Get mouthLeft
   * @return mouthLeft
   */
  @javax.annotation.Nullable
  public Coordinate getMouthLeft() {
    return mouthLeft;
  }

  public void setMouthLeft(Coordinate mouthLeft) {
    this.mouthLeft = mouthLeft;
  }


  public FaceLandmarks mouthRight(Coordinate mouthRight) {
    this.mouthRight = mouthRight;
    return this;
  }

  /**
   * Get mouthRight
   * @return mouthRight
   */
  @javax.annotation.Nullable
  public Coordinate getMouthRight() {
    return mouthRight;
  }

  public void setMouthRight(Coordinate mouthRight) {
    this.mouthRight = mouthRight;
  }


  public FaceLandmarks noseLeftAlarOutTip(Coordinate noseLeftAlarOutTip) {
    this.noseLeftAlarOutTip = noseLeftAlarOutTip;
    return this;
  }

  /**
   * Get noseLeftAlarOutTip
   * @return noseLeftAlarOutTip
   */
  @javax.annotation.Nullable
  public Coordinate getNoseLeftAlarOutTip() {
    return noseLeftAlarOutTip;
  }

  public void setNoseLeftAlarOutTip(Coordinate noseLeftAlarOutTip) {
    this.noseLeftAlarOutTip = noseLeftAlarOutTip;
  }


  public FaceLandmarks noseLeftAlarTop(Coordinate noseLeftAlarTop) {
    this.noseLeftAlarTop = noseLeftAlarTop;
    return this;
  }

  /**
   * Get noseLeftAlarTop
   * @return noseLeftAlarTop
   */
  @javax.annotation.Nullable
  public Coordinate getNoseLeftAlarTop() {
    return noseLeftAlarTop;
  }

  public void setNoseLeftAlarTop(Coordinate noseLeftAlarTop) {
    this.noseLeftAlarTop = noseLeftAlarTop;
  }


  public FaceLandmarks noseRightAlarOutTip(Coordinate noseRightAlarOutTip) {
    this.noseRightAlarOutTip = noseRightAlarOutTip;
    return this;
  }

  /**
   * Get noseRightAlarOutTip
   * @return noseRightAlarOutTip
   */
  @javax.annotation.Nullable
  public Coordinate getNoseRightAlarOutTip() {
    return noseRightAlarOutTip;
  }

  public void setNoseRightAlarOutTip(Coordinate noseRightAlarOutTip) {
    this.noseRightAlarOutTip = noseRightAlarOutTip;
  }


  public FaceLandmarks noseRightAlarTop(Coordinate noseRightAlarTop) {
    this.noseRightAlarTop = noseRightAlarTop;
    return this;
  }

  /**
   * Get noseRightAlarTop
   * @return noseRightAlarTop
   */
  @javax.annotation.Nullable
  public Coordinate getNoseRightAlarTop() {
    return noseRightAlarTop;
  }

  public void setNoseRightAlarTop(Coordinate noseRightAlarTop) {
    this.noseRightAlarTop = noseRightAlarTop;
  }


  public FaceLandmarks noseRootLeft(Coordinate noseRootLeft) {
    this.noseRootLeft = noseRootLeft;
    return this;
  }

  /**
   * Get noseRootLeft
   * @return noseRootLeft
   */
  @javax.annotation.Nullable
  public Coordinate getNoseRootLeft() {
    return noseRootLeft;
  }

  public void setNoseRootLeft(Coordinate noseRootLeft) {
    this.noseRootLeft = noseRootLeft;
  }


  public FaceLandmarks noseRootRight(Coordinate noseRootRight) {
    this.noseRootRight = noseRootRight;
    return this;
  }

  /**
   * Get noseRootRight
   * @return noseRootRight
   */
  @javax.annotation.Nullable
  public Coordinate getNoseRootRight() {
    return noseRootRight;
  }

  public void setNoseRootRight(Coordinate noseRootRight) {
    this.noseRootRight = noseRootRight;
  }


  public FaceLandmarks noseTip(Coordinate noseTip) {
    this.noseTip = noseTip;
    return this;
  }

  /**
   * Get noseTip
   * @return noseTip
   */
  @javax.annotation.Nullable
  public Coordinate getNoseTip() {
    return noseTip;
  }

  public void setNoseTip(Coordinate noseTip) {
    this.noseTip = noseTip;
  }


  public FaceLandmarks pupilLeft(Coordinate pupilLeft) {
    this.pupilLeft = pupilLeft;
    return this;
  }

  /**
   * Get pupilLeft
   * @return pupilLeft
   */
  @javax.annotation.Nullable
  public Coordinate getPupilLeft() {
    return pupilLeft;
  }

  public void setPupilLeft(Coordinate pupilLeft) {
    this.pupilLeft = pupilLeft;
  }


  public FaceLandmarks pupilRight(Coordinate pupilRight) {
    this.pupilRight = pupilRight;
    return this;
  }

  /**
   * Get pupilRight
   * @return pupilRight
   */
  @javax.annotation.Nullable
  public Coordinate getPupilRight() {
    return pupilRight;
  }

  public void setPupilRight(Coordinate pupilRight) {
    this.pupilRight = pupilRight;
  }


  public FaceLandmarks underLipBottom(Coordinate underLipBottom) {
    this.underLipBottom = underLipBottom;
    return this;
  }

  /**
   * Get underLipBottom
   * @return underLipBottom
   */
  @javax.annotation.Nullable
  public Coordinate getUnderLipBottom() {
    return underLipBottom;
  }

  public void setUnderLipBottom(Coordinate underLipBottom) {
    this.underLipBottom = underLipBottom;
  }


  public FaceLandmarks underLipTop(Coordinate underLipTop) {
    this.underLipTop = underLipTop;
    return this;
  }

  /**
   * Get underLipTop
   * @return underLipTop
   */
  @javax.annotation.Nullable
  public Coordinate getUnderLipTop() {
    return underLipTop;
  }

  public void setUnderLipTop(Coordinate underLipTop) {
    this.underLipTop = underLipTop;
  }


  public FaceLandmarks upperLipBottom(Coordinate upperLipBottom) {
    this.upperLipBottom = upperLipBottom;
    return this;
  }

  /**
   * Get upperLipBottom
   * @return upperLipBottom
   */
  @javax.annotation.Nullable
  public Coordinate getUpperLipBottom() {
    return upperLipBottom;
  }

  public void setUpperLipBottom(Coordinate upperLipBottom) {
    this.upperLipBottom = upperLipBottom;
  }


  public FaceLandmarks upperLipTop(Coordinate upperLipTop) {
    this.upperLipTop = upperLipTop;
    return this;
  }

  /**
   * Get upperLipTop
   * @return upperLipTop
   */
  @javax.annotation.Nullable
  public Coordinate getUpperLipTop() {
    return upperLipTop;
  }

  public void setUpperLipTop(Coordinate upperLipTop) {
    this.upperLipTop = upperLipTop;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FaceLandmarks faceLandmarks = (FaceLandmarks) o;
    return Objects.equals(this.eyeLeftBottom, faceLandmarks.eyeLeftBottom) &&
        Objects.equals(this.eyeLeftInner, faceLandmarks.eyeLeftInner) &&
        Objects.equals(this.eyeLeftOuter, faceLandmarks.eyeLeftOuter) &&
        Objects.equals(this.eyeLeftTop, faceLandmarks.eyeLeftTop) &&
        Objects.equals(this.eyeRightBottom, faceLandmarks.eyeRightBottom) &&
        Objects.equals(this.eyeRightInner, faceLandmarks.eyeRightInner) &&
        Objects.equals(this.eyeRightOuter, faceLandmarks.eyeRightOuter) &&
        Objects.equals(this.eyeRightTop, faceLandmarks.eyeRightTop) &&
        Objects.equals(this.eyebrowLeftInner, faceLandmarks.eyebrowLeftInner) &&
        Objects.equals(this.eyebrowLeftOuter, faceLandmarks.eyebrowLeftOuter) &&
        Objects.equals(this.eyebrowRightInner, faceLandmarks.eyebrowRightInner) &&
        Objects.equals(this.eyebrowRightOuter, faceLandmarks.eyebrowRightOuter) &&
        Objects.equals(this.mouthLeft, faceLandmarks.mouthLeft) &&
        Objects.equals(this.mouthRight, faceLandmarks.mouthRight) &&
        Objects.equals(this.noseLeftAlarOutTip, faceLandmarks.noseLeftAlarOutTip) &&
        Objects.equals(this.noseLeftAlarTop, faceLandmarks.noseLeftAlarTop) &&
        Objects.equals(this.noseRightAlarOutTip, faceLandmarks.noseRightAlarOutTip) &&
        Objects.equals(this.noseRightAlarTop, faceLandmarks.noseRightAlarTop) &&
        Objects.equals(this.noseRootLeft, faceLandmarks.noseRootLeft) &&
        Objects.equals(this.noseRootRight, faceLandmarks.noseRootRight) &&
        Objects.equals(this.noseTip, faceLandmarks.noseTip) &&
        Objects.equals(this.pupilLeft, faceLandmarks.pupilLeft) &&
        Objects.equals(this.pupilRight, faceLandmarks.pupilRight) &&
        Objects.equals(this.underLipBottom, faceLandmarks.underLipBottom) &&
        Objects.equals(this.underLipTop, faceLandmarks.underLipTop) &&
        Objects.equals(this.upperLipBottom, faceLandmarks.upperLipBottom) &&
        Objects.equals(this.upperLipTop, faceLandmarks.upperLipTop);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eyeLeftBottom, eyeLeftInner, eyeLeftOuter, eyeLeftTop, eyeRightBottom, eyeRightInner, eyeRightOuter, eyeRightTop, eyebrowLeftInner, eyebrowLeftOuter, eyebrowRightInner, eyebrowRightOuter, mouthLeft, mouthRight, noseLeftAlarOutTip, noseLeftAlarTop, noseRightAlarOutTip, noseRightAlarTop, noseRootLeft, noseRootRight, noseTip, pupilLeft, pupilRight, underLipBottom, underLipTop, upperLipBottom, upperLipTop);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FaceLandmarks {\n");
    sb.append("    eyeLeftBottom: ").append(toIndentedString(eyeLeftBottom)).append("\n");
    sb.append("    eyeLeftInner: ").append(toIndentedString(eyeLeftInner)).append("\n");
    sb.append("    eyeLeftOuter: ").append(toIndentedString(eyeLeftOuter)).append("\n");
    sb.append("    eyeLeftTop: ").append(toIndentedString(eyeLeftTop)).append("\n");
    sb.append("    eyeRightBottom: ").append(toIndentedString(eyeRightBottom)).append("\n");
    sb.append("    eyeRightInner: ").append(toIndentedString(eyeRightInner)).append("\n");
    sb.append("    eyeRightOuter: ").append(toIndentedString(eyeRightOuter)).append("\n");
    sb.append("    eyeRightTop: ").append(toIndentedString(eyeRightTop)).append("\n");
    sb.append("    eyebrowLeftInner: ").append(toIndentedString(eyebrowLeftInner)).append("\n");
    sb.append("    eyebrowLeftOuter: ").append(toIndentedString(eyebrowLeftOuter)).append("\n");
    sb.append("    eyebrowRightInner: ").append(toIndentedString(eyebrowRightInner)).append("\n");
    sb.append("    eyebrowRightOuter: ").append(toIndentedString(eyebrowRightOuter)).append("\n");
    sb.append("    mouthLeft: ").append(toIndentedString(mouthLeft)).append("\n");
    sb.append("    mouthRight: ").append(toIndentedString(mouthRight)).append("\n");
    sb.append("    noseLeftAlarOutTip: ").append(toIndentedString(noseLeftAlarOutTip)).append("\n");
    sb.append("    noseLeftAlarTop: ").append(toIndentedString(noseLeftAlarTop)).append("\n");
    sb.append("    noseRightAlarOutTip: ").append(toIndentedString(noseRightAlarOutTip)).append("\n");
    sb.append("    noseRightAlarTop: ").append(toIndentedString(noseRightAlarTop)).append("\n");
    sb.append("    noseRootLeft: ").append(toIndentedString(noseRootLeft)).append("\n");
    sb.append("    noseRootRight: ").append(toIndentedString(noseRootRight)).append("\n");
    sb.append("    noseTip: ").append(toIndentedString(noseTip)).append("\n");
    sb.append("    pupilLeft: ").append(toIndentedString(pupilLeft)).append("\n");
    sb.append("    pupilRight: ").append(toIndentedString(pupilRight)).append("\n");
    sb.append("    underLipBottom: ").append(toIndentedString(underLipBottom)).append("\n");
    sb.append("    underLipTop: ").append(toIndentedString(underLipTop)).append("\n");
    sb.append("    upperLipBottom: ").append(toIndentedString(upperLipBottom)).append("\n");
    sb.append("    upperLipTop: ").append(toIndentedString(upperLipTop)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eyeLeftBottom");
    openapiFields.add("eyeLeftInner");
    openapiFields.add("eyeLeftOuter");
    openapiFields.add("eyeLeftTop");
    openapiFields.add("eyeRightBottom");
    openapiFields.add("eyeRightInner");
    openapiFields.add("eyeRightOuter");
    openapiFields.add("eyeRightTop");
    openapiFields.add("eyebrowLeftInner");
    openapiFields.add("eyebrowLeftOuter");
    openapiFields.add("eyebrowRightInner");
    openapiFields.add("eyebrowRightOuter");
    openapiFields.add("mouthLeft");
    openapiFields.add("mouthRight");
    openapiFields.add("noseLeftAlarOutTip");
    openapiFields.add("noseLeftAlarTop");
    openapiFields.add("noseRightAlarOutTip");
    openapiFields.add("noseRightAlarTop");
    openapiFields.add("noseRootLeft");
    openapiFields.add("noseRootRight");
    openapiFields.add("noseTip");
    openapiFields.add("pupilLeft");
    openapiFields.add("pupilRight");
    openapiFields.add("underLipBottom");
    openapiFields.add("underLipTop");
    openapiFields.add("upperLipBottom");
    openapiFields.add("upperLipTop");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FaceLandmarks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FaceLandmarks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FaceLandmarks is not found in the empty JSON string", FaceLandmarks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FaceLandmarks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FaceLandmarks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eyeLeftBottom`
      if (jsonObj.get("eyeLeftBottom") != null && !jsonObj.get("eyeLeftBottom").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("eyeLeftBottom"));
      }
      // validate the optional field `eyeLeftInner`
      if (jsonObj.get("eyeLeftInner") != null && !jsonObj.get("eyeLeftInner").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("eyeLeftInner"));
      }
      // validate the optional field `eyeLeftOuter`
      if (jsonObj.get("eyeLeftOuter") != null && !jsonObj.get("eyeLeftOuter").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("eyeLeftOuter"));
      }
      // validate the optional field `eyeLeftTop`
      if (jsonObj.get("eyeLeftTop") != null && !jsonObj.get("eyeLeftTop").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("eyeLeftTop"));
      }
      // validate the optional field `eyeRightBottom`
      if (jsonObj.get("eyeRightBottom") != null && !jsonObj.get("eyeRightBottom").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("eyeRightBottom"));
      }
      // validate the optional field `eyeRightInner`
      if (jsonObj.get("eyeRightInner") != null && !jsonObj.get("eyeRightInner").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("eyeRightInner"));
      }
      // validate the optional field `eyeRightOuter`
      if (jsonObj.get("eyeRightOuter") != null && !jsonObj.get("eyeRightOuter").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("eyeRightOuter"));
      }
      // validate the optional field `eyeRightTop`
      if (jsonObj.get("eyeRightTop") != null && !jsonObj.get("eyeRightTop").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("eyeRightTop"));
      }
      // validate the optional field `eyebrowLeftInner`
      if (jsonObj.get("eyebrowLeftInner") != null && !jsonObj.get("eyebrowLeftInner").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("eyebrowLeftInner"));
      }
      // validate the optional field `eyebrowLeftOuter`
      if (jsonObj.get("eyebrowLeftOuter") != null && !jsonObj.get("eyebrowLeftOuter").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("eyebrowLeftOuter"));
      }
      // validate the optional field `eyebrowRightInner`
      if (jsonObj.get("eyebrowRightInner") != null && !jsonObj.get("eyebrowRightInner").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("eyebrowRightInner"));
      }
      // validate the optional field `eyebrowRightOuter`
      if (jsonObj.get("eyebrowRightOuter") != null && !jsonObj.get("eyebrowRightOuter").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("eyebrowRightOuter"));
      }
      // validate the optional field `mouthLeft`
      if (jsonObj.get("mouthLeft") != null && !jsonObj.get("mouthLeft").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("mouthLeft"));
      }
      // validate the optional field `mouthRight`
      if (jsonObj.get("mouthRight") != null && !jsonObj.get("mouthRight").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("mouthRight"));
      }
      // validate the optional field `noseLeftAlarOutTip`
      if (jsonObj.get("noseLeftAlarOutTip") != null && !jsonObj.get("noseLeftAlarOutTip").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("noseLeftAlarOutTip"));
      }
      // validate the optional field `noseLeftAlarTop`
      if (jsonObj.get("noseLeftAlarTop") != null && !jsonObj.get("noseLeftAlarTop").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("noseLeftAlarTop"));
      }
      // validate the optional field `noseRightAlarOutTip`
      if (jsonObj.get("noseRightAlarOutTip") != null && !jsonObj.get("noseRightAlarOutTip").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("noseRightAlarOutTip"));
      }
      // validate the optional field `noseRightAlarTop`
      if (jsonObj.get("noseRightAlarTop") != null && !jsonObj.get("noseRightAlarTop").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("noseRightAlarTop"));
      }
      // validate the optional field `noseRootLeft`
      if (jsonObj.get("noseRootLeft") != null && !jsonObj.get("noseRootLeft").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("noseRootLeft"));
      }
      // validate the optional field `noseRootRight`
      if (jsonObj.get("noseRootRight") != null && !jsonObj.get("noseRootRight").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("noseRootRight"));
      }
      // validate the optional field `noseTip`
      if (jsonObj.get("noseTip") != null && !jsonObj.get("noseTip").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("noseTip"));
      }
      // validate the optional field `pupilLeft`
      if (jsonObj.get("pupilLeft") != null && !jsonObj.get("pupilLeft").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("pupilLeft"));
      }
      // validate the optional field `pupilRight`
      if (jsonObj.get("pupilRight") != null && !jsonObj.get("pupilRight").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("pupilRight"));
      }
      // validate the optional field `underLipBottom`
      if (jsonObj.get("underLipBottom") != null && !jsonObj.get("underLipBottom").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("underLipBottom"));
      }
      // validate the optional field `underLipTop`
      if (jsonObj.get("underLipTop") != null && !jsonObj.get("underLipTop").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("underLipTop"));
      }
      // validate the optional field `upperLipBottom`
      if (jsonObj.get("upperLipBottom") != null && !jsonObj.get("upperLipBottom").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("upperLipBottom"));
      }
      // validate the optional field `upperLipTop`
      if (jsonObj.get("upperLipTop") != null && !jsonObj.get("upperLipTop").isJsonNull()) {
        Coordinate.validateJsonElement(jsonObj.get("upperLipTop"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FaceLandmarks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FaceLandmarks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FaceLandmarks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FaceLandmarks.class));

       return (TypeAdapter<T>) new TypeAdapter<FaceLandmarks>() {
           @Override
           public void write(JsonWriter out, FaceLandmarks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FaceLandmarks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FaceLandmarks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FaceLandmarks
   * @throws IOException if the JSON string is invalid with respect to FaceLandmarks
   */
  public static FaceLandmarks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FaceLandmarks.class);
  }

  /**
   * Convert an instance of FaceLandmarks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

