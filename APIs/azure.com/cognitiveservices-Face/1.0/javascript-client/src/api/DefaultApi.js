/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import ApplySnapshotRequest from '../model/ApplySnapshotRequest';
import DetectedFace from '../model/DetectedFace';
import FaceDetectWithUrlRequest from '../model/FaceDetectWithUrlRequest';
import FaceList from '../model/FaceList';
import FindSimilarRequest from '../model/FindSimilarRequest';
import GroupRequest from '../model/GroupRequest';
import GroupResult from '../model/GroupResult';
import IdentifyRequest from '../model/IdentifyRequest';
import IdentifyResult from '../model/IdentifyResult';
import LargeFaceList from '../model/LargeFaceList';
import LargePersonGroup from '../model/LargePersonGroup';
import MetaDataContract from '../model/MetaDataContract';
import NameAndUserDataContract from '../model/NameAndUserDataContract';
import OperationStatus from '../model/OperationStatus';
import PersistedFace from '../model/PersistedFace';
import Person from '../model/Person';
import PersonGroup from '../model/PersonGroup';
import SimilarFace from '../model/SimilarFace';
import Snapshot from '../model/Snapshot';
import TakeSnapshotRequest from '../model/TakeSnapshotRequest';
import TrainingStatus from '../model/TrainingStatus';
import UpdateFaceRequest from '../model/UpdateFaceRequest';
import UpdateSnapshotRequest from '../model/UpdateSnapshotRequest';
import VerifyFaceToFaceRequest from '../model/VerifyFaceToFaceRequest';
import VerifyResult from '../model/VerifyResult';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the faceDetectWithUrl operation.
     * @callback module:api/DefaultApi~faceDetectWithUrlCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DetectedFace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.<br /> * No image will be stored. Only the extracted face feature will be stored on server. The faceId is an identifier of the face feature and will be used in [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a), and [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). The stored face feature(s) will expire and be deleted 24 hours after the original detection call. * Optional parameters include faceId, landmarks, and attributes. Attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise. Some of the results returned for specific attributes may not be highly accurate. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB. * Up to 100 faces can be returned for an image. Faces are ranked by face rectangle size from large to small. * For optimal results when querying [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a), and [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) ('returnFaceId' is true), please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels between eyes). * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)   | Model | Recommended use-case(s) |   | ---------- | -------- |   | 'detection_01': | The default detection model for [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |  * Different 'recognitionModel' values are provided. If follow-up operations like Verify, Identify, Find Similar are needed, please specify the recognition model with 'recognitionModel' parameter. The default value for 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in this parameter. Once specified, the detected faceIds will be associated with the specified recognition model. More details, please refer to [How to specify a recognition model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)   | Model | Recommended use-case(s) |   | ---------- | -------- |   | 'recognition_01': | The default recognition model for [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). All those faceIds created before 2019 March are bonded with this recognition model. |   | 'recognition_02': | Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'. |
     * @param {module:model/FaceDetectWithUrlRequest} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnFaceId = true)] A value indicating whether the operation should return faceIds of detected faces.
     * @param {Boolean} [returnFaceLandmarks = false)] A value indicating whether the operation should return landmarks of the detected faces.
     * @param {Array.<module:model/String>} [returnFaceAttributes] Analyze and return the one or more specified face attributes in the comma-separated string like \"returnFaceAttributes=age,gender\". Supported face attributes include age, gender, headPose, smile, facialHair, glasses and emotion. Note that each face attribute analysis has additional computational and time cost.
     * @param {module:model/String} [recognitionModel = 'recognition_01')] Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @param {Boolean} [returnRecognitionModel = false)] A value indicating whether the operation should return 'recognitionModel' in response.
     * @param {module:model/String} [detectionModel = 'detection_01')] Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.
     * @param {module:api/DefaultApi~faceDetectWithUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DetectedFace>}
     */
    faceDetectWithUrl(imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling faceDetectWithUrl");
      }

      let pathParams = {
      };
      let queryParams = {
        'returnFaceId': opts['returnFaceId'],
        'returnFaceLandmarks': opts['returnFaceLandmarks'],
        'returnFaceAttributes': this.apiClient.buildCollectionParam(opts['returnFaceAttributes'], 'csv'),
        'recognitionModel': opts['recognitionModel'],
        'returnRecognitionModel': opts['returnRecognitionModel'],
        'detectionModel': opts['detectionModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [DetectedFace];
      return this.apiClient.callApi(
        '/detect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the faceFindSimilar operation.
     * @callback module:api/DefaultApi~faceFindSimilarCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimilarFace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face list. faceId array contains the faces created by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), which will expire 24 hours after creation. A \"faceListId\" is created by [FaceList - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b) containing persistedFaceIds that will not expire. And a \"largeFaceListId\" is created by [LargeFaceList - Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) containing persistedFaceIds that will also not expire. Depending on the input the returned similar faces list contains faceIds or persistedFaceIds ranked by similarity. <br/>Find similar has two working modes, \"matchPerson\" and \"matchFace\". \"matchPerson\" is the default mode that it tries to find faces of the same person as possible by using internal same-person thresholds. It is useful to find a known person's other photos. Note that an empty list will be returned if no faces pass the internal thresholds. \"matchFace\" mode ignores same-person thresholds and returns ranked similar faces anyway, even the similarity is low. It can be used in the cases like searching celebrity-looking faces. <br/>The 'recognitionModel' associated with the query face's faceId should be the same as the 'recognitionModel' used by the target faceId array, face list or large face list. 
     * @param {module:model/FindSimilarRequest} body Request body for Find Similar.
     * @param {module:api/DefaultApi~faceFindSimilarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimilarFace>}
     */
    faceFindSimilar(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling faceFindSimilar");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SimilarFace];
      return this.apiClient.callApi(
        '/findsimilars', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the faceGroup operation.
     * @callback module:api/DefaultApi~faceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Divide candidate faces into groups based on face similarity.<br /> * The output is one or more disjointed face groups and a messyGroup. A face group contains faces that have similar looking, often of the same person. Face groups are ranked by group size, i.e. number of faces. Notice that faces belonging to a same person might be split into several groups in the result. * MessyGroup is a special face group containing faces that cannot find any similar counterpart face from original faces. The messyGroup will not appear in the result if all faces found their counterparts. * Group API needs at least 2 candidate faces and 1000 at most. We suggest to try [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a) when you only have 2 candidate faces. * The 'recognitionModel' associated with the query faces' faceIds should be the same. 
     * @param {module:model/GroupRequest} body Request body for grouping.
     * @param {module:api/DefaultApi~faceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupResult}
     */
    faceGroup(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling faceGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GroupResult;
      return this.apiClient.callApi(
        '/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the faceIdentify operation.
     * @callback module:api/DefaultApi~faceIdentifyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IdentifyResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 1-to-many identification to find the closest matches of the specific query person face from a person group or large person group. <br/> For each face in the faceIds array, Face Identify will compute similarities between the query face and all the faces in the person group (given by personGroupId) or large person group (given by largePersonGroupId), and return candidate person(s) for that face ranked by similarity confidence. The person group/large person group should be trained to make it ready for identification. See more in [PersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) and [LargePersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4). <br/>   Remarks:<br /> * The algorithm allows more than one face to be identified independently at the same request, but no more than 10 faces. * Each person in the person group/large person group could have more than one face, but no more than 248 faces. * Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger. * Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold. If no person is identified, the returned candidates will be an empty array. * Try [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) when you need to find similar faces from a face list/large face list instead of a person group/large person group. * The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target person group or large person group. 
     * @param {module:model/IdentifyRequest} body Request body for identify operation.
     * @param {module:api/DefaultApi~faceIdentifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IdentifyResult>}
     */
    faceIdentify(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling faceIdentify");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [IdentifyResult];
      return this.apiClient.callApi(
        '/identify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the faceListAddFaceFromUrl operation.
     * @callback module:api/DefaultApi~faceListAddFaceFromUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersistedFace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a face to a specified face list, up to 1,000 faces. <br /> To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251) or [FaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called. <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). * Higher face image quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB. * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)   | Model | Recommended use-case(s) |   | ---------- | -------- |   | 'detection_01': | The default detection model for [FaceList - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     * @param {String} faceListId Id referencing a particular face list.
     * @param {module:model/FaceDetectWithUrlRequest} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {Object} opts Optional parameters
     * @param {String} [userData] User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param {Array.<Number>} [targetFace] A face rectangle to specify the target face to be added to a person in the format of \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @param {module:model/String} [detectionModel = 'detection_01')] Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.
     * @param {module:api/DefaultApi~faceListAddFaceFromUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersistedFace}
     */
    faceListAddFaceFromUrl(faceListId, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'faceListId' is set
      if (faceListId === undefined || faceListId === null) {
        throw new Error("Missing the required parameter 'faceListId' when calling faceListAddFaceFromUrl");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling faceListAddFaceFromUrl");
      }

      let pathParams = {
        'faceListId': faceListId
      };
      let queryParams = {
        'userData': opts['userData'],
        'targetFace': this.apiClient.buildCollectionParam(opts['targetFace'], 'csv'),
        'detectionModel': opts['detectionModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersistedFace;
      return this.apiClient.callApi(
        '/facelists/{faceListId}/persistedfaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the faceListCreate operation.
     * @callback module:api/DefaultApi~faceListCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel. Up to 64 face lists are allowed in one subscription. <br /> Face list is a list of faces, up to 1,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). <br /> After creation, user should use [FaceList - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250) to import the faces. No image will be stored. Only the extracted face features are stored on server until [FaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called. <br /> Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239). <br /> Please consider [LargeFaceList](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) when the face number is large. It can support up to 1,000,000 faces. <br />'recognitionModel' should be specified to associate with this face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing face list will use the recognition model that's already associated with the collection. Existing face features in a face list can't be updated to features extracted by another version of recognition model. * 'recognition_01': The default recognition model for [FaceList- Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b). All those face lists created before 2019 March are bonded with this recognition model. * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     * @param {String} faceListId Id referencing a particular face list.
     * @param {module:model/MetaDataContract} body Request body for creating a face list.
     * @param {module:api/DefaultApi~faceListCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    faceListCreate(faceListId, body, callback) {
      let postBody = body;
      // verify the required parameter 'faceListId' is set
      if (faceListId === undefined || faceListId === null) {
        throw new Error("Missing the required parameter 'faceListId' when calling faceListCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling faceListCreate");
      }

      let pathParams = {
        'faceListId': faceListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/facelists/{faceListId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the faceListDelete operation.
     * @callback module:api/DefaultApi~faceListDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specified face list.
     * @param {String} faceListId Id referencing a particular face list.
     * @param {module:api/DefaultApi~faceListDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    faceListDelete(faceListId, callback) {
      let postBody = null;
      // verify the required parameter 'faceListId' is set
      if (faceListId === undefined || faceListId === null) {
        throw new Error("Missing the required parameter 'faceListId' when calling faceListDelete");
      }

      let pathParams = {
        'faceListId': faceListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/facelists/{faceListId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the faceListDeleteFace operation.
     * @callback module:api/DefaultApi~faceListDeleteFaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId. <br /> Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * @param {String} faceListId Id referencing a particular face list.
     * @param {String} persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param {module:api/DefaultApi~faceListDeleteFaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    faceListDeleteFace(faceListId, persistedFaceId, callback) {
      let postBody = null;
      // verify the required parameter 'faceListId' is set
      if (faceListId === undefined || faceListId === null) {
        throw new Error("Missing the required parameter 'faceListId' when calling faceListDeleteFace");
      }
      // verify the required parameter 'persistedFaceId' is set
      if (persistedFaceId === undefined || persistedFaceId === null) {
        throw new Error("Missing the required parameter 'persistedFaceId' when calling faceListDeleteFace");
      }

      let pathParams = {
        'faceListId': faceListId,
        'persistedFaceId': persistedFaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/facelists/{faceListId}/persistedfaces/{persistedFaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the faceListGet operation.
     * @callback module:api/DefaultApi~faceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FaceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list. 
     * @param {String} faceListId Id referencing a particular face list.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnRecognitionModel = false)] A value indicating whether the operation should return 'recognitionModel' in response.
     * @param {module:api/DefaultApi~faceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FaceList}
     */
    faceListGet(faceListId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'faceListId' is set
      if (faceListId === undefined || faceListId === null) {
        throw new Error("Missing the required parameter 'faceListId' when calling faceListGet");
      }

      let pathParams = {
        'faceListId': faceListId
      };
      let queryParams = {
        'returnRecognitionModel': opts['returnRecognitionModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FaceList;
      return this.apiClient.callApi(
        '/facelists/{faceListId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the faceListList operation.
     * @callback module:api/DefaultApi~faceListListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FaceList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List face lists’ faceListId, name, userData and recognitionModel. <br />  To get face information inside faceList use [FaceList - Get](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c) 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnRecognitionModel = false)] A value indicating whether the operation should return 'recognitionModel' in response.
     * @param {module:api/DefaultApi~faceListListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FaceList>}
     */
    faceListList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'returnRecognitionModel': opts['returnRecognitionModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FaceList];
      return this.apiClient.callApi(
        '/facelists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the faceListUpdate operation.
     * @callback module:api/DefaultApi~faceListUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update information of a face list.
     * @param {String} faceListId Id referencing a particular face list.
     * @param {module:model/NameAndUserDataContract} body Request body for updating a face list.
     * @param {module:api/DefaultApi~faceListUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    faceListUpdate(faceListId, body, callback) {
      let postBody = body;
      // verify the required parameter 'faceListId' is set
      if (faceListId === undefined || faceListId === null) {
        throw new Error("Missing the required parameter 'faceListId' when calling faceListUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling faceListUpdate");
      }

      let pathParams = {
        'faceListId': faceListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/facelists/{faceListId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the faceVerifyFaceToFace operation.
     * @callback module:api/DefaultApi~faceVerifyFaceToFaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify whether two faces belong to a same person or whether one face belongs to a person. <br/> Remarks:<br /> * Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger. * For the scenarios that are sensitive to accuracy please make your own judgment. * The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target face, person group or large person group. 
     * @param {module:model/VerifyFaceToFaceRequest} body Request body for face to face verification.
     * @param {module:api/DefaultApi~faceVerifyFaceToFaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyResult}
     */
    faceVerifyFaceToFace(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling faceVerifyFaceToFace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyResult;
      return this.apiClient.callApi(
        '/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largeFaceListAddFaceFromUrl operation.
     * @callback module:api/DefaultApi~largeFaceListAddFaceFromUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersistedFace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces. <br /> To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) or [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called. <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB. * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)   | Model | Recommended use-case(s) |   | ---------- | -------- |   | 'detection_01': | The default detection model for [LargeFaceList - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |  Quota: * Free-tier subscription quota: 1,000 faces per large face list. * S0-tier subscription quota: 1,000,000 faces per large face list.
     * @param {String} largeFaceListId Id referencing a particular large face list.
     * @param {module:model/FaceDetectWithUrlRequest} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {Object} opts Optional parameters
     * @param {String} [userData] User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param {Array.<Number>} [targetFace] A face rectangle to specify the target face to be added to a person in the format of \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @param {module:model/String} [detectionModel = 'detection_01')] Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.
     * @param {module:api/DefaultApi~largeFaceListAddFaceFromUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersistedFace}
     */
    largeFaceListAddFaceFromUrl(largeFaceListId, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'largeFaceListId' is set
      if (largeFaceListId === undefined || largeFaceListId === null) {
        throw new Error("Missing the required parameter 'largeFaceListId' when calling largeFaceListAddFaceFromUrl");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling largeFaceListAddFaceFromUrl");
      }

      let pathParams = {
        'largeFaceListId': largeFaceListId
      };
      let queryParams = {
        'userData': opts['userData'],
        'targetFace': this.apiClient.buildCollectionParam(opts['targetFace'], 'csv'),
        'detectionModel': opts['detectionModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersistedFace;
      return this.apiClient.callApi(
        '/largefacelists/{largeFaceListId}/persistedfaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largeFaceListCreate operation.
     * @callback module:api/DefaultApi~largeFaceListCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel. <br /> Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). <br /> After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). No image will be stored. Only the extracted face features are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called. <br /> Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239). <br/>'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model. * 'recognition_01': The default recognition model for [LargeFaceList- Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc). All those large face lists created before 2019 March are bonded with this recognition model. * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.  Large face list quota: * Free-tier subscription quota: 64 large face lists. * S0-tier subscription quota: 1,000,000 large face lists.
     * @param {String} largeFaceListId Id referencing a particular large face list.
     * @param {module:model/MetaDataContract} body Request body for creating a large face list.
     * @param {module:api/DefaultApi~largeFaceListCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largeFaceListCreate(largeFaceListId, body, callback) {
      let postBody = body;
      // verify the required parameter 'largeFaceListId' is set
      if (largeFaceListId === undefined || largeFaceListId === null) {
        throw new Error("Missing the required parameter 'largeFaceListId' when calling largeFaceListCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling largeFaceListCreate");
      }

      let pathParams = {
        'largeFaceListId': largeFaceListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largefacelists/{largeFaceListId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largeFaceListDelete operation.
     * @callback module:api/DefaultApi~largeFaceListDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specified large face list.
     * @param {String} largeFaceListId Id referencing a particular large face list.
     * @param {module:api/DefaultApi~largeFaceListDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largeFaceListDelete(largeFaceListId, callback) {
      let postBody = null;
      // verify the required parameter 'largeFaceListId' is set
      if (largeFaceListId === undefined || largeFaceListId === null) {
        throw new Error("Missing the required parameter 'largeFaceListId' when calling largeFaceListDelete");
      }

      let pathParams = {
        'largeFaceListId': largeFaceListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largefacelists/{largeFaceListId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largeFaceListDeleteFace operation.
     * @callback module:api/DefaultApi~largeFaceListDeleteFaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId. <br /> Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face lists are in parallel.
     * @param {String} largeFaceListId Id referencing a particular large face list.
     * @param {String} persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param {module:api/DefaultApi~largeFaceListDeleteFaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largeFaceListDeleteFace(largeFaceListId, persistedFaceId, callback) {
      let postBody = null;
      // verify the required parameter 'largeFaceListId' is set
      if (largeFaceListId === undefined || largeFaceListId === null) {
        throw new Error("Missing the required parameter 'largeFaceListId' when calling largeFaceListDeleteFace");
      }
      // verify the required parameter 'persistedFaceId' is set
      if (persistedFaceId === undefined || persistedFaceId === null) {
        throw new Error("Missing the required parameter 'persistedFaceId' when calling largeFaceListDeleteFace");
      }

      let pathParams = {
        'largeFaceListId': largeFaceListId,
        'persistedFaceId': persistedFaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largeFaceListGet operation.
     * @callback module:api/DefaultApi~largeFaceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LargeFaceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     * @param {String} largeFaceListId Id referencing a particular large face list.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnRecognitionModel = false)] A value indicating whether the operation should return 'recognitionModel' in response.
     * @param {module:api/DefaultApi~largeFaceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LargeFaceList}
     */
    largeFaceListGet(largeFaceListId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'largeFaceListId' is set
      if (largeFaceListId === undefined || largeFaceListId === null) {
        throw new Error("Missing the required parameter 'largeFaceListId' when calling largeFaceListGet");
      }

      let pathParams = {
        'largeFaceListId': largeFaceListId
      };
      let queryParams = {
        'returnRecognitionModel': opts['returnRecognitionModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LargeFaceList;
      return this.apiClient.callApi(
        '/largefacelists/{largeFaceListId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largeFaceListGetFace operation.
     * @callback module:api/DefaultApi~largeFaceListGetFaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersistedFace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     * @param {String} largeFaceListId Id referencing a particular large face list.
     * @param {String} persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param {module:api/DefaultApi~largeFaceListGetFaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersistedFace}
     */
    largeFaceListGetFace(largeFaceListId, persistedFaceId, callback) {
      let postBody = null;
      // verify the required parameter 'largeFaceListId' is set
      if (largeFaceListId === undefined || largeFaceListId === null) {
        throw new Error("Missing the required parameter 'largeFaceListId' when calling largeFaceListGetFace");
      }
      // verify the required parameter 'persistedFaceId' is set
      if (persistedFaceId === undefined || persistedFaceId === null) {
        throw new Error("Missing the required parameter 'persistedFaceId' when calling largeFaceListGetFace");
      }

      let pathParams = {
        'largeFaceListId': largeFaceListId,
        'persistedFaceId': persistedFaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersistedFace;
      return this.apiClient.callApi(
        '/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largeFaceListGetTrainingStatus operation.
     * @callback module:api/DefaultApi~largeFaceListGetTrainingStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrainingStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     * @param {String} largeFaceListId Id referencing a particular large face list.
     * @param {module:api/DefaultApi~largeFaceListGetTrainingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrainingStatus}
     */
    largeFaceListGetTrainingStatus(largeFaceListId, callback) {
      let postBody = null;
      // verify the required parameter 'largeFaceListId' is set
      if (largeFaceListId === undefined || largeFaceListId === null) {
        throw new Error("Missing the required parameter 'largeFaceListId' when calling largeFaceListGetTrainingStatus");
      }

      let pathParams = {
        'largeFaceListId': largeFaceListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrainingStatus;
      return this.apiClient.callApi(
        '/largefacelists/{largeFaceListId}/training', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largeFaceListList operation.
     * @callback module:api/DefaultApi~largeFaceListListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LargeFaceList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. <br />  To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)<br /> * Large face lists are stored in alphabetical order of largeFaceListId. * \"start\" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. \"start\" set to empty to indicate return from the first item. * \"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify \"start\" with the last returned entry’s Id of the current call. <br /> For example, total 5 large person lists: \"list1\", ..., \"list5\". <br /> \"start=&top=\" will return all 5 lists. <br /> \"start=&top=2\" will return \"list1\", \"list2\". <br /> \"start=list2&top=3\" will return \"list3\", \"list4\", \"list5\". 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnRecognitionModel = false)] A value indicating whether the operation should return 'recognitionModel' in response.
     * @param {module:api/DefaultApi~largeFaceListListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LargeFaceList>}
     */
    largeFaceListList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'returnRecognitionModel': opts['returnRecognitionModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LargeFaceList];
      return this.apiClient.callApi(
        '/largefacelists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largeFaceListListFaces operation.
     * @callback module:api/DefaultApi~largeFaceListListFacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PersistedFace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     * @param {String} largeFaceListId Id referencing a particular large face list.
     * @param {Object} opts Optional parameters
     * @param {String} [start] Starting face id to return (used to list a range of faces).
     * @param {Number} [top] Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @param {module:api/DefaultApi~largeFaceListListFacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PersistedFace>}
     */
    largeFaceListListFaces(largeFaceListId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'largeFaceListId' is set
      if (largeFaceListId === undefined || largeFaceListId === null) {
        throw new Error("Missing the required parameter 'largeFaceListId' when calling largeFaceListListFaces");
      }

      let pathParams = {
        'largeFaceListId': largeFaceListId
      };
      let queryParams = {
        'start': opts['start'],
        'top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PersistedFace];
      return this.apiClient.callApi(
        '/largefacelists/{largeFaceListId}/persistedfaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largeFaceListTrain operation.
     * @callback module:api/DefaultApi~largeFaceListTrainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     * @param {String} largeFaceListId Id referencing a particular large face list.
     * @param {module:api/DefaultApi~largeFaceListTrainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largeFaceListTrain(largeFaceListId, callback) {
      let postBody = null;
      // verify the required parameter 'largeFaceListId' is set
      if (largeFaceListId === undefined || largeFaceListId === null) {
        throw new Error("Missing the required parameter 'largeFaceListId' when calling largeFaceListTrain");
      }

      let pathParams = {
        'largeFaceListId': largeFaceListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largefacelists/{largeFaceListId}/train', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largeFaceListUpdate operation.
     * @callback module:api/DefaultApi~largeFaceListUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update information of a large face list.
     * @param {String} largeFaceListId Id referencing a particular large face list.
     * @param {module:model/NameAndUserDataContract} body Request body for updating a large face list.
     * @param {module:api/DefaultApi~largeFaceListUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largeFaceListUpdate(largeFaceListId, body, callback) {
      let postBody = body;
      // verify the required parameter 'largeFaceListId' is set
      if (largeFaceListId === undefined || largeFaceListId === null) {
        throw new Error("Missing the required parameter 'largeFaceListId' when calling largeFaceListUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling largeFaceListUpdate");
      }

      let pathParams = {
        'largeFaceListId': largeFaceListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largefacelists/{largeFaceListId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largeFaceListUpdateFace operation.
     * @callback module:api/DefaultApi~largeFaceListUpdateFaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a persisted face's userData field.
     * @param {String} largeFaceListId Id referencing a particular large face list.
     * @param {String} persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param {module:model/UpdateFaceRequest} body Request body for updating persisted face.
     * @param {module:api/DefaultApi~largeFaceListUpdateFaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largeFaceListUpdateFace(largeFaceListId, persistedFaceId, body, callback) {
      let postBody = body;
      // verify the required parameter 'largeFaceListId' is set
      if (largeFaceListId === undefined || largeFaceListId === null) {
        throw new Error("Missing the required parameter 'largeFaceListId' when calling largeFaceListUpdateFace");
      }
      // verify the required parameter 'persistedFaceId' is set
      if (persistedFaceId === undefined || persistedFaceId === null) {
        throw new Error("Missing the required parameter 'persistedFaceId' when calling largeFaceListUpdateFace");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling largeFaceListUpdateFace");
      }

      let pathParams = {
        'largeFaceListId': largeFaceListId,
        'persistedFaceId': persistedFaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupCreate operation.
     * @callback module:api/DefaultApi~largePersonGroupCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new large person group with user-specified largePersonGroupId, name, an optional userData and recognitionModel. <br /> A large person group is the container of the uploaded person data, including face recognition feature, and up to 1,000,000 people. <br /> After creation, use [LargePersonGroup Person - Create](/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40) to add person into the group, and call [LargePersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4) to get this group ready for [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239). <br /> No image will be stored. Only the person's extracted face features and userData will be stored on server until [LargePersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2) or [LargePersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f) is called. <br/>'recognitionModel' should be specified to associate with this large person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large person group will use the recognition model that's already associated with the collection. Existing face features in a large person group can't be updated to features extracted by another version of recognition model. * 'recognition_01': The default recognition model for [LargePersonGroup - Create](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d). All those large person groups created before 2019 March are bonded with this recognition model. * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.  Large person group quota: * Free-tier subscription quota: 1,000 large person groups. * S0-tier subscription quota: 1,000,000 large person groups.
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {module:model/MetaDataContract} body Request body for creating new large person group.
     * @param {module:api/DefaultApi~largePersonGroupCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largePersonGroupCreate(largePersonGroupId, body, callback) {
      let postBody = body;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling largePersonGroupCreate");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupDelete operation.
     * @callback module:api/DefaultApi~largePersonGroupDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing large person group. Persisted face features of all people in the large person group will also be deleted.
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {module:api/DefaultApi~largePersonGroupDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largePersonGroupDelete(largePersonGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupDelete");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupGet operation.
     * @callback module:api/DefaultApi~largePersonGroupGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LargePersonGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the information of a large person group, including its name, userData and recognitionModel. This API returns large person group information only, use [LargePersonGroup Person - List](/docs/services/563879b61984550e40cbbe8d/operations/599adda06ac60f11b48b5aa1) instead to retrieve person information under the large person group. 
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnRecognitionModel = false)] A value indicating whether the operation should return 'recognitionModel' in response.
     * @param {module:api/DefaultApi~largePersonGroupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LargePersonGroup}
     */
    largePersonGroupGet(largePersonGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupGet");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId
      };
      let queryParams = {
        'returnRecognitionModel': opts['returnRecognitionModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LargePersonGroup;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupGetTrainingStatus operation.
     * @callback module:api/DefaultApi~largePersonGroupGetTrainingStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrainingStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the training status of a large person group (completed or ongoing).
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {module:api/DefaultApi~largePersonGroupGetTrainingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrainingStatus}
     */
    largePersonGroupGetTrainingStatus(largePersonGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupGetTrainingStatus");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrainingStatus;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}/training', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupList operation.
     * @callback module:api/DefaultApi~largePersonGroupListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LargePersonGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all existing large person groups’ largePersonGroupId, name, userData and recognitionModel.<br /> * Large person groups are stored in alphabetical order of largePersonGroupId. * \"start\" parameter (string, optional) is a user-provided largePersonGroupId value that returned entries have larger ids by string comparison. \"start\" set to empty to indicate return from the first item. * \"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify \"start\" with the last returned entry’s Id of the current call. <br /> For example, total 5 large person groups: \"group1\", ..., \"group5\". <br /> \"start=&top=\" will return all 5 groups. <br /> \"start=&top=2\" will return \"group1\", \"group2\". <br /> \"start=group2&top=3\" will return \"group3\", \"group4\", \"group5\". 
     * @param {Object} opts Optional parameters
     * @param {String} [start] List large person groups from the least largePersonGroupId greater than the \"start\".
     * @param {Number} [top = 1000)] The number of large person groups to list.
     * @param {Boolean} [returnRecognitionModel = false)] A value indicating whether the operation should return 'recognitionModel' in response.
     * @param {module:api/DefaultApi~largePersonGroupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LargePersonGroup>}
     */
    largePersonGroupList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'top': opts['top'],
        'returnRecognitionModel': opts['returnRecognitionModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LargePersonGroup];
      return this.apiClient.callApi(
        '/largepersongroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupPersonAddFaceFromUrl operation.
     * @callback module:api/DefaultApi~largePersonGroupPersonAddFaceFromUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersistedFace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargePersonGroup PersonFace - Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ae2966ac60f11b48b5aa3), [LargePersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2) or [LargePersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f) is called. <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger. * Each person entry can hold up to 248 faces. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB. * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel. * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)   | Model | Recommended use-case(s) |   | ---------- | -------- |   | 'detection_01': | The default detection model for [LargePersonGroup Person - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/599adf2a3a7b9412a4d53f42). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {String} personId Id referencing a particular person.
     * @param {module:model/FaceDetectWithUrlRequest} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {Object} opts Optional parameters
     * @param {String} [userData] User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param {Array.<Number>} [targetFace] A face rectangle to specify the target face to be added to a person in the format of \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @param {module:model/String} [detectionModel = 'detection_01')] Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.
     * @param {module:api/DefaultApi~largePersonGroupPersonAddFaceFromUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersistedFace}
     */
    largePersonGroupPersonAddFaceFromUrl(largePersonGroupId, personId, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupPersonAddFaceFromUrl");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling largePersonGroupPersonAddFaceFromUrl");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling largePersonGroupPersonAddFaceFromUrl");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId,
        'personId': personId
      };
      let queryParams = {
        'userData': opts['userData'],
        'targetFace': this.apiClient.buildCollectionParam(opts['targetFace'], 'csv'),
        'detectionModel': opts['detectionModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersistedFace;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupPersonCreate operation.
     * @callback module:api/DefaultApi~largePersonGroupPersonCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Person} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new person in a specified large person group.
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {module:model/NameAndUserDataContract} body Request body for creating new person.
     * @param {module:api/DefaultApi~largePersonGroupPersonCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Person}
     */
    largePersonGroupPersonCreate(largePersonGroupId, body, callback) {
      let postBody = body;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupPersonCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling largePersonGroupPersonCreate");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Person;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}/persons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupPersonDelete operation.
     * @callback module:api/DefaultApi~largePersonGroupPersonDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing person from a large person group. The persistedFaceId, userData, person name and face feature in the person entry will all be deleted.
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {String} personId Id referencing a particular person.
     * @param {module:api/DefaultApi~largePersonGroupPersonDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largePersonGroupPersonDelete(largePersonGroupId, personId, callback) {
      let postBody = null;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupPersonDelete");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling largePersonGroupPersonDelete");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId,
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}/persons/{personId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupPersonDeleteFace operation.
     * @callback module:api/DefaultApi~largePersonGroupPersonDeleteFaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a face from a person in a large person group by specified largePersonGroupId, personId and persistedFaceId. <br /> Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {String} personId Id referencing a particular person.
     * @param {String} persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param {module:api/DefaultApi~largePersonGroupPersonDeleteFaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largePersonGroupPersonDeleteFace(largePersonGroupId, personId, persistedFaceId, callback) {
      let postBody = null;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupPersonDeleteFace");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling largePersonGroupPersonDeleteFace");
      }
      // verify the required parameter 'persistedFaceId' is set
      if (persistedFaceId === undefined || persistedFaceId === null) {
        throw new Error("Missing the required parameter 'persistedFaceId' when calling largePersonGroupPersonDeleteFace");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId,
        'personId': personId,
        'persistedFaceId': persistedFaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupPersonGet operation.
     * @callback module:api/DefaultApi~largePersonGroupPersonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Person} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature.
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {String} personId Id referencing a particular person.
     * @param {module:api/DefaultApi~largePersonGroupPersonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Person}
     */
    largePersonGroupPersonGet(largePersonGroupId, personId, callback) {
      let postBody = null;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupPersonGet");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling largePersonGroupPersonGet");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId,
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Person;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}/persons/{personId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupPersonGetFace operation.
     * @callback module:api/DefaultApi~largePersonGroupPersonGetFaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersistedFace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging largePersonGroupId).
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {String} personId Id referencing a particular person.
     * @param {String} persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param {module:api/DefaultApi~largePersonGroupPersonGetFaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersistedFace}
     */
    largePersonGroupPersonGetFace(largePersonGroupId, personId, persistedFaceId, callback) {
      let postBody = null;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupPersonGetFace");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling largePersonGroupPersonGetFace");
      }
      // verify the required parameter 'persistedFaceId' is set
      if (persistedFaceId === undefined || persistedFaceId === null) {
        throw new Error("Missing the required parameter 'persistedFaceId' when calling largePersonGroupPersonGetFace");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId,
        'personId': personId,
        'persistedFaceId': persistedFaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersistedFace;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupPersonList operation.
     * @callback module:api/DefaultApi~largePersonGroupPersonListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Person>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {Object} opts Optional parameters
     * @param {String} [start] Starting person id to return (used to list a range of persons).
     * @param {Number} [top] Number of persons to return starting with the person id indicated by the 'start' parameter.
     * @param {module:api/DefaultApi~largePersonGroupPersonListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Person>}
     */
    largePersonGroupPersonList(largePersonGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupPersonList");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId
      };
      let queryParams = {
        'start': opts['start'],
        'top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Person];
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}/persons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupPersonUpdate operation.
     * @callback module:api/DefaultApi~largePersonGroupPersonUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update name or userData of a person.
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {String} personId Id referencing a particular person.
     * @param {module:model/NameAndUserDataContract} body Request body for person update operation.
     * @param {module:api/DefaultApi~largePersonGroupPersonUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largePersonGroupPersonUpdate(largePersonGroupId, personId, body, callback) {
      let postBody = body;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupPersonUpdate");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling largePersonGroupPersonUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling largePersonGroupPersonUpdate");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId,
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}/persons/{personId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupPersonUpdateFace operation.
     * @callback module:api/DefaultApi~largePersonGroupPersonUpdateFaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a person persisted face's userData field.
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {String} personId Id referencing a particular person.
     * @param {String} persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param {module:model/UpdateFaceRequest} body Request body for updating persisted face.
     * @param {module:api/DefaultApi~largePersonGroupPersonUpdateFaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largePersonGroupPersonUpdateFace(largePersonGroupId, personId, persistedFaceId, body, callback) {
      let postBody = body;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupPersonUpdateFace");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling largePersonGroupPersonUpdateFace");
      }
      // verify the required parameter 'persistedFaceId' is set
      if (persistedFaceId === undefined || persistedFaceId === null) {
        throw new Error("Missing the required parameter 'persistedFaceId' when calling largePersonGroupPersonUpdateFace");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling largePersonGroupPersonUpdateFace");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId,
        'personId': personId,
        'persistedFaceId': persistedFaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupTrain operation.
     * @callback module:api/DefaultApi~largePersonGroupTrainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queue a large person group training task, the training task may not be started immediately.
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {module:api/DefaultApi~largePersonGroupTrainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largePersonGroupTrain(largePersonGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupTrain");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}/train', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the largePersonGroupUpdate operation.
     * @callback module:api/DefaultApi~largePersonGroupUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.
     * @param {String} largePersonGroupId Id referencing a particular large person group.
     * @param {module:model/NameAndUserDataContract} body Request body for updating large person group.
     * @param {module:api/DefaultApi~largePersonGroupUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    largePersonGroupUpdate(largePersonGroupId, body, callback) {
      let postBody = body;
      // verify the required parameter 'largePersonGroupId' is set
      if (largePersonGroupId === undefined || largePersonGroupId === null) {
        throw new Error("Missing the required parameter 'largePersonGroupId' when calling largePersonGroupUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling largePersonGroupUpdate");
      }

      let pathParams = {
        'largePersonGroupId': largePersonGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/largepersongroups/{largePersonGroupId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupCreate operation.
     * @callback module:api/DefaultApi~personGroupCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel. <br /> A person group is the container of the uploaded person data, including face recognition features. <br /> After creation, use [PersonGroup Person - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c) to add persons into the group, and then call [PersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) to get this group ready for [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239). <br /> No image will be stored. Only the person's extracted face features and userData will be stored on server until [PersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called. <br/>'recognitionModel' should be specified to associate with this person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing person group will use the recognition model that's already associated with the collection. Existing face features in a person group can't be updated to features extracted by another version of recognition model. * 'recognition_01': The default recognition model for [PersonGroup - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244). All those person groups created before 2019 March are bonded with this recognition model. * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.  Person group quota: * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons. * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons. * to handle larger scale face identification problem, please consider using [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {module:model/MetaDataContract} body Request body for creating new person group.
     * @param {module:api/DefaultApi~personGroupCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    personGroupCreate(personGroupId, body, callback) {
      let postBody = body;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling personGroupCreate");
      }

      let pathParams = {
        'personGroupId': personGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupDelete operation.
     * @callback module:api/DefaultApi~personGroupDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing person group. Persisted face features of all people in the person group will also be deleted.
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {module:api/DefaultApi~personGroupDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    personGroupDelete(personGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupDelete");
      }

      let pathParams = {
        'personGroupId': personGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupGet operation.
     * @callback module:api/DefaultApi~personGroupGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use [PersonGroup Person - List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnRecognitionModel = false)] A value indicating whether the operation should return 'recognitionModel' in response.
     * @param {module:api/DefaultApi~personGroupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonGroup}
     */
    personGroupGet(personGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupGet");
      }

      let pathParams = {
        'personGroupId': personGroupId
      };
      let queryParams = {
        'returnRecognitionModel': opts['returnRecognitionModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonGroup;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupGetTrainingStatus operation.
     * @callback module:api/DefaultApi~personGroupGetTrainingStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrainingStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the training status of a person group (completed or ongoing).
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {module:api/DefaultApi~personGroupGetTrainingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrainingStatus}
     */
    personGroupGetTrainingStatus(personGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupGetTrainingStatus");
      }

      let pathParams = {
        'personGroupId': personGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrainingStatus;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}/training', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupList operation.
     * @callback module:api/DefaultApi~personGroupListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PersonGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.<br /> * Person groups are stored in alphabetical order of personGroupId. * \"start\" parameter (string, optional) is a user-provided personGroupId value that returned entries have larger ids by string comparison. \"start\" set to empty to indicate return from the first item. * \"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify \"start\" with the last returned entry’s Id of the current call. <br /> For example, total 5 person groups: \"group1\", ..., \"group5\". <br /> \"start=&top=\" will return all 5 groups. <br /> \"start=&top=2\" will return \"group1\", \"group2\". <br /> \"start=group2&top=3\" will return \"group3\", \"group4\", \"group5\". 
     * @param {Object} opts Optional parameters
     * @param {String} [start] List person groups from the least personGroupId greater than the \"start\".
     * @param {Number} [top = 1000)] The number of person groups to list.
     * @param {Boolean} [returnRecognitionModel = false)] A value indicating whether the operation should return 'recognitionModel' in response.
     * @param {module:api/DefaultApi~personGroupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PersonGroup>}
     */
    personGroupList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'top': opts['top'],
        'returnRecognitionModel': opts['returnRecognitionModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PersonGroup];
      return this.apiClient.callApi(
        '/persongroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupPersonAddFaceFromUrl operation.
     * @callback module:api/DefaultApi~personGroupPersonAddFaceFromUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersistedFace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [PersonGroup PersonFace - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called. <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). *   Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger. *   Each person entry can hold up to 248 faces. *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB. *   \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully. *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures. *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel. * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)   | Model | Recommended use-case(s) |   | ---------- | -------- |   | 'detection_01': | The default detection model for [PersonGroup Person - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {String} personId Id referencing a particular person.
     * @param {module:model/FaceDetectWithUrlRequest} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {Object} opts Optional parameters
     * @param {String} [userData] User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param {Array.<Number>} [targetFace] A face rectangle to specify the target face to be added to a person in the format of \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @param {module:model/String} [detectionModel = 'detection_01')] Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.
     * @param {module:api/DefaultApi~personGroupPersonAddFaceFromUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersistedFace}
     */
    personGroupPersonAddFaceFromUrl(personGroupId, personId, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupPersonAddFaceFromUrl");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling personGroupPersonAddFaceFromUrl");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling personGroupPersonAddFaceFromUrl");
      }

      let pathParams = {
        'personGroupId': personGroupId,
        'personId': personId
      };
      let queryParams = {
        'userData': opts['userData'],
        'targetFace': this.apiClient.buildCollectionParam(opts['targetFace'], 'csv'),
        'detectionModel': opts['detectionModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersistedFace;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}/persons/{personId}/persistedfaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupPersonCreate operation.
     * @callback module:api/DefaultApi~personGroupPersonCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Person} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new person in a specified person group.
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {module:model/NameAndUserDataContract} body Request body for creating new person.
     * @param {module:api/DefaultApi~personGroupPersonCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Person}
     */
    personGroupPersonCreate(personGroupId, body, callback) {
      let postBody = body;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupPersonCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling personGroupPersonCreate");
      }

      let pathParams = {
        'personGroupId': personGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Person;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}/persons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupPersonDelete operation.
     * @callback module:api/DefaultApi~personGroupPersonDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing person from a person group. The persistedFaceId, userData, person name and face feature in the person entry will all be deleted.
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {String} personId Id referencing a particular person.
     * @param {module:api/DefaultApi~personGroupPersonDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    personGroupPersonDelete(personGroupId, personId, callback) {
      let postBody = null;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupPersonDelete");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling personGroupPersonDelete");
      }

      let pathParams = {
        'personGroupId': personGroupId,
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}/persons/{personId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupPersonDeleteFace operation.
     * @callback module:api/DefaultApi~personGroupPersonDeleteFaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a face from a person in a person group by specified personGroupId, personId and persistedFaceId. <br /> Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {String} personId Id referencing a particular person.
     * @param {String} persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param {module:api/DefaultApi~personGroupPersonDeleteFaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    personGroupPersonDeleteFace(personGroupId, personId, persistedFaceId, callback) {
      let postBody = null;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupPersonDeleteFace");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling personGroupPersonDeleteFace");
      }
      // verify the required parameter 'persistedFaceId' is set
      if (persistedFaceId === undefined || persistedFaceId === null) {
        throw new Error("Missing the required parameter 'persistedFaceId' when calling personGroupPersonDeleteFace");
      }

      let pathParams = {
        'personGroupId': personGroupId,
        'personId': personId,
        'persistedFaceId': persistedFaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupPersonGet operation.
     * @callback module:api/DefaultApi~personGroupPersonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Person} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a person's information, including registered persisted faces, name and userData.
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {String} personId Id referencing a particular person.
     * @param {module:api/DefaultApi~personGroupPersonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Person}
     */
    personGroupPersonGet(personGroupId, personId, callback) {
      let postBody = null;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupPersonGet");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling personGroupPersonGet");
      }

      let pathParams = {
        'personGroupId': personGroupId,
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Person;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}/persons/{personId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupPersonGetFace operation.
     * @callback module:api/DefaultApi~personGroupPersonGetFaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersistedFace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging personGroupId).
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {String} personId Id referencing a particular person.
     * @param {String} persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param {module:api/DefaultApi~personGroupPersonGetFaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersistedFace}
     */
    personGroupPersonGetFace(personGroupId, personId, persistedFaceId, callback) {
      let postBody = null;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupPersonGetFace");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling personGroupPersonGetFace");
      }
      // verify the required parameter 'persistedFaceId' is set
      if (persistedFaceId === undefined || persistedFaceId === null) {
        throw new Error("Missing the required parameter 'persistedFaceId' when calling personGroupPersonGetFace");
      }

      let pathParams = {
        'personGroupId': personGroupId,
        'personId': personId,
        'persistedFaceId': persistedFaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersistedFace;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupPersonList operation.
     * @callback module:api/DefaultApi~personGroupPersonListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Person>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all persons in a person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {Object} opts Optional parameters
     * @param {String} [start] Starting person id to return (used to list a range of persons).
     * @param {Number} [top] Number of persons to return starting with the person id indicated by the 'start' parameter.
     * @param {module:api/DefaultApi~personGroupPersonListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Person>}
     */
    personGroupPersonList(personGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupPersonList");
      }

      let pathParams = {
        'personGroupId': personGroupId
      };
      let queryParams = {
        'start': opts['start'],
        'top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Person];
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}/persons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupPersonUpdate operation.
     * @callback module:api/DefaultApi~personGroupPersonUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update name or userData of a person.
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {String} personId Id referencing a particular person.
     * @param {module:model/NameAndUserDataContract} body Request body for person update operation.
     * @param {module:api/DefaultApi~personGroupPersonUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    personGroupPersonUpdate(personGroupId, personId, body, callback) {
      let postBody = body;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupPersonUpdate");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling personGroupPersonUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling personGroupPersonUpdate");
      }

      let pathParams = {
        'personGroupId': personGroupId,
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}/persons/{personId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupPersonUpdateFace operation.
     * @callback module:api/DefaultApi~personGroupPersonUpdateFaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [PersonGroup PersonFace - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called. <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger. * Each person entry can hold up to 248 faces. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB. * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided \"targetFace\" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {String} personId Id referencing a particular person.
     * @param {String} persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param {module:model/UpdateFaceRequest} body Request body for updating persisted face.
     * @param {module:api/DefaultApi~personGroupPersonUpdateFaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    personGroupPersonUpdateFace(personGroupId, personId, persistedFaceId, body, callback) {
      let postBody = body;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupPersonUpdateFace");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling personGroupPersonUpdateFace");
      }
      // verify the required parameter 'persistedFaceId' is set
      if (persistedFaceId === undefined || persistedFaceId === null) {
        throw new Error("Missing the required parameter 'persistedFaceId' when calling personGroupPersonUpdateFace");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling personGroupPersonUpdateFace");
      }

      let pathParams = {
        'personGroupId': personGroupId,
        'personId': personId,
        'persistedFaceId': persistedFaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupTrain operation.
     * @callback module:api/DefaultApi~personGroupTrainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queue a person group training task, the training task may not be started immediately.
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {module:api/DefaultApi~personGroupTrainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    personGroupTrain(personGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupTrain");
      }

      let pathParams = {
        'personGroupId': personGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}/train', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personGroupUpdate operation.
     * @callback module:api/DefaultApi~personGroupUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing person group's display name and userData. The properties which does not appear in request body will not be updated.
     * @param {String} personGroupId Id referencing a particular person group.
     * @param {module:model/NameAndUserDataContract} body Request body for updating person group.
     * @param {module:api/DefaultApi~personGroupUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    personGroupUpdate(personGroupId, body, callback) {
      let postBody = body;
      // verify the required parameter 'personGroupId' is set
      if (personGroupId === undefined || personGroupId === null) {
        throw new Error("Missing the required parameter 'personGroupId' when calling personGroupUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling personGroupUpdate");
      }

      let pathParams = {
        'personGroupId': personGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/persongroups/{personGroupId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the snapshotApply operation.
     * @callback module:api/DefaultApi~snapshotApplyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit an operation to apply a snapshot to current subscription. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.<br /> The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.<br /> Applying snapshot is an asynchronous operation. An operation id can be obtained from the \"Operation-Location\" field in response header, to be used in OperationStatus - Get for tracking the progress of applying the snapshot. The target object id will be included in the \"resourceLocation\" field in OperationStatus - Get response when the operation status is \"succeeded\".<br /> Snapshot applying time depends on the number of person and face entries in the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000 persons with multiple faces.<br /> Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. So the target subscription is required to apply the snapshot in 48 hours since its creation.<br /> Applying a snapshot will not block any other operations against the target object, however it is not recommended because the correctness cannot be guaranteed during snapshot applying. After snapshot applying is completed, all operations towards the target object can work as normal. Snapshot also includes the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.<br /> One snapshot can be applied multiple times in parallel, while currently only CreateNew apply mode is supported, which means the apply operation will fail if target subscription already contains an object of same type and using the same objectId. Users can specify the \"objectId\" in request body to avoid such conflicts.<br /> * Free-tier subscription quota: 100 apply operations per month. * S0-tier subscription quota: 100 apply operations per day.
     * @param {String} snapshotId Id referencing a particular snapshot.
     * @param {module:model/ApplySnapshotRequest} body Request body for applying a snapshot.
     * @param {module:api/DefaultApi~snapshotApplyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    snapshotApply(snapshotId, body, callback) {
      let postBody = body;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling snapshotApply");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling snapshotApply");
      }

      let pathParams = {
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/snapshots/{snapshotId}/apply', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the snapshotDelete operation.
     * @callback module:api/DefaultApi~snapshotDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing snapshot according to the snapshotId. All object data and information in the snapshot will also be deleted. Only the source subscription who took the snapshot can delete the snapshot. If the user does not delete a snapshot with this API, the snapshot will still be automatically deleted in 48 hours after creation.
     * @param {String} snapshotId Id referencing a particular snapshot.
     * @param {module:api/DefaultApi~snapshotDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    snapshotDelete(snapshotId, callback) {
      let postBody = null;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling snapshotDelete");
      }

      let pathParams = {
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/snapshots/{snapshotId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the snapshotGet operation.
     * @callback module:api/DefaultApi~snapshotGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Snapshot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a snapshot. Snapshot is only accessible to the source subscription who took it, and target subscriptions included in the applyScope in Snapshot - Take.
     * @param {String} snapshotId Id referencing a particular snapshot.
     * @param {module:api/DefaultApi~snapshotGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Snapshot}
     */
    snapshotGet(snapshotId, callback) {
      let postBody = null;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling snapshotGet");
      }

      let pathParams = {
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/snapshots/{snapshotId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the snapshotGetOperationStatus operation.
     * @callback module:api/DefaultApi~snapshotGetOperationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the status of a take/apply snapshot operation.
     * @param {String} operationId Id referencing a particular take/apply snapshot operation.
     * @param {module:api/DefaultApi~snapshotGetOperationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    snapshotGetOperationStatus(operationId, callback) {
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling snapshotGetOperationStatus");
      }

      let pathParams = {
        'operationId': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/operations/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the snapshotList operation.
     * @callback module:api/DefaultApi~snapshotListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Snapshot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all accessible snapshots with related information, including snapshots that were taken by the user, or snapshots to be applied to the user (subscription id was included in the applyScope in Snapshot - Take).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type] User specified object type as a search filter.
     * @param {Array.<String>} [applyScope] User specified snapshot apply scopes as a search filter. ApplyScope is an array of the target Azure subscription ids for the snapshot, specified by the user who created the snapshot by Snapshot - Take.
     * @param {module:api/DefaultApi~snapshotListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Snapshot>}
     */
    snapshotList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'applyScope': this.apiClient.buildCollectionParam(opts['applyScope'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Snapshot];
      return this.apiClient.callApi(
        '/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the snapshotTake operation.
     * @callback module:api/DefaultApi~snapshotTakeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit an operation to take a snapshot of face list, large face list, person group or large person group, with user-specified snapshot type, source object id, apply scope and an optional user data.<br /> The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.<br /> Taking snapshot is an asynchronous operation. An operation id can be obtained from the \"Operation-Location\" field in response header, to be used in OperationStatus - Get for tracking the progress of creating the snapshot. The snapshot id will be included in the \"resourceLocation\" field in OperationStatus - Get response when the operation status is \"succeeded\".<br /> Snapshot taking time depends on the number of person and face entries in the source object. It could be in seconds, or up to several hours for 1,000,000 persons with multiple faces.<br /> Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. User can delete the snapshot using Snapshot - Delete by themselves any time before expiration.<br /> Taking snapshot for a certain object will not block any other operations against the object. All read-only operations (Get/List and Identify/FindSimilar/Verify) can be conducted as usual. For all writable operations, including Add/Update/Delete the source object or its persons/faces and Train, they are not blocked but not recommended because writable updates may not be reflected on the snapshot during its taking. After snapshot taking is completed, all readable and writable operations can work as normal. Snapshot will also include the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.<br /> * Free-tier subscription quota: 100 take operations per month. * S0-tier subscription quota: 100 take operations per day.
     * @param {module:model/TakeSnapshotRequest} body Request body for taking a snapshot.
     * @param {module:api/DefaultApi~snapshotTakeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    snapshotTake(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling snapshotTake");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/snapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the snapshotUpdate operation.
     * @callback module:api/DefaultApi~snapshotUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the information of a snapshot. Only the source subscription who took the snapshot can update the snapshot.
     * @param {String} snapshotId Id referencing a particular snapshot.
     * @param {module:model/UpdateSnapshotRequest} body Request body for updating a snapshot.
     * @param {module:api/DefaultApi~snapshotUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    snapshotUpdate(snapshotId, body, callback) {
      let postBody = body;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling snapshotUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling snapshotUpdate");
      }

      let pathParams = {
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/snapshots/{snapshotId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
