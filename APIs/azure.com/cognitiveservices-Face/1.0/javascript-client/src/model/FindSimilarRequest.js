/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FindSimilarRequest model module.
 * @module model/FindSimilarRequest
 * @version 1.0
 */
class FindSimilarRequest {
    /**
     * Constructs a new <code>FindSimilarRequest</code>.
     * Request body for find similar operation.
     * @alias module:model/FindSimilarRequest
     * @param faceId {String} FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call
     */
    constructor(faceId) { 
        
        FindSimilarRequest.initialize(this, faceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, faceId) { 
        obj['faceId'] = faceId;
        obj['mode'] = 'matchPerson';
    }

    /**
     * Constructs a <code>FindSimilarRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FindSimilarRequest} obj Optional instance to populate.
     * @return {module:model/FindSimilarRequest} The populated <code>FindSimilarRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FindSimilarRequest();

            if (data.hasOwnProperty('faceId')) {
                obj['faceId'] = ApiClient.convertToType(data['faceId'], 'String');
            }
            if (data.hasOwnProperty('faceIds')) {
                obj['faceIds'] = ApiClient.convertToType(data['faceIds'], ['String']);
            }
            if (data.hasOwnProperty('faceListId')) {
                obj['faceListId'] = ApiClient.convertToType(data['faceListId'], 'String');
            }
            if (data.hasOwnProperty('largeFaceListId')) {
                obj['largeFaceListId'] = ApiClient.convertToType(data['largeFaceListId'], 'String');
            }
            if (data.hasOwnProperty('maxNumOfCandidatesReturned')) {
                obj['maxNumOfCandidatesReturned'] = ApiClient.convertToType(data['maxNumOfCandidatesReturned'], 'Number');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FindSimilarRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FindSimilarRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FindSimilarRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['faceId'] && !(typeof data['faceId'] === 'string' || data['faceId'] instanceof String)) {
            throw new Error("Expected the field `faceId` to be a primitive type in the JSON string but got " + data['faceId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['faceIds'])) {
            throw new Error("Expected the field `faceIds` to be an array in the JSON data but got " + data['faceIds']);
        }
        // ensure the json data is a string
        if (data['faceListId'] && !(typeof data['faceListId'] === 'string' || data['faceListId'] instanceof String)) {
            throw new Error("Expected the field `faceListId` to be a primitive type in the JSON string but got " + data['faceListId']);
        }
        // ensure the json data is a string
        if (data['largeFaceListId'] && !(typeof data['largeFaceListId'] === 'string' || data['largeFaceListId'] instanceof String)) {
            throw new Error("Expected the field `largeFaceListId` to be a primitive type in the JSON string but got " + data['largeFaceListId']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }

        return true;
    }


}

FindSimilarRequest.RequiredProperties = ["faceId"];

/**
 * FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call
 * @member {String} faceId
 */
FindSimilarRequest.prototype['faceId'] = undefined;

/**
 * An array of candidate faceIds. All of them are created by Face - Detect and the faceIds will expire 24 hours after the detection call. The number of faceIds is limited to 1000. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.
 * @member {Array.<String>} faceIds
 */
FindSimilarRequest.prototype['faceIds'] = undefined;

/**
 * An existing user-specified unique candidate face list, created in Face List - Create a Face List. Face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.
 * @member {String} faceListId
 */
FindSimilarRequest.prototype['faceListId'] = undefined;

/**
 * An existing user-specified unique candidate large face list, created in LargeFaceList - Create. Large face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.
 * @member {String} largeFaceListId
 */
FindSimilarRequest.prototype['largeFaceListId'] = undefined;

/**
 * The number of top similar faces returned. The valid range is [1, 1000].
 * @member {Number} maxNumOfCandidatesReturned
 */
FindSimilarRequest.prototype['maxNumOfCandidatesReturned'] = undefined;

/**
 * Similar face searching mode. It can be \"matchPerson\" or \"matchFace\".
 * @member {module:model/FindSimilarRequest.ModeEnum} mode
 * @default 'matchPerson'
 */
FindSimilarRequest.prototype['mode'] = 'matchPerson';





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
FindSimilarRequest['ModeEnum'] = {

    /**
     * value: "matchPerson"
     * @const
     */
    "matchPerson": "matchPerson",

    /**
     * value: "matchFace"
     * @const
     */
    "matchFace": "matchFace"
};



export default FindSimilarRequest;

