/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OperationStatus model module.
 * @module model/OperationStatus
 * @version 1.0
 */
class OperationStatus {
    /**
     * Constructs a new <code>OperationStatus</code>.
     * Operation status object. Operation refers to the asynchronous backend task including taking a snapshot and applying a snapshot.
     * @alias module:model/OperationStatus
     * @param createdTime {Date} A combined UTC date and time string that describes the time when the operation (take or apply a snapshot) is requested. E.g. 2018-12-25T11:41:02.2331413Z.
     * @param status {module:model/OperationStatus.StatusEnum} Operation status: notstarted, running, succeeded, failed. If the operation is requested and waiting to perform, the status is notstarted. If the operation is ongoing in backend, the status is running. Status succeeded means the operation is completed successfully, specifically for snapshot taking operation, it illustrates the snapshot is well taken and ready to apply, and for snapshot applying operation, it presents the target object has finished creating by the snapshot and ready to be used. Status failed is often caused by editing the source object while taking the snapshot or editing the target object while applying the snapshot before completion, see the field \"message\" to check the failure reason.
     */
    constructor(createdTime, status) { 
        
        OperationStatus.initialize(this, createdTime, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdTime, status) { 
        obj['createdTime'] = createdTime;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>OperationStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OperationStatus} obj Optional instance to populate.
     * @return {module:model/OperationStatus} The populated <code>OperationStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OperationStatus();

            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('lastActionTime')) {
                obj['lastActionTime'] = ApiClient.convertToType(data['lastActionTime'], 'Date');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('resourceLocation')) {
                obj['resourceLocation'] = ApiClient.convertToType(data['resourceLocation'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OperationStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OperationStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OperationStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['resourceLocation'] && !(typeof data['resourceLocation'] === 'string' || data['resourceLocation'] instanceof String)) {
            throw new Error("Expected the field `resourceLocation` to be a primitive type in the JSON string but got " + data['resourceLocation']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

OperationStatus.RequiredProperties = ["createdTime", "status"];

/**
 * A combined UTC date and time string that describes the time when the operation (take or apply a snapshot) is requested. E.g. 2018-12-25T11:41:02.2331413Z.
 * @member {Date} createdTime
 */
OperationStatus.prototype['createdTime'] = undefined;

/**
 * A combined UTC date and time string that describes the last time the operation (take or apply a snapshot) is actively migrating data. The lastActionTime will keep increasing until the operation finishes. E.g. 2018-12-25T11:51:27.8705696Z.
 * @member {Date} lastActionTime
 */
OperationStatus.prototype['lastActionTime'] = undefined;

/**
 * Show failure message when operation fails (omitted when operation succeeds).
 * @member {String} message
 */
OperationStatus.prototype['message'] = undefined;

/**
 * When the operation succeeds successfully, for snapshot taking operation the snapshot id will be included in this field, and for snapshot applying operation, the path to get the target object will be returned in this field.
 * @member {String} resourceLocation
 */
OperationStatus.prototype['resourceLocation'] = undefined;

/**
 * Operation status: notstarted, running, succeeded, failed. If the operation is requested and waiting to perform, the status is notstarted. If the operation is ongoing in backend, the status is running. Status succeeded means the operation is completed successfully, specifically for snapshot taking operation, it illustrates the snapshot is well taken and ready to apply, and for snapshot applying operation, it presents the target object has finished creating by the snapshot and ready to be used. Status failed is often caused by editing the source object while taking the snapshot or editing the target object while applying the snapshot before completion, see the field \"message\" to check the failure reason.
 * @member {module:model/OperationStatus.StatusEnum} status
 */
OperationStatus.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
OperationStatus['StatusEnum'] = {

    /**
     * value: "notstarted"
     * @const
     */
    "notstarted": "notstarted",

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "succeeded"
     * @const
     */
    "succeeded": "succeeded",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed"
};



export default OperationStatus;

