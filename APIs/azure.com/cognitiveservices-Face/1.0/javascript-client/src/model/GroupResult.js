/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GroupResult model module.
 * @module model/GroupResult
 * @version 1.0
 */
class GroupResult {
    /**
     * Constructs a new <code>GroupResult</code>.
     * An array of face groups based on face similarity.
     * @alias module:model/GroupResult
     * @param groups {Array.<Array.<String>>} A partition of the original faces based on face similarity. Groups are ranked by number of faces
     */
    constructor(groups) { 
        
        GroupResult.initialize(this, groups);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, groups) { 
        obj['groups'] = groups;
    }

    /**
     * Constructs a <code>GroupResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupResult} obj Optional instance to populate.
     * @return {module:model/GroupResult} The populated <code>GroupResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupResult();

            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [['String']]);
            }
            if (data.hasOwnProperty('messyGroup')) {
                obj['messyGroup'] = ApiClient.convertToType(data['messyGroup'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GroupResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groups'])) {
            throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['messyGroup'])) {
            throw new Error("Expected the field `messyGroup` to be an array in the JSON data but got " + data['messyGroup']);
        }

        return true;
    }


}

GroupResult.RequiredProperties = ["groups"];

/**
 * A partition of the original faces based on face similarity. Groups are ranked by number of faces
 * @member {Array.<Array.<String>>} groups
 */
GroupResult.prototype['groups'] = undefined;

/**
 * Face ids array of faces that cannot find any similar faces from original faces.
 * @member {Array.<String>} messyGroup
 */
GroupResult.prototype['messyGroup'] = undefined;






export default GroupResult;

