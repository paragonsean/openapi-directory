/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TrainingStatus model module.
 * @module model/TrainingStatus
 * @version 1.0
 */
class TrainingStatus {
    /**
     * Constructs a new <code>TrainingStatus</code>.
     * Training status object.
     * @alias module:model/TrainingStatus
     * @param createdDateTime {Date} A combined UTC date and time string that describes the created time of the person group, large person group or large face list.
     * @param status {module:model/TrainingStatus.StatusEnum} Training status: notstarted, running, succeeded, failed. If the training process is waiting to perform, the status is notstarted. If the training is ongoing, the status is running. Status succeed means this person group or large person group is ready for Face - Identify, or this large face list is ready for Face - Find Similar. Status failed is often caused by no person or no persisted face exist in the person group or large person group, or no persisted face exist in the large face list.
     */
    constructor(createdDateTime, status) { 
        
        TrainingStatus.initialize(this, createdDateTime, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdDateTime, status) { 
        obj['createdDateTime'] = createdDateTime;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>TrainingStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrainingStatus} obj Optional instance to populate.
     * @return {module:model/TrainingStatus} The populated <code>TrainingStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrainingStatus();

            if (data.hasOwnProperty('createdDateTime')) {
                obj['createdDateTime'] = ApiClient.convertToType(data['createdDateTime'], 'Date');
            }
            if (data.hasOwnProperty('lastActionDateTime')) {
                obj['lastActionDateTime'] = ApiClient.convertToType(data['lastActionDateTime'], 'Date');
            }
            if (data.hasOwnProperty('lastSuccessfulTrainingDateTime')) {
                obj['lastSuccessfulTrainingDateTime'] = ApiClient.convertToType(data['lastSuccessfulTrainingDateTime'], 'Date');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrainingStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrainingStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TrainingStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

TrainingStatus.RequiredProperties = ["createdDateTime", "status"];

/**
 * A combined UTC date and time string that describes the created time of the person group, large person group or large face list.
 * @member {Date} createdDateTime
 */
TrainingStatus.prototype['createdDateTime'] = undefined;

/**
 * A combined UTC date and time string that describes the last modify time of the person group, large person group or large face list, could be null value when the group is not successfully trained.
 * @member {Date} lastActionDateTime
 */
TrainingStatus.prototype['lastActionDateTime'] = undefined;

/**
 * A combined UTC date and time string that describes the last successful training time of the person group, large person group or large face list.
 * @member {Date} lastSuccessfulTrainingDateTime
 */
TrainingStatus.prototype['lastSuccessfulTrainingDateTime'] = undefined;

/**
 * Show failure message when training failed (omitted when training succeed).
 * @member {String} message
 */
TrainingStatus.prototype['message'] = undefined;

/**
 * Training status: notstarted, running, succeeded, failed. If the training process is waiting to perform, the status is notstarted. If the training is ongoing, the status is running. Status succeed means this person group or large person group is ready for Face - Identify, or this large face list is ready for Face - Find Similar. Status failed is often caused by no person or no persisted face exist in the person group or large person group, or no persisted face exist in the large face list.
 * @member {module:model/TrainingStatus.StatusEnum} status
 */
TrainingStatus.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
TrainingStatus['StatusEnum'] = {

    /**
     * value: "nonstarted"
     * @const
     */
    "nonstarted": "nonstarted",

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "succeeded"
     * @const
     */
    "succeeded": "succeeded",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed"
};



export default TrainingStatus;

