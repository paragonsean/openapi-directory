/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Coordinate from './Coordinate';

/**
 * The FaceLandmarks model module.
 * @module model/FaceLandmarks
 * @version 1.0
 */
class FaceLandmarks {
    /**
     * Constructs a new <code>FaceLandmarks</code>.
     * A collection of 27-point face landmarks pointing to the important positions of face components.
     * @alias module:model/FaceLandmarks
     */
    constructor() { 
        
        FaceLandmarks.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FaceLandmarks</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FaceLandmarks} obj Optional instance to populate.
     * @return {module:model/FaceLandmarks} The populated <code>FaceLandmarks</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FaceLandmarks();

            if (data.hasOwnProperty('eyeLeftBottom')) {
                obj['eyeLeftBottom'] = Coordinate.constructFromObject(data['eyeLeftBottom']);
            }
            if (data.hasOwnProperty('eyeLeftInner')) {
                obj['eyeLeftInner'] = Coordinate.constructFromObject(data['eyeLeftInner']);
            }
            if (data.hasOwnProperty('eyeLeftOuter')) {
                obj['eyeLeftOuter'] = Coordinate.constructFromObject(data['eyeLeftOuter']);
            }
            if (data.hasOwnProperty('eyeLeftTop')) {
                obj['eyeLeftTop'] = Coordinate.constructFromObject(data['eyeLeftTop']);
            }
            if (data.hasOwnProperty('eyeRightBottom')) {
                obj['eyeRightBottom'] = Coordinate.constructFromObject(data['eyeRightBottom']);
            }
            if (data.hasOwnProperty('eyeRightInner')) {
                obj['eyeRightInner'] = Coordinate.constructFromObject(data['eyeRightInner']);
            }
            if (data.hasOwnProperty('eyeRightOuter')) {
                obj['eyeRightOuter'] = Coordinate.constructFromObject(data['eyeRightOuter']);
            }
            if (data.hasOwnProperty('eyeRightTop')) {
                obj['eyeRightTop'] = Coordinate.constructFromObject(data['eyeRightTop']);
            }
            if (data.hasOwnProperty('eyebrowLeftInner')) {
                obj['eyebrowLeftInner'] = Coordinate.constructFromObject(data['eyebrowLeftInner']);
            }
            if (data.hasOwnProperty('eyebrowLeftOuter')) {
                obj['eyebrowLeftOuter'] = Coordinate.constructFromObject(data['eyebrowLeftOuter']);
            }
            if (data.hasOwnProperty('eyebrowRightInner')) {
                obj['eyebrowRightInner'] = Coordinate.constructFromObject(data['eyebrowRightInner']);
            }
            if (data.hasOwnProperty('eyebrowRightOuter')) {
                obj['eyebrowRightOuter'] = Coordinate.constructFromObject(data['eyebrowRightOuter']);
            }
            if (data.hasOwnProperty('mouthLeft')) {
                obj['mouthLeft'] = Coordinate.constructFromObject(data['mouthLeft']);
            }
            if (data.hasOwnProperty('mouthRight')) {
                obj['mouthRight'] = Coordinate.constructFromObject(data['mouthRight']);
            }
            if (data.hasOwnProperty('noseLeftAlarOutTip')) {
                obj['noseLeftAlarOutTip'] = Coordinate.constructFromObject(data['noseLeftAlarOutTip']);
            }
            if (data.hasOwnProperty('noseLeftAlarTop')) {
                obj['noseLeftAlarTop'] = Coordinate.constructFromObject(data['noseLeftAlarTop']);
            }
            if (data.hasOwnProperty('noseRightAlarOutTip')) {
                obj['noseRightAlarOutTip'] = Coordinate.constructFromObject(data['noseRightAlarOutTip']);
            }
            if (data.hasOwnProperty('noseRightAlarTop')) {
                obj['noseRightAlarTop'] = Coordinate.constructFromObject(data['noseRightAlarTop']);
            }
            if (data.hasOwnProperty('noseRootLeft')) {
                obj['noseRootLeft'] = Coordinate.constructFromObject(data['noseRootLeft']);
            }
            if (data.hasOwnProperty('noseRootRight')) {
                obj['noseRootRight'] = Coordinate.constructFromObject(data['noseRootRight']);
            }
            if (data.hasOwnProperty('noseTip')) {
                obj['noseTip'] = Coordinate.constructFromObject(data['noseTip']);
            }
            if (data.hasOwnProperty('pupilLeft')) {
                obj['pupilLeft'] = Coordinate.constructFromObject(data['pupilLeft']);
            }
            if (data.hasOwnProperty('pupilRight')) {
                obj['pupilRight'] = Coordinate.constructFromObject(data['pupilRight']);
            }
            if (data.hasOwnProperty('underLipBottom')) {
                obj['underLipBottom'] = Coordinate.constructFromObject(data['underLipBottom']);
            }
            if (data.hasOwnProperty('underLipTop')) {
                obj['underLipTop'] = Coordinate.constructFromObject(data['underLipTop']);
            }
            if (data.hasOwnProperty('upperLipBottom')) {
                obj['upperLipBottom'] = Coordinate.constructFromObject(data['upperLipBottom']);
            }
            if (data.hasOwnProperty('upperLipTop')) {
                obj['upperLipTop'] = Coordinate.constructFromObject(data['upperLipTop']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FaceLandmarks</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FaceLandmarks</code>.
     */
    static validateJSON(data) {
        // validate the optional field `eyeLeftBottom`
        if (data['eyeLeftBottom']) { // data not null
          Coordinate.validateJSON(data['eyeLeftBottom']);
        }
        // validate the optional field `eyeLeftInner`
        if (data['eyeLeftInner']) { // data not null
          Coordinate.validateJSON(data['eyeLeftInner']);
        }
        // validate the optional field `eyeLeftOuter`
        if (data['eyeLeftOuter']) { // data not null
          Coordinate.validateJSON(data['eyeLeftOuter']);
        }
        // validate the optional field `eyeLeftTop`
        if (data['eyeLeftTop']) { // data not null
          Coordinate.validateJSON(data['eyeLeftTop']);
        }
        // validate the optional field `eyeRightBottom`
        if (data['eyeRightBottom']) { // data not null
          Coordinate.validateJSON(data['eyeRightBottom']);
        }
        // validate the optional field `eyeRightInner`
        if (data['eyeRightInner']) { // data not null
          Coordinate.validateJSON(data['eyeRightInner']);
        }
        // validate the optional field `eyeRightOuter`
        if (data['eyeRightOuter']) { // data not null
          Coordinate.validateJSON(data['eyeRightOuter']);
        }
        // validate the optional field `eyeRightTop`
        if (data['eyeRightTop']) { // data not null
          Coordinate.validateJSON(data['eyeRightTop']);
        }
        // validate the optional field `eyebrowLeftInner`
        if (data['eyebrowLeftInner']) { // data not null
          Coordinate.validateJSON(data['eyebrowLeftInner']);
        }
        // validate the optional field `eyebrowLeftOuter`
        if (data['eyebrowLeftOuter']) { // data not null
          Coordinate.validateJSON(data['eyebrowLeftOuter']);
        }
        // validate the optional field `eyebrowRightInner`
        if (data['eyebrowRightInner']) { // data not null
          Coordinate.validateJSON(data['eyebrowRightInner']);
        }
        // validate the optional field `eyebrowRightOuter`
        if (data['eyebrowRightOuter']) { // data not null
          Coordinate.validateJSON(data['eyebrowRightOuter']);
        }
        // validate the optional field `mouthLeft`
        if (data['mouthLeft']) { // data not null
          Coordinate.validateJSON(data['mouthLeft']);
        }
        // validate the optional field `mouthRight`
        if (data['mouthRight']) { // data not null
          Coordinate.validateJSON(data['mouthRight']);
        }
        // validate the optional field `noseLeftAlarOutTip`
        if (data['noseLeftAlarOutTip']) { // data not null
          Coordinate.validateJSON(data['noseLeftAlarOutTip']);
        }
        // validate the optional field `noseLeftAlarTop`
        if (data['noseLeftAlarTop']) { // data not null
          Coordinate.validateJSON(data['noseLeftAlarTop']);
        }
        // validate the optional field `noseRightAlarOutTip`
        if (data['noseRightAlarOutTip']) { // data not null
          Coordinate.validateJSON(data['noseRightAlarOutTip']);
        }
        // validate the optional field `noseRightAlarTop`
        if (data['noseRightAlarTop']) { // data not null
          Coordinate.validateJSON(data['noseRightAlarTop']);
        }
        // validate the optional field `noseRootLeft`
        if (data['noseRootLeft']) { // data not null
          Coordinate.validateJSON(data['noseRootLeft']);
        }
        // validate the optional field `noseRootRight`
        if (data['noseRootRight']) { // data not null
          Coordinate.validateJSON(data['noseRootRight']);
        }
        // validate the optional field `noseTip`
        if (data['noseTip']) { // data not null
          Coordinate.validateJSON(data['noseTip']);
        }
        // validate the optional field `pupilLeft`
        if (data['pupilLeft']) { // data not null
          Coordinate.validateJSON(data['pupilLeft']);
        }
        // validate the optional field `pupilRight`
        if (data['pupilRight']) { // data not null
          Coordinate.validateJSON(data['pupilRight']);
        }
        // validate the optional field `underLipBottom`
        if (data['underLipBottom']) { // data not null
          Coordinate.validateJSON(data['underLipBottom']);
        }
        // validate the optional field `underLipTop`
        if (data['underLipTop']) { // data not null
          Coordinate.validateJSON(data['underLipTop']);
        }
        // validate the optional field `upperLipBottom`
        if (data['upperLipBottom']) { // data not null
          Coordinate.validateJSON(data['upperLipBottom']);
        }
        // validate the optional field `upperLipTop`
        if (data['upperLipTop']) { // data not null
          Coordinate.validateJSON(data['upperLipTop']);
        }

        return true;
    }


}



/**
 * @member {module:model/Coordinate} eyeLeftBottom
 */
FaceLandmarks.prototype['eyeLeftBottom'] = undefined;

/**
 * @member {module:model/Coordinate} eyeLeftInner
 */
FaceLandmarks.prototype['eyeLeftInner'] = undefined;

/**
 * @member {module:model/Coordinate} eyeLeftOuter
 */
FaceLandmarks.prototype['eyeLeftOuter'] = undefined;

/**
 * @member {module:model/Coordinate} eyeLeftTop
 */
FaceLandmarks.prototype['eyeLeftTop'] = undefined;

/**
 * @member {module:model/Coordinate} eyeRightBottom
 */
FaceLandmarks.prototype['eyeRightBottom'] = undefined;

/**
 * @member {module:model/Coordinate} eyeRightInner
 */
FaceLandmarks.prototype['eyeRightInner'] = undefined;

/**
 * @member {module:model/Coordinate} eyeRightOuter
 */
FaceLandmarks.prototype['eyeRightOuter'] = undefined;

/**
 * @member {module:model/Coordinate} eyeRightTop
 */
FaceLandmarks.prototype['eyeRightTop'] = undefined;

/**
 * @member {module:model/Coordinate} eyebrowLeftInner
 */
FaceLandmarks.prototype['eyebrowLeftInner'] = undefined;

/**
 * @member {module:model/Coordinate} eyebrowLeftOuter
 */
FaceLandmarks.prototype['eyebrowLeftOuter'] = undefined;

/**
 * @member {module:model/Coordinate} eyebrowRightInner
 */
FaceLandmarks.prototype['eyebrowRightInner'] = undefined;

/**
 * @member {module:model/Coordinate} eyebrowRightOuter
 */
FaceLandmarks.prototype['eyebrowRightOuter'] = undefined;

/**
 * @member {module:model/Coordinate} mouthLeft
 */
FaceLandmarks.prototype['mouthLeft'] = undefined;

/**
 * @member {module:model/Coordinate} mouthRight
 */
FaceLandmarks.prototype['mouthRight'] = undefined;

/**
 * @member {module:model/Coordinate} noseLeftAlarOutTip
 */
FaceLandmarks.prototype['noseLeftAlarOutTip'] = undefined;

/**
 * @member {module:model/Coordinate} noseLeftAlarTop
 */
FaceLandmarks.prototype['noseLeftAlarTop'] = undefined;

/**
 * @member {module:model/Coordinate} noseRightAlarOutTip
 */
FaceLandmarks.prototype['noseRightAlarOutTip'] = undefined;

/**
 * @member {module:model/Coordinate} noseRightAlarTop
 */
FaceLandmarks.prototype['noseRightAlarTop'] = undefined;

/**
 * @member {module:model/Coordinate} noseRootLeft
 */
FaceLandmarks.prototype['noseRootLeft'] = undefined;

/**
 * @member {module:model/Coordinate} noseRootRight
 */
FaceLandmarks.prototype['noseRootRight'] = undefined;

/**
 * @member {module:model/Coordinate} noseTip
 */
FaceLandmarks.prototype['noseTip'] = undefined;

/**
 * @member {module:model/Coordinate} pupilLeft
 */
FaceLandmarks.prototype['pupilLeft'] = undefined;

/**
 * @member {module:model/Coordinate} pupilRight
 */
FaceLandmarks.prototype['pupilRight'] = undefined;

/**
 * @member {module:model/Coordinate} underLipBottom
 */
FaceLandmarks.prototype['underLipBottom'] = undefined;

/**
 * @member {module:model/Coordinate} underLipTop
 */
FaceLandmarks.prototype['underLipTop'] = undefined;

/**
 * @member {module:model/Coordinate} upperLipBottom
 */
FaceLandmarks.prototype['upperLipBottom'] = undefined;

/**
 * @member {module:model/Coordinate} upperLipTop
 */
FaceLandmarks.prototype['upperLipTop'] = undefined;






export default FaceLandmarks;

