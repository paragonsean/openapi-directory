/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateSnapshotRequest model module.
 * @module model/UpdateSnapshotRequest
 * @version 1.0
 */
class UpdateSnapshotRequest {
    /**
     * Constructs a new <code>UpdateSnapshotRequest</code>.
     * Request body for updating a snapshot, with a combination of user defined apply scope and user specified data.
     * @alias module:model/UpdateSnapshotRequest
     */
    constructor() { 
        
        UpdateSnapshotRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateSnapshotRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateSnapshotRequest} obj Optional instance to populate.
     * @return {module:model/UpdateSnapshotRequest} The populated <code>UpdateSnapshotRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateSnapshotRequest();

            if (data.hasOwnProperty('applyScope')) {
                obj['applyScope'] = ApiClient.convertToType(data['applyScope'], ['String']);
            }
            if (data.hasOwnProperty('userData')) {
                obj['userData'] = ApiClient.convertToType(data['userData'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateSnapshotRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateSnapshotRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['applyScope'])) {
            throw new Error("Expected the field `applyScope` to be an array in the JSON data but got " + data['applyScope']);
        }
        // ensure the json data is a string
        if (data['userData'] && !(typeof data['userData'] === 'string' || data['userData'] instanceof String)) {
            throw new Error("Expected the field `userData` to be a primitive type in the JSON string but got " + data['userData']);
        }

        return true;
    }


}



/**
 * Array of the target Face subscription ids for the snapshot, specified by the user who created the snapshot when calling Snapshot - Take. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.
 * @member {Array.<String>} applyScope
 */
UpdateSnapshotRequest.prototype['applyScope'] = undefined;

/**
 * User specified data about the snapshot for any purpose. Length should not exceed 16KB.
 * @member {String} userData
 */
UpdateSnapshotRequest.prototype['userData'] = undefined;






export default UpdateSnapshotRequest;

