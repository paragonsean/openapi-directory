/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Noise model module.
 * @module model/Noise
 * @version 1.0
 */
class Noise {
    /**
     * Constructs a new <code>Noise</code>.
     * Properties describing noise level of the image.
     * @alias module:model/Noise
     */
    constructor() { 
        
        Noise.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Noise</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Noise} obj Optional instance to populate.
     * @return {module:model/Noise} The populated <code>Noise</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Noise();

            if (data.hasOwnProperty('noiseLevel')) {
                obj['noiseLevel'] = ApiClient.convertToType(data['noiseLevel'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Noise</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Noise</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['noiseLevel'] && !(typeof data['noiseLevel'] === 'string' || data['noiseLevel'] instanceof String)) {
            throw new Error("Expected the field `noiseLevel` to be a primitive type in the JSON string but got " + data['noiseLevel']);
        }

        return true;
    }


}



/**
 * An enum value indicating level of noise.
 * @member {module:model/Noise.NoiseLevelEnum} noiseLevel
 */
Noise.prototype['noiseLevel'] = undefined;

/**
 * A number ranging from 0 to 1 indicating the intensity level associated with a property.
 * @member {Number} value
 */
Noise.prototype['value'] = undefined;





/**
 * Allowed values for the <code>noiseLevel</code> property.
 * @enum {String}
 * @readonly
 */
Noise['NoiseLevelEnum'] = {

    /**
     * value: "Low"
     * @const
     */
    "Low": "Low",

    /**
     * value: "Medium"
     * @const
     */
    "Medium": "Medium",

    /**
     * value: "High"
     * @const
     */
    "High": "High"
};



export default Noise;

