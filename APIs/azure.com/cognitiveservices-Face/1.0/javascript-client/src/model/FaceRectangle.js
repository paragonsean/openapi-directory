/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FaceRectangle model module.
 * @module model/FaceRectangle
 * @version 1.0
 */
class FaceRectangle {
    /**
     * Constructs a new <code>FaceRectangle</code>.
     * A rectangle within which a face can be found
     * @alias module:model/FaceRectangle
     * @param height {Number} The height of the rectangle, in pixels.
     * @param left {Number} The distance from the left edge if the image to the left edge of the rectangle, in pixels.
     * @param top {Number} The distance from the top edge if the image to the top edge of the rectangle, in pixels.
     * @param width {Number} The width of the rectangle, in pixels.
     */
    constructor(height, left, top, width) { 
        
        FaceRectangle.initialize(this, height, left, top, width);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, height, left, top, width) { 
        obj['height'] = height;
        obj['left'] = left;
        obj['top'] = top;
        obj['width'] = width;
    }

    /**
     * Constructs a <code>FaceRectangle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FaceRectangle} obj Optional instance to populate.
     * @return {module:model/FaceRectangle} The populated <code>FaceRectangle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FaceRectangle();

            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('left')) {
                obj['left'] = ApiClient.convertToType(data['left'], 'Number');
            }
            if (data.hasOwnProperty('top')) {
                obj['top'] = ApiClient.convertToType(data['top'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FaceRectangle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FaceRectangle</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FaceRectangle.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

FaceRectangle.RequiredProperties = ["height", "left", "top", "width"];

/**
 * The height of the rectangle, in pixels.
 * @member {Number} height
 */
FaceRectangle.prototype['height'] = undefined;

/**
 * The distance from the left edge if the image to the left edge of the rectangle, in pixels.
 * @member {Number} left
 */
FaceRectangle.prototype['left'] = undefined;

/**
 * The distance from the top edge if the image to the top edge of the rectangle, in pixels.
 * @member {Number} top
 */
FaceRectangle.prototype['top'] = undefined;

/**
 * The width of the rectangle, in pixels.
 * @member {Number} width
 */
FaceRectangle.prototype['width'] = undefined;






export default FaceRectangle;

