/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NameAndUserDataContract from './NameAndUserDataContract';

/**
 * The Person model module.
 * @module model/Person
 * @version 1.0
 */
class Person {
    /**
     * Constructs a new <code>Person</code>.
     * Person object.
     * @alias module:model/Person
     * @implements module:model/NameAndUserDataContract
     */
    constructor() { 
        NameAndUserDataContract.initialize(this);
        Person.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['personId'] = personId;
    }

    /**
     * Constructs a <code>Person</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Person} obj Optional instance to populate.
     * @return {module:model/Person} The populated <code>Person</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Person();
            NameAndUserDataContract.constructFromObject(data, obj);

            if (data.hasOwnProperty('persistedFaceIds')) {
                obj['persistedFaceIds'] = ApiClient.convertToType(data['persistedFaceIds'], ['String']);
            }
            if (data.hasOwnProperty('personId')) {
                obj['personId'] = ApiClient.convertToType(data['personId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('userData')) {
                obj['userData'] = ApiClient.convertToType(data['userData'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Person</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Person</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Person.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['persistedFaceIds'])) {
            throw new Error("Expected the field `persistedFaceIds` to be an array in the JSON data but got " + data['persistedFaceIds']);
        }
        // ensure the json data is a string
        if (data['personId'] && !(typeof data['personId'] === 'string' || data['personId'] instanceof String)) {
            throw new Error("Expected the field `personId` to be a primitive type in the JSON string but got " + data['personId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['userData'] && !(typeof data['userData'] === 'string' || data['userData'] instanceof String)) {
            throw new Error("Expected the field `userData` to be a primitive type in the JSON string but got " + data['userData']);
        }

        return true;
    }


}

Person.RequiredProperties = ["personId"];

/**
 * PersistedFaceIds of registered faces in the person. These persistedFaceIds are returned from Person - Add a Person Face, and will not expire.
 * @member {Array.<String>} persistedFaceIds
 */
Person.prototype['persistedFaceIds'] = undefined;

/**
 * PersonId of the target face list.
 * @member {String} personId
 */
Person.prototype['personId'] = undefined;

/**
 * User defined name, maximum length is 128.
 * @member {String} name
 */
Person.prototype['name'] = undefined;

/**
 * User specified data. Length should not exceed 16KB.
 * @member {String} userData
 */
Person.prototype['userData'] = undefined;


// Implement NameAndUserDataContract interface:
/**
 * User defined name, maximum length is 128.
 * @member {String} name
 */
NameAndUserDataContract.prototype['name'] = undefined;
/**
 * User specified data. Length should not exceed 16KB.
 * @member {String} userData
 */
NameAndUserDataContract.prototype['userData'] = undefined;




export default Person;

