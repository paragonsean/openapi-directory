/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetaDataContract from './MetaDataContract';
import PersistedFace from './PersistedFace';
import RecognitionModel from './RecognitionModel';

/**
 * The FaceList model module.
 * @module model/FaceList
 * @version 1.0
 */
class FaceList {
    /**
     * Constructs a new <code>FaceList</code>.
     * Face list object.
     * @alias module:model/FaceList
     * @implements module:model/MetaDataContract
     */
    constructor() { 
        MetaDataContract.initialize(this);
        FaceList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['faceListId'] = faceListId;
    }

    /**
     * Constructs a <code>FaceList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FaceList} obj Optional instance to populate.
     * @return {module:model/FaceList} The populated <code>FaceList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FaceList();
            MetaDataContract.constructFromObject(data, obj);

            if (data.hasOwnProperty('faceListId')) {
                obj['faceListId'] = ApiClient.convertToType(data['faceListId'], 'String');
            }
            if (data.hasOwnProperty('persistedFaces')) {
                obj['persistedFaces'] = ApiClient.convertToType(data['persistedFaces'], [PersistedFace]);
            }
            if (data.hasOwnProperty('recognitionModel')) {
                obj['recognitionModel'] = RecognitionModel.constructFromObject(data['recognitionModel']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('userData')) {
                obj['userData'] = ApiClient.convertToType(data['userData'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FaceList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FaceList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FaceList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['faceListId'] && !(typeof data['faceListId'] === 'string' || data['faceListId'] instanceof String)) {
            throw new Error("Expected the field `faceListId` to be a primitive type in the JSON string but got " + data['faceListId']);
        }
        if (data['persistedFaces']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['persistedFaces'])) {
                throw new Error("Expected the field `persistedFaces` to be an array in the JSON data but got " + data['persistedFaces']);
            }
            // validate the optional field `persistedFaces` (array)
            for (const item of data['persistedFaces']) {
                PersistedFace.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['userData'] && !(typeof data['userData'] === 'string' || data['userData'] instanceof String)) {
            throw new Error("Expected the field `userData` to be a primitive type in the JSON string but got " + data['userData']);
        }

        return true;
    }


}

FaceList.RequiredProperties = ["faceListId"];

/**
 * FaceListId of the target face list.
 * @member {String} faceListId
 */
FaceList.prototype['faceListId'] = undefined;

/**
 * An array of persisted faces within the face list or large face list.
 * @member {Array.<module:model/PersistedFace>} persistedFaces
 */
FaceList.prototype['persistedFaces'] = undefined;

/**
 * @member {module:model/RecognitionModel} recognitionModel
 */
FaceList.prototype['recognitionModel'] = undefined;

/**
 * User defined name, maximum length is 128.
 * @member {String} name
 */
FaceList.prototype['name'] = undefined;

/**
 * User specified data. Length should not exceed 16KB.
 * @member {String} userData
 */
FaceList.prototype['userData'] = undefined;


// Implement MetaDataContract interface:
/**
 * User defined name, maximum length is 128.
 * @member {String} name
 */
MetaDataContract.prototype['name'] = undefined;
/**
 * User specified data. Length should not exceed 16KB.
 * @member {String} userData
 */
MetaDataContract.prototype['userData'] = undefined;




export default FaceList;

