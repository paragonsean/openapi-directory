/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NameAndUserDataContract from './NameAndUserDataContract';
import RecognitionModel from './RecognitionModel';

/**
 * The MetaDataContract model module.
 * @module model/MetaDataContract
 * @version 1.0
 */
class MetaDataContract {
    /**
     * Constructs a new <code>MetaDataContract</code>.
     * A combination of user defined name and user specified data and recognition model name for largePersonGroup/personGroup, and largeFaceList/faceList.
     * @alias module:model/MetaDataContract
     * @implements module:model/NameAndUserDataContract
     */
    constructor() { 
        NameAndUserDataContract.initialize(this);
        MetaDataContract.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetaDataContract</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetaDataContract} obj Optional instance to populate.
     * @return {module:model/MetaDataContract} The populated <code>MetaDataContract</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetaDataContract();
            NameAndUserDataContract.constructFromObject(data, obj);

            if (data.hasOwnProperty('recognitionModel')) {
                obj['recognitionModel'] = RecognitionModel.constructFromObject(data['recognitionModel']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('userData')) {
                obj['userData'] = ApiClient.convertToType(data['userData'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetaDataContract</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetaDataContract</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['userData'] && !(typeof data['userData'] === 'string' || data['userData'] instanceof String)) {
            throw new Error("Expected the field `userData` to be a primitive type in the JSON string but got " + data['userData']);
        }

        return true;
    }


}



/**
 * @member {module:model/RecognitionModel} recognitionModel
 */
MetaDataContract.prototype['recognitionModel'] = undefined;

/**
 * User defined name, maximum length is 128.
 * @member {String} name
 */
MetaDataContract.prototype['name'] = undefined;

/**
 * User specified data. Length should not exceed 16KB.
 * @member {String} userData
 */
MetaDataContract.prototype['userData'] = undefined;


// Implement NameAndUserDataContract interface:
/**
 * User defined name, maximum length is 128.
 * @member {String} name
 */
NameAndUserDataContract.prototype['name'] = undefined;
/**
 * User specified data. Length should not exceed 16KB.
 * @member {String} userData
 */
NameAndUserDataContract.prototype['userData'] = undefined;




export default MetaDataContract;

