/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HairColor model module.
 * @module model/HairColor
 * @version 1.0
 */
class HairColor {
    /**
     * Constructs a new <code>HairColor</code>.
     * Hair color and associated confidence
     * @alias module:model/HairColor
     */
    constructor() { 
        
        HairColor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HairColor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HairColor} obj Optional instance to populate.
     * @return {module:model/HairColor} The populated <code>HairColor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HairColor();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HairColor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HairColor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }

        return true;
    }


}



/**
 * Name of the hair color.
 * @member {module:model/HairColor.ColorEnum} color
 */
HairColor.prototype['color'] = undefined;

/**
 * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
 * @member {Number} confidence
 */
HairColor.prototype['confidence'] = undefined;





/**
 * Allowed values for the <code>color</code> property.
 * @enum {String}
 * @readonly
 */
HairColor['ColorEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "white"
     * @const
     */
    "white": "white",

    /**
     * value: "gray"
     * @const
     */
    "gray": "gray",

    /**
     * value: "blond"
     * @const
     */
    "blond": "blond",

    /**
     * value: "brown"
     * @const
     */
    "brown": "brown",

    /**
     * value: "red"
     * @const
     */
    "red": "red",

    /**
     * value: "black"
     * @const
     */
    "black": "black",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default HairColor;

