/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Accessory from './Accessory';
import Blur from './Blur';
import Emotion from './Emotion';
import Exposure from './Exposure';
import FacialHair from './FacialHair';
import Hair from './Hair';
import HeadPose from './HeadPose';
import Makeup from './Makeup';
import Noise from './Noise';
import Occlusion from './Occlusion';

/**
 * The FaceAttributes model module.
 * @module model/FaceAttributes
 * @version 1.0
 */
class FaceAttributes {
    /**
     * Constructs a new <code>FaceAttributes</code>.
     * Face Attributes
     * @alias module:model/FaceAttributes
     */
    constructor() { 
        
        FaceAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FaceAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FaceAttributes} obj Optional instance to populate.
     * @return {module:model/FaceAttributes} The populated <code>FaceAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FaceAttributes();

            if (data.hasOwnProperty('accessories')) {
                obj['accessories'] = ApiClient.convertToType(data['accessories'], [Accessory]);
            }
            if (data.hasOwnProperty('age')) {
                obj['age'] = ApiClient.convertToType(data['age'], 'Number');
            }
            if (data.hasOwnProperty('blur')) {
                obj['blur'] = Blur.constructFromObject(data['blur']);
            }
            if (data.hasOwnProperty('emotion')) {
                obj['emotion'] = Emotion.constructFromObject(data['emotion']);
            }
            if (data.hasOwnProperty('exposure')) {
                obj['exposure'] = Exposure.constructFromObject(data['exposure']);
            }
            if (data.hasOwnProperty('facialHair')) {
                obj['facialHair'] = FacialHair.constructFromObject(data['facialHair']);
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('glasses')) {
                obj['glasses'] = ApiClient.convertToType(data['glasses'], 'String');
            }
            if (data.hasOwnProperty('hair')) {
                obj['hair'] = Hair.constructFromObject(data['hair']);
            }
            if (data.hasOwnProperty('headPose')) {
                obj['headPose'] = HeadPose.constructFromObject(data['headPose']);
            }
            if (data.hasOwnProperty('makeup')) {
                obj['makeup'] = Makeup.constructFromObject(data['makeup']);
            }
            if (data.hasOwnProperty('noise')) {
                obj['noise'] = Noise.constructFromObject(data['noise']);
            }
            if (data.hasOwnProperty('occlusion')) {
                obj['occlusion'] = Occlusion.constructFromObject(data['occlusion']);
            }
            if (data.hasOwnProperty('smile')) {
                obj['smile'] = ApiClient.convertToType(data['smile'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FaceAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FaceAttributes</code>.
     */
    static validateJSON(data) {
        if (data['accessories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accessories'])) {
                throw new Error("Expected the field `accessories` to be an array in the JSON data but got " + data['accessories']);
            }
            // validate the optional field `accessories` (array)
            for (const item of data['accessories']) {
                Accessory.validateJSON(item);
            };
        }
        // validate the optional field `blur`
        if (data['blur']) { // data not null
          Blur.validateJSON(data['blur']);
        }
        // validate the optional field `emotion`
        if (data['emotion']) { // data not null
          Emotion.validateJSON(data['emotion']);
        }
        // validate the optional field `exposure`
        if (data['exposure']) { // data not null
          Exposure.validateJSON(data['exposure']);
        }
        // validate the optional field `facialHair`
        if (data['facialHair']) { // data not null
          FacialHair.validateJSON(data['facialHair']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['glasses'] && !(typeof data['glasses'] === 'string' || data['glasses'] instanceof String)) {
            throw new Error("Expected the field `glasses` to be a primitive type in the JSON string but got " + data['glasses']);
        }
        // validate the optional field `hair`
        if (data['hair']) { // data not null
          Hair.validateJSON(data['hair']);
        }
        // validate the optional field `headPose`
        if (data['headPose']) { // data not null
          HeadPose.validateJSON(data['headPose']);
        }
        // validate the optional field `makeup`
        if (data['makeup']) { // data not null
          Makeup.validateJSON(data['makeup']);
        }
        // validate the optional field `noise`
        if (data['noise']) { // data not null
          Noise.validateJSON(data['noise']);
        }
        // validate the optional field `occlusion`
        if (data['occlusion']) { // data not null
          Occlusion.validateJSON(data['occlusion']);
        }

        return true;
    }


}



/**
 * Properties describing any accessories on a given face.
 * @member {Array.<module:model/Accessory>} accessories
 */
FaceAttributes.prototype['accessories'] = undefined;

/**
 * Age in years
 * @member {Number} age
 */
FaceAttributes.prototype['age'] = undefined;

/**
 * @member {module:model/Blur} blur
 */
FaceAttributes.prototype['blur'] = undefined;

/**
 * @member {module:model/Emotion} emotion
 */
FaceAttributes.prototype['emotion'] = undefined;

/**
 * @member {module:model/Exposure} exposure
 */
FaceAttributes.prototype['exposure'] = undefined;

/**
 * @member {module:model/FacialHair} facialHair
 */
FaceAttributes.prototype['facialHair'] = undefined;

/**
 * Possible gender of the face.
 * @member {module:model/FaceAttributes.GenderEnum} gender
 */
FaceAttributes.prototype['gender'] = undefined;

/**
 * Glasses type if any of the face.
 * @member {module:model/FaceAttributes.GlassesEnum} glasses
 */
FaceAttributes.prototype['glasses'] = undefined;

/**
 * @member {module:model/Hair} hair
 */
FaceAttributes.prototype['hair'] = undefined;

/**
 * @member {module:model/HeadPose} headPose
 */
FaceAttributes.prototype['headPose'] = undefined;

/**
 * @member {module:model/Makeup} makeup
 */
FaceAttributes.prototype['makeup'] = undefined;

/**
 * @member {module:model/Noise} noise
 */
FaceAttributes.prototype['noise'] = undefined;

/**
 * @member {module:model/Occlusion} occlusion
 */
FaceAttributes.prototype['occlusion'] = undefined;

/**
 * A number ranging from 0 to 1 indicating the intensity level associated with a property.
 * @member {Number} smile
 */
FaceAttributes.prototype['smile'] = undefined;





/**
 * Allowed values for the <code>gender</code> property.
 * @enum {String}
 * @readonly
 */
FaceAttributes['GenderEnum'] = {

    /**
     * value: "male"
     * @const
     */
    "male": "male",

    /**
     * value: "female"
     * @const
     */
    "female": "female"
};


/**
 * Allowed values for the <code>glasses</code> property.
 * @enum {String}
 * @readonly
 */
FaceAttributes['GlassesEnum'] = {

    /**
     * value: "noGlasses"
     * @const
     */
    "noGlasses": "noGlasses",

    /**
     * value: "readingGlasses"
     * @const
     */
    "readingGlasses": "readingGlasses",

    /**
     * value: "sunglasses"
     * @const
     */
    "sunglasses": "sunglasses",

    /**
     * value: "swimmingGoggles"
     * @const
     */
    "swimmingGoggles": "swimmingGoggles"
};



export default FaceAttributes;

