/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FacialHair model module.
 * @module model/FacialHair
 * @version 1.0
 */
class FacialHair {
    /**
     * Constructs a new <code>FacialHair</code>.
     * Properties describing facial hair attributes.
     * @alias module:model/FacialHair
     */
    constructor() { 
        
        FacialHair.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FacialHair</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FacialHair} obj Optional instance to populate.
     * @return {module:model/FacialHair} The populated <code>FacialHair</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FacialHair();

            if (data.hasOwnProperty('beard')) {
                obj['beard'] = ApiClient.convertToType(data['beard'], 'Number');
            }
            if (data.hasOwnProperty('moustache')) {
                obj['moustache'] = ApiClient.convertToType(data['moustache'], 'Number');
            }
            if (data.hasOwnProperty('sideburns')) {
                obj['sideburns'] = ApiClient.convertToType(data['sideburns'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FacialHair</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FacialHair</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
 * @member {Number} beard
 */
FacialHair.prototype['beard'] = undefined;

/**
 * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
 * @member {Number} moustache
 */
FacialHair.prototype['moustache'] = undefined;

/**
 * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
 * @member {Number} sideburns
 */
FacialHair.prototype['sideburns'] = undefined;






export default FacialHair;

