/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Makeup model module.
 * @module model/Makeup
 * @version 1.0
 */
class Makeup {
    /**
     * Constructs a new <code>Makeup</code>.
     * Properties describing present makeups on a given face.
     * @alias module:model/Makeup
     */
    constructor() { 
        
        Makeup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Makeup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Makeup} obj Optional instance to populate.
     * @return {module:model/Makeup} The populated <code>Makeup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Makeup();

            if (data.hasOwnProperty('eyeMakeup')) {
                obj['eyeMakeup'] = ApiClient.convertToType(data['eyeMakeup'], 'Boolean');
            }
            if (data.hasOwnProperty('lipMakeup')) {
                obj['lipMakeup'] = ApiClient.convertToType(data['lipMakeup'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Makeup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Makeup</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * A boolean value describing whether eye makeup is present on a face.
 * @member {Boolean} eyeMakeup
 */
Makeup.prototype['eyeMakeup'] = undefined;

/**
 * A boolean value describing whether lip makeup is present on a face.
 * @member {Boolean} lipMakeup
 */
Makeup.prototype['lipMakeup'] = undefined;






export default Makeup;

