/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IdentifyCandidate from './IdentifyCandidate';

/**
 * The IdentifyResult model module.
 * @module model/IdentifyResult
 * @version 1.0
 */
class IdentifyResult {
    /**
     * Constructs a new <code>IdentifyResult</code>.
     * Response body for identify face operation.
     * @alias module:model/IdentifyResult
     * @param candidates {Array.<module:model/IdentifyCandidate>} Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array.
     * @param faceId {String} FaceId of the query face
     */
    constructor(candidates, faceId) { 
        
        IdentifyResult.initialize(this, candidates, faceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, candidates, faceId) { 
        obj['candidates'] = candidates;
        obj['faceId'] = faceId;
    }

    /**
     * Constructs a <code>IdentifyResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentifyResult} obj Optional instance to populate.
     * @return {module:model/IdentifyResult} The populated <code>IdentifyResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentifyResult();

            if (data.hasOwnProperty('candidates')) {
                obj['candidates'] = ApiClient.convertToType(data['candidates'], [IdentifyCandidate]);
            }
            if (data.hasOwnProperty('faceId')) {
                obj['faceId'] = ApiClient.convertToType(data['faceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentifyResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentifyResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IdentifyResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['candidates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['candidates'])) {
                throw new Error("Expected the field `candidates` to be an array in the JSON data but got " + data['candidates']);
            }
            // validate the optional field `candidates` (array)
            for (const item of data['candidates']) {
                IdentifyCandidate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['faceId'] && !(typeof data['faceId'] === 'string' || data['faceId'] instanceof String)) {
            throw new Error("Expected the field `faceId` to be a primitive type in the JSON string but got " + data['faceId']);
        }

        return true;
    }


}

IdentifyResult.RequiredProperties = ["candidates", "faceId"];

/**
 * Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array.
 * @member {Array.<module:model/IdentifyCandidate>} candidates
 */
IdentifyResult.prototype['candidates'] = undefined;

/**
 * FaceId of the query face
 * @member {String} faceId
 */
IdentifyResult.prototype['faceId'] = undefined;






export default IdentifyResult;

