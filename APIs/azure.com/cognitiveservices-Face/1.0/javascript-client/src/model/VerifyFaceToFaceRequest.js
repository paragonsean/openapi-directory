/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VerifyFaceToFaceRequest model module.
 * @module model/VerifyFaceToFaceRequest
 * @version 1.0
 */
class VerifyFaceToFaceRequest {
    /**
     * Constructs a new <code>VerifyFaceToFaceRequest</code>.
     * Request body for face to face verification.
     * @alias module:model/VerifyFaceToFaceRequest
     * @param faceId1 {String} FaceId of the first face, comes from Face - Detect
     * @param faceId2 {String} FaceId of the second face, comes from Face - Detect
     */
    constructor(faceId1, faceId2) { 
        
        VerifyFaceToFaceRequest.initialize(this, faceId1, faceId2);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, faceId1, faceId2) { 
        obj['faceId1'] = faceId1;
        obj['faceId2'] = faceId2;
    }

    /**
     * Constructs a <code>VerifyFaceToFaceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerifyFaceToFaceRequest} obj Optional instance to populate.
     * @return {module:model/VerifyFaceToFaceRequest} The populated <code>VerifyFaceToFaceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerifyFaceToFaceRequest();

            if (data.hasOwnProperty('faceId1')) {
                obj['faceId1'] = ApiClient.convertToType(data['faceId1'], 'String');
            }
            if (data.hasOwnProperty('faceId2')) {
                obj['faceId2'] = ApiClient.convertToType(data['faceId2'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerifyFaceToFaceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerifyFaceToFaceRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VerifyFaceToFaceRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['faceId1'] && !(typeof data['faceId1'] === 'string' || data['faceId1'] instanceof String)) {
            throw new Error("Expected the field `faceId1` to be a primitive type in the JSON string but got " + data['faceId1']);
        }
        // ensure the json data is a string
        if (data['faceId2'] && !(typeof data['faceId2'] === 'string' || data['faceId2'] instanceof String)) {
            throw new Error("Expected the field `faceId2` to be a primitive type in the JSON string but got " + data['faceId2']);
        }

        return true;
    }


}

VerifyFaceToFaceRequest.RequiredProperties = ["faceId1", "faceId2"];

/**
 * FaceId of the first face, comes from Face - Detect
 * @member {String} faceId1
 */
VerifyFaceToFaceRequest.prototype['faceId1'] = undefined;

/**
 * FaceId of the second face, comes from Face - Detect
 * @member {String} faceId2
 */
VerifyFaceToFaceRequest.prototype['faceId2'] = undefined;






export default VerifyFaceToFaceRequest;

