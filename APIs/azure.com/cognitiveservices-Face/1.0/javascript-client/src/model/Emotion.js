/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Emotion model module.
 * @module model/Emotion
 * @version 1.0
 */
class Emotion {
    /**
     * Constructs a new <code>Emotion</code>.
     * Properties describing facial emotion in form of confidence ranging from 0 to 1.
     * @alias module:model/Emotion
     */
    constructor() { 
        
        Emotion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Emotion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Emotion} obj Optional instance to populate.
     * @return {module:model/Emotion} The populated <code>Emotion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Emotion();

            if (data.hasOwnProperty('anger')) {
                obj['anger'] = ApiClient.convertToType(data['anger'], 'Number');
            }
            if (data.hasOwnProperty('contempt')) {
                obj['contempt'] = ApiClient.convertToType(data['contempt'], 'Number');
            }
            if (data.hasOwnProperty('disgust')) {
                obj['disgust'] = ApiClient.convertToType(data['disgust'], 'Number');
            }
            if (data.hasOwnProperty('fear')) {
                obj['fear'] = ApiClient.convertToType(data['fear'], 'Number');
            }
            if (data.hasOwnProperty('happiness')) {
                obj['happiness'] = ApiClient.convertToType(data['happiness'], 'Number');
            }
            if (data.hasOwnProperty('neutral')) {
                obj['neutral'] = ApiClient.convertToType(data['neutral'], 'Number');
            }
            if (data.hasOwnProperty('sadness')) {
                obj['sadness'] = ApiClient.convertToType(data['sadness'], 'Number');
            }
            if (data.hasOwnProperty('surprise')) {
                obj['surprise'] = ApiClient.convertToType(data['surprise'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Emotion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Emotion</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
 * @member {Number} anger
 */
Emotion.prototype['anger'] = undefined;

/**
 * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
 * @member {Number} contempt
 */
Emotion.prototype['contempt'] = undefined;

/**
 * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
 * @member {Number} disgust
 */
Emotion.prototype['disgust'] = undefined;

/**
 * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
 * @member {Number} fear
 */
Emotion.prototype['fear'] = undefined;

/**
 * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
 * @member {Number} happiness
 */
Emotion.prototype['happiness'] = undefined;

/**
 * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
 * @member {Number} neutral
 */
Emotion.prototype['neutral'] = undefined;

/**
 * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
 * @member {Number} sadness
 */
Emotion.prototype['sadness'] = undefined;

/**
 * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
 * @member {Number} surprise
 */
Emotion.prototype['surprise'] = undefined;






export default Emotion;

