/**
 * Face Client
 * An API for face detection, verification, and identification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HairColor from './HairColor';

/**
 * The Hair model module.
 * @module model/Hair
 * @version 1.0
 */
class Hair {
    /**
     * Constructs a new <code>Hair</code>.
     * Properties describing hair attributes.
     * @alias module:model/Hair
     */
    constructor() { 
        
        Hair.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Hair</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Hair} obj Optional instance to populate.
     * @return {module:model/Hair} The populated <code>Hair</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Hair();

            if (data.hasOwnProperty('bald')) {
                obj['bald'] = ApiClient.convertToType(data['bald'], 'Number');
            }
            if (data.hasOwnProperty('hairColor')) {
                obj['hairColor'] = ApiClient.convertToType(data['hairColor'], [HairColor]);
            }
            if (data.hasOwnProperty('invisible')) {
                obj['invisible'] = ApiClient.convertToType(data['invisible'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Hair</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Hair</code>.
     */
    static validateJSON(data) {
        if (data['hairColor']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['hairColor'])) {
                throw new Error("Expected the field `hairColor` to be an array in the JSON data but got " + data['hairColor']);
            }
            // validate the optional field `hairColor` (array)
            for (const item of data['hairColor']) {
                HairColor.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A number ranging from 0 to 1 indicating a level of confidence associated with a property.
 * @member {Number} bald
 */
Hair.prototype['bald'] = undefined;

/**
 * @member {Array.<module:model/HairColor>} hairColor
 */
Hair.prototype['hairColor'] = undefined;

/**
 * A boolean value describing whether the hair is visible in the image.
 * @member {Boolean} invisible
 */
Hair.prototype['invisible'] = undefined;






export default Hair;

