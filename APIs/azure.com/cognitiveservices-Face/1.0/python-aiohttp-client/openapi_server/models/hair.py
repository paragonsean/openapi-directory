# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hair_color import HairColor
from openapi_server import util


class Hair(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bald: float=None, hair_color: List[HairColor]=None, invisible: bool=None):
        """Hair - a model defined in OpenAPI

        :param bald: The bald of this Hair.
        :param hair_color: The hair_color of this Hair.
        :param invisible: The invisible of this Hair.
        """
        self.openapi_types = {
            'bald': float,
            'hair_color': List[HairColor],
            'invisible': bool
        }

        self.attribute_map = {
            'bald': 'bald',
            'hair_color': 'hairColor',
            'invisible': 'invisible'
        }

        self._bald = bald
        self._hair_color = hair_color
        self._invisible = invisible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Hair':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Hair of this Hair.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bald(self):
        """Gets the bald of this Hair.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The bald of this Hair.
        :rtype: float
        """
        return self._bald

    @bald.setter
    def bald(self, bald):
        """Sets the bald of this Hair.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param bald: The bald of this Hair.
        :type bald: float
        """
        if bald is not None and bald > 1:
            raise ValueError("Invalid value for `bald`, must be a value less than or equal to `1`")
        if bald is not None and bald < 0:
            raise ValueError("Invalid value for `bald`, must be a value greater than or equal to `0`")

        self._bald = bald

    @property
    def hair_color(self):
        """Gets the hair_color of this Hair.


        :return: The hair_color of this Hair.
        :rtype: List[HairColor]
        """
        return self._hair_color

    @hair_color.setter
    def hair_color(self, hair_color):
        """Sets the hair_color of this Hair.


        :param hair_color: The hair_color of this Hair.
        :type hair_color: List[HairColor]
        """

        self._hair_color = hair_color

    @property
    def invisible(self):
        """Gets the invisible of this Hair.

        A boolean value describing whether the hair is visible in the image.

        :return: The invisible of this Hair.
        :rtype: bool
        """
        return self._invisible

    @invisible.setter
    def invisible(self, invisible):
        """Sets the invisible of this Hair.

        A boolean value describing whether the hair is visible in the image.

        :param invisible: The invisible of this Hair.
        :type invisible: bool
        """

        self._invisible = invisible
