# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Accessory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, type: str=None):
        """Accessory - a model defined in OpenAPI

        :param confidence: The confidence of this Accessory.
        :param type: The type of this Accessory.
        """
        self.openapi_types = {
            'confidence': float,
            'type': str
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'type': 'type'
        }

        self._confidence = confidence
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Accessory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Accessory of this Accessory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this Accessory.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The confidence of this Accessory.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Accessory.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param confidence: The confidence of this Accessory.
        :type confidence: float
        """
        if confidence is not None and confidence > 1:
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")
        if confidence is not None and confidence < 0:
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")

        self._confidence = confidence

    @property
    def type(self):
        """Gets the type of this Accessory.

        Type of an accessory

        :return: The type of this Accessory.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Accessory.

        Type of an accessory

        :param type: The type of this Accessory.
        :type type: str
        """
        allowed_values = ["headWear", "glasses", "mask"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
