# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accessory import Accessory
from openapi_server.models.blur import Blur
from openapi_server.models.emotion import Emotion
from openapi_server.models.exposure import Exposure
from openapi_server.models.facial_hair import FacialHair
from openapi_server.models.hair import Hair
from openapi_server.models.head_pose import HeadPose
from openapi_server.models.makeup import Makeup
from openapi_server.models.noise import Noise
from openapi_server.models.occlusion import Occlusion
from openapi_server import util


class FaceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accessories: List[Accessory]=None, age: float=None, blur: Blur=None, emotion: Emotion=None, exposure: Exposure=None, facial_hair: FacialHair=None, gender: str=None, glasses: str=None, hair: Hair=None, head_pose: HeadPose=None, makeup: Makeup=None, noise: Noise=None, occlusion: Occlusion=None, smile: float=None):
        """FaceAttributes - a model defined in OpenAPI

        :param accessories: The accessories of this FaceAttributes.
        :param age: The age of this FaceAttributes.
        :param blur: The blur of this FaceAttributes.
        :param emotion: The emotion of this FaceAttributes.
        :param exposure: The exposure of this FaceAttributes.
        :param facial_hair: The facial_hair of this FaceAttributes.
        :param gender: The gender of this FaceAttributes.
        :param glasses: The glasses of this FaceAttributes.
        :param hair: The hair of this FaceAttributes.
        :param head_pose: The head_pose of this FaceAttributes.
        :param makeup: The makeup of this FaceAttributes.
        :param noise: The noise of this FaceAttributes.
        :param occlusion: The occlusion of this FaceAttributes.
        :param smile: The smile of this FaceAttributes.
        """
        self.openapi_types = {
            'accessories': List[Accessory],
            'age': float,
            'blur': Blur,
            'emotion': Emotion,
            'exposure': Exposure,
            'facial_hair': FacialHair,
            'gender': str,
            'glasses': str,
            'hair': Hair,
            'head_pose': HeadPose,
            'makeup': Makeup,
            'noise': Noise,
            'occlusion': Occlusion,
            'smile': float
        }

        self.attribute_map = {
            'accessories': 'accessories',
            'age': 'age',
            'blur': 'blur',
            'emotion': 'emotion',
            'exposure': 'exposure',
            'facial_hair': 'facialHair',
            'gender': 'gender',
            'glasses': 'glasses',
            'hair': 'hair',
            'head_pose': 'headPose',
            'makeup': 'makeup',
            'noise': 'noise',
            'occlusion': 'occlusion',
            'smile': 'smile'
        }

        self._accessories = accessories
        self._age = age
        self._blur = blur
        self._emotion = emotion
        self._exposure = exposure
        self._facial_hair = facial_hair
        self._gender = gender
        self._glasses = glasses
        self._hair = hair
        self._head_pose = head_pose
        self._makeup = makeup
        self._noise = noise
        self._occlusion = occlusion
        self._smile = smile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FaceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FaceAttributes of this FaceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessories(self):
        """Gets the accessories of this FaceAttributes.

        Properties describing any accessories on a given face.

        :return: The accessories of this FaceAttributes.
        :rtype: List[Accessory]
        """
        return self._accessories

    @accessories.setter
    def accessories(self, accessories):
        """Sets the accessories of this FaceAttributes.

        Properties describing any accessories on a given face.

        :param accessories: The accessories of this FaceAttributes.
        :type accessories: List[Accessory]
        """

        self._accessories = accessories

    @property
    def age(self):
        """Gets the age of this FaceAttributes.

        Age in years

        :return: The age of this FaceAttributes.
        :rtype: float
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this FaceAttributes.

        Age in years

        :param age: The age of this FaceAttributes.
        :type age: float
        """

        self._age = age

    @property
    def blur(self):
        """Gets the blur of this FaceAttributes.


        :return: The blur of this FaceAttributes.
        :rtype: Blur
        """
        return self._blur

    @blur.setter
    def blur(self, blur):
        """Sets the blur of this FaceAttributes.


        :param blur: The blur of this FaceAttributes.
        :type blur: Blur
        """

        self._blur = blur

    @property
    def emotion(self):
        """Gets the emotion of this FaceAttributes.


        :return: The emotion of this FaceAttributes.
        :rtype: Emotion
        """
        return self._emotion

    @emotion.setter
    def emotion(self, emotion):
        """Sets the emotion of this FaceAttributes.


        :param emotion: The emotion of this FaceAttributes.
        :type emotion: Emotion
        """

        self._emotion = emotion

    @property
    def exposure(self):
        """Gets the exposure of this FaceAttributes.


        :return: The exposure of this FaceAttributes.
        :rtype: Exposure
        """
        return self._exposure

    @exposure.setter
    def exposure(self, exposure):
        """Sets the exposure of this FaceAttributes.


        :param exposure: The exposure of this FaceAttributes.
        :type exposure: Exposure
        """

        self._exposure = exposure

    @property
    def facial_hair(self):
        """Gets the facial_hair of this FaceAttributes.


        :return: The facial_hair of this FaceAttributes.
        :rtype: FacialHair
        """
        return self._facial_hair

    @facial_hair.setter
    def facial_hair(self, facial_hair):
        """Sets the facial_hair of this FaceAttributes.


        :param facial_hair: The facial_hair of this FaceAttributes.
        :type facial_hair: FacialHair
        """

        self._facial_hair = facial_hair

    @property
    def gender(self):
        """Gets the gender of this FaceAttributes.

        Possible gender of the face.

        :return: The gender of this FaceAttributes.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this FaceAttributes.

        Possible gender of the face.

        :param gender: The gender of this FaceAttributes.
        :type gender: str
        """
        allowed_values = ["male", "female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def glasses(self):
        """Gets the glasses of this FaceAttributes.

        Glasses type if any of the face.

        :return: The glasses of this FaceAttributes.
        :rtype: str
        """
        return self._glasses

    @glasses.setter
    def glasses(self, glasses):
        """Sets the glasses of this FaceAttributes.

        Glasses type if any of the face.

        :param glasses: The glasses of this FaceAttributes.
        :type glasses: str
        """
        allowed_values = ["noGlasses", "readingGlasses", "sunglasses", "swimmingGoggles"]  # noqa: E501
        if glasses not in allowed_values:
            raise ValueError(
                "Invalid value for `glasses` ({0}), must be one of {1}"
                .format(glasses, allowed_values)
            )

        self._glasses = glasses

    @property
    def hair(self):
        """Gets the hair of this FaceAttributes.


        :return: The hair of this FaceAttributes.
        :rtype: Hair
        """
        return self._hair

    @hair.setter
    def hair(self, hair):
        """Sets the hair of this FaceAttributes.


        :param hair: The hair of this FaceAttributes.
        :type hair: Hair
        """

        self._hair = hair

    @property
    def head_pose(self):
        """Gets the head_pose of this FaceAttributes.


        :return: The head_pose of this FaceAttributes.
        :rtype: HeadPose
        """
        return self._head_pose

    @head_pose.setter
    def head_pose(self, head_pose):
        """Sets the head_pose of this FaceAttributes.


        :param head_pose: The head_pose of this FaceAttributes.
        :type head_pose: HeadPose
        """

        self._head_pose = head_pose

    @property
    def makeup(self):
        """Gets the makeup of this FaceAttributes.


        :return: The makeup of this FaceAttributes.
        :rtype: Makeup
        """
        return self._makeup

    @makeup.setter
    def makeup(self, makeup):
        """Sets the makeup of this FaceAttributes.


        :param makeup: The makeup of this FaceAttributes.
        :type makeup: Makeup
        """

        self._makeup = makeup

    @property
    def noise(self):
        """Gets the noise of this FaceAttributes.


        :return: The noise of this FaceAttributes.
        :rtype: Noise
        """
        return self._noise

    @noise.setter
    def noise(self, noise):
        """Sets the noise of this FaceAttributes.


        :param noise: The noise of this FaceAttributes.
        :type noise: Noise
        """

        self._noise = noise

    @property
    def occlusion(self):
        """Gets the occlusion of this FaceAttributes.


        :return: The occlusion of this FaceAttributes.
        :rtype: Occlusion
        """
        return self._occlusion

    @occlusion.setter
    def occlusion(self, occlusion):
        """Sets the occlusion of this FaceAttributes.


        :param occlusion: The occlusion of this FaceAttributes.
        :type occlusion: Occlusion
        """

        self._occlusion = occlusion

    @property
    def smile(self):
        """Gets the smile of this FaceAttributes.

        A number ranging from 0 to 1 indicating the intensity level associated with a property.

        :return: The smile of this FaceAttributes.
        :rtype: float
        """
        return self._smile

    @smile.setter
    def smile(self, smile):
        """Sets the smile of this FaceAttributes.

        A number ranging from 0 to 1 indicating the intensity level associated with a property.

        :param smile: The smile of this FaceAttributes.
        :type smile: float
        """
        if smile is not None and smile > 1:
            raise ValueError("Invalid value for `smile`, must be a value less than or equal to `1`")
        if smile is not None and smile < 0:
            raise ValueError("Invalid value for `smile`, must be a value greater than or equal to `0`")

        self._smile = smile
