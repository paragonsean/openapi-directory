# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FacialHair(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beard: float=None, moustache: float=None, sideburns: float=None):
        """FacialHair - a model defined in OpenAPI

        :param beard: The beard of this FacialHair.
        :param moustache: The moustache of this FacialHair.
        :param sideburns: The sideburns of this FacialHair.
        """
        self.openapi_types = {
            'beard': float,
            'moustache': float,
            'sideburns': float
        }

        self.attribute_map = {
            'beard': 'beard',
            'moustache': 'moustache',
            'sideburns': 'sideburns'
        }

        self._beard = beard
        self._moustache = moustache
        self._sideburns = sideburns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacialHair':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacialHair of this FacialHair.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beard(self):
        """Gets the beard of this FacialHair.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The beard of this FacialHair.
        :rtype: float
        """
        return self._beard

    @beard.setter
    def beard(self, beard):
        """Sets the beard of this FacialHair.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param beard: The beard of this FacialHair.
        :type beard: float
        """
        if beard is not None and beard > 1:
            raise ValueError("Invalid value for `beard`, must be a value less than or equal to `1`")
        if beard is not None and beard < 0:
            raise ValueError("Invalid value for `beard`, must be a value greater than or equal to `0`")

        self._beard = beard

    @property
    def moustache(self):
        """Gets the moustache of this FacialHair.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The moustache of this FacialHair.
        :rtype: float
        """
        return self._moustache

    @moustache.setter
    def moustache(self, moustache):
        """Sets the moustache of this FacialHair.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param moustache: The moustache of this FacialHair.
        :type moustache: float
        """
        if moustache is not None and moustache > 1:
            raise ValueError("Invalid value for `moustache`, must be a value less than or equal to `1`")
        if moustache is not None and moustache < 0:
            raise ValueError("Invalid value for `moustache`, must be a value greater than or equal to `0`")

        self._moustache = moustache

    @property
    def sideburns(self):
        """Gets the sideburns of this FacialHair.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The sideburns of this FacialHair.
        :rtype: float
        """
        return self._sideburns

    @sideburns.setter
    def sideburns(self, sideburns):
        """Sets the sideburns of this FacialHair.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param sideburns: The sideburns of this FacialHair.
        :type sideburns: float
        """
        if sideburns is not None and sideburns > 1:
            raise ValueError("Invalid value for `sideburns`, must be a value less than or equal to `1`")
        if sideburns is not None and sideburns < 0:
            raise ValueError("Invalid value for `sideburns`, must be a value greater than or equal to `0`")

        self._sideburns = sideburns
