# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class IdentifyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence_threshold: float=None, face_ids: List[str]=None, large_person_group_id: str=None, max_num_of_candidates_returned: int=None, person_group_id: str=None):
        """IdentifyRequest - a model defined in OpenAPI

        :param confidence_threshold: The confidence_threshold of this IdentifyRequest.
        :param face_ids: The face_ids of this IdentifyRequest.
        :param large_person_group_id: The large_person_group_id of this IdentifyRequest.
        :param max_num_of_candidates_returned: The max_num_of_candidates_returned of this IdentifyRequest.
        :param person_group_id: The person_group_id of this IdentifyRequest.
        """
        self.openapi_types = {
            'confidence_threshold': float,
            'face_ids': List[str],
            'large_person_group_id': str,
            'max_num_of_candidates_returned': int,
            'person_group_id': str
        }

        self.attribute_map = {
            'confidence_threshold': 'confidenceThreshold',
            'face_ids': 'faceIds',
            'large_person_group_id': 'largePersonGroupId',
            'max_num_of_candidates_returned': 'maxNumOfCandidatesReturned',
            'person_group_id': 'personGroupId'
        }

        self._confidence_threshold = confidence_threshold
        self._face_ids = face_ids
        self._large_person_group_id = large_person_group_id
        self._max_num_of_candidates_returned = max_num_of_candidates_returned
        self._person_group_id = person_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentifyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentifyRequest of this IdentifyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence_threshold(self):
        """Gets the confidence_threshold of this IdentifyRequest.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The confidence_threshold of this IdentifyRequest.
        :rtype: float
        """
        return self._confidence_threshold

    @confidence_threshold.setter
    def confidence_threshold(self, confidence_threshold):
        """Sets the confidence_threshold of this IdentifyRequest.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param confidence_threshold: The confidence_threshold of this IdentifyRequest.
        :type confidence_threshold: float
        """
        if confidence_threshold is not None and confidence_threshold > 1:
            raise ValueError("Invalid value for `confidence_threshold`, must be a value less than or equal to `1`")
        if confidence_threshold is not None and confidence_threshold < 0:
            raise ValueError("Invalid value for `confidence_threshold`, must be a value greater than or equal to `0`")

        self._confidence_threshold = confidence_threshold

    @property
    def face_ids(self):
        """Gets the face_ids of this IdentifyRequest.

        Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10].

        :return: The face_ids of this IdentifyRequest.
        :rtype: List[str]
        """
        return self._face_ids

    @face_ids.setter
    def face_ids(self, face_ids):
        """Sets the face_ids of this IdentifyRequest.

        Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10].

        :param face_ids: The face_ids of this IdentifyRequest.
        :type face_ids: List[str]
        """
        if face_ids is None:
            raise ValueError("Invalid value for `face_ids`, must not be `None`")
        if face_ids is not None and len(face_ids) > 10:
            raise ValueError("Invalid value for `face_ids`, number of items must be less than or equal to `10`")

        self._face_ids = face_ids

    @property
    def large_person_group_id(self):
        """Gets the large_person_group_id of this IdentifyRequest.

        LargePersonGroupId of the target large person group, created by LargePersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.

        :return: The large_person_group_id of this IdentifyRequest.
        :rtype: str
        """
        return self._large_person_group_id

    @large_person_group_id.setter
    def large_person_group_id(self, large_person_group_id):
        """Sets the large_person_group_id of this IdentifyRequest.

        LargePersonGroupId of the target large person group, created by LargePersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.

        :param large_person_group_id: The large_person_group_id of this IdentifyRequest.
        :type large_person_group_id: str
        """
        if large_person_group_id is not None and len(large_person_group_id) > 64:
            raise ValueError("Invalid value for `large_person_group_id`, length must be less than or equal to `64`")
        if large_person_group_id is not None and not re.search(r'^[a-z0-9-_]+$', large_person_group_id):
            raise ValueError("Invalid value for `large_person_group_id`, must be a follow pattern or equal to `/^[a-z0-9-_]+$/`")

        self._large_person_group_id = large_person_group_id

    @property
    def max_num_of_candidates_returned(self):
        """Gets the max_num_of_candidates_returned of this IdentifyRequest.

        The range of maxNumOfCandidatesReturned is between 1 and 5 (default is 1).

        :return: The max_num_of_candidates_returned of this IdentifyRequest.
        :rtype: int
        """
        return self._max_num_of_candidates_returned

    @max_num_of_candidates_returned.setter
    def max_num_of_candidates_returned(self, max_num_of_candidates_returned):
        """Sets the max_num_of_candidates_returned of this IdentifyRequest.

        The range of maxNumOfCandidatesReturned is between 1 and 5 (default is 1).

        :param max_num_of_candidates_returned: The max_num_of_candidates_returned of this IdentifyRequest.
        :type max_num_of_candidates_returned: int
        """
        if max_num_of_candidates_returned is not None and max_num_of_candidates_returned > 5:
            raise ValueError("Invalid value for `max_num_of_candidates_returned`, must be a value less than or equal to `5`")
        if max_num_of_candidates_returned is not None and max_num_of_candidates_returned < 1:
            raise ValueError("Invalid value for `max_num_of_candidates_returned`, must be a value greater than or equal to `1`")

        self._max_num_of_candidates_returned = max_num_of_candidates_returned

    @property
    def person_group_id(self):
        """Gets the person_group_id of this IdentifyRequest.

        PersonGroupId of the target person group, created by PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.

        :return: The person_group_id of this IdentifyRequest.
        :rtype: str
        """
        return self._person_group_id

    @person_group_id.setter
    def person_group_id(self, person_group_id):
        """Sets the person_group_id of this IdentifyRequest.

        PersonGroupId of the target person group, created by PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.

        :param person_group_id: The person_group_id of this IdentifyRequest.
        :type person_group_id: str
        """
        if person_group_id is not None and len(person_group_id) > 64:
            raise ValueError("Invalid value for `person_group_id`, length must be less than or equal to `64`")
        if person_group_id is not None and not re.search(r'^[a-z0-9-_]+$', person_group_id):
            raise ValueError("Invalid value for `person_group_id`, must be a follow pattern or equal to `/^[a-z0-9-_]+$/`")

        self._person_group_id = person_group_id
