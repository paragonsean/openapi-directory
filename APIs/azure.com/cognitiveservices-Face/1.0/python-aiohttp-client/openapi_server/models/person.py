# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, persisted_face_ids: List[str]=None, person_id: str=None, name: str=None, user_data: str=None):
        """Person - a model defined in OpenAPI

        :param persisted_face_ids: The persisted_face_ids of this Person.
        :param person_id: The person_id of this Person.
        :param name: The name of this Person.
        :param user_data: The user_data of this Person.
        """
        self.openapi_types = {
            'persisted_face_ids': List[str],
            'person_id': str,
            'name': str,
            'user_data': str
        }

        self.attribute_map = {
            'persisted_face_ids': 'persistedFaceIds',
            'person_id': 'personId',
            'name': 'name',
            'user_data': 'userData'
        }

        self._persisted_face_ids = persisted_face_ids
        self._person_id = person_id
        self._name = name
        self._user_data = user_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person of this Person.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def persisted_face_ids(self):
        """Gets the persisted_face_ids of this Person.

        PersistedFaceIds of registered faces in the person. These persistedFaceIds are returned from Person - Add a Person Face, and will not expire.

        :return: The persisted_face_ids of this Person.
        :rtype: List[str]
        """
        return self._persisted_face_ids

    @persisted_face_ids.setter
    def persisted_face_ids(self, persisted_face_ids):
        """Sets the persisted_face_ids of this Person.

        PersistedFaceIds of registered faces in the person. These persistedFaceIds are returned from Person - Add a Person Face, and will not expire.

        :param persisted_face_ids: The persisted_face_ids of this Person.
        :type persisted_face_ids: List[str]
        """

        self._persisted_face_ids = persisted_face_ids

    @property
    def person_id(self):
        """Gets the person_id of this Person.

        PersonId of the target face list.

        :return: The person_id of this Person.
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this Person.

        PersonId of the target face list.

        :param person_id: The person_id of this Person.
        :type person_id: str
        """
        if person_id is None:
            raise ValueError("Invalid value for `person_id`, must not be `None`")

        self._person_id = person_id

    @property
    def name(self):
        """Gets the name of this Person.

        User defined name, maximum length is 128.

        :return: The name of this Person.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Person.

        User defined name, maximum length is 128.

        :param name: The name of this Person.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")

        self._name = name

    @property
    def user_data(self):
        """Gets the user_data of this Person.

        User specified data. Length should not exceed 16KB.

        :return: The user_data of this Person.
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this Person.

        User specified data. Length should not exceed 16KB.

        :param user_data: The user_data of this Person.
        :type user_data: str
        """
        if user_data is not None and len(user_data) > 16384:
            raise ValueError("Invalid value for `user_data`, length must be less than or equal to `16384`")

        self._user_data = user_data
