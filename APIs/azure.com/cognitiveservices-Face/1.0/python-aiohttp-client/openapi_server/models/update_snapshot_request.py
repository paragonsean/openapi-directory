# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSnapshotRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_scope: List[str]=None, user_data: str=None):
        """UpdateSnapshotRequest - a model defined in OpenAPI

        :param apply_scope: The apply_scope of this UpdateSnapshotRequest.
        :param user_data: The user_data of this UpdateSnapshotRequest.
        """
        self.openapi_types = {
            'apply_scope': List[str],
            'user_data': str
        }

        self.attribute_map = {
            'apply_scope': 'applyScope',
            'user_data': 'userData'
        }

        self._apply_scope = apply_scope
        self._user_data = user_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSnapshotRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSnapshotRequest of this UpdateSnapshotRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_scope(self):
        """Gets the apply_scope of this UpdateSnapshotRequest.

        Array of the target Face subscription ids for the snapshot, specified by the user who created the snapshot when calling Snapshot - Take. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.

        :return: The apply_scope of this UpdateSnapshotRequest.
        :rtype: List[str]
        """
        return self._apply_scope

    @apply_scope.setter
    def apply_scope(self, apply_scope):
        """Sets the apply_scope of this UpdateSnapshotRequest.

        Array of the target Face subscription ids for the snapshot, specified by the user who created the snapshot when calling Snapshot - Take. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.

        :param apply_scope: The apply_scope of this UpdateSnapshotRequest.
        :type apply_scope: List[str]
        """

        self._apply_scope = apply_scope

    @property
    def user_data(self):
        """Gets the user_data of this UpdateSnapshotRequest.

        User specified data about the snapshot for any purpose. Length should not exceed 16KB.

        :return: The user_data of this UpdateSnapshotRequest.
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this UpdateSnapshotRequest.

        User specified data about the snapshot for any purpose. Length should not exceed 16KB.

        :param user_data: The user_data of this UpdateSnapshotRequest.
        :type user_data: str
        """
        if user_data is not None and len(user_data) > 16384:
            raise ValueError("Invalid value for `user_data`, length must be less than or equal to `16384`")

        self._user_data = user_data
