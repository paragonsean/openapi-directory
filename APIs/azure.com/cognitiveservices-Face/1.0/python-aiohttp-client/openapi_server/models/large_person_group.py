# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recognition_model import RecognitionModel
import re
from openapi_server import util


class LargePersonGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, large_person_group_id: str=None, recognition_model: RecognitionModel=RecognitionModel.ENUM_01, name: str=None, user_data: str=None):
        """LargePersonGroup - a model defined in OpenAPI

        :param large_person_group_id: The large_person_group_id of this LargePersonGroup.
        :param recognition_model: The recognition_model of this LargePersonGroup.
        :param name: The name of this LargePersonGroup.
        :param user_data: The user_data of this LargePersonGroup.
        """
        self.openapi_types = {
            'large_person_group_id': str,
            'recognition_model': RecognitionModel,
            'name': str,
            'user_data': str
        }

        self.attribute_map = {
            'large_person_group_id': 'largePersonGroupId',
            'recognition_model': 'recognitionModel',
            'name': 'name',
            'user_data': 'userData'
        }

        self._large_person_group_id = large_person_group_id
        self._recognition_model = recognition_model
        self._name = name
        self._user_data = user_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LargePersonGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LargePersonGroup of this LargePersonGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def large_person_group_id(self):
        """Gets the large_person_group_id of this LargePersonGroup.

        LargePersonGroupId of the target large person groups

        :return: The large_person_group_id of this LargePersonGroup.
        :rtype: str
        """
        return self._large_person_group_id

    @large_person_group_id.setter
    def large_person_group_id(self, large_person_group_id):
        """Sets the large_person_group_id of this LargePersonGroup.

        LargePersonGroupId of the target large person groups

        :param large_person_group_id: The large_person_group_id of this LargePersonGroup.
        :type large_person_group_id: str
        """
        if large_person_group_id is None:
            raise ValueError("Invalid value for `large_person_group_id`, must not be `None`")
        if large_person_group_id is not None and len(large_person_group_id) > 64:
            raise ValueError("Invalid value for `large_person_group_id`, length must be less than or equal to `64`")
        if large_person_group_id is not None and not re.search(r'^[a-z0-9-_]+$', large_person_group_id):
            raise ValueError("Invalid value for `large_person_group_id`, must be a follow pattern or equal to `/^[a-z0-9-_]+$/`")

        self._large_person_group_id = large_person_group_id

    @property
    def recognition_model(self):
        """Gets the recognition_model of this LargePersonGroup.


        :return: The recognition_model of this LargePersonGroup.
        :rtype: RecognitionModel
        """
        return self._recognition_model

    @recognition_model.setter
    def recognition_model(self, recognition_model):
        """Sets the recognition_model of this LargePersonGroup.


        :param recognition_model: The recognition_model of this LargePersonGroup.
        :type recognition_model: RecognitionModel
        """

        self._recognition_model = recognition_model

    @property
    def name(self):
        """Gets the name of this LargePersonGroup.

        User defined name, maximum length is 128.

        :return: The name of this LargePersonGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LargePersonGroup.

        User defined name, maximum length is 128.

        :param name: The name of this LargePersonGroup.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")

        self._name = name

    @property
    def user_data(self):
        """Gets the user_data of this LargePersonGroup.

        User specified data. Length should not exceed 16KB.

        :return: The user_data of this LargePersonGroup.
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this LargePersonGroup.

        User specified data. Length should not exceed 16KB.

        :param user_data: The user_data of this LargePersonGroup.
        :type user_data: str
        """
        if user_data is not None and len(user_data) > 16384:
            raise ValueError("Invalid value for `user_data`, length must be less than or equal to `16384`")

        self._user_data = user_data
