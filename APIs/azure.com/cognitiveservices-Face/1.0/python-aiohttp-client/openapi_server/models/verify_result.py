# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VerifyResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, is_identical: bool=None):
        """VerifyResult - a model defined in OpenAPI

        :param confidence: The confidence of this VerifyResult.
        :param is_identical: The is_identical of this VerifyResult.
        """
        self.openapi_types = {
            'confidence': float,
            'is_identical': bool
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'is_identical': 'isIdentical'
        }

        self._confidence = confidence
        self._is_identical = is_identical

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyResult of this VerifyResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this VerifyResult.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The confidence of this VerifyResult.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this VerifyResult.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param confidence: The confidence of this VerifyResult.
        :type confidence: float
        """
        if confidence is None:
            raise ValueError("Invalid value for `confidence`, must not be `None`")
        if confidence is not None and confidence > 1:
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")
        if confidence is not None and confidence < 0:
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")

        self._confidence = confidence

    @property
    def is_identical(self):
        """Gets the is_identical of this VerifyResult.

        True if the two faces belong to the same person or the face belongs to the person, otherwise false.

        :return: The is_identical of this VerifyResult.
        :rtype: bool
        """
        return self._is_identical

    @is_identical.setter
    def is_identical(self, is_identical):
        """Sets the is_identical of this VerifyResult.

        True if the two faces belong to the same person or the face belongs to the person, otherwise false.

        :param is_identical: The is_identical of this VerifyResult.
        :type is_identical: bool
        """
        if is_identical is None:
            raise ValueError("Invalid value for `is_identical`, must not be `None`")

        self._is_identical = is_identical
