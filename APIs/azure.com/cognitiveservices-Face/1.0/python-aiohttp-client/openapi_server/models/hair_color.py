# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HairColor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, confidence: float=None):
        """HairColor - a model defined in OpenAPI

        :param color: The color of this HairColor.
        :param confidence: The confidence of this HairColor.
        """
        self.openapi_types = {
            'color': str,
            'confidence': float
        }

        self.attribute_map = {
            'color': 'color',
            'confidence': 'confidence'
        }

        self._color = color
        self._confidence = confidence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HairColor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HairColor of this HairColor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this HairColor.

        Name of the hair color.

        :return: The color of this HairColor.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this HairColor.

        Name of the hair color.

        :param color: The color of this HairColor.
        :type color: str
        """
        allowed_values = ["unknown", "white", "gray", "blond", "brown", "red", "black", "other"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def confidence(self):
        """Gets the confidence of this HairColor.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The confidence of this HairColor.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this HairColor.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param confidence: The confidence of this HairColor.
        :type confidence: float
        """
        if confidence is not None and confidence > 1:
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")
        if confidence is not None and confidence < 0:
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")

        self._confidence = confidence
