# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VerifyFaceToFaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, face_id1: str=None, face_id2: str=None):
        """VerifyFaceToFaceRequest - a model defined in OpenAPI

        :param face_id1: The face_id1 of this VerifyFaceToFaceRequest.
        :param face_id2: The face_id2 of this VerifyFaceToFaceRequest.
        """
        self.openapi_types = {
            'face_id1': str,
            'face_id2': str
        }

        self.attribute_map = {
            'face_id1': 'faceId1',
            'face_id2': 'faceId2'
        }

        self._face_id1 = face_id1
        self._face_id2 = face_id2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyFaceToFaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyFaceToFaceRequest of this VerifyFaceToFaceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def face_id1(self):
        """Gets the face_id1 of this VerifyFaceToFaceRequest.

        FaceId of the first face, comes from Face - Detect

        :return: The face_id1 of this VerifyFaceToFaceRequest.
        :rtype: str
        """
        return self._face_id1

    @face_id1.setter
    def face_id1(self, face_id1):
        """Sets the face_id1 of this VerifyFaceToFaceRequest.

        FaceId of the first face, comes from Face - Detect

        :param face_id1: The face_id1 of this VerifyFaceToFaceRequest.
        :type face_id1: str
        """
        if face_id1 is None:
            raise ValueError("Invalid value for `face_id1`, must not be `None`")

        self._face_id1 = face_id1

    @property
    def face_id2(self):
        """Gets the face_id2 of this VerifyFaceToFaceRequest.

        FaceId of the second face, comes from Face - Detect

        :return: The face_id2 of this VerifyFaceToFaceRequest.
        :rtype: str
        """
        return self._face_id2

    @face_id2.setter
    def face_id2(self, face_id2):
        """Sets the face_id2 of this VerifyFaceToFaceRequest.

        FaceId of the second face, comes from Face - Detect

        :param face_id2: The face_id2 of this VerifyFaceToFaceRequest.
        :type face_id2: str
        """
        if face_id2 is None:
            raise ValueError("Invalid value for `face_id2`, must not be `None`")

        self._face_id2 = face_id2
