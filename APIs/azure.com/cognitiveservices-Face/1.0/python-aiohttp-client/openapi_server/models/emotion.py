# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Emotion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anger: float=None, contempt: float=None, disgust: float=None, fear: float=None, happiness: float=None, neutral: float=None, sadness: float=None, surprise: float=None):
        """Emotion - a model defined in OpenAPI

        :param anger: The anger of this Emotion.
        :param contempt: The contempt of this Emotion.
        :param disgust: The disgust of this Emotion.
        :param fear: The fear of this Emotion.
        :param happiness: The happiness of this Emotion.
        :param neutral: The neutral of this Emotion.
        :param sadness: The sadness of this Emotion.
        :param surprise: The surprise of this Emotion.
        """
        self.openapi_types = {
            'anger': float,
            'contempt': float,
            'disgust': float,
            'fear': float,
            'happiness': float,
            'neutral': float,
            'sadness': float,
            'surprise': float
        }

        self.attribute_map = {
            'anger': 'anger',
            'contempt': 'contempt',
            'disgust': 'disgust',
            'fear': 'fear',
            'happiness': 'happiness',
            'neutral': 'neutral',
            'sadness': 'sadness',
            'surprise': 'surprise'
        }

        self._anger = anger
        self._contempt = contempt
        self._disgust = disgust
        self._fear = fear
        self._happiness = happiness
        self._neutral = neutral
        self._sadness = sadness
        self._surprise = surprise

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Emotion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Emotion of this Emotion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anger(self):
        """Gets the anger of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The anger of this Emotion.
        :rtype: float
        """
        return self._anger

    @anger.setter
    def anger(self, anger):
        """Sets the anger of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param anger: The anger of this Emotion.
        :type anger: float
        """
        if anger is not None and anger > 1:
            raise ValueError("Invalid value for `anger`, must be a value less than or equal to `1`")
        if anger is not None and anger < 0:
            raise ValueError("Invalid value for `anger`, must be a value greater than or equal to `0`")

        self._anger = anger

    @property
    def contempt(self):
        """Gets the contempt of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The contempt of this Emotion.
        :rtype: float
        """
        return self._contempt

    @contempt.setter
    def contempt(self, contempt):
        """Sets the contempt of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param contempt: The contempt of this Emotion.
        :type contempt: float
        """
        if contempt is not None and contempt > 1:
            raise ValueError("Invalid value for `contempt`, must be a value less than or equal to `1`")
        if contempt is not None and contempt < 0:
            raise ValueError("Invalid value for `contempt`, must be a value greater than or equal to `0`")

        self._contempt = contempt

    @property
    def disgust(self):
        """Gets the disgust of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The disgust of this Emotion.
        :rtype: float
        """
        return self._disgust

    @disgust.setter
    def disgust(self, disgust):
        """Sets the disgust of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param disgust: The disgust of this Emotion.
        :type disgust: float
        """
        if disgust is not None and disgust > 1:
            raise ValueError("Invalid value for `disgust`, must be a value less than or equal to `1`")
        if disgust is not None and disgust < 0:
            raise ValueError("Invalid value for `disgust`, must be a value greater than or equal to `0`")

        self._disgust = disgust

    @property
    def fear(self):
        """Gets the fear of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The fear of this Emotion.
        :rtype: float
        """
        return self._fear

    @fear.setter
    def fear(self, fear):
        """Sets the fear of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param fear: The fear of this Emotion.
        :type fear: float
        """
        if fear is not None and fear > 1:
            raise ValueError("Invalid value for `fear`, must be a value less than or equal to `1`")
        if fear is not None and fear < 0:
            raise ValueError("Invalid value for `fear`, must be a value greater than or equal to `0`")

        self._fear = fear

    @property
    def happiness(self):
        """Gets the happiness of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The happiness of this Emotion.
        :rtype: float
        """
        return self._happiness

    @happiness.setter
    def happiness(self, happiness):
        """Sets the happiness of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param happiness: The happiness of this Emotion.
        :type happiness: float
        """
        if happiness is not None and happiness > 1:
            raise ValueError("Invalid value for `happiness`, must be a value less than or equal to `1`")
        if happiness is not None and happiness < 0:
            raise ValueError("Invalid value for `happiness`, must be a value greater than or equal to `0`")

        self._happiness = happiness

    @property
    def neutral(self):
        """Gets the neutral of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The neutral of this Emotion.
        :rtype: float
        """
        return self._neutral

    @neutral.setter
    def neutral(self, neutral):
        """Sets the neutral of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param neutral: The neutral of this Emotion.
        :type neutral: float
        """
        if neutral is not None and neutral > 1:
            raise ValueError("Invalid value for `neutral`, must be a value less than or equal to `1`")
        if neutral is not None and neutral < 0:
            raise ValueError("Invalid value for `neutral`, must be a value greater than or equal to `0`")

        self._neutral = neutral

    @property
    def sadness(self):
        """Gets the sadness of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The sadness of this Emotion.
        :rtype: float
        """
        return self._sadness

    @sadness.setter
    def sadness(self, sadness):
        """Sets the sadness of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param sadness: The sadness of this Emotion.
        :type sadness: float
        """
        if sadness is not None and sadness > 1:
            raise ValueError("Invalid value for `sadness`, must be a value less than or equal to `1`")
        if sadness is not None and sadness < 0:
            raise ValueError("Invalid value for `sadness`, must be a value greater than or equal to `0`")

        self._sadness = sadness

    @property
    def surprise(self):
        """Gets the surprise of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The surprise of this Emotion.
        :rtype: float
        """
        return self._surprise

    @surprise.setter
    def surprise(self, surprise):
        """Sets the surprise of this Emotion.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param surprise: The surprise of this Emotion.
        :type surprise: float
        """
        if surprise is not None and surprise > 1:
            raise ValueError("Invalid value for `surprise`, must be a value less than or equal to `1`")
        if surprise is not None and surprise < 0:
            raise ValueError("Invalid value for `surprise`, must be a value greater than or equal to `0`")

        self._surprise = surprise
