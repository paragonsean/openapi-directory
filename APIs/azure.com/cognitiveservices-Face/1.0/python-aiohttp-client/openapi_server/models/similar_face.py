# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SimilarFace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, face_id: str=None, persisted_face_id: str=None):
        """SimilarFace - a model defined in OpenAPI

        :param confidence: The confidence of this SimilarFace.
        :param face_id: The face_id of this SimilarFace.
        :param persisted_face_id: The persisted_face_id of this SimilarFace.
        """
        self.openapi_types = {
            'confidence': float,
            'face_id': str,
            'persisted_face_id': str
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'face_id': 'faceId',
            'persisted_face_id': 'persistedFaceId'
        }

        self._confidence = confidence
        self._face_id = face_id
        self._persisted_face_id = persisted_face_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimilarFace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SimilarFace of this SimilarFace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this SimilarFace.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The confidence of this SimilarFace.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this SimilarFace.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param confidence: The confidence of this SimilarFace.
        :type confidence: float
        """
        if confidence is None:
            raise ValueError("Invalid value for `confidence`, must not be `None`")
        if confidence is not None and confidence > 1:
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")
        if confidence is not None and confidence < 0:
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")

        self._confidence = confidence

    @property
    def face_id(self):
        """Gets the face_id of this SimilarFace.

        FaceId of candidate face when find by faceIds. faceId is created by Face - Detect and will expire 24 hours after the detection call

        :return: The face_id of this SimilarFace.
        :rtype: str
        """
        return self._face_id

    @face_id.setter
    def face_id(self, face_id):
        """Sets the face_id of this SimilarFace.

        FaceId of candidate face when find by faceIds. faceId is created by Face - Detect and will expire 24 hours after the detection call

        :param face_id: The face_id of this SimilarFace.
        :type face_id: str
        """

        self._face_id = face_id

    @property
    def persisted_face_id(self):
        """Gets the persisted_face_id of this SimilarFace.

        PersistedFaceId of candidate face when find by faceListId. persistedFaceId in face list is persisted and will not expire. As showed in below response

        :return: The persisted_face_id of this SimilarFace.
        :rtype: str
        """
        return self._persisted_face_id

    @persisted_face_id.setter
    def persisted_face_id(self, persisted_face_id):
        """Sets the persisted_face_id of this SimilarFace.

        PersistedFaceId of candidate face when find by faceListId. persistedFaceId in face list is persisted and will not expire. As showed in below response

        :param persisted_face_id: The persisted_face_id of this SimilarFace.
        :type persisted_face_id: str
        """

        self._persisted_face_id = persisted_face_id
