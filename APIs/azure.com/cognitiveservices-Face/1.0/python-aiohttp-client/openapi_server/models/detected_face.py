# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.face_attributes import FaceAttributes
from openapi_server.models.face_landmarks import FaceLandmarks
from openapi_server.models.face_rectangle import FaceRectangle
from openapi_server.models.recognition_model import RecognitionModel
from openapi_server import util


class DetectedFace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, face_attributes: FaceAttributes=None, face_id: str=None, face_landmarks: FaceLandmarks=None, face_rectangle: FaceRectangle=None, recognition_model: RecognitionModel=RecognitionModel.ENUM_01):
        """DetectedFace - a model defined in OpenAPI

        :param face_attributes: The face_attributes of this DetectedFace.
        :param face_id: The face_id of this DetectedFace.
        :param face_landmarks: The face_landmarks of this DetectedFace.
        :param face_rectangle: The face_rectangle of this DetectedFace.
        :param recognition_model: The recognition_model of this DetectedFace.
        """
        self.openapi_types = {
            'face_attributes': FaceAttributes,
            'face_id': str,
            'face_landmarks': FaceLandmarks,
            'face_rectangle': FaceRectangle,
            'recognition_model': RecognitionModel
        }

        self.attribute_map = {
            'face_attributes': 'faceAttributes',
            'face_id': 'faceId',
            'face_landmarks': 'faceLandmarks',
            'face_rectangle': 'faceRectangle',
            'recognition_model': 'recognitionModel'
        }

        self._face_attributes = face_attributes
        self._face_id = face_id
        self._face_landmarks = face_landmarks
        self._face_rectangle = face_rectangle
        self._recognition_model = recognition_model

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectedFace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectedFace of this DetectedFace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def face_attributes(self):
        """Gets the face_attributes of this DetectedFace.


        :return: The face_attributes of this DetectedFace.
        :rtype: FaceAttributes
        """
        return self._face_attributes

    @face_attributes.setter
    def face_attributes(self, face_attributes):
        """Sets the face_attributes of this DetectedFace.


        :param face_attributes: The face_attributes of this DetectedFace.
        :type face_attributes: FaceAttributes
        """

        self._face_attributes = face_attributes

    @property
    def face_id(self):
        """Gets the face_id of this DetectedFace.


        :return: The face_id of this DetectedFace.
        :rtype: str
        """
        return self._face_id

    @face_id.setter
    def face_id(self, face_id):
        """Sets the face_id of this DetectedFace.


        :param face_id: The face_id of this DetectedFace.
        :type face_id: str
        """

        self._face_id = face_id

    @property
    def face_landmarks(self):
        """Gets the face_landmarks of this DetectedFace.


        :return: The face_landmarks of this DetectedFace.
        :rtype: FaceLandmarks
        """
        return self._face_landmarks

    @face_landmarks.setter
    def face_landmarks(self, face_landmarks):
        """Sets the face_landmarks of this DetectedFace.


        :param face_landmarks: The face_landmarks of this DetectedFace.
        :type face_landmarks: FaceLandmarks
        """

        self._face_landmarks = face_landmarks

    @property
    def face_rectangle(self):
        """Gets the face_rectangle of this DetectedFace.


        :return: The face_rectangle of this DetectedFace.
        :rtype: FaceRectangle
        """
        return self._face_rectangle

    @face_rectangle.setter
    def face_rectangle(self, face_rectangle):
        """Sets the face_rectangle of this DetectedFace.


        :param face_rectangle: The face_rectangle of this DetectedFace.
        :type face_rectangle: FaceRectangle
        """
        if face_rectangle is None:
            raise ValueError("Invalid value for `face_rectangle`, must not be `None`")

        self._face_rectangle = face_rectangle

    @property
    def recognition_model(self):
        """Gets the recognition_model of this DetectedFace.


        :return: The recognition_model of this DetectedFace.
        :rtype: RecognitionModel
        """
        return self._recognition_model

    @recognition_model.setter
    def recognition_model(self, recognition_model):
        """Sets the recognition_model of this DetectedFace.


        :param recognition_model: The recognition_model of this DetectedFace.
        :type recognition_model: RecognitionModel
        """

        self._recognition_model = recognition_model
