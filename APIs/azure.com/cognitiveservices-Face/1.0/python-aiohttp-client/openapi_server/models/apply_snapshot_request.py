# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ApplySnapshotRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mode: str='CreateNew', object_id: str=None):
        """ApplySnapshotRequest - a model defined in OpenAPI

        :param mode: The mode of this ApplySnapshotRequest.
        :param object_id: The object_id of this ApplySnapshotRequest.
        """
        self.openapi_types = {
            'mode': str,
            'object_id': str
        }

        self.attribute_map = {
            'mode': 'mode',
            'object_id': 'objectId'
        }

        self._mode = mode
        self._object_id = object_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplySnapshotRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplySnapshotRequest of this ApplySnapshotRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self):
        """Gets the mode of this ApplySnapshotRequest.

        Snapshot applying mode. Currently only CreateNew is supported, which means the apply operation will fail if target subscription already contains an object of same type and using the same objectId. Users can specify the \"objectId\" in request body to avoid such conflicts.

        :return: The mode of this ApplySnapshotRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ApplySnapshotRequest.

        Snapshot applying mode. Currently only CreateNew is supported, which means the apply operation will fail if target subscription already contains an object of same type and using the same objectId. Users can specify the \"objectId\" in request body to avoid such conflicts.

        :param mode: The mode of this ApplySnapshotRequest.
        :type mode: str
        """
        allowed_values = ["CreateNew"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def object_id(self):
        """Gets the object_id of this ApplySnapshotRequest.

        User specified target object id to be created from the snapshot.

        :return: The object_id of this ApplySnapshotRequest.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ApplySnapshotRequest.

        User specified target object id to be created from the snapshot.

        :param object_id: The object_id of this ApplySnapshotRequest.
        :type object_id: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")
        if object_id is not None and len(object_id) > 64:
            raise ValueError("Invalid value for `object_id`, length must be less than or equal to `64`")
        if object_id is not None and not re.search(r'^[a-z0-9-_]+$', object_id):
            raise ValueError("Invalid value for `object_id`, must be a follow pattern or equal to `/^[a-z0-9-_]+$/`")

        self._object_id = object_id
