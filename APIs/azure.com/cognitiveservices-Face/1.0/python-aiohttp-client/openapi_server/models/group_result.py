# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, groups: List[List[str]]=None, messy_group: List[str]=None):
        """GroupResult - a model defined in OpenAPI

        :param groups: The groups of this GroupResult.
        :param messy_group: The messy_group of this GroupResult.
        """
        self.openapi_types = {
            'groups': List[List[str]],
            'messy_group': List[str]
        }

        self.attribute_map = {
            'groups': 'groups',
            'messy_group': 'messyGroup'
        }

        self._groups = groups
        self._messy_group = messy_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupResult of this GroupResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def groups(self):
        """Gets the groups of this GroupResult.

        A partition of the original faces based on face similarity. Groups are ranked by number of faces

        :return: The groups of this GroupResult.
        :rtype: List[List[str]]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this GroupResult.

        A partition of the original faces based on face similarity. Groups are ranked by number of faces

        :param groups: The groups of this GroupResult.
        :type groups: List[List[str]]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups

    @property
    def messy_group(self):
        """Gets the messy_group of this GroupResult.

        Face ids array of faces that cannot find any similar faces from original faces.

        :return: The messy_group of this GroupResult.
        :rtype: List[str]
        """
        return self._messy_group

    @messy_group.setter
    def messy_group(self, messy_group):
        """Sets the messy_group of this GroupResult.

        Face ids array of faces that cannot find any similar faces from original faces.

        :param messy_group: The messy_group of this GroupResult.
        :type messy_group: List[str]
        """

        self._messy_group = messy_group
