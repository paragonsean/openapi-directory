# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, face_ids: List[str]=None):
        """GroupRequest - a model defined in OpenAPI

        :param face_ids: The face_ids of this GroupRequest.
        """
        self.openapi_types = {
            'face_ids': List[str]
        }

        self.attribute_map = {
            'face_ids': 'faceIds'
        }

        self._face_ids = face_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupRequest of this GroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def face_ids(self):
        """Gets the face_ids of this GroupRequest.

        Array of candidate faceId created by Face - Detect. The maximum is 1000 faces

        :return: The face_ids of this GroupRequest.
        :rtype: List[str]
        """
        return self._face_ids

    @face_ids.setter
    def face_ids(self, face_ids):
        """Sets the face_ids of this GroupRequest.

        Array of candidate faceId created by Face - Detect. The maximum is 1000 faces

        :param face_ids: The face_ids of this GroupRequest.
        :type face_ids: List[str]
        """
        if face_ids is None:
            raise ValueError("Invalid value for `face_ids`, must not be `None`")
        if face_ids is not None and len(face_ids) > 1000:
            raise ValueError("Invalid value for `face_ids`, number of items must be less than or equal to `1000`")

        self._face_ids = face_ids
