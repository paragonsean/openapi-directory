# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identify_candidate import IdentifyCandidate
from openapi_server import util


class IdentifyResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidates: List[IdentifyCandidate]=None, face_id: str=None):
        """IdentifyResult - a model defined in OpenAPI

        :param candidates: The candidates of this IdentifyResult.
        :param face_id: The face_id of this IdentifyResult.
        """
        self.openapi_types = {
            'candidates': List[IdentifyCandidate],
            'face_id': str
        }

        self.attribute_map = {
            'candidates': 'candidates',
            'face_id': 'faceId'
        }

        self._candidates = candidates
        self._face_id = face_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentifyResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentifyResult of this IdentifyResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidates(self):
        """Gets the candidates of this IdentifyResult.

        Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array.

        :return: The candidates of this IdentifyResult.
        :rtype: List[IdentifyCandidate]
        """
        return self._candidates

    @candidates.setter
    def candidates(self, candidates):
        """Sets the candidates of this IdentifyResult.

        Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array.

        :param candidates: The candidates of this IdentifyResult.
        :type candidates: List[IdentifyCandidate]
        """
        if candidates is None:
            raise ValueError("Invalid value for `candidates`, must not be `None`")

        self._candidates = candidates

    @property
    def face_id(self):
        """Gets the face_id of this IdentifyResult.

        FaceId of the query face

        :return: The face_id of this IdentifyResult.
        :rtype: str
        """
        return self._face_id

    @face_id.setter
    def face_id(self, face_id):
        """Sets the face_id of this IdentifyResult.

        FaceId of the query face

        :param face_id: The face_id of this IdentifyResult.
        :type face_id: str
        """
        if face_id is None:
            raise ValueError("Invalid value for `face_id`, must not be `None`")

        self._face_id = face_id
