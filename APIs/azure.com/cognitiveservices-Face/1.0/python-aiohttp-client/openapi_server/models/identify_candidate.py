# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdentifyCandidate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, person_id: str=None):
        """IdentifyCandidate - a model defined in OpenAPI

        :param confidence: The confidence of this IdentifyCandidate.
        :param person_id: The person_id of this IdentifyCandidate.
        """
        self.openapi_types = {
            'confidence': float,
            'person_id': str
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'person_id': 'personId'
        }

        self._confidence = confidence
        self._person_id = person_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentifyCandidate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentifyCandidate of this IdentifyCandidate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this IdentifyCandidate.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :return: The confidence of this IdentifyCandidate.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this IdentifyCandidate.

        A number ranging from 0 to 1 indicating a level of confidence associated with a property.

        :param confidence: The confidence of this IdentifyCandidate.
        :type confidence: float
        """
        if confidence is None:
            raise ValueError("Invalid value for `confidence`, must not be `None`")
        if confidence is not None and confidence > 1:
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")
        if confidence is not None and confidence < 0:
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")

        self._confidence = confidence

    @property
    def person_id(self):
        """Gets the person_id of this IdentifyCandidate.

        Id of candidate

        :return: The person_id of this IdentifyCandidate.
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this IdentifyCandidate.

        Id of candidate

        :param person_id: The person_id of this IdentifyCandidate.
        :type person_id: str
        """
        if person_id is None:
            raise ValueError("Invalid value for `person_id`, must not be `None`")

        self._person_id = person_id
