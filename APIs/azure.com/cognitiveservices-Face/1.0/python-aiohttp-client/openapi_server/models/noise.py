# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Noise(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, noise_level: str=None, value: float=None):
        """Noise - a model defined in OpenAPI

        :param noise_level: The noise_level of this Noise.
        :param value: The value of this Noise.
        """
        self.openapi_types = {
            'noise_level': str,
            'value': float
        }

        self.attribute_map = {
            'noise_level': 'noiseLevel',
            'value': 'value'
        }

        self._noise_level = noise_level
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Noise':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Noise of this Noise.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def noise_level(self):
        """Gets the noise_level of this Noise.

        An enum value indicating level of noise.

        :return: The noise_level of this Noise.
        :rtype: str
        """
        return self._noise_level

    @noise_level.setter
    def noise_level(self, noise_level):
        """Sets the noise_level of this Noise.

        An enum value indicating level of noise.

        :param noise_level: The noise_level of this Noise.
        :type noise_level: str
        """
        allowed_values = ["Low", "Medium", "High"]  # noqa: E501
        if noise_level not in allowed_values:
            raise ValueError(
                "Invalid value for `noise_level` ({0}), must be one of {1}"
                .format(noise_level, allowed_values)
            )

        self._noise_level = noise_level

    @property
    def value(self):
        """Gets the value of this Noise.

        A number ranging from 0 to 1 indicating the intensity level associated with a property.

        :return: The value of this Noise.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Noise.

        A number ranging from 0 to 1 indicating the intensity level associated with a property.

        :param value: The value of this Noise.
        :type value: float
        """
        if value is not None and value > 1:
            raise ValueError("Invalid value for `value`, must be a value less than or equal to `1`")
        if value is not None and value < 0:
            raise ValueError("Invalid value for `value`, must be a value greater than or equal to `0`")

        self._value = value
