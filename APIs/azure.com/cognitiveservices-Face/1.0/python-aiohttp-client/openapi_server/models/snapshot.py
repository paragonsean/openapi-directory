# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Snapshot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, apply_scope: List[str]=None, created_time: datetime=None, id: str=None, last_update_time: datetime=None, type: str=None, user_data: str=None):
        """Snapshot - a model defined in OpenAPI

        :param account: The account of this Snapshot.
        :param apply_scope: The apply_scope of this Snapshot.
        :param created_time: The created_time of this Snapshot.
        :param id: The id of this Snapshot.
        :param last_update_time: The last_update_time of this Snapshot.
        :param type: The type of this Snapshot.
        :param user_data: The user_data of this Snapshot.
        """
        self.openapi_types = {
            'account': str,
            'apply_scope': List[str],
            'created_time': datetime,
            'id': str,
            'last_update_time': datetime,
            'type': str,
            'user_data': str
        }

        self.attribute_map = {
            'account': 'account',
            'apply_scope': 'applyScope',
            'created_time': 'createdTime',
            'id': 'id',
            'last_update_time': 'lastUpdateTime',
            'type': 'type',
            'user_data': 'userData'
        }

        self._account = account
        self._apply_scope = apply_scope
        self._created_time = created_time
        self._id = id
        self._last_update_time = last_update_time
        self._type = type
        self._user_data = user_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Snapshot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Snapshot of this Snapshot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Snapshot.

        Azure Cognitive Service Face account id of the subscriber who created the snapshot by Snapshot - Take.

        :return: The account of this Snapshot.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Snapshot.

        Azure Cognitive Service Face account id of the subscriber who created the snapshot by Snapshot - Take.

        :param account: The account of this Snapshot.
        :type account: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")

        self._account = account

    @property
    def apply_scope(self):
        """Gets the apply_scope of this Snapshot.

        Array of the target Face subscription ids for the snapshot, specified by the user who created the snapshot when calling Snapshot - Take. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.

        :return: The apply_scope of this Snapshot.
        :rtype: List[str]
        """
        return self._apply_scope

    @apply_scope.setter
    def apply_scope(self, apply_scope):
        """Sets the apply_scope of this Snapshot.

        Array of the target Face subscription ids for the snapshot, specified by the user who created the snapshot when calling Snapshot - Take. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.

        :param apply_scope: The apply_scope of this Snapshot.
        :type apply_scope: List[str]
        """
        if apply_scope is None:
            raise ValueError("Invalid value for `apply_scope`, must not be `None`")

        self._apply_scope = apply_scope

    @property
    def created_time(self):
        """Gets the created_time of this Snapshot.

        A combined UTC date and time string that describes the created time of the snapshot. E.g. 2018-12-25T11:41:02.2331413Z.

        :return: The created_time of this Snapshot.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Snapshot.

        A combined UTC date and time string that describes the created time of the snapshot. E.g. 2018-12-25T11:41:02.2331413Z.

        :param created_time: The created_time of this Snapshot.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def id(self):
        """Gets the id of this Snapshot.

        Snapshot id.

        :return: The id of this Snapshot.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Snapshot.

        Snapshot id.

        :param id: The id of this Snapshot.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_update_time(self):
        """Gets the last_update_time of this Snapshot.

        A combined UTC date and time string that describes the last time when the snapshot was created or updated by Snapshot - Update. E.g. 2018-12-25T11:51:27.8705696Z.

        :return: The last_update_time of this Snapshot.
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this Snapshot.

        A combined UTC date and time string that describes the last time when the snapshot was created or updated by Snapshot - Update. E.g. 2018-12-25T11:51:27.8705696Z.

        :param last_update_time: The last_update_time of this Snapshot.
        :type last_update_time: datetime
        """
        if last_update_time is None:
            raise ValueError("Invalid value for `last_update_time`, must not be `None`")

        self._last_update_time = last_update_time

    @property
    def type(self):
        """Gets the type of this Snapshot.

        Type of the source object in the snapshot, specified by the subscriber who created the snapshot when calling Snapshot - Take. Currently FaceList, PersonGroup, LargeFaceList and LargePersonGroup are supported.

        :return: The type of this Snapshot.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Snapshot.

        Type of the source object in the snapshot, specified by the subscriber who created the snapshot when calling Snapshot - Take. Currently FaceList, PersonGroup, LargeFaceList and LargePersonGroup are supported.

        :param type: The type of this Snapshot.
        :type type: str
        """
        allowed_values = ["FaceList", "LargeFaceList", "LargePersonGroup", "PersonGroup"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_data(self):
        """Gets the user_data of this Snapshot.

        User specified data about the snapshot for any purpose. Length should not exceed 16KB.

        :return: The user_data of this Snapshot.
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this Snapshot.

        User specified data about the snapshot for any purpose. Length should not exceed 16KB.

        :param user_data: The user_data of this Snapshot.
        :type user_data: str
        """
        if user_data is not None and len(user_data) > 16384:
            raise ValueError("Invalid value for `user_data`, length must be less than or equal to `16384`")

        self._user_data = user_data
