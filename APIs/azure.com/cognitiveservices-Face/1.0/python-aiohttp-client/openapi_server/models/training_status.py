# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrainingStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date_time: datetime=None, last_action_date_time: datetime=None, last_successful_training_date_time: datetime=None, message: str=None, status: str=None):
        """TrainingStatus - a model defined in OpenAPI

        :param created_date_time: The created_date_time of this TrainingStatus.
        :param last_action_date_time: The last_action_date_time of this TrainingStatus.
        :param last_successful_training_date_time: The last_successful_training_date_time of this TrainingStatus.
        :param message: The message of this TrainingStatus.
        :param status: The status of this TrainingStatus.
        """
        self.openapi_types = {
            'created_date_time': datetime,
            'last_action_date_time': datetime,
            'last_successful_training_date_time': datetime,
            'message': str,
            'status': str
        }

        self.attribute_map = {
            'created_date_time': 'createdDateTime',
            'last_action_date_time': 'lastActionDateTime',
            'last_successful_training_date_time': 'lastSuccessfulTrainingDateTime',
            'message': 'message',
            'status': 'status'
        }

        self._created_date_time = created_date_time
        self._last_action_date_time = last_action_date_time
        self._last_successful_training_date_time = last_successful_training_date_time
        self._message = message
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainingStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrainingStatus of this TrainingStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date_time(self):
        """Gets the created_date_time of this TrainingStatus.

        A combined UTC date and time string that describes the created time of the person group, large person group or large face list.

        :return: The created_date_time of this TrainingStatus.
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this TrainingStatus.

        A combined UTC date and time string that describes the created time of the person group, large person group or large face list.

        :param created_date_time: The created_date_time of this TrainingStatus.
        :type created_date_time: datetime
        """
        if created_date_time is None:
            raise ValueError("Invalid value for `created_date_time`, must not be `None`")

        self._created_date_time = created_date_time

    @property
    def last_action_date_time(self):
        """Gets the last_action_date_time of this TrainingStatus.

        A combined UTC date and time string that describes the last modify time of the person group, large person group or large face list, could be null value when the group is not successfully trained.

        :return: The last_action_date_time of this TrainingStatus.
        :rtype: datetime
        """
        return self._last_action_date_time

    @last_action_date_time.setter
    def last_action_date_time(self, last_action_date_time):
        """Sets the last_action_date_time of this TrainingStatus.

        A combined UTC date and time string that describes the last modify time of the person group, large person group or large face list, could be null value when the group is not successfully trained.

        :param last_action_date_time: The last_action_date_time of this TrainingStatus.
        :type last_action_date_time: datetime
        """

        self._last_action_date_time = last_action_date_time

    @property
    def last_successful_training_date_time(self):
        """Gets the last_successful_training_date_time of this TrainingStatus.

        A combined UTC date and time string that describes the last successful training time of the person group, large person group or large face list.

        :return: The last_successful_training_date_time of this TrainingStatus.
        :rtype: datetime
        """
        return self._last_successful_training_date_time

    @last_successful_training_date_time.setter
    def last_successful_training_date_time(self, last_successful_training_date_time):
        """Sets the last_successful_training_date_time of this TrainingStatus.

        A combined UTC date and time string that describes the last successful training time of the person group, large person group or large face list.

        :param last_successful_training_date_time: The last_successful_training_date_time of this TrainingStatus.
        :type last_successful_training_date_time: datetime
        """

        self._last_successful_training_date_time = last_successful_training_date_time

    @property
    def message(self):
        """Gets the message of this TrainingStatus.

        Show failure message when training failed (omitted when training succeed).

        :return: The message of this TrainingStatus.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TrainingStatus.

        Show failure message when training failed (omitted when training succeed).

        :param message: The message of this TrainingStatus.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this TrainingStatus.

        Training status: notstarted, running, succeeded, failed. If the training process is waiting to perform, the status is notstarted. If the training is ongoing, the status is running. Status succeed means this person group or large person group is ready for Face - Identify, or this large face list is ready for Face - Find Similar. Status failed is often caused by no person or no persisted face exist in the person group or large person group, or no persisted face exist in the large face list.

        :return: The status of this TrainingStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TrainingStatus.

        Training status: notstarted, running, succeeded, failed. If the training process is waiting to perform, the status is notstarted. If the training is ongoing, the status is running. Status succeed means this person group or large person group is ready for Face - Identify, or this large face list is ready for Face - Find Similar. Status failed is often caused by no person or no persisted face exist in the person group or large person group, or no persisted face exist in the large face list.

        :param status: The status of this TrainingStatus.
        :type status: str
        """
        allowed_values = ["nonstarted", "running", "succeeded", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
