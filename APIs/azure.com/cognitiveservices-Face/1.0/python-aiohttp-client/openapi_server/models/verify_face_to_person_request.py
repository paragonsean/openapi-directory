# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class VerifyFaceToPersonRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, face_id: str=None, large_person_group_id: str=None, person_group_id: str=None, person_id: str=None):
        """VerifyFaceToPersonRequest - a model defined in OpenAPI

        :param face_id: The face_id of this VerifyFaceToPersonRequest.
        :param large_person_group_id: The large_person_group_id of this VerifyFaceToPersonRequest.
        :param person_group_id: The person_group_id of this VerifyFaceToPersonRequest.
        :param person_id: The person_id of this VerifyFaceToPersonRequest.
        """
        self.openapi_types = {
            'face_id': str,
            'large_person_group_id': str,
            'person_group_id': str,
            'person_id': str
        }

        self.attribute_map = {
            'face_id': 'faceId',
            'large_person_group_id': 'largePersonGroupId',
            'person_group_id': 'personGroupId',
            'person_id': 'personId'
        }

        self._face_id = face_id
        self._large_person_group_id = large_person_group_id
        self._person_group_id = person_group_id
        self._person_id = person_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyFaceToPersonRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyFaceToPersonRequest of this VerifyFaceToPersonRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def face_id(self):
        """Gets the face_id of this VerifyFaceToPersonRequest.

        FaceId of the face, comes from Face - Detect

        :return: The face_id of this VerifyFaceToPersonRequest.
        :rtype: str
        """
        return self._face_id

    @face_id.setter
    def face_id(self, face_id):
        """Sets the face_id of this VerifyFaceToPersonRequest.

        FaceId of the face, comes from Face - Detect

        :param face_id: The face_id of this VerifyFaceToPersonRequest.
        :type face_id: str
        """
        if face_id is None:
            raise ValueError("Invalid value for `face_id`, must not be `None`")

        self._face_id = face_id

    @property
    def large_person_group_id(self):
        """Gets the large_person_group_id of this VerifyFaceToPersonRequest.

        Using existing largePersonGroupId and personId for fast loading a specified person. largePersonGroupId is created in LargePersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.

        :return: The large_person_group_id of this VerifyFaceToPersonRequest.
        :rtype: str
        """
        return self._large_person_group_id

    @large_person_group_id.setter
    def large_person_group_id(self, large_person_group_id):
        """Sets the large_person_group_id of this VerifyFaceToPersonRequest.

        Using existing largePersonGroupId and personId for fast loading a specified person. largePersonGroupId is created in LargePersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.

        :param large_person_group_id: The large_person_group_id of this VerifyFaceToPersonRequest.
        :type large_person_group_id: str
        """
        if large_person_group_id is not None and len(large_person_group_id) > 64:
            raise ValueError("Invalid value for `large_person_group_id`, length must be less than or equal to `64`")
        if large_person_group_id is not None and not re.search(r'^[a-z0-9-_]+$', large_person_group_id):
            raise ValueError("Invalid value for `large_person_group_id`, must be a follow pattern or equal to `/^[a-z0-9-_]+$/`")

        self._large_person_group_id = large_person_group_id

    @property
    def person_group_id(self):
        """Gets the person_group_id of this VerifyFaceToPersonRequest.

        Using existing personGroupId and personId for fast loading a specified person. personGroupId is created in PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.

        :return: The person_group_id of this VerifyFaceToPersonRequest.
        :rtype: str
        """
        return self._person_group_id

    @person_group_id.setter
    def person_group_id(self, person_group_id):
        """Sets the person_group_id of this VerifyFaceToPersonRequest.

        Using existing personGroupId and personId for fast loading a specified person. personGroupId is created in PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.

        :param person_group_id: The person_group_id of this VerifyFaceToPersonRequest.
        :type person_group_id: str
        """
        if person_group_id is not None and len(person_group_id) > 64:
            raise ValueError("Invalid value for `person_group_id`, length must be less than or equal to `64`")
        if person_group_id is not None and not re.search(r'^[a-z0-9-_]+$', person_group_id):
            raise ValueError("Invalid value for `person_group_id`, must be a follow pattern or equal to `/^[a-z0-9-_]+$/`")

        self._person_group_id = person_group_id

    @property
    def person_id(self):
        """Gets the person_id of this VerifyFaceToPersonRequest.

        Specify a certain person in a person group or a large person group. personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.

        :return: The person_id of this VerifyFaceToPersonRequest.
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this VerifyFaceToPersonRequest.

        Specify a certain person in a person group or a large person group. personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.

        :param person_id: The person_id of this VerifyFaceToPersonRequest.
        :type person_id: str
        """
        if person_id is None:
            raise ValueError("Invalid value for `person_id`, must not be `None`")

        self._person_id = person_id
