/*
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SecretDescriptor;
import org.openapitools.client.model.SecretState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of product secret.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:44.499126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductSecretProperties {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPIRES_AFTER = "expiresAfter";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AFTER)
  private String expiresAfter;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_SECRET_DESCRIPTOR = "secretDescriptor";
  @SerializedName(SERIALIZED_NAME_SECRET_DESCRIPTOR)
  private SecretDescriptor secretDescriptor;

  /**
   * Specifies the secret kind.
   */
  @JsonAdapter(SecretKindEnum.Adapter.class)
  public enum SecretKindEnum {
    AD_HOC("AdHoc"),
    
    CERTIFICATE("Certificate"),
    
    PASSWORD("Password"),
    
    STORAGE_ACCOUNT("StorageAccount"),
    
    SYMMETRIC_KEY("SymmetricKey");

    private String value;

    SecretKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecretKindEnum fromValue(String value) {
      for (SecretKindEnum b : SecretKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecretKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecretKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecretKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecretKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SecretKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECRET_KIND = "secretKind";
  @SerializedName(SERIALIZED_NAME_SECRET_KIND)
  private SecretKindEnum secretKind;

  public static final String SERIALIZED_NAME_SECRET_STATE = "secretState";
  @SerializedName(SERIALIZED_NAME_SECRET_STATE)
  private SecretState secretState;

  public ProductSecretProperties() {
  }

  public ProductSecretProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The secret description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProductSecretProperties expiresAfter(String expiresAfter) {
    this.expiresAfter = expiresAfter;
    return this;
  }

  /**
   * The expiration period of the secret (in ISO8601 format).
   * @return expiresAfter
   */
  @javax.annotation.Nullable
  public String getExpiresAfter() {
    return expiresAfter;
  }

  public void setExpiresAfter(String expiresAfter) {
    this.expiresAfter = expiresAfter;
  }


  public ProductSecretProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Provisioning state of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ProductSecretProperties secretDescriptor(SecretDescriptor secretDescriptor) {
    this.secretDescriptor = secretDescriptor;
    return this;
  }

  /**
   * Get secretDescriptor
   * @return secretDescriptor
   */
  @javax.annotation.Nullable
  public SecretDescriptor getSecretDescriptor() {
    return secretDescriptor;
  }

  public void setSecretDescriptor(SecretDescriptor secretDescriptor) {
    this.secretDescriptor = secretDescriptor;
  }


  public ProductSecretProperties secretKind(SecretKindEnum secretKind) {
    this.secretKind = secretKind;
    return this;
  }

  /**
   * Specifies the secret kind.
   * @return secretKind
   */
  @javax.annotation.Nullable
  public SecretKindEnum getSecretKind() {
    return secretKind;
  }

  public void setSecretKind(SecretKindEnum secretKind) {
    this.secretKind = secretKind;
  }


  public ProductSecretProperties secretState(SecretState secretState) {
    this.secretState = secretState;
    return this;
  }

  /**
   * Get secretState
   * @return secretState
   */
  @javax.annotation.Nullable
  public SecretState getSecretState() {
    return secretState;
  }

  public void setSecretState(SecretState secretState) {
    this.secretState = secretState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductSecretProperties productSecretProperties = (ProductSecretProperties) o;
    return Objects.equals(this.description, productSecretProperties.description) &&
        Objects.equals(this.expiresAfter, productSecretProperties.expiresAfter) &&
        Objects.equals(this.provisioningState, productSecretProperties.provisioningState) &&
        Objects.equals(this.secretDescriptor, productSecretProperties.secretDescriptor) &&
        Objects.equals(this.secretKind, productSecretProperties.secretKind) &&
        Objects.equals(this.secretState, productSecretProperties.secretState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, expiresAfter, provisioningState, secretDescriptor, secretKind, secretState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductSecretProperties {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expiresAfter: ").append(toIndentedString(expiresAfter)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    secretDescriptor: ").append(toIndentedString(secretDescriptor)).append("\n");
    sb.append("    secretKind: ").append(toIndentedString(secretKind)).append("\n");
    sb.append("    secretState: ").append(toIndentedString(secretState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("expiresAfter");
    openapiFields.add("provisioningState");
    openapiFields.add("secretDescriptor");
    openapiFields.add("secretKind");
    openapiFields.add("secretState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductSecretProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductSecretProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductSecretProperties is not found in the empty JSON string", ProductSecretProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductSecretProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductSecretProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("expiresAfter") != null && !jsonObj.get("expiresAfter").isJsonNull()) && !jsonObj.get("expiresAfter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiresAfter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiresAfter").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `secretDescriptor`
      if (jsonObj.get("secretDescriptor") != null && !jsonObj.get("secretDescriptor").isJsonNull()) {
        SecretDescriptor.validateJsonElement(jsonObj.get("secretDescriptor"));
      }
      if ((jsonObj.get("secretKind") != null && !jsonObj.get("secretKind").isJsonNull()) && !jsonObj.get("secretKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretKind").toString()));
      }
      // validate the optional field `secretKind`
      if (jsonObj.get("secretKind") != null && !jsonObj.get("secretKind").isJsonNull()) {
        SecretKindEnum.validateJsonElement(jsonObj.get("secretKind"));
      }
      // validate the optional field `secretState`
      if (jsonObj.get("secretState") != null && !jsonObj.get("secretState").isJsonNull()) {
        SecretState.validateJsonElement(jsonObj.get("secretState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductSecretProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductSecretProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductSecretProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductSecretProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductSecretProperties>() {
           @Override
           public void write(JsonWriter out, ProductSecretProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductSecretProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductSecretProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductSecretProperties
   * @throws IOException if the JSON string is invalid with respect to ProductSecretProperties
   */
  public static ProductSecretProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductSecretProperties.class);
  }

  /**
   * Convert an instance of ProductSecretProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

