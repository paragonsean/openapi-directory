/*
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The secret type-specific descriptor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:44.499126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecretDescriptor {
  public static final String SERIALIZED_NAME_ALLOWED_CHARACTERS = "allowedCharacters";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CHARACTERS)
  private String allowedCharacters;

  public static final String SERIALIZED_NAME_ALTERNATIVE_DNS_NAMES = "alternativeDnsNames";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_DNS_NAMES)
  private List<String> alternativeDnsNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALTERNATIVE_IP_ADDRESSES = "alternativeIpAddresses";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_IP_ADDRESSES)
  private List<String> alternativeIpAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEY_LENGTH = "keyLength";
  @SerializedName(SERIALIZED_NAME_KEY_LENGTH)
  private Integer keyLength;

  public static final String SERIALIZED_NAME_PASSWORD_LENGTH = "passwordLength";
  @SerializedName(SERIALIZED_NAME_PASSWORD_LENGTH)
  private Integer passwordLength;

  public static final String SERIALIZED_NAME_PASSWORD_VALIDATION_REGEX = "passwordValidationRegex";
  @SerializedName(SERIALIZED_NAME_PASSWORD_VALIDATION_REGEX)
  private String passwordValidationRegex;

  /**
   * The storage account key secret rotation status.
   */
  @JsonAdapter(RotationStatusEnum.Adapter.class)
  public enum RotationStatusEnum {
    NONE("None"),
    
    PLANT_NEW_SAK("PlantNewSak"),
    
    ROTATE_INACTIVE_SAK("RotateInactiveSak"),
    
    COMPLETE("Complete");

    private String value;

    RotationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RotationStatusEnum fromValue(String value) {
      for (RotationStatusEnum b : RotationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RotationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RotationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RotationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RotationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RotationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROTATION_STATUS = "rotationStatus";
  @SerializedName(SERIALIZED_NAME_ROTATION_STATUS)
  private RotationStatusEnum rotationStatus;

  public static final String SERIALIZED_NAME_SECONDARY_KEY_IS_ACTIVE = "secondaryKeyIsActive";
  @SerializedName(SERIALIZED_NAME_SECONDARY_KEY_IS_ACTIVE)
  private Boolean secondaryKeyIsActive;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public SecretDescriptor() {
  }

  public SecretDescriptor allowedCharacters(String allowedCharacters) {
    this.allowedCharacters = allowedCharacters;
    return this;
  }

  /**
   * The allowed characters in the password
   * @return allowedCharacters
   */
  @javax.annotation.Nullable
  public String getAllowedCharacters() {
    return allowedCharacters;
  }

  public void setAllowedCharacters(String allowedCharacters) {
    this.allowedCharacters = allowedCharacters;
  }


  public SecretDescriptor alternativeDnsNames(List<String> alternativeDnsNames) {
    this.alternativeDnsNames = alternativeDnsNames;
    return this;
  }

  public SecretDescriptor addAlternativeDnsNamesItem(String alternativeDnsNamesItem) {
    if (this.alternativeDnsNames == null) {
      this.alternativeDnsNames = new ArrayList<>();
    }
    this.alternativeDnsNames.add(alternativeDnsNamesItem);
    return this;
  }

  /**
   * Alternative DNS Names.
   * @return alternativeDnsNames
   */
  @javax.annotation.Nullable
  public List<String> getAlternativeDnsNames() {
    return alternativeDnsNames;
  }

  public void setAlternativeDnsNames(List<String> alternativeDnsNames) {
    this.alternativeDnsNames = alternativeDnsNames;
  }


  public SecretDescriptor alternativeIpAddresses(List<String> alternativeIpAddresses) {
    this.alternativeIpAddresses = alternativeIpAddresses;
    return this;
  }

  public SecretDescriptor addAlternativeIpAddressesItem(String alternativeIpAddressesItem) {
    if (this.alternativeIpAddresses == null) {
      this.alternativeIpAddresses = new ArrayList<>();
    }
    this.alternativeIpAddresses.add(alternativeIpAddressesItem);
    return this;
  }

  /**
   * The list of alternative IP addresses.
   * @return alternativeIpAddresses
   */
  @javax.annotation.Nullable
  public List<String> getAlternativeIpAddresses() {
    return alternativeIpAddresses;
  }

  public void setAlternativeIpAddresses(List<String> alternativeIpAddresses) {
    this.alternativeIpAddresses = alternativeIpAddresses;
  }


  public SecretDescriptor keyLength(Integer keyLength) {
    this.keyLength = keyLength;
    return this;
  }

  /**
   * The key length.
   * @return keyLength
   */
  @javax.annotation.Nullable
  public Integer getKeyLength() {
    return keyLength;
  }

  public void setKeyLength(Integer keyLength) {
    this.keyLength = keyLength;
  }


  public SecretDescriptor passwordLength(Integer passwordLength) {
    this.passwordLength = passwordLength;
    return this;
  }

  /**
   * The minimum password length is 8 characters, and the maximum password length is 128 characters.
   * @return passwordLength
   */
  @javax.annotation.Nullable
  public Integer getPasswordLength() {
    return passwordLength;
  }

  public void setPasswordLength(Integer passwordLength) {
    this.passwordLength = passwordLength;
  }


  public SecretDescriptor passwordValidationRegex(String passwordValidationRegex) {
    this.passwordValidationRegex = passwordValidationRegex;
    return this;
  }

  /**
   * Password validation regular expression.
   * @return passwordValidationRegex
   */
  @javax.annotation.Nullable
  public String getPasswordValidationRegex() {
    return passwordValidationRegex;
  }

  public void setPasswordValidationRegex(String passwordValidationRegex) {
    this.passwordValidationRegex = passwordValidationRegex;
  }


  public SecretDescriptor rotationStatus(RotationStatusEnum rotationStatus) {
    this.rotationStatus = rotationStatus;
    return this;
  }

  /**
   * The storage account key secret rotation status.
   * @return rotationStatus
   */
  @javax.annotation.Nullable
  public RotationStatusEnum getRotationStatus() {
    return rotationStatus;
  }

  public void setRotationStatus(RotationStatusEnum rotationStatus) {
    this.rotationStatus = rotationStatus;
  }


  public SecretDescriptor secondaryKeyIsActive(Boolean secondaryKeyIsActive) {
    this.secondaryKeyIsActive = secondaryKeyIsActive;
    return this;
  }

  /**
   * A value indicating whether the secondary or primary storage account key is active as a secret.
   * @return secondaryKeyIsActive
   */
  @javax.annotation.Nullable
  public Boolean getSecondaryKeyIsActive() {
    return secondaryKeyIsActive;
  }

  public void setSecondaryKeyIsActive(Boolean secondaryKeyIsActive) {
    this.secondaryKeyIsActive = secondaryKeyIsActive;
  }


  public SecretDescriptor subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Certificate&#39;s subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecretDescriptor secretDescriptor = (SecretDescriptor) o;
    return Objects.equals(this.allowedCharacters, secretDescriptor.allowedCharacters) &&
        Objects.equals(this.alternativeDnsNames, secretDescriptor.alternativeDnsNames) &&
        Objects.equals(this.alternativeIpAddresses, secretDescriptor.alternativeIpAddresses) &&
        Objects.equals(this.keyLength, secretDescriptor.keyLength) &&
        Objects.equals(this.passwordLength, secretDescriptor.passwordLength) &&
        Objects.equals(this.passwordValidationRegex, secretDescriptor.passwordValidationRegex) &&
        Objects.equals(this.rotationStatus, secretDescriptor.rotationStatus) &&
        Objects.equals(this.secondaryKeyIsActive, secretDescriptor.secondaryKeyIsActive) &&
        Objects.equals(this.subject, secretDescriptor.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedCharacters, alternativeDnsNames, alternativeIpAddresses, keyLength, passwordLength, passwordValidationRegex, rotationStatus, secondaryKeyIsActive, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecretDescriptor {\n");
    sb.append("    allowedCharacters: ").append(toIndentedString(allowedCharacters)).append("\n");
    sb.append("    alternativeDnsNames: ").append(toIndentedString(alternativeDnsNames)).append("\n");
    sb.append("    alternativeIpAddresses: ").append(toIndentedString(alternativeIpAddresses)).append("\n");
    sb.append("    keyLength: ").append(toIndentedString(keyLength)).append("\n");
    sb.append("    passwordLength: ").append(toIndentedString(passwordLength)).append("\n");
    sb.append("    passwordValidationRegex: ").append(toIndentedString(passwordValidationRegex)).append("\n");
    sb.append("    rotationStatus: ").append(toIndentedString(rotationStatus)).append("\n");
    sb.append("    secondaryKeyIsActive: ").append(toIndentedString(secondaryKeyIsActive)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedCharacters");
    openapiFields.add("alternativeDnsNames");
    openapiFields.add("alternativeIpAddresses");
    openapiFields.add("keyLength");
    openapiFields.add("passwordLength");
    openapiFields.add("passwordValidationRegex");
    openapiFields.add("rotationStatus");
    openapiFields.add("secondaryKeyIsActive");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecretDescriptor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecretDescriptor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecretDescriptor is not found in the empty JSON string", SecretDescriptor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecretDescriptor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecretDescriptor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allowedCharacters") != null && !jsonObj.get("allowedCharacters").isJsonNull()) && !jsonObj.get("allowedCharacters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedCharacters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowedCharacters").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alternativeDnsNames") != null && !jsonObj.get("alternativeDnsNames").isJsonNull() && !jsonObj.get("alternativeDnsNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternativeDnsNames` to be an array in the JSON string but got `%s`", jsonObj.get("alternativeDnsNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alternativeIpAddresses") != null && !jsonObj.get("alternativeIpAddresses").isJsonNull() && !jsonObj.get("alternativeIpAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternativeIpAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("alternativeIpAddresses").toString()));
      }
      if ((jsonObj.get("passwordValidationRegex") != null && !jsonObj.get("passwordValidationRegex").isJsonNull()) && !jsonObj.get("passwordValidationRegex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordValidationRegex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordValidationRegex").toString()));
      }
      if ((jsonObj.get("rotationStatus") != null && !jsonObj.get("rotationStatus").isJsonNull()) && !jsonObj.get("rotationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotationStatus").toString()));
      }
      // validate the optional field `rotationStatus`
      if (jsonObj.get("rotationStatus") != null && !jsonObj.get("rotationStatus").isJsonNull()) {
        RotationStatusEnum.validateJsonElement(jsonObj.get("rotationStatus"));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecretDescriptor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecretDescriptor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecretDescriptor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecretDescriptor.class));

       return (TypeAdapter<T>) new TypeAdapter<SecretDescriptor>() {
           @Override
           public void write(JsonWriter out, SecretDescriptor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecretDescriptor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecretDescriptor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecretDescriptor
   * @throws IOException if the JSON string is invalid with respect to SecretDescriptor
   */
  public static SecretDescriptor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecretDescriptor.class);
  }

  /**
   * Convert an instance of SecretDescriptor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

