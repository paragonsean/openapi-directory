/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISecretDescriptor.h
 *
 * The secret type-specific descriptor.
 */

#ifndef OAISecretDescriptor_H
#define OAISecretDescriptor_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISecretDescriptor : public OAIObject {
public:
    OAISecretDescriptor();
    OAISecretDescriptor(QString json);
    ~OAISecretDescriptor() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAllowedCharacters() const;
    void setAllowedCharacters(const QString &allowed_characters);
    bool is_allowed_characters_Set() const;
    bool is_allowed_characters_Valid() const;

    QList<QString> getAlternativeDnsNames() const;
    void setAlternativeDnsNames(const QList<QString> &alternative_dns_names);
    bool is_alternative_dns_names_Set() const;
    bool is_alternative_dns_names_Valid() const;

    QList<QString> getAlternativeIpAddresses() const;
    void setAlternativeIpAddresses(const QList<QString> &alternative_ip_addresses);
    bool is_alternative_ip_addresses_Set() const;
    bool is_alternative_ip_addresses_Valid() const;

    qint32 getKeyLength() const;
    void setKeyLength(const qint32 &key_length);
    bool is_key_length_Set() const;
    bool is_key_length_Valid() const;

    qint32 getPasswordLength() const;
    void setPasswordLength(const qint32 &password_length);
    bool is_password_length_Set() const;
    bool is_password_length_Valid() const;

    QString getPasswordValidationRegex() const;
    void setPasswordValidationRegex(const QString &password_validation_regex);
    bool is_password_validation_regex_Set() const;
    bool is_password_validation_regex_Valid() const;

    QString getRotationStatus() const;
    void setRotationStatus(const QString &rotation_status);
    bool is_rotation_status_Set() const;
    bool is_rotation_status_Valid() const;

    bool isSecondaryKeyIsActive() const;
    void setSecondaryKeyIsActive(const bool &secondary_key_is_active);
    bool is_secondary_key_is_active_Set() const;
    bool is_secondary_key_is_active_Valid() const;

    QString getSubject() const;
    void setSubject(const QString &subject);
    bool is_subject_Set() const;
    bool is_subject_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_allowed_characters;
    bool m_allowed_characters_isSet;
    bool m_allowed_characters_isValid;

    QList<QString> m_alternative_dns_names;
    bool m_alternative_dns_names_isSet;
    bool m_alternative_dns_names_isValid;

    QList<QString> m_alternative_ip_addresses;
    bool m_alternative_ip_addresses_isSet;
    bool m_alternative_ip_addresses_isValid;

    qint32 m_key_length;
    bool m_key_length_isSet;
    bool m_key_length_isValid;

    qint32 m_password_length;
    bool m_password_length_isSet;
    bool m_password_length_isValid;

    QString m_password_validation_regex;
    bool m_password_validation_regex_isSet;
    bool m_password_validation_regex_isValid;

    QString m_rotation_status;
    bool m_rotation_status_isSet;
    bool m_rotation_status_isValid;

    bool m_secondary_key_is_active;
    bool m_secondary_key_is_active_isSet;
    bool m_secondary_key_is_active_isValid;

    QString m_subject;
    bool m_subject_isSet;
    bool m_subject_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISecretDescriptor)

#endif // OAISecretDescriptor_H
