/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecretDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecretDescriptor::OAISecretDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecretDescriptor::OAISecretDescriptor() {
    this->initializeModel();
}

OAISecretDescriptor::~OAISecretDescriptor() {}

void OAISecretDescriptor::initializeModel() {

    m_allowed_characters_isSet = false;
    m_allowed_characters_isValid = false;

    m_alternative_dns_names_isSet = false;
    m_alternative_dns_names_isValid = false;

    m_alternative_ip_addresses_isSet = false;
    m_alternative_ip_addresses_isValid = false;

    m_key_length_isSet = false;
    m_key_length_isValid = false;

    m_password_length_isSet = false;
    m_password_length_isValid = false;

    m_password_validation_regex_isSet = false;
    m_password_validation_regex_isValid = false;

    m_rotation_status_isSet = false;
    m_rotation_status_isValid = false;

    m_secondary_key_is_active_isSet = false;
    m_secondary_key_is_active_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAISecretDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecretDescriptor::fromJsonObject(QJsonObject json) {

    m_allowed_characters_isValid = ::OpenAPI::fromJsonValue(m_allowed_characters, json[QString("allowedCharacters")]);
    m_allowed_characters_isSet = !json[QString("allowedCharacters")].isNull() && m_allowed_characters_isValid;

    m_alternative_dns_names_isValid = ::OpenAPI::fromJsonValue(m_alternative_dns_names, json[QString("alternativeDnsNames")]);
    m_alternative_dns_names_isSet = !json[QString("alternativeDnsNames")].isNull() && m_alternative_dns_names_isValid;

    m_alternative_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_alternative_ip_addresses, json[QString("alternativeIpAddresses")]);
    m_alternative_ip_addresses_isSet = !json[QString("alternativeIpAddresses")].isNull() && m_alternative_ip_addresses_isValid;

    m_key_length_isValid = ::OpenAPI::fromJsonValue(m_key_length, json[QString("keyLength")]);
    m_key_length_isSet = !json[QString("keyLength")].isNull() && m_key_length_isValid;

    m_password_length_isValid = ::OpenAPI::fromJsonValue(m_password_length, json[QString("passwordLength")]);
    m_password_length_isSet = !json[QString("passwordLength")].isNull() && m_password_length_isValid;

    m_password_validation_regex_isValid = ::OpenAPI::fromJsonValue(m_password_validation_regex, json[QString("passwordValidationRegex")]);
    m_password_validation_regex_isSet = !json[QString("passwordValidationRegex")].isNull() && m_password_validation_regex_isValid;

    m_rotation_status_isValid = ::OpenAPI::fromJsonValue(m_rotation_status, json[QString("rotationStatus")]);
    m_rotation_status_isSet = !json[QString("rotationStatus")].isNull() && m_rotation_status_isValid;

    m_secondary_key_is_active_isValid = ::OpenAPI::fromJsonValue(m_secondary_key_is_active, json[QString("secondaryKeyIsActive")]);
    m_secondary_key_is_active_isSet = !json[QString("secondaryKeyIsActive")].isNull() && m_secondary_key_is_active_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAISecretDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecretDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_characters_isSet) {
        obj.insert(QString("allowedCharacters"), ::OpenAPI::toJsonValue(m_allowed_characters));
    }
    if (m_alternative_dns_names.size() > 0) {
        obj.insert(QString("alternativeDnsNames"), ::OpenAPI::toJsonValue(m_alternative_dns_names));
    }
    if (m_alternative_ip_addresses.size() > 0) {
        obj.insert(QString("alternativeIpAddresses"), ::OpenAPI::toJsonValue(m_alternative_ip_addresses));
    }
    if (m_key_length_isSet) {
        obj.insert(QString("keyLength"), ::OpenAPI::toJsonValue(m_key_length));
    }
    if (m_password_length_isSet) {
        obj.insert(QString("passwordLength"), ::OpenAPI::toJsonValue(m_password_length));
    }
    if (m_password_validation_regex_isSet) {
        obj.insert(QString("passwordValidationRegex"), ::OpenAPI::toJsonValue(m_password_validation_regex));
    }
    if (m_rotation_status_isSet) {
        obj.insert(QString("rotationStatus"), ::OpenAPI::toJsonValue(m_rotation_status));
    }
    if (m_secondary_key_is_active_isSet) {
        obj.insert(QString("secondaryKeyIsActive"), ::OpenAPI::toJsonValue(m_secondary_key_is_active));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAISecretDescriptor::getAllowedCharacters() const {
    return m_allowed_characters;
}
void OAISecretDescriptor::setAllowedCharacters(const QString &allowed_characters) {
    m_allowed_characters = allowed_characters;
    m_allowed_characters_isSet = true;
}

bool OAISecretDescriptor::is_allowed_characters_Set() const{
    return m_allowed_characters_isSet;
}

bool OAISecretDescriptor::is_allowed_characters_Valid() const{
    return m_allowed_characters_isValid;
}

QList<QString> OAISecretDescriptor::getAlternativeDnsNames() const {
    return m_alternative_dns_names;
}
void OAISecretDescriptor::setAlternativeDnsNames(const QList<QString> &alternative_dns_names) {
    m_alternative_dns_names = alternative_dns_names;
    m_alternative_dns_names_isSet = true;
}

bool OAISecretDescriptor::is_alternative_dns_names_Set() const{
    return m_alternative_dns_names_isSet;
}

bool OAISecretDescriptor::is_alternative_dns_names_Valid() const{
    return m_alternative_dns_names_isValid;
}

QList<QString> OAISecretDescriptor::getAlternativeIpAddresses() const {
    return m_alternative_ip_addresses;
}
void OAISecretDescriptor::setAlternativeIpAddresses(const QList<QString> &alternative_ip_addresses) {
    m_alternative_ip_addresses = alternative_ip_addresses;
    m_alternative_ip_addresses_isSet = true;
}

bool OAISecretDescriptor::is_alternative_ip_addresses_Set() const{
    return m_alternative_ip_addresses_isSet;
}

bool OAISecretDescriptor::is_alternative_ip_addresses_Valid() const{
    return m_alternative_ip_addresses_isValid;
}

qint32 OAISecretDescriptor::getKeyLength() const {
    return m_key_length;
}
void OAISecretDescriptor::setKeyLength(const qint32 &key_length) {
    m_key_length = key_length;
    m_key_length_isSet = true;
}

bool OAISecretDescriptor::is_key_length_Set() const{
    return m_key_length_isSet;
}

bool OAISecretDescriptor::is_key_length_Valid() const{
    return m_key_length_isValid;
}

qint32 OAISecretDescriptor::getPasswordLength() const {
    return m_password_length;
}
void OAISecretDescriptor::setPasswordLength(const qint32 &password_length) {
    m_password_length = password_length;
    m_password_length_isSet = true;
}

bool OAISecretDescriptor::is_password_length_Set() const{
    return m_password_length_isSet;
}

bool OAISecretDescriptor::is_password_length_Valid() const{
    return m_password_length_isValid;
}

QString OAISecretDescriptor::getPasswordValidationRegex() const {
    return m_password_validation_regex;
}
void OAISecretDescriptor::setPasswordValidationRegex(const QString &password_validation_regex) {
    m_password_validation_regex = password_validation_regex;
    m_password_validation_regex_isSet = true;
}

bool OAISecretDescriptor::is_password_validation_regex_Set() const{
    return m_password_validation_regex_isSet;
}

bool OAISecretDescriptor::is_password_validation_regex_Valid() const{
    return m_password_validation_regex_isValid;
}

QString OAISecretDescriptor::getRotationStatus() const {
    return m_rotation_status;
}
void OAISecretDescriptor::setRotationStatus(const QString &rotation_status) {
    m_rotation_status = rotation_status;
    m_rotation_status_isSet = true;
}

bool OAISecretDescriptor::is_rotation_status_Set() const{
    return m_rotation_status_isSet;
}

bool OAISecretDescriptor::is_rotation_status_Valid() const{
    return m_rotation_status_isValid;
}

bool OAISecretDescriptor::isSecondaryKeyIsActive() const {
    return m_secondary_key_is_active;
}
void OAISecretDescriptor::setSecondaryKeyIsActive(const bool &secondary_key_is_active) {
    m_secondary_key_is_active = secondary_key_is_active;
    m_secondary_key_is_active_isSet = true;
}

bool OAISecretDescriptor::is_secondary_key_is_active_Set() const{
    return m_secondary_key_is_active_isSet;
}

bool OAISecretDescriptor::is_secondary_key_is_active_Valid() const{
    return m_secondary_key_is_active_isValid;
}

QString OAISecretDescriptor::getSubject() const {
    return m_subject;
}
void OAISecretDescriptor::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAISecretDescriptor::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAISecretDescriptor::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAISecretDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_characters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternative_dns_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternative_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_validation_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_key_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecretDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
