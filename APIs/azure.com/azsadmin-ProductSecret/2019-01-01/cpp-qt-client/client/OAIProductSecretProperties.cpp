/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductSecretProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductSecretProperties::OAIProductSecretProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductSecretProperties::OAIProductSecretProperties() {
    this->initializeModel();
}

OAIProductSecretProperties::~OAIProductSecretProperties() {}

void OAIProductSecretProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_expires_after_isSet = false;
    m_expires_after_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_secret_descriptor_isSet = false;
    m_secret_descriptor_isValid = false;

    m_secret_kind_isSet = false;
    m_secret_kind_isValid = false;

    m_secret_state_isSet = false;
    m_secret_state_isValid = false;
}

void OAIProductSecretProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductSecretProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expires_after_isValid = ::OpenAPI::fromJsonValue(m_expires_after, json[QString("expiresAfter")]);
    m_expires_after_isSet = !json[QString("expiresAfter")].isNull() && m_expires_after_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_secret_descriptor_isValid = ::OpenAPI::fromJsonValue(m_secret_descriptor, json[QString("secretDescriptor")]);
    m_secret_descriptor_isSet = !json[QString("secretDescriptor")].isNull() && m_secret_descriptor_isValid;

    m_secret_kind_isValid = ::OpenAPI::fromJsonValue(m_secret_kind, json[QString("secretKind")]);
    m_secret_kind_isSet = !json[QString("secretKind")].isNull() && m_secret_kind_isValid;

    m_secret_state_isValid = ::OpenAPI::fromJsonValue(m_secret_state, json[QString("secretState")]);
    m_secret_state_isSet = !json[QString("secretState")].isNull() && m_secret_state_isValid;
}

QString OAIProductSecretProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductSecretProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expires_after_isSet) {
        obj.insert(QString("expiresAfter"), ::OpenAPI::toJsonValue(m_expires_after));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_secret_descriptor.isSet()) {
        obj.insert(QString("secretDescriptor"), ::OpenAPI::toJsonValue(m_secret_descriptor));
    }
    if (m_secret_kind_isSet) {
        obj.insert(QString("secretKind"), ::OpenAPI::toJsonValue(m_secret_kind));
    }
    if (m_secret_state.isSet()) {
        obj.insert(QString("secretState"), ::OpenAPI::toJsonValue(m_secret_state));
    }
    return obj;
}

QString OAIProductSecretProperties::getDescription() const {
    return m_description;
}
void OAIProductSecretProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProductSecretProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProductSecretProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProductSecretProperties::getExpiresAfter() const {
    return m_expires_after;
}
void OAIProductSecretProperties::setExpiresAfter(const QString &expires_after) {
    m_expires_after = expires_after;
    m_expires_after_isSet = true;
}

bool OAIProductSecretProperties::is_expires_after_Set() const{
    return m_expires_after_isSet;
}

bool OAIProductSecretProperties::is_expires_after_Valid() const{
    return m_expires_after_isValid;
}

QString OAIProductSecretProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIProductSecretProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIProductSecretProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIProductSecretProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAISecretDescriptor OAIProductSecretProperties::getSecretDescriptor() const {
    return m_secret_descriptor;
}
void OAIProductSecretProperties::setSecretDescriptor(const OAISecretDescriptor &secret_descriptor) {
    m_secret_descriptor = secret_descriptor;
    m_secret_descriptor_isSet = true;
}

bool OAIProductSecretProperties::is_secret_descriptor_Set() const{
    return m_secret_descriptor_isSet;
}

bool OAIProductSecretProperties::is_secret_descriptor_Valid() const{
    return m_secret_descriptor_isValid;
}

QString OAIProductSecretProperties::getSecretKind() const {
    return m_secret_kind;
}
void OAIProductSecretProperties::setSecretKind(const QString &secret_kind) {
    m_secret_kind = secret_kind;
    m_secret_kind_isSet = true;
}

bool OAIProductSecretProperties::is_secret_kind_Set() const{
    return m_secret_kind_isSet;
}

bool OAIProductSecretProperties::is_secret_kind_Valid() const{
    return m_secret_kind_isValid;
}

OAISecretState OAIProductSecretProperties::getSecretState() const {
    return m_secret_state;
}
void OAIProductSecretProperties::setSecretState(const OAISecretState &secret_state) {
    m_secret_state = secret_state;
    m_secret_state_isSet = true;
}

bool OAIProductSecretProperties::is_secret_state_Set() const{
    return m_secret_state_isSet;
}

bool OAIProductSecretProperties::is_secret_state_Valid() const{
    return m_secret_state_isValid;
}

bool OAIProductSecretProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductSecretProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
