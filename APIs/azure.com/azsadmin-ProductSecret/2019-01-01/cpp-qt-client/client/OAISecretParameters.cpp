/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecretParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecretParameters::OAISecretParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecretParameters::OAISecretParameters() {
    this->initializeModel();
}

OAISecretParameters::~OAISecretParameters() {}

void OAISecretParameters::initializeModel() {

    m_password_isSet = false;
    m_password_isValid = false;

    m_pfx_file_name_isSet = false;
    m_pfx_file_name_isValid = false;

    m_pfx_password_isSet = false;
    m_pfx_password_isValid = false;

    m_secret_value_isSet = false;
    m_secret_value_isValid = false;

    m_symmetric_key_isSet = false;
    m_symmetric_key_isValid = false;
}

void OAISecretParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecretParameters::fromJsonObject(QJsonObject json) {

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_pfx_file_name_isValid = ::OpenAPI::fromJsonValue(m_pfx_file_name, json[QString("pfxFileName")]);
    m_pfx_file_name_isSet = !json[QString("pfxFileName")].isNull() && m_pfx_file_name_isValid;

    m_pfx_password_isValid = ::OpenAPI::fromJsonValue(m_pfx_password, json[QString("pfxPassword")]);
    m_pfx_password_isSet = !json[QString("pfxPassword")].isNull() && m_pfx_password_isValid;

    m_secret_value_isValid = ::OpenAPI::fromJsonValue(m_secret_value, json[QString("secretValue")]);
    m_secret_value_isSet = !json[QString("secretValue")].isNull() && m_secret_value_isValid;

    m_symmetric_key_isValid = ::OpenAPI::fromJsonValue(m_symmetric_key, json[QString("symmetricKey")]);
    m_symmetric_key_isSet = !json[QString("symmetricKey")].isNull() && m_symmetric_key_isValid;
}

QString OAISecretParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecretParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_pfx_file_name_isSet) {
        obj.insert(QString("pfxFileName"), ::OpenAPI::toJsonValue(m_pfx_file_name));
    }
    if (m_pfx_password_isSet) {
        obj.insert(QString("pfxPassword"), ::OpenAPI::toJsonValue(m_pfx_password));
    }
    if (m_secret_value_isSet) {
        obj.insert(QString("secretValue"), ::OpenAPI::toJsonValue(m_secret_value));
    }
    if (m_symmetric_key_isSet) {
        obj.insert(QString("symmetricKey"), ::OpenAPI::toJsonValue(m_symmetric_key));
    }
    return obj;
}

QString OAISecretParameters::getPassword() const {
    return m_password;
}
void OAISecretParameters::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAISecretParameters::is_password_Set() const{
    return m_password_isSet;
}

bool OAISecretParameters::is_password_Valid() const{
    return m_password_isValid;
}

QString OAISecretParameters::getPfxFileName() const {
    return m_pfx_file_name;
}
void OAISecretParameters::setPfxFileName(const QString &pfx_file_name) {
    m_pfx_file_name = pfx_file_name;
    m_pfx_file_name_isSet = true;
}

bool OAISecretParameters::is_pfx_file_name_Set() const{
    return m_pfx_file_name_isSet;
}

bool OAISecretParameters::is_pfx_file_name_Valid() const{
    return m_pfx_file_name_isValid;
}

QString OAISecretParameters::getPfxPassword() const {
    return m_pfx_password;
}
void OAISecretParameters::setPfxPassword(const QString &pfx_password) {
    m_pfx_password = pfx_password;
    m_pfx_password_isSet = true;
}

bool OAISecretParameters::is_pfx_password_Set() const{
    return m_pfx_password_isSet;
}

bool OAISecretParameters::is_pfx_password_Valid() const{
    return m_pfx_password_isValid;
}

QString OAISecretParameters::getSecretValue() const {
    return m_secret_value;
}
void OAISecretParameters::setSecretValue(const QString &secret_value) {
    m_secret_value = secret_value;
    m_secret_value_isSet = true;
}

bool OAISecretParameters::is_secret_value_Set() const{
    return m_secret_value_isSet;
}

bool OAISecretParameters::is_secret_value_Valid() const{
    return m_secret_value_isValid;
}

QString OAISecretParameters::getSymmetricKey() const {
    return m_symmetric_key;
}
void OAISecretParameters::setSymmetricKey(const QString &symmetric_key) {
    m_symmetric_key = symmetric_key;
    m_symmetric_key_isSet = true;
}

bool OAISecretParameters::is_symmetric_key_Set() const{
    return m_symmetric_key_isSet;
}

bool OAISecretParameters::is_symmetric_key_Valid() const{
    return m_symmetric_key_isValid;
}

bool OAISecretParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pfx_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pfx_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symmetric_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecretParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
