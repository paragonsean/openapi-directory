# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.secret_descriptor import SecretDescriptor
from openapi_server.models.secret_state import SecretState
from openapi_server import util


class ProductSecretProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, expires_after: str=None, provisioning_state: str=None, secret_descriptor: SecretDescriptor=None, secret_kind: str=None, secret_state: SecretState=None):
        """ProductSecretProperties - a model defined in OpenAPI

        :param description: The description of this ProductSecretProperties.
        :param expires_after: The expires_after of this ProductSecretProperties.
        :param provisioning_state: The provisioning_state of this ProductSecretProperties.
        :param secret_descriptor: The secret_descriptor of this ProductSecretProperties.
        :param secret_kind: The secret_kind of this ProductSecretProperties.
        :param secret_state: The secret_state of this ProductSecretProperties.
        """
        self.openapi_types = {
            'description': str,
            'expires_after': str,
            'provisioning_state': str,
            'secret_descriptor': SecretDescriptor,
            'secret_kind': str,
            'secret_state': SecretState
        }

        self.attribute_map = {
            'description': 'description',
            'expires_after': 'expiresAfter',
            'provisioning_state': 'provisioningState',
            'secret_descriptor': 'secretDescriptor',
            'secret_kind': 'secretKind',
            'secret_state': 'secretState'
        }

        self._description = description
        self._expires_after = expires_after
        self._provisioning_state = provisioning_state
        self._secret_descriptor = secret_descriptor
        self._secret_kind = secret_kind
        self._secret_state = secret_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductSecretProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductSecretProperties of this ProductSecretProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ProductSecretProperties.

        The secret description.

        :return: The description of this ProductSecretProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductSecretProperties.

        The secret description.

        :param description: The description of this ProductSecretProperties.
        :type description: str
        """

        self._description = description

    @property
    def expires_after(self):
        """Gets the expires_after of this ProductSecretProperties.

        The expiration period of the secret (in ISO8601 format).

        :return: The expires_after of this ProductSecretProperties.
        :rtype: str
        """
        return self._expires_after

    @expires_after.setter
    def expires_after(self, expires_after):
        """Sets the expires_after of this ProductSecretProperties.

        The expiration period of the secret (in ISO8601 format).

        :param expires_after: The expires_after of this ProductSecretProperties.
        :type expires_after: str
        """

        self._expires_after = expires_after

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ProductSecretProperties.

        Provisioning state of the resource.

        :return: The provisioning_state of this ProductSecretProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ProductSecretProperties.

        Provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this ProductSecretProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def secret_descriptor(self):
        """Gets the secret_descriptor of this ProductSecretProperties.


        :return: The secret_descriptor of this ProductSecretProperties.
        :rtype: SecretDescriptor
        """
        return self._secret_descriptor

    @secret_descriptor.setter
    def secret_descriptor(self, secret_descriptor):
        """Sets the secret_descriptor of this ProductSecretProperties.


        :param secret_descriptor: The secret_descriptor of this ProductSecretProperties.
        :type secret_descriptor: SecretDescriptor
        """

        self._secret_descriptor = secret_descriptor

    @property
    def secret_kind(self):
        """Gets the secret_kind of this ProductSecretProperties.

        Specifies the secret kind.

        :return: The secret_kind of this ProductSecretProperties.
        :rtype: str
        """
        return self._secret_kind

    @secret_kind.setter
    def secret_kind(self, secret_kind):
        """Sets the secret_kind of this ProductSecretProperties.

        Specifies the secret kind.

        :param secret_kind: The secret_kind of this ProductSecretProperties.
        :type secret_kind: str
        """
        allowed_values = ["AdHoc", "Certificate", "Password", "StorageAccount", "SymmetricKey"]  # noqa: E501
        if secret_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `secret_kind` ({0}), must be one of {1}"
                .format(secret_kind, allowed_values)
            )

        self._secret_kind = secret_kind

    @property
    def secret_state(self):
        """Gets the secret_state of this ProductSecretProperties.


        :return: The secret_state of this ProductSecretProperties.
        :rtype: SecretState
        """
        return self._secret_state

    @secret_state.setter
    def secret_state(self, secret_state):
        """Sets the secret_state of this ProductSecretProperties.


        :param secret_state: The secret_state of this ProductSecretProperties.
        :type secret_state: SecretState
        """

        self._secret_state = secret_state
