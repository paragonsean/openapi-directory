# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecretDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_characters: str=None, alternative_dns_names: List[str]=None, alternative_ip_addresses: List[str]=None, key_length: int=None, password_length: int=None, password_validation_regex: str=None, rotation_status: str=None, secondary_key_is_active: bool=None, subject: str=None):
        """SecretDescriptor - a model defined in OpenAPI

        :param allowed_characters: The allowed_characters of this SecretDescriptor.
        :param alternative_dns_names: The alternative_dns_names of this SecretDescriptor.
        :param alternative_ip_addresses: The alternative_ip_addresses of this SecretDescriptor.
        :param key_length: The key_length of this SecretDescriptor.
        :param password_length: The password_length of this SecretDescriptor.
        :param password_validation_regex: The password_validation_regex of this SecretDescriptor.
        :param rotation_status: The rotation_status of this SecretDescriptor.
        :param secondary_key_is_active: The secondary_key_is_active of this SecretDescriptor.
        :param subject: The subject of this SecretDescriptor.
        """
        self.openapi_types = {
            'allowed_characters': str,
            'alternative_dns_names': List[str],
            'alternative_ip_addresses': List[str],
            'key_length': int,
            'password_length': int,
            'password_validation_regex': str,
            'rotation_status': str,
            'secondary_key_is_active': bool,
            'subject': str
        }

        self.attribute_map = {
            'allowed_characters': 'allowedCharacters',
            'alternative_dns_names': 'alternativeDnsNames',
            'alternative_ip_addresses': 'alternativeIpAddresses',
            'key_length': 'keyLength',
            'password_length': 'passwordLength',
            'password_validation_regex': 'passwordValidationRegex',
            'rotation_status': 'rotationStatus',
            'secondary_key_is_active': 'secondaryKeyIsActive',
            'subject': 'subject'
        }

        self._allowed_characters = allowed_characters
        self._alternative_dns_names = alternative_dns_names
        self._alternative_ip_addresses = alternative_ip_addresses
        self._key_length = key_length
        self._password_length = password_length
        self._password_validation_regex = password_validation_regex
        self._rotation_status = rotation_status
        self._secondary_key_is_active = secondary_key_is_active
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecretDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecretDescriptor of this SecretDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_characters(self):
        """Gets the allowed_characters of this SecretDescriptor.

        The allowed characters in the password

        :return: The allowed_characters of this SecretDescriptor.
        :rtype: str
        """
        return self._allowed_characters

    @allowed_characters.setter
    def allowed_characters(self, allowed_characters):
        """Sets the allowed_characters of this SecretDescriptor.

        The allowed characters in the password

        :param allowed_characters: The allowed_characters of this SecretDescriptor.
        :type allowed_characters: str
        """

        self._allowed_characters = allowed_characters

    @property
    def alternative_dns_names(self):
        """Gets the alternative_dns_names of this SecretDescriptor.

        Alternative DNS Names.

        :return: The alternative_dns_names of this SecretDescriptor.
        :rtype: List[str]
        """
        return self._alternative_dns_names

    @alternative_dns_names.setter
    def alternative_dns_names(self, alternative_dns_names):
        """Sets the alternative_dns_names of this SecretDescriptor.

        Alternative DNS Names.

        :param alternative_dns_names: The alternative_dns_names of this SecretDescriptor.
        :type alternative_dns_names: List[str]
        """

        self._alternative_dns_names = alternative_dns_names

    @property
    def alternative_ip_addresses(self):
        """Gets the alternative_ip_addresses of this SecretDescriptor.

        The list of alternative IP addresses.

        :return: The alternative_ip_addresses of this SecretDescriptor.
        :rtype: List[str]
        """
        return self._alternative_ip_addresses

    @alternative_ip_addresses.setter
    def alternative_ip_addresses(self, alternative_ip_addresses):
        """Sets the alternative_ip_addresses of this SecretDescriptor.

        The list of alternative IP addresses.

        :param alternative_ip_addresses: The alternative_ip_addresses of this SecretDescriptor.
        :type alternative_ip_addresses: List[str]
        """

        self._alternative_ip_addresses = alternative_ip_addresses

    @property
    def key_length(self):
        """Gets the key_length of this SecretDescriptor.

        The key length.

        :return: The key_length of this SecretDescriptor.
        :rtype: int
        """
        return self._key_length

    @key_length.setter
    def key_length(self, key_length):
        """Sets the key_length of this SecretDescriptor.

        The key length.

        :param key_length: The key_length of this SecretDescriptor.
        :type key_length: int
        """

        self._key_length = key_length

    @property
    def password_length(self):
        """Gets the password_length of this SecretDescriptor.

        The minimum password length is 8 characters, and the maximum password length is 128 characters.

        :return: The password_length of this SecretDescriptor.
        :rtype: int
        """
        return self._password_length

    @password_length.setter
    def password_length(self, password_length):
        """Sets the password_length of this SecretDescriptor.

        The minimum password length is 8 characters, and the maximum password length is 128 characters.

        :param password_length: The password_length of this SecretDescriptor.
        :type password_length: int
        """

        self._password_length = password_length

    @property
    def password_validation_regex(self):
        """Gets the password_validation_regex of this SecretDescriptor.

        Password validation regular expression.

        :return: The password_validation_regex of this SecretDescriptor.
        :rtype: str
        """
        return self._password_validation_regex

    @password_validation_regex.setter
    def password_validation_regex(self, password_validation_regex):
        """Sets the password_validation_regex of this SecretDescriptor.

        Password validation regular expression.

        :param password_validation_regex: The password_validation_regex of this SecretDescriptor.
        :type password_validation_regex: str
        """

        self._password_validation_regex = password_validation_regex

    @property
    def rotation_status(self):
        """Gets the rotation_status of this SecretDescriptor.

        The storage account key secret rotation status.

        :return: The rotation_status of this SecretDescriptor.
        :rtype: str
        """
        return self._rotation_status

    @rotation_status.setter
    def rotation_status(self, rotation_status):
        """Sets the rotation_status of this SecretDescriptor.

        The storage account key secret rotation status.

        :param rotation_status: The rotation_status of this SecretDescriptor.
        :type rotation_status: str
        """
        allowed_values = ["None", "PlantNewSak", "RotateInactiveSak", "Complete"]  # noqa: E501
        if rotation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `rotation_status` ({0}), must be one of {1}"
                .format(rotation_status, allowed_values)
            )

        self._rotation_status = rotation_status

    @property
    def secondary_key_is_active(self):
        """Gets the secondary_key_is_active of this SecretDescriptor.

        A value indicating whether the secondary or primary storage account key is active as a secret.

        :return: The secondary_key_is_active of this SecretDescriptor.
        :rtype: bool
        """
        return self._secondary_key_is_active

    @secondary_key_is_active.setter
    def secondary_key_is_active(self, secondary_key_is_active):
        """Sets the secondary_key_is_active of this SecretDescriptor.

        A value indicating whether the secondary or primary storage account key is active as a secret.

        :param secondary_key_is_active: The secondary_key_is_active of this SecretDescriptor.
        :type secondary_key_is_active: bool
        """

        self._secondary_key_is_active = secondary_key_is_active

    @property
    def subject(self):
        """Gets the subject of this SecretDescriptor.

        Certificate's subject

        :return: The subject of this SecretDescriptor.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SecretDescriptor.

        Certificate's subject

        :param subject: The subject of this SecretDescriptor.
        :type subject: str
        """

        self._subject = subject
