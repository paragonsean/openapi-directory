# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecretParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password: str=None, pfx_file_name: str=None, pfx_password: str=None, secret_value: str=None, symmetric_key: str=None):
        """SecretParameters - a model defined in OpenAPI

        :param password: The password of this SecretParameters.
        :param pfx_file_name: The pfx_file_name of this SecretParameters.
        :param pfx_password: The pfx_password of this SecretParameters.
        :param secret_value: The secret_value of this SecretParameters.
        :param symmetric_key: The symmetric_key of this SecretParameters.
        """
        self.openapi_types = {
            'password': str,
            'pfx_file_name': str,
            'pfx_password': str,
            'secret_value': str,
            'symmetric_key': str
        }

        self.attribute_map = {
            'password': 'password',
            'pfx_file_name': 'pfxFileName',
            'pfx_password': 'pfxPassword',
            'secret_value': 'secretValue',
            'symmetric_key': 'symmetricKey'
        }

        self._password = password
        self._pfx_file_name = pfx_file_name
        self._pfx_password = pfx_password
        self._secret_value = secret_value
        self._symmetric_key = symmetric_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecretParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecretParameters of this SecretParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password(self):
        """Gets the password of this SecretParameters.

        The password as a secure string.

        :return: The password of this SecretParameters.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SecretParameters.

        The password as a secure string.

        :param password: The password of this SecretParameters.
        :type password: str
        """

        self._password = password

    @property
    def pfx_file_name(self):
        """Gets the pfx_file_name of this SecretParameters.

        The pfx certificate file location.

        :return: The pfx_file_name of this SecretParameters.
        :rtype: str
        """
        return self._pfx_file_name

    @pfx_file_name.setter
    def pfx_file_name(self, pfx_file_name):
        """Sets the pfx_file_name of this SecretParameters.

        The pfx certificate file location.

        :param pfx_file_name: The pfx_file_name of this SecretParameters.
        :type pfx_file_name: str
        """

        self._pfx_file_name = pfx_file_name

    @property
    def pfx_password(self):
        """Gets the pfx_password of this SecretParameters.

        The pfx certificate file password as a secure string.

        :return: The pfx_password of this SecretParameters.
        :rtype: str
        """
        return self._pfx_password

    @pfx_password.setter
    def pfx_password(self, pfx_password):
        """Sets the pfx_password of this SecretParameters.

        The pfx certificate file password as a secure string.

        :param pfx_password: The pfx_password of this SecretParameters.
        :type pfx_password: str
        """

        self._pfx_password = pfx_password

    @property
    def secret_value(self):
        """Gets the secret_value of this SecretParameters.

        The secret value in a secure string format.

        :return: The secret_value of this SecretParameters.
        :rtype: str
        """
        return self._secret_value

    @secret_value.setter
    def secret_value(self, secret_value):
        """Sets the secret_value of this SecretParameters.

        The secret value in a secure string format.

        :param secret_value: The secret_value of this SecretParameters.
        :type secret_value: str
        """

        self._secret_value = secret_value

    @property
    def symmetric_key(self):
        """Gets the symmetric_key of this SecretParameters.

        The symmetric key as a secure string.

        :return: The symmetric_key of this SecretParameters.
        :rtype: str
        """
        return self._symmetric_key

    @symmetric_key.setter
    def symmetric_key(self, symmetric_key):
        """Sets the symmetric_key of this SecretParameters.

        The symmetric key as a secure string.

        :param symmetric_key: The symmetric_key of this SecretParameters.
        :type symmetric_key: str
        """

        self._symmetric_key = symmetric_key
