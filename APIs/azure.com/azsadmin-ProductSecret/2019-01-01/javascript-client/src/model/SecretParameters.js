/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SecretParameters model module.
 * @module model/SecretParameters
 * @version 2019-01-01
 */
class SecretParameters {
    /**
     * Constructs a new <code>SecretParameters</code>.
     * Parameters required for creating/updating a product secret.
     * @alias module:model/SecretParameters
     */
    constructor() { 
        
        SecretParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SecretParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecretParameters} obj Optional instance to populate.
     * @return {module:model/SecretParameters} The populated <code>SecretParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecretParameters();

            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('pfxFileName')) {
                obj['pfxFileName'] = ApiClient.convertToType(data['pfxFileName'], 'String');
            }
            if (data.hasOwnProperty('pfxPassword')) {
                obj['pfxPassword'] = ApiClient.convertToType(data['pfxPassword'], 'String');
            }
            if (data.hasOwnProperty('secretValue')) {
                obj['secretValue'] = ApiClient.convertToType(data['secretValue'], 'String');
            }
            if (data.hasOwnProperty('symmetricKey')) {
                obj['symmetricKey'] = ApiClient.convertToType(data['symmetricKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SecretParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SecretParameters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['pfxFileName'] && !(typeof data['pfxFileName'] === 'string' || data['pfxFileName'] instanceof String)) {
            throw new Error("Expected the field `pfxFileName` to be a primitive type in the JSON string but got " + data['pfxFileName']);
        }
        // ensure the json data is a string
        if (data['pfxPassword'] && !(typeof data['pfxPassword'] === 'string' || data['pfxPassword'] instanceof String)) {
            throw new Error("Expected the field `pfxPassword` to be a primitive type in the JSON string but got " + data['pfxPassword']);
        }
        // ensure the json data is a string
        if (data['secretValue'] && !(typeof data['secretValue'] === 'string' || data['secretValue'] instanceof String)) {
            throw new Error("Expected the field `secretValue` to be a primitive type in the JSON string but got " + data['secretValue']);
        }
        // ensure the json data is a string
        if (data['symmetricKey'] && !(typeof data['symmetricKey'] === 'string' || data['symmetricKey'] instanceof String)) {
            throw new Error("Expected the field `symmetricKey` to be a primitive type in the JSON string but got " + data['symmetricKey']);
        }

        return true;
    }


}



/**
 * The password as a secure string.
 * @member {String} password
 */
SecretParameters.prototype['password'] = undefined;

/**
 * The pfx certificate file location.
 * @member {String} pfxFileName
 */
SecretParameters.prototype['pfxFileName'] = undefined;

/**
 * The pfx certificate file password as a secure string.
 * @member {String} pfxPassword
 */
SecretParameters.prototype['pfxPassword'] = undefined;

/**
 * The secret value in a secure string format.
 * @member {String} secretValue
 */
SecretParameters.prototype['secretValue'] = undefined;

/**
 * The symmetric key as a secure string.
 * @member {String} symmetricKey
 */
SecretParameters.prototype['symmetricKey'] = undefined;






export default SecretParameters;

