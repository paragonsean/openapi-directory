/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProductSecret from '../model/ProductSecret';
import ProductSecretsList from '../model/ProductSecretsList';
import SecretParameters from '../model/SecretParameters';

/**
* ProductSecrets service.
* @module api/ProductSecretsApi
* @version 2019-01-01
*/
export default class ProductSecretsApi {

    /**
    * Constructs a new ProductSecretsApi. 
    * @alias module:api/ProductSecretsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productSecretsGet operation.
     * @callback module:api/ProductSecretsApi~productSecretsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specific product secret details.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} productId The product identifier.
     * @param {String} apiVersion Client API Version.
     * @param {String} secretName The secret name.
     * @param {module:api/ProductSecretsApi~productSecretsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductSecret}
     */
    productSecretsGet(subscriptionId, productId, apiVersion, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productSecretsGet");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productSecretsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productSecretsGet");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling productSecretsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'productId': productId,
        'secretName': secretName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductSecret;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productSecrets/{productId}/secrets/{secretName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productSecretsImport operation.
     * @callback module:api/ProductSecretsApi~productSecretsImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports a product secret.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} productId The product identifier.
     * @param {String} secretName The secret name.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/SecretParameters} secretParameters The parameters required for creating/updating a product secret.
     * @param {module:api/ProductSecretsApi~productSecretsImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productSecretsImport(subscriptionId, productId, secretName, apiVersion, secretParameters, callback) {
      let postBody = secretParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productSecretsImport");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productSecretsImport");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling productSecretsImport");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productSecretsImport");
      }
      // verify the required parameter 'secretParameters' is set
      if (secretParameters === undefined || secretParameters === null) {
        throw new Error("Missing the required parameter 'secretParameters' when calling productSecretsImport");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'productId': productId,
        'secretName': secretName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productSecrets/{productId}/secrets/{secretName}/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productSecretsList operation.
     * @callback module:api/ProductSecretsApi~productSecretsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductSecretsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of product secrets.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {String} productId The product identifier.
     * @param {module:api/ProductSecretsApi~productSecretsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductSecretsList}
     */
    productSecretsList(subscriptionId, apiVersion, productId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productSecretsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productSecretsList");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productSecretsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'productId': productId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductSecretsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productPackages/{productId}/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productSecretsValidate operation.
     * @callback module:api/ProductSecretsApi~productSecretsValidateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates a product secret.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} productId The product identifier.
     * @param {String} secretName The secret name.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/SecretParameters} secretParameters The parameters required for creating/updating a product secret.
     * @param {module:api/ProductSecretsApi~productSecretsValidateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productSecretsValidate(subscriptionId, productId, secretName, apiVersion, secretParameters, callback) {
      let postBody = secretParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productSecretsValidate");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productSecretsValidate");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling productSecretsValidate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productSecretsValidate");
      }
      // verify the required parameter 'secretParameters' is set
      if (secretParameters === undefined || secretParameters === null) {
        throw new Error("Missing the required parameter 'secretParameters' when calling productSecretsValidate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'productId': productId,
        'secretName': secretName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productSecrets/{productId}/secrets/{secretName}/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
