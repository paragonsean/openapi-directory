/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CidrIpAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CDN Ip address group
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:20.982534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IpAddressGroup {
  public static final String SERIALIZED_NAME_DELIVERY_REGION = "deliveryRegion";
  @SerializedName(SERIALIZED_NAME_DELIVERY_REGION)
  private String deliveryRegion;

  public static final String SERIALIZED_NAME_IPV4_ADDRESSES = "ipv4Addresses";
  @SerializedName(SERIALIZED_NAME_IPV4_ADDRESSES)
  private List<CidrIpAddress> ipv4Addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_IPV6_ADDRESSES = "ipv6Addresses";
  @SerializedName(SERIALIZED_NAME_IPV6_ADDRESSES)
  private List<CidrIpAddress> ipv6Addresses = new ArrayList<>();

  public IpAddressGroup() {
  }

  public IpAddressGroup deliveryRegion(String deliveryRegion) {
    this.deliveryRegion = deliveryRegion;
    return this;
  }

  /**
   * The delivery region of the ip address group
   * @return deliveryRegion
   */
  @javax.annotation.Nullable
  public String getDeliveryRegion() {
    return deliveryRegion;
  }

  public void setDeliveryRegion(String deliveryRegion) {
    this.deliveryRegion = deliveryRegion;
  }


  public IpAddressGroup ipv4Addresses(List<CidrIpAddress> ipv4Addresses) {
    this.ipv4Addresses = ipv4Addresses;
    return this;
  }

  public IpAddressGroup addIpv4AddressesItem(CidrIpAddress ipv4AddressesItem) {
    if (this.ipv4Addresses == null) {
      this.ipv4Addresses = new ArrayList<>();
    }
    this.ipv4Addresses.add(ipv4AddressesItem);
    return this;
  }

  /**
   * The list of ip v4 addresses.
   * @return ipv4Addresses
   */
  @javax.annotation.Nullable
  public List<CidrIpAddress> getIpv4Addresses() {
    return ipv4Addresses;
  }

  public void setIpv4Addresses(List<CidrIpAddress> ipv4Addresses) {
    this.ipv4Addresses = ipv4Addresses;
  }


  public IpAddressGroup ipv6Addresses(List<CidrIpAddress> ipv6Addresses) {
    this.ipv6Addresses = ipv6Addresses;
    return this;
  }

  public IpAddressGroup addIpv6AddressesItem(CidrIpAddress ipv6AddressesItem) {
    if (this.ipv6Addresses == null) {
      this.ipv6Addresses = new ArrayList<>();
    }
    this.ipv6Addresses.add(ipv6AddressesItem);
    return this;
  }

  /**
   * The list of ip v6 addresses.
   * @return ipv6Addresses
   */
  @javax.annotation.Nullable
  public List<CidrIpAddress> getIpv6Addresses() {
    return ipv6Addresses;
  }

  public void setIpv6Addresses(List<CidrIpAddress> ipv6Addresses) {
    this.ipv6Addresses = ipv6Addresses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpAddressGroup ipAddressGroup = (IpAddressGroup) o;
    return Objects.equals(this.deliveryRegion, ipAddressGroup.deliveryRegion) &&
        Objects.equals(this.ipv4Addresses, ipAddressGroup.ipv4Addresses) &&
        Objects.equals(this.ipv6Addresses, ipAddressGroup.ipv6Addresses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryRegion, ipv4Addresses, ipv6Addresses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpAddressGroup {\n");
    sb.append("    deliveryRegion: ").append(toIndentedString(deliveryRegion)).append("\n");
    sb.append("    ipv4Addresses: ").append(toIndentedString(ipv4Addresses)).append("\n");
    sb.append("    ipv6Addresses: ").append(toIndentedString(ipv6Addresses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliveryRegion");
    openapiFields.add("ipv4Addresses");
    openapiFields.add("ipv6Addresses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpAddressGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpAddressGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpAddressGroup is not found in the empty JSON string", IpAddressGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpAddressGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpAddressGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deliveryRegion") != null && !jsonObj.get("deliveryRegion").isJsonNull()) && !jsonObj.get("deliveryRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryRegion").toString()));
      }
      if (jsonObj.get("ipv4Addresses") != null && !jsonObj.get("ipv4Addresses").isJsonNull()) {
        JsonArray jsonArrayipv4Addresses = jsonObj.getAsJsonArray("ipv4Addresses");
        if (jsonArrayipv4Addresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipv4Addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipv4Addresses` to be an array in the JSON string but got `%s`", jsonObj.get("ipv4Addresses").toString()));
          }

          // validate the optional field `ipv4Addresses` (array)
          for (int i = 0; i < jsonArrayipv4Addresses.size(); i++) {
            CidrIpAddress.validateJsonElement(jsonArrayipv4Addresses.get(i));
          };
        }
      }
      if (jsonObj.get("ipv6Addresses") != null && !jsonObj.get("ipv6Addresses").isJsonNull()) {
        JsonArray jsonArrayipv6Addresses = jsonObj.getAsJsonArray("ipv6Addresses");
        if (jsonArrayipv6Addresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipv6Addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipv6Addresses` to be an array in the JSON string but got `%s`", jsonObj.get("ipv6Addresses").toString()));
          }

          // validate the optional field `ipv6Addresses` (array)
          for (int i = 0; i < jsonArrayipv6Addresses.size(); i++) {
            CidrIpAddress.validateJsonElement(jsonArrayipv6Addresses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpAddressGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpAddressGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpAddressGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpAddressGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<IpAddressGroup>() {
           @Override
           public void write(JsonWriter out, IpAddressGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpAddressGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpAddressGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpAddressGroup
   * @throws IOException if the JSON string is invalid with respect to IpAddressGroup
   */
  public static IpAddressGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpAddressGroup.class);
  }

  /**
   * Convert an instance of IpAddressGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

