/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A condition for the delivery rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:20.982534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeliveryRuleCondition {
  /**
   * The name of the condition for the delivery rule.
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    REMOTE_ADDRESS("RemoteAddress"),
    
    REQUEST_METHOD("RequestMethod"),
    
    QUERY_STRING("QueryString"),
    
    POST_ARGS("PostArgs"),
    
    REQUEST_URI("RequestUri"),
    
    REQUEST_HEADER("RequestHeader"),
    
    REQUEST_BODY("RequestBody"),
    
    REQUEST_SCHEME("RequestScheme"),
    
    URL_PATH("UrlPath"),
    
    URL_FILE_EXTENSION("UrlFileExtension"),
    
    URL_FILE_NAME("UrlFileName"),
    
    HTTP_VERSION("HttpVersion"),
    
    COOKIES("Cookies"),
    
    IS_DEVICE("IsDevice");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  protected NameEnum name;

  public DeliveryRuleCondition() {
  }

  public DeliveryRuleCondition name(NameEnum name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the condition for the delivery rule.
   * @return name
   */
  @javax.annotation.Nonnull
  public NameEnum getName() {
    return name;
  }

  public void setName(NameEnum name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryRuleCondition deliveryRuleCondition = (DeliveryRuleCondition) o;
    return Objects.equals(this.name, deliveryRuleCondition.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryRuleCondition {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeliveryRuleCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeliveryRuleCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliveryRuleCondition is not found in the empty JSON string", DeliveryRuleCondition.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("name").getAsString();
      switch (discriminatorValue) {
        case "DeliveryRuleCookiesCondition":
          DeliveryRuleCookiesCondition.validateJsonElement(jsonElement);
          break;
        case "DeliveryRuleHttpVersionCondition":
          DeliveryRuleHttpVersionCondition.validateJsonElement(jsonElement);
          break;
        case "DeliveryRuleIsDeviceCondition":
          DeliveryRuleIsDeviceCondition.validateJsonElement(jsonElement);
          break;
        case "DeliveryRulePostArgsCondition":
          DeliveryRulePostArgsCondition.validateJsonElement(jsonElement);
          break;
        case "DeliveryRuleQueryStringCondition":
          DeliveryRuleQueryStringCondition.validateJsonElement(jsonElement);
          break;
        case "DeliveryRuleRemoteAddressCondition":
          DeliveryRuleRemoteAddressCondition.validateJsonElement(jsonElement);
          break;
        case "DeliveryRuleRequestBodyCondition":
          DeliveryRuleRequestBodyCondition.validateJsonElement(jsonElement);
          break;
        case "DeliveryRuleRequestHeaderCondition":
          DeliveryRuleRequestHeaderCondition.validateJsonElement(jsonElement);
          break;
        case "DeliveryRuleRequestMethodCondition":
          DeliveryRuleRequestMethodCondition.validateJsonElement(jsonElement);
          break;
        case "DeliveryRuleRequestSchemeCondition":
          DeliveryRuleRequestSchemeCondition.validateJsonElement(jsonElement);
          break;
        case "DeliveryRuleRequestUriCondition":
          DeliveryRuleRequestUriCondition.validateJsonElement(jsonElement);
          break;
        case "DeliveryRuleUrlFileExtensionCondition":
          DeliveryRuleUrlFileExtensionCondition.validateJsonElement(jsonElement);
          break;
        case "DeliveryRuleUrlFileNameCondition":
          DeliveryRuleUrlFileNameCondition.validateJsonElement(jsonElement);
          break;
        case "DeliveryRuleUrlPathCondition":
          DeliveryRuleUrlPathCondition.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `name` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of DeliveryRuleCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeliveryRuleCondition
   * @throws IOException if the JSON string is invalid with respect to DeliveryRuleCondition
   */
  public static DeliveryRuleCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliveryRuleCondition.class);
  }

  /**
   * Convert an instance of DeliveryRuleCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

