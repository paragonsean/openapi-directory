/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Endpoint;
import org.openapitools.client.model.EndpointListResult;
import org.openapitools.client.model.EndpointUpdateParameters;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.LoadParameters;
import org.openapitools.client.model.PurgeParameters;
import org.openapitools.client.model.ResourceUsageListResult;
import org.openapitools.client.model.ValidateCustomDomainInput;
import org.openapitools.client.model.ValidateCustomDomainOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EndpointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EndpointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EndpointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for endpointsCreate
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param endpoint Endpoint properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new endpoint has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsCreateCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, Endpoint endpoint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpoint;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsCreateValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, Endpoint endpoint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsCreate(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsCreate(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsCreate(Async)");
        }

        // verify the required parameter 'endpoint' is set
        if (endpoint == null) {
            throw new ApiException("Missing the required parameter 'endpoint' when calling endpointsCreate(Async)");
        }

        return endpointsCreateCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, endpoint, _callback);

    }

    /**
     * 
     * Creates a new CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param endpoint Endpoint properties (required)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new endpoint has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint endpointsCreate(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, Endpoint endpoint) throws ApiException {
        ApiResponse<Endpoint> localVarResp = endpointsCreateWithHttpInfo(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, endpoint);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param endpoint Endpoint properties (required)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new endpoint has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> endpointsCreateWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, Endpoint endpoint) throws ApiException {
        okhttp3.Call localVarCall = endpointsCreateValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, endpoint, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param endpoint Endpoint properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new endpoint has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsCreateAsync(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, Endpoint endpoint, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsCreateValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, endpoint, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsDelete
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the endpoint was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsDeleteCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsDeleteValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsDelete(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsDelete(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsDelete(Async)");
        }

        return endpointsDeleteCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the endpoint was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void endpointsDelete(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion) throws ApiException {
        endpointsDeleteWithHttpInfo(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Deletes an existing CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the endpoint was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> endpointsDeleteWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = endpointsDeleteValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the endpoint was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsDeleteAsync(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsDeleteValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsGet
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsGetCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsGetValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsGet(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsGet(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsGet(Async)");
        }

        return endpointsGetCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets an existing CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint endpointsGet(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Endpoint> localVarResp = endpointsGetWithHttpInfo(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an existing CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> endpointsGetWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = endpointsGetValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an existing CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsGetAsync(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsGetValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsListByProfile
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsListByProfileCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsListByProfileValidateBeforeCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsListByProfile(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsListByProfile(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsListByProfile(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsListByProfile(Async)");
        }

        return endpointsListByProfileCall(resourceGroupName, profileName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists existing CDN endpoints.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return EndpointListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public EndpointListResult endpointsListByProfile(String resourceGroupName, String profileName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<EndpointListResult> localVarResp = endpointsListByProfileWithHttpInfo(resourceGroupName, profileName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists existing CDN endpoints.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;EndpointListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointListResult> endpointsListByProfileWithHttpInfo(String resourceGroupName, String profileName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = endpointsListByProfileValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<EndpointListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists existing CDN endpoints.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsListByProfileAsync(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback<EndpointListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsListByProfileValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EndpointListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsListResourceUsage
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsListResourceUsageCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/checkResourceUsage"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsListResourceUsageValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsListResourceUsage(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsListResourceUsage(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsListResourceUsage(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsListResourceUsage(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsListResourceUsage(Async)");
        }

        return endpointsListResourceUsageCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Checks the quota and usage of geo filters and custom domains under the given endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ResourceUsageListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceUsageListResult endpointsListResourceUsage(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ResourceUsageListResult> localVarResp = endpointsListResourceUsageWithHttpInfo(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks the quota and usage of geo filters and custom domains under the given endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;ResourceUsageListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceUsageListResult> endpointsListResourceUsageWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = endpointsListResourceUsageValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ResourceUsageListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks the quota and usage of geo filters and custom domains under the given endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsListResourceUsageAsync(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback<ResourceUsageListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsListResourceUsageValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ResourceUsageListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsLoadContent
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param contentFilePaths The path to the content to be loaded. Path should be a full URL, e.g. ‘/pictures/city.png&#39; which loads a single file  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsLoadContentCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, LoadParameters contentFilePaths, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentFilePaths;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/load"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsLoadContentValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, LoadParameters contentFilePaths, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsLoadContent(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsLoadContent(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsLoadContent(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsLoadContent(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsLoadContent(Async)");
        }

        // verify the required parameter 'contentFilePaths' is set
        if (contentFilePaths == null) {
            throw new ApiException("Missing the required parameter 'contentFilePaths' when calling endpointsLoadContent(Async)");
        }

        return endpointsLoadContentCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, contentFilePaths, _callback);

    }

    /**
     * 
     * Pre-loads a content to CDN. Available for Verizon Profiles.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param contentFilePaths The path to the content to be loaded. Path should be a full URL, e.g. ‘/pictures/city.png&#39; which loads a single file  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void endpointsLoadContent(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, LoadParameters contentFilePaths) throws ApiException {
        endpointsLoadContentWithHttpInfo(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, contentFilePaths);
    }

    /**
     * 
     * Pre-loads a content to CDN. Available for Verizon Profiles.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param contentFilePaths The path to the content to be loaded. Path should be a full URL, e.g. ‘/pictures/city.png&#39; which loads a single file  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> endpointsLoadContentWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, LoadParameters contentFilePaths) throws ApiException {
        okhttp3.Call localVarCall = endpointsLoadContentValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, contentFilePaths, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Pre-loads a content to CDN. Available for Verizon Profiles.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param contentFilePaths The path to the content to be loaded. Path should be a full URL, e.g. ‘/pictures/city.png&#39; which loads a single file  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsLoadContentAsync(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, LoadParameters contentFilePaths, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsLoadContentValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, contentFilePaths, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsPurgeContent
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param contentFilePaths The path to the content to be purged. Path can be a full URL, e.g. &#39;/pictures/city.png&#39; which removes a single file, or a directory with a wildcard, e.g. &#39;/pictures/_*&#39; which removes all folders and files in the directory. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsPurgeContentCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, PurgeParameters contentFilePaths, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentFilePaths;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/purge"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsPurgeContentValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, PurgeParameters contentFilePaths, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'contentFilePaths' is set
        if (contentFilePaths == null) {
            throw new ApiException("Missing the required parameter 'contentFilePaths' when calling endpointsPurgeContent(Async)");
        }

        return endpointsPurgeContentCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, contentFilePaths, _callback);

    }

    /**
     * 
     * Removes a content from CDN.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param contentFilePaths The path to the content to be purged. Path can be a full URL, e.g. &#39;/pictures/city.png&#39; which removes a single file, or a directory with a wildcard, e.g. &#39;/pictures/_*&#39; which removes all folders and files in the directory. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void endpointsPurgeContent(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, PurgeParameters contentFilePaths) throws ApiException {
        endpointsPurgeContentWithHttpInfo(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, contentFilePaths);
    }

    /**
     * 
     * Removes a content from CDN.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param contentFilePaths The path to the content to be purged. Path can be a full URL, e.g. &#39;/pictures/city.png&#39; which removes a single file, or a directory with a wildcard, e.g. &#39;/pictures/_*&#39; which removes all folders and files in the directory. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> endpointsPurgeContentWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, PurgeParameters contentFilePaths) throws ApiException {
        okhttp3.Call localVarCall = endpointsPurgeContentValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, contentFilePaths, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes a content from CDN.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param contentFilePaths The path to the content to be purged. Path can be a full URL, e.g. &#39;/pictures/city.png&#39; which removes a single file, or a directory with a wildcard, e.g. &#39;/pictures/_*&#39; which removes all folders and files in the directory. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsPurgeContentAsync(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, PurgeParameters contentFilePaths, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsPurgeContentValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, contentFilePaths, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsStart
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsStartCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/start"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsStartValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsStart(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsStart(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsStart(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsStart(Async)");
        }

        return endpointsStartCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Starts an existing CDN endpoint that is on a stopped state.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint endpointsStart(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Endpoint> localVarResp = endpointsStartWithHttpInfo(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts an existing CDN endpoint that is on a stopped state.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> endpointsStartWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = endpointsStartValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts an existing CDN endpoint that is on a stopped state.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsStartAsync(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsStartValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsStop
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsStopCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/stop"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsStopValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsStop(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsStop(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsStop(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsStop(Async)");
        }

        return endpointsStopCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Stops an existing running CDN endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint endpointsStop(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Endpoint> localVarResp = endpointsStopWithHttpInfo(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Stops an existing running CDN endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> endpointsStopWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = endpointsStopValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stops an existing running CDN endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsStopAsync(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsStopValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsUpdate
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param endpointUpdateProperties Endpoint update properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsUpdateCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, EndpointUpdateParameters endpointUpdateProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpointUpdateProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsUpdateValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, EndpointUpdateParameters endpointUpdateProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsUpdate(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsUpdate(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsUpdate(Async)");
        }

        // verify the required parameter 'endpointUpdateProperties' is set
        if (endpointUpdateProperties == null) {
            throw new ApiException("Missing the required parameter 'endpointUpdateProperties' when calling endpointsUpdate(Async)");
        }

        return endpointsUpdateCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, endpointUpdateProperties, _callback);

    }

    /**
     * 
     * Updates an existing CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile. Only tags can be updated after creating an endpoint. To update origins, use the Update Origin operation. To update origin groups, use the Update Origin group operation. To update custom domains, use the Update Custom Domain operation.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param endpointUpdateProperties Endpoint update properties (required)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint endpointsUpdate(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, EndpointUpdateParameters endpointUpdateProperties) throws ApiException {
        ApiResponse<Endpoint> localVarResp = endpointsUpdateWithHttpInfo(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, endpointUpdateProperties);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile. Only tags can be updated after creating an endpoint. To update origins, use the Update Origin operation. To update origin groups, use the Update Origin group operation. To update custom domains, use the Update Custom Domain operation.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param endpointUpdateProperties Endpoint update properties (required)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> endpointsUpdateWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, EndpointUpdateParameters endpointUpdateProperties) throws ApiException {
        okhttp3.Call localVarCall = endpointsUpdateValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, endpointUpdateProperties, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile. Only tags can be updated after creating an endpoint. To update origins, use the Update Origin operation. To update origin groups, use the Update Origin group operation. To update custom domains, use the Update Custom Domain operation.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param endpointUpdateProperties Endpoint update properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsUpdateAsync(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, EndpointUpdateParameters endpointUpdateProperties, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsUpdateValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, endpointUpdateProperties, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsValidateCustomDomain
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param customDomainProperties Custom domain to be validated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsValidateCustomDomainCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, ValidateCustomDomainInput customDomainProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customDomainProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/validateCustomDomain"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsValidateCustomDomainValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, ValidateCustomDomainInput customDomainProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'customDomainProperties' is set
        if (customDomainProperties == null) {
            throw new ApiException("Missing the required parameter 'customDomainProperties' when calling endpointsValidateCustomDomain(Async)");
        }

        return endpointsValidateCustomDomainCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, customDomainProperties, _callback);

    }

    /**
     * 
     * Validates the custom domain mapping to ensure it maps to the correct CDN endpoint in DNS.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param customDomainProperties Custom domain to be validated. (required)
     * @return ValidateCustomDomainOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ValidateCustomDomainOutput endpointsValidateCustomDomain(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, ValidateCustomDomainInput customDomainProperties) throws ApiException {
        ApiResponse<ValidateCustomDomainOutput> localVarResp = endpointsValidateCustomDomainWithHttpInfo(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, customDomainProperties);
        return localVarResp.getData();
    }

    /**
     * 
     * Validates the custom domain mapping to ensure it maps to the correct CDN endpoint in DNS.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param customDomainProperties Custom domain to be validated. (required)
     * @return ApiResponse&lt;ValidateCustomDomainOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateCustomDomainOutput> endpointsValidateCustomDomainWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, ValidateCustomDomainInput customDomainProperties) throws ApiException {
        okhttp3.Call localVarCall = endpointsValidateCustomDomainValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, customDomainProperties, null);
        Type localVarReturnType = new TypeToken<ValidateCustomDomainOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Validates the custom domain mapping to ensure it maps to the correct CDN endpoint in DNS.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param customDomainProperties Custom domain to be validated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsValidateCustomDomainAsync(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, ValidateCustomDomainInput customDomainProperties, final ApiCallback<ValidateCustomDomainOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsValidateCustomDomainValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, customDomainProperties, _callback);
        Type localVarReturnType = new TypeToken<ValidateCustomDomainOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
