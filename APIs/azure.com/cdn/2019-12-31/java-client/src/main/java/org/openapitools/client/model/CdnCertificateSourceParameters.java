/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the parameters for using CDN managed certificate for securing custom domain.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:20.982534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CdnCertificateSourceParameters {
  /**
   * Gets or Sets atOdataType
   */
  @JsonAdapter(AtOdataTypeEnum.Adapter.class)
  public enum AtOdataTypeEnum {
    _MICROSOFT_AZURE_CDN_MODELS_CDN_CERTIFICATE_SOURCE_PARAMETERS("#Microsoft.Azure.Cdn.Models.CdnCertificateSourceParameters");

    private String value;

    AtOdataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AtOdataTypeEnum fromValue(String value) {
      for (AtOdataTypeEnum b : AtOdataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AtOdataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AtOdataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AtOdataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AtOdataTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AtOdataTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AT_ODATA_TYPE = "@odata.type";
  @SerializedName(SERIALIZED_NAME_AT_ODATA_TYPE)
  private AtOdataTypeEnum atOdataType;

  /**
   * Type of certificate used
   */
  @JsonAdapter(CertificateTypeEnum.Adapter.class)
  public enum CertificateTypeEnum {
    SHARED("Shared"),
    
    DEDICATED("Dedicated");

    private String value;

    CertificateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CertificateTypeEnum fromValue(String value) {
      for (CertificateTypeEnum b : CertificateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CertificateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CertificateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CertificateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CertificateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CertificateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CERTIFICATE_TYPE = "certificateType";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_TYPE)
  private CertificateTypeEnum certificateType;

  public CdnCertificateSourceParameters() {
  }

  public CdnCertificateSourceParameters atOdataType(AtOdataTypeEnum atOdataType) {
    this.atOdataType = atOdataType;
    return this;
  }

  /**
   * Get atOdataType
   * @return atOdataType
   */
  @javax.annotation.Nonnull
  public AtOdataTypeEnum getAtOdataType() {
    return atOdataType;
  }

  public void setAtOdataType(AtOdataTypeEnum atOdataType) {
    this.atOdataType = atOdataType;
  }


  public CdnCertificateSourceParameters certificateType(CertificateTypeEnum certificateType) {
    this.certificateType = certificateType;
    return this;
  }

  /**
   * Type of certificate used
   * @return certificateType
   */
  @javax.annotation.Nonnull
  public CertificateTypeEnum getCertificateType() {
    return certificateType;
  }

  public void setCertificateType(CertificateTypeEnum certificateType) {
    this.certificateType = certificateType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CdnCertificateSourceParameters cdnCertificateSourceParameters = (CdnCertificateSourceParameters) o;
    return Objects.equals(this.atOdataType, cdnCertificateSourceParameters.atOdataType) &&
        Objects.equals(this.certificateType, cdnCertificateSourceParameters.certificateType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atOdataType, certificateType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CdnCertificateSourceParameters {\n");
    sb.append("    atOdataType: ").append(toIndentedString(atOdataType)).append("\n");
    sb.append("    certificateType: ").append(toIndentedString(certificateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.type");
    openapiFields.add("certificateType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@odata.type");
    openapiRequiredFields.add("certificateType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CdnCertificateSourceParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CdnCertificateSourceParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CdnCertificateSourceParameters is not found in the empty JSON string", CdnCertificateSourceParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CdnCertificateSourceParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CdnCertificateSourceParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CdnCertificateSourceParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("@odata.type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@odata.type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@odata.type").toString()));
      }
      // validate the required field `@odata.type`
      AtOdataTypeEnum.validateJsonElement(jsonObj.get("@odata.type"));
      if (!jsonObj.get("certificateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateType").toString()));
      }
      // validate the required field `certificateType`
      CertificateTypeEnum.validateJsonElement(jsonObj.get("certificateType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CdnCertificateSourceParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CdnCertificateSourceParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CdnCertificateSourceParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CdnCertificateSourceParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CdnCertificateSourceParameters>() {
           @Override
           public void write(JsonWriter out, CdnCertificateSourceParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CdnCertificateSourceParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CdnCertificateSourceParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CdnCertificateSourceParameters
   * @throws IOException if the JSON string is invalid with respect to CdnCertificateSourceParameters
   */
  public static CdnCertificateSourceParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CdnCertificateSourceParameters.class);
  }

  /**
   * Convert an instance of CdnCertificateSourceParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

