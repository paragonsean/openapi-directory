/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.ProfileListResult;
import org.openapitools.client.model.ProfileUpdateParameters;
import org.openapitools.client.model.ResourceUsageListResult;
import org.openapitools.client.model.SsoUri;
import org.openapitools.client.model.SupportedOptimizationTypesListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProfilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProfilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for profilesCreate
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param profile Profile properties needed to create a new profile. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new profile has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesCreateCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, Profile profile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesCreateValidateBeforeCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, Profile profile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling profilesCreate(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling profilesCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesCreate(Async)");
        }

        // verify the required parameter 'profile' is set
        if (profile == null) {
            throw new ApiException("Missing the required parameter 'profile' when calling profilesCreate(Async)");
        }

        return profilesCreateCall(resourceGroupName, profileName, subscriptionId, apiVersion, profile, _callback);

    }

    /**
     * 
     * Creates a new CDN profile with a profile name under the specified subscription and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param profile Profile properties needed to create a new profile. (required)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new profile has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Profile profilesCreate(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, Profile profile) throws ApiException {
        ApiResponse<Profile> localVarResp = profilesCreateWithHttpInfo(resourceGroupName, profileName, subscriptionId, apiVersion, profile);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new CDN profile with a profile name under the specified subscription and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param profile Profile properties needed to create a new profile. (required)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new profile has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> profilesCreateWithHttpInfo(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, Profile profile) throws ApiException {
        okhttp3.Call localVarCall = profilesCreateValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, profile, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new CDN profile with a profile name under the specified subscription and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param profile Profile properties needed to create a new profile. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new profile has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesCreateAsync(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, Profile profile, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesCreateValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, profile, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesDelete
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the profile was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesDeleteCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesDeleteValidateBeforeCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling profilesDelete(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling profilesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesDelete(Async)");
        }

        return profilesDeleteCall(resourceGroupName, profileName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing CDN profile with the specified parameters. Deleting a profile will result in the deletion of all of the sub-resources including endpoints, origins and custom domains.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the profile was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void profilesDelete(String resourceGroupName, String profileName, String subscriptionId, String apiVersion) throws ApiException {
        profilesDeleteWithHttpInfo(resourceGroupName, profileName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Deletes an existing CDN profile with the specified parameters. Deleting a profile will result in the deletion of all of the sub-resources including endpoints, origins and custom domains.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the profile was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> profilesDeleteWithHttpInfo(String resourceGroupName, String profileName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = profilesDeleteValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing CDN profile with the specified parameters. Deleting a profile will result in the deletion of all of the sub-resources including endpoints, origins and custom domains.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the profile was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesDeleteAsync(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesDeleteValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesGenerateSsoUri
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGenerateSsoUriCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/generateSsoUri"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesGenerateSsoUriValidateBeforeCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling profilesGenerateSsoUri(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling profilesGenerateSsoUri(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesGenerateSsoUri(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesGenerateSsoUri(Async)");
        }

        return profilesGenerateSsoUriCall(resourceGroupName, profileName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Generates a dynamic SSO URI used to sign in to the CDN supplemental portal. Supplemental portal is used to configure advanced feature capabilities that are not yet available in the Azure portal, such as core reports in a standard profile; rules engine, advanced HTTP reports, and real-time stats and alerts in a premium profile. The SSO URI changes approximately every 10 minutes.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return SsoUri
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SsoUri profilesGenerateSsoUri(String resourceGroupName, String profileName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SsoUri> localVarResp = profilesGenerateSsoUriWithHttpInfo(resourceGroupName, profileName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Generates a dynamic SSO URI used to sign in to the CDN supplemental portal. Supplemental portal is used to configure advanced feature capabilities that are not yet available in the Azure portal, such as core reports in a standard profile; rules engine, advanced HTTP reports, and real-time stats and alerts in a premium profile. The SSO URI changes approximately every 10 minutes.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;SsoUri&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SsoUri> profilesGenerateSsoUriWithHttpInfo(String resourceGroupName, String profileName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = profilesGenerateSsoUriValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SsoUri>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generates a dynamic SSO URI used to sign in to the CDN supplemental portal. Supplemental portal is used to configure advanced feature capabilities that are not yet available in the Azure portal, such as core reports in a standard profile; rules engine, advanced HTTP reports, and real-time stats and alerts in a premium profile. The SSO URI changes approximately every 10 minutes.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGenerateSsoUriAsync(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback<SsoUri> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesGenerateSsoUriValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SsoUri>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesGet
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGetCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesGetValidateBeforeCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling profilesGet(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling profilesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesGet(Async)");
        }

        return profilesGetCall(resourceGroupName, profileName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a CDN profile with the specified profile name under the specified subscription and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Profile profilesGet(String resourceGroupName, String profileName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Profile> localVarResp = profilesGetWithHttpInfo(resourceGroupName, profileName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a CDN profile with the specified profile name under the specified subscription and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> profilesGetWithHttpInfo(String resourceGroupName, String profileName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = profilesGetValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a CDN profile with the specified profile name under the specified subscription and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGetAsync(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesGetValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesList
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Cdn/profiles"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesList(Async)");
        }

        return profilesListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all of the CDN profiles within an Azure subscription.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ProfileListResult profilesList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProfileListResult> localVarResp = profilesListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the CDN profiles within an Azure subscription.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;ProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileListResult> profilesListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = profilesListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProfileListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the CDN profiles within an Azure subscription.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesListAsync(String subscriptionId, String apiVersion, final ApiCallback<ProfileListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProfileListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesListByResourceGroup
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesListByResourceGroupCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesListByResourceGroupValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling profilesListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesListByResourceGroup(Async)");
        }

        return profilesListByResourceGroupCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all of the CDN profiles within a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ProfileListResult profilesListByResourceGroup(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProfileListResult> localVarResp = profilesListByResourceGroupWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the CDN profiles within a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;ProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileListResult> profilesListByResourceGroupWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = profilesListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProfileListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the CDN profiles within a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesListByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<ProfileListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProfileListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesListResourceUsage
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesListResourceUsageCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/checkResourceUsage"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesListResourceUsageValidateBeforeCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling profilesListResourceUsage(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling profilesListResourceUsage(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesListResourceUsage(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesListResourceUsage(Async)");
        }

        return profilesListResourceUsageCall(resourceGroupName, profileName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Checks the quota and actual usage of endpoints under the given CDN profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ResourceUsageListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceUsageListResult profilesListResourceUsage(String resourceGroupName, String profileName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ResourceUsageListResult> localVarResp = profilesListResourceUsageWithHttpInfo(resourceGroupName, profileName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks the quota and actual usage of endpoints under the given CDN profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;ResourceUsageListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceUsageListResult> profilesListResourceUsageWithHttpInfo(String resourceGroupName, String profileName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = profilesListResourceUsageValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ResourceUsageListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks the quota and actual usage of endpoints under the given CDN profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesListResourceUsageAsync(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback<ResourceUsageListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesListResourceUsageValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ResourceUsageListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesListSupportedOptimizationTypes
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesListSupportedOptimizationTypesCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/getSupportedOptimizationTypes"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesListSupportedOptimizationTypesValidateBeforeCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling profilesListSupportedOptimizationTypes(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling profilesListSupportedOptimizationTypes(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesListSupportedOptimizationTypes(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesListSupportedOptimizationTypes(Async)");
        }

        return profilesListSupportedOptimizationTypesCall(resourceGroupName, profileName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets the supported optimization types for the current profile. A user can create an endpoint with an optimization type from the listed values.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return SupportedOptimizationTypesListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SupportedOptimizationTypesListResult profilesListSupportedOptimizationTypes(String resourceGroupName, String profileName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SupportedOptimizationTypesListResult> localVarResp = profilesListSupportedOptimizationTypesWithHttpInfo(resourceGroupName, profileName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the supported optimization types for the current profile. A user can create an endpoint with an optimization type from the listed values.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;SupportedOptimizationTypesListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupportedOptimizationTypesListResult> profilesListSupportedOptimizationTypesWithHttpInfo(String resourceGroupName, String profileName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = profilesListSupportedOptimizationTypesValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SupportedOptimizationTypesListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the supported optimization types for the current profile. A user can create an endpoint with an optimization type from the listed values.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesListSupportedOptimizationTypesAsync(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, final ApiCallback<SupportedOptimizationTypesListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesListSupportedOptimizationTypesValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SupportedOptimizationTypesListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesUpdate
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param profileUpdateParameters Profile properties needed to update an existing profile. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesUpdateCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, ProfileUpdateParameters profileUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profileUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesUpdateValidateBeforeCall(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, ProfileUpdateParameters profileUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling profilesUpdate(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling profilesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesUpdate(Async)");
        }

        // verify the required parameter 'profileUpdateParameters' is set
        if (profileUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'profileUpdateParameters' when calling profilesUpdate(Async)");
        }

        return profilesUpdateCall(resourceGroupName, profileName, subscriptionId, apiVersion, profileUpdateParameters, _callback);

    }

    /**
     * 
     * Updates an existing CDN profile with the specified profile name under the specified subscription and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param profileUpdateParameters Profile properties needed to update an existing profile. (required)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Profile profilesUpdate(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, ProfileUpdateParameters profileUpdateParameters) throws ApiException {
        ApiResponse<Profile> localVarResp = profilesUpdateWithHttpInfo(resourceGroupName, profileName, subscriptionId, apiVersion, profileUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing CDN profile with the specified profile name under the specified subscription and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param profileUpdateParameters Profile properties needed to update an existing profile. (required)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> profilesUpdateWithHttpInfo(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, ProfileUpdateParameters profileUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = profilesUpdateValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, profileUpdateParameters, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing CDN profile with the specified profile name under the specified subscription and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param profileUpdateParameters Profile properties needed to update an existing profile. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesUpdateAsync(String resourceGroupName, String profileName, String subscriptionId, String apiVersion, ProfileUpdateParameters profileUpdateParameters, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesUpdateValidateBeforeCall(resourceGroupName, profileName, subscriptionId, apiVersion, profileUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
