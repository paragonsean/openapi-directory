/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
 */
@JsonAdapter(QueryStringCachingBehavior.Adapter.class)
public enum QueryStringCachingBehavior {
  
  IGNORE_QUERY_STRING("IgnoreQueryString"),
  
  BYPASS_CACHING("BypassCaching"),
  
  USE_QUERY_STRING("UseQueryString"),
  
  NOT_SET("NotSet");

  private String value;

  QueryStringCachingBehavior(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static QueryStringCachingBehavior fromValue(String value) {
    for (QueryStringCachingBehavior b : QueryStringCachingBehavior.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<QueryStringCachingBehavior> {
    @Override
    public void write(final JsonWriter jsonWriter, final QueryStringCachingBehavior enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public QueryStringCachingBehavior read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return QueryStringCachingBehavior.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    QueryStringCachingBehavior.fromValue(value);
  }
}

