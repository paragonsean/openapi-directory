/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ValidateProbeInput;
import org.openapitools.client.model.ValidateProbeOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ValidateProbeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ValidateProbeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ValidateProbeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for validateProbe
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param validateProbeInput Input to check. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateProbeCall(String subscriptionId, String apiVersion, ValidateProbeInput validateProbeInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validateProbeInput;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Cdn/validateProbe"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateProbeValidateBeforeCall(String subscriptionId, String apiVersion, ValidateProbeInput validateProbeInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling validateProbe(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling validateProbe(Async)");
        }

        // verify the required parameter 'validateProbeInput' is set
        if (validateProbeInput == null) {
            throw new ApiException("Missing the required parameter 'validateProbeInput' when calling validateProbe(Async)");
        }

        return validateProbeCall(subscriptionId, apiVersion, validateProbeInput, _callback);

    }

    /**
     * 
     * Check if the probe path is a valid path and the file can be accessed. Probe path is the path to a file hosted on the origin server to help accelerate the delivery of dynamic content via the CDN endpoint. This path is relative to the origin path specified in the endpoint configuration.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param validateProbeInput Input to check. (required)
     * @return ValidateProbeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ValidateProbeOutput validateProbe(String subscriptionId, String apiVersion, ValidateProbeInput validateProbeInput) throws ApiException {
        ApiResponse<ValidateProbeOutput> localVarResp = validateProbeWithHttpInfo(subscriptionId, apiVersion, validateProbeInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Check if the probe path is a valid path and the file can be accessed. Probe path is the path to a file hosted on the origin server to help accelerate the delivery of dynamic content via the CDN endpoint. This path is relative to the origin path specified in the endpoint configuration.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param validateProbeInput Input to check. (required)
     * @return ApiResponse&lt;ValidateProbeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateProbeOutput> validateProbeWithHttpInfo(String subscriptionId, String apiVersion, ValidateProbeInput validateProbeInput) throws ApiException {
        okhttp3.Call localVarCall = validateProbeValidateBeforeCall(subscriptionId, apiVersion, validateProbeInput, null);
        Type localVarReturnType = new TypeToken<ValidateProbeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check if the probe path is a valid path and the file can be accessed. Probe path is the path to a file hosted on the origin server to help accelerate the delivery of dynamic content via the CDN endpoint. This path is relative to the origin path specified in the endpoint configuration.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param validateProbeInput Input to check. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateProbeAsync(String subscriptionId, String apiVersion, ValidateProbeInput validateProbeInput, final ApiCallback<ValidateProbeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateProbeValidateBeforeCall(subscriptionId, apiVersion, validateProbeInput, _callback);
        Type localVarReturnType = new TypeToken<ValidateProbeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
