/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The JSON object that contains the properties of the origin.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:20.982534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OriginUpdatePropertiesParameters {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_HTTP_PORT = "httpPort";
  @SerializedName(SERIALIZED_NAME_HTTP_PORT)
  private Integer httpPort;

  public static final String SERIALIZED_NAME_HTTPS_PORT = "httpsPort";
  @SerializedName(SERIALIZED_NAME_HTTPS_PORT)
  private Integer httpsPort;

  public static final String SERIALIZED_NAME_ORIGIN_HOST_HEADER = "originHostHeader";
  @SerializedName(SERIALIZED_NAME_ORIGIN_HOST_HEADER)
  private String originHostHeader;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public OriginUpdatePropertiesParameters() {
  }

  public OriginUpdatePropertiesParameters enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Origin is enabled for load balancing or not
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public OriginUpdatePropertiesParameters hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * The address of the origin. Domain names, IPv4 addresses, and IPv6 addresses are supported.This should be unique across all origins in an endpoint.
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public OriginUpdatePropertiesParameters httpPort(Integer httpPort) {
    this.httpPort = httpPort;
    return this;
  }

  /**
   * The value of the HTTP port. Must be between 1 and 65535.
   * minimum: 1
   * maximum: 65535
   * @return httpPort
   */
  @javax.annotation.Nullable
  public Integer getHttpPort() {
    return httpPort;
  }

  public void setHttpPort(Integer httpPort) {
    this.httpPort = httpPort;
  }


  public OriginUpdatePropertiesParameters httpsPort(Integer httpsPort) {
    this.httpsPort = httpsPort;
    return this;
  }

  /**
   * The value of the HTTPS port. Must be between 1 and 65535.
   * minimum: 1
   * maximum: 65535
   * @return httpsPort
   */
  @javax.annotation.Nullable
  public Integer getHttpsPort() {
    return httpsPort;
  }

  public void setHttpsPort(Integer httpsPort) {
    this.httpsPort = httpsPort;
  }


  public OriginUpdatePropertiesParameters originHostHeader(String originHostHeader) {
    this.originHostHeader = originHostHeader;
    return this;
  }

  /**
   * The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. This overrides the host header defined at Endpoint
   * @return originHostHeader
   */
  @javax.annotation.Nullable
  public String getOriginHostHeader() {
    return originHostHeader;
  }

  public void setOriginHostHeader(String originHostHeader) {
    this.originHostHeader = originHostHeader;
  }


  public OriginUpdatePropertiesParameters priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5
   * minimum: 1
   * maximum: 5
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public OriginUpdatePropertiesParameters weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Weight of the origin in given origin group for load balancing. Must be between 1 and 1000
   * minimum: 1
   * maximum: 1000
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OriginUpdatePropertiesParameters originUpdatePropertiesParameters = (OriginUpdatePropertiesParameters) o;
    return Objects.equals(this.enabled, originUpdatePropertiesParameters.enabled) &&
        Objects.equals(this.hostName, originUpdatePropertiesParameters.hostName) &&
        Objects.equals(this.httpPort, originUpdatePropertiesParameters.httpPort) &&
        Objects.equals(this.httpsPort, originUpdatePropertiesParameters.httpsPort) &&
        Objects.equals(this.originHostHeader, originUpdatePropertiesParameters.originHostHeader) &&
        Objects.equals(this.priority, originUpdatePropertiesParameters.priority) &&
        Objects.equals(this.weight, originUpdatePropertiesParameters.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, hostName, httpPort, httpsPort, originHostHeader, priority, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OriginUpdatePropertiesParameters {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    httpPort: ").append(toIndentedString(httpPort)).append("\n");
    sb.append("    httpsPort: ").append(toIndentedString(httpsPort)).append("\n");
    sb.append("    originHostHeader: ").append(toIndentedString(originHostHeader)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("hostName");
    openapiFields.add("httpPort");
    openapiFields.add("httpsPort");
    openapiFields.add("originHostHeader");
    openapiFields.add("priority");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OriginUpdatePropertiesParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OriginUpdatePropertiesParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OriginUpdatePropertiesParameters is not found in the empty JSON string", OriginUpdatePropertiesParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OriginUpdatePropertiesParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OriginUpdatePropertiesParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if ((jsonObj.get("originHostHeader") != null && !jsonObj.get("originHostHeader").isJsonNull()) && !jsonObj.get("originHostHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originHostHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originHostHeader").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OriginUpdatePropertiesParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OriginUpdatePropertiesParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OriginUpdatePropertiesParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OriginUpdatePropertiesParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<OriginUpdatePropertiesParameters>() {
           @Override
           public void write(JsonWriter out, OriginUpdatePropertiesParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OriginUpdatePropertiesParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OriginUpdatePropertiesParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OriginUpdatePropertiesParameters
   * @throws IOException if the JSON string is invalid with respect to OriginUpdatePropertiesParameters
   */
  public static OriginUpdatePropertiesParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OriginUpdatePropertiesParameters.class);
  }

  /**
   * Convert an instance of OriginUpdatePropertiesParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

