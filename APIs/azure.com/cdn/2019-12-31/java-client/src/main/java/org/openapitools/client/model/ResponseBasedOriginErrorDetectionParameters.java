/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HttpErrorRangeParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The JSON object that contains the properties to determine origin health using real requests/responses.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:20.982534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResponseBasedOriginErrorDetectionParameters {
  public static final String SERIALIZED_NAME_HTTP_ERROR_RANGES = "httpErrorRanges";
  @SerializedName(SERIALIZED_NAME_HTTP_ERROR_RANGES)
  private List<HttpErrorRangeParameters> httpErrorRanges = new ArrayList<>();

  /**
   * Type of response errors for real user requests for which origin will be deemed unhealthy
   */
  @JsonAdapter(ResponseBasedDetectedErrorTypesEnum.Adapter.class)
  public enum ResponseBasedDetectedErrorTypesEnum {
    NONE("None"),
    
    TCP_ERRORS_ONLY("TcpErrorsOnly"),
    
    TCP_AND_HTTP_ERRORS("TcpAndHttpErrors");

    private String value;

    ResponseBasedDetectedErrorTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseBasedDetectedErrorTypesEnum fromValue(String value) {
      for (ResponseBasedDetectedErrorTypesEnum b : ResponseBasedDetectedErrorTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseBasedDetectedErrorTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseBasedDetectedErrorTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseBasedDetectedErrorTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseBasedDetectedErrorTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResponseBasedDetectedErrorTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_BASED_DETECTED_ERROR_TYPES = "responseBasedDetectedErrorTypes";
  @SerializedName(SERIALIZED_NAME_RESPONSE_BASED_DETECTED_ERROR_TYPES)
  private ResponseBasedDetectedErrorTypesEnum responseBasedDetectedErrorTypes;

  public static final String SERIALIZED_NAME_RESPONSE_BASED_FAILOVER_THRESHOLD_PERCENTAGE = "responseBasedFailoverThresholdPercentage";
  @SerializedName(SERIALIZED_NAME_RESPONSE_BASED_FAILOVER_THRESHOLD_PERCENTAGE)
  private Integer responseBasedFailoverThresholdPercentage;

  public ResponseBasedOriginErrorDetectionParameters() {
  }

  public ResponseBasedOriginErrorDetectionParameters httpErrorRanges(List<HttpErrorRangeParameters> httpErrorRanges) {
    this.httpErrorRanges = httpErrorRanges;
    return this;
  }

  public ResponseBasedOriginErrorDetectionParameters addHttpErrorRangesItem(HttpErrorRangeParameters httpErrorRangesItem) {
    if (this.httpErrorRanges == null) {
      this.httpErrorRanges = new ArrayList<>();
    }
    this.httpErrorRanges.add(httpErrorRangesItem);
    return this;
  }

  /**
   * The list of Http status code ranges that are considered as server errors for origin and it is marked as unhealthy.
   * @return httpErrorRanges
   */
  @javax.annotation.Nullable
  public List<HttpErrorRangeParameters> getHttpErrorRanges() {
    return httpErrorRanges;
  }

  public void setHttpErrorRanges(List<HttpErrorRangeParameters> httpErrorRanges) {
    this.httpErrorRanges = httpErrorRanges;
  }


  public ResponseBasedOriginErrorDetectionParameters responseBasedDetectedErrorTypes(ResponseBasedDetectedErrorTypesEnum responseBasedDetectedErrorTypes) {
    this.responseBasedDetectedErrorTypes = responseBasedDetectedErrorTypes;
    return this;
  }

  /**
   * Type of response errors for real user requests for which origin will be deemed unhealthy
   * @return responseBasedDetectedErrorTypes
   */
  @javax.annotation.Nullable
  public ResponseBasedDetectedErrorTypesEnum getResponseBasedDetectedErrorTypes() {
    return responseBasedDetectedErrorTypes;
  }

  public void setResponseBasedDetectedErrorTypes(ResponseBasedDetectedErrorTypesEnum responseBasedDetectedErrorTypes) {
    this.responseBasedDetectedErrorTypes = responseBasedDetectedErrorTypes;
  }


  public ResponseBasedOriginErrorDetectionParameters responseBasedFailoverThresholdPercentage(Integer responseBasedFailoverThresholdPercentage) {
    this.responseBasedFailoverThresholdPercentage = responseBasedFailoverThresholdPercentage;
    return this;
  }

  /**
   * The percentage of failed requests in the sample where failover should trigger.
   * minimum: 0
   * maximum: 100
   * @return responseBasedFailoverThresholdPercentage
   */
  @javax.annotation.Nullable
  public Integer getResponseBasedFailoverThresholdPercentage() {
    return responseBasedFailoverThresholdPercentage;
  }

  public void setResponseBasedFailoverThresholdPercentage(Integer responseBasedFailoverThresholdPercentage) {
    this.responseBasedFailoverThresholdPercentage = responseBasedFailoverThresholdPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseBasedOriginErrorDetectionParameters responseBasedOriginErrorDetectionParameters = (ResponseBasedOriginErrorDetectionParameters) o;
    return Objects.equals(this.httpErrorRanges, responseBasedOriginErrorDetectionParameters.httpErrorRanges) &&
        Objects.equals(this.responseBasedDetectedErrorTypes, responseBasedOriginErrorDetectionParameters.responseBasedDetectedErrorTypes) &&
        Objects.equals(this.responseBasedFailoverThresholdPercentage, responseBasedOriginErrorDetectionParameters.responseBasedFailoverThresholdPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpErrorRanges, responseBasedDetectedErrorTypes, responseBasedFailoverThresholdPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseBasedOriginErrorDetectionParameters {\n");
    sb.append("    httpErrorRanges: ").append(toIndentedString(httpErrorRanges)).append("\n");
    sb.append("    responseBasedDetectedErrorTypes: ").append(toIndentedString(responseBasedDetectedErrorTypes)).append("\n");
    sb.append("    responseBasedFailoverThresholdPercentage: ").append(toIndentedString(responseBasedFailoverThresholdPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("httpErrorRanges");
    openapiFields.add("responseBasedDetectedErrorTypes");
    openapiFields.add("responseBasedFailoverThresholdPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseBasedOriginErrorDetectionParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseBasedOriginErrorDetectionParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseBasedOriginErrorDetectionParameters is not found in the empty JSON string", ResponseBasedOriginErrorDetectionParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseBasedOriginErrorDetectionParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseBasedOriginErrorDetectionParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("httpErrorRanges") != null && !jsonObj.get("httpErrorRanges").isJsonNull()) {
        JsonArray jsonArrayhttpErrorRanges = jsonObj.getAsJsonArray("httpErrorRanges");
        if (jsonArrayhttpErrorRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("httpErrorRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `httpErrorRanges` to be an array in the JSON string but got `%s`", jsonObj.get("httpErrorRanges").toString()));
          }

          // validate the optional field `httpErrorRanges` (array)
          for (int i = 0; i < jsonArrayhttpErrorRanges.size(); i++) {
            HttpErrorRangeParameters.validateJsonElement(jsonArrayhttpErrorRanges.get(i));
          };
        }
      }
      if ((jsonObj.get("responseBasedDetectedErrorTypes") != null && !jsonObj.get("responseBasedDetectedErrorTypes").isJsonNull()) && !jsonObj.get("responseBasedDetectedErrorTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseBasedDetectedErrorTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseBasedDetectedErrorTypes").toString()));
      }
      // validate the optional field `responseBasedDetectedErrorTypes`
      if (jsonObj.get("responseBasedDetectedErrorTypes") != null && !jsonObj.get("responseBasedDetectedErrorTypes").isJsonNull()) {
        ResponseBasedDetectedErrorTypesEnum.validateJsonElement(jsonObj.get("responseBasedDetectedErrorTypes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseBasedOriginErrorDetectionParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseBasedOriginErrorDetectionParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseBasedOriginErrorDetectionParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseBasedOriginErrorDetectionParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseBasedOriginErrorDetectionParameters>() {
           @Override
           public void write(JsonWriter out, ResponseBasedOriginErrorDetectionParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseBasedOriginErrorDetectionParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseBasedOriginErrorDetectionParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseBasedOriginErrorDetectionParameters
   * @throws IOException if the JSON string is invalid with respect to ResponseBasedOriginErrorDetectionParameters
   */
  public static ResponseBasedOriginErrorDetectionParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseBasedOriginErrorDetectionParameters.class);
  }

  /**
   * Convert an instance of ResponseBasedOriginErrorDetectionParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

