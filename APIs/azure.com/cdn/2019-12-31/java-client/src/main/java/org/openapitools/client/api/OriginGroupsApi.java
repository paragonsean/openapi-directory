/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.OriginGroup;
import org.openapitools.client.model.OriginGroupListResult;
import org.openapitools.client.model.OriginGroupUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OriginGroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OriginGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OriginGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for originGroupsCreate
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param originGroup Origin group properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new origin group has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originGroupsCreateCall(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, OriginGroup originGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = originGroup;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/originGroups/{originGroupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "originGroupName" + "}", localVarApiClient.escapeString(originGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call originGroupsCreateValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, OriginGroup originGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling originGroupsCreate(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling originGroupsCreate(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling originGroupsCreate(Async)");
        }

        // verify the required parameter 'originGroupName' is set
        if (originGroupName == null) {
            throw new ApiException("Missing the required parameter 'originGroupName' when calling originGroupsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling originGroupsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling originGroupsCreate(Async)");
        }

        // verify the required parameter 'originGroup' is set
        if (originGroup == null) {
            throw new ApiException("Missing the required parameter 'originGroup' when calling originGroupsCreate(Async)");
        }

        return originGroupsCreateCall(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, originGroup, _callback);

    }

    /**
     * 
     * Creates a new origin group within the specified endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param originGroup Origin group properties (required)
     * @return OriginGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new origin group has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public OriginGroup originGroupsCreate(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, OriginGroup originGroup) throws ApiException {
        ApiResponse<OriginGroup> localVarResp = originGroupsCreateWithHttpInfo(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, originGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new origin group within the specified endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param originGroup Origin group properties (required)
     * @return ApiResponse&lt;OriginGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new origin group has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OriginGroup> originGroupsCreateWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, OriginGroup originGroup) throws ApiException {
        okhttp3.Call localVarCall = originGroupsCreateValidateBeforeCall(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, originGroup, null);
        Type localVarReturnType = new TypeToken<OriginGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new origin group within the specified endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param originGroup Origin group properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new origin group has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originGroupsCreateAsync(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, OriginGroup originGroup, final ApiCallback<OriginGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = originGroupsCreateValidateBeforeCall(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, originGroup, _callback);
        Type localVarReturnType = new TypeToken<OriginGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for originGroupsDelete
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the origin was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originGroupsDeleteCall(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/originGroups/{originGroupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "originGroupName" + "}", localVarApiClient.escapeString(originGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call originGroupsDeleteValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling originGroupsDelete(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling originGroupsDelete(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling originGroupsDelete(Async)");
        }

        // verify the required parameter 'originGroupName' is set
        if (originGroupName == null) {
            throw new ApiException("Missing the required parameter 'originGroupName' when calling originGroupsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling originGroupsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling originGroupsDelete(Async)");
        }

        return originGroupsDeleteCall(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing origin group within an endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the origin was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void originGroupsDelete(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion) throws ApiException {
        originGroupsDeleteWithHttpInfo(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Deletes an existing origin group within an endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the origin was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> originGroupsDeleteWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = originGroupsDeleteValidateBeforeCall(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing origin group within an endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the origin was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originGroupsDeleteAsync(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = originGroupsDeleteValidateBeforeCall(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for originGroupsGet
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originGroupsGetCall(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/originGroups/{originGroupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "originGroupName" + "}", localVarApiClient.escapeString(originGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call originGroupsGetValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling originGroupsGet(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling originGroupsGet(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling originGroupsGet(Async)");
        }

        // verify the required parameter 'originGroupName' is set
        if (originGroupName == null) {
            throw new ApiException("Missing the required parameter 'originGroupName' when calling originGroupsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling originGroupsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling originGroupsGet(Async)");
        }

        return originGroupsGetCall(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets an existing origin group within an endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return OriginGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public OriginGroup originGroupsGet(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<OriginGroup> localVarResp = originGroupsGetWithHttpInfo(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an existing origin group within an endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;OriginGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OriginGroup> originGroupsGetWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = originGroupsGetValidateBeforeCall(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<OriginGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an existing origin group within an endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originGroupsGetAsync(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, final ApiCallback<OriginGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = originGroupsGetValidateBeforeCall(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OriginGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for originGroupsListByEndpoint
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originGroupsListByEndpointCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/originGroups"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call originGroupsListByEndpointValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling originGroupsListByEndpoint(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling originGroupsListByEndpoint(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling originGroupsListByEndpoint(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling originGroupsListByEndpoint(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling originGroupsListByEndpoint(Async)");
        }

        return originGroupsListByEndpointCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all of the existing origin groups within an endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return OriginGroupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public OriginGroupListResult originGroupsListByEndpoint(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<OriginGroupListResult> localVarResp = originGroupsListByEndpointWithHttpInfo(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the existing origin groups within an endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @return ApiResponse&lt;OriginGroupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OriginGroupListResult> originGroupsListByEndpointWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = originGroupsListByEndpointValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<OriginGroupListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the existing origin groups within an endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originGroupsListByEndpointAsync(String resourceGroupName, String profileName, String endpointName, String subscriptionId, String apiVersion, final ApiCallback<OriginGroupListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = originGroupsListByEndpointValidateBeforeCall(resourceGroupName, profileName, endpointName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OriginGroupListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for originGroupsUpdate
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param originGroupUpdateProperties Origin group properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originGroupsUpdateCall(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, OriginGroupUpdateParameters originGroupUpdateProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = originGroupUpdateProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/originGroups/{originGroupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "originGroupName" + "}", localVarApiClient.escapeString(originGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call originGroupsUpdateValidateBeforeCall(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, OriginGroupUpdateParameters originGroupUpdateProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling originGroupsUpdate(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling originGroupsUpdate(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling originGroupsUpdate(Async)");
        }

        // verify the required parameter 'originGroupName' is set
        if (originGroupName == null) {
            throw new ApiException("Missing the required parameter 'originGroupName' when calling originGroupsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling originGroupsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling originGroupsUpdate(Async)");
        }

        // verify the required parameter 'originGroupUpdateProperties' is set
        if (originGroupUpdateProperties == null) {
            throw new ApiException("Missing the required parameter 'originGroupUpdateProperties' when calling originGroupsUpdate(Async)");
        }

        return originGroupsUpdateCall(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, originGroupUpdateProperties, _callback);

    }

    /**
     * 
     * Updates an existing origin group within an endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param originGroupUpdateProperties Origin group properties (required)
     * @return OriginGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public OriginGroup originGroupsUpdate(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, OriginGroupUpdateParameters originGroupUpdateProperties) throws ApiException {
        ApiResponse<OriginGroup> localVarResp = originGroupsUpdateWithHttpInfo(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, originGroupUpdateProperties);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing origin group within an endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param originGroupUpdateProperties Origin group properties (required)
     * @return ApiResponse&lt;OriginGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OriginGroup> originGroupsUpdateWithHttpInfo(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, OriginGroupUpdateParameters originGroupUpdateProperties) throws ApiException {
        okhttp3.Call localVarCall = originGroupsUpdateValidateBeforeCall(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, originGroupUpdateProperties, null);
        Type localVarReturnType = new TypeToken<OriginGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing origin group within an endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName Name of the CDN profile which is unique within the resource group. (required)
     * @param endpointName Name of the endpoint under the profile which is unique globally. (required)
     * @param originGroupName Name of the origin group which is unique within the endpoint. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-04-02. (required)
     * @param originGroupUpdateProperties Origin group properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originGroupsUpdateAsync(String resourceGroupName, String profileName, String endpointName, String originGroupName, String subscriptionId, String apiVersion, OriginGroupUpdateParameters originGroupUpdateProperties, final ApiCallback<OriginGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = originGroupsUpdateValidateBeforeCall(resourceGroupName, profileName, endpointName, originGroupName, subscriptionId, apiVersion, originGroupUpdateProperties, _callback);
        Type localVarReturnType = new TypeToken<OriginGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
