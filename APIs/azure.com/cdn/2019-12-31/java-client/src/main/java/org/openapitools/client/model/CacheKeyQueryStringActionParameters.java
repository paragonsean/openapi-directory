/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the parameters for the cache-key query string action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:20.982534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CacheKeyQueryStringActionParameters {
  /**
   * Gets or Sets atOdataType
   */
  @JsonAdapter(AtOdataTypeEnum.Adapter.class)
  public enum AtOdataTypeEnum {
    _MICROSOFT_AZURE_CDN_MODELS_DELIVERY_RULE_CACHE_KEY_QUERY_STRING_BEHAVIOR_ACTION_PARAMETERS("#Microsoft.Azure.Cdn.Models.DeliveryRuleCacheKeyQueryStringBehaviorActionParameters");

    private String value;

    AtOdataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AtOdataTypeEnum fromValue(String value) {
      for (AtOdataTypeEnum b : AtOdataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AtOdataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AtOdataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AtOdataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AtOdataTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AtOdataTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AT_ODATA_TYPE = "@odata.type";
  @SerializedName(SERIALIZED_NAME_AT_ODATA_TYPE)
  private AtOdataTypeEnum atOdataType;

  public static final String SERIALIZED_NAME_QUERY_PARAMETERS = "queryParameters";
  @SerializedName(SERIALIZED_NAME_QUERY_PARAMETERS)
  private String queryParameters;

  /**
   * Caching behavior for the requests
   */
  @JsonAdapter(QueryStringBehaviorEnum.Adapter.class)
  public enum QueryStringBehaviorEnum {
    INCLUDE("Include"),
    
    INCLUDE_ALL("IncludeAll"),
    
    EXCLUDE("Exclude"),
    
    EXCLUDE_ALL("ExcludeAll");

    private String value;

    QueryStringBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QueryStringBehaviorEnum fromValue(String value) {
      for (QueryStringBehaviorEnum b : QueryStringBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QueryStringBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QueryStringBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QueryStringBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QueryStringBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QueryStringBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUERY_STRING_BEHAVIOR = "queryStringBehavior";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING_BEHAVIOR)
  private QueryStringBehaviorEnum queryStringBehavior;

  public CacheKeyQueryStringActionParameters() {
  }

  public CacheKeyQueryStringActionParameters atOdataType(AtOdataTypeEnum atOdataType) {
    this.atOdataType = atOdataType;
    return this;
  }

  /**
   * Get atOdataType
   * @return atOdataType
   */
  @javax.annotation.Nonnull
  public AtOdataTypeEnum getAtOdataType() {
    return atOdataType;
  }

  public void setAtOdataType(AtOdataTypeEnum atOdataType) {
    this.atOdataType = atOdataType;
  }


  public CacheKeyQueryStringActionParameters queryParameters(String queryParameters) {
    this.queryParameters = queryParameters;
    return this;
  }

  /**
   * query parameters to include or exclude (comma separated).
   * @return queryParameters
   */
  @javax.annotation.Nullable
  public String getQueryParameters() {
    return queryParameters;
  }

  public void setQueryParameters(String queryParameters) {
    this.queryParameters = queryParameters;
  }


  public CacheKeyQueryStringActionParameters queryStringBehavior(QueryStringBehaviorEnum queryStringBehavior) {
    this.queryStringBehavior = queryStringBehavior;
    return this;
  }

  /**
   * Caching behavior for the requests
   * @return queryStringBehavior
   */
  @javax.annotation.Nonnull
  public QueryStringBehaviorEnum getQueryStringBehavior() {
    return queryStringBehavior;
  }

  public void setQueryStringBehavior(QueryStringBehaviorEnum queryStringBehavior) {
    this.queryStringBehavior = queryStringBehavior;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CacheKeyQueryStringActionParameters cacheKeyQueryStringActionParameters = (CacheKeyQueryStringActionParameters) o;
    return Objects.equals(this.atOdataType, cacheKeyQueryStringActionParameters.atOdataType) &&
        Objects.equals(this.queryParameters, cacheKeyQueryStringActionParameters.queryParameters) &&
        Objects.equals(this.queryStringBehavior, cacheKeyQueryStringActionParameters.queryStringBehavior);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(atOdataType, queryParameters, queryStringBehavior);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CacheKeyQueryStringActionParameters {\n");
    sb.append("    atOdataType: ").append(toIndentedString(atOdataType)).append("\n");
    sb.append("    queryParameters: ").append(toIndentedString(queryParameters)).append("\n");
    sb.append("    queryStringBehavior: ").append(toIndentedString(queryStringBehavior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.type");
    openapiFields.add("queryParameters");
    openapiFields.add("queryStringBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@odata.type");
    openapiRequiredFields.add("queryStringBehavior");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CacheKeyQueryStringActionParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CacheKeyQueryStringActionParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CacheKeyQueryStringActionParameters is not found in the empty JSON string", CacheKeyQueryStringActionParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CacheKeyQueryStringActionParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CacheKeyQueryStringActionParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CacheKeyQueryStringActionParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("@odata.type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@odata.type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@odata.type").toString()));
      }
      // validate the required field `@odata.type`
      AtOdataTypeEnum.validateJsonElement(jsonObj.get("@odata.type"));
      if ((jsonObj.get("queryParameters") != null && !jsonObj.get("queryParameters").isJsonNull()) && !jsonObj.get("queryParameters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryParameters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryParameters").toString()));
      }
      if (!jsonObj.get("queryStringBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryStringBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryStringBehavior").toString()));
      }
      // validate the required field `queryStringBehavior`
      QueryStringBehaviorEnum.validateJsonElement(jsonObj.get("queryStringBehavior"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CacheKeyQueryStringActionParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CacheKeyQueryStringActionParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CacheKeyQueryStringActionParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CacheKeyQueryStringActionParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CacheKeyQueryStringActionParameters>() {
           @Override
           public void write(JsonWriter out, CacheKeyQueryStringActionParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CacheKeyQueryStringActionParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CacheKeyQueryStringActionParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CacheKeyQueryStringActionParameters
   * @throws IOException if the JSON string is invalid with respect to CacheKeyQueryStringActionParameters
   */
  public static CacheKeyQueryStringActionParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CacheKeyQueryStringActionParameters.class);
  }

  /**
   * Convert an instance of CacheKeyQueryStringActionParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

