/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The JSON object that contains the properties to send health probes to origin.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:20.982534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HealthProbeParameters {
  public static final String SERIALIZED_NAME_PROBE_INTERVAL_IN_SECONDS = "probeIntervalInSeconds";
  @SerializedName(SERIALIZED_NAME_PROBE_INTERVAL_IN_SECONDS)
  private Integer probeIntervalInSeconds;

  public static final String SERIALIZED_NAME_PROBE_PATH = "probePath";
  @SerializedName(SERIALIZED_NAME_PROBE_PATH)
  private String probePath;

  /**
   * Protocol to use for health probe.
   */
  @JsonAdapter(ProbeProtocolEnum.Adapter.class)
  public enum ProbeProtocolEnum {
    NOT_SET("NotSet"),
    
    HTTP("Http"),
    
    HTTPS("Https");

    private String value;

    ProbeProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProbeProtocolEnum fromValue(String value) {
      for (ProbeProtocolEnum b : ProbeProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProbeProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProbeProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProbeProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProbeProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProbeProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROBE_PROTOCOL = "probeProtocol";
  @SerializedName(SERIALIZED_NAME_PROBE_PROTOCOL)
  private ProbeProtocolEnum probeProtocol;

  /**
   * The type of health probe request that is made.
   */
  @JsonAdapter(ProbeRequestTypeEnum.Adapter.class)
  public enum ProbeRequestTypeEnum {
    NOT_SET("NotSet"),
    
    GET("GET"),
    
    HEAD("HEAD");

    private String value;

    ProbeRequestTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProbeRequestTypeEnum fromValue(String value) {
      for (ProbeRequestTypeEnum b : ProbeRequestTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProbeRequestTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProbeRequestTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProbeRequestTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProbeRequestTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProbeRequestTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROBE_REQUEST_TYPE = "probeRequestType";
  @SerializedName(SERIALIZED_NAME_PROBE_REQUEST_TYPE)
  private ProbeRequestTypeEnum probeRequestType;

  public HealthProbeParameters() {
  }

  public HealthProbeParameters probeIntervalInSeconds(Integer probeIntervalInSeconds) {
    this.probeIntervalInSeconds = probeIntervalInSeconds;
    return this;
  }

  /**
   * The number of seconds between health probes.Default is 240sec.
   * minimum: 1
   * maximum: 255
   * @return probeIntervalInSeconds
   */
  @javax.annotation.Nullable
  public Integer getProbeIntervalInSeconds() {
    return probeIntervalInSeconds;
  }

  public void setProbeIntervalInSeconds(Integer probeIntervalInSeconds) {
    this.probeIntervalInSeconds = probeIntervalInSeconds;
  }


  public HealthProbeParameters probePath(String probePath) {
    this.probePath = probePath;
    return this;
  }

  /**
   * The path relative to the origin that is used to determine the health of the origin.
   * @return probePath
   */
  @javax.annotation.Nullable
  public String getProbePath() {
    return probePath;
  }

  public void setProbePath(String probePath) {
    this.probePath = probePath;
  }


  public HealthProbeParameters probeProtocol(ProbeProtocolEnum probeProtocol) {
    this.probeProtocol = probeProtocol;
    return this;
  }

  /**
   * Protocol to use for health probe.
   * @return probeProtocol
   */
  @javax.annotation.Nullable
  public ProbeProtocolEnum getProbeProtocol() {
    return probeProtocol;
  }

  public void setProbeProtocol(ProbeProtocolEnum probeProtocol) {
    this.probeProtocol = probeProtocol;
  }


  public HealthProbeParameters probeRequestType(ProbeRequestTypeEnum probeRequestType) {
    this.probeRequestType = probeRequestType;
    return this;
  }

  /**
   * The type of health probe request that is made.
   * @return probeRequestType
   */
  @javax.annotation.Nullable
  public ProbeRequestTypeEnum getProbeRequestType() {
    return probeRequestType;
  }

  public void setProbeRequestType(ProbeRequestTypeEnum probeRequestType) {
    this.probeRequestType = probeRequestType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthProbeParameters healthProbeParameters = (HealthProbeParameters) o;
    return Objects.equals(this.probeIntervalInSeconds, healthProbeParameters.probeIntervalInSeconds) &&
        Objects.equals(this.probePath, healthProbeParameters.probePath) &&
        Objects.equals(this.probeProtocol, healthProbeParameters.probeProtocol) &&
        Objects.equals(this.probeRequestType, healthProbeParameters.probeRequestType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(probeIntervalInSeconds, probePath, probeProtocol, probeRequestType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthProbeParameters {\n");
    sb.append("    probeIntervalInSeconds: ").append(toIndentedString(probeIntervalInSeconds)).append("\n");
    sb.append("    probePath: ").append(toIndentedString(probePath)).append("\n");
    sb.append("    probeProtocol: ").append(toIndentedString(probeProtocol)).append("\n");
    sb.append("    probeRequestType: ").append(toIndentedString(probeRequestType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("probeIntervalInSeconds");
    openapiFields.add("probePath");
    openapiFields.add("probeProtocol");
    openapiFields.add("probeRequestType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HealthProbeParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthProbeParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthProbeParameters is not found in the empty JSON string", HealthProbeParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HealthProbeParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthProbeParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("probePath") != null && !jsonObj.get("probePath").isJsonNull()) && !jsonObj.get("probePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `probePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("probePath").toString()));
      }
      if ((jsonObj.get("probeProtocol") != null && !jsonObj.get("probeProtocol").isJsonNull()) && !jsonObj.get("probeProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `probeProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("probeProtocol").toString()));
      }
      // validate the optional field `probeProtocol`
      if (jsonObj.get("probeProtocol") != null && !jsonObj.get("probeProtocol").isJsonNull()) {
        ProbeProtocolEnum.validateJsonElement(jsonObj.get("probeProtocol"));
      }
      if ((jsonObj.get("probeRequestType") != null && !jsonObj.get("probeRequestType").isJsonNull()) && !jsonObj.get("probeRequestType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `probeRequestType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("probeRequestType").toString()));
      }
      // validate the optional field `probeRequestType`
      if (jsonObj.get("probeRequestType") != null && !jsonObj.get("probeRequestType").isJsonNull()) {
        ProbeRequestTypeEnum.validateJsonElement(jsonObj.get("probeRequestType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthProbeParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthProbeParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthProbeParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthProbeParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthProbeParameters>() {
           @Override
           public void write(JsonWriter out, HealthProbeParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthProbeParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HealthProbeParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HealthProbeParameters
   * @throws IOException if the JSON string is invalid with respect to HealthProbeParameters
   */
  public static HealthProbeParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthProbeParameters.class);
  }

  /**
   * Convert an instance of HealthProbeParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

