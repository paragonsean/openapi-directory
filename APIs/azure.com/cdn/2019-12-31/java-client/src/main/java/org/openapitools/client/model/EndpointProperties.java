/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeepCreatedOrigin;
import org.openapitools.client.model.DeepCreatedOriginGroup;
import org.openapitools.client.model.EndpointPropertiesUpdateParametersDeliveryPolicy;
import org.openapitools.client.model.GeoFilter;
import org.openapitools.client.model.OptimizationType;
import org.openapitools.client.model.QueryStringCachingBehavior;
import org.openapitools.client.model.ResourceReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The JSON object that contains the properties required to create an endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:20.982534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointProperties {
  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_ORIGIN_GROUPS = "originGroups";
  @SerializedName(SERIALIZED_NAME_ORIGIN_GROUPS)
  private List<DeepCreatedOriginGroup> originGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIGINS = "origins";
  @SerializedName(SERIALIZED_NAME_ORIGINS)
  private List<DeepCreatedOrigin> origins = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  /**
   * Resource status of the endpoint.
   */
  @JsonAdapter(ResourceStateEnum.Adapter.class)
  public enum ResourceStateEnum {
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    RUNNING("Running"),
    
    STARTING("Starting"),
    
    STOPPED("Stopped"),
    
    STOPPING("Stopping");

    private String value;

    ResourceStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceStateEnum fromValue(String value) {
      for (ResourceStateEnum b : ResourceStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_STATE = "resourceState";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATE)
  private ResourceStateEnum resourceState;

  public static final String SERIALIZED_NAME_CONTENT_TYPES_TO_COMPRESS = "contentTypesToCompress";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPES_TO_COMPRESS)
  private List<String> contentTypesToCompress = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_ORIGIN_GROUP = "defaultOriginGroup";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ORIGIN_GROUP)
  private ResourceReference defaultOriginGroup;

  public static final String SERIALIZED_NAME_DELIVERY_POLICY = "deliveryPolicy";
  @SerializedName(SERIALIZED_NAME_DELIVERY_POLICY)
  private EndpointPropertiesUpdateParametersDeliveryPolicy deliveryPolicy;

  public static final String SERIALIZED_NAME_GEO_FILTERS = "geoFilters";
  @SerializedName(SERIALIZED_NAME_GEO_FILTERS)
  private List<GeoFilter> geoFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_COMPRESSION_ENABLED = "isCompressionEnabled";
  @SerializedName(SERIALIZED_NAME_IS_COMPRESSION_ENABLED)
  private Boolean isCompressionEnabled;

  public static final String SERIALIZED_NAME_IS_HTTP_ALLOWED = "isHttpAllowed";
  @SerializedName(SERIALIZED_NAME_IS_HTTP_ALLOWED)
  private Boolean isHttpAllowed;

  public static final String SERIALIZED_NAME_IS_HTTPS_ALLOWED = "isHttpsAllowed";
  @SerializedName(SERIALIZED_NAME_IS_HTTPS_ALLOWED)
  private Boolean isHttpsAllowed;

  public static final String SERIALIZED_NAME_OPTIMIZATION_TYPE = "optimizationType";
  @SerializedName(SERIALIZED_NAME_OPTIMIZATION_TYPE)
  private OptimizationType optimizationType;

  public static final String SERIALIZED_NAME_ORIGIN_HOST_HEADER = "originHostHeader";
  @SerializedName(SERIALIZED_NAME_ORIGIN_HOST_HEADER)
  private String originHostHeader;

  public static final String SERIALIZED_NAME_ORIGIN_PATH = "originPath";
  @SerializedName(SERIALIZED_NAME_ORIGIN_PATH)
  private String originPath;

  public static final String SERIALIZED_NAME_PROBE_PATH = "probePath";
  @SerializedName(SERIALIZED_NAME_PROBE_PATH)
  private String probePath;

  public static final String SERIALIZED_NAME_QUERY_STRING_CACHING_BEHAVIOR = "queryStringCachingBehavior";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING_CACHING_BEHAVIOR)
  private QueryStringCachingBehavior queryStringCachingBehavior;

  public EndpointProperties() {
  }

  public EndpointProperties(
     String hostName, 
     String provisioningState, 
     ResourceStateEnum resourceState
  ) {
    this();
    this.hostName = hostName;
    this.provisioningState = provisioningState;
    this.resourceState = resourceState;
  }

  /**
   * The host name of the endpoint structured as {endpointName}.{DNSZone}, e.g. contoso.azureedge.net
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }



  public EndpointProperties originGroups(List<DeepCreatedOriginGroup> originGroups) {
    this.originGroups = originGroups;
    return this;
  }

  public EndpointProperties addOriginGroupsItem(DeepCreatedOriginGroup originGroupsItem) {
    if (this.originGroups == null) {
      this.originGroups = new ArrayList<>();
    }
    this.originGroups.add(originGroupsItem);
    return this;
  }

  /**
   * The origin groups comprising of origins that are used for load balancing the traffic based on availability.
   * @return originGroups
   */
  @javax.annotation.Nullable
  public List<DeepCreatedOriginGroup> getOriginGroups() {
    return originGroups;
  }

  public void setOriginGroups(List<DeepCreatedOriginGroup> originGroups) {
    this.originGroups = originGroups;
  }


  public EndpointProperties origins(List<DeepCreatedOrigin> origins) {
    this.origins = origins;
    return this;
  }

  public EndpointProperties addOriginsItem(DeepCreatedOrigin originsItem) {
    if (this.origins == null) {
      this.origins = new ArrayList<>();
    }
    this.origins.add(originsItem);
    return this;
  }

  /**
   * The source of the content being delivered via CDN.
   * @return origins
   */
  @javax.annotation.Nonnull
  public List<DeepCreatedOrigin> getOrigins() {
    return origins;
  }

  public void setOrigins(List<DeepCreatedOrigin> origins) {
    this.origins = origins;
  }


  /**
   * Provisioning status of the endpoint.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * Resource status of the endpoint.
   * @return resourceState
   */
  @javax.annotation.Nullable
  public ResourceStateEnum getResourceState() {
    return resourceState;
  }



  public EndpointProperties contentTypesToCompress(List<String> contentTypesToCompress) {
    this.contentTypesToCompress = contentTypesToCompress;
    return this;
  }

  public EndpointProperties addContentTypesToCompressItem(String contentTypesToCompressItem) {
    if (this.contentTypesToCompress == null) {
      this.contentTypesToCompress = new ArrayList<>();
    }
    this.contentTypesToCompress.add(contentTypesToCompressItem);
    return this;
  }

  /**
   * List of content types on which compression applies. The value should be a valid MIME type.
   * @return contentTypesToCompress
   */
  @javax.annotation.Nullable
  public List<String> getContentTypesToCompress() {
    return contentTypesToCompress;
  }

  public void setContentTypesToCompress(List<String> contentTypesToCompress) {
    this.contentTypesToCompress = contentTypesToCompress;
  }


  public EndpointProperties defaultOriginGroup(ResourceReference defaultOriginGroup) {
    this.defaultOriginGroup = defaultOriginGroup;
    return this;
  }

  /**
   * Get defaultOriginGroup
   * @return defaultOriginGroup
   */
  @javax.annotation.Nullable
  public ResourceReference getDefaultOriginGroup() {
    return defaultOriginGroup;
  }

  public void setDefaultOriginGroup(ResourceReference defaultOriginGroup) {
    this.defaultOriginGroup = defaultOriginGroup;
  }


  public EndpointProperties deliveryPolicy(EndpointPropertiesUpdateParametersDeliveryPolicy deliveryPolicy) {
    this.deliveryPolicy = deliveryPolicy;
    return this;
  }

  /**
   * Get deliveryPolicy
   * @return deliveryPolicy
   */
  @javax.annotation.Nullable
  public EndpointPropertiesUpdateParametersDeliveryPolicy getDeliveryPolicy() {
    return deliveryPolicy;
  }

  public void setDeliveryPolicy(EndpointPropertiesUpdateParametersDeliveryPolicy deliveryPolicy) {
    this.deliveryPolicy = deliveryPolicy;
  }


  public EndpointProperties geoFilters(List<GeoFilter> geoFilters) {
    this.geoFilters = geoFilters;
    return this;
  }

  public EndpointProperties addGeoFiltersItem(GeoFilter geoFiltersItem) {
    if (this.geoFilters == null) {
      this.geoFilters = new ArrayList<>();
    }
    this.geoFilters.add(geoFiltersItem);
    return this;
  }

  /**
   * List of rules defining the user&#39;s geo access within a CDN endpoint. Each geo filter defines an access rule to a specified path or content, e.g. block APAC for path /pictures/
   * @return geoFilters
   */
  @javax.annotation.Nullable
  public List<GeoFilter> getGeoFilters() {
    return geoFilters;
  }

  public void setGeoFilters(List<GeoFilter> geoFilters) {
    this.geoFilters = geoFilters;
  }


  public EndpointProperties isCompressionEnabled(Boolean isCompressionEnabled) {
    this.isCompressionEnabled = isCompressionEnabled;
    return this;
  }

  /**
   * Indicates whether content compression is enabled on CDN. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won&#39;t be compressed on CDN when requested content is smaller than 1 byte or larger than 1 MB.
   * @return isCompressionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsCompressionEnabled() {
    return isCompressionEnabled;
  }

  public void setIsCompressionEnabled(Boolean isCompressionEnabled) {
    this.isCompressionEnabled = isCompressionEnabled;
  }


  public EndpointProperties isHttpAllowed(Boolean isHttpAllowed) {
    this.isHttpAllowed = isHttpAllowed;
    return this;
  }

  /**
   * Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.
   * @return isHttpAllowed
   */
  @javax.annotation.Nullable
  public Boolean getIsHttpAllowed() {
    return isHttpAllowed;
  }

  public void setIsHttpAllowed(Boolean isHttpAllowed) {
    this.isHttpAllowed = isHttpAllowed;
  }


  public EndpointProperties isHttpsAllowed(Boolean isHttpsAllowed) {
    this.isHttpsAllowed = isHttpsAllowed;
    return this;
  }

  /**
   * Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.
   * @return isHttpsAllowed
   */
  @javax.annotation.Nullable
  public Boolean getIsHttpsAllowed() {
    return isHttpsAllowed;
  }

  public void setIsHttpsAllowed(Boolean isHttpsAllowed) {
    this.isHttpsAllowed = isHttpsAllowed;
  }


  public EndpointProperties optimizationType(OptimizationType optimizationType) {
    this.optimizationType = optimizationType;
    return this;
  }

  /**
   * Get optimizationType
   * @return optimizationType
   */
  @javax.annotation.Nullable
  public OptimizationType getOptimizationType() {
    return optimizationType;
  }

  public void setOptimizationType(OptimizationType optimizationType) {
    this.optimizationType = optimizationType;
  }


  public EndpointProperties originHostHeader(String originHostHeader) {
    this.originHostHeader = originHostHeader;
    return this;
  }

  /**
   * The host header value sent to the origin with each request. This property at Endpoint is only allowed when endpoint uses single origin and can be overridden by the same property specified at origin.If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.
   * @return originHostHeader
   */
  @javax.annotation.Nullable
  public String getOriginHostHeader() {
    return originHostHeader;
  }

  public void setOriginHostHeader(String originHostHeader) {
    this.originHostHeader = originHostHeader;
  }


  public EndpointProperties originPath(String originPath) {
    this.originPath = originPath;
    return this;
  }

  /**
   * A directory path on the origin that CDN can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
   * @return originPath
   */
  @javax.annotation.Nullable
  public String getOriginPath() {
    return originPath;
  }

  public void setOriginPath(String originPath) {
    this.originPath = originPath;
  }


  public EndpointProperties probePath(String probePath) {
    this.probePath = probePath;
    return this;
  }

  /**
   * Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the origin path. This property is only relevant when using a single origin.
   * @return probePath
   */
  @javax.annotation.Nullable
  public String getProbePath() {
    return probePath;
  }

  public void setProbePath(String probePath) {
    this.probePath = probePath;
  }


  public EndpointProperties queryStringCachingBehavior(QueryStringCachingBehavior queryStringCachingBehavior) {
    this.queryStringCachingBehavior = queryStringCachingBehavior;
    return this;
  }

  /**
   * Get queryStringCachingBehavior
   * @return queryStringCachingBehavior
   */
  @javax.annotation.Nullable
  public QueryStringCachingBehavior getQueryStringCachingBehavior() {
    return queryStringCachingBehavior;
  }

  public void setQueryStringCachingBehavior(QueryStringCachingBehavior queryStringCachingBehavior) {
    this.queryStringCachingBehavior = queryStringCachingBehavior;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointProperties endpointProperties = (EndpointProperties) o;
    return Objects.equals(this.hostName, endpointProperties.hostName) &&
        Objects.equals(this.originGroups, endpointProperties.originGroups) &&
        Objects.equals(this.origins, endpointProperties.origins) &&
        Objects.equals(this.provisioningState, endpointProperties.provisioningState) &&
        Objects.equals(this.resourceState, endpointProperties.resourceState) &&
        Objects.equals(this.contentTypesToCompress, endpointProperties.contentTypesToCompress) &&
        Objects.equals(this.defaultOriginGroup, endpointProperties.defaultOriginGroup) &&
        Objects.equals(this.deliveryPolicy, endpointProperties.deliveryPolicy) &&
        Objects.equals(this.geoFilters, endpointProperties.geoFilters) &&
        Objects.equals(this.isCompressionEnabled, endpointProperties.isCompressionEnabled) &&
        Objects.equals(this.isHttpAllowed, endpointProperties.isHttpAllowed) &&
        Objects.equals(this.isHttpsAllowed, endpointProperties.isHttpsAllowed) &&
        Objects.equals(this.optimizationType, endpointProperties.optimizationType) &&
        Objects.equals(this.originHostHeader, endpointProperties.originHostHeader) &&
        Objects.equals(this.originPath, endpointProperties.originPath) &&
        Objects.equals(this.probePath, endpointProperties.probePath) &&
        Objects.equals(this.queryStringCachingBehavior, endpointProperties.queryStringCachingBehavior);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostName, originGroups, origins, provisioningState, resourceState, contentTypesToCompress, defaultOriginGroup, deliveryPolicy, geoFilters, isCompressionEnabled, isHttpAllowed, isHttpsAllowed, optimizationType, originHostHeader, originPath, probePath, queryStringCachingBehavior);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointProperties {\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    originGroups: ").append(toIndentedString(originGroups)).append("\n");
    sb.append("    origins: ").append(toIndentedString(origins)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceState: ").append(toIndentedString(resourceState)).append("\n");
    sb.append("    contentTypesToCompress: ").append(toIndentedString(contentTypesToCompress)).append("\n");
    sb.append("    defaultOriginGroup: ").append(toIndentedString(defaultOriginGroup)).append("\n");
    sb.append("    deliveryPolicy: ").append(toIndentedString(deliveryPolicy)).append("\n");
    sb.append("    geoFilters: ").append(toIndentedString(geoFilters)).append("\n");
    sb.append("    isCompressionEnabled: ").append(toIndentedString(isCompressionEnabled)).append("\n");
    sb.append("    isHttpAllowed: ").append(toIndentedString(isHttpAllowed)).append("\n");
    sb.append("    isHttpsAllowed: ").append(toIndentedString(isHttpsAllowed)).append("\n");
    sb.append("    optimizationType: ").append(toIndentedString(optimizationType)).append("\n");
    sb.append("    originHostHeader: ").append(toIndentedString(originHostHeader)).append("\n");
    sb.append("    originPath: ").append(toIndentedString(originPath)).append("\n");
    sb.append("    probePath: ").append(toIndentedString(probePath)).append("\n");
    sb.append("    queryStringCachingBehavior: ").append(toIndentedString(queryStringCachingBehavior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentTypesToCompress");
    openapiFields.add("defaultOriginGroup");
    openapiFields.add("deliveryPolicy");
    openapiFields.add("geoFilters");
    openapiFields.add("isCompressionEnabled");
    openapiFields.add("isHttpAllowed");
    openapiFields.add("isHttpsAllowed");
    openapiFields.add("optimizationType");
    openapiFields.add("originHostHeader");
    openapiFields.add("originPath");
    openapiFields.add("probePath");
    openapiFields.add("queryStringCachingBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("origins");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointProperties is not found in the empty JSON string", EndpointProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EndpointProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if (jsonObj.get("originGroups") != null && !jsonObj.get("originGroups").isJsonNull()) {
        JsonArray jsonArrayoriginGroups = jsonObj.getAsJsonArray("originGroups");
        if (jsonArrayoriginGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("originGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `originGroups` to be an array in the JSON string but got `%s`", jsonObj.get("originGroups").toString()));
          }

          // validate the optional field `originGroups` (array)
          for (int i = 0; i < jsonArrayoriginGroups.size(); i++) {
            DeepCreatedOriginGroup.validateJsonElement(jsonArrayoriginGroups.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("origins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `origins` to be an array in the JSON string but got `%s`", jsonObj.get("origins").toString()));
      }

      JsonArray jsonArrayorigins = jsonObj.getAsJsonArray("origins");
      // validate the required field `origins` (array)
      for (int i = 0; i < jsonArrayorigins.size(); i++) {
        DeepCreatedOrigin.validateJsonElement(jsonArrayorigins.get(i));
      };
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) && !jsonObj.get("resourceState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceState").toString()));
      }
      // validate the optional field `resourceState`
      if (jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) {
        ResourceStateEnum.validateJsonElement(jsonObj.get("resourceState"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contentTypesToCompress") != null && !jsonObj.get("contentTypesToCompress").isJsonNull() && !jsonObj.get("contentTypesToCompress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentTypesToCompress` to be an array in the JSON string but got `%s`", jsonObj.get("contentTypesToCompress").toString()));
      }
      // validate the optional field `defaultOriginGroup`
      if (jsonObj.get("defaultOriginGroup") != null && !jsonObj.get("defaultOriginGroup").isJsonNull()) {
        ResourceReference.validateJsonElement(jsonObj.get("defaultOriginGroup"));
      }
      // validate the optional field `deliveryPolicy`
      if (jsonObj.get("deliveryPolicy") != null && !jsonObj.get("deliveryPolicy").isJsonNull()) {
        EndpointPropertiesUpdateParametersDeliveryPolicy.validateJsonElement(jsonObj.get("deliveryPolicy"));
      }
      if (jsonObj.get("geoFilters") != null && !jsonObj.get("geoFilters").isJsonNull()) {
        JsonArray jsonArraygeoFilters = jsonObj.getAsJsonArray("geoFilters");
        if (jsonArraygeoFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("geoFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `geoFilters` to be an array in the JSON string but got `%s`", jsonObj.get("geoFilters").toString()));
          }

          // validate the optional field `geoFilters` (array)
          for (int i = 0; i < jsonArraygeoFilters.size(); i++) {
            GeoFilter.validateJsonElement(jsonArraygeoFilters.get(i));
          };
        }
      }
      // validate the optional field `optimizationType`
      if (jsonObj.get("optimizationType") != null && !jsonObj.get("optimizationType").isJsonNull()) {
        OptimizationType.validateJsonElement(jsonObj.get("optimizationType"));
      }
      if ((jsonObj.get("originHostHeader") != null && !jsonObj.get("originHostHeader").isJsonNull()) && !jsonObj.get("originHostHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originHostHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originHostHeader").toString()));
      }
      if ((jsonObj.get("originPath") != null && !jsonObj.get("originPath").isJsonNull()) && !jsonObj.get("originPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originPath").toString()));
      }
      if ((jsonObj.get("probePath") != null && !jsonObj.get("probePath").isJsonNull()) && !jsonObj.get("probePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `probePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("probePath").toString()));
      }
      // validate the optional field `queryStringCachingBehavior`
      if (jsonObj.get("queryStringCachingBehavior") != null && !jsonObj.get("queryStringCachingBehavior").isJsonNull()) {
        QueryStringCachingBehavior.validateJsonElement(jsonObj.get("queryStringCachingBehavior"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointProperties>() {
           @Override
           public void write(JsonWriter out, EndpointProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointProperties
   * @throws IOException if the JSON string is invalid with respect to EndpointProperties
   */
  public static EndpointProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointProperties.class);
  }

  /**
   * Convert an instance of EndpointProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

