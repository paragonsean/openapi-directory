/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The JSON object that contains the properties of the custom domain to create.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:20.982534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomDomainProperties {
  /**
   * Provisioning status of Custom Https of the custom domain.
   */
  @JsonAdapter(CustomHttpsProvisioningStateEnum.Adapter.class)
  public enum CustomHttpsProvisioningStateEnum {
    ENABLING("Enabling"),
    
    ENABLED("Enabled"),
    
    DISABLING("Disabling"),
    
    DISABLED("Disabled"),
    
    FAILED("Failed");

    private String value;

    CustomHttpsProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomHttpsProvisioningStateEnum fromValue(String value) {
      for (CustomHttpsProvisioningStateEnum b : CustomHttpsProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomHttpsProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomHttpsProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomHttpsProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomHttpsProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomHttpsProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOM_HTTPS_PROVISIONING_STATE = "customHttpsProvisioningState";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HTTPS_PROVISIONING_STATE)
  private CustomHttpsProvisioningStateEnum customHttpsProvisioningState;

  /**
   * Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
   */
  @JsonAdapter(CustomHttpsProvisioningSubstateEnum.Adapter.class)
  public enum CustomHttpsProvisioningSubstateEnum {
    SUBMITTING_DOMAIN_CONTROL_VALIDATION_REQUEST("SubmittingDomainControlValidationRequest"),
    
    PENDING_DOMAIN_CONTROL_VALIDATION_R_EQUEST_APPROVAL("PendingDomainControlValidationREquestApproval"),
    
    DOMAIN_CONTROL_VALIDATION_REQUEST_APPROVED("DomainControlValidationRequestApproved"),
    
    DOMAIN_CONTROL_VALIDATION_REQUEST_REJECTED("DomainControlValidationRequestRejected"),
    
    DOMAIN_CONTROL_VALIDATION_REQUEST_TIMED_OUT("DomainControlValidationRequestTimedOut"),
    
    ISSUING_CERTIFICATE("IssuingCertificate"),
    
    DEPLOYING_CERTIFICATE("DeployingCertificate"),
    
    CERTIFICATE_DEPLOYED("CertificateDeployed"),
    
    DELETING_CERTIFICATE("DeletingCertificate"),
    
    CERTIFICATE_DELETED("CertificateDeleted");

    private String value;

    CustomHttpsProvisioningSubstateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomHttpsProvisioningSubstateEnum fromValue(String value) {
      for (CustomHttpsProvisioningSubstateEnum b : CustomHttpsProvisioningSubstateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomHttpsProvisioningSubstateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomHttpsProvisioningSubstateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomHttpsProvisioningSubstateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomHttpsProvisioningSubstateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomHttpsProvisioningSubstateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOM_HTTPS_PROVISIONING_SUBSTATE = "customHttpsProvisioningSubstate";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HTTPS_PROVISIONING_SUBSTATE)
  private CustomHttpsProvisioningSubstateEnum customHttpsProvisioningSubstate;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  /**
   * Resource status of the custom domain.
   */
  @JsonAdapter(ResourceStateEnum.Adapter.class)
  public enum ResourceStateEnum {
    CREATING("Creating"),
    
    ACTIVE("Active"),
    
    DELETING("Deleting");

    private String value;

    ResourceStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceStateEnum fromValue(String value) {
      for (ResourceStateEnum b : ResourceStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_STATE = "resourceState";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATE)
  private ResourceStateEnum resourceState;

  public static final String SERIALIZED_NAME_VALIDATION_DATA = "validationData";
  @SerializedName(SERIALIZED_NAME_VALIDATION_DATA)
  private String validationData;

  public CustomDomainProperties() {
  }

  public CustomDomainProperties(
     CustomHttpsProvisioningStateEnum customHttpsProvisioningState, 
     CustomHttpsProvisioningSubstateEnum customHttpsProvisioningSubstate, 
     String provisioningState, 
     ResourceStateEnum resourceState
  ) {
    this();
    this.customHttpsProvisioningState = customHttpsProvisioningState;
    this.customHttpsProvisioningSubstate = customHttpsProvisioningSubstate;
    this.provisioningState = provisioningState;
    this.resourceState = resourceState;
  }

  /**
   * Provisioning status of Custom Https of the custom domain.
   * @return customHttpsProvisioningState
   */
  @javax.annotation.Nullable
  public CustomHttpsProvisioningStateEnum getCustomHttpsProvisioningState() {
    return customHttpsProvisioningState;
  }



  /**
   * Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
   * @return customHttpsProvisioningSubstate
   */
  @javax.annotation.Nullable
  public CustomHttpsProvisioningSubstateEnum getCustomHttpsProvisioningSubstate() {
    return customHttpsProvisioningSubstate;
  }



  public CustomDomainProperties hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * The host name of the custom domain. Must be a domain name.
   * @return hostName
   */
  @javax.annotation.Nonnull
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  /**
   * Provisioning status of the custom domain.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * Resource status of the custom domain.
   * @return resourceState
   */
  @javax.annotation.Nullable
  public ResourceStateEnum getResourceState() {
    return resourceState;
  }



  public CustomDomainProperties validationData(String validationData) {
    this.validationData = validationData;
    return this;
  }

  /**
   * Special validation or data may be required when delivering CDN to some regions due to local compliance reasons. E.g. ICP license number of a custom domain is required to deliver content in China.
   * @return validationData
   */
  @javax.annotation.Nullable
  public String getValidationData() {
    return validationData;
  }

  public void setValidationData(String validationData) {
    this.validationData = validationData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomDomainProperties customDomainProperties = (CustomDomainProperties) o;
    return Objects.equals(this.customHttpsProvisioningState, customDomainProperties.customHttpsProvisioningState) &&
        Objects.equals(this.customHttpsProvisioningSubstate, customDomainProperties.customHttpsProvisioningSubstate) &&
        Objects.equals(this.hostName, customDomainProperties.hostName) &&
        Objects.equals(this.provisioningState, customDomainProperties.provisioningState) &&
        Objects.equals(this.resourceState, customDomainProperties.resourceState) &&
        Objects.equals(this.validationData, customDomainProperties.validationData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customHttpsProvisioningState, customHttpsProvisioningSubstate, hostName, provisioningState, resourceState, validationData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomDomainProperties {\n");
    sb.append("    customHttpsProvisioningState: ").append(toIndentedString(customHttpsProvisioningState)).append("\n");
    sb.append("    customHttpsProvisioningSubstate: ").append(toIndentedString(customHttpsProvisioningSubstate)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceState: ").append(toIndentedString(resourceState)).append("\n");
    sb.append("    validationData: ").append(toIndentedString(validationData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customHttpsProvisioningState");
    openapiFields.add("customHttpsProvisioningSubstate");
    openapiFields.add("hostName");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceState");
    openapiFields.add("validationData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hostName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomDomainProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomDomainProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomDomainProperties is not found in the empty JSON string", CustomDomainProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomDomainProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomDomainProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomDomainProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customHttpsProvisioningState") != null && !jsonObj.get("customHttpsProvisioningState").isJsonNull()) && !jsonObj.get("customHttpsProvisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customHttpsProvisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customHttpsProvisioningState").toString()));
      }
      // validate the optional field `customHttpsProvisioningState`
      if (jsonObj.get("customHttpsProvisioningState") != null && !jsonObj.get("customHttpsProvisioningState").isJsonNull()) {
        CustomHttpsProvisioningStateEnum.validateJsonElement(jsonObj.get("customHttpsProvisioningState"));
      }
      if ((jsonObj.get("customHttpsProvisioningSubstate") != null && !jsonObj.get("customHttpsProvisioningSubstate").isJsonNull()) && !jsonObj.get("customHttpsProvisioningSubstate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customHttpsProvisioningSubstate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customHttpsProvisioningSubstate").toString()));
      }
      // validate the optional field `customHttpsProvisioningSubstate`
      if (jsonObj.get("customHttpsProvisioningSubstate") != null && !jsonObj.get("customHttpsProvisioningSubstate").isJsonNull()) {
        CustomHttpsProvisioningSubstateEnum.validateJsonElement(jsonObj.get("customHttpsProvisioningSubstate"));
      }
      if (!jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) && !jsonObj.get("resourceState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceState").toString()));
      }
      // validate the optional field `resourceState`
      if (jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) {
        ResourceStateEnum.validateJsonElement(jsonObj.get("resourceState"));
      }
      if ((jsonObj.get("validationData") != null && !jsonObj.get("validationData").isJsonNull()) && !jsonObj.get("validationData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationData").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomDomainProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomDomainProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomDomainProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomDomainProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomDomainProperties>() {
           @Override
           public void write(JsonWriter out, CustomDomainProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomDomainProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomDomainProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomDomainProperties
   * @throws IOException if the JSON string is invalid with respect to CustomDomainProperties
   */
  public static CustomDomainProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomDomainProperties.class);
  }

  /**
   * Convert an instance of CustomDomainProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

