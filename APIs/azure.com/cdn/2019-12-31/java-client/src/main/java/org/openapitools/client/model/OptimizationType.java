/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specifies what scenario the customer wants this CDN endpoint to optimize, e.g. Download, Media services. With this information we can apply scenario driven optimization.
 */
@JsonAdapter(OptimizationType.Adapter.class)
public enum OptimizationType {
  
  GENERAL_WEB_DELIVERY("GeneralWebDelivery"),
  
  GENERAL_MEDIA_STREAMING("GeneralMediaStreaming"),
  
  VIDEO_ON_DEMAND_MEDIA_STREAMING("VideoOnDemandMediaStreaming"),
  
  LARGE_FILE_DOWNLOAD("LargeFileDownload"),
  
  DYNAMIC_SITE_ACCELERATION("DynamicSiteAcceleration");

  private String value;

  OptimizationType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static OptimizationType fromValue(String value) {
    for (OptimizationType b : OptimizationType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<OptimizationType> {
    @Override
    public void write(final JsonWriter jsonWriter, final OptimizationType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public OptimizationType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return OptimizationType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    OptimizationType.fromValue(value);
  }
}

