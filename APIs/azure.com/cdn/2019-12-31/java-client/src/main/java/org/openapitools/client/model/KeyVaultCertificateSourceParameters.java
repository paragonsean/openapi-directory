/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the parameters for using a user&#39;s KeyVault certificate for securing custom domain.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:20.982534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeyVaultCertificateSourceParameters {
  /**
   * Gets or Sets atOdataType
   */
  @JsonAdapter(AtOdataTypeEnum.Adapter.class)
  public enum AtOdataTypeEnum {
    _MICROSOFT_AZURE_CDN_MODELS_KEY_VAULT_CERTIFICATE_SOURCE_PARAMETERS("#Microsoft.Azure.Cdn.Models.KeyVaultCertificateSourceParameters");

    private String value;

    AtOdataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AtOdataTypeEnum fromValue(String value) {
      for (AtOdataTypeEnum b : AtOdataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AtOdataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AtOdataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AtOdataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AtOdataTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AtOdataTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AT_ODATA_TYPE = "@odata.type";
  @SerializedName(SERIALIZED_NAME_AT_ODATA_TYPE)
  private AtOdataTypeEnum atOdataType;

  /**
   * Describes the action that shall be taken when the certificate is removed from Key Vault.
   */
  @JsonAdapter(DeleteRuleEnum.Adapter.class)
  public enum DeleteRuleEnum {
    NO_ACTION("NoAction");

    private String value;

    DeleteRuleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeleteRuleEnum fromValue(String value) {
      for (DeleteRuleEnum b : DeleteRuleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeleteRuleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeleteRuleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeleteRuleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeleteRuleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeleteRuleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELETE_RULE = "deleteRule";
  @SerializedName(SERIALIZED_NAME_DELETE_RULE)
  private DeleteRuleEnum deleteRule;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP_NAME = "resourceGroupName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP_NAME)
  private String resourceGroupName;

  public static final String SERIALIZED_NAME_SECRET_NAME = "secretName";
  @SerializedName(SERIALIZED_NAME_SECRET_NAME)
  private String secretName;

  public static final String SERIALIZED_NAME_SECRET_VERSION = "secretVersion";
  @SerializedName(SERIALIZED_NAME_SECRET_VERSION)
  private String secretVersion;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  /**
   * Describes the action that shall be taken when the certificate is updated in Key Vault.
   */
  @JsonAdapter(UpdateRuleEnum.Adapter.class)
  public enum UpdateRuleEnum {
    NO_ACTION("NoAction");

    private String value;

    UpdateRuleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpdateRuleEnum fromValue(String value) {
      for (UpdateRuleEnum b : UpdateRuleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpdateRuleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpdateRuleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpdateRuleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpdateRuleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UpdateRuleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPDATE_RULE = "updateRule";
  @SerializedName(SERIALIZED_NAME_UPDATE_RULE)
  private UpdateRuleEnum updateRule;

  public static final String SERIALIZED_NAME_VAULT_NAME = "vaultName";
  @SerializedName(SERIALIZED_NAME_VAULT_NAME)
  private String vaultName;

  public KeyVaultCertificateSourceParameters() {
  }

  public KeyVaultCertificateSourceParameters atOdataType(AtOdataTypeEnum atOdataType) {
    this.atOdataType = atOdataType;
    return this;
  }

  /**
   * Get atOdataType
   * @return atOdataType
   */
  @javax.annotation.Nonnull
  public AtOdataTypeEnum getAtOdataType() {
    return atOdataType;
  }

  public void setAtOdataType(AtOdataTypeEnum atOdataType) {
    this.atOdataType = atOdataType;
  }


  public KeyVaultCertificateSourceParameters deleteRule(DeleteRuleEnum deleteRule) {
    this.deleteRule = deleteRule;
    return this;
  }

  /**
   * Describes the action that shall be taken when the certificate is removed from Key Vault.
   * @return deleteRule
   */
  @javax.annotation.Nonnull
  public DeleteRuleEnum getDeleteRule() {
    return deleteRule;
  }

  public void setDeleteRule(DeleteRuleEnum deleteRule) {
    this.deleteRule = deleteRule;
  }


  public KeyVaultCertificateSourceParameters resourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
    return this;
  }

  /**
   * Resource group of the user&#39;s Key Vault containing the SSL certificate
   * @return resourceGroupName
   */
  @javax.annotation.Nonnull
  public String getResourceGroupName() {
    return resourceGroupName;
  }

  public void setResourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
  }


  public KeyVaultCertificateSourceParameters secretName(String secretName) {
    this.secretName = secretName;
    return this;
  }

  /**
   * The name of Key Vault Secret (representing the full certificate PFX) in Key Vault.
   * @return secretName
   */
  @javax.annotation.Nonnull
  public String getSecretName() {
    return secretName;
  }

  public void setSecretName(String secretName) {
    this.secretName = secretName;
  }


  public KeyVaultCertificateSourceParameters secretVersion(String secretVersion) {
    this.secretVersion = secretVersion;
    return this;
  }

  /**
   * The version(GUID) of Key Vault Secret in Key Vault.
   * @return secretVersion
   */
  @javax.annotation.Nonnull
  public String getSecretVersion() {
    return secretVersion;
  }

  public void setSecretVersion(String secretVersion) {
    this.secretVersion = secretVersion;
  }


  public KeyVaultCertificateSourceParameters subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Subscription Id of the user&#39;s Key Vault containing the SSL certificate
   * @return subscriptionId
   */
  @javax.annotation.Nonnull
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public KeyVaultCertificateSourceParameters updateRule(UpdateRuleEnum updateRule) {
    this.updateRule = updateRule;
    return this;
  }

  /**
   * Describes the action that shall be taken when the certificate is updated in Key Vault.
   * @return updateRule
   */
  @javax.annotation.Nonnull
  public UpdateRuleEnum getUpdateRule() {
    return updateRule;
  }

  public void setUpdateRule(UpdateRuleEnum updateRule) {
    this.updateRule = updateRule;
  }


  public KeyVaultCertificateSourceParameters vaultName(String vaultName) {
    this.vaultName = vaultName;
    return this;
  }

  /**
   * The name of the user&#39;s Key Vault containing the SSL certificate
   * @return vaultName
   */
  @javax.annotation.Nonnull
  public String getVaultName() {
    return vaultName;
  }

  public void setVaultName(String vaultName) {
    this.vaultName = vaultName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyVaultCertificateSourceParameters keyVaultCertificateSourceParameters = (KeyVaultCertificateSourceParameters) o;
    return Objects.equals(this.atOdataType, keyVaultCertificateSourceParameters.atOdataType) &&
        Objects.equals(this.deleteRule, keyVaultCertificateSourceParameters.deleteRule) &&
        Objects.equals(this.resourceGroupName, keyVaultCertificateSourceParameters.resourceGroupName) &&
        Objects.equals(this.secretName, keyVaultCertificateSourceParameters.secretName) &&
        Objects.equals(this.secretVersion, keyVaultCertificateSourceParameters.secretVersion) &&
        Objects.equals(this.subscriptionId, keyVaultCertificateSourceParameters.subscriptionId) &&
        Objects.equals(this.updateRule, keyVaultCertificateSourceParameters.updateRule) &&
        Objects.equals(this.vaultName, keyVaultCertificateSourceParameters.vaultName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atOdataType, deleteRule, resourceGroupName, secretName, secretVersion, subscriptionId, updateRule, vaultName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyVaultCertificateSourceParameters {\n");
    sb.append("    atOdataType: ").append(toIndentedString(atOdataType)).append("\n");
    sb.append("    deleteRule: ").append(toIndentedString(deleteRule)).append("\n");
    sb.append("    resourceGroupName: ").append(toIndentedString(resourceGroupName)).append("\n");
    sb.append("    secretName: ").append(toIndentedString(secretName)).append("\n");
    sb.append("    secretVersion: ").append(toIndentedString(secretVersion)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    updateRule: ").append(toIndentedString(updateRule)).append("\n");
    sb.append("    vaultName: ").append(toIndentedString(vaultName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.type");
    openapiFields.add("deleteRule");
    openapiFields.add("resourceGroupName");
    openapiFields.add("secretName");
    openapiFields.add("secretVersion");
    openapiFields.add("subscriptionId");
    openapiFields.add("updateRule");
    openapiFields.add("vaultName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@odata.type");
    openapiRequiredFields.add("deleteRule");
    openapiRequiredFields.add("resourceGroupName");
    openapiRequiredFields.add("secretName");
    openapiRequiredFields.add("secretVersion");
    openapiRequiredFields.add("subscriptionId");
    openapiRequiredFields.add("updateRule");
    openapiRequiredFields.add("vaultName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeyVaultCertificateSourceParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeyVaultCertificateSourceParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyVaultCertificateSourceParameters is not found in the empty JSON string", KeyVaultCertificateSourceParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeyVaultCertificateSourceParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyVaultCertificateSourceParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : KeyVaultCertificateSourceParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("@odata.type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@odata.type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@odata.type").toString()));
      }
      // validate the required field `@odata.type`
      AtOdataTypeEnum.validateJsonElement(jsonObj.get("@odata.type"));
      if (!jsonObj.get("deleteRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteRule").toString()));
      }
      // validate the required field `deleteRule`
      DeleteRuleEnum.validateJsonElement(jsonObj.get("deleteRule"));
      if (!jsonObj.get("resourceGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroupName").toString()));
      }
      if (!jsonObj.get("secretName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretName").toString()));
      }
      if (!jsonObj.get("secretVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretVersion").toString()));
      }
      if (!jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if (!jsonObj.get("updateRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateRule").toString()));
      }
      // validate the required field `updateRule`
      UpdateRuleEnum.validateJsonElement(jsonObj.get("updateRule"));
      if (!jsonObj.get("vaultName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vaultName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vaultName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyVaultCertificateSourceParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyVaultCertificateSourceParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyVaultCertificateSourceParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyVaultCertificateSourceParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyVaultCertificateSourceParameters>() {
           @Override
           public void write(JsonWriter out, KeyVaultCertificateSourceParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyVaultCertificateSourceParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeyVaultCertificateSourceParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeyVaultCertificateSourceParameters
   * @throws IOException if the JSON string is invalid with respect to KeyVaultCertificateSourceParameters
   */
  public static KeyVaultCertificateSourceParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyVaultCertificateSourceParameters.class);
  }

  /**
   * Convert an instance of KeyVaultCertificateSourceParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

