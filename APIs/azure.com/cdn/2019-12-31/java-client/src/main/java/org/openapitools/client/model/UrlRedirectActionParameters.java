/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the parameters for the url redirect action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:20.982534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UrlRedirectActionParameters {
  /**
   * Gets or Sets atOdataType
   */
  @JsonAdapter(AtOdataTypeEnum.Adapter.class)
  public enum AtOdataTypeEnum {
    _MICROSOFT_AZURE_CDN_MODELS_DELIVERY_RULE_URL_REDIRECT_ACTION_PARAMETERS("#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlRedirectActionParameters");

    private String value;

    AtOdataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AtOdataTypeEnum fromValue(String value) {
      for (AtOdataTypeEnum b : AtOdataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AtOdataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AtOdataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AtOdataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AtOdataTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AtOdataTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AT_ODATA_TYPE = "@odata.type";
  @SerializedName(SERIALIZED_NAME_AT_ODATA_TYPE)
  private AtOdataTypeEnum atOdataType;

  public static final String SERIALIZED_NAME_CUSTOM_FRAGMENT = "customFragment";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FRAGMENT)
  private String customFragment;

  public static final String SERIALIZED_NAME_CUSTOM_HOSTNAME = "customHostname";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HOSTNAME)
  private String customHostname;

  public static final String SERIALIZED_NAME_CUSTOM_PATH = "customPath";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PATH)
  private String customPath;

  public static final String SERIALIZED_NAME_CUSTOM_QUERY_STRING = "customQueryString";
  @SerializedName(SERIALIZED_NAME_CUSTOM_QUERY_STRING)
  private String customQueryString;

  /**
   * Protocol to use for the redirect. The default value is MatchRequest
   */
  @JsonAdapter(DestinationProtocolEnum.Adapter.class)
  public enum DestinationProtocolEnum {
    MATCH_REQUEST("MatchRequest"),
    
    HTTP("Http"),
    
    HTTPS("Https");

    private String value;

    DestinationProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DestinationProtocolEnum fromValue(String value) {
      for (DestinationProtocolEnum b : DestinationProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DestinationProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DestinationProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DestinationProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DestinationProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DestinationProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESTINATION_PROTOCOL = "destinationProtocol";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PROTOCOL)
  private DestinationProtocolEnum destinationProtocol;

  /**
   * The redirect type the rule will use when redirecting traffic.
   */
  @JsonAdapter(RedirectTypeEnum.Adapter.class)
  public enum RedirectTypeEnum {
    MOVED("Moved"),
    
    FOUND("Found"),
    
    TEMPORARY_REDIRECT("TemporaryRedirect"),
    
    PERMANENT_REDIRECT("PermanentRedirect");

    private String value;

    RedirectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedirectTypeEnum fromValue(String value) {
      for (RedirectTypeEnum b : RedirectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RedirectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedirectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedirectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedirectTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RedirectTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REDIRECT_TYPE = "redirectType";
  @SerializedName(SERIALIZED_NAME_REDIRECT_TYPE)
  private RedirectTypeEnum redirectType;

  public UrlRedirectActionParameters() {
  }

  public UrlRedirectActionParameters atOdataType(AtOdataTypeEnum atOdataType) {
    this.atOdataType = atOdataType;
    return this;
  }

  /**
   * Get atOdataType
   * @return atOdataType
   */
  @javax.annotation.Nonnull
  public AtOdataTypeEnum getAtOdataType() {
    return atOdataType;
  }

  public void setAtOdataType(AtOdataTypeEnum atOdataType) {
    this.atOdataType = atOdataType;
  }


  public UrlRedirectActionParameters customFragment(String customFragment) {
    this.customFragment = customFragment;
    return this;
  }

  /**
   * Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
   * @return customFragment
   */
  @javax.annotation.Nullable
  public String getCustomFragment() {
    return customFragment;
  }

  public void setCustomFragment(String customFragment) {
    this.customFragment = customFragment;
  }


  public UrlRedirectActionParameters customHostname(String customHostname) {
    this.customHostname = customHostname;
    return this;
  }

  /**
   * Host to redirect. Leave empty to use the incoming host as the destination host.
   * @return customHostname
   */
  @javax.annotation.Nullable
  public String getCustomHostname() {
    return customHostname;
  }

  public void setCustomHostname(String customHostname) {
    this.customHostname = customHostname;
  }


  public UrlRedirectActionParameters customPath(String customPath) {
    this.customPath = customPath;
    return this;
  }

  /**
   * The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
   * @return customPath
   */
  @javax.annotation.Nullable
  public String getCustomPath() {
    return customPath;
  }

  public void setCustomPath(String customPath) {
    this.customPath = customPath;
  }


  public UrlRedirectActionParameters customQueryString(String customQueryString) {
    this.customQueryString = customQueryString;
    return this;
  }

  /**
   * The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in &lt;key&gt;&#x3D;&lt;value&gt; format. ? and &amp; will be added automatically so do not include them.
   * @return customQueryString
   */
  @javax.annotation.Nullable
  public String getCustomQueryString() {
    return customQueryString;
  }

  public void setCustomQueryString(String customQueryString) {
    this.customQueryString = customQueryString;
  }


  public UrlRedirectActionParameters destinationProtocol(DestinationProtocolEnum destinationProtocol) {
    this.destinationProtocol = destinationProtocol;
    return this;
  }

  /**
   * Protocol to use for the redirect. The default value is MatchRequest
   * @return destinationProtocol
   */
  @javax.annotation.Nullable
  public DestinationProtocolEnum getDestinationProtocol() {
    return destinationProtocol;
  }

  public void setDestinationProtocol(DestinationProtocolEnum destinationProtocol) {
    this.destinationProtocol = destinationProtocol;
  }


  public UrlRedirectActionParameters redirectType(RedirectTypeEnum redirectType) {
    this.redirectType = redirectType;
    return this;
  }

  /**
   * The redirect type the rule will use when redirecting traffic.
   * @return redirectType
   */
  @javax.annotation.Nonnull
  public RedirectTypeEnum getRedirectType() {
    return redirectType;
  }

  public void setRedirectType(RedirectTypeEnum redirectType) {
    this.redirectType = redirectType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UrlRedirectActionParameters urlRedirectActionParameters = (UrlRedirectActionParameters) o;
    return Objects.equals(this.atOdataType, urlRedirectActionParameters.atOdataType) &&
        Objects.equals(this.customFragment, urlRedirectActionParameters.customFragment) &&
        Objects.equals(this.customHostname, urlRedirectActionParameters.customHostname) &&
        Objects.equals(this.customPath, urlRedirectActionParameters.customPath) &&
        Objects.equals(this.customQueryString, urlRedirectActionParameters.customQueryString) &&
        Objects.equals(this.destinationProtocol, urlRedirectActionParameters.destinationProtocol) &&
        Objects.equals(this.redirectType, urlRedirectActionParameters.redirectType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atOdataType, customFragment, customHostname, customPath, customQueryString, destinationProtocol, redirectType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UrlRedirectActionParameters {\n");
    sb.append("    atOdataType: ").append(toIndentedString(atOdataType)).append("\n");
    sb.append("    customFragment: ").append(toIndentedString(customFragment)).append("\n");
    sb.append("    customHostname: ").append(toIndentedString(customHostname)).append("\n");
    sb.append("    customPath: ").append(toIndentedString(customPath)).append("\n");
    sb.append("    customQueryString: ").append(toIndentedString(customQueryString)).append("\n");
    sb.append("    destinationProtocol: ").append(toIndentedString(destinationProtocol)).append("\n");
    sb.append("    redirectType: ").append(toIndentedString(redirectType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.type");
    openapiFields.add("customFragment");
    openapiFields.add("customHostname");
    openapiFields.add("customPath");
    openapiFields.add("customQueryString");
    openapiFields.add("destinationProtocol");
    openapiFields.add("redirectType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@odata.type");
    openapiRequiredFields.add("redirectType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UrlRedirectActionParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UrlRedirectActionParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UrlRedirectActionParameters is not found in the empty JSON string", UrlRedirectActionParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UrlRedirectActionParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UrlRedirectActionParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UrlRedirectActionParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("@odata.type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@odata.type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@odata.type").toString()));
      }
      // validate the required field `@odata.type`
      AtOdataTypeEnum.validateJsonElement(jsonObj.get("@odata.type"));
      if ((jsonObj.get("customFragment") != null && !jsonObj.get("customFragment").isJsonNull()) && !jsonObj.get("customFragment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customFragment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customFragment").toString()));
      }
      if ((jsonObj.get("customHostname") != null && !jsonObj.get("customHostname").isJsonNull()) && !jsonObj.get("customHostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customHostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customHostname").toString()));
      }
      if ((jsonObj.get("customPath") != null && !jsonObj.get("customPath").isJsonNull()) && !jsonObj.get("customPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customPath").toString()));
      }
      if ((jsonObj.get("customQueryString") != null && !jsonObj.get("customQueryString").isJsonNull()) && !jsonObj.get("customQueryString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customQueryString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customQueryString").toString()));
      }
      if ((jsonObj.get("destinationProtocol") != null && !jsonObj.get("destinationProtocol").isJsonNull()) && !jsonObj.get("destinationProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationProtocol").toString()));
      }
      // validate the optional field `destinationProtocol`
      if (jsonObj.get("destinationProtocol") != null && !jsonObj.get("destinationProtocol").isJsonNull()) {
        DestinationProtocolEnum.validateJsonElement(jsonObj.get("destinationProtocol"));
      }
      if (!jsonObj.get("redirectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectType").toString()));
      }
      // validate the required field `redirectType`
      RedirectTypeEnum.validateJsonElement(jsonObj.get("redirectType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UrlRedirectActionParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UrlRedirectActionParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UrlRedirectActionParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UrlRedirectActionParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<UrlRedirectActionParameters>() {
           @Override
           public void write(JsonWriter out, UrlRedirectActionParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UrlRedirectActionParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UrlRedirectActionParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UrlRedirectActionParameters
   * @throws IOException if the JSON string is invalid with respect to UrlRedirectActionParameters
   */
  public static UrlRedirectActionParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UrlRedirectActionParameters.class);
  }

  /**
   * Convert an instance of UrlRedirectActionParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

