# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyVaultCertificateSourceParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, odata_type: str=None, delete_rule: str=None, resource_group_name: str=None, secret_name: str=None, secret_version: str=None, subscription_id: str=None, update_rule: str=None, vault_name: str=None):
        """KeyVaultCertificateSourceParameters - a model defined in OpenAPI

        :param odata_type: The odata_type of this KeyVaultCertificateSourceParameters.
        :param delete_rule: The delete_rule of this KeyVaultCertificateSourceParameters.
        :param resource_group_name: The resource_group_name of this KeyVaultCertificateSourceParameters.
        :param secret_name: The secret_name of this KeyVaultCertificateSourceParameters.
        :param secret_version: The secret_version of this KeyVaultCertificateSourceParameters.
        :param subscription_id: The subscription_id of this KeyVaultCertificateSourceParameters.
        :param update_rule: The update_rule of this KeyVaultCertificateSourceParameters.
        :param vault_name: The vault_name of this KeyVaultCertificateSourceParameters.
        """
        self.openapi_types = {
            'odata_type': str,
            'delete_rule': str,
            'resource_group_name': str,
            'secret_name': str,
            'secret_version': str,
            'subscription_id': str,
            'update_rule': str,
            'vault_name': str
        }

        self.attribute_map = {
            'odata_type': '@odata.type',
            'delete_rule': 'deleteRule',
            'resource_group_name': 'resourceGroupName',
            'secret_name': 'secretName',
            'secret_version': 'secretVersion',
            'subscription_id': 'subscriptionId',
            'update_rule': 'updateRule',
            'vault_name': 'vaultName'
        }

        self._odata_type = odata_type
        self._delete_rule = delete_rule
        self._resource_group_name = resource_group_name
        self._secret_name = secret_name
        self._secret_version = secret_version
        self._subscription_id = subscription_id
        self._update_rule = update_rule
        self._vault_name = vault_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyVaultCertificateSourceParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyVaultCertificateSourceParameters of this KeyVaultCertificateSourceParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def odata_type(self):
        """Gets the odata_type of this KeyVaultCertificateSourceParameters.


        :return: The odata_type of this KeyVaultCertificateSourceParameters.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this KeyVaultCertificateSourceParameters.


        :param odata_type: The odata_type of this KeyVaultCertificateSourceParameters.
        :type odata_type: str
        """
        allowed_values = ["#Microsoft.Azure.Cdn.Models.KeyVaultCertificateSourceParameters"]  # noqa: E501
        if odata_type not in allowed_values:
            raise ValueError(
                "Invalid value for `odata_type` ({0}), must be one of {1}"
                .format(odata_type, allowed_values)
            )

        self._odata_type = odata_type

    @property
    def delete_rule(self):
        """Gets the delete_rule of this KeyVaultCertificateSourceParameters.

        Describes the action that shall be taken when the certificate is removed from Key Vault.

        :return: The delete_rule of this KeyVaultCertificateSourceParameters.
        :rtype: str
        """
        return self._delete_rule

    @delete_rule.setter
    def delete_rule(self, delete_rule):
        """Sets the delete_rule of this KeyVaultCertificateSourceParameters.

        Describes the action that shall be taken when the certificate is removed from Key Vault.

        :param delete_rule: The delete_rule of this KeyVaultCertificateSourceParameters.
        :type delete_rule: str
        """
        allowed_values = ["NoAction"]  # noqa: E501
        if delete_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `delete_rule` ({0}), must be one of {1}"
                .format(delete_rule, allowed_values)
            )

        self._delete_rule = delete_rule

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this KeyVaultCertificateSourceParameters.

        Resource group of the user's Key Vault containing the SSL certificate

        :return: The resource_group_name of this KeyVaultCertificateSourceParameters.
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this KeyVaultCertificateSourceParameters.

        Resource group of the user's Key Vault containing the SSL certificate

        :param resource_group_name: The resource_group_name of this KeyVaultCertificateSourceParameters.
        :type resource_group_name: str
        """
        if resource_group_name is None:
            raise ValueError("Invalid value for `resource_group_name`, must not be `None`")

        self._resource_group_name = resource_group_name

    @property
    def secret_name(self):
        """Gets the secret_name of this KeyVaultCertificateSourceParameters.

        The name of Key Vault Secret (representing the full certificate PFX) in Key Vault.

        :return: The secret_name of this KeyVaultCertificateSourceParameters.
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this KeyVaultCertificateSourceParameters.

        The name of Key Vault Secret (representing the full certificate PFX) in Key Vault.

        :param secret_name: The secret_name of this KeyVaultCertificateSourceParameters.
        :type secret_name: str
        """
        if secret_name is None:
            raise ValueError("Invalid value for `secret_name`, must not be `None`")

        self._secret_name = secret_name

    @property
    def secret_version(self):
        """Gets the secret_version of this KeyVaultCertificateSourceParameters.

        The version(GUID) of Key Vault Secret in Key Vault.

        :return: The secret_version of this KeyVaultCertificateSourceParameters.
        :rtype: str
        """
        return self._secret_version

    @secret_version.setter
    def secret_version(self, secret_version):
        """Sets the secret_version of this KeyVaultCertificateSourceParameters.

        The version(GUID) of Key Vault Secret in Key Vault.

        :param secret_version: The secret_version of this KeyVaultCertificateSourceParameters.
        :type secret_version: str
        """
        if secret_version is None:
            raise ValueError("Invalid value for `secret_version`, must not be `None`")

        self._secret_version = secret_version

    @property
    def subscription_id(self):
        """Gets the subscription_id of this KeyVaultCertificateSourceParameters.

        Subscription Id of the user's Key Vault containing the SSL certificate

        :return: The subscription_id of this KeyVaultCertificateSourceParameters.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this KeyVaultCertificateSourceParameters.

        Subscription Id of the user's Key Vault containing the SSL certificate

        :param subscription_id: The subscription_id of this KeyVaultCertificateSourceParameters.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")

        self._subscription_id = subscription_id

    @property
    def update_rule(self):
        """Gets the update_rule of this KeyVaultCertificateSourceParameters.

        Describes the action that shall be taken when the certificate is updated in Key Vault.

        :return: The update_rule of this KeyVaultCertificateSourceParameters.
        :rtype: str
        """
        return self._update_rule

    @update_rule.setter
    def update_rule(self, update_rule):
        """Sets the update_rule of this KeyVaultCertificateSourceParameters.

        Describes the action that shall be taken when the certificate is updated in Key Vault.

        :param update_rule: The update_rule of this KeyVaultCertificateSourceParameters.
        :type update_rule: str
        """
        allowed_values = ["NoAction"]  # noqa: E501
        if update_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `update_rule` ({0}), must be one of {1}"
                .format(update_rule, allowed_values)
            )

        self._update_rule = update_rule

    @property
    def vault_name(self):
        """Gets the vault_name of this KeyVaultCertificateSourceParameters.

        The name of the user's Key Vault containing the SSL certificate

        :return: The vault_name of this KeyVaultCertificateSourceParameters.
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """Sets the vault_name of this KeyVaultCertificateSourceParameters.

        The name of the user's Key Vault containing the SSL certificate

        :param vault_name: The vault_name of this KeyVaultCertificateSourceParameters.
        :type vault_name: str
        """
        if vault_name is None:
            raise ValueError("Invalid value for `vault_name`, must not be `None`")

        self._vault_name = vault_name
