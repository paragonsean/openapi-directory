# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CdnCertificateSourceParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, odata_type: str=None, certificate_type: str=None):
        """CdnCertificateSourceParameters - a model defined in OpenAPI

        :param odata_type: The odata_type of this CdnCertificateSourceParameters.
        :param certificate_type: The certificate_type of this CdnCertificateSourceParameters.
        """
        self.openapi_types = {
            'odata_type': str,
            'certificate_type': str
        }

        self.attribute_map = {
            'odata_type': '@odata.type',
            'certificate_type': 'certificateType'
        }

        self._odata_type = odata_type
        self._certificate_type = certificate_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CdnCertificateSourceParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CdnCertificateSourceParameters of this CdnCertificateSourceParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def odata_type(self):
        """Gets the odata_type of this CdnCertificateSourceParameters.


        :return: The odata_type of this CdnCertificateSourceParameters.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this CdnCertificateSourceParameters.


        :param odata_type: The odata_type of this CdnCertificateSourceParameters.
        :type odata_type: str
        """
        allowed_values = ["#Microsoft.Azure.Cdn.Models.CdnCertificateSourceParameters"]  # noqa: E501
        if odata_type not in allowed_values:
            raise ValueError(
                "Invalid value for `odata_type` ({0}), must be one of {1}"
                .format(odata_type, allowed_values)
            )

        self._odata_type = odata_type

    @property
    def certificate_type(self):
        """Gets the certificate_type of this CdnCertificateSourceParameters.

        Type of certificate used

        :return: The certificate_type of this CdnCertificateSourceParameters.
        :rtype: str
        """
        return self._certificate_type

    @certificate_type.setter
    def certificate_type(self, certificate_type):
        """Sets the certificate_type of this CdnCertificateSourceParameters.

        Type of certificate used

        :param certificate_type: The certificate_type of this CdnCertificateSourceParameters.
        :type certificate_type: str
        """
        allowed_values = ["Shared", "Dedicated"]  # noqa: E501
        if certificate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `certificate_type` ({0}), must be one of {1}"
                .format(certificate_type, allowed_values)
            )

        self._certificate_type = certificate_type
