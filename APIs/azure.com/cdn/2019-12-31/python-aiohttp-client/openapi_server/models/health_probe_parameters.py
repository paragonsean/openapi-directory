# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HealthProbeParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, probe_interval_in_seconds: int=None, probe_path: str=None, probe_protocol: str=None, probe_request_type: str=None):
        """HealthProbeParameters - a model defined in OpenAPI

        :param probe_interval_in_seconds: The probe_interval_in_seconds of this HealthProbeParameters.
        :param probe_path: The probe_path of this HealthProbeParameters.
        :param probe_protocol: The probe_protocol of this HealthProbeParameters.
        :param probe_request_type: The probe_request_type of this HealthProbeParameters.
        """
        self.openapi_types = {
            'probe_interval_in_seconds': int,
            'probe_path': str,
            'probe_protocol': str,
            'probe_request_type': str
        }

        self.attribute_map = {
            'probe_interval_in_seconds': 'probeIntervalInSeconds',
            'probe_path': 'probePath',
            'probe_protocol': 'probeProtocol',
            'probe_request_type': 'probeRequestType'
        }

        self._probe_interval_in_seconds = probe_interval_in_seconds
        self._probe_path = probe_path
        self._probe_protocol = probe_protocol
        self._probe_request_type = probe_request_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthProbeParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthProbeParameters of this HealthProbeParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def probe_interval_in_seconds(self):
        """Gets the probe_interval_in_seconds of this HealthProbeParameters.

        The number of seconds between health probes.Default is 240sec.

        :return: The probe_interval_in_seconds of this HealthProbeParameters.
        :rtype: int
        """
        return self._probe_interval_in_seconds

    @probe_interval_in_seconds.setter
    def probe_interval_in_seconds(self, probe_interval_in_seconds):
        """Sets the probe_interval_in_seconds of this HealthProbeParameters.

        The number of seconds between health probes.Default is 240sec.

        :param probe_interval_in_seconds: The probe_interval_in_seconds of this HealthProbeParameters.
        :type probe_interval_in_seconds: int
        """
        if probe_interval_in_seconds is not None and probe_interval_in_seconds > 255:
            raise ValueError("Invalid value for `probe_interval_in_seconds`, must be a value less than or equal to `255`")
        if probe_interval_in_seconds is not None and probe_interval_in_seconds < 1:
            raise ValueError("Invalid value for `probe_interval_in_seconds`, must be a value greater than or equal to `1`")

        self._probe_interval_in_seconds = probe_interval_in_seconds

    @property
    def probe_path(self):
        """Gets the probe_path of this HealthProbeParameters.

        The path relative to the origin that is used to determine the health of the origin.

        :return: The probe_path of this HealthProbeParameters.
        :rtype: str
        """
        return self._probe_path

    @probe_path.setter
    def probe_path(self, probe_path):
        """Sets the probe_path of this HealthProbeParameters.

        The path relative to the origin that is used to determine the health of the origin.

        :param probe_path: The probe_path of this HealthProbeParameters.
        :type probe_path: str
        """

        self._probe_path = probe_path

    @property
    def probe_protocol(self):
        """Gets the probe_protocol of this HealthProbeParameters.

        Protocol to use for health probe.

        :return: The probe_protocol of this HealthProbeParameters.
        :rtype: str
        """
        return self._probe_protocol

    @probe_protocol.setter
    def probe_protocol(self, probe_protocol):
        """Sets the probe_protocol of this HealthProbeParameters.

        Protocol to use for health probe.

        :param probe_protocol: The probe_protocol of this HealthProbeParameters.
        :type probe_protocol: str
        """
        allowed_values = ["NotSet", "Http", "Https"]  # noqa: E501
        if probe_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `probe_protocol` ({0}), must be one of {1}"
                .format(probe_protocol, allowed_values)
            )

        self._probe_protocol = probe_protocol

    @property
    def probe_request_type(self):
        """Gets the probe_request_type of this HealthProbeParameters.

        The type of health probe request that is made.

        :return: The probe_request_type of this HealthProbeParameters.
        :rtype: str
        """
        return self._probe_request_type

    @probe_request_type.setter
    def probe_request_type(self, probe_request_type):
        """Sets the probe_request_type of this HealthProbeParameters.

        The type of health probe request that is made.

        :param probe_request_type: The probe_request_type of this HealthProbeParameters.
        :type probe_request_type: str
        """
        allowed_values = ["NotSet", "GET", "HEAD"]  # noqa: E501
        if probe_request_type not in allowed_values:
            raise ValueError(
                "Invalid value for `probe_request_type` ({0}), must be one of {1}"
                .format(probe_request_type, allowed_values)
            )

        self._probe_request_type = probe_request_type
