# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provisioning_state: str=None, resource_state: str=None):
        """ProfileProperties - a model defined in OpenAPI

        :param provisioning_state: The provisioning_state of this ProfileProperties.
        :param resource_state: The resource_state of this ProfileProperties.
        """
        self.openapi_types = {
            'provisioning_state': str,
            'resource_state': str
        }

        self.attribute_map = {
            'provisioning_state': 'provisioningState',
            'resource_state': 'resourceState'
        }

        self._provisioning_state = provisioning_state
        self._resource_state = resource_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileProperties of this ProfileProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ProfileProperties.

        Provisioning status of the profile.

        :return: The provisioning_state of this ProfileProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ProfileProperties.

        Provisioning status of the profile.

        :param provisioning_state: The provisioning_state of this ProfileProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def resource_state(self):
        """Gets the resource_state of this ProfileProperties.

        Resource status of the profile.

        :return: The resource_state of this ProfileProperties.
        :rtype: str
        """
        return self._resource_state

    @resource_state.setter
    def resource_state(self, resource_state):
        """Sets the resource_state of this ProfileProperties.

        Resource status of the profile.

        :param resource_state: The resource_state of this ProfileProperties.
        :type resource_state: str
        """
        allowed_values = ["Creating", "Active", "Deleting", "Disabled"]  # noqa: E501
        if resource_state not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_state` ({0}), must be one of {1}"
                .format(resource_state, allowed_values)
            )

        self._resource_state = resource_state
