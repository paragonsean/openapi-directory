# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeoFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, country_codes: List[str]=None, relative_path: str=None):
        """GeoFilter - a model defined in OpenAPI

        :param action: The action of this GeoFilter.
        :param country_codes: The country_codes of this GeoFilter.
        :param relative_path: The relative_path of this GeoFilter.
        """
        self.openapi_types = {
            'action': str,
            'country_codes': List[str],
            'relative_path': str
        }

        self.attribute_map = {
            'action': 'action',
            'country_codes': 'countryCodes',
            'relative_path': 'relativePath'
        }

        self._action = action
        self._country_codes = country_codes
        self._relative_path = relative_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoFilter of this GeoFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this GeoFilter.

        Action of the geo filter, i.e. allow or block access.

        :return: The action of this GeoFilter.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this GeoFilter.

        Action of the geo filter, i.e. allow or block access.

        :param action: The action of this GeoFilter.
        :type action: str
        """
        allowed_values = ["Block", "Allow"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def country_codes(self):
        """Gets the country_codes of this GeoFilter.

        Two letter country codes defining user country access in a geo filter, e.g. AU, MX, US.

        :return: The country_codes of this GeoFilter.
        :rtype: List[str]
        """
        return self._country_codes

    @country_codes.setter
    def country_codes(self, country_codes):
        """Sets the country_codes of this GeoFilter.

        Two letter country codes defining user country access in a geo filter, e.g. AU, MX, US.

        :param country_codes: The country_codes of this GeoFilter.
        :type country_codes: List[str]
        """
        if country_codes is None:
            raise ValueError("Invalid value for `country_codes`, must not be `None`")

        self._country_codes = country_codes

    @property
    def relative_path(self):
        """Gets the relative_path of this GeoFilter.

        Relative path applicable to geo filter. (e.g. '/mypictures', '/mypicture/kitty.jpg', and etc.)

        :return: The relative_path of this GeoFilter.
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this GeoFilter.

        Relative path applicable to geo filter. (e.g. '/mypictures', '/mypicture/kitty.jpg', and etc.)

        :param relative_path: The relative_path of this GeoFilter.
        :type relative_path: str
        """
        if relative_path is None:
            raise ValueError("Invalid value for `relative_path`, must not be `None`")

        self._relative_path = relative_path
