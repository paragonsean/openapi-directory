# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transform import Transform
from openapi_server import util


class QueryStringMatchConditionParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, odata_type: str=None, match_values: List[str]=None, negate_condition: bool=None, operator: str=None, transforms: List[Transform]=None):
        """QueryStringMatchConditionParameters - a model defined in OpenAPI

        :param odata_type: The odata_type of this QueryStringMatchConditionParameters.
        :param match_values: The match_values of this QueryStringMatchConditionParameters.
        :param negate_condition: The negate_condition of this QueryStringMatchConditionParameters.
        :param operator: The operator of this QueryStringMatchConditionParameters.
        :param transforms: The transforms of this QueryStringMatchConditionParameters.
        """
        self.openapi_types = {
            'odata_type': str,
            'match_values': List[str],
            'negate_condition': bool,
            'operator': str,
            'transforms': List[Transform]
        }

        self.attribute_map = {
            'odata_type': '@odata.type',
            'match_values': 'matchValues',
            'negate_condition': 'negateCondition',
            'operator': 'operator',
            'transforms': 'transforms'
        }

        self._odata_type = odata_type
        self._match_values = match_values
        self._negate_condition = negate_condition
        self._operator = operator
        self._transforms = transforms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryStringMatchConditionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryStringMatchConditionParameters of this QueryStringMatchConditionParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def odata_type(self):
        """Gets the odata_type of this QueryStringMatchConditionParameters.


        :return: The odata_type of this QueryStringMatchConditionParameters.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this QueryStringMatchConditionParameters.


        :param odata_type: The odata_type of this QueryStringMatchConditionParameters.
        :type odata_type: str
        """
        allowed_values = ["#Microsoft.Azure.Cdn.Models.DeliveryRuleQueryStringConditionParameters"]  # noqa: E501
        if odata_type not in allowed_values:
            raise ValueError(
                "Invalid value for `odata_type` ({0}), must be one of {1}"
                .format(odata_type, allowed_values)
            )

        self._odata_type = odata_type

    @property
    def match_values(self):
        """Gets the match_values of this QueryStringMatchConditionParameters.

        The match value for the condition of the delivery rule

        :return: The match_values of this QueryStringMatchConditionParameters.
        :rtype: List[str]
        """
        return self._match_values

    @match_values.setter
    def match_values(self, match_values):
        """Sets the match_values of this QueryStringMatchConditionParameters.

        The match value for the condition of the delivery rule

        :param match_values: The match_values of this QueryStringMatchConditionParameters.
        :type match_values: List[str]
        """
        if match_values is None:
            raise ValueError("Invalid value for `match_values`, must not be `None`")

        self._match_values = match_values

    @property
    def negate_condition(self):
        """Gets the negate_condition of this QueryStringMatchConditionParameters.

        Describes if this is negate condition or not

        :return: The negate_condition of this QueryStringMatchConditionParameters.
        :rtype: bool
        """
        return self._negate_condition

    @negate_condition.setter
    def negate_condition(self, negate_condition):
        """Sets the negate_condition of this QueryStringMatchConditionParameters.

        Describes if this is negate condition or not

        :param negate_condition: The negate_condition of this QueryStringMatchConditionParameters.
        :type negate_condition: bool
        """

        self._negate_condition = negate_condition

    @property
    def operator(self):
        """Gets the operator of this QueryStringMatchConditionParameters.

        Describes operator to be matched

        :return: The operator of this QueryStringMatchConditionParameters.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this QueryStringMatchConditionParameters.

        Describes operator to be matched

        :param operator: The operator of this QueryStringMatchConditionParameters.
        :type operator: str
        """
        allowed_values = ["Any", "Equal", "Contains", "BeginsWith", "EndsWith", "LessThan", "LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def transforms(self):
        """Gets the transforms of this QueryStringMatchConditionParameters.

        List of transforms

        :return: The transforms of this QueryStringMatchConditionParameters.
        :rtype: List[Transform]
        """
        return self._transforms

    @transforms.setter
    def transforms(self, transforms):
        """Sets the transforms of this QueryStringMatchConditionParameters.

        List of transforms

        :param transforms: The transforms of this QueryStringMatchConditionParameters.
        :type transforms: List[Transform]
        """

        self._transforms = transforms
