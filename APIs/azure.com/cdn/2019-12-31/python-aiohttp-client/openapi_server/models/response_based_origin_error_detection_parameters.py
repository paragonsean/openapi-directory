# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_error_range_parameters import HttpErrorRangeParameters
from openapi_server import util


class ResponseBasedOriginErrorDetectionParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, http_error_ranges: List[HttpErrorRangeParameters]=None, response_based_detected_error_types: str=None, response_based_failover_threshold_percentage: int=None):
        """ResponseBasedOriginErrorDetectionParameters - a model defined in OpenAPI

        :param http_error_ranges: The http_error_ranges of this ResponseBasedOriginErrorDetectionParameters.
        :param response_based_detected_error_types: The response_based_detected_error_types of this ResponseBasedOriginErrorDetectionParameters.
        :param response_based_failover_threshold_percentage: The response_based_failover_threshold_percentage of this ResponseBasedOriginErrorDetectionParameters.
        """
        self.openapi_types = {
            'http_error_ranges': List[HttpErrorRangeParameters],
            'response_based_detected_error_types': str,
            'response_based_failover_threshold_percentage': int
        }

        self.attribute_map = {
            'http_error_ranges': 'httpErrorRanges',
            'response_based_detected_error_types': 'responseBasedDetectedErrorTypes',
            'response_based_failover_threshold_percentage': 'responseBasedFailoverThresholdPercentage'
        }

        self._http_error_ranges = http_error_ranges
        self._response_based_detected_error_types = response_based_detected_error_types
        self._response_based_failover_threshold_percentage = response_based_failover_threshold_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseBasedOriginErrorDetectionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResponseBasedOriginErrorDetectionParameters of this ResponseBasedOriginErrorDetectionParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def http_error_ranges(self):
        """Gets the http_error_ranges of this ResponseBasedOriginErrorDetectionParameters.

        The list of Http status code ranges that are considered as server errors for origin and it is marked as unhealthy.

        :return: The http_error_ranges of this ResponseBasedOriginErrorDetectionParameters.
        :rtype: List[HttpErrorRangeParameters]
        """
        return self._http_error_ranges

    @http_error_ranges.setter
    def http_error_ranges(self, http_error_ranges):
        """Sets the http_error_ranges of this ResponseBasedOriginErrorDetectionParameters.

        The list of Http status code ranges that are considered as server errors for origin and it is marked as unhealthy.

        :param http_error_ranges: The http_error_ranges of this ResponseBasedOriginErrorDetectionParameters.
        :type http_error_ranges: List[HttpErrorRangeParameters]
        """

        self._http_error_ranges = http_error_ranges

    @property
    def response_based_detected_error_types(self):
        """Gets the response_based_detected_error_types of this ResponseBasedOriginErrorDetectionParameters.

        Type of response errors for real user requests for which origin will be deemed unhealthy

        :return: The response_based_detected_error_types of this ResponseBasedOriginErrorDetectionParameters.
        :rtype: str
        """
        return self._response_based_detected_error_types

    @response_based_detected_error_types.setter
    def response_based_detected_error_types(self, response_based_detected_error_types):
        """Sets the response_based_detected_error_types of this ResponseBasedOriginErrorDetectionParameters.

        Type of response errors for real user requests for which origin will be deemed unhealthy

        :param response_based_detected_error_types: The response_based_detected_error_types of this ResponseBasedOriginErrorDetectionParameters.
        :type response_based_detected_error_types: str
        """
        allowed_values = ["None", "TcpErrorsOnly", "TcpAndHttpErrors"]  # noqa: E501
        if response_based_detected_error_types not in allowed_values:
            raise ValueError(
                "Invalid value for `response_based_detected_error_types` ({0}), must be one of {1}"
                .format(response_based_detected_error_types, allowed_values)
            )

        self._response_based_detected_error_types = response_based_detected_error_types

    @property
    def response_based_failover_threshold_percentage(self):
        """Gets the response_based_failover_threshold_percentage of this ResponseBasedOriginErrorDetectionParameters.

        The percentage of failed requests in the sample where failover should trigger.

        :return: The response_based_failover_threshold_percentage of this ResponseBasedOriginErrorDetectionParameters.
        :rtype: int
        """
        return self._response_based_failover_threshold_percentage

    @response_based_failover_threshold_percentage.setter
    def response_based_failover_threshold_percentage(self, response_based_failover_threshold_percentage):
        """Sets the response_based_failover_threshold_percentage of this ResponseBasedOriginErrorDetectionParameters.

        The percentage of failed requests in the sample where failover should trigger.

        :param response_based_failover_threshold_percentage: The response_based_failover_threshold_percentage of this ResponseBasedOriginErrorDetectionParameters.
        :type response_based_failover_threshold_percentage: int
        """
        if response_based_failover_threshold_percentage is not None and response_based_failover_threshold_percentage > 100:
            raise ValueError("Invalid value for `response_based_failover_threshold_percentage`, must be a value less than or equal to `100`")
        if response_based_failover_threshold_percentage is not None and response_based_failover_threshold_percentage < 0:
            raise ValueError("Invalid value for `response_based_failover_threshold_percentage`, must be a value greater than or equal to `0`")

        self._response_based_failover_threshold_percentage = response_based_failover_threshold_percentage
