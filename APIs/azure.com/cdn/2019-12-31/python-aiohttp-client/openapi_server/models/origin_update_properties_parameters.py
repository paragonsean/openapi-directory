# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OriginUpdatePropertiesParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, host_name: str=None, http_port: int=None, https_port: int=None, origin_host_header: str=None, priority: int=None, weight: int=None):
        """OriginUpdatePropertiesParameters - a model defined in OpenAPI

        :param enabled: The enabled of this OriginUpdatePropertiesParameters.
        :param host_name: The host_name of this OriginUpdatePropertiesParameters.
        :param http_port: The http_port of this OriginUpdatePropertiesParameters.
        :param https_port: The https_port of this OriginUpdatePropertiesParameters.
        :param origin_host_header: The origin_host_header of this OriginUpdatePropertiesParameters.
        :param priority: The priority of this OriginUpdatePropertiesParameters.
        :param weight: The weight of this OriginUpdatePropertiesParameters.
        """
        self.openapi_types = {
            'enabled': bool,
            'host_name': str,
            'http_port': int,
            'https_port': int,
            'origin_host_header': str,
            'priority': int,
            'weight': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'host_name': 'hostName',
            'http_port': 'httpPort',
            'https_port': 'httpsPort',
            'origin_host_header': 'originHostHeader',
            'priority': 'priority',
            'weight': 'weight'
        }

        self._enabled = enabled
        self._host_name = host_name
        self._http_port = http_port
        self._https_port = https_port
        self._origin_host_header = origin_host_header
        self._priority = priority
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OriginUpdatePropertiesParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OriginUpdatePropertiesParameters of this OriginUpdatePropertiesParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this OriginUpdatePropertiesParameters.

        Origin is enabled for load balancing or not

        :return: The enabled of this OriginUpdatePropertiesParameters.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this OriginUpdatePropertiesParameters.

        Origin is enabled for load balancing or not

        :param enabled: The enabled of this OriginUpdatePropertiesParameters.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def host_name(self):
        """Gets the host_name of this OriginUpdatePropertiesParameters.

        The address of the origin. Domain names, IPv4 addresses, and IPv6 addresses are supported.This should be unique across all origins in an endpoint.

        :return: The host_name of this OriginUpdatePropertiesParameters.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this OriginUpdatePropertiesParameters.

        The address of the origin. Domain names, IPv4 addresses, and IPv6 addresses are supported.This should be unique across all origins in an endpoint.

        :param host_name: The host_name of this OriginUpdatePropertiesParameters.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def http_port(self):
        """Gets the http_port of this OriginUpdatePropertiesParameters.

        The value of the HTTP port. Must be between 1 and 65535.

        :return: The http_port of this OriginUpdatePropertiesParameters.
        :rtype: int
        """
        return self._http_port

    @http_port.setter
    def http_port(self, http_port):
        """Sets the http_port of this OriginUpdatePropertiesParameters.

        The value of the HTTP port. Must be between 1 and 65535.

        :param http_port: The http_port of this OriginUpdatePropertiesParameters.
        :type http_port: int
        """
        if http_port is not None and http_port > 65535:
            raise ValueError("Invalid value for `http_port`, must be a value less than or equal to `65535`")
        if http_port is not None and http_port < 1:
            raise ValueError("Invalid value for `http_port`, must be a value greater than or equal to `1`")

        self._http_port = http_port

    @property
    def https_port(self):
        """Gets the https_port of this OriginUpdatePropertiesParameters.

        The value of the HTTPS port. Must be between 1 and 65535.

        :return: The https_port of this OriginUpdatePropertiesParameters.
        :rtype: int
        """
        return self._https_port

    @https_port.setter
    def https_port(self, https_port):
        """Sets the https_port of this OriginUpdatePropertiesParameters.

        The value of the HTTPS port. Must be between 1 and 65535.

        :param https_port: The https_port of this OriginUpdatePropertiesParameters.
        :type https_port: int
        """
        if https_port is not None and https_port > 65535:
            raise ValueError("Invalid value for `https_port`, must be a value less than or equal to `65535`")
        if https_port is not None and https_port < 1:
            raise ValueError("Invalid value for `https_port`, must be a value greater than or equal to `1`")

        self._https_port = https_port

    @property
    def origin_host_header(self):
        """Gets the origin_host_header of this OriginUpdatePropertiesParameters.

        The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. This overrides the host header defined at Endpoint

        :return: The origin_host_header of this OriginUpdatePropertiesParameters.
        :rtype: str
        """
        return self._origin_host_header

    @origin_host_header.setter
    def origin_host_header(self, origin_host_header):
        """Sets the origin_host_header of this OriginUpdatePropertiesParameters.

        The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. This overrides the host header defined at Endpoint

        :param origin_host_header: The origin_host_header of this OriginUpdatePropertiesParameters.
        :type origin_host_header: str
        """

        self._origin_host_header = origin_host_header

    @property
    def priority(self):
        """Gets the priority of this OriginUpdatePropertiesParameters.

        Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5

        :return: The priority of this OriginUpdatePropertiesParameters.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this OriginUpdatePropertiesParameters.

        Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5

        :param priority: The priority of this OriginUpdatePropertiesParameters.
        :type priority: int
        """
        if priority is not None and priority > 5:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `5`")
        if priority is not None and priority < 1:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")

        self._priority = priority

    @property
    def weight(self):
        """Gets the weight of this OriginUpdatePropertiesParameters.

        Weight of the origin in given origin group for load balancing. Must be between 1 and 1000

        :return: The weight of this OriginUpdatePropertiesParameters.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this OriginUpdatePropertiesParameters.

        Weight of the origin in given origin group for load balancing. Must be between 1 and 1000

        :param weight: The weight of this OriginUpdatePropertiesParameters.
        :type weight: int
        """
        if weight is not None and weight > 1000:
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `1000`")
        if weight is not None and weight < 1:
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `1`")

        self._weight = weight
