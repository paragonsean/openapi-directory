# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UrlRedirectActionParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, odata_type: str=None, custom_fragment: str=None, custom_hostname: str=None, custom_path: str=None, custom_query_string: str=None, destination_protocol: str=None, redirect_type: str=None):
        """UrlRedirectActionParameters - a model defined in OpenAPI

        :param odata_type: The odata_type of this UrlRedirectActionParameters.
        :param custom_fragment: The custom_fragment of this UrlRedirectActionParameters.
        :param custom_hostname: The custom_hostname of this UrlRedirectActionParameters.
        :param custom_path: The custom_path of this UrlRedirectActionParameters.
        :param custom_query_string: The custom_query_string of this UrlRedirectActionParameters.
        :param destination_protocol: The destination_protocol of this UrlRedirectActionParameters.
        :param redirect_type: The redirect_type of this UrlRedirectActionParameters.
        """
        self.openapi_types = {
            'odata_type': str,
            'custom_fragment': str,
            'custom_hostname': str,
            'custom_path': str,
            'custom_query_string': str,
            'destination_protocol': str,
            'redirect_type': str
        }

        self.attribute_map = {
            'odata_type': '@odata.type',
            'custom_fragment': 'customFragment',
            'custom_hostname': 'customHostname',
            'custom_path': 'customPath',
            'custom_query_string': 'customQueryString',
            'destination_protocol': 'destinationProtocol',
            'redirect_type': 'redirectType'
        }

        self._odata_type = odata_type
        self._custom_fragment = custom_fragment
        self._custom_hostname = custom_hostname
        self._custom_path = custom_path
        self._custom_query_string = custom_query_string
        self._destination_protocol = destination_protocol
        self._redirect_type = redirect_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UrlRedirectActionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UrlRedirectActionParameters of this UrlRedirectActionParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def odata_type(self):
        """Gets the odata_type of this UrlRedirectActionParameters.


        :return: The odata_type of this UrlRedirectActionParameters.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this UrlRedirectActionParameters.


        :param odata_type: The odata_type of this UrlRedirectActionParameters.
        :type odata_type: str
        """
        allowed_values = ["#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlRedirectActionParameters"]  # noqa: E501
        if odata_type not in allowed_values:
            raise ValueError(
                "Invalid value for `odata_type` ({0}), must be one of {1}"
                .format(odata_type, allowed_values)
            )

        self._odata_type = odata_type

    @property
    def custom_fragment(self):
        """Gets the custom_fragment of this UrlRedirectActionParameters.

        Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.

        :return: The custom_fragment of this UrlRedirectActionParameters.
        :rtype: str
        """
        return self._custom_fragment

    @custom_fragment.setter
    def custom_fragment(self, custom_fragment):
        """Sets the custom_fragment of this UrlRedirectActionParameters.

        Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.

        :param custom_fragment: The custom_fragment of this UrlRedirectActionParameters.
        :type custom_fragment: str
        """

        self._custom_fragment = custom_fragment

    @property
    def custom_hostname(self):
        """Gets the custom_hostname of this UrlRedirectActionParameters.

        Host to redirect. Leave empty to use the incoming host as the destination host.

        :return: The custom_hostname of this UrlRedirectActionParameters.
        :rtype: str
        """
        return self._custom_hostname

    @custom_hostname.setter
    def custom_hostname(self, custom_hostname):
        """Sets the custom_hostname of this UrlRedirectActionParameters.

        Host to redirect. Leave empty to use the incoming host as the destination host.

        :param custom_hostname: The custom_hostname of this UrlRedirectActionParameters.
        :type custom_hostname: str
        """

        self._custom_hostname = custom_hostname

    @property
    def custom_path(self):
        """Gets the custom_path of this UrlRedirectActionParameters.

        The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.

        :return: The custom_path of this UrlRedirectActionParameters.
        :rtype: str
        """
        return self._custom_path

    @custom_path.setter
    def custom_path(self, custom_path):
        """Sets the custom_path of this UrlRedirectActionParameters.

        The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.

        :param custom_path: The custom_path of this UrlRedirectActionParameters.
        :type custom_path: str
        """

        self._custom_path = custom_path

    @property
    def custom_query_string(self):
        """Gets the custom_query_string of this UrlRedirectActionParameters.

        The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. ? and & will be added automatically so do not include them.

        :return: The custom_query_string of this UrlRedirectActionParameters.
        :rtype: str
        """
        return self._custom_query_string

    @custom_query_string.setter
    def custom_query_string(self, custom_query_string):
        """Sets the custom_query_string of this UrlRedirectActionParameters.

        The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. ? and & will be added automatically so do not include them.

        :param custom_query_string: The custom_query_string of this UrlRedirectActionParameters.
        :type custom_query_string: str
        """

        self._custom_query_string = custom_query_string

    @property
    def destination_protocol(self):
        """Gets the destination_protocol of this UrlRedirectActionParameters.

        Protocol to use for the redirect. The default value is MatchRequest

        :return: The destination_protocol of this UrlRedirectActionParameters.
        :rtype: str
        """
        return self._destination_protocol

    @destination_protocol.setter
    def destination_protocol(self, destination_protocol):
        """Sets the destination_protocol of this UrlRedirectActionParameters.

        Protocol to use for the redirect. The default value is MatchRequest

        :param destination_protocol: The destination_protocol of this UrlRedirectActionParameters.
        :type destination_protocol: str
        """
        allowed_values = ["MatchRequest", "Http", "Https"]  # noqa: E501
        if destination_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `destination_protocol` ({0}), must be one of {1}"
                .format(destination_protocol, allowed_values)
            )

        self._destination_protocol = destination_protocol

    @property
    def redirect_type(self):
        """Gets the redirect_type of this UrlRedirectActionParameters.

        The redirect type the rule will use when redirecting traffic.

        :return: The redirect_type of this UrlRedirectActionParameters.
        :rtype: str
        """
        return self._redirect_type

    @redirect_type.setter
    def redirect_type(self, redirect_type):
        """Sets the redirect_type of this UrlRedirectActionParameters.

        The redirect type the rule will use when redirecting traffic.

        :param redirect_type: The redirect_type of this UrlRedirectActionParameters.
        :type redirect_type: str
        """
        allowed_values = ["Moved", "Found", "TemporaryRedirect", "PermanentRedirect"]  # noqa: E501
        if redirect_type not in allowed_values:
            raise ValueError(
                "Invalid value for `redirect_type` ({0}), must be one of {1}"
                .format(redirect_type, allowed_values)
            )

        self._redirect_type = redirect_type
