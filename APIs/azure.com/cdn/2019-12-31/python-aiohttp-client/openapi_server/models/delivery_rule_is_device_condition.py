# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delivery_rule_condition import DeliveryRuleCondition
from openapi_server.models.is_device_match_condition_parameters import IsDeviceMatchConditionParameters
from openapi_server import util


class DeliveryRuleIsDeviceCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters: IsDeviceMatchConditionParameters=None, name: str=None):
        """DeliveryRuleIsDeviceCondition - a model defined in OpenAPI

        :param parameters: The parameters of this DeliveryRuleIsDeviceCondition.
        :param name: The name of this DeliveryRuleIsDeviceCondition.
        """
        self.openapi_types = {
            'parameters': IsDeviceMatchConditionParameters,
            'name': str
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'name': 'name'
        }

        self._parameters = parameters
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryRuleIsDeviceCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryRuleIsDeviceCondition of this DeliveryRuleIsDeviceCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self):
        """Gets the parameters of this DeliveryRuleIsDeviceCondition.


        :return: The parameters of this DeliveryRuleIsDeviceCondition.
        :rtype: IsDeviceMatchConditionParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DeliveryRuleIsDeviceCondition.


        :param parameters: The parameters of this DeliveryRuleIsDeviceCondition.
        :type parameters: IsDeviceMatchConditionParameters
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def name(self):
        """Gets the name of this DeliveryRuleIsDeviceCondition.

        The name of the condition for the delivery rule.

        :return: The name of this DeliveryRuleIsDeviceCondition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeliveryRuleIsDeviceCondition.

        The name of the condition for the delivery rule.

        :param name: The name of this DeliveryRuleIsDeviceCondition.
        :type name: str
        """
        allowed_values = ["RemoteAddress", "RequestMethod", "QueryString", "PostArgs", "RequestUri", "RequestHeader", "RequestBody", "RequestScheme", "UrlPath", "UrlFileExtension", "UrlFileName", "HttpVersion", "Cookies", "IsDevice"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name
