# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delivery_rule_action import DeliveryRuleAction
from openapi_server.models.delivery_rule_condition import DeliveryRuleCondition
from openapi_server import util


class DeliveryRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[DeliveryRuleAction]=None, conditions: List[DeliveryRuleCondition]=None, name: str=None, order: int=None):
        """DeliveryRule - a model defined in OpenAPI

        :param actions: The actions of this DeliveryRule.
        :param conditions: The conditions of this DeliveryRule.
        :param name: The name of this DeliveryRule.
        :param order: The order of this DeliveryRule.
        """
        self.openapi_types = {
            'actions': List[DeliveryRuleAction],
            'conditions': List[DeliveryRuleCondition],
            'name': str,
            'order': int
        }

        self.attribute_map = {
            'actions': 'actions',
            'conditions': 'conditions',
            'name': 'name',
            'order': 'order'
        }

        self._actions = actions
        self._conditions = conditions
        self._name = name
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryRule of this DeliveryRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this DeliveryRule.

        A list of actions that are executed when all the conditions of a rule are satisfied.

        :return: The actions of this DeliveryRule.
        :rtype: List[DeliveryRuleAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this DeliveryRule.

        A list of actions that are executed when all the conditions of a rule are satisfied.

        :param actions: The actions of this DeliveryRule.
        :type actions: List[DeliveryRuleAction]
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def conditions(self):
        """Gets the conditions of this DeliveryRule.

        A list of conditions that must be matched for the actions to be executed

        :return: The conditions of this DeliveryRule.
        :rtype: List[DeliveryRuleCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this DeliveryRule.

        A list of conditions that must be matched for the actions to be executed

        :param conditions: The conditions of this DeliveryRule.
        :type conditions: List[DeliveryRuleCondition]
        """

        self._conditions = conditions

    @property
    def name(self):
        """Gets the name of this DeliveryRule.

        Name of the rule

        :return: The name of this DeliveryRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeliveryRule.

        Name of the rule

        :param name: The name of this DeliveryRule.
        :type name: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this DeliveryRule.

        The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied.

        :return: The order of this DeliveryRule.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DeliveryRule.

        The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied.

        :param order: The order of this DeliveryRule.
        :type order: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")

        self._order = order
