# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomDomainProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_https_provisioning_state: str=None, custom_https_provisioning_substate: str=None, host_name: str=None, provisioning_state: str=None, resource_state: str=None, validation_data: str=None):
        """CustomDomainProperties - a model defined in OpenAPI

        :param custom_https_provisioning_state: The custom_https_provisioning_state of this CustomDomainProperties.
        :param custom_https_provisioning_substate: The custom_https_provisioning_substate of this CustomDomainProperties.
        :param host_name: The host_name of this CustomDomainProperties.
        :param provisioning_state: The provisioning_state of this CustomDomainProperties.
        :param resource_state: The resource_state of this CustomDomainProperties.
        :param validation_data: The validation_data of this CustomDomainProperties.
        """
        self.openapi_types = {
            'custom_https_provisioning_state': str,
            'custom_https_provisioning_substate': str,
            'host_name': str,
            'provisioning_state': str,
            'resource_state': str,
            'validation_data': str
        }

        self.attribute_map = {
            'custom_https_provisioning_state': 'customHttpsProvisioningState',
            'custom_https_provisioning_substate': 'customHttpsProvisioningSubstate',
            'host_name': 'hostName',
            'provisioning_state': 'provisioningState',
            'resource_state': 'resourceState',
            'validation_data': 'validationData'
        }

        self._custom_https_provisioning_state = custom_https_provisioning_state
        self._custom_https_provisioning_substate = custom_https_provisioning_substate
        self._host_name = host_name
        self._provisioning_state = provisioning_state
        self._resource_state = resource_state
        self._validation_data = validation_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomDomainProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomDomainProperties of this CustomDomainProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_https_provisioning_state(self):
        """Gets the custom_https_provisioning_state of this CustomDomainProperties.

        Provisioning status of Custom Https of the custom domain.

        :return: The custom_https_provisioning_state of this CustomDomainProperties.
        :rtype: str
        """
        return self._custom_https_provisioning_state

    @custom_https_provisioning_state.setter
    def custom_https_provisioning_state(self, custom_https_provisioning_state):
        """Sets the custom_https_provisioning_state of this CustomDomainProperties.

        Provisioning status of Custom Https of the custom domain.

        :param custom_https_provisioning_state: The custom_https_provisioning_state of this CustomDomainProperties.
        :type custom_https_provisioning_state: str
        """
        allowed_values = ["Enabling", "Enabled", "Disabling", "Disabled", "Failed"]  # noqa: E501
        if custom_https_provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `custom_https_provisioning_state` ({0}), must be one of {1}"
                .format(custom_https_provisioning_state, allowed_values)
            )

        self._custom_https_provisioning_state = custom_https_provisioning_state

    @property
    def custom_https_provisioning_substate(self):
        """Gets the custom_https_provisioning_substate of this CustomDomainProperties.

        Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.

        :return: The custom_https_provisioning_substate of this CustomDomainProperties.
        :rtype: str
        """
        return self._custom_https_provisioning_substate

    @custom_https_provisioning_substate.setter
    def custom_https_provisioning_substate(self, custom_https_provisioning_substate):
        """Sets the custom_https_provisioning_substate of this CustomDomainProperties.

        Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.

        :param custom_https_provisioning_substate: The custom_https_provisioning_substate of this CustomDomainProperties.
        :type custom_https_provisioning_substate: str
        """
        allowed_values = ["SubmittingDomainControlValidationRequest", "PendingDomainControlValidationREquestApproval", "DomainControlValidationRequestApproved", "DomainControlValidationRequestRejected", "DomainControlValidationRequestTimedOut", "IssuingCertificate", "DeployingCertificate", "CertificateDeployed", "DeletingCertificate", "CertificateDeleted"]  # noqa: E501
        if custom_https_provisioning_substate not in allowed_values:
            raise ValueError(
                "Invalid value for `custom_https_provisioning_substate` ({0}), must be one of {1}"
                .format(custom_https_provisioning_substate, allowed_values)
            )

        self._custom_https_provisioning_substate = custom_https_provisioning_substate

    @property
    def host_name(self):
        """Gets the host_name of this CustomDomainProperties.

        The host name of the custom domain. Must be a domain name.

        :return: The host_name of this CustomDomainProperties.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this CustomDomainProperties.

        The host name of the custom domain. Must be a domain name.

        :param host_name: The host_name of this CustomDomainProperties.
        :type host_name: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")

        self._host_name = host_name

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this CustomDomainProperties.

        Provisioning status of the custom domain.

        :return: The provisioning_state of this CustomDomainProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this CustomDomainProperties.

        Provisioning status of the custom domain.

        :param provisioning_state: The provisioning_state of this CustomDomainProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def resource_state(self):
        """Gets the resource_state of this CustomDomainProperties.

        Resource status of the custom domain.

        :return: The resource_state of this CustomDomainProperties.
        :rtype: str
        """
        return self._resource_state

    @resource_state.setter
    def resource_state(self, resource_state):
        """Sets the resource_state of this CustomDomainProperties.

        Resource status of the custom domain.

        :param resource_state: The resource_state of this CustomDomainProperties.
        :type resource_state: str
        """
        allowed_values = ["Creating", "Active", "Deleting"]  # noqa: E501
        if resource_state not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_state` ({0}), must be one of {1}"
                .format(resource_state, allowed_values)
            )

        self._resource_state = resource_state

    @property
    def validation_data(self):
        """Gets the validation_data of this CustomDomainProperties.

        Special validation or data may be required when delivering CDN to some regions due to local compliance reasons. E.g. ICP license number of a custom domain is required to deliver content in China.

        :return: The validation_data of this CustomDomainProperties.
        :rtype: str
        """
        return self._validation_data

    @validation_data.setter
    def validation_data(self, validation_data):
        """Sets the validation_data of this CustomDomainProperties.

        Special validation or data may be required when delivering CDN to some regions due to local compliance reasons. E.g. ICP license number of a custom domain is required to deliver content in China.

        :param validation_data: The validation_data of this CustomDomainProperties.
        :type validation_data: str
        """

        self._validation_data = validation_data
