# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transform import Transform
from openapi_server import util


class RemoteAddressMatchConditionParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, odata_type: str=None, match_values: List[str]=None, negate_condition: bool=None, operator: str=None, transforms: List[Transform]=None):
        """RemoteAddressMatchConditionParameters - a model defined in OpenAPI

        :param odata_type: The odata_type of this RemoteAddressMatchConditionParameters.
        :param match_values: The match_values of this RemoteAddressMatchConditionParameters.
        :param negate_condition: The negate_condition of this RemoteAddressMatchConditionParameters.
        :param operator: The operator of this RemoteAddressMatchConditionParameters.
        :param transforms: The transforms of this RemoteAddressMatchConditionParameters.
        """
        self.openapi_types = {
            'odata_type': str,
            'match_values': List[str],
            'negate_condition': bool,
            'operator': str,
            'transforms': List[Transform]
        }

        self.attribute_map = {
            'odata_type': '@odata.type',
            'match_values': 'matchValues',
            'negate_condition': 'negateCondition',
            'operator': 'operator',
            'transforms': 'transforms'
        }

        self._odata_type = odata_type
        self._match_values = match_values
        self._negate_condition = negate_condition
        self._operator = operator
        self._transforms = transforms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoteAddressMatchConditionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoteAddressMatchConditionParameters of this RemoteAddressMatchConditionParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def odata_type(self):
        """Gets the odata_type of this RemoteAddressMatchConditionParameters.


        :return: The odata_type of this RemoteAddressMatchConditionParameters.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this RemoteAddressMatchConditionParameters.


        :param odata_type: The odata_type of this RemoteAddressMatchConditionParameters.
        :type odata_type: str
        """
        allowed_values = ["#Microsoft.Azure.Cdn.Models.DeliveryRuleRemoteAddressConditionParameters"]  # noqa: E501
        if odata_type not in allowed_values:
            raise ValueError(
                "Invalid value for `odata_type` ({0}), must be one of {1}"
                .format(odata_type, allowed_values)
            )

        self._odata_type = odata_type

    @property
    def match_values(self):
        """Gets the match_values of this RemoteAddressMatchConditionParameters.

        Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.

        :return: The match_values of this RemoteAddressMatchConditionParameters.
        :rtype: List[str]
        """
        return self._match_values

    @match_values.setter
    def match_values(self, match_values):
        """Sets the match_values of this RemoteAddressMatchConditionParameters.

        Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.

        :param match_values: The match_values of this RemoteAddressMatchConditionParameters.
        :type match_values: List[str]
        """
        if match_values is None:
            raise ValueError("Invalid value for `match_values`, must not be `None`")

        self._match_values = match_values

    @property
    def negate_condition(self):
        """Gets the negate_condition of this RemoteAddressMatchConditionParameters.

        Describes if this is negate condition or not

        :return: The negate_condition of this RemoteAddressMatchConditionParameters.
        :rtype: bool
        """
        return self._negate_condition

    @negate_condition.setter
    def negate_condition(self, negate_condition):
        """Sets the negate_condition of this RemoteAddressMatchConditionParameters.

        Describes if this is negate condition or not

        :param negate_condition: The negate_condition of this RemoteAddressMatchConditionParameters.
        :type negate_condition: bool
        """

        self._negate_condition = negate_condition

    @property
    def operator(self):
        """Gets the operator of this RemoteAddressMatchConditionParameters.

        Describes operator to be matched

        :return: The operator of this RemoteAddressMatchConditionParameters.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this RemoteAddressMatchConditionParameters.

        Describes operator to be matched

        :param operator: The operator of this RemoteAddressMatchConditionParameters.
        :type operator: str
        """
        allowed_values = ["Any", "IPMatch", "GeoMatch"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def transforms(self):
        """Gets the transforms of this RemoteAddressMatchConditionParameters.

        List of transforms

        :return: The transforms of this RemoteAddressMatchConditionParameters.
        :rtype: List[Transform]
        """
        return self._transforms

    @transforms.setter
    def transforms(self, transforms):
        """Sets the transforms of this RemoteAddressMatchConditionParameters.

        List of transforms

        :param transforms: The transforms of this RemoteAddressMatchConditionParameters.
        :type transforms: List[Transform]
        """

        self._transforms = transforms
