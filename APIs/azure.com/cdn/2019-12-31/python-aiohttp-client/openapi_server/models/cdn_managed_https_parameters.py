# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cdn_certificate_source_parameters import CdnCertificateSourceParameters
from openapi_server.models.custom_domain_https_parameters import CustomDomainHttpsParameters
from openapi_server import util


class CdnManagedHttpsParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_source_parameters: CdnCertificateSourceParameters=None, certificate_source: str=None, minimum_tls_version: str=None, protocol_type: str=None):
        """CdnManagedHttpsParameters - a model defined in OpenAPI

        :param certificate_source_parameters: The certificate_source_parameters of this CdnManagedHttpsParameters.
        :param certificate_source: The certificate_source of this CdnManagedHttpsParameters.
        :param minimum_tls_version: The minimum_tls_version of this CdnManagedHttpsParameters.
        :param protocol_type: The protocol_type of this CdnManagedHttpsParameters.
        """
        self.openapi_types = {
            'certificate_source_parameters': CdnCertificateSourceParameters,
            'certificate_source': str,
            'minimum_tls_version': str,
            'protocol_type': str
        }

        self.attribute_map = {
            'certificate_source_parameters': 'certificateSourceParameters',
            'certificate_source': 'certificateSource',
            'minimum_tls_version': 'minimumTlsVersion',
            'protocol_type': 'protocolType'
        }

        self._certificate_source_parameters = certificate_source_parameters
        self._certificate_source = certificate_source
        self._minimum_tls_version = minimum_tls_version
        self._protocol_type = protocol_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CdnManagedHttpsParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CdnManagedHttpsParameters of this CdnManagedHttpsParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_source_parameters(self):
        """Gets the certificate_source_parameters of this CdnManagedHttpsParameters.


        :return: The certificate_source_parameters of this CdnManagedHttpsParameters.
        :rtype: CdnCertificateSourceParameters
        """
        return self._certificate_source_parameters

    @certificate_source_parameters.setter
    def certificate_source_parameters(self, certificate_source_parameters):
        """Sets the certificate_source_parameters of this CdnManagedHttpsParameters.


        :param certificate_source_parameters: The certificate_source_parameters of this CdnManagedHttpsParameters.
        :type certificate_source_parameters: CdnCertificateSourceParameters
        """
        if certificate_source_parameters is None:
            raise ValueError("Invalid value for `certificate_source_parameters`, must not be `None`")

        self._certificate_source_parameters = certificate_source_parameters

    @property
    def certificate_source(self):
        """Gets the certificate_source of this CdnManagedHttpsParameters.

        Defines the source of the SSL certificate.

        :return: The certificate_source of this CdnManagedHttpsParameters.
        :rtype: str
        """
        return self._certificate_source

    @certificate_source.setter
    def certificate_source(self, certificate_source):
        """Sets the certificate_source of this CdnManagedHttpsParameters.

        Defines the source of the SSL certificate.

        :param certificate_source: The certificate_source of this CdnManagedHttpsParameters.
        :type certificate_source: str
        """
        allowed_values = ["AzureKeyVault", "Cdn"]  # noqa: E501
        if certificate_source not in allowed_values:
            raise ValueError(
                "Invalid value for `certificate_source` ({0}), must be one of {1}"
                .format(certificate_source, allowed_values)
            )

        self._certificate_source = certificate_source

    @property
    def minimum_tls_version(self):
        """Gets the minimum_tls_version of this CdnManagedHttpsParameters.

        TLS protocol version that will be used for Https

        :return: The minimum_tls_version of this CdnManagedHttpsParameters.
        :rtype: str
        """
        return self._minimum_tls_version

    @minimum_tls_version.setter
    def minimum_tls_version(self, minimum_tls_version):
        """Sets the minimum_tls_version of this CdnManagedHttpsParameters.

        TLS protocol version that will be used for Https

        :param minimum_tls_version: The minimum_tls_version of this CdnManagedHttpsParameters.
        :type minimum_tls_version: str
        """
        allowed_values = ["None", "TLS10", "TLS12"]  # noqa: E501
        if minimum_tls_version not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_tls_version` ({0}), must be one of {1}"
                .format(minimum_tls_version, allowed_values)
            )

        self._minimum_tls_version = minimum_tls_version

    @property
    def protocol_type(self):
        """Gets the protocol_type of this CdnManagedHttpsParameters.

        Defines the TLS extension protocol that is used for secure delivery.

        :return: The protocol_type of this CdnManagedHttpsParameters.
        :rtype: str
        """
        return self._protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):
        """Sets the protocol_type of this CdnManagedHttpsParameters.

        Defines the TLS extension protocol that is used for secure delivery.

        :param protocol_type: The protocol_type of this CdnManagedHttpsParameters.
        :type protocol_type: str
        """
        allowed_values = ["ServerNameIndication", "IPBased"]  # noqa: E501
        if protocol_type not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol_type` ({0}), must be one of {1}"
                .format(protocol_type, allowed_values)
            )

        self._protocol_type = protocol_type
