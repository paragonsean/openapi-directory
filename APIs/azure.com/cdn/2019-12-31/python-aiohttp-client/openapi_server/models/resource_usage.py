# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_value: int=None, limit: int=None, resource_type: str=None, unit: str=None):
        """ResourceUsage - a model defined in OpenAPI

        :param current_value: The current_value of this ResourceUsage.
        :param limit: The limit of this ResourceUsage.
        :param resource_type: The resource_type of this ResourceUsage.
        :param unit: The unit of this ResourceUsage.
        """
        self.openapi_types = {
            'current_value': int,
            'limit': int,
            'resource_type': str,
            'unit': str
        }

        self.attribute_map = {
            'current_value': 'currentValue',
            'limit': 'limit',
            'resource_type': 'resourceType',
            'unit': 'unit'
        }

        self._current_value = current_value
        self._limit = limit
        self._resource_type = resource_type
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceUsage of this ResourceUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_value(self):
        """Gets the current_value of this ResourceUsage.

        Actual value of usage on the specified resource type.

        :return: The current_value of this ResourceUsage.
        :rtype: int
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value):
        """Sets the current_value of this ResourceUsage.

        Actual value of usage on the specified resource type.

        :param current_value: The current_value of this ResourceUsage.
        :type current_value: int
        """

        self._current_value = current_value

    @property
    def limit(self):
        """Gets the limit of this ResourceUsage.

        Quota of the specified resource type.

        :return: The limit of this ResourceUsage.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ResourceUsage.

        Quota of the specified resource type.

        :param limit: The limit of this ResourceUsage.
        :type limit: int
        """

        self._limit = limit

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceUsage.

        Resource type for which the usage is provided.

        :return: The resource_type of this ResourceUsage.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceUsage.

        Resource type for which the usage is provided.

        :param resource_type: The resource_type of this ResourceUsage.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def unit(self):
        """Gets the unit of this ResourceUsage.

        Unit of the usage. e.g. Count.

        :return: The unit of this ResourceUsage.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ResourceUsage.

        Unit of the usage. e.g. Count.

        :param unit: The unit of this ResourceUsage.
        :type unit: str
        """

        self._unit = unit
