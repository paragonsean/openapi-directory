# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CacheExpirationActionParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, odata_type: str=None, cache_behavior: str=None, cache_duration: str=None, cache_type: str=None):
        """CacheExpirationActionParameters - a model defined in OpenAPI

        :param odata_type: The odata_type of this CacheExpirationActionParameters.
        :param cache_behavior: The cache_behavior of this CacheExpirationActionParameters.
        :param cache_duration: The cache_duration of this CacheExpirationActionParameters.
        :param cache_type: The cache_type of this CacheExpirationActionParameters.
        """
        self.openapi_types = {
            'odata_type': str,
            'cache_behavior': str,
            'cache_duration': str,
            'cache_type': str
        }

        self.attribute_map = {
            'odata_type': '@odata.type',
            'cache_behavior': 'cacheBehavior',
            'cache_duration': 'cacheDuration',
            'cache_type': 'cacheType'
        }

        self._odata_type = odata_type
        self._cache_behavior = cache_behavior
        self._cache_duration = cache_duration
        self._cache_type = cache_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CacheExpirationActionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CacheExpirationActionParameters of this CacheExpirationActionParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def odata_type(self):
        """Gets the odata_type of this CacheExpirationActionParameters.


        :return: The odata_type of this CacheExpirationActionParameters.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this CacheExpirationActionParameters.


        :param odata_type: The odata_type of this CacheExpirationActionParameters.
        :type odata_type: str
        """
        allowed_values = ["#Microsoft.Azure.Cdn.Models.DeliveryRuleCacheExpirationActionParameters"]  # noqa: E501
        if odata_type not in allowed_values:
            raise ValueError(
                "Invalid value for `odata_type` ({0}), must be one of {1}"
                .format(odata_type, allowed_values)
            )

        self._odata_type = odata_type

    @property
    def cache_behavior(self):
        """Gets the cache_behavior of this CacheExpirationActionParameters.

        Caching behavior for the requests

        :return: The cache_behavior of this CacheExpirationActionParameters.
        :rtype: str
        """
        return self._cache_behavior

    @cache_behavior.setter
    def cache_behavior(self, cache_behavior):
        """Sets the cache_behavior of this CacheExpirationActionParameters.

        Caching behavior for the requests

        :param cache_behavior: The cache_behavior of this CacheExpirationActionParameters.
        :type cache_behavior: str
        """
        allowed_values = ["BypassCache", "Override", "SetIfMissing"]  # noqa: E501
        if cache_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `cache_behavior` ({0}), must be one of {1}"
                .format(cache_behavior, allowed_values)
            )

        self._cache_behavior = cache_behavior

    @property
    def cache_duration(self):
        """Gets the cache_duration of this CacheExpirationActionParameters.

        The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss

        :return: The cache_duration of this CacheExpirationActionParameters.
        :rtype: str
        """
        return self._cache_duration

    @cache_duration.setter
    def cache_duration(self, cache_duration):
        """Sets the cache_duration of this CacheExpirationActionParameters.

        The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss

        :param cache_duration: The cache_duration of this CacheExpirationActionParameters.
        :type cache_duration: str
        """

        self._cache_duration = cache_duration

    @property
    def cache_type(self):
        """Gets the cache_type of this CacheExpirationActionParameters.

        The level at which the content needs to be cached.

        :return: The cache_type of this CacheExpirationActionParameters.
        :rtype: str
        """
        return self._cache_type

    @cache_type.setter
    def cache_type(self, cache_type):
        """Sets the cache_type of this CacheExpirationActionParameters.

        The level at which the content needs to be cached.

        :param cache_type: The cache_type of this CacheExpirationActionParameters.
        :type cache_type: str
        """
        allowed_values = ["All"]  # noqa: E501
        if cache_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cache_type` ({0}), must be one of {1}"
                .format(cache_type, allowed_values)
            )

        self._cache_type = cache_type
