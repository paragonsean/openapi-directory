# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CacheKeyQueryStringActionParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, odata_type: str=None, query_parameters: str=None, query_string_behavior: str=None):
        """CacheKeyQueryStringActionParameters - a model defined in OpenAPI

        :param odata_type: The odata_type of this CacheKeyQueryStringActionParameters.
        :param query_parameters: The query_parameters of this CacheKeyQueryStringActionParameters.
        :param query_string_behavior: The query_string_behavior of this CacheKeyQueryStringActionParameters.
        """
        self.openapi_types = {
            'odata_type': str,
            'query_parameters': str,
            'query_string_behavior': str
        }

        self.attribute_map = {
            'odata_type': '@odata.type',
            'query_parameters': 'queryParameters',
            'query_string_behavior': 'queryStringBehavior'
        }

        self._odata_type = odata_type
        self._query_parameters = query_parameters
        self._query_string_behavior = query_string_behavior

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CacheKeyQueryStringActionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CacheKeyQueryStringActionParameters of this CacheKeyQueryStringActionParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def odata_type(self):
        """Gets the odata_type of this CacheKeyQueryStringActionParameters.


        :return: The odata_type of this CacheKeyQueryStringActionParameters.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this CacheKeyQueryStringActionParameters.


        :param odata_type: The odata_type of this CacheKeyQueryStringActionParameters.
        :type odata_type: str
        """
        allowed_values = ["#Microsoft.Azure.Cdn.Models.DeliveryRuleCacheKeyQueryStringBehaviorActionParameters"]  # noqa: E501
        if odata_type not in allowed_values:
            raise ValueError(
                "Invalid value for `odata_type` ({0}), must be one of {1}"
                .format(odata_type, allowed_values)
            )

        self._odata_type = odata_type

    @property
    def query_parameters(self):
        """Gets the query_parameters of this CacheKeyQueryStringActionParameters.

        query parameters to include or exclude (comma separated).

        :return: The query_parameters of this CacheKeyQueryStringActionParameters.
        :rtype: str
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this CacheKeyQueryStringActionParameters.

        query parameters to include or exclude (comma separated).

        :param query_parameters: The query_parameters of this CacheKeyQueryStringActionParameters.
        :type query_parameters: str
        """

        self._query_parameters = query_parameters

    @property
    def query_string_behavior(self):
        """Gets the query_string_behavior of this CacheKeyQueryStringActionParameters.

        Caching behavior for the requests

        :return: The query_string_behavior of this CacheKeyQueryStringActionParameters.
        :rtype: str
        """
        return self._query_string_behavior

    @query_string_behavior.setter
    def query_string_behavior(self, query_string_behavior):
        """Sets the query_string_behavior of this CacheKeyQueryStringActionParameters.

        Caching behavior for the requests

        :param query_string_behavior: The query_string_behavior of this CacheKeyQueryStringActionParameters.
        :type query_string_behavior: str
        """
        allowed_values = ["Include", "IncludeAll", "Exclude", "ExcludeAll"]  # noqa: E501
        if query_string_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `query_string_behavior` ({0}), must be one of {1}"
                .format(query_string_behavior, allowed_values)
            )

        self._query_string_behavior = query_string_behavior
