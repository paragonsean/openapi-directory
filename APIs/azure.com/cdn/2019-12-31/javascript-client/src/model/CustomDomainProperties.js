/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomDomainProperties model module.
 * @module model/CustomDomainProperties
 * @version 2019-12-31
 */
class CustomDomainProperties {
    /**
     * Constructs a new <code>CustomDomainProperties</code>.
     * The JSON object that contains the properties of the custom domain to create.
     * @alias module:model/CustomDomainProperties
     * @param hostName {String} The host name of the custom domain. Must be a domain name.
     */
    constructor(hostName) { 
        
        CustomDomainProperties.initialize(this, hostName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hostName) { 
        obj['hostName'] = hostName;
    }

    /**
     * Constructs a <code>CustomDomainProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomDomainProperties} obj Optional instance to populate.
     * @return {module:model/CustomDomainProperties} The populated <code>CustomDomainProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomDomainProperties();

            if (data.hasOwnProperty('customHttpsProvisioningState')) {
                obj['customHttpsProvisioningState'] = ApiClient.convertToType(data['customHttpsProvisioningState'], 'String');
            }
            if (data.hasOwnProperty('customHttpsProvisioningSubstate')) {
                obj['customHttpsProvisioningSubstate'] = ApiClient.convertToType(data['customHttpsProvisioningSubstate'], 'String');
            }
            if (data.hasOwnProperty('hostName')) {
                obj['hostName'] = ApiClient.convertToType(data['hostName'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('resourceState')) {
                obj['resourceState'] = ApiClient.convertToType(data['resourceState'], 'String');
            }
            if (data.hasOwnProperty('validationData')) {
                obj['validationData'] = ApiClient.convertToType(data['validationData'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomDomainProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomDomainProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomDomainProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['customHttpsProvisioningState'] && !(typeof data['customHttpsProvisioningState'] === 'string' || data['customHttpsProvisioningState'] instanceof String)) {
            throw new Error("Expected the field `customHttpsProvisioningState` to be a primitive type in the JSON string but got " + data['customHttpsProvisioningState']);
        }
        // ensure the json data is a string
        if (data['customHttpsProvisioningSubstate'] && !(typeof data['customHttpsProvisioningSubstate'] === 'string' || data['customHttpsProvisioningSubstate'] instanceof String)) {
            throw new Error("Expected the field `customHttpsProvisioningSubstate` to be a primitive type in the JSON string but got " + data['customHttpsProvisioningSubstate']);
        }
        // ensure the json data is a string
        if (data['hostName'] && !(typeof data['hostName'] === 'string' || data['hostName'] instanceof String)) {
            throw new Error("Expected the field `hostName` to be a primitive type in the JSON string but got " + data['hostName']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['resourceState'] && !(typeof data['resourceState'] === 'string' || data['resourceState'] instanceof String)) {
            throw new Error("Expected the field `resourceState` to be a primitive type in the JSON string but got " + data['resourceState']);
        }
        // ensure the json data is a string
        if (data['validationData'] && !(typeof data['validationData'] === 'string' || data['validationData'] instanceof String)) {
            throw new Error("Expected the field `validationData` to be a primitive type in the JSON string but got " + data['validationData']);
        }

        return true;
    }


}

CustomDomainProperties.RequiredProperties = ["hostName"];

/**
 * Provisioning status of Custom Https of the custom domain.
 * @member {module:model/CustomDomainProperties.CustomHttpsProvisioningStateEnum} customHttpsProvisioningState
 */
CustomDomainProperties.prototype['customHttpsProvisioningState'] = undefined;

/**
 * Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
 * @member {module:model/CustomDomainProperties.CustomHttpsProvisioningSubstateEnum} customHttpsProvisioningSubstate
 */
CustomDomainProperties.prototype['customHttpsProvisioningSubstate'] = undefined;

/**
 * The host name of the custom domain. Must be a domain name.
 * @member {String} hostName
 */
CustomDomainProperties.prototype['hostName'] = undefined;

/**
 * Provisioning status of the custom domain.
 * @member {String} provisioningState
 */
CustomDomainProperties.prototype['provisioningState'] = undefined;

/**
 * Resource status of the custom domain.
 * @member {module:model/CustomDomainProperties.ResourceStateEnum} resourceState
 */
CustomDomainProperties.prototype['resourceState'] = undefined;

/**
 * Special validation or data may be required when delivering CDN to some regions due to local compliance reasons. E.g. ICP license number of a custom domain is required to deliver content in China.
 * @member {String} validationData
 */
CustomDomainProperties.prototype['validationData'] = undefined;





/**
 * Allowed values for the <code>customHttpsProvisioningState</code> property.
 * @enum {String}
 * @readonly
 */
CustomDomainProperties['CustomHttpsProvisioningStateEnum'] = {

    /**
     * value: "Enabling"
     * @const
     */
    "Enabling": "Enabling",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabling"
     * @const
     */
    "Disabling": "Disabling",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};


/**
 * Allowed values for the <code>customHttpsProvisioningSubstate</code> property.
 * @enum {String}
 * @readonly
 */
CustomDomainProperties['CustomHttpsProvisioningSubstateEnum'] = {

    /**
     * value: "SubmittingDomainControlValidationRequest"
     * @const
     */
    "SubmittingDomainControlValidationRequest": "SubmittingDomainControlValidationRequest",

    /**
     * value: "PendingDomainControlValidationREquestApproval"
     * @const
     */
    "PendingDomainControlValidationREquestApproval": "PendingDomainControlValidationREquestApproval",

    /**
     * value: "DomainControlValidationRequestApproved"
     * @const
     */
    "DomainControlValidationRequestApproved": "DomainControlValidationRequestApproved",

    /**
     * value: "DomainControlValidationRequestRejected"
     * @const
     */
    "DomainControlValidationRequestRejected": "DomainControlValidationRequestRejected",

    /**
     * value: "DomainControlValidationRequestTimedOut"
     * @const
     */
    "DomainControlValidationRequestTimedOut": "DomainControlValidationRequestTimedOut",

    /**
     * value: "IssuingCertificate"
     * @const
     */
    "IssuingCertificate": "IssuingCertificate",

    /**
     * value: "DeployingCertificate"
     * @const
     */
    "DeployingCertificate": "DeployingCertificate",

    /**
     * value: "CertificateDeployed"
     * @const
     */
    "CertificateDeployed": "CertificateDeployed",

    /**
     * value: "DeletingCertificate"
     * @const
     */
    "DeletingCertificate": "DeletingCertificate",

    /**
     * value: "CertificateDeleted"
     * @const
     */
    "CertificateDeleted": "CertificateDeleted"
};


/**
 * Allowed values for the <code>resourceState</code> property.
 * @enum {String}
 * @readonly
 */
CustomDomainProperties['ResourceStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting"
};



export default CustomDomainProperties;

