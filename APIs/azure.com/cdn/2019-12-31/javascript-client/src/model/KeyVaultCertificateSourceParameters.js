/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeyVaultCertificateSourceParameters model module.
 * @module model/KeyVaultCertificateSourceParameters
 * @version 2019-12-31
 */
class KeyVaultCertificateSourceParameters {
    /**
     * Constructs a new <code>KeyVaultCertificateSourceParameters</code>.
     * Describes the parameters for using a user&#39;s KeyVault certificate for securing custom domain.
     * @alias module:model/KeyVaultCertificateSourceParameters
     * @param odataType {module:model/KeyVaultCertificateSourceParameters.OdataTypeEnum} 
     * @param deleteRule {module:model/KeyVaultCertificateSourceParameters.DeleteRuleEnum} Describes the action that shall be taken when the certificate is removed from Key Vault.
     * @param resourceGroupName {String} Resource group of the user's Key Vault containing the SSL certificate
     * @param secretName {String} The name of Key Vault Secret (representing the full certificate PFX) in Key Vault.
     * @param secretVersion {String} The version(GUID) of Key Vault Secret in Key Vault.
     * @param subscriptionId {String} Subscription Id of the user's Key Vault containing the SSL certificate
     * @param updateRule {module:model/KeyVaultCertificateSourceParameters.UpdateRuleEnum} Describes the action that shall be taken when the certificate is updated in Key Vault.
     * @param vaultName {String} The name of the user's Key Vault containing the SSL certificate
     */
    constructor(odataType, deleteRule, resourceGroupName, secretName, secretVersion, subscriptionId, updateRule, vaultName) { 
        
        KeyVaultCertificateSourceParameters.initialize(this, odataType, deleteRule, resourceGroupName, secretName, secretVersion, subscriptionId, updateRule, vaultName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType, deleteRule, resourceGroupName, secretName, secretVersion, subscriptionId, updateRule, vaultName) { 
        obj['@odata.type'] = odataType;
        obj['deleteRule'] = deleteRule;
        obj['resourceGroupName'] = resourceGroupName;
        obj['secretName'] = secretName;
        obj['secretVersion'] = secretVersion;
        obj['subscriptionId'] = subscriptionId;
        obj['updateRule'] = updateRule;
        obj['vaultName'] = vaultName;
    }

    /**
     * Constructs a <code>KeyVaultCertificateSourceParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyVaultCertificateSourceParameters} obj Optional instance to populate.
     * @return {module:model/KeyVaultCertificateSourceParameters} The populated <code>KeyVaultCertificateSourceParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyVaultCertificateSourceParameters();

            if (data.hasOwnProperty('@odata.type')) {
                obj['@odata.type'] = ApiClient.convertToType(data['@odata.type'], 'String');
            }
            if (data.hasOwnProperty('deleteRule')) {
                obj['deleteRule'] = ApiClient.convertToType(data['deleteRule'], 'String');
            }
            if (data.hasOwnProperty('resourceGroupName')) {
                obj['resourceGroupName'] = ApiClient.convertToType(data['resourceGroupName'], 'String');
            }
            if (data.hasOwnProperty('secretName')) {
                obj['secretName'] = ApiClient.convertToType(data['secretName'], 'String');
            }
            if (data.hasOwnProperty('secretVersion')) {
                obj['secretVersion'] = ApiClient.convertToType(data['secretVersion'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('updateRule')) {
                obj['updateRule'] = ApiClient.convertToType(data['updateRule'], 'String');
            }
            if (data.hasOwnProperty('vaultName')) {
                obj['vaultName'] = ApiClient.convertToType(data['vaultName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyVaultCertificateSourceParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyVaultCertificateSourceParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KeyVaultCertificateSourceParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['@odata.type'] && !(typeof data['@odata.type'] === 'string' || data['@odata.type'] instanceof String)) {
            throw new Error("Expected the field `@odata.type` to be a primitive type in the JSON string but got " + data['@odata.type']);
        }
        // ensure the json data is a string
        if (data['deleteRule'] && !(typeof data['deleteRule'] === 'string' || data['deleteRule'] instanceof String)) {
            throw new Error("Expected the field `deleteRule` to be a primitive type in the JSON string but got " + data['deleteRule']);
        }
        // ensure the json data is a string
        if (data['resourceGroupName'] && !(typeof data['resourceGroupName'] === 'string' || data['resourceGroupName'] instanceof String)) {
            throw new Error("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got " + data['resourceGroupName']);
        }
        // ensure the json data is a string
        if (data['secretName'] && !(typeof data['secretName'] === 'string' || data['secretName'] instanceof String)) {
            throw new Error("Expected the field `secretName` to be a primitive type in the JSON string but got " + data['secretName']);
        }
        // ensure the json data is a string
        if (data['secretVersion'] && !(typeof data['secretVersion'] === 'string' || data['secretVersion'] instanceof String)) {
            throw new Error("Expected the field `secretVersion` to be a primitive type in the JSON string but got " + data['secretVersion']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is a string
        if (data['updateRule'] && !(typeof data['updateRule'] === 'string' || data['updateRule'] instanceof String)) {
            throw new Error("Expected the field `updateRule` to be a primitive type in the JSON string but got " + data['updateRule']);
        }
        // ensure the json data is a string
        if (data['vaultName'] && !(typeof data['vaultName'] === 'string' || data['vaultName'] instanceof String)) {
            throw new Error("Expected the field `vaultName` to be a primitive type in the JSON string but got " + data['vaultName']);
        }

        return true;
    }


}

KeyVaultCertificateSourceParameters.RequiredProperties = ["@odata.type", "deleteRule", "resourceGroupName", "secretName", "secretVersion", "subscriptionId", "updateRule", "vaultName"];

/**
 * @member {module:model/KeyVaultCertificateSourceParameters.OdataTypeEnum} @odata.type
 */
KeyVaultCertificateSourceParameters.prototype['@odata.type'] = undefined;

/**
 * Describes the action that shall be taken when the certificate is removed from Key Vault.
 * @member {module:model/KeyVaultCertificateSourceParameters.DeleteRuleEnum} deleteRule
 */
KeyVaultCertificateSourceParameters.prototype['deleteRule'] = undefined;

/**
 * Resource group of the user's Key Vault containing the SSL certificate
 * @member {String} resourceGroupName
 */
KeyVaultCertificateSourceParameters.prototype['resourceGroupName'] = undefined;

/**
 * The name of Key Vault Secret (representing the full certificate PFX) in Key Vault.
 * @member {String} secretName
 */
KeyVaultCertificateSourceParameters.prototype['secretName'] = undefined;

/**
 * The version(GUID) of Key Vault Secret in Key Vault.
 * @member {String} secretVersion
 */
KeyVaultCertificateSourceParameters.prototype['secretVersion'] = undefined;

/**
 * Subscription Id of the user's Key Vault containing the SSL certificate
 * @member {String} subscriptionId
 */
KeyVaultCertificateSourceParameters.prototype['subscriptionId'] = undefined;

/**
 * Describes the action that shall be taken when the certificate is updated in Key Vault.
 * @member {module:model/KeyVaultCertificateSourceParameters.UpdateRuleEnum} updateRule
 */
KeyVaultCertificateSourceParameters.prototype['updateRule'] = undefined;

/**
 * The name of the user's Key Vault containing the SSL certificate
 * @member {String} vaultName
 */
KeyVaultCertificateSourceParameters.prototype['vaultName'] = undefined;





/**
 * Allowed values for the <code>@odata.type</code> property.
 * @enum {String}
 * @readonly
 */
KeyVaultCertificateSourceParameters['OdataTypeEnum'] = {

    /**
     * value: "#Microsoft.Azure.Cdn.Models.KeyVaultCertificateSourceParameters"
     * @const
     */
    "#Microsoft.Azure.Cdn.Models.KeyVaultCertificateSourceParameters": "#Microsoft.Azure.Cdn.Models.KeyVaultCertificateSourceParameters"
};


/**
 * Allowed values for the <code>deleteRule</code> property.
 * @enum {String}
 * @readonly
 */
KeyVaultCertificateSourceParameters['DeleteRuleEnum'] = {

    /**
     * value: "NoAction"
     * @const
     */
    "NoAction": "NoAction"
};


/**
 * Allowed values for the <code>updateRule</code> property.
 * @enum {String}
 * @readonly
 */
KeyVaultCertificateSourceParameters['UpdateRuleEnum'] = {

    /**
     * value: "NoAction"
     * @const
     */
    "NoAction": "NoAction"
};



export default KeyVaultCertificateSourceParameters;

