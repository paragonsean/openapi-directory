/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HttpErrorRangeParameters from './HttpErrorRangeParameters';

/**
 * The ResponseBasedOriginErrorDetectionParameters model module.
 * @module model/ResponseBasedOriginErrorDetectionParameters
 * @version 2019-12-31
 */
class ResponseBasedOriginErrorDetectionParameters {
    /**
     * Constructs a new <code>ResponseBasedOriginErrorDetectionParameters</code>.
     * The JSON object that contains the properties to determine origin health using real requests/responses.
     * @alias module:model/ResponseBasedOriginErrorDetectionParameters
     */
    constructor() { 
        
        ResponseBasedOriginErrorDetectionParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResponseBasedOriginErrorDetectionParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseBasedOriginErrorDetectionParameters} obj Optional instance to populate.
     * @return {module:model/ResponseBasedOriginErrorDetectionParameters} The populated <code>ResponseBasedOriginErrorDetectionParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseBasedOriginErrorDetectionParameters();

            if (data.hasOwnProperty('httpErrorRanges')) {
                obj['httpErrorRanges'] = ApiClient.convertToType(data['httpErrorRanges'], [HttpErrorRangeParameters]);
            }
            if (data.hasOwnProperty('responseBasedDetectedErrorTypes')) {
                obj['responseBasedDetectedErrorTypes'] = ApiClient.convertToType(data['responseBasedDetectedErrorTypes'], 'String');
            }
            if (data.hasOwnProperty('responseBasedFailoverThresholdPercentage')) {
                obj['responseBasedFailoverThresholdPercentage'] = ApiClient.convertToType(data['responseBasedFailoverThresholdPercentage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResponseBasedOriginErrorDetectionParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResponseBasedOriginErrorDetectionParameters</code>.
     */
    static validateJSON(data) {
        if (data['httpErrorRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['httpErrorRanges'])) {
                throw new Error("Expected the field `httpErrorRanges` to be an array in the JSON data but got " + data['httpErrorRanges']);
            }
            // validate the optional field `httpErrorRanges` (array)
            for (const item of data['httpErrorRanges']) {
                HttpErrorRangeParameters.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['responseBasedDetectedErrorTypes'] && !(typeof data['responseBasedDetectedErrorTypes'] === 'string' || data['responseBasedDetectedErrorTypes'] instanceof String)) {
            throw new Error("Expected the field `responseBasedDetectedErrorTypes` to be a primitive type in the JSON string but got " + data['responseBasedDetectedErrorTypes']);
        }

        return true;
    }


}



/**
 * The list of Http status code ranges that are considered as server errors for origin and it is marked as unhealthy.
 * @member {Array.<module:model/HttpErrorRangeParameters>} httpErrorRanges
 */
ResponseBasedOriginErrorDetectionParameters.prototype['httpErrorRanges'] = undefined;

/**
 * Type of response errors for real user requests for which origin will be deemed unhealthy
 * @member {module:model/ResponseBasedOriginErrorDetectionParameters.ResponseBasedDetectedErrorTypesEnum} responseBasedDetectedErrorTypes
 */
ResponseBasedOriginErrorDetectionParameters.prototype['responseBasedDetectedErrorTypes'] = undefined;

/**
 * The percentage of failed requests in the sample where failover should trigger.
 * @member {Number} responseBasedFailoverThresholdPercentage
 */
ResponseBasedOriginErrorDetectionParameters.prototype['responseBasedFailoverThresholdPercentage'] = undefined;





/**
 * Allowed values for the <code>responseBasedDetectedErrorTypes</code> property.
 * @enum {String}
 * @readonly
 */
ResponseBasedOriginErrorDetectionParameters['ResponseBasedDetectedErrorTypesEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "TcpErrorsOnly"
     * @const
     */
    "TcpErrorsOnly": "TcpErrorsOnly",

    /**
     * value: "TcpAndHttpErrors"
     * @const
     */
    "TcpAndHttpErrors": "TcpAndHttpErrors"
};



export default ResponseBasedOriginErrorDetectionParameters;

