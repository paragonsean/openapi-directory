/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeliveryRuleAction from './DeliveryRuleAction';
import DeliveryRuleCondition from './DeliveryRuleCondition';

/**
 * The DeliveryRule model module.
 * @module model/DeliveryRule
 * @version 2019-12-31
 */
class DeliveryRule {
    /**
     * Constructs a new <code>DeliveryRule</code>.
     * A rule that specifies a set of actions and conditions
     * @alias module:model/DeliveryRule
     * @param actions {Array.<module:model/DeliveryRuleAction>} A list of actions that are executed when all the conditions of a rule are satisfied.
     * @param order {Number} The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied.
     */
    constructor(actions, order) { 
        
        DeliveryRule.initialize(this, actions, order);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actions, order) { 
        obj['actions'] = actions;
        obj['order'] = order;
    }

    /**
     * Constructs a <code>DeliveryRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeliveryRule} obj Optional instance to populate.
     * @return {module:model/DeliveryRule} The populated <code>DeliveryRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeliveryRule();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [DeliveryRuleAction]);
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [DeliveryRuleCondition]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeliveryRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeliveryRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeliveryRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                DeliveryRuleAction.validateJSON(item);
            };
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                DeliveryRuleCondition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

DeliveryRule.RequiredProperties = ["actions", "order"];

/**
 * A list of actions that are executed when all the conditions of a rule are satisfied.
 * @member {Array.<module:model/DeliveryRuleAction>} actions
 */
DeliveryRule.prototype['actions'] = undefined;

/**
 * A list of conditions that must be matched for the actions to be executed
 * @member {Array.<module:model/DeliveryRuleCondition>} conditions
 */
DeliveryRule.prototype['conditions'] = undefined;

/**
 * Name of the rule
 * @member {String} name
 */
DeliveryRule.prototype['name'] = undefined;

/**
 * The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied.
 * @member {Number} order
 */
DeliveryRule.prototype['order'] = undefined;






export default DeliveryRule;

