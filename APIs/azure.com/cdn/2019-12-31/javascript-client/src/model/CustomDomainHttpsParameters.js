/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomDomainHttpsParameters model module.
 * @module model/CustomDomainHttpsParameters
 * @version 2019-12-31
 */
class CustomDomainHttpsParameters {
    /**
     * Constructs a new <code>CustomDomainHttpsParameters</code>.
     * The JSON object that contains the properties to secure a custom domain.
     * @alias module:model/CustomDomainHttpsParameters
     * @param certificateSource {module:model/CustomDomainHttpsParameters.CertificateSourceEnum} Defines the source of the SSL certificate.
     * @param protocolType {module:model/CustomDomainHttpsParameters.ProtocolTypeEnum} Defines the TLS extension protocol that is used for secure delivery.
     */
    constructor(certificateSource, protocolType) { 
        
        CustomDomainHttpsParameters.initialize(this, certificateSource, protocolType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificateSource, protocolType) { 
        obj['certificateSource'] = certificateSource;
        obj['protocolType'] = protocolType;
    }

    /**
     * Constructs a <code>CustomDomainHttpsParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomDomainHttpsParameters} obj Optional instance to populate.
     * @return {module:model/CustomDomainHttpsParameters} The populated <code>CustomDomainHttpsParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomDomainHttpsParameters();

            if (data.hasOwnProperty('certificateSource')) {
                obj['certificateSource'] = ApiClient.convertToType(data['certificateSource'], 'String');
            }
            if (data.hasOwnProperty('minimumTlsVersion')) {
                obj['minimumTlsVersion'] = ApiClient.convertToType(data['minimumTlsVersion'], 'String');
            }
            if (data.hasOwnProperty('protocolType')) {
                obj['protocolType'] = ApiClient.convertToType(data['protocolType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomDomainHttpsParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomDomainHttpsParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomDomainHttpsParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['certificateSource'] && !(typeof data['certificateSource'] === 'string' || data['certificateSource'] instanceof String)) {
            throw new Error("Expected the field `certificateSource` to be a primitive type in the JSON string but got " + data['certificateSource']);
        }
        // ensure the json data is a string
        if (data['minimumTlsVersion'] && !(typeof data['minimumTlsVersion'] === 'string' || data['minimumTlsVersion'] instanceof String)) {
            throw new Error("Expected the field `minimumTlsVersion` to be a primitive type in the JSON string but got " + data['minimumTlsVersion']);
        }
        // ensure the json data is a string
        if (data['protocolType'] && !(typeof data['protocolType'] === 'string' || data['protocolType'] instanceof String)) {
            throw new Error("Expected the field `protocolType` to be a primitive type in the JSON string but got " + data['protocolType']);
        }

        return true;
    }


}

CustomDomainHttpsParameters.RequiredProperties = ["certificateSource", "protocolType"];

/**
 * Defines the source of the SSL certificate.
 * @member {module:model/CustomDomainHttpsParameters.CertificateSourceEnum} certificateSource
 */
CustomDomainHttpsParameters.prototype['certificateSource'] = undefined;

/**
 * TLS protocol version that will be used for Https
 * @member {module:model/CustomDomainHttpsParameters.MinimumTlsVersionEnum} minimumTlsVersion
 */
CustomDomainHttpsParameters.prototype['minimumTlsVersion'] = undefined;

/**
 * Defines the TLS extension protocol that is used for secure delivery.
 * @member {module:model/CustomDomainHttpsParameters.ProtocolTypeEnum} protocolType
 */
CustomDomainHttpsParameters.prototype['protocolType'] = undefined;





/**
 * Allowed values for the <code>certificateSource</code> property.
 * @enum {String}
 * @readonly
 */
CustomDomainHttpsParameters['CertificateSourceEnum'] = {

    /**
     * value: "AzureKeyVault"
     * @const
     */
    "AzureKeyVault": "AzureKeyVault",

    /**
     * value: "Cdn"
     * @const
     */
    "Cdn": "Cdn"
};


/**
 * Allowed values for the <code>minimumTlsVersion</code> property.
 * @enum {String}
 * @readonly
 */
CustomDomainHttpsParameters['MinimumTlsVersionEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "TLS10"
     * @const
     */
    "TLS10": "TLS10",

    /**
     * value: "TLS12"
     * @const
     */
    "TLS12": "TLS12"
};


/**
 * Allowed values for the <code>protocolType</code> property.
 * @enum {String}
 * @readonly
 */
CustomDomainHttpsParameters['ProtocolTypeEnum'] = {

    /**
     * value: "ServerNameIndication"
     * @const
     */
    "ServerNameIndication": "ServerNameIndication",

    /**
     * value: "IPBased"
     * @const
     */
    "IPBased": "IPBased"
};



export default CustomDomainHttpsParameters;

