/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Transform from './Transform';

/**
 * The RemoteAddressMatchConditionParameters model module.
 * @module model/RemoteAddressMatchConditionParameters
 * @version 2019-12-31
 */
class RemoteAddressMatchConditionParameters {
    /**
     * Constructs a new <code>RemoteAddressMatchConditionParameters</code>.
     * Defines the parameters for RemoteAddress match conditions
     * @alias module:model/RemoteAddressMatchConditionParameters
     * @param odataType {module:model/RemoteAddressMatchConditionParameters.OdataTypeEnum} 
     * @param matchValues {Array.<String>} Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
     * @param operator {module:model/RemoteAddressMatchConditionParameters.OperatorEnum} Describes operator to be matched
     */
    constructor(odataType, matchValues, operator) { 
        
        RemoteAddressMatchConditionParameters.initialize(this, odataType, matchValues, operator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType, matchValues, operator) { 
        obj['@odata.type'] = odataType;
        obj['matchValues'] = matchValues;
        obj['operator'] = operator;
    }

    /**
     * Constructs a <code>RemoteAddressMatchConditionParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RemoteAddressMatchConditionParameters} obj Optional instance to populate.
     * @return {module:model/RemoteAddressMatchConditionParameters} The populated <code>RemoteAddressMatchConditionParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RemoteAddressMatchConditionParameters();

            if (data.hasOwnProperty('@odata.type')) {
                obj['@odata.type'] = ApiClient.convertToType(data['@odata.type'], 'String');
            }
            if (data.hasOwnProperty('matchValues')) {
                obj['matchValues'] = ApiClient.convertToType(data['matchValues'], ['String']);
            }
            if (data.hasOwnProperty('negateCondition')) {
                obj['negateCondition'] = ApiClient.convertToType(data['negateCondition'], 'Boolean');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('transforms')) {
                obj['transforms'] = ApiClient.convertToType(data['transforms'], [Transform]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RemoteAddressMatchConditionParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RemoteAddressMatchConditionParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RemoteAddressMatchConditionParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['@odata.type'] && !(typeof data['@odata.type'] === 'string' || data['@odata.type'] instanceof String)) {
            throw new Error("Expected the field `@odata.type` to be a primitive type in the JSON string but got " + data['@odata.type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['matchValues'])) {
            throw new Error("Expected the field `matchValues` to be an array in the JSON data but got " + data['matchValues']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['transforms'])) {
            throw new Error("Expected the field `transforms` to be an array in the JSON data but got " + data['transforms']);
        }

        return true;
    }


}

RemoteAddressMatchConditionParameters.RequiredProperties = ["@odata.type", "matchValues", "operator"];

/**
 * @member {module:model/RemoteAddressMatchConditionParameters.OdataTypeEnum} @odata.type
 */
RemoteAddressMatchConditionParameters.prototype['@odata.type'] = undefined;

/**
 * Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
 * @member {Array.<String>} matchValues
 */
RemoteAddressMatchConditionParameters.prototype['matchValues'] = undefined;

/**
 * Describes if this is negate condition or not
 * @member {Boolean} negateCondition
 */
RemoteAddressMatchConditionParameters.prototype['negateCondition'] = undefined;

/**
 * Describes operator to be matched
 * @member {module:model/RemoteAddressMatchConditionParameters.OperatorEnum} operator
 */
RemoteAddressMatchConditionParameters.prototype['operator'] = undefined;

/**
 * List of transforms
 * @member {Array.<module:model/Transform>} transforms
 */
RemoteAddressMatchConditionParameters.prototype['transforms'] = undefined;





/**
 * Allowed values for the <code>@odata.type</code> property.
 * @enum {String}
 * @readonly
 */
RemoteAddressMatchConditionParameters['OdataTypeEnum'] = {

    /**
     * value: "#Microsoft.Azure.Cdn.Models.DeliveryRuleRemoteAddressConditionParameters"
     * @const
     */
    "#Microsoft.Azure.Cdn.Models.DeliveryRuleRemoteAddressConditionParameters": "#Microsoft.Azure.Cdn.Models.DeliveryRuleRemoteAddressConditionParameters"
};


/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
RemoteAddressMatchConditionParameters['OperatorEnum'] = {

    /**
     * value: "Any"
     * @const
     */
    "Any": "Any",

    /**
     * value: "IPMatch"
     * @const
     */
    "IPMatch": "IPMatch",

    /**
     * value: "GeoMatch"
     * @const
     */
    "GeoMatch": "GeoMatch"
};



export default RemoteAddressMatchConditionParameters;

