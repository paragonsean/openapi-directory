/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HealthProbeParameters model module.
 * @module model/HealthProbeParameters
 * @version 2019-12-31
 */
class HealthProbeParameters {
    /**
     * Constructs a new <code>HealthProbeParameters</code>.
     * The JSON object that contains the properties to send health probes to origin.
     * @alias module:model/HealthProbeParameters
     */
    constructor() { 
        
        HealthProbeParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HealthProbeParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HealthProbeParameters} obj Optional instance to populate.
     * @return {module:model/HealthProbeParameters} The populated <code>HealthProbeParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HealthProbeParameters();

            if (data.hasOwnProperty('probeIntervalInSeconds')) {
                obj['probeIntervalInSeconds'] = ApiClient.convertToType(data['probeIntervalInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('probePath')) {
                obj['probePath'] = ApiClient.convertToType(data['probePath'], 'String');
            }
            if (data.hasOwnProperty('probeProtocol')) {
                obj['probeProtocol'] = ApiClient.convertToType(data['probeProtocol'], 'String');
            }
            if (data.hasOwnProperty('probeRequestType')) {
                obj['probeRequestType'] = ApiClient.convertToType(data['probeRequestType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HealthProbeParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HealthProbeParameters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['probePath'] && !(typeof data['probePath'] === 'string' || data['probePath'] instanceof String)) {
            throw new Error("Expected the field `probePath` to be a primitive type in the JSON string but got " + data['probePath']);
        }
        // ensure the json data is a string
        if (data['probeProtocol'] && !(typeof data['probeProtocol'] === 'string' || data['probeProtocol'] instanceof String)) {
            throw new Error("Expected the field `probeProtocol` to be a primitive type in the JSON string but got " + data['probeProtocol']);
        }
        // ensure the json data is a string
        if (data['probeRequestType'] && !(typeof data['probeRequestType'] === 'string' || data['probeRequestType'] instanceof String)) {
            throw new Error("Expected the field `probeRequestType` to be a primitive type in the JSON string but got " + data['probeRequestType']);
        }

        return true;
    }


}



/**
 * The number of seconds between health probes.Default is 240sec.
 * @member {Number} probeIntervalInSeconds
 */
HealthProbeParameters.prototype['probeIntervalInSeconds'] = undefined;

/**
 * The path relative to the origin that is used to determine the health of the origin.
 * @member {String} probePath
 */
HealthProbeParameters.prototype['probePath'] = undefined;

/**
 * Protocol to use for health probe.
 * @member {module:model/HealthProbeParameters.ProbeProtocolEnum} probeProtocol
 */
HealthProbeParameters.prototype['probeProtocol'] = undefined;

/**
 * The type of health probe request that is made.
 * @member {module:model/HealthProbeParameters.ProbeRequestTypeEnum} probeRequestType
 */
HealthProbeParameters.prototype['probeRequestType'] = undefined;





/**
 * Allowed values for the <code>probeProtocol</code> property.
 * @enum {String}
 * @readonly
 */
HealthProbeParameters['ProbeProtocolEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "Http"
     * @const
     */
    "Http": "Http",

    /**
     * value: "Https"
     * @const
     */
    "Https": "Https"
};


/**
 * Allowed values for the <code>probeRequestType</code> property.
 * @enum {String}
 * @readonly
 */
HealthProbeParameters['ProbeRequestTypeEnum'] = {

    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",

    /**
     * value: "GET"
     * @const
     */
    "GET": "GET",

    /**
     * value: "HEAD"
     * @const
     */
    "HEAD": "HEAD"
};



export default HealthProbeParameters;

