/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GeoFilter model module.
 * @module model/GeoFilter
 * @version 2019-12-31
 */
class GeoFilter {
    /**
     * Constructs a new <code>GeoFilter</code>.
     * Rules defining user&#39;s geo access within a CDN endpoint.
     * @alias module:model/GeoFilter
     * @param action {module:model/GeoFilter.ActionEnum} Action of the geo filter, i.e. allow or block access.
     * @param countryCodes {Array.<String>} Two letter country codes defining user country access in a geo filter, e.g. AU, MX, US.
     * @param relativePath {String} Relative path applicable to geo filter. (e.g. '/mypictures', '/mypicture/kitty.jpg', and etc.)
     */
    constructor(action, countryCodes, relativePath) { 
        
        GeoFilter.initialize(this, action, countryCodes, relativePath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, countryCodes, relativePath) { 
        obj['action'] = action;
        obj['countryCodes'] = countryCodes;
        obj['relativePath'] = relativePath;
    }

    /**
     * Constructs a <code>GeoFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoFilter} obj Optional instance to populate.
     * @return {module:model/GeoFilter} The populated <code>GeoFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoFilter();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('countryCodes')) {
                obj['countryCodes'] = ApiClient.convertToType(data['countryCodes'], ['String']);
            }
            if (data.hasOwnProperty('relativePath')) {
                obj['relativePath'] = ApiClient.convertToType(data['relativePath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GeoFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['countryCodes'])) {
            throw new Error("Expected the field `countryCodes` to be an array in the JSON data but got " + data['countryCodes']);
        }
        // ensure the json data is a string
        if (data['relativePath'] && !(typeof data['relativePath'] === 'string' || data['relativePath'] instanceof String)) {
            throw new Error("Expected the field `relativePath` to be a primitive type in the JSON string but got " + data['relativePath']);
        }

        return true;
    }


}

GeoFilter.RequiredProperties = ["action", "countryCodes", "relativePath"];

/**
 * Action of the geo filter, i.e. allow or block access.
 * @member {module:model/GeoFilter.ActionEnum} action
 */
GeoFilter.prototype['action'] = undefined;

/**
 * Two letter country codes defining user country access in a geo filter, e.g. AU, MX, US.
 * @member {Array.<String>} countryCodes
 */
GeoFilter.prototype['countryCodes'] = undefined;

/**
 * Relative path applicable to geo filter. (e.g. '/mypictures', '/mypicture/kitty.jpg', and etc.)
 * @member {String} relativePath
 */
GeoFilter.prototype['relativePath'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
GeoFilter['ActionEnum'] = {

    /**
     * value: "Block"
     * @const
     */
    "Block": "Block",

    /**
     * value: "Allow"
     * @const
     */
    "Allow": "Allow"
};



export default GeoFilter;

