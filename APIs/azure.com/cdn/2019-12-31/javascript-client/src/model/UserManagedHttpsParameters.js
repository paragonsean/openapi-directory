/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomDomainHttpsParameters from './CustomDomainHttpsParameters';
import KeyVaultCertificateSourceParameters from './KeyVaultCertificateSourceParameters';

/**
 * The UserManagedHttpsParameters model module.
 * @module model/UserManagedHttpsParameters
 * @version 2019-12-31
 */
class UserManagedHttpsParameters {
    /**
     * Constructs a new <code>UserManagedHttpsParameters</code>.
     * Defines the certificate source parameters using user&#39;s keyvault certificate for enabling SSL.
     * @alias module:model/UserManagedHttpsParameters
     * @extends module:model/CustomDomainHttpsParameters
     * @implements module:model/CustomDomainHttpsParameters
     * @param certificateSource {module:model/UserManagedHttpsParameters.CertificateSourceEnum} Defines the source of the SSL certificate.
     * @param protocolType {module:model/UserManagedHttpsParameters.ProtocolTypeEnum} Defines the TLS extension protocol that is used for secure delivery.
     */
    constructor(certificateSource, protocolType) { 
        CustomDomainHttpsParameters.initialize(this, certificateSource, protocolType);
        UserManagedHttpsParameters.initialize(this, certificateSource, protocolType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificateSource, protocolType) { 
        obj['certificateSourceParameters'] = certificateSourceParameters;
    }

    /**
     * Constructs a <code>UserManagedHttpsParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserManagedHttpsParameters} obj Optional instance to populate.
     * @return {module:model/UserManagedHttpsParameters} The populated <code>UserManagedHttpsParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserManagedHttpsParameters();
            CustomDomainHttpsParameters.constructFromObject(data, obj);
            CustomDomainHttpsParameters.constructFromObject(data, obj);

            if (data.hasOwnProperty('certificateSourceParameters')) {
                obj['certificateSourceParameters'] = KeyVaultCertificateSourceParameters.constructFromObject(data['certificateSourceParameters']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserManagedHttpsParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserManagedHttpsParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserManagedHttpsParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `certificateSourceParameters`
        if (data['certificateSourceParameters']) { // data not null
          KeyVaultCertificateSourceParameters.validateJSON(data['certificateSourceParameters']);
        }

        return true;
    }


}

UserManagedHttpsParameters.RequiredProperties = ["certificateSourceParameters", "certificateSource", "protocolType"];

/**
 * @member {module:model/KeyVaultCertificateSourceParameters} certificateSourceParameters
 */
UserManagedHttpsParameters.prototype['certificateSourceParameters'] = undefined;


// Implement CustomDomainHttpsParameters interface:
/**
 * Defines the source of the SSL certificate.
 * @member {module:model/CustomDomainHttpsParameters.CertificateSourceEnum} certificateSource
 */
CustomDomainHttpsParameters.prototype['certificateSource'] = undefined;
/**
 * TLS protocol version that will be used for Https
 * @member {module:model/CustomDomainHttpsParameters.MinimumTlsVersionEnum} minimumTlsVersion
 */
CustomDomainHttpsParameters.prototype['minimumTlsVersion'] = undefined;
/**
 * Defines the TLS extension protocol that is used for secure delivery.
 * @member {module:model/CustomDomainHttpsParameters.ProtocolTypeEnum} protocolType
 */
CustomDomainHttpsParameters.prototype['protocolType'] = undefined;




export default UserManagedHttpsParameters;

