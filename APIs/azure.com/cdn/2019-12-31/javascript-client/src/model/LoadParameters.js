/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LoadParameters model module.
 * @module model/LoadParameters
 * @version 2019-12-31
 */
class LoadParameters {
    /**
     * Constructs a new <code>LoadParameters</code>.
     * Parameters required for content load.
     * @alias module:model/LoadParameters
     * @param contentPaths {Array.<String>} The path to the content to be loaded. Path should be a relative file URL of the origin.
     */
    constructor(contentPaths) { 
        
        LoadParameters.initialize(this, contentPaths);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentPaths) { 
        obj['contentPaths'] = contentPaths;
    }

    /**
     * Constructs a <code>LoadParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoadParameters} obj Optional instance to populate.
     * @return {module:model/LoadParameters} The populated <code>LoadParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoadParameters();

            if (data.hasOwnProperty('contentPaths')) {
                obj['contentPaths'] = ApiClient.convertToType(data['contentPaths'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoadParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoadParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LoadParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contentPaths'])) {
            throw new Error("Expected the field `contentPaths` to be an array in the JSON data but got " + data['contentPaths']);
        }

        return true;
    }


}

LoadParameters.RequiredProperties = ["contentPaths"];

/**
 * The path to the content to be loaded. Path should be a relative file URL of the origin.
 * @member {Array.<String>} contentPaths
 */
LoadParameters.prototype['contentPaths'] = undefined;






export default LoadParameters;

