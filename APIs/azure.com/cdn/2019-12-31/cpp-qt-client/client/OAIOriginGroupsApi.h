/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOriginGroupsApi_H
#define OAI_OAIOriginGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIOriginGroup.h"
#include "OAIOriginGroupListResult.h"
#include "OAIOriginGroupUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOriginGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIOriginGroupsApi(const int timeOut = 0);
    ~OAIOriginGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  origin_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  origin_group OAIOriginGroup [required]
    */
    virtual void originGroupsCreate(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &origin_group_name, const QString &subscription_id, const QString &api_version, const OAIOriginGroup &origin_group);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  origin_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void originGroupsDelete(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &origin_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  origin_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void originGroupsGet(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &origin_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void originGroupsListByEndpoint(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  origin_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  origin_group_update_properties OAIOriginGroupUpdateParameters [required]
    */
    virtual void originGroupsUpdate(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &origin_group_name, const QString &subscription_id, const QString &api_version, const OAIOriginGroupUpdateParameters &origin_group_update_properties);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void originGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void originGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void originGroupsGetCallback(OAIHttpRequestWorker *worker);
    void originGroupsListByEndpointCallback(OAIHttpRequestWorker *worker);
    void originGroupsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void originGroupsCreateSignal(OAIOriginGroup summary);
    void originGroupsDeleteSignal();
    void originGroupsGetSignal(OAIOriginGroup summary);
    void originGroupsListByEndpointSignal(OAIOriginGroupListResult summary);
    void originGroupsUpdateSignal(OAIOriginGroup summary);


    void originGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAIOriginGroup summary);
    void originGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void originGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIOriginGroup summary);
    void originGroupsListByEndpointSignalFull(OAIHttpRequestWorker *worker, OAIOriginGroupListResult summary);
    void originGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOriginGroup summary);

    Q_DECL_DEPRECATED_X("Use originGroupsCreateSignalError() instead")
    void originGroupsCreateSignalE(OAIOriginGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void originGroupsCreateSignalError(OAIOriginGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use originGroupsDeleteSignalError() instead")
    void originGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void originGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use originGroupsGetSignalError() instead")
    void originGroupsGetSignalE(OAIOriginGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void originGroupsGetSignalError(OAIOriginGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use originGroupsListByEndpointSignalError() instead")
    void originGroupsListByEndpointSignalE(OAIOriginGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void originGroupsListByEndpointSignalError(OAIOriginGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use originGroupsUpdateSignalError() instead")
    void originGroupsUpdateSignalE(OAIOriginGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void originGroupsUpdateSignalError(OAIOriginGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use originGroupsCreateSignalErrorFull() instead")
    void originGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void originGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use originGroupsDeleteSignalErrorFull() instead")
    void originGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void originGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use originGroupsGetSignalErrorFull() instead")
    void originGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void originGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use originGroupsListByEndpointSignalErrorFull() instead")
    void originGroupsListByEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void originGroupsListByEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use originGroupsUpdateSignalErrorFull() instead")
    void originGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void originGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
