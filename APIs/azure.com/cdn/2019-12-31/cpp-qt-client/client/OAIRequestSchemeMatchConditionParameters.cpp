/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestSchemeMatchConditionParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestSchemeMatchConditionParameters::OAIRequestSchemeMatchConditionParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestSchemeMatchConditionParameters::OAIRequestSchemeMatchConditionParameters() {
    this->initializeModel();
}

OAIRequestSchemeMatchConditionParameters::~OAIRequestSchemeMatchConditionParameters() {}

void OAIRequestSchemeMatchConditionParameters::initializeModel() {

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_match_values_isSet = false;
    m_match_values_isValid = false;

    m_negate_condition_isSet = false;
    m_negate_condition_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAIRequestSchemeMatchConditionParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestSchemeMatchConditionParameters::fromJsonObject(QJsonObject json) {

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_match_values_isValid = ::OpenAPI::fromJsonValue(m_match_values, json[QString("matchValues")]);
    m_match_values_isSet = !json[QString("matchValues")].isNull() && m_match_values_isValid;

    m_negate_condition_isValid = ::OpenAPI::fromJsonValue(m_negate_condition, json[QString("negateCondition")]);
    m_negate_condition_isSet = !json[QString("negateCondition")].isNull() && m_negate_condition_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;
}

QString OAIRequestSchemeMatchConditionParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestSchemeMatchConditionParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_match_values.size() > 0) {
        obj.insert(QString("matchValues"), ::OpenAPI::toJsonValue(m_match_values));
    }
    if (m_negate_condition_isSet) {
        obj.insert(QString("negateCondition"), ::OpenAPI::toJsonValue(m_negate_condition));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

QString OAIRequestSchemeMatchConditionParameters::getOdataType() const {
    return m_odata_type;
}
void OAIRequestSchemeMatchConditionParameters::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIRequestSchemeMatchConditionParameters::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIRequestSchemeMatchConditionParameters::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QList<QString> OAIRequestSchemeMatchConditionParameters::getMatchValues() const {
    return m_match_values;
}
void OAIRequestSchemeMatchConditionParameters::setMatchValues(const QList<QString> &match_values) {
    m_match_values = match_values;
    m_match_values_isSet = true;
}

bool OAIRequestSchemeMatchConditionParameters::is_match_values_Set() const{
    return m_match_values_isSet;
}

bool OAIRequestSchemeMatchConditionParameters::is_match_values_Valid() const{
    return m_match_values_isValid;
}

bool OAIRequestSchemeMatchConditionParameters::isNegateCondition() const {
    return m_negate_condition;
}
void OAIRequestSchemeMatchConditionParameters::setNegateCondition(const bool &negate_condition) {
    m_negate_condition = negate_condition;
    m_negate_condition_isSet = true;
}

bool OAIRequestSchemeMatchConditionParameters::is_negate_condition_Set() const{
    return m_negate_condition_isSet;
}

bool OAIRequestSchemeMatchConditionParameters::is_negate_condition_Valid() const{
    return m_negate_condition_isValid;
}

QString OAIRequestSchemeMatchConditionParameters::getROperator() const {
    return m_r_operator;
}
void OAIRequestSchemeMatchConditionParameters::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIRequestSchemeMatchConditionParameters::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIRequestSchemeMatchConditionParameters::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAIRequestSchemeMatchConditionParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_negate_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestSchemeMatchConditionParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && m_match_values_isValid && m_r_operator_isValid && true;
}

} // namespace OpenAPI
