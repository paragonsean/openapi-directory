/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthProbeParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthProbeParameters::OAIHealthProbeParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthProbeParameters::OAIHealthProbeParameters() {
    this->initializeModel();
}

OAIHealthProbeParameters::~OAIHealthProbeParameters() {}

void OAIHealthProbeParameters::initializeModel() {

    m_probe_interval_in_seconds_isSet = false;
    m_probe_interval_in_seconds_isValid = false;

    m_probe_path_isSet = false;
    m_probe_path_isValid = false;

    m_probe_protocol_isSet = false;
    m_probe_protocol_isValid = false;

    m_probe_request_type_isSet = false;
    m_probe_request_type_isValid = false;
}

void OAIHealthProbeParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthProbeParameters::fromJsonObject(QJsonObject json) {

    m_probe_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_probe_interval_in_seconds, json[QString("probeIntervalInSeconds")]);
    m_probe_interval_in_seconds_isSet = !json[QString("probeIntervalInSeconds")].isNull() && m_probe_interval_in_seconds_isValid;

    m_probe_path_isValid = ::OpenAPI::fromJsonValue(m_probe_path, json[QString("probePath")]);
    m_probe_path_isSet = !json[QString("probePath")].isNull() && m_probe_path_isValid;

    m_probe_protocol_isValid = ::OpenAPI::fromJsonValue(m_probe_protocol, json[QString("probeProtocol")]);
    m_probe_protocol_isSet = !json[QString("probeProtocol")].isNull() && m_probe_protocol_isValid;

    m_probe_request_type_isValid = ::OpenAPI::fromJsonValue(m_probe_request_type, json[QString("probeRequestType")]);
    m_probe_request_type_isSet = !json[QString("probeRequestType")].isNull() && m_probe_request_type_isValid;
}

QString OAIHealthProbeParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthProbeParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_probe_interval_in_seconds_isSet) {
        obj.insert(QString("probeIntervalInSeconds"), ::OpenAPI::toJsonValue(m_probe_interval_in_seconds));
    }
    if (m_probe_path_isSet) {
        obj.insert(QString("probePath"), ::OpenAPI::toJsonValue(m_probe_path));
    }
    if (m_probe_protocol_isSet) {
        obj.insert(QString("probeProtocol"), ::OpenAPI::toJsonValue(m_probe_protocol));
    }
    if (m_probe_request_type_isSet) {
        obj.insert(QString("probeRequestType"), ::OpenAPI::toJsonValue(m_probe_request_type));
    }
    return obj;
}

qint32 OAIHealthProbeParameters::getProbeIntervalInSeconds() const {
    return m_probe_interval_in_seconds;
}
void OAIHealthProbeParameters::setProbeIntervalInSeconds(const qint32 &probe_interval_in_seconds) {
    m_probe_interval_in_seconds = probe_interval_in_seconds;
    m_probe_interval_in_seconds_isSet = true;
}

bool OAIHealthProbeParameters::is_probe_interval_in_seconds_Set() const{
    return m_probe_interval_in_seconds_isSet;
}

bool OAIHealthProbeParameters::is_probe_interval_in_seconds_Valid() const{
    return m_probe_interval_in_seconds_isValid;
}

QString OAIHealthProbeParameters::getProbePath() const {
    return m_probe_path;
}
void OAIHealthProbeParameters::setProbePath(const QString &probe_path) {
    m_probe_path = probe_path;
    m_probe_path_isSet = true;
}

bool OAIHealthProbeParameters::is_probe_path_Set() const{
    return m_probe_path_isSet;
}

bool OAIHealthProbeParameters::is_probe_path_Valid() const{
    return m_probe_path_isValid;
}

QString OAIHealthProbeParameters::getProbeProtocol() const {
    return m_probe_protocol;
}
void OAIHealthProbeParameters::setProbeProtocol(const QString &probe_protocol) {
    m_probe_protocol = probe_protocol;
    m_probe_protocol_isSet = true;
}

bool OAIHealthProbeParameters::is_probe_protocol_Set() const{
    return m_probe_protocol_isSet;
}

bool OAIHealthProbeParameters::is_probe_protocol_Valid() const{
    return m_probe_protocol_isValid;
}

QString OAIHealthProbeParameters::getProbeRequestType() const {
    return m_probe_request_type;
}
void OAIHealthProbeParameters::setProbeRequestType(const QString &probe_request_type) {
    m_probe_request_type = probe_request_type;
    m_probe_request_type_isSet = true;
}

bool OAIHealthProbeParameters::is_probe_request_type_Set() const{
    return m_probe_request_type_isSet;
}

bool OAIHealthProbeParameters::is_probe_request_type_Valid() const{
    return m_probe_request_type_isValid;
}

bool OAIHealthProbeParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_probe_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probe_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probe_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probe_request_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthProbeParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
