/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryRule::OAIDeliveryRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryRule::OAIDeliveryRule() {
    this->initializeModel();
}

OAIDeliveryRule::~OAIDeliveryRule() {}

void OAIDeliveryRule::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;
}

void OAIDeliveryRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryRule::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;
}

QString OAIDeliveryRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryRule::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    return obj;
}

QList<OAIDeliveryRuleAction> OAIDeliveryRule::getActions() const {
    return m_actions;
}
void OAIDeliveryRule::setActions(const QList<OAIDeliveryRuleAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIDeliveryRule::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIDeliveryRule::is_actions_Valid() const{
    return m_actions_isValid;
}

QList<OAIDeliveryRuleCondition> OAIDeliveryRule::getConditions() const {
    return m_conditions;
}
void OAIDeliveryRule::setConditions(const QList<OAIDeliveryRuleCondition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIDeliveryRule::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIDeliveryRule::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIDeliveryRule::getName() const {
    return m_name;
}
void OAIDeliveryRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeliveryRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeliveryRule::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDeliveryRule::getOrder() const {
    return m_order;
}
void OAIDeliveryRule::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIDeliveryRule::is_order_Set() const{
    return m_order_isSet;
}

bool OAIDeliveryRule::is_order_Valid() const{
    return m_order_isValid;
}

bool OAIDeliveryRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actions_isValid && m_order_isValid && true;
}

} // namespace OpenAPI
