/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointPropertiesUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointPropertiesUpdateParameters::OAIEndpointPropertiesUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointPropertiesUpdateParameters::OAIEndpointPropertiesUpdateParameters() {
    this->initializeModel();
}

OAIEndpointPropertiesUpdateParameters::~OAIEndpointPropertiesUpdateParameters() {}

void OAIEndpointPropertiesUpdateParameters::initializeModel() {

    m_content_types_to_compress_isSet = false;
    m_content_types_to_compress_isValid = false;

    m_default_origin_group_isSet = false;
    m_default_origin_group_isValid = false;

    m_delivery_policy_isSet = false;
    m_delivery_policy_isValid = false;

    m_geo_filters_isSet = false;
    m_geo_filters_isValid = false;

    m_is_compression_enabled_isSet = false;
    m_is_compression_enabled_isValid = false;

    m_is_http_allowed_isSet = false;
    m_is_http_allowed_isValid = false;

    m_is_https_allowed_isSet = false;
    m_is_https_allowed_isValid = false;

    m_optimization_type_isSet = false;
    m_optimization_type_isValid = false;

    m_origin_host_header_isSet = false;
    m_origin_host_header_isValid = false;

    m_origin_path_isSet = false;
    m_origin_path_isValid = false;

    m_probe_path_isSet = false;
    m_probe_path_isValid = false;

    m_query_string_caching_behavior_isSet = false;
    m_query_string_caching_behavior_isValid = false;
}

void OAIEndpointPropertiesUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointPropertiesUpdateParameters::fromJsonObject(QJsonObject json) {

    m_content_types_to_compress_isValid = ::OpenAPI::fromJsonValue(m_content_types_to_compress, json[QString("contentTypesToCompress")]);
    m_content_types_to_compress_isSet = !json[QString("contentTypesToCompress")].isNull() && m_content_types_to_compress_isValid;

    m_default_origin_group_isValid = ::OpenAPI::fromJsonValue(m_default_origin_group, json[QString("defaultOriginGroup")]);
    m_default_origin_group_isSet = !json[QString("defaultOriginGroup")].isNull() && m_default_origin_group_isValid;

    m_delivery_policy_isValid = ::OpenAPI::fromJsonValue(m_delivery_policy, json[QString("deliveryPolicy")]);
    m_delivery_policy_isSet = !json[QString("deliveryPolicy")].isNull() && m_delivery_policy_isValid;

    m_geo_filters_isValid = ::OpenAPI::fromJsonValue(m_geo_filters, json[QString("geoFilters")]);
    m_geo_filters_isSet = !json[QString("geoFilters")].isNull() && m_geo_filters_isValid;

    m_is_compression_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_compression_enabled, json[QString("isCompressionEnabled")]);
    m_is_compression_enabled_isSet = !json[QString("isCompressionEnabled")].isNull() && m_is_compression_enabled_isValid;

    m_is_http_allowed_isValid = ::OpenAPI::fromJsonValue(m_is_http_allowed, json[QString("isHttpAllowed")]);
    m_is_http_allowed_isSet = !json[QString("isHttpAllowed")].isNull() && m_is_http_allowed_isValid;

    m_is_https_allowed_isValid = ::OpenAPI::fromJsonValue(m_is_https_allowed, json[QString("isHttpsAllowed")]);
    m_is_https_allowed_isSet = !json[QString("isHttpsAllowed")].isNull() && m_is_https_allowed_isValid;

    m_optimization_type_isValid = ::OpenAPI::fromJsonValue(m_optimization_type, json[QString("optimizationType")]);
    m_optimization_type_isSet = !json[QString("optimizationType")].isNull() && m_optimization_type_isValid;

    m_origin_host_header_isValid = ::OpenAPI::fromJsonValue(m_origin_host_header, json[QString("originHostHeader")]);
    m_origin_host_header_isSet = !json[QString("originHostHeader")].isNull() && m_origin_host_header_isValid;

    m_origin_path_isValid = ::OpenAPI::fromJsonValue(m_origin_path, json[QString("originPath")]);
    m_origin_path_isSet = !json[QString("originPath")].isNull() && m_origin_path_isValid;

    m_probe_path_isValid = ::OpenAPI::fromJsonValue(m_probe_path, json[QString("probePath")]);
    m_probe_path_isSet = !json[QString("probePath")].isNull() && m_probe_path_isValid;

    m_query_string_caching_behavior_isValid = ::OpenAPI::fromJsonValue(m_query_string_caching_behavior, json[QString("queryStringCachingBehavior")]);
    m_query_string_caching_behavior_isSet = !json[QString("queryStringCachingBehavior")].isNull() && m_query_string_caching_behavior_isValid;
}

QString OAIEndpointPropertiesUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointPropertiesUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_content_types_to_compress.size() > 0) {
        obj.insert(QString("contentTypesToCompress"), ::OpenAPI::toJsonValue(m_content_types_to_compress));
    }
    if (m_default_origin_group.isSet()) {
        obj.insert(QString("defaultOriginGroup"), ::OpenAPI::toJsonValue(m_default_origin_group));
    }
    if (m_delivery_policy.isSet()) {
        obj.insert(QString("deliveryPolicy"), ::OpenAPI::toJsonValue(m_delivery_policy));
    }
    if (m_geo_filters.size() > 0) {
        obj.insert(QString("geoFilters"), ::OpenAPI::toJsonValue(m_geo_filters));
    }
    if (m_is_compression_enabled_isSet) {
        obj.insert(QString("isCompressionEnabled"), ::OpenAPI::toJsonValue(m_is_compression_enabled));
    }
    if (m_is_http_allowed_isSet) {
        obj.insert(QString("isHttpAllowed"), ::OpenAPI::toJsonValue(m_is_http_allowed));
    }
    if (m_is_https_allowed_isSet) {
        obj.insert(QString("isHttpsAllowed"), ::OpenAPI::toJsonValue(m_is_https_allowed));
    }
    if (m_optimization_type.isSet()) {
        obj.insert(QString("optimizationType"), ::OpenAPI::toJsonValue(m_optimization_type));
    }
    if (m_origin_host_header_isSet) {
        obj.insert(QString("originHostHeader"), ::OpenAPI::toJsonValue(m_origin_host_header));
    }
    if (m_origin_path_isSet) {
        obj.insert(QString("originPath"), ::OpenAPI::toJsonValue(m_origin_path));
    }
    if (m_probe_path_isSet) {
        obj.insert(QString("probePath"), ::OpenAPI::toJsonValue(m_probe_path));
    }
    if (m_query_string_caching_behavior.isSet()) {
        obj.insert(QString("queryStringCachingBehavior"), ::OpenAPI::toJsonValue(m_query_string_caching_behavior));
    }
    return obj;
}

QList<QString> OAIEndpointPropertiesUpdateParameters::getContentTypesToCompress() const {
    return m_content_types_to_compress;
}
void OAIEndpointPropertiesUpdateParameters::setContentTypesToCompress(const QList<QString> &content_types_to_compress) {
    m_content_types_to_compress = content_types_to_compress;
    m_content_types_to_compress_isSet = true;
}

bool OAIEndpointPropertiesUpdateParameters::is_content_types_to_compress_Set() const{
    return m_content_types_to_compress_isSet;
}

bool OAIEndpointPropertiesUpdateParameters::is_content_types_to_compress_Valid() const{
    return m_content_types_to_compress_isValid;
}

OAIResourceReference OAIEndpointPropertiesUpdateParameters::getDefaultOriginGroup() const {
    return m_default_origin_group;
}
void OAIEndpointPropertiesUpdateParameters::setDefaultOriginGroup(const OAIResourceReference &default_origin_group) {
    m_default_origin_group = default_origin_group;
    m_default_origin_group_isSet = true;
}

bool OAIEndpointPropertiesUpdateParameters::is_default_origin_group_Set() const{
    return m_default_origin_group_isSet;
}

bool OAIEndpointPropertiesUpdateParameters::is_default_origin_group_Valid() const{
    return m_default_origin_group_isValid;
}

OAIEndpointPropertiesUpdateParameters_deliveryPolicy OAIEndpointPropertiesUpdateParameters::getDeliveryPolicy() const {
    return m_delivery_policy;
}
void OAIEndpointPropertiesUpdateParameters::setDeliveryPolicy(const OAIEndpointPropertiesUpdateParameters_deliveryPolicy &delivery_policy) {
    m_delivery_policy = delivery_policy;
    m_delivery_policy_isSet = true;
}

bool OAIEndpointPropertiesUpdateParameters::is_delivery_policy_Set() const{
    return m_delivery_policy_isSet;
}

bool OAIEndpointPropertiesUpdateParameters::is_delivery_policy_Valid() const{
    return m_delivery_policy_isValid;
}

QList<OAIGeoFilter> OAIEndpointPropertiesUpdateParameters::getGeoFilters() const {
    return m_geo_filters;
}
void OAIEndpointPropertiesUpdateParameters::setGeoFilters(const QList<OAIGeoFilter> &geo_filters) {
    m_geo_filters = geo_filters;
    m_geo_filters_isSet = true;
}

bool OAIEndpointPropertiesUpdateParameters::is_geo_filters_Set() const{
    return m_geo_filters_isSet;
}

bool OAIEndpointPropertiesUpdateParameters::is_geo_filters_Valid() const{
    return m_geo_filters_isValid;
}

bool OAIEndpointPropertiesUpdateParameters::isIsCompressionEnabled() const {
    return m_is_compression_enabled;
}
void OAIEndpointPropertiesUpdateParameters::setIsCompressionEnabled(const bool &is_compression_enabled) {
    m_is_compression_enabled = is_compression_enabled;
    m_is_compression_enabled_isSet = true;
}

bool OAIEndpointPropertiesUpdateParameters::is_is_compression_enabled_Set() const{
    return m_is_compression_enabled_isSet;
}

bool OAIEndpointPropertiesUpdateParameters::is_is_compression_enabled_Valid() const{
    return m_is_compression_enabled_isValid;
}

bool OAIEndpointPropertiesUpdateParameters::isIsHttpAllowed() const {
    return m_is_http_allowed;
}
void OAIEndpointPropertiesUpdateParameters::setIsHttpAllowed(const bool &is_http_allowed) {
    m_is_http_allowed = is_http_allowed;
    m_is_http_allowed_isSet = true;
}

bool OAIEndpointPropertiesUpdateParameters::is_is_http_allowed_Set() const{
    return m_is_http_allowed_isSet;
}

bool OAIEndpointPropertiesUpdateParameters::is_is_http_allowed_Valid() const{
    return m_is_http_allowed_isValid;
}

bool OAIEndpointPropertiesUpdateParameters::isIsHttpsAllowed() const {
    return m_is_https_allowed;
}
void OAIEndpointPropertiesUpdateParameters::setIsHttpsAllowed(const bool &is_https_allowed) {
    m_is_https_allowed = is_https_allowed;
    m_is_https_allowed_isSet = true;
}

bool OAIEndpointPropertiesUpdateParameters::is_is_https_allowed_Set() const{
    return m_is_https_allowed_isSet;
}

bool OAIEndpointPropertiesUpdateParameters::is_is_https_allowed_Valid() const{
    return m_is_https_allowed_isValid;
}

OAIOptimizationType OAIEndpointPropertiesUpdateParameters::getOptimizationType() const {
    return m_optimization_type;
}
void OAIEndpointPropertiesUpdateParameters::setOptimizationType(const OAIOptimizationType &optimization_type) {
    m_optimization_type = optimization_type;
    m_optimization_type_isSet = true;
}

bool OAIEndpointPropertiesUpdateParameters::is_optimization_type_Set() const{
    return m_optimization_type_isSet;
}

bool OAIEndpointPropertiesUpdateParameters::is_optimization_type_Valid() const{
    return m_optimization_type_isValid;
}

QString OAIEndpointPropertiesUpdateParameters::getOriginHostHeader() const {
    return m_origin_host_header;
}
void OAIEndpointPropertiesUpdateParameters::setOriginHostHeader(const QString &origin_host_header) {
    m_origin_host_header = origin_host_header;
    m_origin_host_header_isSet = true;
}

bool OAIEndpointPropertiesUpdateParameters::is_origin_host_header_Set() const{
    return m_origin_host_header_isSet;
}

bool OAIEndpointPropertiesUpdateParameters::is_origin_host_header_Valid() const{
    return m_origin_host_header_isValid;
}

QString OAIEndpointPropertiesUpdateParameters::getOriginPath() const {
    return m_origin_path;
}
void OAIEndpointPropertiesUpdateParameters::setOriginPath(const QString &origin_path) {
    m_origin_path = origin_path;
    m_origin_path_isSet = true;
}

bool OAIEndpointPropertiesUpdateParameters::is_origin_path_Set() const{
    return m_origin_path_isSet;
}

bool OAIEndpointPropertiesUpdateParameters::is_origin_path_Valid() const{
    return m_origin_path_isValid;
}

QString OAIEndpointPropertiesUpdateParameters::getProbePath() const {
    return m_probe_path;
}
void OAIEndpointPropertiesUpdateParameters::setProbePath(const QString &probe_path) {
    m_probe_path = probe_path;
    m_probe_path_isSet = true;
}

bool OAIEndpointPropertiesUpdateParameters::is_probe_path_Set() const{
    return m_probe_path_isSet;
}

bool OAIEndpointPropertiesUpdateParameters::is_probe_path_Valid() const{
    return m_probe_path_isValid;
}

OAIQueryStringCachingBehavior OAIEndpointPropertiesUpdateParameters::getQueryStringCachingBehavior() const {
    return m_query_string_caching_behavior;
}
void OAIEndpointPropertiesUpdateParameters::setQueryStringCachingBehavior(const OAIQueryStringCachingBehavior &query_string_caching_behavior) {
    m_query_string_caching_behavior = query_string_caching_behavior;
    m_query_string_caching_behavior_isSet = true;
}

bool OAIEndpointPropertiesUpdateParameters::is_query_string_caching_behavior_Set() const{
    return m_query_string_caching_behavior_isSet;
}

bool OAIEndpointPropertiesUpdateParameters::is_query_string_caching_behavior_Valid() const{
    return m_query_string_caching_behavior_isValid;
}

bool OAIEndpointPropertiesUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_types_to_compress.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_origin_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_compression_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_http_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_https_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimization_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_host_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probe_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_string_caching_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointPropertiesUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
