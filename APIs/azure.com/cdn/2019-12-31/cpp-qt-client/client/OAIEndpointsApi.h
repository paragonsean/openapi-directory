/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEndpointsApi_H
#define OAI_OAIEndpointsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEndpoint.h"
#include "OAIEndpointListResult.h"
#include "OAIEndpointUpdateParameters.h"
#include "OAIErrorResponse.h"
#include "OAILoadParameters.h"
#include "OAIPurgeParameters.h"
#include "OAIResourceUsageListResult.h"
#include "OAIValidateCustomDomainInput.h"
#include "OAIValidateCustomDomainOutput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEndpointsApi : public QObject {
    Q_OBJECT

public:
    OAIEndpointsApi(const int timeOut = 0);
    ~OAIEndpointsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  endpoint OAIEndpoint [required]
    */
    virtual void endpointsCreate(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &subscription_id, const QString &api_version, const OAIEndpoint &endpoint);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void endpointsDelete(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void endpointsGet(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void endpointsListByProfile(const QString &resource_group_name, const QString &profile_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void endpointsListResourceUsage(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  content_file_paths OAILoadParameters [required]
    */
    virtual void endpointsLoadContent(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &subscription_id, const QString &api_version, const OAILoadParameters &content_file_paths);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  content_file_paths OAIPurgeParameters [required]
    */
    virtual void endpointsPurgeContent(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &subscription_id, const QString &api_version, const OAIPurgeParameters &content_file_paths);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void endpointsStart(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void endpointsStop(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  endpoint_update_properties OAIEndpointUpdateParameters [required]
    */
    virtual void endpointsUpdate(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &subscription_id, const QString &api_version, const OAIEndpointUpdateParameters &endpoint_update_properties);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  custom_domain_properties OAIValidateCustomDomainInput [required]
    */
    virtual void endpointsValidateCustomDomain(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &subscription_id, const QString &api_version, const OAIValidateCustomDomainInput &custom_domain_properties);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void endpointsCreateCallback(OAIHttpRequestWorker *worker);
    void endpointsDeleteCallback(OAIHttpRequestWorker *worker);
    void endpointsGetCallback(OAIHttpRequestWorker *worker);
    void endpointsListByProfileCallback(OAIHttpRequestWorker *worker);
    void endpointsListResourceUsageCallback(OAIHttpRequestWorker *worker);
    void endpointsLoadContentCallback(OAIHttpRequestWorker *worker);
    void endpointsPurgeContentCallback(OAIHttpRequestWorker *worker);
    void endpointsStartCallback(OAIHttpRequestWorker *worker);
    void endpointsStopCallback(OAIHttpRequestWorker *worker);
    void endpointsUpdateCallback(OAIHttpRequestWorker *worker);
    void endpointsValidateCustomDomainCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void endpointsCreateSignal(OAIEndpoint summary);
    void endpointsDeleteSignal();
    void endpointsGetSignal(OAIEndpoint summary);
    void endpointsListByProfileSignal(OAIEndpointListResult summary);
    void endpointsListResourceUsageSignal(OAIResourceUsageListResult summary);
    void endpointsLoadContentSignal();
    void endpointsPurgeContentSignal();
    void endpointsStartSignal(OAIEndpoint summary);
    void endpointsStopSignal(OAIEndpoint summary);
    void endpointsUpdateSignal(OAIEndpoint summary);
    void endpointsValidateCustomDomainSignal(OAIValidateCustomDomainOutput summary);


    void endpointsCreateSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint summary);
    void endpointsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void endpointsGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint summary);
    void endpointsListByProfileSignalFull(OAIHttpRequestWorker *worker, OAIEndpointListResult summary);
    void endpointsListResourceUsageSignalFull(OAIHttpRequestWorker *worker, OAIResourceUsageListResult summary);
    void endpointsLoadContentSignalFull(OAIHttpRequestWorker *worker);
    void endpointsPurgeContentSignalFull(OAIHttpRequestWorker *worker);
    void endpointsStartSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint summary);
    void endpointsStopSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint summary);
    void endpointsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint summary);
    void endpointsValidateCustomDomainSignalFull(OAIHttpRequestWorker *worker, OAIValidateCustomDomainOutput summary);

    Q_DECL_DEPRECATED_X("Use endpointsCreateSignalError() instead")
    void endpointsCreateSignalE(OAIEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsCreateSignalError(OAIEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsDeleteSignalError() instead")
    void endpointsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsGetSignalError() instead")
    void endpointsGetSignalE(OAIEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsGetSignalError(OAIEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsListByProfileSignalError() instead")
    void endpointsListByProfileSignalE(OAIEndpointListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsListByProfileSignalError(OAIEndpointListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsListResourceUsageSignalError() instead")
    void endpointsListResourceUsageSignalE(OAIResourceUsageListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsListResourceUsageSignalError(OAIResourceUsageListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsLoadContentSignalError() instead")
    void endpointsLoadContentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsLoadContentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsPurgeContentSignalError() instead")
    void endpointsPurgeContentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsPurgeContentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsStartSignalError() instead")
    void endpointsStartSignalE(OAIEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsStartSignalError(OAIEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsStopSignalError() instead")
    void endpointsStopSignalE(OAIEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsStopSignalError(OAIEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsUpdateSignalError() instead")
    void endpointsUpdateSignalE(OAIEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsUpdateSignalError(OAIEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsValidateCustomDomainSignalError() instead")
    void endpointsValidateCustomDomainSignalE(OAIValidateCustomDomainOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsValidateCustomDomainSignalError(OAIValidateCustomDomainOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use endpointsCreateSignalErrorFull() instead")
    void endpointsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsDeleteSignalErrorFull() instead")
    void endpointsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsGetSignalErrorFull() instead")
    void endpointsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsListByProfileSignalErrorFull() instead")
    void endpointsListByProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsListByProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsListResourceUsageSignalErrorFull() instead")
    void endpointsListResourceUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsListResourceUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsLoadContentSignalErrorFull() instead")
    void endpointsLoadContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsLoadContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsPurgeContentSignalErrorFull() instead")
    void endpointsPurgeContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsPurgeContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsStartSignalErrorFull() instead")
    void endpointsStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsStopSignalErrorFull() instead")
    void endpointsStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsUpdateSignalErrorFull() instead")
    void endpointsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endpointsValidateCustomDomainSignalErrorFull() instead")
    void endpointsValidateCustomDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsValidateCustomDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
