/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProfilesApi_H
#define OAI_OAIProfilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIProfile.h"
#include "OAIProfileListResult.h"
#include "OAIProfileUpdateParameters.h"
#include "OAIResourceUsageListResult.h"
#include "OAISsoUri.h"
#include "OAISupportedOptimizationTypesListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProfilesApi : public QObject {
    Q_OBJECT

public:
    OAIProfilesApi(const int timeOut = 0);
    ~OAIProfilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  profile OAIProfile [required]
    */
    virtual void profilesCreate(const QString &resource_group_name, const QString &profile_name, const QString &subscription_id, const QString &api_version, const OAIProfile &profile);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void profilesDelete(const QString &resource_group_name, const QString &profile_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void profilesGenerateSsoUri(const QString &resource_group_name, const QString &profile_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void profilesGet(const QString &resource_group_name, const QString &profile_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void profilesList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void profilesListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void profilesListResourceUsage(const QString &resource_group_name, const QString &profile_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void profilesListSupportedOptimizationTypes(const QString &resource_group_name, const QString &profile_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  profile_update_parameters OAIProfileUpdateParameters [required]
    */
    virtual void profilesUpdate(const QString &resource_group_name, const QString &profile_name, const QString &subscription_id, const QString &api_version, const OAIProfileUpdateParameters &profile_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void profilesCreateCallback(OAIHttpRequestWorker *worker);
    void profilesDeleteCallback(OAIHttpRequestWorker *worker);
    void profilesGenerateSsoUriCallback(OAIHttpRequestWorker *worker);
    void profilesGetCallback(OAIHttpRequestWorker *worker);
    void profilesListCallback(OAIHttpRequestWorker *worker);
    void profilesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void profilesListResourceUsageCallback(OAIHttpRequestWorker *worker);
    void profilesListSupportedOptimizationTypesCallback(OAIHttpRequestWorker *worker);
    void profilesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void profilesCreateSignal(OAIProfile summary);
    void profilesDeleteSignal();
    void profilesGenerateSsoUriSignal(OAISsoUri summary);
    void profilesGetSignal(OAIProfile summary);
    void profilesListSignal(OAIProfileListResult summary);
    void profilesListByResourceGroupSignal(OAIProfileListResult summary);
    void profilesListResourceUsageSignal(OAIResourceUsageListResult summary);
    void profilesListSupportedOptimizationTypesSignal(OAISupportedOptimizationTypesListResult summary);
    void profilesUpdateSignal(OAIProfile summary);


    void profilesCreateSignalFull(OAIHttpRequestWorker *worker, OAIProfile summary);
    void profilesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void profilesGenerateSsoUriSignalFull(OAIHttpRequestWorker *worker, OAISsoUri summary);
    void profilesGetSignalFull(OAIHttpRequestWorker *worker, OAIProfile summary);
    void profilesListSignalFull(OAIHttpRequestWorker *worker, OAIProfileListResult summary);
    void profilesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIProfileListResult summary);
    void profilesListResourceUsageSignalFull(OAIHttpRequestWorker *worker, OAIResourceUsageListResult summary);
    void profilesListSupportedOptimizationTypesSignalFull(OAIHttpRequestWorker *worker, OAISupportedOptimizationTypesListResult summary);
    void profilesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProfile summary);

    Q_DECL_DEPRECATED_X("Use profilesCreateSignalError() instead")
    void profilesCreateSignalE(OAIProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesCreateSignalError(OAIProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesDeleteSignalError() instead")
    void profilesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void profilesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesGenerateSsoUriSignalError() instead")
    void profilesGenerateSsoUriSignalE(OAISsoUri summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesGenerateSsoUriSignalError(OAISsoUri summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesGetSignalError() instead")
    void profilesGetSignalE(OAIProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesGetSignalError(OAIProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesListSignalError() instead")
    void profilesListSignalE(OAIProfileListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesListSignalError(OAIProfileListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesListByResourceGroupSignalError() instead")
    void profilesListByResourceGroupSignalE(OAIProfileListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesListByResourceGroupSignalError(OAIProfileListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesListResourceUsageSignalError() instead")
    void profilesListResourceUsageSignalE(OAIResourceUsageListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesListResourceUsageSignalError(OAIResourceUsageListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesListSupportedOptimizationTypesSignalError() instead")
    void profilesListSupportedOptimizationTypesSignalE(OAISupportedOptimizationTypesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesListSupportedOptimizationTypesSignalError(OAISupportedOptimizationTypesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesUpdateSignalError() instead")
    void profilesUpdateSignalE(OAIProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesUpdateSignalError(OAIProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use profilesCreateSignalErrorFull() instead")
    void profilesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesDeleteSignalErrorFull() instead")
    void profilesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesGenerateSsoUriSignalErrorFull() instead")
    void profilesGenerateSsoUriSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesGenerateSsoUriSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesGetSignalErrorFull() instead")
    void profilesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesListSignalErrorFull() instead")
    void profilesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesListByResourceGroupSignalErrorFull() instead")
    void profilesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesListResourceUsageSignalErrorFull() instead")
    void profilesListResourceUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesListResourceUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesListSupportedOptimizationTypesSignalErrorFull() instead")
    void profilesListSupportedOptimizationTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesListSupportedOptimizationTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesUpdateSignalErrorFull() instead")
    void profilesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
