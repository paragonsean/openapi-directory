/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryStringCachingBehavior.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryStringCachingBehavior::OAIQueryStringCachingBehavior(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryStringCachingBehavior::OAIQueryStringCachingBehavior() {
    this->initializeModel();
}

OAIQueryStringCachingBehavior::~OAIQueryStringCachingBehavior() {}

void OAIQueryStringCachingBehavior::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIQueryStringCachingBehavior::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIQueryStringCachingBehavior::fromJson(QString jsonString) {
    
    if ( jsonString.compare("IgnoreQueryString", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryStringCachingBehavior::IGNOREQUERYSTRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BypassCaching", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryStringCachingBehavior::BYPASSCACHING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UseQueryString", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryStringCachingBehavior::USEQUERYSTRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotSet", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryStringCachingBehavior::NOTSET;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIQueryStringCachingBehavior::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIQueryStringCachingBehavior::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIQueryStringCachingBehavior::IGNOREQUERYSTRING:
            val = "IgnoreQueryString";
            break;
        case eOAIQueryStringCachingBehavior::BYPASSCACHING:
            val = "BypassCaching";
            break;
        case eOAIQueryStringCachingBehavior::USEQUERYSTRING:
            val = "UseQueryString";
            break;
        case eOAIQueryStringCachingBehavior::NOTSET:
            val = "NotSet";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIQueryStringCachingBehavior::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIQueryStringCachingBehavior::eOAIQueryStringCachingBehavior OAIQueryStringCachingBehavior::getValue() const {
    return m_value;
}

void OAIQueryStringCachingBehavior::setValue(const OAIQueryStringCachingBehavior::eOAIQueryStringCachingBehavior& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIQueryStringCachingBehavior::isSet() const {
    
    return m_value_isSet;
}

bool OAIQueryStringCachingBehavior::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
