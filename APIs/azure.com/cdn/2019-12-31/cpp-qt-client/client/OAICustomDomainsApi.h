/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomDomainsApi_H
#define OAI_OAICustomDomainsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomDomain.h"
#include "OAICustomDomainHttpsParameters.h"
#include "OAICustomDomainListResult.h"
#include "OAICustomDomainParameters.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomDomainsApi : public QObject {
    Q_OBJECT

public:
    OAICustomDomainsApi(const int timeOut = 0);
    ~OAICustomDomainsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  custom_domain_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  custom_domain_properties OAICustomDomainParameters [required]
    */
    virtual void customDomainsCreate(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &custom_domain_name, const QString &subscription_id, const QString &api_version, const OAICustomDomainParameters &custom_domain_properties);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  custom_domain_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void customDomainsDelete(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &custom_domain_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  custom_domain_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void customDomainsDisableCustomHttps(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &custom_domain_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  custom_domain_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  custom_domain_https_parameters OAICustomDomainHttpsParameters [optional]
    */
    virtual void customDomainsEnableCustomHttps(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &custom_domain_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<OAICustomDomainHttpsParameters> &custom_domain_https_parameters = ::OpenAPI::OptionalParam<OAICustomDomainHttpsParameters>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  custom_domain_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void customDomainsGet(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &custom_domain_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  endpoint_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void customDomainsListByEndpoint(const QString &resource_group_name, const QString &profile_name, const QString &endpoint_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void customDomainsCreateCallback(OAIHttpRequestWorker *worker);
    void customDomainsDeleteCallback(OAIHttpRequestWorker *worker);
    void customDomainsDisableCustomHttpsCallback(OAIHttpRequestWorker *worker);
    void customDomainsEnableCustomHttpsCallback(OAIHttpRequestWorker *worker);
    void customDomainsGetCallback(OAIHttpRequestWorker *worker);
    void customDomainsListByEndpointCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void customDomainsCreateSignal(OAICustomDomain summary);
    void customDomainsDeleteSignal();
    void customDomainsDisableCustomHttpsSignal();
    void customDomainsEnableCustomHttpsSignal();
    void customDomainsGetSignal(OAICustomDomain summary);
    void customDomainsListByEndpointSignal(OAICustomDomainListResult summary);


    void customDomainsCreateSignalFull(OAIHttpRequestWorker *worker, OAICustomDomain summary);
    void customDomainsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void customDomainsDisableCustomHttpsSignalFull(OAIHttpRequestWorker *worker);
    void customDomainsEnableCustomHttpsSignalFull(OAIHttpRequestWorker *worker);
    void customDomainsGetSignalFull(OAIHttpRequestWorker *worker, OAICustomDomain summary);
    void customDomainsListByEndpointSignalFull(OAIHttpRequestWorker *worker, OAICustomDomainListResult summary);

    Q_DECL_DEPRECATED_X("Use customDomainsCreateSignalError() instead")
    void customDomainsCreateSignalE(OAICustomDomain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customDomainsCreateSignalError(OAICustomDomain summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customDomainsDeleteSignalError() instead")
    void customDomainsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void customDomainsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customDomainsDisableCustomHttpsSignalError() instead")
    void customDomainsDisableCustomHttpsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void customDomainsDisableCustomHttpsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customDomainsEnableCustomHttpsSignalError() instead")
    void customDomainsEnableCustomHttpsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void customDomainsEnableCustomHttpsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customDomainsGetSignalError() instead")
    void customDomainsGetSignalE(OAICustomDomain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customDomainsGetSignalError(OAICustomDomain summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customDomainsListByEndpointSignalError() instead")
    void customDomainsListByEndpointSignalE(OAICustomDomainListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customDomainsListByEndpointSignalError(OAICustomDomainListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use customDomainsCreateSignalErrorFull() instead")
    void customDomainsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customDomainsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customDomainsDeleteSignalErrorFull() instead")
    void customDomainsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customDomainsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customDomainsDisableCustomHttpsSignalErrorFull() instead")
    void customDomainsDisableCustomHttpsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customDomainsDisableCustomHttpsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customDomainsEnableCustomHttpsSignalErrorFull() instead")
    void customDomainsEnableCustomHttpsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customDomainsEnableCustomHttpsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customDomainsGetSignalErrorFull() instead")
    void customDomainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customDomainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customDomainsListByEndpointSignalErrorFull() instead")
    void customDomainsListByEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customDomainsListByEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
