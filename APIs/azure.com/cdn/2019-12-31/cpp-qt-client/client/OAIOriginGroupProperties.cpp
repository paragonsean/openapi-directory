/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOriginGroupProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOriginGroupProperties::OAIOriginGroupProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOriginGroupProperties::OAIOriginGroupProperties() {
    this->initializeModel();
}

OAIOriginGroupProperties::~OAIOriginGroupProperties() {}

void OAIOriginGroupProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_state_isSet = false;
    m_resource_state_isValid = false;

    m_health_probe_settings_isSet = false;
    m_health_probe_settings_isValid = false;

    m_origins_isSet = false;
    m_origins_isValid = false;

    m_response_based_origin_error_detection_settings_isSet = false;
    m_response_based_origin_error_detection_settings_isValid = false;

    m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes_isSet = false;
    m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes_isValid = false;
}

void OAIOriginGroupProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOriginGroupProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_state_isValid = ::OpenAPI::fromJsonValue(m_resource_state, json[QString("resourceState")]);
    m_resource_state_isSet = !json[QString("resourceState")].isNull() && m_resource_state_isValid;

    m_health_probe_settings_isValid = ::OpenAPI::fromJsonValue(m_health_probe_settings, json[QString("healthProbeSettings")]);
    m_health_probe_settings_isSet = !json[QString("healthProbeSettings")].isNull() && m_health_probe_settings_isValid;

    m_origins_isValid = ::OpenAPI::fromJsonValue(m_origins, json[QString("origins")]);
    m_origins_isSet = !json[QString("origins")].isNull() && m_origins_isValid;

    m_response_based_origin_error_detection_settings_isValid = ::OpenAPI::fromJsonValue(m_response_based_origin_error_detection_settings, json[QString("responseBasedOriginErrorDetectionSettings")]);
    m_response_based_origin_error_detection_settings_isSet = !json[QString("responseBasedOriginErrorDetectionSettings")].isNull() && m_response_based_origin_error_detection_settings_isValid;

    m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes, json[QString("trafficRestorationTimeToHealedOrNewEndpointsInMinutes")]);
    m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes_isSet = !json[QString("trafficRestorationTimeToHealedOrNewEndpointsInMinutes")].isNull() && m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes_isValid;
}

QString OAIOriginGroupProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOriginGroupProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_state_isSet) {
        obj.insert(QString("resourceState"), ::OpenAPI::toJsonValue(m_resource_state));
    }
    if (m_health_probe_settings.isSet()) {
        obj.insert(QString("healthProbeSettings"), ::OpenAPI::toJsonValue(m_health_probe_settings));
    }
    if (m_origins.size() > 0) {
        obj.insert(QString("origins"), ::OpenAPI::toJsonValue(m_origins));
    }
    if (m_response_based_origin_error_detection_settings.isSet()) {
        obj.insert(QString("responseBasedOriginErrorDetectionSettings"), ::OpenAPI::toJsonValue(m_response_based_origin_error_detection_settings));
    }
    if (m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes_isSet) {
        obj.insert(QString("trafficRestorationTimeToHealedOrNewEndpointsInMinutes"), ::OpenAPI::toJsonValue(m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes));
    }
    return obj;
}

QString OAIOriginGroupProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIOriginGroupProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIOriginGroupProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIOriginGroupProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIOriginGroupProperties::getResourceState() const {
    return m_resource_state;
}
void OAIOriginGroupProperties::setResourceState(const QString &resource_state) {
    m_resource_state = resource_state;
    m_resource_state_isSet = true;
}

bool OAIOriginGroupProperties::is_resource_state_Set() const{
    return m_resource_state_isSet;
}

bool OAIOriginGroupProperties::is_resource_state_Valid() const{
    return m_resource_state_isValid;
}

OAIHealthProbeParameters OAIOriginGroupProperties::getHealthProbeSettings() const {
    return m_health_probe_settings;
}
void OAIOriginGroupProperties::setHealthProbeSettings(const OAIHealthProbeParameters &health_probe_settings) {
    m_health_probe_settings = health_probe_settings;
    m_health_probe_settings_isSet = true;
}

bool OAIOriginGroupProperties::is_health_probe_settings_Set() const{
    return m_health_probe_settings_isSet;
}

bool OAIOriginGroupProperties::is_health_probe_settings_Valid() const{
    return m_health_probe_settings_isValid;
}

QList<OAIResourceReference> OAIOriginGroupProperties::getOrigins() const {
    return m_origins;
}
void OAIOriginGroupProperties::setOrigins(const QList<OAIResourceReference> &origins) {
    m_origins = origins;
    m_origins_isSet = true;
}

bool OAIOriginGroupProperties::is_origins_Set() const{
    return m_origins_isSet;
}

bool OAIOriginGroupProperties::is_origins_Valid() const{
    return m_origins_isValid;
}

OAIResponseBasedOriginErrorDetectionParameters OAIOriginGroupProperties::getResponseBasedOriginErrorDetectionSettings() const {
    return m_response_based_origin_error_detection_settings;
}
void OAIOriginGroupProperties::setResponseBasedOriginErrorDetectionSettings(const OAIResponseBasedOriginErrorDetectionParameters &response_based_origin_error_detection_settings) {
    m_response_based_origin_error_detection_settings = response_based_origin_error_detection_settings;
    m_response_based_origin_error_detection_settings_isSet = true;
}

bool OAIOriginGroupProperties::is_response_based_origin_error_detection_settings_Set() const{
    return m_response_based_origin_error_detection_settings_isSet;
}

bool OAIOriginGroupProperties::is_response_based_origin_error_detection_settings_Valid() const{
    return m_response_based_origin_error_detection_settings_isValid;
}

qint32 OAIOriginGroupProperties::getTrafficRestorationTimeToHealedOrNewEndpointsInMinutes() const {
    return m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes;
}
void OAIOriginGroupProperties::setTrafficRestorationTimeToHealedOrNewEndpointsInMinutes(const qint32 &traffic_restoration_time_to_healed_or_new_endpoints_in_minutes) {
    m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes = traffic_restoration_time_to_healed_or_new_endpoints_in_minutes;
    m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes_isSet = true;
}

bool OAIOriginGroupProperties::is_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes_Set() const{
    return m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes_isSet;
}

bool OAIOriginGroupProperties::is_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes_Valid() const{
    return m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes_isValid;
}

bool OAIOriginGroupProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_probe_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_based_origin_error_detection_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_restoration_time_to_healed_or_new_endpoints_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOriginGroupProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
