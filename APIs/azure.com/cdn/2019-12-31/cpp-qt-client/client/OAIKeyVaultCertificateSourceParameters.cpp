/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyVaultCertificateSourceParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyVaultCertificateSourceParameters::OAIKeyVaultCertificateSourceParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyVaultCertificateSourceParameters::OAIKeyVaultCertificateSourceParameters() {
    this->initializeModel();
}

OAIKeyVaultCertificateSourceParameters::~OAIKeyVaultCertificateSourceParameters() {}

void OAIKeyVaultCertificateSourceParameters::initializeModel() {

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_delete_rule_isSet = false;
    m_delete_rule_isValid = false;

    m_resource_group_name_isSet = false;
    m_resource_group_name_isValid = false;

    m_secret_name_isSet = false;
    m_secret_name_isValid = false;

    m_secret_version_isSet = false;
    m_secret_version_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_update_rule_isSet = false;
    m_update_rule_isValid = false;

    m_vault_name_isSet = false;
    m_vault_name_isValid = false;
}

void OAIKeyVaultCertificateSourceParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyVaultCertificateSourceParameters::fromJsonObject(QJsonObject json) {

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_delete_rule_isValid = ::OpenAPI::fromJsonValue(m_delete_rule, json[QString("deleteRule")]);
    m_delete_rule_isSet = !json[QString("deleteRule")].isNull() && m_delete_rule_isValid;

    m_resource_group_name_isValid = ::OpenAPI::fromJsonValue(m_resource_group_name, json[QString("resourceGroupName")]);
    m_resource_group_name_isSet = !json[QString("resourceGroupName")].isNull() && m_resource_group_name_isValid;

    m_secret_name_isValid = ::OpenAPI::fromJsonValue(m_secret_name, json[QString("secretName")]);
    m_secret_name_isSet = !json[QString("secretName")].isNull() && m_secret_name_isValid;

    m_secret_version_isValid = ::OpenAPI::fromJsonValue(m_secret_version, json[QString("secretVersion")]);
    m_secret_version_isSet = !json[QString("secretVersion")].isNull() && m_secret_version_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_update_rule_isValid = ::OpenAPI::fromJsonValue(m_update_rule, json[QString("updateRule")]);
    m_update_rule_isSet = !json[QString("updateRule")].isNull() && m_update_rule_isValid;

    m_vault_name_isValid = ::OpenAPI::fromJsonValue(m_vault_name, json[QString("vaultName")]);
    m_vault_name_isSet = !json[QString("vaultName")].isNull() && m_vault_name_isValid;
}

QString OAIKeyVaultCertificateSourceParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyVaultCertificateSourceParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_delete_rule_isSet) {
        obj.insert(QString("deleteRule"), ::OpenAPI::toJsonValue(m_delete_rule));
    }
    if (m_resource_group_name_isSet) {
        obj.insert(QString("resourceGroupName"), ::OpenAPI::toJsonValue(m_resource_group_name));
    }
    if (m_secret_name_isSet) {
        obj.insert(QString("secretName"), ::OpenAPI::toJsonValue(m_secret_name));
    }
    if (m_secret_version_isSet) {
        obj.insert(QString("secretVersion"), ::OpenAPI::toJsonValue(m_secret_version));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_update_rule_isSet) {
        obj.insert(QString("updateRule"), ::OpenAPI::toJsonValue(m_update_rule));
    }
    if (m_vault_name_isSet) {
        obj.insert(QString("vaultName"), ::OpenAPI::toJsonValue(m_vault_name));
    }
    return obj;
}

QString OAIKeyVaultCertificateSourceParameters::getOdataType() const {
    return m_odata_type;
}
void OAIKeyVaultCertificateSourceParameters::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIKeyVaultCertificateSourceParameters::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIKeyVaultCertificateSourceParameters::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAIKeyVaultCertificateSourceParameters::getDeleteRule() const {
    return m_delete_rule;
}
void OAIKeyVaultCertificateSourceParameters::setDeleteRule(const QString &delete_rule) {
    m_delete_rule = delete_rule;
    m_delete_rule_isSet = true;
}

bool OAIKeyVaultCertificateSourceParameters::is_delete_rule_Set() const{
    return m_delete_rule_isSet;
}

bool OAIKeyVaultCertificateSourceParameters::is_delete_rule_Valid() const{
    return m_delete_rule_isValid;
}

QString OAIKeyVaultCertificateSourceParameters::getResourceGroupName() const {
    return m_resource_group_name;
}
void OAIKeyVaultCertificateSourceParameters::setResourceGroupName(const QString &resource_group_name) {
    m_resource_group_name = resource_group_name;
    m_resource_group_name_isSet = true;
}

bool OAIKeyVaultCertificateSourceParameters::is_resource_group_name_Set() const{
    return m_resource_group_name_isSet;
}

bool OAIKeyVaultCertificateSourceParameters::is_resource_group_name_Valid() const{
    return m_resource_group_name_isValid;
}

QString OAIKeyVaultCertificateSourceParameters::getSecretName() const {
    return m_secret_name;
}
void OAIKeyVaultCertificateSourceParameters::setSecretName(const QString &secret_name) {
    m_secret_name = secret_name;
    m_secret_name_isSet = true;
}

bool OAIKeyVaultCertificateSourceParameters::is_secret_name_Set() const{
    return m_secret_name_isSet;
}

bool OAIKeyVaultCertificateSourceParameters::is_secret_name_Valid() const{
    return m_secret_name_isValid;
}

QString OAIKeyVaultCertificateSourceParameters::getSecretVersion() const {
    return m_secret_version;
}
void OAIKeyVaultCertificateSourceParameters::setSecretVersion(const QString &secret_version) {
    m_secret_version = secret_version;
    m_secret_version_isSet = true;
}

bool OAIKeyVaultCertificateSourceParameters::is_secret_version_Set() const{
    return m_secret_version_isSet;
}

bool OAIKeyVaultCertificateSourceParameters::is_secret_version_Valid() const{
    return m_secret_version_isValid;
}

QString OAIKeyVaultCertificateSourceParameters::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIKeyVaultCertificateSourceParameters::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIKeyVaultCertificateSourceParameters::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIKeyVaultCertificateSourceParameters::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIKeyVaultCertificateSourceParameters::getUpdateRule() const {
    return m_update_rule;
}
void OAIKeyVaultCertificateSourceParameters::setUpdateRule(const QString &update_rule) {
    m_update_rule = update_rule;
    m_update_rule_isSet = true;
}

bool OAIKeyVaultCertificateSourceParameters::is_update_rule_Set() const{
    return m_update_rule_isSet;
}

bool OAIKeyVaultCertificateSourceParameters::is_update_rule_Valid() const{
    return m_update_rule_isValid;
}

QString OAIKeyVaultCertificateSourceParameters::getVaultName() const {
    return m_vault_name;
}
void OAIKeyVaultCertificateSourceParameters::setVaultName(const QString &vault_name) {
    m_vault_name = vault_name;
    m_vault_name_isSet = true;
}

bool OAIKeyVaultCertificateSourceParameters::is_vault_name_Set() const{
    return m_vault_name_isSet;
}

bool OAIKeyVaultCertificateSourceParameters::is_vault_name_Valid() const{
    return m_vault_name_isValid;
}

bool OAIKeyVaultCertificateSourceParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyVaultCertificateSourceParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && m_delete_rule_isValid && m_resource_group_name_isValid && m_secret_name_isValid && m_secret_version_isValid && m_subscription_id_isValid && m_update_rule_isValid && m_vault_name_isValid && true;
}

} // namespace OpenAPI
