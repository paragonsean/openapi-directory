/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeepCreatedOriginProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeepCreatedOriginProperties::OAIDeepCreatedOriginProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeepCreatedOriginProperties::OAIDeepCreatedOriginProperties() {
    this->initializeModel();
}

OAIDeepCreatedOriginProperties::~OAIDeepCreatedOriginProperties() {}

void OAIDeepCreatedOriginProperties::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_http_port_isSet = false;
    m_http_port_isValid = false;

    m_https_port_isSet = false;
    m_https_port_isValid = false;

    m_origin_host_header_isSet = false;
    m_origin_host_header_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIDeepCreatedOriginProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeepCreatedOriginProperties::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_http_port_isValid = ::OpenAPI::fromJsonValue(m_http_port, json[QString("httpPort")]);
    m_http_port_isSet = !json[QString("httpPort")].isNull() && m_http_port_isValid;

    m_https_port_isValid = ::OpenAPI::fromJsonValue(m_https_port, json[QString("httpsPort")]);
    m_https_port_isSet = !json[QString("httpsPort")].isNull() && m_https_port_isValid;

    m_origin_host_header_isValid = ::OpenAPI::fromJsonValue(m_origin_host_header, json[QString("originHostHeader")]);
    m_origin_host_header_isSet = !json[QString("originHostHeader")].isNull() && m_origin_host_header_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIDeepCreatedOriginProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeepCreatedOriginProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_http_port_isSet) {
        obj.insert(QString("httpPort"), ::OpenAPI::toJsonValue(m_http_port));
    }
    if (m_https_port_isSet) {
        obj.insert(QString("httpsPort"), ::OpenAPI::toJsonValue(m_https_port));
    }
    if (m_origin_host_header_isSet) {
        obj.insert(QString("originHostHeader"), ::OpenAPI::toJsonValue(m_origin_host_header));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

bool OAIDeepCreatedOriginProperties::isEnabled() const {
    return m_enabled;
}
void OAIDeepCreatedOriginProperties::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIDeepCreatedOriginProperties::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIDeepCreatedOriginProperties::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIDeepCreatedOriginProperties::getHostName() const {
    return m_host_name;
}
void OAIDeepCreatedOriginProperties::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIDeepCreatedOriginProperties::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIDeepCreatedOriginProperties::is_host_name_Valid() const{
    return m_host_name_isValid;
}

qint32 OAIDeepCreatedOriginProperties::getHttpPort() const {
    return m_http_port;
}
void OAIDeepCreatedOriginProperties::setHttpPort(const qint32 &http_port) {
    m_http_port = http_port;
    m_http_port_isSet = true;
}

bool OAIDeepCreatedOriginProperties::is_http_port_Set() const{
    return m_http_port_isSet;
}

bool OAIDeepCreatedOriginProperties::is_http_port_Valid() const{
    return m_http_port_isValid;
}

qint32 OAIDeepCreatedOriginProperties::getHttpsPort() const {
    return m_https_port;
}
void OAIDeepCreatedOriginProperties::setHttpsPort(const qint32 &https_port) {
    m_https_port = https_port;
    m_https_port_isSet = true;
}

bool OAIDeepCreatedOriginProperties::is_https_port_Set() const{
    return m_https_port_isSet;
}

bool OAIDeepCreatedOriginProperties::is_https_port_Valid() const{
    return m_https_port_isValid;
}

QString OAIDeepCreatedOriginProperties::getOriginHostHeader() const {
    return m_origin_host_header;
}
void OAIDeepCreatedOriginProperties::setOriginHostHeader(const QString &origin_host_header) {
    m_origin_host_header = origin_host_header;
    m_origin_host_header_isSet = true;
}

bool OAIDeepCreatedOriginProperties::is_origin_host_header_Set() const{
    return m_origin_host_header_isSet;
}

bool OAIDeepCreatedOriginProperties::is_origin_host_header_Valid() const{
    return m_origin_host_header_isValid;
}

qint32 OAIDeepCreatedOriginProperties::getPriority() const {
    return m_priority;
}
void OAIDeepCreatedOriginProperties::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIDeepCreatedOriginProperties::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIDeepCreatedOriginProperties::is_priority_Valid() const{
    return m_priority_isValid;
}

qint32 OAIDeepCreatedOriginProperties::getWeight() const {
    return m_weight;
}
void OAIDeepCreatedOriginProperties::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIDeepCreatedOriginProperties::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIDeepCreatedOriginProperties::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIDeepCreatedOriginProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_host_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeepCreatedOriginProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_host_name_isValid && true;
}

} // namespace OpenAPI
