/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICacheKeyQueryStringActionParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICacheKeyQueryStringActionParameters::OAICacheKeyQueryStringActionParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICacheKeyQueryStringActionParameters::OAICacheKeyQueryStringActionParameters() {
    this->initializeModel();
}

OAICacheKeyQueryStringActionParameters::~OAICacheKeyQueryStringActionParameters() {}

void OAICacheKeyQueryStringActionParameters::initializeModel() {

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_query_parameters_isSet = false;
    m_query_parameters_isValid = false;

    m_query_string_behavior_isSet = false;
    m_query_string_behavior_isValid = false;
}

void OAICacheKeyQueryStringActionParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICacheKeyQueryStringActionParameters::fromJsonObject(QJsonObject json) {

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_query_parameters_isValid = ::OpenAPI::fromJsonValue(m_query_parameters, json[QString("queryParameters")]);
    m_query_parameters_isSet = !json[QString("queryParameters")].isNull() && m_query_parameters_isValid;

    m_query_string_behavior_isValid = ::OpenAPI::fromJsonValue(m_query_string_behavior, json[QString("queryStringBehavior")]);
    m_query_string_behavior_isSet = !json[QString("queryStringBehavior")].isNull() && m_query_string_behavior_isValid;
}

QString OAICacheKeyQueryStringActionParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICacheKeyQueryStringActionParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_query_parameters_isSet) {
        obj.insert(QString("queryParameters"), ::OpenAPI::toJsonValue(m_query_parameters));
    }
    if (m_query_string_behavior_isSet) {
        obj.insert(QString("queryStringBehavior"), ::OpenAPI::toJsonValue(m_query_string_behavior));
    }
    return obj;
}

QString OAICacheKeyQueryStringActionParameters::getOdataType() const {
    return m_odata_type;
}
void OAICacheKeyQueryStringActionParameters::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAICacheKeyQueryStringActionParameters::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAICacheKeyQueryStringActionParameters::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAICacheKeyQueryStringActionParameters::getQueryParameters() const {
    return m_query_parameters;
}
void OAICacheKeyQueryStringActionParameters::setQueryParameters(const QString &query_parameters) {
    m_query_parameters = query_parameters;
    m_query_parameters_isSet = true;
}

bool OAICacheKeyQueryStringActionParameters::is_query_parameters_Set() const{
    return m_query_parameters_isSet;
}

bool OAICacheKeyQueryStringActionParameters::is_query_parameters_Valid() const{
    return m_query_parameters_isValid;
}

QString OAICacheKeyQueryStringActionParameters::getQueryStringBehavior() const {
    return m_query_string_behavior;
}
void OAICacheKeyQueryStringActionParameters::setQueryStringBehavior(const QString &query_string_behavior) {
    m_query_string_behavior = query_string_behavior;
    m_query_string_behavior_isSet = true;
}

bool OAICacheKeyQueryStringActionParameters::is_query_string_behavior_Set() const{
    return m_query_string_behavior_isSet;
}

bool OAICacheKeyQueryStringActionParameters::is_query_string_behavior_Valid() const{
    return m_query_string_behavior_isValid;
}

bool OAICacheKeyQueryStringActionParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_string_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICacheKeyQueryStringActionParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && m_query_string_behavior_isValid && true;
}

} // namespace OpenAPI
