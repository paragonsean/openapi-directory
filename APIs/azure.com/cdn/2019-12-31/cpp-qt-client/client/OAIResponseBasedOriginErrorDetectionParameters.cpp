/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseBasedOriginErrorDetectionParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseBasedOriginErrorDetectionParameters::OAIResponseBasedOriginErrorDetectionParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseBasedOriginErrorDetectionParameters::OAIResponseBasedOriginErrorDetectionParameters() {
    this->initializeModel();
}

OAIResponseBasedOriginErrorDetectionParameters::~OAIResponseBasedOriginErrorDetectionParameters() {}

void OAIResponseBasedOriginErrorDetectionParameters::initializeModel() {

    m_http_error_ranges_isSet = false;
    m_http_error_ranges_isValid = false;

    m_response_based_detected_error_types_isSet = false;
    m_response_based_detected_error_types_isValid = false;

    m_response_based_failover_threshold_percentage_isSet = false;
    m_response_based_failover_threshold_percentage_isValid = false;
}

void OAIResponseBasedOriginErrorDetectionParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseBasedOriginErrorDetectionParameters::fromJsonObject(QJsonObject json) {

    m_http_error_ranges_isValid = ::OpenAPI::fromJsonValue(m_http_error_ranges, json[QString("httpErrorRanges")]);
    m_http_error_ranges_isSet = !json[QString("httpErrorRanges")].isNull() && m_http_error_ranges_isValid;

    m_response_based_detected_error_types_isValid = ::OpenAPI::fromJsonValue(m_response_based_detected_error_types, json[QString("responseBasedDetectedErrorTypes")]);
    m_response_based_detected_error_types_isSet = !json[QString("responseBasedDetectedErrorTypes")].isNull() && m_response_based_detected_error_types_isValid;

    m_response_based_failover_threshold_percentage_isValid = ::OpenAPI::fromJsonValue(m_response_based_failover_threshold_percentage, json[QString("responseBasedFailoverThresholdPercentage")]);
    m_response_based_failover_threshold_percentage_isSet = !json[QString("responseBasedFailoverThresholdPercentage")].isNull() && m_response_based_failover_threshold_percentage_isValid;
}

QString OAIResponseBasedOriginErrorDetectionParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseBasedOriginErrorDetectionParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_http_error_ranges.size() > 0) {
        obj.insert(QString("httpErrorRanges"), ::OpenAPI::toJsonValue(m_http_error_ranges));
    }
    if (m_response_based_detected_error_types_isSet) {
        obj.insert(QString("responseBasedDetectedErrorTypes"), ::OpenAPI::toJsonValue(m_response_based_detected_error_types));
    }
    if (m_response_based_failover_threshold_percentage_isSet) {
        obj.insert(QString("responseBasedFailoverThresholdPercentage"), ::OpenAPI::toJsonValue(m_response_based_failover_threshold_percentage));
    }
    return obj;
}

QList<OAIHttpErrorRangeParameters> OAIResponseBasedOriginErrorDetectionParameters::getHttpErrorRanges() const {
    return m_http_error_ranges;
}
void OAIResponseBasedOriginErrorDetectionParameters::setHttpErrorRanges(const QList<OAIHttpErrorRangeParameters> &http_error_ranges) {
    m_http_error_ranges = http_error_ranges;
    m_http_error_ranges_isSet = true;
}

bool OAIResponseBasedOriginErrorDetectionParameters::is_http_error_ranges_Set() const{
    return m_http_error_ranges_isSet;
}

bool OAIResponseBasedOriginErrorDetectionParameters::is_http_error_ranges_Valid() const{
    return m_http_error_ranges_isValid;
}

QString OAIResponseBasedOriginErrorDetectionParameters::getResponseBasedDetectedErrorTypes() const {
    return m_response_based_detected_error_types;
}
void OAIResponseBasedOriginErrorDetectionParameters::setResponseBasedDetectedErrorTypes(const QString &response_based_detected_error_types) {
    m_response_based_detected_error_types = response_based_detected_error_types;
    m_response_based_detected_error_types_isSet = true;
}

bool OAIResponseBasedOriginErrorDetectionParameters::is_response_based_detected_error_types_Set() const{
    return m_response_based_detected_error_types_isSet;
}

bool OAIResponseBasedOriginErrorDetectionParameters::is_response_based_detected_error_types_Valid() const{
    return m_response_based_detected_error_types_isValid;
}

qint32 OAIResponseBasedOriginErrorDetectionParameters::getResponseBasedFailoverThresholdPercentage() const {
    return m_response_based_failover_threshold_percentage;
}
void OAIResponseBasedOriginErrorDetectionParameters::setResponseBasedFailoverThresholdPercentage(const qint32 &response_based_failover_threshold_percentage) {
    m_response_based_failover_threshold_percentage = response_based_failover_threshold_percentage;
    m_response_based_failover_threshold_percentage_isSet = true;
}

bool OAIResponseBasedOriginErrorDetectionParameters::is_response_based_failover_threshold_percentage_Set() const{
    return m_response_based_failover_threshold_percentage_isSet;
}

bool OAIResponseBasedOriginErrorDetectionParameters::is_response_based_failover_threshold_percentage_Valid() const{
    return m_response_based_failover_threshold_percentage_isValid;
}

bool OAIResponseBasedOriginErrorDetectionParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_error_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_based_detected_error_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_based_failover_threshold_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseBasedOriginErrorDetectionParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
