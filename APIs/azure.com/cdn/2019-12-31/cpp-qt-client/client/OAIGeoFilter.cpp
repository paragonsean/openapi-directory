/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoFilter::OAIGeoFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoFilter::OAIGeoFilter() {
    this->initializeModel();
}

OAIGeoFilter::~OAIGeoFilter() {}

void OAIGeoFilter::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_country_codes_isSet = false;
    m_country_codes_isValid = false;

    m_relative_path_isSet = false;
    m_relative_path_isValid = false;
}

void OAIGeoFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoFilter::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_country_codes_isValid = ::OpenAPI::fromJsonValue(m_country_codes, json[QString("countryCodes")]);
    m_country_codes_isSet = !json[QString("countryCodes")].isNull() && m_country_codes_isValid;

    m_relative_path_isValid = ::OpenAPI::fromJsonValue(m_relative_path, json[QString("relativePath")]);
    m_relative_path_isSet = !json[QString("relativePath")].isNull() && m_relative_path_isValid;
}

QString OAIGeoFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_country_codes.size() > 0) {
        obj.insert(QString("countryCodes"), ::OpenAPI::toJsonValue(m_country_codes));
    }
    if (m_relative_path_isSet) {
        obj.insert(QString("relativePath"), ::OpenAPI::toJsonValue(m_relative_path));
    }
    return obj;
}

QString OAIGeoFilter::getAction() const {
    return m_action;
}
void OAIGeoFilter::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIGeoFilter::is_action_Set() const{
    return m_action_isSet;
}

bool OAIGeoFilter::is_action_Valid() const{
    return m_action_isValid;
}

QList<QString> OAIGeoFilter::getCountryCodes() const {
    return m_country_codes;
}
void OAIGeoFilter::setCountryCodes(const QList<QString> &country_codes) {
    m_country_codes = country_codes;
    m_country_codes_isSet = true;
}

bool OAIGeoFilter::is_country_codes_Set() const{
    return m_country_codes_isSet;
}

bool OAIGeoFilter::is_country_codes_Valid() const{
    return m_country_codes_isValid;
}

QString OAIGeoFilter::getRelativePath() const {
    return m_relative_path;
}
void OAIGeoFilter::setRelativePath(const QString &relative_path) {
    m_relative_path = relative_path;
    m_relative_path_isSet = true;
}

bool OAIGeoFilter::is_relative_path_Set() const{
    return m_relative_path_isSet;
}

bool OAIGeoFilter::is_relative_path_Valid() const{
    return m_relative_path_isValid;
}

bool OAIGeoFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_country_codes_isValid && m_relative_path_isValid && true;
}

} // namespace OpenAPI
