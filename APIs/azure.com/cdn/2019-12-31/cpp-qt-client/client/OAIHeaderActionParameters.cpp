/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeaderActionParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeaderActionParameters::OAIHeaderActionParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeaderActionParameters::OAIHeaderActionParameters() {
    this->initializeModel();
}

OAIHeaderActionParameters::~OAIHeaderActionParameters() {}

void OAIHeaderActionParameters::initializeModel() {

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_header_action_isSet = false;
    m_header_action_isValid = false;

    m_header_name_isSet = false;
    m_header_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIHeaderActionParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeaderActionParameters::fromJsonObject(QJsonObject json) {

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_header_action_isValid = ::OpenAPI::fromJsonValue(m_header_action, json[QString("headerAction")]);
    m_header_action_isSet = !json[QString("headerAction")].isNull() && m_header_action_isValid;

    m_header_name_isValid = ::OpenAPI::fromJsonValue(m_header_name, json[QString("headerName")]);
    m_header_name_isSet = !json[QString("headerName")].isNull() && m_header_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIHeaderActionParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeaderActionParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_header_action_isSet) {
        obj.insert(QString("headerAction"), ::OpenAPI::toJsonValue(m_header_action));
    }
    if (m_header_name_isSet) {
        obj.insert(QString("headerName"), ::OpenAPI::toJsonValue(m_header_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIHeaderActionParameters::getOdataType() const {
    return m_odata_type;
}
void OAIHeaderActionParameters::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIHeaderActionParameters::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIHeaderActionParameters::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAIHeaderActionParameters::getHeaderAction() const {
    return m_header_action;
}
void OAIHeaderActionParameters::setHeaderAction(const QString &header_action) {
    m_header_action = header_action;
    m_header_action_isSet = true;
}

bool OAIHeaderActionParameters::is_header_action_Set() const{
    return m_header_action_isSet;
}

bool OAIHeaderActionParameters::is_header_action_Valid() const{
    return m_header_action_isValid;
}

QString OAIHeaderActionParameters::getHeaderName() const {
    return m_header_name;
}
void OAIHeaderActionParameters::setHeaderName(const QString &header_name) {
    m_header_name = header_name;
    m_header_name_isSet = true;
}

bool OAIHeaderActionParameters::is_header_name_Set() const{
    return m_header_name_isSet;
}

bool OAIHeaderActionParameters::is_header_name_Valid() const{
    return m_header_name_isValid;
}

QString OAIHeaderActionParameters::getValue() const {
    return m_value;
}
void OAIHeaderActionParameters::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIHeaderActionParameters::is_value_Set() const{
    return m_value_isSet;
}

bool OAIHeaderActionParameters::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIHeaderActionParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeaderActionParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && m_header_action_isValid && m_header_name_isValid && true;
}

} // namespace OpenAPI
