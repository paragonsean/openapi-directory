/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomDomainHttpsParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomDomainHttpsParameters::OAICustomDomainHttpsParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomDomainHttpsParameters::OAICustomDomainHttpsParameters() {
    this->initializeModel();
}

OAICustomDomainHttpsParameters::~OAICustomDomainHttpsParameters() {}

void OAICustomDomainHttpsParameters::initializeModel() {

    m_certificate_source_isSet = false;
    m_certificate_source_isValid = false;

    m_minimum_tls_version_isSet = false;
    m_minimum_tls_version_isValid = false;

    m_protocol_type_isSet = false;
    m_protocol_type_isValid = false;
}

void OAICustomDomainHttpsParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomDomainHttpsParameters::fromJsonObject(QJsonObject json) {

    m_certificate_source_isValid = ::OpenAPI::fromJsonValue(m_certificate_source, json[QString("certificateSource")]);
    m_certificate_source_isSet = !json[QString("certificateSource")].isNull() && m_certificate_source_isValid;

    m_minimum_tls_version_isValid = ::OpenAPI::fromJsonValue(m_minimum_tls_version, json[QString("minimumTlsVersion")]);
    m_minimum_tls_version_isSet = !json[QString("minimumTlsVersion")].isNull() && m_minimum_tls_version_isValid;

    m_protocol_type_isValid = ::OpenAPI::fromJsonValue(m_protocol_type, json[QString("protocolType")]);
    m_protocol_type_isSet = !json[QString("protocolType")].isNull() && m_protocol_type_isValid;
}

QString OAICustomDomainHttpsParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomDomainHttpsParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_source_isSet) {
        obj.insert(QString("certificateSource"), ::OpenAPI::toJsonValue(m_certificate_source));
    }
    if (m_minimum_tls_version_isSet) {
        obj.insert(QString("minimumTlsVersion"), ::OpenAPI::toJsonValue(m_minimum_tls_version));
    }
    if (m_protocol_type_isSet) {
        obj.insert(QString("protocolType"), ::OpenAPI::toJsonValue(m_protocol_type));
    }
    return obj;
}

QString OAICustomDomainHttpsParameters::getCertificateSource() const {
    return m_certificate_source;
}
void OAICustomDomainHttpsParameters::setCertificateSource(const QString &certificate_source) {
    m_certificate_source = certificate_source;
    m_certificate_source_isSet = true;
}

bool OAICustomDomainHttpsParameters::is_certificate_source_Set() const{
    return m_certificate_source_isSet;
}

bool OAICustomDomainHttpsParameters::is_certificate_source_Valid() const{
    return m_certificate_source_isValid;
}

QString OAICustomDomainHttpsParameters::getMinimumTlsVersion() const {
    return m_minimum_tls_version;
}
void OAICustomDomainHttpsParameters::setMinimumTlsVersion(const QString &minimum_tls_version) {
    m_minimum_tls_version = minimum_tls_version;
    m_minimum_tls_version_isSet = true;
}

bool OAICustomDomainHttpsParameters::is_minimum_tls_version_Set() const{
    return m_minimum_tls_version_isSet;
}

bool OAICustomDomainHttpsParameters::is_minimum_tls_version_Valid() const{
    return m_minimum_tls_version_isValid;
}

QString OAICustomDomainHttpsParameters::getProtocolType() const {
    return m_protocol_type;
}
void OAICustomDomainHttpsParameters::setProtocolType(const QString &protocol_type) {
    m_protocol_type = protocol_type;
    m_protocol_type_isSet = true;
}

bool OAICustomDomainHttpsParameters::is_protocol_type_Set() const{
    return m_protocol_type_isSet;
}

bool OAICustomDomainHttpsParameters::is_protocol_type_Valid() const{
    return m_protocol_type_isValid;
}

bool OAICustomDomainHttpsParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_tls_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomDomainHttpsParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_source_isValid && m_protocol_type_isValid && true;
}

} // namespace OpenAPI
