/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICacheExpirationActionParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICacheExpirationActionParameters::OAICacheExpirationActionParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICacheExpirationActionParameters::OAICacheExpirationActionParameters() {
    this->initializeModel();
}

OAICacheExpirationActionParameters::~OAICacheExpirationActionParameters() {}

void OAICacheExpirationActionParameters::initializeModel() {

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_cache_behavior_isSet = false;
    m_cache_behavior_isValid = false;

    m_cache_duration_isSet = false;
    m_cache_duration_isValid = false;

    m_cache_type_isSet = false;
    m_cache_type_isValid = false;
}

void OAICacheExpirationActionParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICacheExpirationActionParameters::fromJsonObject(QJsonObject json) {

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_cache_behavior_isValid = ::OpenAPI::fromJsonValue(m_cache_behavior, json[QString("cacheBehavior")]);
    m_cache_behavior_isSet = !json[QString("cacheBehavior")].isNull() && m_cache_behavior_isValid;

    m_cache_duration_isValid = ::OpenAPI::fromJsonValue(m_cache_duration, json[QString("cacheDuration")]);
    m_cache_duration_isSet = !json[QString("cacheDuration")].isNull() && m_cache_duration_isValid;

    m_cache_type_isValid = ::OpenAPI::fromJsonValue(m_cache_type, json[QString("cacheType")]);
    m_cache_type_isSet = !json[QString("cacheType")].isNull() && m_cache_type_isValid;
}

QString OAICacheExpirationActionParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICacheExpirationActionParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_cache_behavior_isSet) {
        obj.insert(QString("cacheBehavior"), ::OpenAPI::toJsonValue(m_cache_behavior));
    }
    if (m_cache_duration_isSet) {
        obj.insert(QString("cacheDuration"), ::OpenAPI::toJsonValue(m_cache_duration));
    }
    if (m_cache_type_isSet) {
        obj.insert(QString("cacheType"), ::OpenAPI::toJsonValue(m_cache_type));
    }
    return obj;
}

QString OAICacheExpirationActionParameters::getOdataType() const {
    return m_odata_type;
}
void OAICacheExpirationActionParameters::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAICacheExpirationActionParameters::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAICacheExpirationActionParameters::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAICacheExpirationActionParameters::getCacheBehavior() const {
    return m_cache_behavior;
}
void OAICacheExpirationActionParameters::setCacheBehavior(const QString &cache_behavior) {
    m_cache_behavior = cache_behavior;
    m_cache_behavior_isSet = true;
}

bool OAICacheExpirationActionParameters::is_cache_behavior_Set() const{
    return m_cache_behavior_isSet;
}

bool OAICacheExpirationActionParameters::is_cache_behavior_Valid() const{
    return m_cache_behavior_isValid;
}

QString OAICacheExpirationActionParameters::getCacheDuration() const {
    return m_cache_duration;
}
void OAICacheExpirationActionParameters::setCacheDuration(const QString &cache_duration) {
    m_cache_duration = cache_duration;
    m_cache_duration_isSet = true;
}

bool OAICacheExpirationActionParameters::is_cache_duration_Set() const{
    return m_cache_duration_isSet;
}

bool OAICacheExpirationActionParameters::is_cache_duration_Valid() const{
    return m_cache_duration_isValid;
}

QString OAICacheExpirationActionParameters::getCacheType() const {
    return m_cache_type;
}
void OAICacheExpirationActionParameters::setCacheType(const QString &cache_type) {
    m_cache_type = cache_type;
    m_cache_type_isSet = true;
}

bool OAICacheExpirationActionParameters::is_cache_type_Set() const{
    return m_cache_type_isSet;
}

bool OAICacheExpirationActionParameters::is_cache_type_Valid() const{
    return m_cache_type_isValid;
}

bool OAICacheExpirationActionParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICacheExpirationActionParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && m_cache_behavior_isValid && m_cache_type_isValid && true;
}

} // namespace OpenAPI
