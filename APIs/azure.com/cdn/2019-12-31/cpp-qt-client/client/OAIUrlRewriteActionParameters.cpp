/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-12-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrlRewriteActionParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrlRewriteActionParameters::OAIUrlRewriteActionParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrlRewriteActionParameters::OAIUrlRewriteActionParameters() {
    this->initializeModel();
}

OAIUrlRewriteActionParameters::~OAIUrlRewriteActionParameters() {}

void OAIUrlRewriteActionParameters::initializeModel() {

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_preserve_unmatched_path_isSet = false;
    m_preserve_unmatched_path_isValid = false;

    m_source_pattern_isSet = false;
    m_source_pattern_isValid = false;
}

void OAIUrlRewriteActionParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrlRewriteActionParameters::fromJsonObject(QJsonObject json) {

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_preserve_unmatched_path_isValid = ::OpenAPI::fromJsonValue(m_preserve_unmatched_path, json[QString("preserveUnmatchedPath")]);
    m_preserve_unmatched_path_isSet = !json[QString("preserveUnmatchedPath")].isNull() && m_preserve_unmatched_path_isValid;

    m_source_pattern_isValid = ::OpenAPI::fromJsonValue(m_source_pattern, json[QString("sourcePattern")]);
    m_source_pattern_isSet = !json[QString("sourcePattern")].isNull() && m_source_pattern_isValid;
}

QString OAIUrlRewriteActionParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrlRewriteActionParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_preserve_unmatched_path_isSet) {
        obj.insert(QString("preserveUnmatchedPath"), ::OpenAPI::toJsonValue(m_preserve_unmatched_path));
    }
    if (m_source_pattern_isSet) {
        obj.insert(QString("sourcePattern"), ::OpenAPI::toJsonValue(m_source_pattern));
    }
    return obj;
}

QString OAIUrlRewriteActionParameters::getOdataType() const {
    return m_odata_type;
}
void OAIUrlRewriteActionParameters::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIUrlRewriteActionParameters::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIUrlRewriteActionParameters::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAIUrlRewriteActionParameters::getDestination() const {
    return m_destination;
}
void OAIUrlRewriteActionParameters::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIUrlRewriteActionParameters::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIUrlRewriteActionParameters::is_destination_Valid() const{
    return m_destination_isValid;
}

bool OAIUrlRewriteActionParameters::isPreserveUnmatchedPath() const {
    return m_preserve_unmatched_path;
}
void OAIUrlRewriteActionParameters::setPreserveUnmatchedPath(const bool &preserve_unmatched_path) {
    m_preserve_unmatched_path = preserve_unmatched_path;
    m_preserve_unmatched_path_isSet = true;
}

bool OAIUrlRewriteActionParameters::is_preserve_unmatched_path_Set() const{
    return m_preserve_unmatched_path_isSet;
}

bool OAIUrlRewriteActionParameters::is_preserve_unmatched_path_Valid() const{
    return m_preserve_unmatched_path_isValid;
}

QString OAIUrlRewriteActionParameters::getSourcePattern() const {
    return m_source_pattern;
}
void OAIUrlRewriteActionParameters::setSourcePattern(const QString &source_pattern) {
    m_source_pattern = source_pattern;
    m_source_pattern_isSet = true;
}

bool OAIUrlRewriteActionParameters::is_source_pattern_Set() const{
    return m_source_pattern_isSet;
}

bool OAIUrlRewriteActionParameters::is_source_pattern_Valid() const{
    return m_source_pattern_isValid;
}

bool OAIUrlRewriteActionParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preserve_unmatched_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrlRewriteActionParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && m_destination_isValid && m_source_pattern_isValid && true;
}

} // namespace OpenAPI
