/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Endpoint;
import org.openapitools.client.model.EndpointCreateParameters;
import org.openapitools.client.model.EndpointListResult;
import org.openapitools.client.model.EndpointUpdateParameters;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.LoadParameters;
import org.openapitools.client.model.PurgeParameters;
import org.openapitools.client.model.ValidateCustomDomainInput;
import org.openapitools.client.model.ValidateCustomDomainOutput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EndpointsApi
 */
@Disabled
public class EndpointsApiTest {

    private final EndpointsApi api = new EndpointsApi();

    /**
     * Creates a new CDN endpoint with the specified parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsCreateTest() throws ApiException {
        String endpointName = null;
        String profileName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        EndpointCreateParameters endpointProperties = null;
        Endpoint response = api.endpointsCreate(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, endpointProperties);
        // TODO: test validations
    }

    /**
     * Deletes an existing CDN endpoint with the specified parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsDeleteIfExistsTest() throws ApiException {
        String endpointName = null;
        String profileName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.endpointsDeleteIfExists(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets an existing CDN endpoint with the specified parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsGetTest() throws ApiException {
        String endpointName = null;
        String profileName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Endpoint response = api.endpointsGet(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists existing CDN endpoints within a profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsListByProfileTest() throws ApiException {
        String profileName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        EndpointListResult response = api.endpointsListByProfile(profileName, resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Forcibly pre-loads CDN endpoint content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsLoadContentTest() throws ApiException {
        String endpointName = null;
        String profileName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        LoadParameters contentFilePaths = null;
        api.endpointsLoadContent(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, contentFilePaths);
        // TODO: test validations
    }

    /**
     * Forcibly purges CDN endpoint content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsPurgeContentTest() throws ApiException {
        String endpointName = null;
        String profileName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PurgeParameters contentFilePaths = null;
        api.endpointsPurgeContent(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, contentFilePaths);
        // TODO: test validations
    }

    /**
     * Starts an existing stopped CDN endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsStartTest() throws ApiException {
        String endpointName = null;
        String profileName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Endpoint response = api.endpointsStart(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Stops an existing running CDN endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsStopTest() throws ApiException {
        String endpointName = null;
        String profileName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Endpoint response = api.endpointsStop(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Updates an existing CDN endpoint with the specified parameters. Only tags and OriginHostHeader can be updated after creating an endpoint. To update origins, use the Update Origin operation. To update custom domains, use the Update Custom Domain operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsUpdateTest() throws ApiException {
        String endpointName = null;
        String profileName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        EndpointUpdateParameters endpointProperties = null;
        Endpoint response = api.endpointsUpdate(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, endpointProperties);
        // TODO: test validations
    }

    /**
     * Validates a custom domain mapping to ensure it maps to the correct CNAME in DNS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsValidateCustomDomainTest() throws ApiException {
        String endpointName = null;
        String profileName = null;
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ValidateCustomDomainInput customDomainProperties = null;
        ValidateCustomDomainOutput response = api.endpointsValidateCustomDomain(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, customDomainProperties);
        // TODO: test validations
    }

}
