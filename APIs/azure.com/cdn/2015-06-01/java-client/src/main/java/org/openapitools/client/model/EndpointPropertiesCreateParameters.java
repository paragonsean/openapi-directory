/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeepCreatedOrigin;
import org.openapitools.client.model.QueryStringCachingBehavior;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EndpointPropertiesCreateParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:36.067074-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointPropertiesCreateParameters {
  public static final String SERIALIZED_NAME_CONTENT_TYPES_TO_COMPRESS = "contentTypesToCompress";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPES_TO_COMPRESS)
  private List<String> contentTypesToCompress = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_COMPRESSION_ENABLED = "isCompressionEnabled";
  @SerializedName(SERIALIZED_NAME_IS_COMPRESSION_ENABLED)
  private Boolean isCompressionEnabled;

  public static final String SERIALIZED_NAME_IS_HTTP_ALLOWED = "isHttpAllowed";
  @SerializedName(SERIALIZED_NAME_IS_HTTP_ALLOWED)
  private Boolean isHttpAllowed;

  public static final String SERIALIZED_NAME_IS_HTTPS_ALLOWED = "isHttpsAllowed";
  @SerializedName(SERIALIZED_NAME_IS_HTTPS_ALLOWED)
  private Boolean isHttpsAllowed;

  public static final String SERIALIZED_NAME_ORIGIN_HOST_HEADER = "originHostHeader";
  @SerializedName(SERIALIZED_NAME_ORIGIN_HOST_HEADER)
  private String originHostHeader;

  public static final String SERIALIZED_NAME_ORIGIN_PATH = "originPath";
  @SerializedName(SERIALIZED_NAME_ORIGIN_PATH)
  private String originPath;

  public static final String SERIALIZED_NAME_ORIGINS = "origins";
  @SerializedName(SERIALIZED_NAME_ORIGINS)
  private List<DeepCreatedOrigin> origins = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY_STRING_CACHING_BEHAVIOR = "queryStringCachingBehavior";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING_CACHING_BEHAVIOR)
  private QueryStringCachingBehavior queryStringCachingBehavior;

  public EndpointPropertiesCreateParameters() {
  }

  public EndpointPropertiesCreateParameters contentTypesToCompress(List<String> contentTypesToCompress) {
    this.contentTypesToCompress = contentTypesToCompress;
    return this;
  }

  public EndpointPropertiesCreateParameters addContentTypesToCompressItem(String contentTypesToCompressItem) {
    if (this.contentTypesToCompress == null) {
      this.contentTypesToCompress = new ArrayList<>();
    }
    this.contentTypesToCompress.add(contentTypesToCompressItem);
    return this;
  }

  /**
   * List of content types on which compression will be applied. The value for the elements should be a valid MIME type.
   * @return contentTypesToCompress
   */
  @javax.annotation.Nullable
  public List<String> getContentTypesToCompress() {
    return contentTypesToCompress;
  }

  public void setContentTypesToCompress(List<String> contentTypesToCompress) {
    this.contentTypesToCompress = contentTypesToCompress;
  }


  public EndpointPropertiesCreateParameters isCompressionEnabled(Boolean isCompressionEnabled) {
    this.isCompressionEnabled = isCompressionEnabled;
    return this;
  }

  /**
   * Indicates whether content compression is enabled. Default value is false. If compression is enabled, the content transferred from the CDN endpoint to the end user will be compressed. The requested content must be larger than 1 byte and smaller than 1 MB.
   * @return isCompressionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsCompressionEnabled() {
    return isCompressionEnabled;
  }

  public void setIsCompressionEnabled(Boolean isCompressionEnabled) {
    this.isCompressionEnabled = isCompressionEnabled;
  }


  public EndpointPropertiesCreateParameters isHttpAllowed(Boolean isHttpAllowed) {
    this.isHttpAllowed = isHttpAllowed;
    return this;
  }

  /**
   * Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.
   * @return isHttpAllowed
   */
  @javax.annotation.Nullable
  public Boolean getIsHttpAllowed() {
    return isHttpAllowed;
  }

  public void setIsHttpAllowed(Boolean isHttpAllowed) {
    this.isHttpAllowed = isHttpAllowed;
  }


  public EndpointPropertiesCreateParameters isHttpsAllowed(Boolean isHttpsAllowed) {
    this.isHttpsAllowed = isHttpsAllowed;
    return this;
  }

  /**
   * Indicates whether https traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.
   * @return isHttpsAllowed
   */
  @javax.annotation.Nullable
  public Boolean getIsHttpsAllowed() {
    return isHttpsAllowed;
  }

  public void setIsHttpsAllowed(Boolean isHttpsAllowed) {
    this.isHttpsAllowed = isHttpsAllowed;
  }


  public EndpointPropertiesCreateParameters originHostHeader(String originHostHeader) {
    this.originHostHeader = originHostHeader;
    return this;
  }

  /**
   * The host header CDN provider will send along with content requests to origins. The default value is the host name of the origin.
   * @return originHostHeader
   */
  @javax.annotation.Nullable
  public String getOriginHostHeader() {
    return originHostHeader;
  }

  public void setOriginHostHeader(String originHostHeader) {
    this.originHostHeader = originHostHeader;
  }


  public EndpointPropertiesCreateParameters originPath(String originPath) {
    this.originPath = originPath;
    return this;
  }

  /**
   * The path used for origin requests.
   * @return originPath
   */
  @javax.annotation.Nullable
  public String getOriginPath() {
    return originPath;
  }

  public void setOriginPath(String originPath) {
    this.originPath = originPath;
  }


  public EndpointPropertiesCreateParameters origins(List<DeepCreatedOrigin> origins) {
    this.origins = origins;
    return this;
  }

  public EndpointPropertiesCreateParameters addOriginsItem(DeepCreatedOrigin originsItem) {
    if (this.origins == null) {
      this.origins = new ArrayList<>();
    }
    this.origins.add(originsItem);
    return this;
  }

  /**
   * The set of origins for the CDN endpoint. When multiple origins exist, the first origin will be used as primary and rest will be used as failover options.
   * @return origins
   */
  @javax.annotation.Nonnull
  public List<DeepCreatedOrigin> getOrigins() {
    return origins;
  }

  public void setOrigins(List<DeepCreatedOrigin> origins) {
    this.origins = origins;
  }


  public EndpointPropertiesCreateParameters queryStringCachingBehavior(QueryStringCachingBehavior queryStringCachingBehavior) {
    this.queryStringCachingBehavior = queryStringCachingBehavior;
    return this;
  }

  /**
   * Get queryStringCachingBehavior
   * @return queryStringCachingBehavior
   */
  @javax.annotation.Nullable
  public QueryStringCachingBehavior getQueryStringCachingBehavior() {
    return queryStringCachingBehavior;
  }

  public void setQueryStringCachingBehavior(QueryStringCachingBehavior queryStringCachingBehavior) {
    this.queryStringCachingBehavior = queryStringCachingBehavior;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointPropertiesCreateParameters endpointPropertiesCreateParameters = (EndpointPropertiesCreateParameters) o;
    return Objects.equals(this.contentTypesToCompress, endpointPropertiesCreateParameters.contentTypesToCompress) &&
        Objects.equals(this.isCompressionEnabled, endpointPropertiesCreateParameters.isCompressionEnabled) &&
        Objects.equals(this.isHttpAllowed, endpointPropertiesCreateParameters.isHttpAllowed) &&
        Objects.equals(this.isHttpsAllowed, endpointPropertiesCreateParameters.isHttpsAllowed) &&
        Objects.equals(this.originHostHeader, endpointPropertiesCreateParameters.originHostHeader) &&
        Objects.equals(this.originPath, endpointPropertiesCreateParameters.originPath) &&
        Objects.equals(this.origins, endpointPropertiesCreateParameters.origins) &&
        Objects.equals(this.queryStringCachingBehavior, endpointPropertiesCreateParameters.queryStringCachingBehavior);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentTypesToCompress, isCompressionEnabled, isHttpAllowed, isHttpsAllowed, originHostHeader, originPath, origins, queryStringCachingBehavior);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointPropertiesCreateParameters {\n");
    sb.append("    contentTypesToCompress: ").append(toIndentedString(contentTypesToCompress)).append("\n");
    sb.append("    isCompressionEnabled: ").append(toIndentedString(isCompressionEnabled)).append("\n");
    sb.append("    isHttpAllowed: ").append(toIndentedString(isHttpAllowed)).append("\n");
    sb.append("    isHttpsAllowed: ").append(toIndentedString(isHttpsAllowed)).append("\n");
    sb.append("    originHostHeader: ").append(toIndentedString(originHostHeader)).append("\n");
    sb.append("    originPath: ").append(toIndentedString(originPath)).append("\n");
    sb.append("    origins: ").append(toIndentedString(origins)).append("\n");
    sb.append("    queryStringCachingBehavior: ").append(toIndentedString(queryStringCachingBehavior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentTypesToCompress");
    openapiFields.add("isCompressionEnabled");
    openapiFields.add("isHttpAllowed");
    openapiFields.add("isHttpsAllowed");
    openapiFields.add("originHostHeader");
    openapiFields.add("originPath");
    openapiFields.add("origins");
    openapiFields.add("queryStringCachingBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("origins");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointPropertiesCreateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointPropertiesCreateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointPropertiesCreateParameters is not found in the empty JSON string", EndpointPropertiesCreateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointPropertiesCreateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointPropertiesCreateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EndpointPropertiesCreateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("contentTypesToCompress") != null && !jsonObj.get("contentTypesToCompress").isJsonNull() && !jsonObj.get("contentTypesToCompress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentTypesToCompress` to be an array in the JSON string but got `%s`", jsonObj.get("contentTypesToCompress").toString()));
      }
      if ((jsonObj.get("originHostHeader") != null && !jsonObj.get("originHostHeader").isJsonNull()) && !jsonObj.get("originHostHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originHostHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originHostHeader").toString()));
      }
      if ((jsonObj.get("originPath") != null && !jsonObj.get("originPath").isJsonNull()) && !jsonObj.get("originPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originPath").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("origins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `origins` to be an array in the JSON string but got `%s`", jsonObj.get("origins").toString()));
      }

      JsonArray jsonArrayorigins = jsonObj.getAsJsonArray("origins");
      // validate the required field `origins` (array)
      for (int i = 0; i < jsonArrayorigins.size(); i++) {
        DeepCreatedOrigin.validateJsonElement(jsonArrayorigins.get(i));
      };
      // validate the optional field `queryStringCachingBehavior`
      if (jsonObj.get("queryStringCachingBehavior") != null && !jsonObj.get("queryStringCachingBehavior").isJsonNull()) {
        QueryStringCachingBehavior.validateJsonElement(jsonObj.get("queryStringCachingBehavior"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointPropertiesCreateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointPropertiesCreateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointPropertiesCreateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointPropertiesCreateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointPropertiesCreateParameters>() {
           @Override
           public void write(JsonWriter out, EndpointPropertiesCreateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointPropertiesCreateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointPropertiesCreateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointPropertiesCreateParameters
   * @throws IOException if the JSON string is invalid with respect to EndpointPropertiesCreateParameters
   */
  public static EndpointPropertiesCreateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointPropertiesCreateParameters.class);
  }

  /**
   * Convert an instance of EndpointPropertiesCreateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

