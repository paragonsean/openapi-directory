/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Endpoint;
import org.openapitools.client.model.EndpointCreateParameters;
import org.openapitools.client.model.EndpointListResult;
import org.openapitools.client.model.EndpointUpdateParameters;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.LoadParameters;
import org.openapitools.client.model.PurgeParameters;
import org.openapitools.client.model.ValidateCustomDomainInput;
import org.openapitools.client.model.ValidateCustomDomainOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EndpointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EndpointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EndpointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for endpointsCreate
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param endpointProperties Endpoint properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsCreateCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, EndpointCreateParameters endpointProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpointProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}"
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsCreateValidateBeforeCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, EndpointCreateParameters endpointProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsCreate(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsCreate(Async)");
        }

        // verify the required parameter 'endpointProperties' is set
        if (endpointProperties == null) {
            throw new ApiException("Missing the required parameter 'endpointProperties' when calling endpointsCreate(Async)");
        }

        return endpointsCreateCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, endpointProperties, _callback);

    }

    /**
     * Creates a new CDN endpoint with the specified parameters.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param endpointProperties Endpoint properties (required)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint endpointsCreate(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, EndpointCreateParameters endpointProperties) throws ApiException {
        ApiResponse<Endpoint> localVarResp = endpointsCreateWithHttpInfo(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, endpointProperties);
        return localVarResp.getData();
    }

    /**
     * Creates a new CDN endpoint with the specified parameters.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param endpointProperties Endpoint properties (required)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> endpointsCreateWithHttpInfo(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, EndpointCreateParameters endpointProperties) throws ApiException {
        okhttp3.Call localVarCall = endpointsCreateValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, endpointProperties, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new CDN endpoint with the specified parameters. (asynchronously)
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param endpointProperties Endpoint properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsCreateAsync(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, EndpointCreateParameters endpointProperties, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsCreateValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, endpointProperties, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsDeleteIfExists
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsDeleteIfExistsCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}"
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsDeleteIfExistsValidateBeforeCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsDeleteIfExists(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsDeleteIfExists(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsDeleteIfExists(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsDeleteIfExists(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsDeleteIfExists(Async)");
        }

        return endpointsDeleteIfExistsCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes an existing CDN endpoint with the specified parameters.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void endpointsDeleteIfExists(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        endpointsDeleteIfExistsWithHttpInfo(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion);
    }

    /**
     * Deletes an existing CDN endpoint with the specified parameters.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> endpointsDeleteIfExistsWithHttpInfo(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = endpointsDeleteIfExistsValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an existing CDN endpoint with the specified parameters. (asynchronously)
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsDeleteIfExistsAsync(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsDeleteIfExistsValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsGet
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsGetCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}"
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsGetValidateBeforeCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsGet(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsGet(Async)");
        }

        return endpointsGetCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets an existing CDN endpoint with the specified parameters.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint endpointsGet(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Endpoint> localVarResp = endpointsGetWithHttpInfo(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets an existing CDN endpoint with the specified parameters.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> endpointsGetWithHttpInfo(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = endpointsGetValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an existing CDN endpoint with the specified parameters. (asynchronously)
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsGetAsync(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsGetValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsListByProfile
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsListByProfileCall(String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints"
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsListByProfileValidateBeforeCall(String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsListByProfile(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsListByProfile(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsListByProfile(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsListByProfile(Async)");
        }

        return endpointsListByProfileCall(profileName, resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Lists existing CDN endpoints within a profile.
     * 
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return EndpointListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public EndpointListResult endpointsListByProfile(String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<EndpointListResult> localVarResp = endpointsListByProfileWithHttpInfo(profileName, resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists existing CDN endpoints within a profile.
     * 
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return ApiResponse&lt;EndpointListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointListResult> endpointsListByProfileWithHttpInfo(String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = endpointsListByProfileValidateBeforeCall(profileName, resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<EndpointListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists existing CDN endpoints within a profile. (asynchronously)
     * 
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsListByProfileAsync(String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<EndpointListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsListByProfileValidateBeforeCall(profileName, resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EndpointListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsLoadContent
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param contentFilePaths The path to the content to be loaded. Path should describe a file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsLoadContentCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, LoadParameters contentFilePaths, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentFilePaths;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/load"
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsLoadContentValidateBeforeCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, LoadParameters contentFilePaths, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsLoadContent(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsLoadContent(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsLoadContent(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsLoadContent(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsLoadContent(Async)");
        }

        // verify the required parameter 'contentFilePaths' is set
        if (contentFilePaths == null) {
            throw new ApiException("Missing the required parameter 'contentFilePaths' when calling endpointsLoadContent(Async)");
        }

        return endpointsLoadContentCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, contentFilePaths, _callback);

    }

    /**
     * Forcibly pre-loads CDN endpoint content.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param contentFilePaths The path to the content to be loaded. Path should describe a file. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void endpointsLoadContent(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, LoadParameters contentFilePaths) throws ApiException {
        endpointsLoadContentWithHttpInfo(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, contentFilePaths);
    }

    /**
     * Forcibly pre-loads CDN endpoint content.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param contentFilePaths The path to the content to be loaded. Path should describe a file. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> endpointsLoadContentWithHttpInfo(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, LoadParameters contentFilePaths) throws ApiException {
        okhttp3.Call localVarCall = endpointsLoadContentValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, contentFilePaths, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Forcibly pre-loads CDN endpoint content. (asynchronously)
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param contentFilePaths The path to the content to be loaded. Path should describe a file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsLoadContentAsync(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, LoadParameters contentFilePaths, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsLoadContentValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, contentFilePaths, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsPurgeContent
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param contentFilePaths The path to the content to be purged. Path can describe a file or directory. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsPurgeContentCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, PurgeParameters contentFilePaths, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentFilePaths;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/purge"
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsPurgeContentValidateBeforeCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, PurgeParameters contentFilePaths, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'contentFilePaths' is set
        if (contentFilePaths == null) {
            throw new ApiException("Missing the required parameter 'contentFilePaths' when calling endpointsPurgeContent(Async)");
        }

        return endpointsPurgeContentCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, contentFilePaths, _callback);

    }

    /**
     * Forcibly purges CDN endpoint content.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param contentFilePaths The path to the content to be purged. Path can describe a file or directory. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void endpointsPurgeContent(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, PurgeParameters contentFilePaths) throws ApiException {
        endpointsPurgeContentWithHttpInfo(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, contentFilePaths);
    }

    /**
     * Forcibly purges CDN endpoint content.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param contentFilePaths The path to the content to be purged. Path can describe a file or directory. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> endpointsPurgeContentWithHttpInfo(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, PurgeParameters contentFilePaths) throws ApiException {
        okhttp3.Call localVarCall = endpointsPurgeContentValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, contentFilePaths, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Forcibly purges CDN endpoint content. (asynchronously)
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param contentFilePaths The path to the content to be purged. Path can describe a file or directory. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsPurgeContentAsync(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, PurgeParameters contentFilePaths, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsPurgeContentValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, contentFilePaths, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsStart
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsStartCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/start"
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsStartValidateBeforeCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsStart(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsStart(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsStart(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsStart(Async)");
        }

        return endpointsStartCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Starts an existing stopped CDN endpoint.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint endpointsStart(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Endpoint> localVarResp = endpointsStartWithHttpInfo(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Starts an existing stopped CDN endpoint.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> endpointsStartWithHttpInfo(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = endpointsStartValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Starts an existing stopped CDN endpoint. (asynchronously)
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsStartAsync(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsStartValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsStop
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsStopCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/stop"
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsStopValidateBeforeCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsStop(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsStop(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsStop(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsStop(Async)");
        }

        return endpointsStopCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Stops an existing running CDN endpoint.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint endpointsStop(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Endpoint> localVarResp = endpointsStopWithHttpInfo(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Stops an existing running CDN endpoint.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> endpointsStopWithHttpInfo(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = endpointsStopValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stops an existing running CDN endpoint. (asynchronously)
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsStopAsync(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsStopValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsUpdate
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param endpointProperties Endpoint properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and  the operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsUpdateCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, EndpointUpdateParameters endpointProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpointProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}"
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsUpdateValidateBeforeCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, EndpointUpdateParameters endpointProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsUpdate(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsUpdate(Async)");
        }

        // verify the required parameter 'endpointProperties' is set
        if (endpointProperties == null) {
            throw new ApiException("Missing the required parameter 'endpointProperties' when calling endpointsUpdate(Async)");
        }

        return endpointsUpdateCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, endpointProperties, _callback);

    }

    /**
     * Updates an existing CDN endpoint with the specified parameters. Only tags and OriginHostHeader can be updated after creating an endpoint. To update origins, use the Update Origin operation. To update custom domains, use the Update Custom Domain operation.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param endpointProperties Endpoint properties (required)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and  the operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint endpointsUpdate(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, EndpointUpdateParameters endpointProperties) throws ApiException {
        ApiResponse<Endpoint> localVarResp = endpointsUpdateWithHttpInfo(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, endpointProperties);
        return localVarResp.getData();
    }

    /**
     * Updates an existing CDN endpoint with the specified parameters. Only tags and OriginHostHeader can be updated after creating an endpoint. To update origins, use the Update Origin operation. To update custom domains, use the Update Custom Domain operation.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param endpointProperties Endpoint properties (required)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and  the operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> endpointsUpdateWithHttpInfo(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, EndpointUpdateParameters endpointProperties) throws ApiException {
        okhttp3.Call localVarCall = endpointsUpdateValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, endpointProperties, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an existing CDN endpoint with the specified parameters. Only tags and OriginHostHeader can be updated after creating an endpoint. To update origins, use the Update Origin operation. To update custom domains, use the Update Custom Domain operation. (asynchronously)
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param endpointProperties Endpoint properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and  the operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsUpdateAsync(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, EndpointUpdateParameters endpointProperties, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsUpdateValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, endpointProperties, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for endpointsValidateCustomDomain
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param customDomainProperties Custom domain to validate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsValidateCustomDomainCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, ValidateCustomDomainInput customDomainProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customDomainProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/validateCustomDomain"
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsValidateCustomDomainValidateBeforeCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, ValidateCustomDomainInput customDomainProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling endpointsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling endpointsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'customDomainProperties' is set
        if (customDomainProperties == null) {
            throw new ApiException("Missing the required parameter 'customDomainProperties' when calling endpointsValidateCustomDomain(Async)");
        }

        return endpointsValidateCustomDomainCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, customDomainProperties, _callback);

    }

    /**
     * Validates a custom domain mapping to ensure it maps to the correct CNAME in DNS.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param customDomainProperties Custom domain to validate. (required)
     * @return ValidateCustomDomainOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ValidateCustomDomainOutput endpointsValidateCustomDomain(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, ValidateCustomDomainInput customDomainProperties) throws ApiException {
        ApiResponse<ValidateCustomDomainOutput> localVarResp = endpointsValidateCustomDomainWithHttpInfo(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, customDomainProperties);
        return localVarResp.getData();
    }

    /**
     * Validates a custom domain mapping to ensure it maps to the correct CNAME in DNS.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param customDomainProperties Custom domain to validate. (required)
     * @return ApiResponse&lt;ValidateCustomDomainOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateCustomDomainOutput> endpointsValidateCustomDomainWithHttpInfo(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, ValidateCustomDomainInput customDomainProperties) throws ApiException {
        okhttp3.Call localVarCall = endpointsValidateCustomDomainValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, customDomainProperties, null);
        Type localVarReturnType = new TypeToken<ValidateCustomDomainOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validates a custom domain mapping to ensure it maps to the correct CNAME in DNS. (asynchronously)
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param customDomainProperties Custom domain to validate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsValidateCustomDomainAsync(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, ValidateCustomDomainInput customDomainProperties, final ApiCallback<ValidateCustomDomainOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsValidateCustomDomainValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, customDomainProperties, _callback);
        Type localVarReturnType = new TypeToken<ValidateCustomDomainOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
