/*
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Origin;
import org.openapitools.client.model.OriginListResult;
import org.openapitools.client.model.OriginParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OriginsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OriginsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OriginsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for originsCreate
     * @param originName Name of the origin, an arbitrary value but it needs to be unique under endpoint (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param originProperties Origin properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originsCreateCall(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, OriginParameters originProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = originProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/origins/{originName}"
            .replace("{" + "originName" + "}", localVarApiClient.escapeString(originName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call originsCreateValidateBeforeCall(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, OriginParameters originProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'originName' is set
        if (originName == null) {
            throw new ApiException("Missing the required parameter 'originName' when calling originsCreate(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling originsCreate(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling originsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling originsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling originsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling originsCreate(Async)");
        }

        // verify the required parameter 'originProperties' is set
        if (originProperties == null) {
            throw new ApiException("Missing the required parameter 'originProperties' when calling originsCreate(Async)");
        }

        return originsCreateCall(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, originProperties, _callback);

    }

    /**
     * Creates a new CDN origin within an endpoint.
     * 
     * @param originName Name of the origin, an arbitrary value but it needs to be unique under endpoint (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param originProperties Origin properties (required)
     * @return Origin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Origin originsCreate(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, OriginParameters originProperties) throws ApiException {
        ApiResponse<Origin> localVarResp = originsCreateWithHttpInfo(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, originProperties);
        return localVarResp.getData();
    }

    /**
     * Creates a new CDN origin within an endpoint.
     * 
     * @param originName Name of the origin, an arbitrary value but it needs to be unique under endpoint (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param originProperties Origin properties (required)
     * @return ApiResponse&lt;Origin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Origin> originsCreateWithHttpInfo(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, OriginParameters originProperties) throws ApiException {
        okhttp3.Call localVarCall = originsCreateValidateBeforeCall(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, originProperties, null);
        Type localVarReturnType = new TypeToken<Origin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new CDN origin within an endpoint. (asynchronously)
     * 
     * @param originName Name of the origin, an arbitrary value but it needs to be unique under endpoint (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param originProperties Origin properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originsCreateAsync(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, OriginParameters originProperties, final ApiCallback<Origin> _callback) throws ApiException {

        okhttp3.Call localVarCall = originsCreateValidateBeforeCall(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, originProperties, _callback);
        Type localVarReturnType = new TypeToken<Origin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for originsDeleteIfExists
     * @param originName Name of the origin. Must be unique within endpoint. (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originsDeleteIfExistsCall(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/origins/{originName}"
            .replace("{" + "originName" + "}", localVarApiClient.escapeString(originName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call originsDeleteIfExistsValidateBeforeCall(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'originName' is set
        if (originName == null) {
            throw new ApiException("Missing the required parameter 'originName' when calling originsDeleteIfExists(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling originsDeleteIfExists(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling originsDeleteIfExists(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling originsDeleteIfExists(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling originsDeleteIfExists(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling originsDeleteIfExists(Async)");
        }

        return originsDeleteIfExistsCall(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes an existing CDN origin within an endpoint.
     * 
     * @param originName Name of the origin. Must be unique within endpoint. (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return Origin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Origin originsDeleteIfExists(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Origin> localVarResp = originsDeleteIfExistsWithHttpInfo(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Deletes an existing CDN origin within an endpoint.
     * 
     * @param originName Name of the origin. Must be unique within endpoint. (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return ApiResponse&lt;Origin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Origin> originsDeleteIfExistsWithHttpInfo(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = originsDeleteIfExistsValidateBeforeCall(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Origin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes an existing CDN origin within an endpoint. (asynchronously)
     * 
     * @param originName Name of the origin. Must be unique within endpoint. (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originsDeleteIfExistsAsync(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<Origin> _callback) throws ApiException {

        okhttp3.Call localVarCall = originsDeleteIfExistsValidateBeforeCall(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Origin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for originsGet
     * @param originName Name of the origin, an arbitrary value but it needs to be unique under endpoint (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originsGetCall(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/origins/{originName}"
            .replace("{" + "originName" + "}", localVarApiClient.escapeString(originName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call originsGetValidateBeforeCall(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'originName' is set
        if (originName == null) {
            throw new ApiException("Missing the required parameter 'originName' when calling originsGet(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling originsGet(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling originsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling originsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling originsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling originsGet(Async)");
        }

        return originsGetCall(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets an existing CDN origin within an endpoint.
     * 
     * @param originName Name of the origin, an arbitrary value but it needs to be unique under endpoint (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return Origin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Origin originsGet(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Origin> localVarResp = originsGetWithHttpInfo(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets an existing CDN origin within an endpoint.
     * 
     * @param originName Name of the origin, an arbitrary value but it needs to be unique under endpoint (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return ApiResponse&lt;Origin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Origin> originsGetWithHttpInfo(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = originsGetValidateBeforeCall(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Origin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an existing CDN origin within an endpoint. (asynchronously)
     * 
     * @param originName Name of the origin, an arbitrary value but it needs to be unique under endpoint (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originsGetAsync(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<Origin> _callback) throws ApiException {

        okhttp3.Call localVarCall = originsGetValidateBeforeCall(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Origin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for originsListByEndpoint
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originsListByEndpointCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/origins"
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call originsListByEndpointValidateBeforeCall(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling originsListByEndpoint(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling originsListByEndpoint(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling originsListByEndpoint(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling originsListByEndpoint(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling originsListByEndpoint(Async)");
        }

        return originsListByEndpointCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Lists the existing CDN origins within an endpoint.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return OriginListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public OriginListResult originsListByEndpoint(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<OriginListResult> localVarResp = originsListByEndpointWithHttpInfo(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists the existing CDN origins within an endpoint.
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return ApiResponse&lt;OriginListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OriginListResult> originsListByEndpointWithHttpInfo(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = originsListByEndpointValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<OriginListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists the existing CDN origins within an endpoint. (asynchronously)
     * 
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originsListByEndpointAsync(String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<OriginListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = originsListByEndpointValidateBeforeCall(endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OriginListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for originsUpdate
     * @param originName Name of the origin. Must be unique within endpoint. (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param originProperties Origin properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originsUpdateCall(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, OriginParameters originProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = originProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/origins/{originName}"
            .replace("{" + "originName" + "}", localVarApiClient.escapeString(originName.toString()))
            .replace("{" + "endpointName" + "}", localVarApiClient.escapeString(endpointName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call originsUpdateValidateBeforeCall(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, OriginParameters originProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'originName' is set
        if (originName == null) {
            throw new ApiException("Missing the required parameter 'originName' when calling originsUpdate(Async)");
        }

        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling originsUpdate(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling originsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling originsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling originsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling originsUpdate(Async)");
        }

        // verify the required parameter 'originProperties' is set
        if (originProperties == null) {
            throw new ApiException("Missing the required parameter 'originProperties' when calling originsUpdate(Async)");
        }

        return originsUpdateCall(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, originProperties, _callback);

    }

    /**
     * Updates an existing CDN origin within an endpoint.
     * 
     * @param originName Name of the origin. Must be unique within endpoint. (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param originProperties Origin properties (required)
     * @return Origin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Origin originsUpdate(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, OriginParameters originProperties) throws ApiException {
        ApiResponse<Origin> localVarResp = originsUpdateWithHttpInfo(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, originProperties);
        return localVarResp.getData();
    }

    /**
     * Updates an existing CDN origin within an endpoint.
     * 
     * @param originName Name of the origin. Must be unique within endpoint. (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param originProperties Origin properties (required)
     * @return ApiResponse&lt;Origin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Origin> originsUpdateWithHttpInfo(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, OriginParameters originProperties) throws ApiException {
        okhttp3.Call localVarCall = originsUpdateValidateBeforeCall(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, originProperties, null);
        Type localVarReturnType = new TypeToken<Origin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an existing CDN origin within an endpoint. (asynchronously)
     * 
     * @param originName Name of the origin. Must be unique within endpoint. (required)
     * @param endpointName Name of the endpoint within the CDN profile. (required)
     * @param profileName Name of the CDN profile within the resource group. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param originProperties Origin properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CDN error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call originsUpdateAsync(String originName, String endpointName, String profileName, String resourceGroupName, String subscriptionId, String apiVersion, OriginParameters originProperties, final ApiCallback<Origin> _callback) throws ApiException {

        okhttp3.Call localVarCall = originsUpdateValidateBeforeCall(originName, endpointName, profileName, resourceGroupName, subscriptionId, apiVersion, originProperties, _callback);
        Type localVarReturnType = new TypeToken<Origin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
