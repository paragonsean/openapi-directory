/**
 * CdnManagementClient
 * Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-06-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrlRedirectActionParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrlRedirectActionParameters::OAIUrlRedirectActionParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrlRedirectActionParameters::OAIUrlRedirectActionParameters() {
    this->initializeModel();
}

OAIUrlRedirectActionParameters::~OAIUrlRedirectActionParameters() {}

void OAIUrlRedirectActionParameters::initializeModel() {

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_custom_fragment_isSet = false;
    m_custom_fragment_isValid = false;

    m_custom_hostname_isSet = false;
    m_custom_hostname_isValid = false;

    m_custom_path_isSet = false;
    m_custom_path_isValid = false;

    m_custom_query_string_isSet = false;
    m_custom_query_string_isValid = false;

    m_destination_protocol_isSet = false;
    m_destination_protocol_isValid = false;

    m_redirect_type_isSet = false;
    m_redirect_type_isValid = false;
}

void OAIUrlRedirectActionParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrlRedirectActionParameters::fromJsonObject(QJsonObject json) {

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_custom_fragment_isValid = ::OpenAPI::fromJsonValue(m_custom_fragment, json[QString("customFragment")]);
    m_custom_fragment_isSet = !json[QString("customFragment")].isNull() && m_custom_fragment_isValid;

    m_custom_hostname_isValid = ::OpenAPI::fromJsonValue(m_custom_hostname, json[QString("customHostname")]);
    m_custom_hostname_isSet = !json[QString("customHostname")].isNull() && m_custom_hostname_isValid;

    m_custom_path_isValid = ::OpenAPI::fromJsonValue(m_custom_path, json[QString("customPath")]);
    m_custom_path_isSet = !json[QString("customPath")].isNull() && m_custom_path_isValid;

    m_custom_query_string_isValid = ::OpenAPI::fromJsonValue(m_custom_query_string, json[QString("customQueryString")]);
    m_custom_query_string_isSet = !json[QString("customQueryString")].isNull() && m_custom_query_string_isValid;

    m_destination_protocol_isValid = ::OpenAPI::fromJsonValue(m_destination_protocol, json[QString("destinationProtocol")]);
    m_destination_protocol_isSet = !json[QString("destinationProtocol")].isNull() && m_destination_protocol_isValid;

    m_redirect_type_isValid = ::OpenAPI::fromJsonValue(m_redirect_type, json[QString("redirectType")]);
    m_redirect_type_isSet = !json[QString("redirectType")].isNull() && m_redirect_type_isValid;
}

QString OAIUrlRedirectActionParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrlRedirectActionParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_custom_fragment_isSet) {
        obj.insert(QString("customFragment"), ::OpenAPI::toJsonValue(m_custom_fragment));
    }
    if (m_custom_hostname_isSet) {
        obj.insert(QString("customHostname"), ::OpenAPI::toJsonValue(m_custom_hostname));
    }
    if (m_custom_path_isSet) {
        obj.insert(QString("customPath"), ::OpenAPI::toJsonValue(m_custom_path));
    }
    if (m_custom_query_string_isSet) {
        obj.insert(QString("customQueryString"), ::OpenAPI::toJsonValue(m_custom_query_string));
    }
    if (m_destination_protocol_isSet) {
        obj.insert(QString("destinationProtocol"), ::OpenAPI::toJsonValue(m_destination_protocol));
    }
    if (m_redirect_type_isSet) {
        obj.insert(QString("redirectType"), ::OpenAPI::toJsonValue(m_redirect_type));
    }
    return obj;
}

QString OAIUrlRedirectActionParameters::getOdataType() const {
    return m_odata_type;
}
void OAIUrlRedirectActionParameters::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIUrlRedirectActionParameters::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIUrlRedirectActionParameters::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAIUrlRedirectActionParameters::getCustomFragment() const {
    return m_custom_fragment;
}
void OAIUrlRedirectActionParameters::setCustomFragment(const QString &custom_fragment) {
    m_custom_fragment = custom_fragment;
    m_custom_fragment_isSet = true;
}

bool OAIUrlRedirectActionParameters::is_custom_fragment_Set() const{
    return m_custom_fragment_isSet;
}

bool OAIUrlRedirectActionParameters::is_custom_fragment_Valid() const{
    return m_custom_fragment_isValid;
}

QString OAIUrlRedirectActionParameters::getCustomHostname() const {
    return m_custom_hostname;
}
void OAIUrlRedirectActionParameters::setCustomHostname(const QString &custom_hostname) {
    m_custom_hostname = custom_hostname;
    m_custom_hostname_isSet = true;
}

bool OAIUrlRedirectActionParameters::is_custom_hostname_Set() const{
    return m_custom_hostname_isSet;
}

bool OAIUrlRedirectActionParameters::is_custom_hostname_Valid() const{
    return m_custom_hostname_isValid;
}

QString OAIUrlRedirectActionParameters::getCustomPath() const {
    return m_custom_path;
}
void OAIUrlRedirectActionParameters::setCustomPath(const QString &custom_path) {
    m_custom_path = custom_path;
    m_custom_path_isSet = true;
}

bool OAIUrlRedirectActionParameters::is_custom_path_Set() const{
    return m_custom_path_isSet;
}

bool OAIUrlRedirectActionParameters::is_custom_path_Valid() const{
    return m_custom_path_isValid;
}

QString OAIUrlRedirectActionParameters::getCustomQueryString() const {
    return m_custom_query_string;
}
void OAIUrlRedirectActionParameters::setCustomQueryString(const QString &custom_query_string) {
    m_custom_query_string = custom_query_string;
    m_custom_query_string_isSet = true;
}

bool OAIUrlRedirectActionParameters::is_custom_query_string_Set() const{
    return m_custom_query_string_isSet;
}

bool OAIUrlRedirectActionParameters::is_custom_query_string_Valid() const{
    return m_custom_query_string_isValid;
}

QString OAIUrlRedirectActionParameters::getDestinationProtocol() const {
    return m_destination_protocol;
}
void OAIUrlRedirectActionParameters::setDestinationProtocol(const QString &destination_protocol) {
    m_destination_protocol = destination_protocol;
    m_destination_protocol_isSet = true;
}

bool OAIUrlRedirectActionParameters::is_destination_protocol_Set() const{
    return m_destination_protocol_isSet;
}

bool OAIUrlRedirectActionParameters::is_destination_protocol_Valid() const{
    return m_destination_protocol_isValid;
}

QString OAIUrlRedirectActionParameters::getRedirectType() const {
    return m_redirect_type;
}
void OAIUrlRedirectActionParameters::setRedirectType(const QString &redirect_type) {
    m_redirect_type = redirect_type;
    m_redirect_type_isSet = true;
}

bool OAIUrlRedirectActionParameters::is_redirect_type_Set() const{
    return m_redirect_type_isSet;
}

bool OAIUrlRedirectActionParameters::is_redirect_type_Valid() const{
    return m_redirect_type_isValid;
}

bool OAIUrlRedirectActionParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fragment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_query_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrlRedirectActionParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && m_redirect_type_isValid && true;
}

} // namespace OpenAPI
