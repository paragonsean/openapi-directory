# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidateProbeInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, probe_url: str=None):
        """ValidateProbeInput - a model defined in OpenAPI

        :param probe_url: The probe_url of this ValidateProbeInput.
        """
        self.openapi_types = {
            'probe_url': str
        }

        self.attribute_map = {
            'probe_url': 'probeURL'
        }

        self._probe_url = probe_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidateProbeInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidateProbeInput of this ValidateProbeInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def probe_url(self):
        """Gets the probe_url of this ValidateProbeInput.

        The probe URL to validate.

        :return: The probe_url of this ValidateProbeInput.
        :rtype: str
        """
        return self._probe_url

    @probe_url.setter
    def probe_url(self, probe_url):
        """Sets the probe_url of this ValidateProbeInput.

        The probe URL to validate.

        :param probe_url: The probe_url of this ValidateProbeInput.
        :type probe_url: str
        """
        if probe_url is None:
            raise ValueError("Invalid value for `probe_url`, must not be `None`")

        self._probe_url = probe_url
