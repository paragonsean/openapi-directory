# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UrlRewriteActionParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, odata_type: str=None, destination: str=None, preserve_unmatched_path: bool=None, source_pattern: str=None):
        """UrlRewriteActionParameters - a model defined in OpenAPI

        :param odata_type: The odata_type of this UrlRewriteActionParameters.
        :param destination: The destination of this UrlRewriteActionParameters.
        :param preserve_unmatched_path: The preserve_unmatched_path of this UrlRewriteActionParameters.
        :param source_pattern: The source_pattern of this UrlRewriteActionParameters.
        """
        self.openapi_types = {
            'odata_type': str,
            'destination': str,
            'preserve_unmatched_path': bool,
            'source_pattern': str
        }

        self.attribute_map = {
            'odata_type': '@odata.type',
            'destination': 'destination',
            'preserve_unmatched_path': 'preserveUnmatchedPath',
            'source_pattern': 'sourcePattern'
        }

        self._odata_type = odata_type
        self._destination = destination
        self._preserve_unmatched_path = preserve_unmatched_path
        self._source_pattern = source_pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UrlRewriteActionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UrlRewriteActionParameters of this UrlRewriteActionParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def odata_type(self):
        """Gets the odata_type of this UrlRewriteActionParameters.


        :return: The odata_type of this UrlRewriteActionParameters.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this UrlRewriteActionParameters.


        :param odata_type: The odata_type of this UrlRewriteActionParameters.
        :type odata_type: str
        """
        allowed_values = ["#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlRewriteActionParameters"]  # noqa: E501
        if odata_type not in allowed_values:
            raise ValueError(
                "Invalid value for `odata_type` ({0}), must be one of {1}"
                .format(odata_type, allowed_values)
            )

        self._odata_type = odata_type

    @property
    def destination(self):
        """Gets the destination of this UrlRewriteActionParameters.

        Define the destination path for be used in the rewrite. This will overwrite the source pattern 

        :return: The destination of this UrlRewriteActionParameters.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this UrlRewriteActionParameters.

        Define the destination path for be used in the rewrite. This will overwrite the source pattern 

        :param destination: The destination of this UrlRewriteActionParameters.
        :type destination: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def preserve_unmatched_path(self):
        """Gets the preserve_unmatched_path of this UrlRewriteActionParameters.

        If True, the remaining path after the source pattern will be appended to the new destination path.  

        :return: The preserve_unmatched_path of this UrlRewriteActionParameters.
        :rtype: bool
        """
        return self._preserve_unmatched_path

    @preserve_unmatched_path.setter
    def preserve_unmatched_path(self, preserve_unmatched_path):
        """Sets the preserve_unmatched_path of this UrlRewriteActionParameters.

        If True, the remaining path after the source pattern will be appended to the new destination path.  

        :param preserve_unmatched_path: The preserve_unmatched_path of this UrlRewriteActionParameters.
        :type preserve_unmatched_path: bool
        """

        self._preserve_unmatched_path = preserve_unmatched_path

    @property
    def source_pattern(self):
        """Gets the source_pattern of this UrlRewriteActionParameters.

        define a request URI pattern that identifies the type of requests that may be rewritten. Currently, source pattern uses a prefix-based match. To match all URL paths, use \"/\" as the source pattern value. To match only the root directory and re-write this path, use the origin path field

        :return: The source_pattern of this UrlRewriteActionParameters.
        :rtype: str
        """
        return self._source_pattern

    @source_pattern.setter
    def source_pattern(self, source_pattern):
        """Sets the source_pattern of this UrlRewriteActionParameters.

        define a request URI pattern that identifies the type of requests that may be rewritten. Currently, source pattern uses a prefix-based match. To match all URL paths, use \"/\" as the source pattern value. To match only the root directory and re-write this path, use the origin path field

        :param source_pattern: The source_pattern of this UrlRewriteActionParameters.
        :type source_pattern: str
        """
        if source_pattern is None:
            raise ValueError("Invalid value for `source_pattern`, must not be `None`")

        self._source_pattern = source_pattern
