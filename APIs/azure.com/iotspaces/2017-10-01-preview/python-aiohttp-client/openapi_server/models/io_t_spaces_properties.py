# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.storage_container_properties import StorageContainerProperties
from openapi_server import util


class IoTSpacesProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, management_api_url: str=None, provisioning_state: str=None, storage_container: StorageContainerProperties=None, web_portal_url: str=None):
        """IoTSpacesProperties - a model defined in OpenAPI

        :param management_api_url: The management_api_url of this IoTSpacesProperties.
        :param provisioning_state: The provisioning_state of this IoTSpacesProperties.
        :param storage_container: The storage_container of this IoTSpacesProperties.
        :param web_portal_url: The web_portal_url of this IoTSpacesProperties.
        """
        self.openapi_types = {
            'management_api_url': str,
            'provisioning_state': str,
            'storage_container': StorageContainerProperties,
            'web_portal_url': str
        }

        self.attribute_map = {
            'management_api_url': 'managementApiUrl',
            'provisioning_state': 'provisioningState',
            'storage_container': 'storageContainer',
            'web_portal_url': 'webPortalUrl'
        }

        self._management_api_url = management_api_url
        self._provisioning_state = provisioning_state
        self._storage_container = storage_container
        self._web_portal_url = web_portal_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IoTSpacesProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IoTSpacesProperties of this IoTSpacesProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def management_api_url(self):
        """Gets the management_api_url of this IoTSpacesProperties.

        The management Api endpoint.

        :return: The management_api_url of this IoTSpacesProperties.
        :rtype: str
        """
        return self._management_api_url

    @management_api_url.setter
    def management_api_url(self, management_api_url):
        """Sets the management_api_url of this IoTSpacesProperties.

        The management Api endpoint.

        :param management_api_url: The management_api_url of this IoTSpacesProperties.
        :type management_api_url: str
        """

        self._management_api_url = management_api_url

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this IoTSpacesProperties.

        The provisioning state.

        :return: The provisioning_state of this IoTSpacesProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this IoTSpacesProperties.

        The provisioning state.

        :param provisioning_state: The provisioning_state of this IoTSpacesProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Provisioning", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def storage_container(self):
        """Gets the storage_container of this IoTSpacesProperties.


        :return: The storage_container of this IoTSpacesProperties.
        :rtype: StorageContainerProperties
        """
        return self._storage_container

    @storage_container.setter
    def storage_container(self, storage_container):
        """Sets the storage_container of this IoTSpacesProperties.


        :param storage_container: The storage_container of this IoTSpacesProperties.
        :type storage_container: StorageContainerProperties
        """

        self._storage_container = storage_container

    @property
    def web_portal_url(self):
        """Gets the web_portal_url of this IoTSpacesProperties.

        The management UI endpoint.

        :return: The web_portal_url of this IoTSpacesProperties.
        :rtype: str
        """
        return self._web_portal_url

    @web_portal_url.setter
    def web_portal_url(self, web_portal_url):
        """Sets the web_portal_url of this IoTSpacesProperties.

        The management UI endpoint.

        :param web_portal_url: The web_portal_url of this IoTSpacesProperties.
        :type web_portal_url: str
        """

        self._web_portal_url = web_portal_url
