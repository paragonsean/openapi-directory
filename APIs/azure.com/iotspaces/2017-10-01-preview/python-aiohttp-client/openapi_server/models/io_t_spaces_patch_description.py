# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.io_t_spaces_properties import IoTSpacesProperties
from openapi_server import util


class IoTSpacesPatchDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, properties: IoTSpacesProperties=None, tags: Dict[str, str]=None):
        """IoTSpacesPatchDescription - a model defined in OpenAPI

        :param properties: The properties of this IoTSpacesPatchDescription.
        :param tags: The tags of this IoTSpacesPatchDescription.
        """
        self.openapi_types = {
            'properties': IoTSpacesProperties,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'properties': 'properties',
            'tags': 'tags'
        }

        self._properties = properties
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IoTSpacesPatchDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IoTSpacesPatchDescription of this IoTSpacesPatchDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def properties(self):
        """Gets the properties of this IoTSpacesPatchDescription.


        :return: The properties of this IoTSpacesPatchDescription.
        :rtype: IoTSpacesProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this IoTSpacesPatchDescription.


        :param properties: The properties of this IoTSpacesPatchDescription.
        :type properties: IoTSpacesProperties
        """

        self._properties = properties

    @property
    def tags(self):
        """Gets the tags of this IoTSpacesPatchDescription.

        Instance tags

        :return: The tags of this IoTSpacesPatchDescription.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IoTSpacesPatchDescription.

        Instance tags

        :param tags: The tags of this IoTSpacesPatchDescription.
        :type tags: Dict[str, str]
        """

        self._tags = tags
