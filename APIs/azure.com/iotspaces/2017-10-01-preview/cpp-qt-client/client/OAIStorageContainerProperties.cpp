/**
 * IoTSpacesClient
 * Use this API to manage the IoTSpaces service instances in your Azure subscription.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageContainerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageContainerProperties::OAIStorageContainerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageContainerProperties::OAIStorageContainerProperties() {
    this->initializeModel();
}

OAIStorageContainerProperties::~OAIStorageContainerProperties() {}

void OAIStorageContainerProperties::initializeModel() {

    m_connection_string_isSet = false;
    m_connection_string_isValid = false;

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;
}

void OAIStorageContainerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageContainerProperties::fromJsonObject(QJsonObject json) {

    m_connection_string_isValid = ::OpenAPI::fromJsonValue(m_connection_string, json[QString("connectionString")]);
    m_connection_string_isSet = !json[QString("connectionString")].isNull() && m_connection_string_isValid;

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;
}

QString OAIStorageContainerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageContainerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_string_isSet) {
        obj.insert(QString("connectionString"), ::OpenAPI::toJsonValue(m_connection_string));
    }
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    return obj;
}

QString OAIStorageContainerProperties::getConnectionString() const {
    return m_connection_string;
}
void OAIStorageContainerProperties::setConnectionString(const QString &connection_string) {
    m_connection_string = connection_string;
    m_connection_string_isSet = true;
}

bool OAIStorageContainerProperties::is_connection_string_Set() const{
    return m_connection_string_isSet;
}

bool OAIStorageContainerProperties::is_connection_string_Valid() const{
    return m_connection_string_isValid;
}

QString OAIStorageContainerProperties::getContainerName() const {
    return m_container_name;
}
void OAIStorageContainerProperties::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAIStorageContainerProperties::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAIStorageContainerProperties::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAIStorageContainerProperties::getResourceGroup() const {
    return m_resource_group;
}
void OAIStorageContainerProperties::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIStorageContainerProperties::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIStorageContainerProperties::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

QString OAIStorageContainerProperties::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIStorageContainerProperties::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIStorageContainerProperties::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIStorageContainerProperties::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAIStorageContainerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageContainerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
