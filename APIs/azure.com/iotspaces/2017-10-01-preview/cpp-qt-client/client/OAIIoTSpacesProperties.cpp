/**
 * IoTSpacesClient
 * Use this API to manage the IoTSpaces service instances in your Azure subscription.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIoTSpacesProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIoTSpacesProperties::OAIIoTSpacesProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIoTSpacesProperties::OAIIoTSpacesProperties() {
    this->initializeModel();
}

OAIIoTSpacesProperties::~OAIIoTSpacesProperties() {}

void OAIIoTSpacesProperties::initializeModel() {

    m_management_api_url_isSet = false;
    m_management_api_url_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_storage_container_isSet = false;
    m_storage_container_isValid = false;

    m_web_portal_url_isSet = false;
    m_web_portal_url_isValid = false;
}

void OAIIoTSpacesProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIoTSpacesProperties::fromJsonObject(QJsonObject json) {

    m_management_api_url_isValid = ::OpenAPI::fromJsonValue(m_management_api_url, json[QString("managementApiUrl")]);
    m_management_api_url_isSet = !json[QString("managementApiUrl")].isNull() && m_management_api_url_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_storage_container_isValid = ::OpenAPI::fromJsonValue(m_storage_container, json[QString("storageContainer")]);
    m_storage_container_isSet = !json[QString("storageContainer")].isNull() && m_storage_container_isValid;

    m_web_portal_url_isValid = ::OpenAPI::fromJsonValue(m_web_portal_url, json[QString("webPortalUrl")]);
    m_web_portal_url_isSet = !json[QString("webPortalUrl")].isNull() && m_web_portal_url_isValid;
}

QString OAIIoTSpacesProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIoTSpacesProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_management_api_url_isSet) {
        obj.insert(QString("managementApiUrl"), ::OpenAPI::toJsonValue(m_management_api_url));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_storage_container.isSet()) {
        obj.insert(QString("storageContainer"), ::OpenAPI::toJsonValue(m_storage_container));
    }
    if (m_web_portal_url_isSet) {
        obj.insert(QString("webPortalUrl"), ::OpenAPI::toJsonValue(m_web_portal_url));
    }
    return obj;
}

QString OAIIoTSpacesProperties::getManagementApiUrl() const {
    return m_management_api_url;
}
void OAIIoTSpacesProperties::setManagementApiUrl(const QString &management_api_url) {
    m_management_api_url = management_api_url;
    m_management_api_url_isSet = true;
}

bool OAIIoTSpacesProperties::is_management_api_url_Set() const{
    return m_management_api_url_isSet;
}

bool OAIIoTSpacesProperties::is_management_api_url_Valid() const{
    return m_management_api_url_isValid;
}

QString OAIIoTSpacesProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIIoTSpacesProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIIoTSpacesProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIIoTSpacesProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIStorageContainerProperties OAIIoTSpacesProperties::getStorageContainer() const {
    return m_storage_container;
}
void OAIIoTSpacesProperties::setStorageContainer(const OAIStorageContainerProperties &storage_container) {
    m_storage_container = storage_container;
    m_storage_container_isSet = true;
}

bool OAIIoTSpacesProperties::is_storage_container_Set() const{
    return m_storage_container_isSet;
}

bool OAIIoTSpacesProperties::is_storage_container_Valid() const{
    return m_storage_container_isValid;
}

QString OAIIoTSpacesProperties::getWebPortalUrl() const {
    return m_web_portal_url;
}
void OAIIoTSpacesProperties::setWebPortalUrl(const QString &web_portal_url) {
    m_web_portal_url = web_portal_url;
    m_web_portal_url_isSet = true;
}

bool OAIIoTSpacesProperties::is_web_portal_url_Set() const{
    return m_web_portal_url_isSet;
}

bool OAIIoTSpacesProperties::is_web_portal_url_Valid() const{
    return m_web_portal_url_isValid;
}

bool OAIIoTSpacesProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_management_api_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_portal_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIoTSpacesProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
