/**
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDelegatedProviderOfferProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDelegatedProviderOfferProperties::OAIDelegatedProviderOfferProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDelegatedProviderOfferProperties::OAIDelegatedProviderOfferProperties() {
    this->initializeModel();
}

OAIDelegatedProviderOfferProperties::~OAIDelegatedProviderOfferProperties() {}

void OAIDelegatedProviderOfferProperties::initializeModel() {

    m_accessibility_state_isSet = false;
    m_accessibility_state_isValid = false;

    m_delegated_offer_id_isSet = false;
    m_delegated_offer_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_external_reference_id_isSet = false;
    m_external_reference_id_isValid = false;

    m_subscription_count_isSet = false;
    m_subscription_count_isValid = false;
}

void OAIDelegatedProviderOfferProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDelegatedProviderOfferProperties::fromJsonObject(QJsonObject json) {

    m_accessibility_state_isValid = ::OpenAPI::fromJsonValue(m_accessibility_state, json[QString("accessibilityState")]);
    m_accessibility_state_isSet = !json[QString("accessibilityState")].isNull() && m_accessibility_state_isValid;

    m_delegated_offer_id_isValid = ::OpenAPI::fromJsonValue(m_delegated_offer_id, json[QString("delegatedOfferId")]);
    m_delegated_offer_id_isSet = !json[QString("delegatedOfferId")].isNull() && m_delegated_offer_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_external_reference_id_isValid = ::OpenAPI::fromJsonValue(m_external_reference_id, json[QString("externalReferenceId")]);
    m_external_reference_id_isSet = !json[QString("externalReferenceId")].isNull() && m_external_reference_id_isValid;

    m_subscription_count_isValid = ::OpenAPI::fromJsonValue(m_subscription_count, json[QString("subscriptionCount")]);
    m_subscription_count_isSet = !json[QString("subscriptionCount")].isNull() && m_subscription_count_isValid;
}

QString OAIDelegatedProviderOfferProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDelegatedProviderOfferProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_accessibility_state.isSet()) {
        obj.insert(QString("accessibilityState"), ::OpenAPI::toJsonValue(m_accessibility_state));
    }
    if (m_delegated_offer_id_isSet) {
        obj.insert(QString("delegatedOfferId"), ::OpenAPI::toJsonValue(m_delegated_offer_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_external_reference_id_isSet) {
        obj.insert(QString("externalReferenceId"), ::OpenAPI::toJsonValue(m_external_reference_id));
    }
    if (m_subscription_count_isSet) {
        obj.insert(QString("subscriptionCount"), ::OpenAPI::toJsonValue(m_subscription_count));
    }
    return obj;
}

OAIAccessibilityState OAIDelegatedProviderOfferProperties::getAccessibilityState() const {
    return m_accessibility_state;
}
void OAIDelegatedProviderOfferProperties::setAccessibilityState(const OAIAccessibilityState &accessibility_state) {
    m_accessibility_state = accessibility_state;
    m_accessibility_state_isSet = true;
}

bool OAIDelegatedProviderOfferProperties::is_accessibility_state_Set() const{
    return m_accessibility_state_isSet;
}

bool OAIDelegatedProviderOfferProperties::is_accessibility_state_Valid() const{
    return m_accessibility_state_isValid;
}

QString OAIDelegatedProviderOfferProperties::getDelegatedOfferId() const {
    return m_delegated_offer_id;
}
void OAIDelegatedProviderOfferProperties::setDelegatedOfferId(const QString &delegated_offer_id) {
    m_delegated_offer_id = delegated_offer_id;
    m_delegated_offer_id_isSet = true;
}

bool OAIDelegatedProviderOfferProperties::is_delegated_offer_id_Set() const{
    return m_delegated_offer_id_isSet;
}

bool OAIDelegatedProviderOfferProperties::is_delegated_offer_id_Valid() const{
    return m_delegated_offer_id_isValid;
}

QString OAIDelegatedProviderOfferProperties::getDescription() const {
    return m_description;
}
void OAIDelegatedProviderOfferProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDelegatedProviderOfferProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDelegatedProviderOfferProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDelegatedProviderOfferProperties::getDisplayName() const {
    return m_display_name;
}
void OAIDelegatedProviderOfferProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDelegatedProviderOfferProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDelegatedProviderOfferProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDelegatedProviderOfferProperties::getExternalReferenceId() const {
    return m_external_reference_id;
}
void OAIDelegatedProviderOfferProperties::setExternalReferenceId(const QString &external_reference_id) {
    m_external_reference_id = external_reference_id;
    m_external_reference_id_isSet = true;
}

bool OAIDelegatedProviderOfferProperties::is_external_reference_id_Set() const{
    return m_external_reference_id_isSet;
}

bool OAIDelegatedProviderOfferProperties::is_external_reference_id_Valid() const{
    return m_external_reference_id_isValid;
}

qint32 OAIDelegatedProviderOfferProperties::getSubscriptionCount() const {
    return m_subscription_count;
}
void OAIDelegatedProviderOfferProperties::setSubscriptionCount(const qint32 &subscription_count) {
    m_subscription_count = subscription_count;
    m_subscription_count_isSet = true;
}

bool OAIDelegatedProviderOfferProperties::is_subscription_count_Set() const{
    return m_subscription_count_isSet;
}

bool OAIDelegatedProviderOfferProperties::is_subscription_count_Valid() const{
    return m_subscription_count_isValid;
}

bool OAIDelegatedProviderOfferProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessibility_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delegated_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDelegatedProviderOfferProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
