# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_sku_capabilities import ResourceSkuCapabilities
from openapi_server.models.resource_sku_capacity import ResourceSkuCapacity
from openapi_server.models.resource_sku_costs import ResourceSkuCosts
from openapi_server.models.resource_sku_location_info import ResourceSkuLocationInfo
from openapi_server.models.resource_sku_restrictions import ResourceSkuRestrictions
from openapi_server import util


class ResourceSku(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_versions: List[str]=None, capabilities: List[ResourceSkuCapabilities]=None, capacity: ResourceSkuCapacity=None, costs: List[ResourceSkuCosts]=None, family: str=None, kind: str=None, location_info: List[ResourceSkuLocationInfo]=None, locations: List[str]=None, name: str=None, resource_type: str=None, restrictions: List[ResourceSkuRestrictions]=None, size: str=None, tier: str=None):
        """ResourceSku - a model defined in OpenAPI

        :param api_versions: The api_versions of this ResourceSku.
        :param capabilities: The capabilities of this ResourceSku.
        :param capacity: The capacity of this ResourceSku.
        :param costs: The costs of this ResourceSku.
        :param family: The family of this ResourceSku.
        :param kind: The kind of this ResourceSku.
        :param location_info: The location_info of this ResourceSku.
        :param locations: The locations of this ResourceSku.
        :param name: The name of this ResourceSku.
        :param resource_type: The resource_type of this ResourceSku.
        :param restrictions: The restrictions of this ResourceSku.
        :param size: The size of this ResourceSku.
        :param tier: The tier of this ResourceSku.
        """
        self.openapi_types = {
            'api_versions': List[str],
            'capabilities': List[ResourceSkuCapabilities],
            'capacity': ResourceSkuCapacity,
            'costs': List[ResourceSkuCosts],
            'family': str,
            'kind': str,
            'location_info': List[ResourceSkuLocationInfo],
            'locations': List[str],
            'name': str,
            'resource_type': str,
            'restrictions': List[ResourceSkuRestrictions],
            'size': str,
            'tier': str
        }

        self.attribute_map = {
            'api_versions': 'apiVersions',
            'capabilities': 'capabilities',
            'capacity': 'capacity',
            'costs': 'costs',
            'family': 'family',
            'kind': 'kind',
            'location_info': 'locationInfo',
            'locations': 'locations',
            'name': 'name',
            'resource_type': 'resourceType',
            'restrictions': 'restrictions',
            'size': 'size',
            'tier': 'tier'
        }

        self._api_versions = api_versions
        self._capabilities = capabilities
        self._capacity = capacity
        self._costs = costs
        self._family = family
        self._kind = kind
        self._location_info = location_info
        self._locations = locations
        self._name = name
        self._resource_type = resource_type
        self._restrictions = restrictions
        self._size = size
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceSku':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceSku of this ResourceSku.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_versions(self):
        """Gets the api_versions of this ResourceSku.

        The api versions that support this SKU.

        :return: The api_versions of this ResourceSku.
        :rtype: List[str]
        """
        return self._api_versions

    @api_versions.setter
    def api_versions(self, api_versions):
        """Sets the api_versions of this ResourceSku.

        The api versions that support this SKU.

        :param api_versions: The api_versions of this ResourceSku.
        :type api_versions: List[str]
        """

        self._api_versions = api_versions

    @property
    def capabilities(self):
        """Gets the capabilities of this ResourceSku.

        A name value pair to describe the capability.

        :return: The capabilities of this ResourceSku.
        :rtype: List[ResourceSkuCapabilities]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this ResourceSku.

        A name value pair to describe the capability.

        :param capabilities: The capabilities of this ResourceSku.
        :type capabilities: List[ResourceSkuCapabilities]
        """

        self._capabilities = capabilities

    @property
    def capacity(self):
        """Gets the capacity of this ResourceSku.


        :return: The capacity of this ResourceSku.
        :rtype: ResourceSkuCapacity
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this ResourceSku.


        :param capacity: The capacity of this ResourceSku.
        :type capacity: ResourceSkuCapacity
        """

        self._capacity = capacity

    @property
    def costs(self):
        """Gets the costs of this ResourceSku.

        Metadata for retrieving price info.

        :return: The costs of this ResourceSku.
        :rtype: List[ResourceSkuCosts]
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """Sets the costs of this ResourceSku.

        Metadata for retrieving price info.

        :param costs: The costs of this ResourceSku.
        :type costs: List[ResourceSkuCosts]
        """

        self._costs = costs

    @property
    def family(self):
        """Gets the family of this ResourceSku.

        The Family of this particular SKU.

        :return: The family of this ResourceSku.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this ResourceSku.

        The Family of this particular SKU.

        :param family: The family of this ResourceSku.
        :type family: str
        """

        self._family = family

    @property
    def kind(self):
        """Gets the kind of this ResourceSku.

        The Kind of resources that are supported in this SKU.

        :return: The kind of this ResourceSku.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ResourceSku.

        The Kind of resources that are supported in this SKU.

        :param kind: The kind of this ResourceSku.
        :type kind: str
        """

        self._kind = kind

    @property
    def location_info(self):
        """Gets the location_info of this ResourceSku.

        A list of locations and availability zones in those locations where the SKU is available.

        :return: The location_info of this ResourceSku.
        :rtype: List[ResourceSkuLocationInfo]
        """
        return self._location_info

    @location_info.setter
    def location_info(self, location_info):
        """Sets the location_info of this ResourceSku.

        A list of locations and availability zones in those locations where the SKU is available.

        :param location_info: The location_info of this ResourceSku.
        :type location_info: List[ResourceSkuLocationInfo]
        """

        self._location_info = location_info

    @property
    def locations(self):
        """Gets the locations of this ResourceSku.

        The set of locations that the SKU is available.

        :return: The locations of this ResourceSku.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this ResourceSku.

        The set of locations that the SKU is available.

        :param locations: The locations of this ResourceSku.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this ResourceSku.

        The name of SKU.

        :return: The name of this ResourceSku.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceSku.

        The name of SKU.

        :param name: The name of this ResourceSku.
        :type name: str
        """

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceSku.

        The type of resource the SKU applies to.

        :return: The resource_type of this ResourceSku.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceSku.

        The type of resource the SKU applies to.

        :param resource_type: The resource_type of this ResourceSku.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def restrictions(self):
        """Gets the restrictions of this ResourceSku.

        The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.

        :return: The restrictions of this ResourceSku.
        :rtype: List[ResourceSkuRestrictions]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this ResourceSku.

        The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.

        :param restrictions: The restrictions of this ResourceSku.
        :type restrictions: List[ResourceSkuRestrictions]
        """

        self._restrictions = restrictions

    @property
    def size(self):
        """Gets the size of this ResourceSku.

        The Size of the SKU.

        :return: The size of this ResourceSku.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ResourceSku.

        The Size of the SKU.

        :param size: The size of this ResourceSku.
        :type size: str
        """

        self._size = size

    @property
    def tier(self):
        """Gets the tier of this ResourceSku.

        Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**

        :return: The tier of this ResourceSku.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this ResourceSku.

        Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**

        :param tier: The tier of this ResourceSku.
        :type tier: str
        """

        self._tier = tier
