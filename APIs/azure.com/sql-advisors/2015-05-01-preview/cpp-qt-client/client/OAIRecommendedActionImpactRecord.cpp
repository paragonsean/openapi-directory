/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendedActionImpactRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendedActionImpactRecord::OAIRecommendedActionImpactRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendedActionImpactRecord::OAIRecommendedActionImpactRecord() {
    this->initializeModel();
}

OAIRecommendedActionImpactRecord::~OAIRecommendedActionImpactRecord() {}

void OAIRecommendedActionImpactRecord::initializeModel() {

    m_absolute_value_isSet = false;
    m_absolute_value_isValid = false;

    m_change_value_absolute_isSet = false;
    m_change_value_absolute_isValid = false;

    m_change_value_relative_isSet = false;
    m_change_value_relative_isValid = false;

    m_dimension_name_isSet = false;
    m_dimension_name_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIRecommendedActionImpactRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendedActionImpactRecord::fromJsonObject(QJsonObject json) {

    m_absolute_value_isValid = ::OpenAPI::fromJsonValue(m_absolute_value, json[QString("absoluteValue")]);
    m_absolute_value_isSet = !json[QString("absoluteValue")].isNull() && m_absolute_value_isValid;

    m_change_value_absolute_isValid = ::OpenAPI::fromJsonValue(m_change_value_absolute, json[QString("changeValueAbsolute")]);
    m_change_value_absolute_isSet = !json[QString("changeValueAbsolute")].isNull() && m_change_value_absolute_isValid;

    m_change_value_relative_isValid = ::OpenAPI::fromJsonValue(m_change_value_relative, json[QString("changeValueRelative")]);
    m_change_value_relative_isSet = !json[QString("changeValueRelative")].isNull() && m_change_value_relative_isValid;

    m_dimension_name_isValid = ::OpenAPI::fromJsonValue(m_dimension_name, json[QString("dimensionName")]);
    m_dimension_name_isSet = !json[QString("dimensionName")].isNull() && m_dimension_name_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIRecommendedActionImpactRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendedActionImpactRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_absolute_value_isSet) {
        obj.insert(QString("absoluteValue"), ::OpenAPI::toJsonValue(m_absolute_value));
    }
    if (m_change_value_absolute_isSet) {
        obj.insert(QString("changeValueAbsolute"), ::OpenAPI::toJsonValue(m_change_value_absolute));
    }
    if (m_change_value_relative_isSet) {
        obj.insert(QString("changeValueRelative"), ::OpenAPI::toJsonValue(m_change_value_relative));
    }
    if (m_dimension_name_isSet) {
        obj.insert(QString("dimensionName"), ::OpenAPI::toJsonValue(m_dimension_name));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

double OAIRecommendedActionImpactRecord::getAbsoluteValue() const {
    return m_absolute_value;
}
void OAIRecommendedActionImpactRecord::setAbsoluteValue(const double &absolute_value) {
    m_absolute_value = absolute_value;
    m_absolute_value_isSet = true;
}

bool OAIRecommendedActionImpactRecord::is_absolute_value_Set() const{
    return m_absolute_value_isSet;
}

bool OAIRecommendedActionImpactRecord::is_absolute_value_Valid() const{
    return m_absolute_value_isValid;
}

double OAIRecommendedActionImpactRecord::getChangeValueAbsolute() const {
    return m_change_value_absolute;
}
void OAIRecommendedActionImpactRecord::setChangeValueAbsolute(const double &change_value_absolute) {
    m_change_value_absolute = change_value_absolute;
    m_change_value_absolute_isSet = true;
}

bool OAIRecommendedActionImpactRecord::is_change_value_absolute_Set() const{
    return m_change_value_absolute_isSet;
}

bool OAIRecommendedActionImpactRecord::is_change_value_absolute_Valid() const{
    return m_change_value_absolute_isValid;
}

double OAIRecommendedActionImpactRecord::getChangeValueRelative() const {
    return m_change_value_relative;
}
void OAIRecommendedActionImpactRecord::setChangeValueRelative(const double &change_value_relative) {
    m_change_value_relative = change_value_relative;
    m_change_value_relative_isSet = true;
}

bool OAIRecommendedActionImpactRecord::is_change_value_relative_Set() const{
    return m_change_value_relative_isSet;
}

bool OAIRecommendedActionImpactRecord::is_change_value_relative_Valid() const{
    return m_change_value_relative_isValid;
}

QString OAIRecommendedActionImpactRecord::getDimensionName() const {
    return m_dimension_name;
}
void OAIRecommendedActionImpactRecord::setDimensionName(const QString &dimension_name) {
    m_dimension_name = dimension_name;
    m_dimension_name_isSet = true;
}

bool OAIRecommendedActionImpactRecord::is_dimension_name_Set() const{
    return m_dimension_name_isSet;
}

bool OAIRecommendedActionImpactRecord::is_dimension_name_Valid() const{
    return m_dimension_name_isValid;
}

QString OAIRecommendedActionImpactRecord::getUnit() const {
    return m_unit;
}
void OAIRecommendedActionImpactRecord::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIRecommendedActionImpactRecord::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIRecommendedActionImpactRecord::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIRecommendedActionImpactRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absolute_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_value_absolute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_value_relative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendedActionImpactRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
