/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendedActionErrorInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendedActionErrorInfo::OAIRecommendedActionErrorInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendedActionErrorInfo::OAIRecommendedActionErrorInfo() {
    this->initializeModel();
}

OAIRecommendedActionErrorInfo::~OAIRecommendedActionErrorInfo() {}

void OAIRecommendedActionErrorInfo::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_is_retryable_isSet = false;
    m_is_retryable_isValid = false;
}

void OAIRecommendedActionErrorInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendedActionErrorInfo::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_is_retryable_isValid = ::OpenAPI::fromJsonValue(m_is_retryable, json[QString("isRetryable")]);
    m_is_retryable_isSet = !json[QString("isRetryable")].isNull() && m_is_retryable_isValid;
}

QString OAIRecommendedActionErrorInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendedActionErrorInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_is_retryable_isSet) {
        obj.insert(QString("isRetryable"), ::OpenAPI::toJsonValue(m_is_retryable));
    }
    return obj;
}

QString OAIRecommendedActionErrorInfo::getErrorCode() const {
    return m_error_code;
}
void OAIRecommendedActionErrorInfo::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIRecommendedActionErrorInfo::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIRecommendedActionErrorInfo::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIRecommendedActionErrorInfo::getIsRetryable() const {
    return m_is_retryable;
}
void OAIRecommendedActionErrorInfo::setIsRetryable(const QString &is_retryable) {
    m_is_retryable = is_retryable;
    m_is_retryable_isSet = true;
}

bool OAIRecommendedActionErrorInfo::is_is_retryable_Set() const{
    return m_is_retryable_isSet;
}

bool OAIRecommendedActionErrorInfo::is_is_retryable_Valid() const{
    return m_is_retryable_isValid;
}

bool OAIRecommendedActionErrorInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_retryable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendedActionErrorInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
