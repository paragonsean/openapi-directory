/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendedActionMetricInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendedActionMetricInfo::OAIRecommendedActionMetricInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendedActionMetricInfo::OAIRecommendedActionMetricInfo() {
    this->initializeModel();
}

OAIRecommendedActionMetricInfo::~OAIRecommendedActionMetricInfo() {}

void OAIRecommendedActionMetricInfo::initializeModel() {

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_time_grain_isSet = false;
    m_time_grain_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIRecommendedActionMetricInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendedActionMetricInfo::fromJsonObject(QJsonObject json) {

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("metricName")]);
    m_metric_name_isSet = !json[QString("metricName")].isNull() && m_metric_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_time_grain_isValid = ::OpenAPI::fromJsonValue(m_time_grain, json[QString("timeGrain")]);
    m_time_grain_isSet = !json[QString("timeGrain")].isNull() && m_time_grain_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIRecommendedActionMetricInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendedActionMetricInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_name_isSet) {
        obj.insert(QString("metricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_time_grain_isSet) {
        obj.insert(QString("timeGrain"), ::OpenAPI::toJsonValue(m_time_grain));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIRecommendedActionMetricInfo::getMetricName() const {
    return m_metric_name;
}
void OAIRecommendedActionMetricInfo::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIRecommendedActionMetricInfo::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIRecommendedActionMetricInfo::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QDateTime OAIRecommendedActionMetricInfo::getStartTime() const {
    return m_start_time;
}
void OAIRecommendedActionMetricInfo::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRecommendedActionMetricInfo::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRecommendedActionMetricInfo::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIRecommendedActionMetricInfo::getTimeGrain() const {
    return m_time_grain;
}
void OAIRecommendedActionMetricInfo::setTimeGrain(const QString &time_grain) {
    m_time_grain = time_grain;
    m_time_grain_isSet = true;
}

bool OAIRecommendedActionMetricInfo::is_time_grain_Set() const{
    return m_time_grain_isSet;
}

bool OAIRecommendedActionMetricInfo::is_time_grain_Valid() const{
    return m_time_grain_isValid;
}

QString OAIRecommendedActionMetricInfo::getUnit() const {
    return m_unit;
}
void OAIRecommendedActionMetricInfo::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIRecommendedActionMetricInfo::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIRecommendedActionMetricInfo::is_unit_Valid() const{
    return m_unit_isValid;
}

double OAIRecommendedActionMetricInfo::getValue() const {
    return m_value;
}
void OAIRecommendedActionMetricInfo::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIRecommendedActionMetricInfo::is_value_Set() const{
    return m_value_isSet;
}

bool OAIRecommendedActionMetricInfo::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIRecommendedActionMetricInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_grain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendedActionMetricInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
