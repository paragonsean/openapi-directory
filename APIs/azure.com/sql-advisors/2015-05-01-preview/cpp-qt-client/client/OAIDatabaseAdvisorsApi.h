/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDatabaseAdvisorsApi_H
#define OAI_OAIDatabaseAdvisorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdvisor.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDatabaseAdvisorsApi : public QObject {
    Q_OBJECT

public:
    OAIDatabaseAdvisorsApi(const int timeOut = 0);
    ~OAIDatabaseAdvisorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  advisor_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAdvisorsGet(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &advisor_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAdvisorsListByDatabase(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  advisor_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAdvisor [required]
    */
    virtual void databaseAdvisorsUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &advisor_name, const QString &subscription_id, const QString &api_version, const OAIAdvisor &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void databaseAdvisorsGetCallback(OAIHttpRequestWorker *worker);
    void databaseAdvisorsListByDatabaseCallback(OAIHttpRequestWorker *worker);
    void databaseAdvisorsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void databaseAdvisorsGetSignal(OAIAdvisor summary);
    void databaseAdvisorsListByDatabaseSignal(QList<OAIAdvisor> summary);
    void databaseAdvisorsUpdateSignal(OAIAdvisor summary);


    void databaseAdvisorsGetSignalFull(OAIHttpRequestWorker *worker, OAIAdvisor summary);
    void databaseAdvisorsListByDatabaseSignalFull(OAIHttpRequestWorker *worker, QList<OAIAdvisor> summary);
    void databaseAdvisorsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAdvisor summary);

    Q_DECL_DEPRECATED_X("Use databaseAdvisorsGetSignalError() instead")
    void databaseAdvisorsGetSignalE(OAIAdvisor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAdvisorsGetSignalError(OAIAdvisor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAdvisorsListByDatabaseSignalError() instead")
    void databaseAdvisorsListByDatabaseSignalE(QList<OAIAdvisor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAdvisorsListByDatabaseSignalError(QList<OAIAdvisor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAdvisorsUpdateSignalError() instead")
    void databaseAdvisorsUpdateSignalE(OAIAdvisor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAdvisorsUpdateSignalError(OAIAdvisor summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use databaseAdvisorsGetSignalErrorFull() instead")
    void databaseAdvisorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAdvisorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAdvisorsListByDatabaseSignalErrorFull() instead")
    void databaseAdvisorsListByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAdvisorsListByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAdvisorsUpdateSignalErrorFull() instead")
    void databaseAdvisorsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAdvisorsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
