/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServerAdvisorsApi_H
#define OAI_OAIServerAdvisorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdvisor.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServerAdvisorsApi : public QObject {
    Q_OBJECT

public:
    OAIServerAdvisorsApi(const int timeOut = 0);
    ~OAIServerAdvisorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  advisor_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverAdvisorsGet(const QString &resource_group_name, const QString &server_name, const QString &advisor_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverAdvisorsListByServer(const QString &resource_group_name, const QString &server_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  advisor_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAdvisor [required]
    */
    virtual void serverAdvisorsUpdate(const QString &resource_group_name, const QString &server_name, const QString &advisor_name, const QString &subscription_id, const QString &api_version, const OAIAdvisor &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serverAdvisorsGetCallback(OAIHttpRequestWorker *worker);
    void serverAdvisorsListByServerCallback(OAIHttpRequestWorker *worker);
    void serverAdvisorsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serverAdvisorsGetSignal(OAIAdvisor summary);
    void serverAdvisorsListByServerSignal(QList<OAIAdvisor> summary);
    void serverAdvisorsUpdateSignal(OAIAdvisor summary);


    void serverAdvisorsGetSignalFull(OAIHttpRequestWorker *worker, OAIAdvisor summary);
    void serverAdvisorsListByServerSignalFull(OAIHttpRequestWorker *worker, QList<OAIAdvisor> summary);
    void serverAdvisorsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAdvisor summary);

    Q_DECL_DEPRECATED_X("Use serverAdvisorsGetSignalError() instead")
    void serverAdvisorsGetSignalE(OAIAdvisor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdvisorsGetSignalError(OAIAdvisor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverAdvisorsListByServerSignalError() instead")
    void serverAdvisorsListByServerSignalE(QList<OAIAdvisor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdvisorsListByServerSignalError(QList<OAIAdvisor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverAdvisorsUpdateSignalError() instead")
    void serverAdvisorsUpdateSignalE(OAIAdvisor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdvisorsUpdateSignalError(OAIAdvisor summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serverAdvisorsGetSignalErrorFull() instead")
    void serverAdvisorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdvisorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverAdvisorsListByServerSignalErrorFull() instead")
    void serverAdvisorsListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdvisorsListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverAdvisorsUpdateSignalErrorFull() instead")
    void serverAdvisorsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdvisorsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
