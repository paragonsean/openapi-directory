/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendedActionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendedActionProperties::OAIRecommendedActionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendedActionProperties::OAIRecommendedActionProperties() {
    this->initializeModel();
}

OAIRecommendedActionProperties::~OAIRecommendedActionProperties() {}

void OAIRecommendedActionProperties::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_error_details_isSet = false;
    m_error_details_isValid = false;

    m_estimated_impact_isSet = false;
    m_estimated_impact_isValid = false;

    m_execute_action_duration_isSet = false;
    m_execute_action_duration_isValid = false;

    m_execute_action_initiated_by_isSet = false;
    m_execute_action_initiated_by_isValid = false;

    m_execute_action_initiated_time_isSet = false;
    m_execute_action_initiated_time_isValid = false;

    m_execute_action_start_time_isSet = false;
    m_execute_action_start_time_isValid = false;

    m_implementation_details_isSet = false;
    m_implementation_details_isValid = false;

    m_is_archived_action_isSet = false;
    m_is_archived_action_isValid = false;

    m_is_executable_action_isSet = false;
    m_is_executable_action_isValid = false;

    m_is_revertable_action_isSet = false;
    m_is_revertable_action_isValid = false;

    m_last_refresh_isSet = false;
    m_last_refresh_isValid = false;

    m_linked_objects_isSet = false;
    m_linked_objects_isValid = false;

    m_observed_impact_isSet = false;
    m_observed_impact_isValid = false;

    m_recommendation_reason_isSet = false;
    m_recommendation_reason_isValid = false;

    m_revert_action_duration_isSet = false;
    m_revert_action_duration_isValid = false;

    m_revert_action_initiated_by_isSet = false;
    m_revert_action_initiated_by_isValid = false;

    m_revert_action_initiated_time_isSet = false;
    m_revert_action_initiated_time_isValid = false;

    m_revert_action_start_time_isSet = false;
    m_revert_action_start_time_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_time_series_isSet = false;
    m_time_series_isValid = false;

    m_valid_since_isSet = false;
    m_valid_since_isValid = false;
}

void OAIRecommendedActionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendedActionProperties::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_error_details_isValid = ::OpenAPI::fromJsonValue(m_error_details, json[QString("errorDetails")]);
    m_error_details_isSet = !json[QString("errorDetails")].isNull() && m_error_details_isValid;

    m_estimated_impact_isValid = ::OpenAPI::fromJsonValue(m_estimated_impact, json[QString("estimatedImpact")]);
    m_estimated_impact_isSet = !json[QString("estimatedImpact")].isNull() && m_estimated_impact_isValid;

    m_execute_action_duration_isValid = ::OpenAPI::fromJsonValue(m_execute_action_duration, json[QString("executeActionDuration")]);
    m_execute_action_duration_isSet = !json[QString("executeActionDuration")].isNull() && m_execute_action_duration_isValid;

    m_execute_action_initiated_by_isValid = ::OpenAPI::fromJsonValue(m_execute_action_initiated_by, json[QString("executeActionInitiatedBy")]);
    m_execute_action_initiated_by_isSet = !json[QString("executeActionInitiatedBy")].isNull() && m_execute_action_initiated_by_isValid;

    m_execute_action_initiated_time_isValid = ::OpenAPI::fromJsonValue(m_execute_action_initiated_time, json[QString("executeActionInitiatedTime")]);
    m_execute_action_initiated_time_isSet = !json[QString("executeActionInitiatedTime")].isNull() && m_execute_action_initiated_time_isValid;

    m_execute_action_start_time_isValid = ::OpenAPI::fromJsonValue(m_execute_action_start_time, json[QString("executeActionStartTime")]);
    m_execute_action_start_time_isSet = !json[QString("executeActionStartTime")].isNull() && m_execute_action_start_time_isValid;

    m_implementation_details_isValid = ::OpenAPI::fromJsonValue(m_implementation_details, json[QString("implementationDetails")]);
    m_implementation_details_isSet = !json[QString("implementationDetails")].isNull() && m_implementation_details_isValid;

    m_is_archived_action_isValid = ::OpenAPI::fromJsonValue(m_is_archived_action, json[QString("isArchivedAction")]);
    m_is_archived_action_isSet = !json[QString("isArchivedAction")].isNull() && m_is_archived_action_isValid;

    m_is_executable_action_isValid = ::OpenAPI::fromJsonValue(m_is_executable_action, json[QString("isExecutableAction")]);
    m_is_executable_action_isSet = !json[QString("isExecutableAction")].isNull() && m_is_executable_action_isValid;

    m_is_revertable_action_isValid = ::OpenAPI::fromJsonValue(m_is_revertable_action, json[QString("isRevertableAction")]);
    m_is_revertable_action_isSet = !json[QString("isRevertableAction")].isNull() && m_is_revertable_action_isValid;

    m_last_refresh_isValid = ::OpenAPI::fromJsonValue(m_last_refresh, json[QString("lastRefresh")]);
    m_last_refresh_isSet = !json[QString("lastRefresh")].isNull() && m_last_refresh_isValid;

    m_linked_objects_isValid = ::OpenAPI::fromJsonValue(m_linked_objects, json[QString("linkedObjects")]);
    m_linked_objects_isSet = !json[QString("linkedObjects")].isNull() && m_linked_objects_isValid;

    m_observed_impact_isValid = ::OpenAPI::fromJsonValue(m_observed_impact, json[QString("observedImpact")]);
    m_observed_impact_isSet = !json[QString("observedImpact")].isNull() && m_observed_impact_isValid;

    m_recommendation_reason_isValid = ::OpenAPI::fromJsonValue(m_recommendation_reason, json[QString("recommendationReason")]);
    m_recommendation_reason_isSet = !json[QString("recommendationReason")].isNull() && m_recommendation_reason_isValid;

    m_revert_action_duration_isValid = ::OpenAPI::fromJsonValue(m_revert_action_duration, json[QString("revertActionDuration")]);
    m_revert_action_duration_isSet = !json[QString("revertActionDuration")].isNull() && m_revert_action_duration_isValid;

    m_revert_action_initiated_by_isValid = ::OpenAPI::fromJsonValue(m_revert_action_initiated_by, json[QString("revertActionInitiatedBy")]);
    m_revert_action_initiated_by_isSet = !json[QString("revertActionInitiatedBy")].isNull() && m_revert_action_initiated_by_isValid;

    m_revert_action_initiated_time_isValid = ::OpenAPI::fromJsonValue(m_revert_action_initiated_time, json[QString("revertActionInitiatedTime")]);
    m_revert_action_initiated_time_isSet = !json[QString("revertActionInitiatedTime")].isNull() && m_revert_action_initiated_time_isValid;

    m_revert_action_start_time_isValid = ::OpenAPI::fromJsonValue(m_revert_action_start_time, json[QString("revertActionStartTime")]);
    m_revert_action_start_time_isSet = !json[QString("revertActionStartTime")].isNull() && m_revert_action_start_time_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_time_series_isValid = ::OpenAPI::fromJsonValue(m_time_series, json[QString("timeSeries")]);
    m_time_series_isSet = !json[QString("timeSeries")].isNull() && m_time_series_isValid;

    m_valid_since_isValid = ::OpenAPI::fromJsonValue(m_valid_since, json[QString("validSince")]);
    m_valid_since_isSet = !json[QString("validSince")].isNull() && m_valid_since_isValid;
}

QString OAIRecommendedActionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendedActionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_error_details.isSet()) {
        obj.insert(QString("errorDetails"), ::OpenAPI::toJsonValue(m_error_details));
    }
    if (m_estimated_impact.size() > 0) {
        obj.insert(QString("estimatedImpact"), ::OpenAPI::toJsonValue(m_estimated_impact));
    }
    if (m_execute_action_duration_isSet) {
        obj.insert(QString("executeActionDuration"), ::OpenAPI::toJsonValue(m_execute_action_duration));
    }
    if (m_execute_action_initiated_by_isSet) {
        obj.insert(QString("executeActionInitiatedBy"), ::OpenAPI::toJsonValue(m_execute_action_initiated_by));
    }
    if (m_execute_action_initiated_time_isSet) {
        obj.insert(QString("executeActionInitiatedTime"), ::OpenAPI::toJsonValue(m_execute_action_initiated_time));
    }
    if (m_execute_action_start_time_isSet) {
        obj.insert(QString("executeActionStartTime"), ::OpenAPI::toJsonValue(m_execute_action_start_time));
    }
    if (m_implementation_details.isSet()) {
        obj.insert(QString("implementationDetails"), ::OpenAPI::toJsonValue(m_implementation_details));
    }
    if (m_is_archived_action_isSet) {
        obj.insert(QString("isArchivedAction"), ::OpenAPI::toJsonValue(m_is_archived_action));
    }
    if (m_is_executable_action_isSet) {
        obj.insert(QString("isExecutableAction"), ::OpenAPI::toJsonValue(m_is_executable_action));
    }
    if (m_is_revertable_action_isSet) {
        obj.insert(QString("isRevertableAction"), ::OpenAPI::toJsonValue(m_is_revertable_action));
    }
    if (m_last_refresh_isSet) {
        obj.insert(QString("lastRefresh"), ::OpenAPI::toJsonValue(m_last_refresh));
    }
    if (m_linked_objects.size() > 0) {
        obj.insert(QString("linkedObjects"), ::OpenAPI::toJsonValue(m_linked_objects));
    }
    if (m_observed_impact.size() > 0) {
        obj.insert(QString("observedImpact"), ::OpenAPI::toJsonValue(m_observed_impact));
    }
    if (m_recommendation_reason_isSet) {
        obj.insert(QString("recommendationReason"), ::OpenAPI::toJsonValue(m_recommendation_reason));
    }
    if (m_revert_action_duration_isSet) {
        obj.insert(QString("revertActionDuration"), ::OpenAPI::toJsonValue(m_revert_action_duration));
    }
    if (m_revert_action_initiated_by_isSet) {
        obj.insert(QString("revertActionInitiatedBy"), ::OpenAPI::toJsonValue(m_revert_action_initiated_by));
    }
    if (m_revert_action_initiated_time_isSet) {
        obj.insert(QString("revertActionInitiatedTime"), ::OpenAPI::toJsonValue(m_revert_action_initiated_time));
    }
    if (m_revert_action_start_time_isSet) {
        obj.insert(QString("revertActionStartTime"), ::OpenAPI::toJsonValue(m_revert_action_start_time));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_time_series.size() > 0) {
        obj.insert(QString("timeSeries"), ::OpenAPI::toJsonValue(m_time_series));
    }
    if (m_valid_since_isSet) {
        obj.insert(QString("validSince"), ::OpenAPI::toJsonValue(m_valid_since));
    }
    return obj;
}

QMap<QString, OAIObject> OAIRecommendedActionProperties::getDetails() const {
    return m_details;
}
void OAIRecommendedActionProperties::setDetails(const QMap<QString, OAIObject> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIRecommendedActionProperties::is_details_Set() const{
    return m_details_isSet;
}

bool OAIRecommendedActionProperties::is_details_Valid() const{
    return m_details_isValid;
}

OAIRecommendedActionErrorInfo OAIRecommendedActionProperties::getErrorDetails() const {
    return m_error_details;
}
void OAIRecommendedActionProperties::setErrorDetails(const OAIRecommendedActionErrorInfo &error_details) {
    m_error_details = error_details;
    m_error_details_isSet = true;
}

bool OAIRecommendedActionProperties::is_error_details_Set() const{
    return m_error_details_isSet;
}

bool OAIRecommendedActionProperties::is_error_details_Valid() const{
    return m_error_details_isValid;
}

QList<OAIRecommendedActionImpactRecord> OAIRecommendedActionProperties::getEstimatedImpact() const {
    return m_estimated_impact;
}
void OAIRecommendedActionProperties::setEstimatedImpact(const QList<OAIRecommendedActionImpactRecord> &estimated_impact) {
    m_estimated_impact = estimated_impact;
    m_estimated_impact_isSet = true;
}

bool OAIRecommendedActionProperties::is_estimated_impact_Set() const{
    return m_estimated_impact_isSet;
}

bool OAIRecommendedActionProperties::is_estimated_impact_Valid() const{
    return m_estimated_impact_isValid;
}

QString OAIRecommendedActionProperties::getExecuteActionDuration() const {
    return m_execute_action_duration;
}
void OAIRecommendedActionProperties::setExecuteActionDuration(const QString &execute_action_duration) {
    m_execute_action_duration = execute_action_duration;
    m_execute_action_duration_isSet = true;
}

bool OAIRecommendedActionProperties::is_execute_action_duration_Set() const{
    return m_execute_action_duration_isSet;
}

bool OAIRecommendedActionProperties::is_execute_action_duration_Valid() const{
    return m_execute_action_duration_isValid;
}

QString OAIRecommendedActionProperties::getExecuteActionInitiatedBy() const {
    return m_execute_action_initiated_by;
}
void OAIRecommendedActionProperties::setExecuteActionInitiatedBy(const QString &execute_action_initiated_by) {
    m_execute_action_initiated_by = execute_action_initiated_by;
    m_execute_action_initiated_by_isSet = true;
}

bool OAIRecommendedActionProperties::is_execute_action_initiated_by_Set() const{
    return m_execute_action_initiated_by_isSet;
}

bool OAIRecommendedActionProperties::is_execute_action_initiated_by_Valid() const{
    return m_execute_action_initiated_by_isValid;
}

QDateTime OAIRecommendedActionProperties::getExecuteActionInitiatedTime() const {
    return m_execute_action_initiated_time;
}
void OAIRecommendedActionProperties::setExecuteActionInitiatedTime(const QDateTime &execute_action_initiated_time) {
    m_execute_action_initiated_time = execute_action_initiated_time;
    m_execute_action_initiated_time_isSet = true;
}

bool OAIRecommendedActionProperties::is_execute_action_initiated_time_Set() const{
    return m_execute_action_initiated_time_isSet;
}

bool OAIRecommendedActionProperties::is_execute_action_initiated_time_Valid() const{
    return m_execute_action_initiated_time_isValid;
}

QDateTime OAIRecommendedActionProperties::getExecuteActionStartTime() const {
    return m_execute_action_start_time;
}
void OAIRecommendedActionProperties::setExecuteActionStartTime(const QDateTime &execute_action_start_time) {
    m_execute_action_start_time = execute_action_start_time;
    m_execute_action_start_time_isSet = true;
}

bool OAIRecommendedActionProperties::is_execute_action_start_time_Set() const{
    return m_execute_action_start_time_isSet;
}

bool OAIRecommendedActionProperties::is_execute_action_start_time_Valid() const{
    return m_execute_action_start_time_isValid;
}

OAIRecommendedActionImplementationInfo OAIRecommendedActionProperties::getImplementationDetails() const {
    return m_implementation_details;
}
void OAIRecommendedActionProperties::setImplementationDetails(const OAIRecommendedActionImplementationInfo &implementation_details) {
    m_implementation_details = implementation_details;
    m_implementation_details_isSet = true;
}

bool OAIRecommendedActionProperties::is_implementation_details_Set() const{
    return m_implementation_details_isSet;
}

bool OAIRecommendedActionProperties::is_implementation_details_Valid() const{
    return m_implementation_details_isValid;
}

bool OAIRecommendedActionProperties::isIsArchivedAction() const {
    return m_is_archived_action;
}
void OAIRecommendedActionProperties::setIsArchivedAction(const bool &is_archived_action) {
    m_is_archived_action = is_archived_action;
    m_is_archived_action_isSet = true;
}

bool OAIRecommendedActionProperties::is_is_archived_action_Set() const{
    return m_is_archived_action_isSet;
}

bool OAIRecommendedActionProperties::is_is_archived_action_Valid() const{
    return m_is_archived_action_isValid;
}

bool OAIRecommendedActionProperties::isIsExecutableAction() const {
    return m_is_executable_action;
}
void OAIRecommendedActionProperties::setIsExecutableAction(const bool &is_executable_action) {
    m_is_executable_action = is_executable_action;
    m_is_executable_action_isSet = true;
}

bool OAIRecommendedActionProperties::is_is_executable_action_Set() const{
    return m_is_executable_action_isSet;
}

bool OAIRecommendedActionProperties::is_is_executable_action_Valid() const{
    return m_is_executable_action_isValid;
}

bool OAIRecommendedActionProperties::isIsRevertableAction() const {
    return m_is_revertable_action;
}
void OAIRecommendedActionProperties::setIsRevertableAction(const bool &is_revertable_action) {
    m_is_revertable_action = is_revertable_action;
    m_is_revertable_action_isSet = true;
}

bool OAIRecommendedActionProperties::is_is_revertable_action_Set() const{
    return m_is_revertable_action_isSet;
}

bool OAIRecommendedActionProperties::is_is_revertable_action_Valid() const{
    return m_is_revertable_action_isValid;
}

QDateTime OAIRecommendedActionProperties::getLastRefresh() const {
    return m_last_refresh;
}
void OAIRecommendedActionProperties::setLastRefresh(const QDateTime &last_refresh) {
    m_last_refresh = last_refresh;
    m_last_refresh_isSet = true;
}

bool OAIRecommendedActionProperties::is_last_refresh_Set() const{
    return m_last_refresh_isSet;
}

bool OAIRecommendedActionProperties::is_last_refresh_Valid() const{
    return m_last_refresh_isValid;
}

QList<QString> OAIRecommendedActionProperties::getLinkedObjects() const {
    return m_linked_objects;
}
void OAIRecommendedActionProperties::setLinkedObjects(const QList<QString> &linked_objects) {
    m_linked_objects = linked_objects;
    m_linked_objects_isSet = true;
}

bool OAIRecommendedActionProperties::is_linked_objects_Set() const{
    return m_linked_objects_isSet;
}

bool OAIRecommendedActionProperties::is_linked_objects_Valid() const{
    return m_linked_objects_isValid;
}

QList<OAIRecommendedActionImpactRecord> OAIRecommendedActionProperties::getObservedImpact() const {
    return m_observed_impact;
}
void OAIRecommendedActionProperties::setObservedImpact(const QList<OAIRecommendedActionImpactRecord> &observed_impact) {
    m_observed_impact = observed_impact;
    m_observed_impact_isSet = true;
}

bool OAIRecommendedActionProperties::is_observed_impact_Set() const{
    return m_observed_impact_isSet;
}

bool OAIRecommendedActionProperties::is_observed_impact_Valid() const{
    return m_observed_impact_isValid;
}

QString OAIRecommendedActionProperties::getRecommendationReason() const {
    return m_recommendation_reason;
}
void OAIRecommendedActionProperties::setRecommendationReason(const QString &recommendation_reason) {
    m_recommendation_reason = recommendation_reason;
    m_recommendation_reason_isSet = true;
}

bool OAIRecommendedActionProperties::is_recommendation_reason_Set() const{
    return m_recommendation_reason_isSet;
}

bool OAIRecommendedActionProperties::is_recommendation_reason_Valid() const{
    return m_recommendation_reason_isValid;
}

QString OAIRecommendedActionProperties::getRevertActionDuration() const {
    return m_revert_action_duration;
}
void OAIRecommendedActionProperties::setRevertActionDuration(const QString &revert_action_duration) {
    m_revert_action_duration = revert_action_duration;
    m_revert_action_duration_isSet = true;
}

bool OAIRecommendedActionProperties::is_revert_action_duration_Set() const{
    return m_revert_action_duration_isSet;
}

bool OAIRecommendedActionProperties::is_revert_action_duration_Valid() const{
    return m_revert_action_duration_isValid;
}

QString OAIRecommendedActionProperties::getRevertActionInitiatedBy() const {
    return m_revert_action_initiated_by;
}
void OAIRecommendedActionProperties::setRevertActionInitiatedBy(const QString &revert_action_initiated_by) {
    m_revert_action_initiated_by = revert_action_initiated_by;
    m_revert_action_initiated_by_isSet = true;
}

bool OAIRecommendedActionProperties::is_revert_action_initiated_by_Set() const{
    return m_revert_action_initiated_by_isSet;
}

bool OAIRecommendedActionProperties::is_revert_action_initiated_by_Valid() const{
    return m_revert_action_initiated_by_isValid;
}

QDateTime OAIRecommendedActionProperties::getRevertActionInitiatedTime() const {
    return m_revert_action_initiated_time;
}
void OAIRecommendedActionProperties::setRevertActionInitiatedTime(const QDateTime &revert_action_initiated_time) {
    m_revert_action_initiated_time = revert_action_initiated_time;
    m_revert_action_initiated_time_isSet = true;
}

bool OAIRecommendedActionProperties::is_revert_action_initiated_time_Set() const{
    return m_revert_action_initiated_time_isSet;
}

bool OAIRecommendedActionProperties::is_revert_action_initiated_time_Valid() const{
    return m_revert_action_initiated_time_isValid;
}

QDateTime OAIRecommendedActionProperties::getRevertActionStartTime() const {
    return m_revert_action_start_time;
}
void OAIRecommendedActionProperties::setRevertActionStartTime(const QDateTime &revert_action_start_time) {
    m_revert_action_start_time = revert_action_start_time;
    m_revert_action_start_time_isSet = true;
}

bool OAIRecommendedActionProperties::is_revert_action_start_time_Set() const{
    return m_revert_action_start_time_isSet;
}

bool OAIRecommendedActionProperties::is_revert_action_start_time_Valid() const{
    return m_revert_action_start_time_isValid;
}

qint32 OAIRecommendedActionProperties::getScore() const {
    return m_score;
}
void OAIRecommendedActionProperties::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIRecommendedActionProperties::is_score_Set() const{
    return m_score_isSet;
}

bool OAIRecommendedActionProperties::is_score_Valid() const{
    return m_score_isValid;
}

OAIRecommendedActionStateInfo OAIRecommendedActionProperties::getState() const {
    return m_state;
}
void OAIRecommendedActionProperties::setState(const OAIRecommendedActionStateInfo &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRecommendedActionProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRecommendedActionProperties::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIRecommendedActionMetricInfo> OAIRecommendedActionProperties::getTimeSeries() const {
    return m_time_series;
}
void OAIRecommendedActionProperties::setTimeSeries(const QList<OAIRecommendedActionMetricInfo> &time_series) {
    m_time_series = time_series;
    m_time_series_isSet = true;
}

bool OAIRecommendedActionProperties::is_time_series_Set() const{
    return m_time_series_isSet;
}

bool OAIRecommendedActionProperties::is_time_series_Valid() const{
    return m_time_series_isValid;
}

QDateTime OAIRecommendedActionProperties::getValidSince() const {
    return m_valid_since;
}
void OAIRecommendedActionProperties::setValidSince(const QDateTime &valid_since) {
    m_valid_since = valid_since;
    m_valid_since_isSet = true;
}

bool OAIRecommendedActionProperties::is_valid_since_Set() const{
    return m_valid_since_isSet;
}

bool OAIRecommendedActionProperties::is_valid_since_Valid() const{
    return m_valid_since_isValid;
}

bool OAIRecommendedActionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_impact.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_execute_action_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execute_action_initiated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execute_action_initiated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execute_action_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implementation_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archived_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_executable_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_revertable_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_refresh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_impact.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revert_action_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revert_action_initiated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revert_action_initiated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revert_action_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_since_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendedActionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_isValid && true;
}

} // namespace OpenAPI
