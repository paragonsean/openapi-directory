/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendedActionImplementationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendedActionImplementationInfo::OAIRecommendedActionImplementationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendedActionImplementationInfo::OAIRecommendedActionImplementationInfo() {
    this->initializeModel();
}

OAIRecommendedActionImplementationInfo::~OAIRecommendedActionImplementationInfo() {}

void OAIRecommendedActionImplementationInfo::initializeModel() {

    m_method_isSet = false;
    m_method_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;
}

void OAIRecommendedActionImplementationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendedActionImplementationInfo::fromJsonObject(QJsonObject json) {

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;
}

QString OAIRecommendedActionImplementationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendedActionImplementationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    return obj;
}

QString OAIRecommendedActionImplementationInfo::getMethod() const {
    return m_method;
}
void OAIRecommendedActionImplementationInfo::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIRecommendedActionImplementationInfo::is_method_Set() const{
    return m_method_isSet;
}

bool OAIRecommendedActionImplementationInfo::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIRecommendedActionImplementationInfo::getScript() const {
    return m_script;
}
void OAIRecommendedActionImplementationInfo::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIRecommendedActionImplementationInfo::is_script_Set() const{
    return m_script_isSet;
}

bool OAIRecommendedActionImplementationInfo::is_script_Valid() const{
    return m_script_isValid;
}

bool OAIRecommendedActionImplementationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendedActionImplementationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
