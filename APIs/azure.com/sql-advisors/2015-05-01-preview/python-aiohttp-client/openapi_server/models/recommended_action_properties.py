# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommended_action_error_info import RecommendedActionErrorInfo
from openapi_server.models.recommended_action_impact_record import RecommendedActionImpactRecord
from openapi_server.models.recommended_action_implementation_info import RecommendedActionImplementationInfo
from openapi_server.models.recommended_action_metric_info import RecommendedActionMetricInfo
from openapi_server.models.recommended_action_state_info import RecommendedActionStateInfo
from openapi_server import util


class RecommendedActionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: Dict[str, object]=None, error_details: RecommendedActionErrorInfo=None, estimated_impact: List[RecommendedActionImpactRecord]=None, execute_action_duration: str=None, execute_action_initiated_by: str=None, execute_action_initiated_time: datetime=None, execute_action_start_time: datetime=None, implementation_details: RecommendedActionImplementationInfo=None, is_archived_action: bool=None, is_executable_action: bool=None, is_revertable_action: bool=None, last_refresh: datetime=None, linked_objects: List[str]=None, observed_impact: List[RecommendedActionImpactRecord]=None, recommendation_reason: str=None, revert_action_duration: str=None, revert_action_initiated_by: str=None, revert_action_initiated_time: datetime=None, revert_action_start_time: datetime=None, score: int=None, state: RecommendedActionStateInfo=None, time_series: List[RecommendedActionMetricInfo]=None, valid_since: datetime=None):
        """RecommendedActionProperties - a model defined in OpenAPI

        :param details: The details of this RecommendedActionProperties.
        :param error_details: The error_details of this RecommendedActionProperties.
        :param estimated_impact: The estimated_impact of this RecommendedActionProperties.
        :param execute_action_duration: The execute_action_duration of this RecommendedActionProperties.
        :param execute_action_initiated_by: The execute_action_initiated_by of this RecommendedActionProperties.
        :param execute_action_initiated_time: The execute_action_initiated_time of this RecommendedActionProperties.
        :param execute_action_start_time: The execute_action_start_time of this RecommendedActionProperties.
        :param implementation_details: The implementation_details of this RecommendedActionProperties.
        :param is_archived_action: The is_archived_action of this RecommendedActionProperties.
        :param is_executable_action: The is_executable_action of this RecommendedActionProperties.
        :param is_revertable_action: The is_revertable_action of this RecommendedActionProperties.
        :param last_refresh: The last_refresh of this RecommendedActionProperties.
        :param linked_objects: The linked_objects of this RecommendedActionProperties.
        :param observed_impact: The observed_impact of this RecommendedActionProperties.
        :param recommendation_reason: The recommendation_reason of this RecommendedActionProperties.
        :param revert_action_duration: The revert_action_duration of this RecommendedActionProperties.
        :param revert_action_initiated_by: The revert_action_initiated_by of this RecommendedActionProperties.
        :param revert_action_initiated_time: The revert_action_initiated_time of this RecommendedActionProperties.
        :param revert_action_start_time: The revert_action_start_time of this RecommendedActionProperties.
        :param score: The score of this RecommendedActionProperties.
        :param state: The state of this RecommendedActionProperties.
        :param time_series: The time_series of this RecommendedActionProperties.
        :param valid_since: The valid_since of this RecommendedActionProperties.
        """
        self.openapi_types = {
            'details': Dict[str, object],
            'error_details': RecommendedActionErrorInfo,
            'estimated_impact': List[RecommendedActionImpactRecord],
            'execute_action_duration': str,
            'execute_action_initiated_by': str,
            'execute_action_initiated_time': datetime,
            'execute_action_start_time': datetime,
            'implementation_details': RecommendedActionImplementationInfo,
            'is_archived_action': bool,
            'is_executable_action': bool,
            'is_revertable_action': bool,
            'last_refresh': datetime,
            'linked_objects': List[str],
            'observed_impact': List[RecommendedActionImpactRecord],
            'recommendation_reason': str,
            'revert_action_duration': str,
            'revert_action_initiated_by': str,
            'revert_action_initiated_time': datetime,
            'revert_action_start_time': datetime,
            'score': int,
            'state': RecommendedActionStateInfo,
            'time_series': List[RecommendedActionMetricInfo],
            'valid_since': datetime
        }

        self.attribute_map = {
            'details': 'details',
            'error_details': 'errorDetails',
            'estimated_impact': 'estimatedImpact',
            'execute_action_duration': 'executeActionDuration',
            'execute_action_initiated_by': 'executeActionInitiatedBy',
            'execute_action_initiated_time': 'executeActionInitiatedTime',
            'execute_action_start_time': 'executeActionStartTime',
            'implementation_details': 'implementationDetails',
            'is_archived_action': 'isArchivedAction',
            'is_executable_action': 'isExecutableAction',
            'is_revertable_action': 'isRevertableAction',
            'last_refresh': 'lastRefresh',
            'linked_objects': 'linkedObjects',
            'observed_impact': 'observedImpact',
            'recommendation_reason': 'recommendationReason',
            'revert_action_duration': 'revertActionDuration',
            'revert_action_initiated_by': 'revertActionInitiatedBy',
            'revert_action_initiated_time': 'revertActionInitiatedTime',
            'revert_action_start_time': 'revertActionStartTime',
            'score': 'score',
            'state': 'state',
            'time_series': 'timeSeries',
            'valid_since': 'validSince'
        }

        self._details = details
        self._error_details = error_details
        self._estimated_impact = estimated_impact
        self._execute_action_duration = execute_action_duration
        self._execute_action_initiated_by = execute_action_initiated_by
        self._execute_action_initiated_time = execute_action_initiated_time
        self._execute_action_start_time = execute_action_start_time
        self._implementation_details = implementation_details
        self._is_archived_action = is_archived_action
        self._is_executable_action = is_executable_action
        self._is_revertable_action = is_revertable_action
        self._last_refresh = last_refresh
        self._linked_objects = linked_objects
        self._observed_impact = observed_impact
        self._recommendation_reason = recommendation_reason
        self._revert_action_duration = revert_action_duration
        self._revert_action_initiated_by = revert_action_initiated_by
        self._revert_action_initiated_time = revert_action_initiated_time
        self._revert_action_start_time = revert_action_start_time
        self._score = score
        self._state = state
        self._time_series = time_series
        self._valid_since = valid_since

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendedActionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendedActionProperties of this RecommendedActionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this RecommendedActionProperties.

        Gets additional details specific to this recommended action.

        :return: The details of this RecommendedActionProperties.
        :rtype: Dict[str, object]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RecommendedActionProperties.

        Gets additional details specific to this recommended action.

        :param details: The details of this RecommendedActionProperties.
        :type details: Dict[str, object]
        """

        self._details = details

    @property
    def error_details(self):
        """Gets the error_details of this RecommendedActionProperties.


        :return: The error_details of this RecommendedActionProperties.
        :rtype: RecommendedActionErrorInfo
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this RecommendedActionProperties.


        :param error_details: The error_details of this RecommendedActionProperties.
        :type error_details: RecommendedActionErrorInfo
        """

        self._error_details = error_details

    @property
    def estimated_impact(self):
        """Gets the estimated_impact of this RecommendedActionProperties.

        Gets the estimated impact info for this recommended action e.g., Estimated CPU gain, Estimated Disk Space change

        :return: The estimated_impact of this RecommendedActionProperties.
        :rtype: List[RecommendedActionImpactRecord]
        """
        return self._estimated_impact

    @estimated_impact.setter
    def estimated_impact(self, estimated_impact):
        """Sets the estimated_impact of this RecommendedActionProperties.

        Gets the estimated impact info for this recommended action e.g., Estimated CPU gain, Estimated Disk Space change

        :param estimated_impact: The estimated_impact of this RecommendedActionProperties.
        :type estimated_impact: List[RecommendedActionImpactRecord]
        """

        self._estimated_impact = estimated_impact

    @property
    def execute_action_duration(self):
        """Gets the execute_action_duration of this RecommendedActionProperties.

        Gets the time taken for applying this recommended action on user resource. e.g., time taken for index creation

        :return: The execute_action_duration of this RecommendedActionProperties.
        :rtype: str
        """
        return self._execute_action_duration

    @execute_action_duration.setter
    def execute_action_duration(self, execute_action_duration):
        """Sets the execute_action_duration of this RecommendedActionProperties.

        Gets the time taken for applying this recommended action on user resource. e.g., time taken for index creation

        :param execute_action_duration: The execute_action_duration of this RecommendedActionProperties.
        :type execute_action_duration: str
        """

        self._execute_action_duration = execute_action_duration

    @property
    def execute_action_initiated_by(self):
        """Gets the execute_action_initiated_by of this RecommendedActionProperties.

        Gets if approval for applying this recommended action was given by user/system.

        :return: The execute_action_initiated_by of this RecommendedActionProperties.
        :rtype: str
        """
        return self._execute_action_initiated_by

    @execute_action_initiated_by.setter
    def execute_action_initiated_by(self, execute_action_initiated_by):
        """Sets the execute_action_initiated_by of this RecommendedActionProperties.

        Gets if approval for applying this recommended action was given by user/system.

        :param execute_action_initiated_by: The execute_action_initiated_by of this RecommendedActionProperties.
        :type execute_action_initiated_by: str
        """
        allowed_values = ["User", "System"]  # noqa: E501
        if execute_action_initiated_by not in allowed_values:
            raise ValueError(
                "Invalid value for `execute_action_initiated_by` ({0}), must be one of {1}"
                .format(execute_action_initiated_by, allowed_values)
            )

        self._execute_action_initiated_by = execute_action_initiated_by

    @property
    def execute_action_initiated_time(self):
        """Gets the execute_action_initiated_time of this RecommendedActionProperties.

        Gets the time when this recommended action was approved for execution.

        :return: The execute_action_initiated_time of this RecommendedActionProperties.
        :rtype: datetime
        """
        return self._execute_action_initiated_time

    @execute_action_initiated_time.setter
    def execute_action_initiated_time(self, execute_action_initiated_time):
        """Sets the execute_action_initiated_time of this RecommendedActionProperties.

        Gets the time when this recommended action was approved for execution.

        :param execute_action_initiated_time: The execute_action_initiated_time of this RecommendedActionProperties.
        :type execute_action_initiated_time: datetime
        """

        self._execute_action_initiated_time = execute_action_initiated_time

    @property
    def execute_action_start_time(self):
        """Gets the execute_action_start_time of this RecommendedActionProperties.

        Gets the time when system started applying this recommended action on the user resource. e.g., index creation start time

        :return: The execute_action_start_time of this RecommendedActionProperties.
        :rtype: datetime
        """
        return self._execute_action_start_time

    @execute_action_start_time.setter
    def execute_action_start_time(self, execute_action_start_time):
        """Sets the execute_action_start_time of this RecommendedActionProperties.

        Gets the time when system started applying this recommended action on the user resource. e.g., index creation start time

        :param execute_action_start_time: The execute_action_start_time of this RecommendedActionProperties.
        :type execute_action_start_time: datetime
        """

        self._execute_action_start_time = execute_action_start_time

    @property
    def implementation_details(self):
        """Gets the implementation_details of this RecommendedActionProperties.


        :return: The implementation_details of this RecommendedActionProperties.
        :rtype: RecommendedActionImplementationInfo
        """
        return self._implementation_details

    @implementation_details.setter
    def implementation_details(self, implementation_details):
        """Sets the implementation_details of this RecommendedActionProperties.


        :param implementation_details: The implementation_details of this RecommendedActionProperties.
        :type implementation_details: RecommendedActionImplementationInfo
        """

        self._implementation_details = implementation_details

    @property
    def is_archived_action(self):
        """Gets the is_archived_action of this RecommendedActionProperties.

        Gets if this recommended action was suggested some time ago but user chose to ignore this and system added a new recommended action again.

        :return: The is_archived_action of this RecommendedActionProperties.
        :rtype: bool
        """
        return self._is_archived_action

    @is_archived_action.setter
    def is_archived_action(self, is_archived_action):
        """Sets the is_archived_action of this RecommendedActionProperties.

        Gets if this recommended action was suggested some time ago but user chose to ignore this and system added a new recommended action again.

        :param is_archived_action: The is_archived_action of this RecommendedActionProperties.
        :type is_archived_action: bool
        """

        self._is_archived_action = is_archived_action

    @property
    def is_executable_action(self):
        """Gets the is_executable_action of this RecommendedActionProperties.

        Gets if this recommended action is actionable by user

        :return: The is_executable_action of this RecommendedActionProperties.
        :rtype: bool
        """
        return self._is_executable_action

    @is_executable_action.setter
    def is_executable_action(self, is_executable_action):
        """Sets the is_executable_action of this RecommendedActionProperties.

        Gets if this recommended action is actionable by user

        :param is_executable_action: The is_executable_action of this RecommendedActionProperties.
        :type is_executable_action: bool
        """

        self._is_executable_action = is_executable_action

    @property
    def is_revertable_action(self):
        """Gets the is_revertable_action of this RecommendedActionProperties.

        Gets if changes applied by this recommended action can be reverted by user

        :return: The is_revertable_action of this RecommendedActionProperties.
        :rtype: bool
        """
        return self._is_revertable_action

    @is_revertable_action.setter
    def is_revertable_action(self, is_revertable_action):
        """Sets the is_revertable_action of this RecommendedActionProperties.

        Gets if changes applied by this recommended action can be reverted by user

        :param is_revertable_action: The is_revertable_action of this RecommendedActionProperties.
        :type is_revertable_action: bool
        """

        self._is_revertable_action = is_revertable_action

    @property
    def last_refresh(self):
        """Gets the last_refresh of this RecommendedActionProperties.

        Gets time when this recommended action was last refreshed.

        :return: The last_refresh of this RecommendedActionProperties.
        :rtype: datetime
        """
        return self._last_refresh

    @last_refresh.setter
    def last_refresh(self, last_refresh):
        """Sets the last_refresh of this RecommendedActionProperties.

        Gets time when this recommended action was last refreshed.

        :param last_refresh: The last_refresh of this RecommendedActionProperties.
        :type last_refresh: datetime
        """

        self._last_refresh = last_refresh

    @property
    def linked_objects(self):
        """Gets the linked_objects of this RecommendedActionProperties.

        Gets the linked objects, if any.

        :return: The linked_objects of this RecommendedActionProperties.
        :rtype: List[str]
        """
        return self._linked_objects

    @linked_objects.setter
    def linked_objects(self, linked_objects):
        """Sets the linked_objects of this RecommendedActionProperties.

        Gets the linked objects, if any.

        :param linked_objects: The linked_objects of this RecommendedActionProperties.
        :type linked_objects: List[str]
        """

        self._linked_objects = linked_objects

    @property
    def observed_impact(self):
        """Gets the observed_impact of this RecommendedActionProperties.

        Gets the observed/actual impact info for this recommended action e.g., Actual CPU gain, Actual Disk Space change

        :return: The observed_impact of this RecommendedActionProperties.
        :rtype: List[RecommendedActionImpactRecord]
        """
        return self._observed_impact

    @observed_impact.setter
    def observed_impact(self, observed_impact):
        """Sets the observed_impact of this RecommendedActionProperties.

        Gets the observed/actual impact info for this recommended action e.g., Actual CPU gain, Actual Disk Space change

        :param observed_impact: The observed_impact of this RecommendedActionProperties.
        :type observed_impact: List[RecommendedActionImpactRecord]
        """

        self._observed_impact = observed_impact

    @property
    def recommendation_reason(self):
        """Gets the recommendation_reason of this RecommendedActionProperties.

        Gets the reason for recommending this action. e.g., DuplicateIndex

        :return: The recommendation_reason of this RecommendedActionProperties.
        :rtype: str
        """
        return self._recommendation_reason

    @recommendation_reason.setter
    def recommendation_reason(self, recommendation_reason):
        """Sets the recommendation_reason of this RecommendedActionProperties.

        Gets the reason for recommending this action. e.g., DuplicateIndex

        :param recommendation_reason: The recommendation_reason of this RecommendedActionProperties.
        :type recommendation_reason: str
        """

        self._recommendation_reason = recommendation_reason

    @property
    def revert_action_duration(self):
        """Gets the revert_action_duration of this RecommendedActionProperties.

        Gets the time taken for reverting changes of this recommended action on user resource. e.g., time taken for dropping the created index.

        :return: The revert_action_duration of this RecommendedActionProperties.
        :rtype: str
        """
        return self._revert_action_duration

    @revert_action_duration.setter
    def revert_action_duration(self, revert_action_duration):
        """Sets the revert_action_duration of this RecommendedActionProperties.

        Gets the time taken for reverting changes of this recommended action on user resource. e.g., time taken for dropping the created index.

        :param revert_action_duration: The revert_action_duration of this RecommendedActionProperties.
        :type revert_action_duration: str
        """

        self._revert_action_duration = revert_action_duration

    @property
    def revert_action_initiated_by(self):
        """Gets the revert_action_initiated_by of this RecommendedActionProperties.

        Gets if approval for reverting this recommended action was given by user/system.

        :return: The revert_action_initiated_by of this RecommendedActionProperties.
        :rtype: str
        """
        return self._revert_action_initiated_by

    @revert_action_initiated_by.setter
    def revert_action_initiated_by(self, revert_action_initiated_by):
        """Sets the revert_action_initiated_by of this RecommendedActionProperties.

        Gets if approval for reverting this recommended action was given by user/system.

        :param revert_action_initiated_by: The revert_action_initiated_by of this RecommendedActionProperties.
        :type revert_action_initiated_by: str
        """
        allowed_values = ["User", "System"]  # noqa: E501
        if revert_action_initiated_by not in allowed_values:
            raise ValueError(
                "Invalid value for `revert_action_initiated_by` ({0}), must be one of {1}"
                .format(revert_action_initiated_by, allowed_values)
            )

        self._revert_action_initiated_by = revert_action_initiated_by

    @property
    def revert_action_initiated_time(self):
        """Gets the revert_action_initiated_time of this RecommendedActionProperties.

        Gets the time when this recommended action was approved for revert.

        :return: The revert_action_initiated_time of this RecommendedActionProperties.
        :rtype: datetime
        """
        return self._revert_action_initiated_time

    @revert_action_initiated_time.setter
    def revert_action_initiated_time(self, revert_action_initiated_time):
        """Sets the revert_action_initiated_time of this RecommendedActionProperties.

        Gets the time when this recommended action was approved for revert.

        :param revert_action_initiated_time: The revert_action_initiated_time of this RecommendedActionProperties.
        :type revert_action_initiated_time: datetime
        """

        self._revert_action_initiated_time = revert_action_initiated_time

    @property
    def revert_action_start_time(self):
        """Gets the revert_action_start_time of this RecommendedActionProperties.

        Gets the time when system started reverting changes of this recommended action on user resource. e.g., time when index drop is executed.

        :return: The revert_action_start_time of this RecommendedActionProperties.
        :rtype: datetime
        """
        return self._revert_action_start_time

    @revert_action_start_time.setter
    def revert_action_start_time(self, revert_action_start_time):
        """Sets the revert_action_start_time of this RecommendedActionProperties.

        Gets the time when system started reverting changes of this recommended action on user resource. e.g., time when index drop is executed.

        :param revert_action_start_time: The revert_action_start_time of this RecommendedActionProperties.
        :type revert_action_start_time: datetime
        """

        self._revert_action_start_time = revert_action_start_time

    @property
    def score(self):
        """Gets the score of this RecommendedActionProperties.

        Gets the impact of this recommended action. Possible values are 1 - Low impact, 2 - Medium Impact and 3 - High Impact

        :return: The score of this RecommendedActionProperties.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this RecommendedActionProperties.

        Gets the impact of this recommended action. Possible values are 1 - Low impact, 2 - Medium Impact and 3 - High Impact

        :param score: The score of this RecommendedActionProperties.
        :type score: int
        """

        self._score = score

    @property
    def state(self):
        """Gets the state of this RecommendedActionProperties.


        :return: The state of this RecommendedActionProperties.
        :rtype: RecommendedActionStateInfo
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RecommendedActionProperties.


        :param state: The state of this RecommendedActionProperties.
        :type state: RecommendedActionStateInfo
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def time_series(self):
        """Gets the time_series of this RecommendedActionProperties.

        Gets the time series info of metrics for this recommended action e.g., CPU consumption time series

        :return: The time_series of this RecommendedActionProperties.
        :rtype: List[RecommendedActionMetricInfo]
        """
        return self._time_series

    @time_series.setter
    def time_series(self, time_series):
        """Sets the time_series of this RecommendedActionProperties.

        Gets the time series info of metrics for this recommended action e.g., CPU consumption time series

        :param time_series: The time_series of this RecommendedActionProperties.
        :type time_series: List[RecommendedActionMetricInfo]
        """

        self._time_series = time_series

    @property
    def valid_since(self):
        """Gets the valid_since of this RecommendedActionProperties.

        Gets the time since when this recommended action is valid.

        :return: The valid_since of this RecommendedActionProperties.
        :rtype: datetime
        """
        return self._valid_since

    @valid_since.setter
    def valid_since(self, valid_since):
        """Sets the valid_since of this RecommendedActionProperties.

        Gets the time since when this recommended action is valid.

        :param valid_since: The valid_since of this RecommendedActionProperties.
        :type valid_since: datetime
        """

        self._valid_since = valid_since
