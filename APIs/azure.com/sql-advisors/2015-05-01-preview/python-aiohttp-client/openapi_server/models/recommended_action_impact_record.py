# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecommendedActionImpactRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absolute_value: float=None, change_value_absolute: float=None, change_value_relative: float=None, dimension_name: str=None, unit: str=None):
        """RecommendedActionImpactRecord - a model defined in OpenAPI

        :param absolute_value: The absolute_value of this RecommendedActionImpactRecord.
        :param change_value_absolute: The change_value_absolute of this RecommendedActionImpactRecord.
        :param change_value_relative: The change_value_relative of this RecommendedActionImpactRecord.
        :param dimension_name: The dimension_name of this RecommendedActionImpactRecord.
        :param unit: The unit of this RecommendedActionImpactRecord.
        """
        self.openapi_types = {
            'absolute_value': float,
            'change_value_absolute': float,
            'change_value_relative': float,
            'dimension_name': str,
            'unit': str
        }

        self.attribute_map = {
            'absolute_value': 'absoluteValue',
            'change_value_absolute': 'changeValueAbsolute',
            'change_value_relative': 'changeValueRelative',
            'dimension_name': 'dimensionName',
            'unit': 'unit'
        }

        self._absolute_value = absolute_value
        self._change_value_absolute = change_value_absolute
        self._change_value_relative = change_value_relative
        self._dimension_name = dimension_name
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendedActionImpactRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendedActionImpactRecord of this RecommendedActionImpactRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absolute_value(self):
        """Gets the absolute_value of this RecommendedActionImpactRecord.

        Gets the absolute value of this dimension if applicable. e.g., Number of Queries affected

        :return: The absolute_value of this RecommendedActionImpactRecord.
        :rtype: float
        """
        return self._absolute_value

    @absolute_value.setter
    def absolute_value(self, absolute_value):
        """Sets the absolute_value of this RecommendedActionImpactRecord.

        Gets the absolute value of this dimension if applicable. e.g., Number of Queries affected

        :param absolute_value: The absolute_value of this RecommendedActionImpactRecord.
        :type absolute_value: float
        """

        self._absolute_value = absolute_value

    @property
    def change_value_absolute(self):
        """Gets the change_value_absolute of this RecommendedActionImpactRecord.

        Gets the absolute change in the value of this dimension. e.g., Absolute Disk space change in Megabytes

        :return: The change_value_absolute of this RecommendedActionImpactRecord.
        :rtype: float
        """
        return self._change_value_absolute

    @change_value_absolute.setter
    def change_value_absolute(self, change_value_absolute):
        """Sets the change_value_absolute of this RecommendedActionImpactRecord.

        Gets the absolute change in the value of this dimension. e.g., Absolute Disk space change in Megabytes

        :param change_value_absolute: The change_value_absolute of this RecommendedActionImpactRecord.
        :type change_value_absolute: float
        """

        self._change_value_absolute = change_value_absolute

    @property
    def change_value_relative(self):
        """Gets the change_value_relative of this RecommendedActionImpactRecord.

        Gets the relative change in the value of this dimension. e.g., Relative Disk space change in Percentage

        :return: The change_value_relative of this RecommendedActionImpactRecord.
        :rtype: float
        """
        return self._change_value_relative

    @change_value_relative.setter
    def change_value_relative(self, change_value_relative):
        """Sets the change_value_relative of this RecommendedActionImpactRecord.

        Gets the relative change in the value of this dimension. e.g., Relative Disk space change in Percentage

        :param change_value_relative: The change_value_relative of this RecommendedActionImpactRecord.
        :type change_value_relative: float
        """

        self._change_value_relative = change_value_relative

    @property
    def dimension_name(self):
        """Gets the dimension_name of this RecommendedActionImpactRecord.

        Gets the name of the impact dimension. e.g., CPUChange, DiskSpaceChange, NumberOfQueriesAffected.

        :return: The dimension_name of this RecommendedActionImpactRecord.
        :rtype: str
        """
        return self._dimension_name

    @dimension_name.setter
    def dimension_name(self, dimension_name):
        """Sets the dimension_name of this RecommendedActionImpactRecord.

        Gets the name of the impact dimension. e.g., CPUChange, DiskSpaceChange, NumberOfQueriesAffected.

        :param dimension_name: The dimension_name of this RecommendedActionImpactRecord.
        :type dimension_name: str
        """

        self._dimension_name = dimension_name

    @property
    def unit(self):
        """Gets the unit of this RecommendedActionImpactRecord.

        Gets the name of the impact dimension. e.g., CPUChange, DiskSpaceChange, NumberOfQueriesAffected.

        :return: The unit of this RecommendedActionImpactRecord.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this RecommendedActionImpactRecord.

        Gets the name of the impact dimension. e.g., CPUChange, DiskSpaceChange, NumberOfQueriesAffected.

        :param unit: The unit of this RecommendedActionImpactRecord.
        :type unit: str
        """

        self._unit = unit
