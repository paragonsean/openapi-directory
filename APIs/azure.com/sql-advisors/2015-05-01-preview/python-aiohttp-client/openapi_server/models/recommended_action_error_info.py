# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecommendedActionErrorInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: str=None, is_retryable: str=None):
        """RecommendedActionErrorInfo - a model defined in OpenAPI

        :param error_code: The error_code of this RecommendedActionErrorInfo.
        :param is_retryable: The is_retryable of this RecommendedActionErrorInfo.
        """
        self.openapi_types = {
            'error_code': str,
            'is_retryable': str
        }

        self.attribute_map = {
            'error_code': 'errorCode',
            'is_retryable': 'isRetryable'
        }

        self._error_code = error_code
        self._is_retryable = is_retryable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendedActionErrorInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendedActionErrorInfo of this RecommendedActionErrorInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this RecommendedActionErrorInfo.

        Gets the reason why the recommended action was put to error state. e.g., DatabaseHasQdsOff, IndexAlreadyExists

        :return: The error_code of this RecommendedActionErrorInfo.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this RecommendedActionErrorInfo.

        Gets the reason why the recommended action was put to error state. e.g., DatabaseHasQdsOff, IndexAlreadyExists

        :param error_code: The error_code of this RecommendedActionErrorInfo.
        :type error_code: str
        """

        self._error_code = error_code

    @property
    def is_retryable(self):
        """Gets the is_retryable of this RecommendedActionErrorInfo.

        Gets whether the error could be ignored and recommended action could be retried. Possible values are: Yes/No

        :return: The is_retryable of this RecommendedActionErrorInfo.
        :rtype: str
        """
        return self._is_retryable

    @is_retryable.setter
    def is_retryable(self, is_retryable):
        """Sets the is_retryable of this RecommendedActionErrorInfo.

        Gets whether the error could be ignored and recommended action could be retried. Possible values are: Yes/No

        :param is_retryable: The is_retryable of this RecommendedActionErrorInfo.
        :type is_retryable: str
        """
        allowed_values = ["Yes", "No"]  # noqa: E501
        if is_retryable not in allowed_values:
            raise ValueError(
                "Invalid value for `is_retryable` ({0}), must be one of {1}"
                .format(is_retryable, allowed_values)
            )

        self._is_retryable = is_retryable
