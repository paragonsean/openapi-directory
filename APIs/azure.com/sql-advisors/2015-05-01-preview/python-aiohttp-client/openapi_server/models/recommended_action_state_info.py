# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecommendedActionStateInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_initiated_by: str=None, current_value: str=None, last_modified: datetime=None):
        """RecommendedActionStateInfo - a model defined in OpenAPI

        :param action_initiated_by: The action_initiated_by of this RecommendedActionStateInfo.
        :param current_value: The current_value of this RecommendedActionStateInfo.
        :param last_modified: The last_modified of this RecommendedActionStateInfo.
        """
        self.openapi_types = {
            'action_initiated_by': str,
            'current_value': str,
            'last_modified': datetime
        }

        self.attribute_map = {
            'action_initiated_by': 'actionInitiatedBy',
            'current_value': 'currentValue',
            'last_modified': 'lastModified'
        }

        self._action_initiated_by = action_initiated_by
        self._current_value = current_value
        self._last_modified = last_modified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendedActionStateInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendedActionStateInfo of this RecommendedActionStateInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_initiated_by(self):
        """Gets the action_initiated_by of this RecommendedActionStateInfo.

        Gets who initiated the execution of this recommended action. Possible Value are: User    -> When user explicitly notified system to apply the recommended action. System  -> When auto-execute status of this advisor was set to 'Enabled', in which case the system applied it.

        :return: The action_initiated_by of this RecommendedActionStateInfo.
        :rtype: str
        """
        return self._action_initiated_by

    @action_initiated_by.setter
    def action_initiated_by(self, action_initiated_by):
        """Sets the action_initiated_by of this RecommendedActionStateInfo.

        Gets who initiated the execution of this recommended action. Possible Value are: User    -> When user explicitly notified system to apply the recommended action. System  -> When auto-execute status of this advisor was set to 'Enabled', in which case the system applied it.

        :param action_initiated_by: The action_initiated_by of this RecommendedActionStateInfo.
        :type action_initiated_by: str
        """
        allowed_values = ["User", "System"]  # noqa: E501
        if action_initiated_by not in allowed_values:
            raise ValueError(
                "Invalid value for `action_initiated_by` ({0}), must be one of {1}"
                .format(action_initiated_by, allowed_values)
            )

        self._action_initiated_by = action_initiated_by

    @property
    def current_value(self):
        """Gets the current_value of this RecommendedActionStateInfo.

        Current state the recommended action is in. Some commonly used states are: Active      -> recommended action is active and no action has been taken yet. Pending     -> recommended action is approved for and is awaiting execution. Executing   -> recommended action is being applied on the user database. Verifying   -> recommended action was applied and is being verified of its usefulness by the system. Success     -> recommended action was applied and improvement found during verification. Pending Revert  -> verification found little or no improvement so recommended action is queued for revert or user has manually reverted. Reverting   -> changes made while applying recommended action are being reverted on the user database. Reverted    -> successfully reverted the changes made by recommended action on user database. Ignored     -> user explicitly ignored/discarded the recommended action. 

        :return: The current_value of this RecommendedActionStateInfo.
        :rtype: str
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value):
        """Sets the current_value of this RecommendedActionStateInfo.

        Current state the recommended action is in. Some commonly used states are: Active      -> recommended action is active and no action has been taken yet. Pending     -> recommended action is approved for and is awaiting execution. Executing   -> recommended action is being applied on the user database. Verifying   -> recommended action was applied and is being verified of its usefulness by the system. Success     -> recommended action was applied and improvement found during verification. Pending Revert  -> verification found little or no improvement so recommended action is queued for revert or user has manually reverted. Reverting   -> changes made while applying recommended action are being reverted on the user database. Reverted    -> successfully reverted the changes made by recommended action on user database. Ignored     -> user explicitly ignored/discarded the recommended action. 

        :param current_value: The current_value of this RecommendedActionStateInfo.
        :type current_value: str
        """
        allowed_values = ["Active", "Pending", "Executing", "Verifying", "PendingRevert", "RevertCancelled", "Reverting", "Reverted", "Ignored", "Expired", "Monitoring", "Resolved", "Success", "Error"]  # noqa: E501
        if current_value not in allowed_values:
            raise ValueError(
                "Invalid value for `current_value` ({0}), must be one of {1}"
                .format(current_value, allowed_values)
            )

        self._current_value = current_value

    @property
    def last_modified(self):
        """Gets the last_modified of this RecommendedActionStateInfo.

        Gets the time when the state was last modified

        :return: The last_modified of this RecommendedActionStateInfo.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this RecommendedActionStateInfo.

        Gets the time when the state was last modified

        :param last_modified: The last_modified of this RecommendedActionStateInfo.
        :type last_modified: datetime
        """

        self._last_modified = last_modified
