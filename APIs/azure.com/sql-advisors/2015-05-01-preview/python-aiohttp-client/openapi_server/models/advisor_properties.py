# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommended_action import RecommendedAction
from openapi_server import util


class AdvisorProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advisor_status: str=None, auto_execute_status: str=None, auto_execute_status_inherited_from: str=None, last_checked: datetime=None, recommendations_status: str=None, recommended_actions: List[RecommendedAction]=None):
        """AdvisorProperties - a model defined in OpenAPI

        :param advisor_status: The advisor_status of this AdvisorProperties.
        :param auto_execute_status: The auto_execute_status of this AdvisorProperties.
        :param auto_execute_status_inherited_from: The auto_execute_status_inherited_from of this AdvisorProperties.
        :param last_checked: The last_checked of this AdvisorProperties.
        :param recommendations_status: The recommendations_status of this AdvisorProperties.
        :param recommended_actions: The recommended_actions of this AdvisorProperties.
        """
        self.openapi_types = {
            'advisor_status': str,
            'auto_execute_status': str,
            'auto_execute_status_inherited_from': str,
            'last_checked': datetime,
            'recommendations_status': str,
            'recommended_actions': List[RecommendedAction]
        }

        self.attribute_map = {
            'advisor_status': 'advisorStatus',
            'auto_execute_status': 'autoExecuteStatus',
            'auto_execute_status_inherited_from': 'autoExecuteStatusInheritedFrom',
            'last_checked': 'lastChecked',
            'recommendations_status': 'recommendationsStatus',
            'recommended_actions': 'recommendedActions'
        }

        self._advisor_status = advisor_status
        self._auto_execute_status = auto_execute_status
        self._auto_execute_status_inherited_from = auto_execute_status_inherited_from
        self._last_checked = last_checked
        self._recommendations_status = recommendations_status
        self._recommended_actions = recommended_actions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvisorProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdvisorProperties of this AdvisorProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advisor_status(self):
        """Gets the advisor_status of this AdvisorProperties.

        Gets the status of availability of this advisor to customers. Possible values are 'GA', 'PublicPreview', 'LimitedPublicPreview' and 'PrivatePreview'.

        :return: The advisor_status of this AdvisorProperties.
        :rtype: str
        """
        return self._advisor_status

    @advisor_status.setter
    def advisor_status(self, advisor_status):
        """Sets the advisor_status of this AdvisorProperties.

        Gets the status of availability of this advisor to customers. Possible values are 'GA', 'PublicPreview', 'LimitedPublicPreview' and 'PrivatePreview'.

        :param advisor_status: The advisor_status of this AdvisorProperties.
        :type advisor_status: str
        """
        allowed_values = ["GA", "PublicPreview", "LimitedPublicPreview", "PrivatePreview"]  # noqa: E501
        if advisor_status not in allowed_values:
            raise ValueError(
                "Invalid value for `advisor_status` ({0}), must be one of {1}"
                .format(advisor_status, allowed_values)
            )

        self._advisor_status = advisor_status

    @property
    def auto_execute_status(self):
        """Gets the auto_execute_status of this AdvisorProperties.

        Gets the auto-execute status (whether to let the system execute the recommendations) of this advisor. Possible values are 'Enabled' and 'Disabled'

        :return: The auto_execute_status of this AdvisorProperties.
        :rtype: str
        """
        return self._auto_execute_status

    @auto_execute_status.setter
    def auto_execute_status(self, auto_execute_status):
        """Sets the auto_execute_status of this AdvisorProperties.

        Gets the auto-execute status (whether to let the system execute the recommendations) of this advisor. Possible values are 'Enabled' and 'Disabled'

        :param auto_execute_status: The auto_execute_status of this AdvisorProperties.
        :type auto_execute_status: str
        """
        allowed_values = ["Enabled", "Disabled", "Default"]  # noqa: E501
        if auto_execute_status not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_execute_status` ({0}), must be one of {1}"
                .format(auto_execute_status, allowed_values)
            )

        self._auto_execute_status = auto_execute_status

    @property
    def auto_execute_status_inherited_from(self):
        """Gets the auto_execute_status_inherited_from of this AdvisorProperties.

        Gets the resource from which current value of auto-execute status is inherited. Auto-execute status can be set on (and inherited from) different levels in the resource hierarchy. Possible values are 'Subscription', 'Server', 'ElasticPool', 'Database' and 'Default' (when status is not explicitly set on any level).

        :return: The auto_execute_status_inherited_from of this AdvisorProperties.
        :rtype: str
        """
        return self._auto_execute_status_inherited_from

    @auto_execute_status_inherited_from.setter
    def auto_execute_status_inherited_from(self, auto_execute_status_inherited_from):
        """Sets the auto_execute_status_inherited_from of this AdvisorProperties.

        Gets the resource from which current value of auto-execute status is inherited. Auto-execute status can be set on (and inherited from) different levels in the resource hierarchy. Possible values are 'Subscription', 'Server', 'ElasticPool', 'Database' and 'Default' (when status is not explicitly set on any level).

        :param auto_execute_status_inherited_from: The auto_execute_status_inherited_from of this AdvisorProperties.
        :type auto_execute_status_inherited_from: str
        """
        allowed_values = ["Default", "Subscription", "Server", "ElasticPool", "Database"]  # noqa: E501
        if auto_execute_status_inherited_from not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_execute_status_inherited_from` ({0}), must be one of {1}"
                .format(auto_execute_status_inherited_from, allowed_values)
            )

        self._auto_execute_status_inherited_from = auto_execute_status_inherited_from

    @property
    def last_checked(self):
        """Gets the last_checked of this AdvisorProperties.

        Gets the time when the current resource was analyzed for recommendations by this advisor.

        :return: The last_checked of this AdvisorProperties.
        :rtype: datetime
        """
        return self._last_checked

    @last_checked.setter
    def last_checked(self, last_checked):
        """Sets the last_checked of this AdvisorProperties.

        Gets the time when the current resource was analyzed for recommendations by this advisor.

        :param last_checked: The last_checked of this AdvisorProperties.
        :type last_checked: datetime
        """

        self._last_checked = last_checked

    @property
    def recommendations_status(self):
        """Gets the recommendations_status of this AdvisorProperties.

        Gets that status of recommendations for this advisor and reason for not having any recommendations. Possible values include, but are not limited to, 'Ok' (Recommendations available),LowActivity (not enough workload to analyze), 'DbSeemsTuned' (Database is doing well), etc.

        :return: The recommendations_status of this AdvisorProperties.
        :rtype: str
        """
        return self._recommendations_status

    @recommendations_status.setter
    def recommendations_status(self, recommendations_status):
        """Sets the recommendations_status of this AdvisorProperties.

        Gets that status of recommendations for this advisor and reason for not having any recommendations. Possible values include, but are not limited to, 'Ok' (Recommendations available),LowActivity (not enough workload to analyze), 'DbSeemsTuned' (Database is doing well), etc.

        :param recommendations_status: The recommendations_status of this AdvisorProperties.
        :type recommendations_status: str
        """

        self._recommendations_status = recommendations_status

    @property
    def recommended_actions(self):
        """Gets the recommended_actions of this AdvisorProperties.

        Gets the recommended actions for this advisor.

        :return: The recommended_actions of this AdvisorProperties.
        :rtype: List[RecommendedAction]
        """
        return self._recommended_actions

    @recommended_actions.setter
    def recommended_actions(self, recommended_actions):
        """Sets the recommended_actions of this AdvisorProperties.

        Gets the recommended actions for this advisor.

        :param recommended_actions: The recommended_actions of this AdvisorProperties.
        :type recommended_actions: List[RecommendedAction]
        """

        self._recommended_actions = recommended_actions
