/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RecommendedAction from '../model/RecommendedAction';

/**
* DatabaseRecommendedActions service.
* @module api/DatabaseRecommendedActionsApi
* @version 2015-05-01-preview
*/
export default class DatabaseRecommendedActionsApi {

    /**
    * Constructs a new DatabaseRecommendedActionsApi. 
    * @alias module:api/DatabaseRecommendedActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the databaseRecommendedActionsGet operation.
     * @callback module:api/DatabaseRecommendedActionsApi~databaseRecommendedActionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendedAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a database recommended action.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {String} advisorName The name of the Database Advisor.
     * @param {String} recommendedActionName The name of Database Recommended Action.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/DatabaseRecommendedActionsApi~databaseRecommendedActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendedAction}
     */
    databaseRecommendedActionsGet(resourceGroupName, serverName, databaseName, advisorName, recommendedActionName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseRecommendedActionsGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databaseRecommendedActionsGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseRecommendedActionsGet");
      }
      // verify the required parameter 'advisorName' is set
      if (advisorName === undefined || advisorName === null) {
        throw new Error("Missing the required parameter 'advisorName' when calling databaseRecommendedActionsGet");
      }
      // verify the required parameter 'recommendedActionName' is set
      if (recommendedActionName === undefined || recommendedActionName === null) {
        throw new Error("Missing the required parameter 'recommendedActionName' when calling databaseRecommendedActionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseRecommendedActionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseRecommendedActionsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'advisorName': advisorName,
        'recommendedActionName': recommendedActionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecommendedAction;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}/recommendedActions/{recommendedActionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseRecommendedActionsListByDatabaseAdvisor operation.
     * @callback module:api/DatabaseRecommendedActionsApi~databaseRecommendedActionsListByDatabaseAdvisorCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecommendedAction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of Database Recommended Actions.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {String} advisorName The name of the Database Advisor.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/DatabaseRecommendedActionsApi~databaseRecommendedActionsListByDatabaseAdvisorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecommendedAction>}
     */
    databaseRecommendedActionsListByDatabaseAdvisor(resourceGroupName, serverName, databaseName, advisorName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseRecommendedActionsListByDatabaseAdvisor");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databaseRecommendedActionsListByDatabaseAdvisor");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseRecommendedActionsListByDatabaseAdvisor");
      }
      // verify the required parameter 'advisorName' is set
      if (advisorName === undefined || advisorName === null) {
        throw new Error("Missing the required parameter 'advisorName' when calling databaseRecommendedActionsListByDatabaseAdvisor");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseRecommendedActionsListByDatabaseAdvisor");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseRecommendedActionsListByDatabaseAdvisor");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'advisorName': advisorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RecommendedAction];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}/recommendedActions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseRecommendedActionsUpdate operation.
     * @callback module:api/DatabaseRecommendedActionsApi~databaseRecommendedActionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendedAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a database recommended action.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {String} advisorName The name of the Database Advisor.
     * @param {String} recommendedActionName The name of Database Recommended Action.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/RecommendedAction} parameters The requested recommended action resource state.
     * @param {module:api/DatabaseRecommendedActionsApi~databaseRecommendedActionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendedAction}
     */
    databaseRecommendedActionsUpdate(resourceGroupName, serverName, databaseName, advisorName, recommendedActionName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseRecommendedActionsUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databaseRecommendedActionsUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseRecommendedActionsUpdate");
      }
      // verify the required parameter 'advisorName' is set
      if (advisorName === undefined || advisorName === null) {
        throw new Error("Missing the required parameter 'advisorName' when calling databaseRecommendedActionsUpdate");
      }
      // verify the required parameter 'recommendedActionName' is set
      if (recommendedActionName === undefined || recommendedActionName === null) {
        throw new Error("Missing the required parameter 'recommendedActionName' when calling databaseRecommendedActionsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseRecommendedActionsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseRecommendedActionsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling databaseRecommendedActionsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'advisorName': advisorName,
        'recommendedActionName': recommendedActionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecommendedAction;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}/recommendedActions/{recommendedActionName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
