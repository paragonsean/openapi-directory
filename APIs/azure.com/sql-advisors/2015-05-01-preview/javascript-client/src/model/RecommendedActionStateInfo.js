/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RecommendedActionStateInfo model module.
 * @module model/RecommendedActionStateInfo
 * @version 2015-05-01-preview
 */
class RecommendedActionStateInfo {
    /**
     * Constructs a new <code>RecommendedActionStateInfo</code>.
     * Contains information of current state for an Azure SQL Database, Server or Elastic Pool Recommended Action.
     * @alias module:model/RecommendedActionStateInfo
     * @param currentValue {module:model/RecommendedActionStateInfo.CurrentValueEnum} Current state the recommended action is in. Some commonly used states are: Active      -> recommended action is active and no action has been taken yet. Pending     -> recommended action is approved for and is awaiting execution. Executing   -> recommended action is being applied on the user database. Verifying   -> recommended action was applied and is being verified of its usefulness by the system. Success     -> recommended action was applied and improvement found during verification. Pending Revert  -> verification found little or no improvement so recommended action is queued for revert or user has manually reverted. Reverting   -> changes made while applying recommended action are being reverted on the user database. Reverted    -> successfully reverted the changes made by recommended action on user database. Ignored     -> user explicitly ignored/discarded the recommended action. 
     */
    constructor(currentValue) { 
        
        RecommendedActionStateInfo.initialize(this, currentValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currentValue) { 
        obj['currentValue'] = currentValue;
    }

    /**
     * Constructs a <code>RecommendedActionStateInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecommendedActionStateInfo} obj Optional instance to populate.
     * @return {module:model/RecommendedActionStateInfo} The populated <code>RecommendedActionStateInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecommendedActionStateInfo();

            if (data.hasOwnProperty('actionInitiatedBy')) {
                obj['actionInitiatedBy'] = ApiClient.convertToType(data['actionInitiatedBy'], 'String');
            }
            if (data.hasOwnProperty('currentValue')) {
                obj['currentValue'] = ApiClient.convertToType(data['currentValue'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecommendedActionStateInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecommendedActionStateInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RecommendedActionStateInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['actionInitiatedBy'] && !(typeof data['actionInitiatedBy'] === 'string' || data['actionInitiatedBy'] instanceof String)) {
            throw new Error("Expected the field `actionInitiatedBy` to be a primitive type in the JSON string but got " + data['actionInitiatedBy']);
        }
        // ensure the json data is a string
        if (data['currentValue'] && !(typeof data['currentValue'] === 'string' || data['currentValue'] instanceof String)) {
            throw new Error("Expected the field `currentValue` to be a primitive type in the JSON string but got " + data['currentValue']);
        }

        return true;
    }


}

RecommendedActionStateInfo.RequiredProperties = ["currentValue"];

/**
 * Gets who initiated the execution of this recommended action. Possible Value are: User    -> When user explicitly notified system to apply the recommended action. System  -> When auto-execute status of this advisor was set to 'Enabled', in which case the system applied it.
 * @member {module:model/RecommendedActionStateInfo.ActionInitiatedByEnum} actionInitiatedBy
 */
RecommendedActionStateInfo.prototype['actionInitiatedBy'] = undefined;

/**
 * Current state the recommended action is in. Some commonly used states are: Active      -> recommended action is active and no action has been taken yet. Pending     -> recommended action is approved for and is awaiting execution. Executing   -> recommended action is being applied on the user database. Verifying   -> recommended action was applied and is being verified of its usefulness by the system. Success     -> recommended action was applied and improvement found during verification. Pending Revert  -> verification found little or no improvement so recommended action is queued for revert or user has manually reverted. Reverting   -> changes made while applying recommended action are being reverted on the user database. Reverted    -> successfully reverted the changes made by recommended action on user database. Ignored     -> user explicitly ignored/discarded the recommended action. 
 * @member {module:model/RecommendedActionStateInfo.CurrentValueEnum} currentValue
 */
RecommendedActionStateInfo.prototype['currentValue'] = undefined;

/**
 * Gets the time when the state was last modified
 * @member {Date} lastModified
 */
RecommendedActionStateInfo.prototype['lastModified'] = undefined;





/**
 * Allowed values for the <code>actionInitiatedBy</code> property.
 * @enum {String}
 * @readonly
 */
RecommendedActionStateInfo['ActionInitiatedByEnum'] = {

    /**
     * value: "User"
     * @const
     */
    "User": "User",

    /**
     * value: "System"
     * @const
     */
    "System": "System"
};


/**
 * Allowed values for the <code>currentValue</code> property.
 * @enum {String}
 * @readonly
 */
RecommendedActionStateInfo['CurrentValueEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "Executing"
     * @const
     */
    "Executing": "Executing",

    /**
     * value: "Verifying"
     * @const
     */
    "Verifying": "Verifying",

    /**
     * value: "PendingRevert"
     * @const
     */
    "PendingRevert": "PendingRevert",

    /**
     * value: "RevertCancelled"
     * @const
     */
    "RevertCancelled": "RevertCancelled",

    /**
     * value: "Reverting"
     * @const
     */
    "Reverting": "Reverting",

    /**
     * value: "Reverted"
     * @const
     */
    "Reverted": "Reverted",

    /**
     * value: "Ignored"
     * @const
     */
    "Ignored": "Ignored",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "Monitoring"
     * @const
     */
    "Monitoring": "Monitoring",

    /**
     * value: "Resolved"
     * @const
     */
    "Resolved": "Resolved",

    /**
     * value: "Success"
     * @const
     */
    "Success": "Success",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error"
};



export default RecommendedActionStateInfo;

