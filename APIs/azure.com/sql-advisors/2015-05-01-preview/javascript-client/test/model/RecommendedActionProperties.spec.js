/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlManagementClient);
  }
}(this, function(expect, SqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlManagementClient.RecommendedActionProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RecommendedActionProperties', function() {
    it('should create an instance of RecommendedActionProperties', function() {
      // uncomment below and update the code to test RecommendedActionProperties
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be.a(SqlManagementClient.RecommendedActionProperties);
    });

    it('should have the property details (base name: "details")', function() {
      // uncomment below and update the code to test the property details
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property errorDetails (base name: "errorDetails")', function() {
      // uncomment below and update the code to test the property errorDetails
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property estimatedImpact (base name: "estimatedImpact")', function() {
      // uncomment below and update the code to test the property estimatedImpact
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property executeActionDuration (base name: "executeActionDuration")', function() {
      // uncomment below and update the code to test the property executeActionDuration
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property executeActionInitiatedBy (base name: "executeActionInitiatedBy")', function() {
      // uncomment below and update the code to test the property executeActionInitiatedBy
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property executeActionInitiatedTime (base name: "executeActionInitiatedTime")', function() {
      // uncomment below and update the code to test the property executeActionInitiatedTime
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property executeActionStartTime (base name: "executeActionStartTime")', function() {
      // uncomment below and update the code to test the property executeActionStartTime
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property implementationDetails (base name: "implementationDetails")', function() {
      // uncomment below and update the code to test the property implementationDetails
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property isArchivedAction (base name: "isArchivedAction")', function() {
      // uncomment below and update the code to test the property isArchivedAction
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property isExecutableAction (base name: "isExecutableAction")', function() {
      // uncomment below and update the code to test the property isExecutableAction
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property isRevertableAction (base name: "isRevertableAction")', function() {
      // uncomment below and update the code to test the property isRevertableAction
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property lastRefresh (base name: "lastRefresh")', function() {
      // uncomment below and update the code to test the property lastRefresh
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property linkedObjects (base name: "linkedObjects")', function() {
      // uncomment below and update the code to test the property linkedObjects
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property observedImpact (base name: "observedImpact")', function() {
      // uncomment below and update the code to test the property observedImpact
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property recommendationReason (base name: "recommendationReason")', function() {
      // uncomment below and update the code to test the property recommendationReason
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property revertActionDuration (base name: "revertActionDuration")', function() {
      // uncomment below and update the code to test the property revertActionDuration
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property revertActionInitiatedBy (base name: "revertActionInitiatedBy")', function() {
      // uncomment below and update the code to test the property revertActionInitiatedBy
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property revertActionInitiatedTime (base name: "revertActionInitiatedTime")', function() {
      // uncomment below and update the code to test the property revertActionInitiatedTime
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property revertActionStartTime (base name: "revertActionStartTime")', function() {
      // uncomment below and update the code to test the property revertActionStartTime
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property score (base name: "score")', function() {
      // uncomment below and update the code to test the property score
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property timeSeries (base name: "timeSeries")', function() {
      // uncomment below and update the code to test the property timeSeries
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

    it('should have the property validSince (base name: "validSince")', function() {
      // uncomment below and update the code to test the property validSince
      //var instance = new SqlManagementClient.RecommendedActionProperties();
      //expect(instance).to.be();
    });

  });

}));
