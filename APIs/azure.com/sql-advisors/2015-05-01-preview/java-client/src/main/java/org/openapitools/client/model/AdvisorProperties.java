/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecommendedAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties for a Database, Server or Elastic Pool Advisor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:02.976731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdvisorProperties {
  /**
   * Gets the status of availability of this advisor to customers. Possible values are &#39;GA&#39;, &#39;PublicPreview&#39;, &#39;LimitedPublicPreview&#39; and &#39;PrivatePreview&#39;.
   */
  @JsonAdapter(AdvisorStatusEnum.Adapter.class)
  public enum AdvisorStatusEnum {
    GA("GA"),
    
    PUBLIC_PREVIEW("PublicPreview"),
    
    LIMITED_PUBLIC_PREVIEW("LimitedPublicPreview"),
    
    PRIVATE_PREVIEW("PrivatePreview");

    private String value;

    AdvisorStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdvisorStatusEnum fromValue(String value) {
      for (AdvisorStatusEnum b : AdvisorStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdvisorStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdvisorStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdvisorStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdvisorStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdvisorStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADVISOR_STATUS = "advisorStatus";
  @SerializedName(SERIALIZED_NAME_ADVISOR_STATUS)
  private AdvisorStatusEnum advisorStatus;

  /**
   * Gets the auto-execute status (whether to let the system execute the recommendations) of this advisor. Possible values are &#39;Enabled&#39; and &#39;Disabled&#39;
   */
  @JsonAdapter(AutoExecuteStatusEnum.Adapter.class)
  public enum AutoExecuteStatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled"),
    
    DEFAULT("Default");

    private String value;

    AutoExecuteStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoExecuteStatusEnum fromValue(String value) {
      for (AutoExecuteStatusEnum b : AutoExecuteStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoExecuteStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoExecuteStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoExecuteStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoExecuteStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutoExecuteStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTO_EXECUTE_STATUS = "autoExecuteStatus";
  @SerializedName(SERIALIZED_NAME_AUTO_EXECUTE_STATUS)
  private AutoExecuteStatusEnum autoExecuteStatus;

  /**
   * Gets the resource from which current value of auto-execute status is inherited. Auto-execute status can be set on (and inherited from) different levels in the resource hierarchy. Possible values are &#39;Subscription&#39;, &#39;Server&#39;, &#39;ElasticPool&#39;, &#39;Database&#39; and &#39;Default&#39; (when status is not explicitly set on any level).
   */
  @JsonAdapter(AutoExecuteStatusInheritedFromEnum.Adapter.class)
  public enum AutoExecuteStatusInheritedFromEnum {
    DEFAULT("Default"),
    
    SUBSCRIPTION("Subscription"),
    
    SERVER("Server"),
    
    ELASTIC_POOL("ElasticPool"),
    
    DATABASE("Database");

    private String value;

    AutoExecuteStatusInheritedFromEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoExecuteStatusInheritedFromEnum fromValue(String value) {
      for (AutoExecuteStatusInheritedFromEnum b : AutoExecuteStatusInheritedFromEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoExecuteStatusInheritedFromEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoExecuteStatusInheritedFromEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoExecuteStatusInheritedFromEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoExecuteStatusInheritedFromEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutoExecuteStatusInheritedFromEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTO_EXECUTE_STATUS_INHERITED_FROM = "autoExecuteStatusInheritedFrom";
  @SerializedName(SERIALIZED_NAME_AUTO_EXECUTE_STATUS_INHERITED_FROM)
  private AutoExecuteStatusInheritedFromEnum autoExecuteStatusInheritedFrom;

  public static final String SERIALIZED_NAME_LAST_CHECKED = "lastChecked";
  @SerializedName(SERIALIZED_NAME_LAST_CHECKED)
  private OffsetDateTime lastChecked;

  public static final String SERIALIZED_NAME_RECOMMENDATIONS_STATUS = "recommendationsStatus";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATIONS_STATUS)
  private String recommendationsStatus;

  public static final String SERIALIZED_NAME_RECOMMENDED_ACTIONS = "recommendedActions";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_ACTIONS)
  private List<RecommendedAction> recommendedActions = new ArrayList<>();

  public AdvisorProperties() {
  }

  public AdvisorProperties(
     AdvisorStatusEnum advisorStatus, 
     AutoExecuteStatusInheritedFromEnum autoExecuteStatusInheritedFrom, 
     OffsetDateTime lastChecked, 
     String recommendationsStatus, 
     List<RecommendedAction> recommendedActions
  ) {
    this();
    this.advisorStatus = advisorStatus;
    this.autoExecuteStatusInheritedFrom = autoExecuteStatusInheritedFrom;
    this.lastChecked = lastChecked;
    this.recommendationsStatus = recommendationsStatus;
    this.recommendedActions = recommendedActions;
  }

  /**
   * Gets the status of availability of this advisor to customers. Possible values are &#39;GA&#39;, &#39;PublicPreview&#39;, &#39;LimitedPublicPreview&#39; and &#39;PrivatePreview&#39;.
   * @return advisorStatus
   */
  @javax.annotation.Nullable
  public AdvisorStatusEnum getAdvisorStatus() {
    return advisorStatus;
  }



  public AdvisorProperties autoExecuteStatus(AutoExecuteStatusEnum autoExecuteStatus) {
    this.autoExecuteStatus = autoExecuteStatus;
    return this;
  }

  /**
   * Gets the auto-execute status (whether to let the system execute the recommendations) of this advisor. Possible values are &#39;Enabled&#39; and &#39;Disabled&#39;
   * @return autoExecuteStatus
   */
  @javax.annotation.Nonnull
  public AutoExecuteStatusEnum getAutoExecuteStatus() {
    return autoExecuteStatus;
  }

  public void setAutoExecuteStatus(AutoExecuteStatusEnum autoExecuteStatus) {
    this.autoExecuteStatus = autoExecuteStatus;
  }


  /**
   * Gets the resource from which current value of auto-execute status is inherited. Auto-execute status can be set on (and inherited from) different levels in the resource hierarchy. Possible values are &#39;Subscription&#39;, &#39;Server&#39;, &#39;ElasticPool&#39;, &#39;Database&#39; and &#39;Default&#39; (when status is not explicitly set on any level).
   * @return autoExecuteStatusInheritedFrom
   */
  @javax.annotation.Nullable
  public AutoExecuteStatusInheritedFromEnum getAutoExecuteStatusInheritedFrom() {
    return autoExecuteStatusInheritedFrom;
  }



  /**
   * Gets the time when the current resource was analyzed for recommendations by this advisor.
   * @return lastChecked
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastChecked() {
    return lastChecked;
  }



  /**
   * Gets that status of recommendations for this advisor and reason for not having any recommendations. Possible values include, but are not limited to, &#39;Ok&#39; (Recommendations available),LowActivity (not enough workload to analyze), &#39;DbSeemsTuned&#39; (Database is doing well), etc.
   * @return recommendationsStatus
   */
  @javax.annotation.Nullable
  public String getRecommendationsStatus() {
    return recommendationsStatus;
  }



  /**
   * Gets the recommended actions for this advisor.
   * @return recommendedActions
   */
  @javax.annotation.Nullable
  public List<RecommendedAction> getRecommendedActions() {
    return recommendedActions;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvisorProperties advisorProperties = (AdvisorProperties) o;
    return Objects.equals(this.advisorStatus, advisorProperties.advisorStatus) &&
        Objects.equals(this.autoExecuteStatus, advisorProperties.autoExecuteStatus) &&
        Objects.equals(this.autoExecuteStatusInheritedFrom, advisorProperties.autoExecuteStatusInheritedFrom) &&
        Objects.equals(this.lastChecked, advisorProperties.lastChecked) &&
        Objects.equals(this.recommendationsStatus, advisorProperties.recommendationsStatus) &&
        Objects.equals(this.recommendedActions, advisorProperties.recommendedActions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advisorStatus, autoExecuteStatus, autoExecuteStatusInheritedFrom, lastChecked, recommendationsStatus, recommendedActions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvisorProperties {\n");
    sb.append("    advisorStatus: ").append(toIndentedString(advisorStatus)).append("\n");
    sb.append("    autoExecuteStatus: ").append(toIndentedString(autoExecuteStatus)).append("\n");
    sb.append("    autoExecuteStatusInheritedFrom: ").append(toIndentedString(autoExecuteStatusInheritedFrom)).append("\n");
    sb.append("    lastChecked: ").append(toIndentedString(lastChecked)).append("\n");
    sb.append("    recommendationsStatus: ").append(toIndentedString(recommendationsStatus)).append("\n");
    sb.append("    recommendedActions: ").append(toIndentedString(recommendedActions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advisorStatus");
    openapiFields.add("autoExecuteStatus");
    openapiFields.add("autoExecuteStatusInheritedFrom");
    openapiFields.add("lastChecked");
    openapiFields.add("recommendationsStatus");
    openapiFields.add("recommendedActions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("autoExecuteStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdvisorProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdvisorProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdvisorProperties is not found in the empty JSON string", AdvisorProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdvisorProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdvisorProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AdvisorProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("advisorStatus") != null && !jsonObj.get("advisorStatus").isJsonNull()) && !jsonObj.get("advisorStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advisorStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advisorStatus").toString()));
      }
      // validate the optional field `advisorStatus`
      if (jsonObj.get("advisorStatus") != null && !jsonObj.get("advisorStatus").isJsonNull()) {
        AdvisorStatusEnum.validateJsonElement(jsonObj.get("advisorStatus"));
      }
      if (!jsonObj.get("autoExecuteStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoExecuteStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoExecuteStatus").toString()));
      }
      // validate the required field `autoExecuteStatus`
      AutoExecuteStatusEnum.validateJsonElement(jsonObj.get("autoExecuteStatus"));
      if ((jsonObj.get("autoExecuteStatusInheritedFrom") != null && !jsonObj.get("autoExecuteStatusInheritedFrom").isJsonNull()) && !jsonObj.get("autoExecuteStatusInheritedFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoExecuteStatusInheritedFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoExecuteStatusInheritedFrom").toString()));
      }
      // validate the optional field `autoExecuteStatusInheritedFrom`
      if (jsonObj.get("autoExecuteStatusInheritedFrom") != null && !jsonObj.get("autoExecuteStatusInheritedFrom").isJsonNull()) {
        AutoExecuteStatusInheritedFromEnum.validateJsonElement(jsonObj.get("autoExecuteStatusInheritedFrom"));
      }
      if ((jsonObj.get("recommendationsStatus") != null && !jsonObj.get("recommendationsStatus").isJsonNull()) && !jsonObj.get("recommendationsStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendationsStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendationsStatus").toString()));
      }
      if (jsonObj.get("recommendedActions") != null && !jsonObj.get("recommendedActions").isJsonNull()) {
        JsonArray jsonArrayrecommendedActions = jsonObj.getAsJsonArray("recommendedActions");
        if (jsonArrayrecommendedActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recommendedActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recommendedActions` to be an array in the JSON string but got `%s`", jsonObj.get("recommendedActions").toString()));
          }

          // validate the optional field `recommendedActions` (array)
          for (int i = 0; i < jsonArrayrecommendedActions.size(); i++) {
            RecommendedAction.validateJsonElement(jsonArrayrecommendedActions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvisorProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvisorProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvisorProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvisorProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvisorProperties>() {
           @Override
           public void write(JsonWriter out, AdvisorProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvisorProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdvisorProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdvisorProperties
   * @throws IOException if the JSON string is invalid with respect to AdvisorProperties
   */
  public static AdvisorProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvisorProperties.class);
  }

  /**
   * Convert an instance of AdvisorProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

