/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information of estimated or observed impact on various metrics for an Azure SQL Database, Server or Elastic Pool Recommended Action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:02.976731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendedActionImpactRecord {
  public static final String SERIALIZED_NAME_ABSOLUTE_VALUE = "absoluteValue";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_VALUE)
  private Double absoluteValue;

  public static final String SERIALIZED_NAME_CHANGE_VALUE_ABSOLUTE = "changeValueAbsolute";
  @SerializedName(SERIALIZED_NAME_CHANGE_VALUE_ABSOLUTE)
  private Double changeValueAbsolute;

  public static final String SERIALIZED_NAME_CHANGE_VALUE_RELATIVE = "changeValueRelative";
  @SerializedName(SERIALIZED_NAME_CHANGE_VALUE_RELATIVE)
  private Double changeValueRelative;

  public static final String SERIALIZED_NAME_DIMENSION_NAME = "dimensionName";
  @SerializedName(SERIALIZED_NAME_DIMENSION_NAME)
  private String dimensionName;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public RecommendedActionImpactRecord() {
  }

  public RecommendedActionImpactRecord(
     Double absoluteValue, 
     Double changeValueAbsolute, 
     Double changeValueRelative, 
     String dimensionName, 
     String unit
  ) {
    this();
    this.absoluteValue = absoluteValue;
    this.changeValueAbsolute = changeValueAbsolute;
    this.changeValueRelative = changeValueRelative;
    this.dimensionName = dimensionName;
    this.unit = unit;
  }

  /**
   * Gets the absolute value of this dimension if applicable. e.g., Number of Queries affected
   * @return absoluteValue
   */
  @javax.annotation.Nullable
  public Double getAbsoluteValue() {
    return absoluteValue;
  }



  /**
   * Gets the absolute change in the value of this dimension. e.g., Absolute Disk space change in Megabytes
   * @return changeValueAbsolute
   */
  @javax.annotation.Nullable
  public Double getChangeValueAbsolute() {
    return changeValueAbsolute;
  }



  /**
   * Gets the relative change in the value of this dimension. e.g., Relative Disk space change in Percentage
   * @return changeValueRelative
   */
  @javax.annotation.Nullable
  public Double getChangeValueRelative() {
    return changeValueRelative;
  }



  /**
   * Gets the name of the impact dimension. e.g., CPUChange, DiskSpaceChange, NumberOfQueriesAffected.
   * @return dimensionName
   */
  @javax.annotation.Nullable
  public String getDimensionName() {
    return dimensionName;
  }



  /**
   * Gets the name of the impact dimension. e.g., CPUChange, DiskSpaceChange, NumberOfQueriesAffected.
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendedActionImpactRecord recommendedActionImpactRecord = (RecommendedActionImpactRecord) o;
    return Objects.equals(this.absoluteValue, recommendedActionImpactRecord.absoluteValue) &&
        Objects.equals(this.changeValueAbsolute, recommendedActionImpactRecord.changeValueAbsolute) &&
        Objects.equals(this.changeValueRelative, recommendedActionImpactRecord.changeValueRelative) &&
        Objects.equals(this.dimensionName, recommendedActionImpactRecord.dimensionName) &&
        Objects.equals(this.unit, recommendedActionImpactRecord.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteValue, changeValueAbsolute, changeValueRelative, dimensionName, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendedActionImpactRecord {\n");
    sb.append("    absoluteValue: ").append(toIndentedString(absoluteValue)).append("\n");
    sb.append("    changeValueAbsolute: ").append(toIndentedString(changeValueAbsolute)).append("\n");
    sb.append("    changeValueRelative: ").append(toIndentedString(changeValueRelative)).append("\n");
    sb.append("    dimensionName: ").append(toIndentedString(dimensionName)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absoluteValue");
    openapiFields.add("changeValueAbsolute");
    openapiFields.add("changeValueRelative");
    openapiFields.add("dimensionName");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendedActionImpactRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendedActionImpactRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendedActionImpactRecord is not found in the empty JSON string", RecommendedActionImpactRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendedActionImpactRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendedActionImpactRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dimensionName") != null && !jsonObj.get("dimensionName").isJsonNull()) && !jsonObj.get("dimensionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimensionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dimensionName").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendedActionImpactRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendedActionImpactRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendedActionImpactRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendedActionImpactRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendedActionImpactRecord>() {
           @Override
           public void write(JsonWriter out, RecommendedActionImpactRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendedActionImpactRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendedActionImpactRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendedActionImpactRecord
   * @throws IOException if the JSON string is invalid with respect to RecommendedActionImpactRecord
   */
  public static RecommendedActionImpactRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendedActionImpactRecord.class);
  }

  /**
   * Convert an instance of RecommendedActionImpactRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

