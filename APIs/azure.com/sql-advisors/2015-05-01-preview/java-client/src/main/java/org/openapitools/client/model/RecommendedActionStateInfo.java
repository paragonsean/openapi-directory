/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information of current state for an Azure SQL Database, Server or Elastic Pool Recommended Action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:02.976731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendedActionStateInfo {
  /**
   * Gets who initiated the execution of this recommended action. Possible Value are: User    -&gt; When user explicitly notified system to apply the recommended action. System  -&gt; When auto-execute status of this advisor was set to &#39;Enabled&#39;, in which case the system applied it.
   */
  @JsonAdapter(ActionInitiatedByEnum.Adapter.class)
  public enum ActionInitiatedByEnum {
    USER("User"),
    
    SYSTEM("System");

    private String value;

    ActionInitiatedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionInitiatedByEnum fromValue(String value) {
      for (ActionInitiatedByEnum b : ActionInitiatedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionInitiatedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionInitiatedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionInitiatedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionInitiatedByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionInitiatedByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION_INITIATED_BY = "actionInitiatedBy";
  @SerializedName(SERIALIZED_NAME_ACTION_INITIATED_BY)
  private ActionInitiatedByEnum actionInitiatedBy;

  /**
   * Current state the recommended action is in. Some commonly used states are: Active      -&gt; recommended action is active and no action has been taken yet. Pending     -&gt; recommended action is approved for and is awaiting execution. Executing   -&gt; recommended action is being applied on the user database. Verifying   -&gt; recommended action was applied and is being verified of its usefulness by the system. Success     -&gt; recommended action was applied and improvement found during verification. Pending Revert  -&gt; verification found little or no improvement so recommended action is queued for revert or user has manually reverted. Reverting   -&gt; changes made while applying recommended action are being reverted on the user database. Reverted    -&gt; successfully reverted the changes made by recommended action on user database. Ignored     -&gt; user explicitly ignored/discarded the recommended action. 
   */
  @JsonAdapter(CurrentValueEnum.Adapter.class)
  public enum CurrentValueEnum {
    ACTIVE("Active"),
    
    PENDING("Pending"),
    
    EXECUTING("Executing"),
    
    VERIFYING("Verifying"),
    
    PENDING_REVERT("PendingRevert"),
    
    REVERT_CANCELLED("RevertCancelled"),
    
    REVERTING("Reverting"),
    
    REVERTED("Reverted"),
    
    IGNORED("Ignored"),
    
    EXPIRED("Expired"),
    
    MONITORING("Monitoring"),
    
    RESOLVED("Resolved"),
    
    SUCCESS("Success"),
    
    ERROR("Error");

    private String value;

    CurrentValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrentValueEnum fromValue(String value) {
      for (CurrentValueEnum b : CurrentValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrentValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentValueEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrentValueEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrentValueEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENT_VALUE = "currentValue";
  @SerializedName(SERIALIZED_NAME_CURRENT_VALUE)
  private CurrentValueEnum currentValue;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public RecommendedActionStateInfo() {
  }

  public RecommendedActionStateInfo(
     ActionInitiatedByEnum actionInitiatedBy, 
     OffsetDateTime lastModified
  ) {
    this();
    this.actionInitiatedBy = actionInitiatedBy;
    this.lastModified = lastModified;
  }

  /**
   * Gets who initiated the execution of this recommended action. Possible Value are: User    -&gt; When user explicitly notified system to apply the recommended action. System  -&gt; When auto-execute status of this advisor was set to &#39;Enabled&#39;, in which case the system applied it.
   * @return actionInitiatedBy
   */
  @javax.annotation.Nullable
  public ActionInitiatedByEnum getActionInitiatedBy() {
    return actionInitiatedBy;
  }



  public RecommendedActionStateInfo currentValue(CurrentValueEnum currentValue) {
    this.currentValue = currentValue;
    return this;
  }

  /**
   * Current state the recommended action is in. Some commonly used states are: Active      -&gt; recommended action is active and no action has been taken yet. Pending     -&gt; recommended action is approved for and is awaiting execution. Executing   -&gt; recommended action is being applied on the user database. Verifying   -&gt; recommended action was applied and is being verified of its usefulness by the system. Success     -&gt; recommended action was applied and improvement found during verification. Pending Revert  -&gt; verification found little or no improvement so recommended action is queued for revert or user has manually reverted. Reverting   -&gt; changes made while applying recommended action are being reverted on the user database. Reverted    -&gt; successfully reverted the changes made by recommended action on user database. Ignored     -&gt; user explicitly ignored/discarded the recommended action. 
   * @return currentValue
   */
  @javax.annotation.Nonnull
  public CurrentValueEnum getCurrentValue() {
    return currentValue;
  }

  public void setCurrentValue(CurrentValueEnum currentValue) {
    this.currentValue = currentValue;
  }


  /**
   * Gets the time when the state was last modified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendedActionStateInfo recommendedActionStateInfo = (RecommendedActionStateInfo) o;
    return Objects.equals(this.actionInitiatedBy, recommendedActionStateInfo.actionInitiatedBy) &&
        Objects.equals(this.currentValue, recommendedActionStateInfo.currentValue) &&
        Objects.equals(this.lastModified, recommendedActionStateInfo.lastModified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionInitiatedBy, currentValue, lastModified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendedActionStateInfo {\n");
    sb.append("    actionInitiatedBy: ").append(toIndentedString(actionInitiatedBy)).append("\n");
    sb.append("    currentValue: ").append(toIndentedString(currentValue)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionInitiatedBy");
    openapiFields.add("currentValue");
    openapiFields.add("lastModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currentValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendedActionStateInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendedActionStateInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendedActionStateInfo is not found in the empty JSON string", RecommendedActionStateInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendedActionStateInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendedActionStateInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecommendedActionStateInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionInitiatedBy") != null && !jsonObj.get("actionInitiatedBy").isJsonNull()) && !jsonObj.get("actionInitiatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionInitiatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionInitiatedBy").toString()));
      }
      // validate the optional field `actionInitiatedBy`
      if (jsonObj.get("actionInitiatedBy") != null && !jsonObj.get("actionInitiatedBy").isJsonNull()) {
        ActionInitiatedByEnum.validateJsonElement(jsonObj.get("actionInitiatedBy"));
      }
      if (!jsonObj.get("currentValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentValue").toString()));
      }
      // validate the required field `currentValue`
      CurrentValueEnum.validateJsonElement(jsonObj.get("currentValue"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendedActionStateInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendedActionStateInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendedActionStateInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendedActionStateInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendedActionStateInfo>() {
           @Override
           public void write(JsonWriter out, RecommendedActionStateInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendedActionStateInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendedActionStateInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendedActionStateInfo
   * @throws IOException if the JSON string is invalid with respect to RecommendedActionStateInfo
   */
  public static RecommendedActionStateInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendedActionStateInfo.class);
  }

  /**
   * Convert an instance of RecommendedActionStateInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

