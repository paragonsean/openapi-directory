/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvisorProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvisorProperties::OAIAdvisorProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvisorProperties::OAIAdvisorProperties() {
    this->initializeModel();
}

OAIAdvisorProperties::~OAIAdvisorProperties() {}

void OAIAdvisorProperties::initializeModel() {

    m_advisor_status_isSet = false;
    m_advisor_status_isValid = false;

    m_auto_execute_value_isSet = false;
    m_auto_execute_value_isValid = false;

    m_last_checked_isSet = false;
    m_last_checked_isValid = false;

    m_recommendations_status_isSet = false;
    m_recommendations_status_isValid = false;
}

void OAIAdvisorProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvisorProperties::fromJsonObject(QJsonObject json) {

    m_advisor_status_isValid = ::OpenAPI::fromJsonValue(m_advisor_status, json[QString("advisorStatus")]);
    m_advisor_status_isSet = !json[QString("advisorStatus")].isNull() && m_advisor_status_isValid;

    m_auto_execute_value_isValid = ::OpenAPI::fromJsonValue(m_auto_execute_value, json[QString("autoExecuteValue")]);
    m_auto_execute_value_isSet = !json[QString("autoExecuteValue")].isNull() && m_auto_execute_value_isValid;

    m_last_checked_isValid = ::OpenAPI::fromJsonValue(m_last_checked, json[QString("lastChecked")]);
    m_last_checked_isSet = !json[QString("lastChecked")].isNull() && m_last_checked_isValid;

    m_recommendations_status_isValid = ::OpenAPI::fromJsonValue(m_recommendations_status, json[QString("recommendationsStatus")]);
    m_recommendations_status_isSet = !json[QString("recommendationsStatus")].isNull() && m_recommendations_status_isValid;
}

QString OAIAdvisorProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvisorProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_advisor_status_isSet) {
        obj.insert(QString("advisorStatus"), ::OpenAPI::toJsonValue(m_advisor_status));
    }
    if (m_auto_execute_value_isSet) {
        obj.insert(QString("autoExecuteValue"), ::OpenAPI::toJsonValue(m_auto_execute_value));
    }
    if (m_last_checked_isSet) {
        obj.insert(QString("lastChecked"), ::OpenAPI::toJsonValue(m_last_checked));
    }
    if (m_recommendations_status_isSet) {
        obj.insert(QString("recommendationsStatus"), ::OpenAPI::toJsonValue(m_recommendations_status));
    }
    return obj;
}

QString OAIAdvisorProperties::getAdvisorStatus() const {
    return m_advisor_status;
}
void OAIAdvisorProperties::setAdvisorStatus(const QString &advisor_status) {
    m_advisor_status = advisor_status;
    m_advisor_status_isSet = true;
}

bool OAIAdvisorProperties::is_advisor_status_Set() const{
    return m_advisor_status_isSet;
}

bool OAIAdvisorProperties::is_advisor_status_Valid() const{
    return m_advisor_status_isValid;
}

QString OAIAdvisorProperties::getAutoExecuteValue() const {
    return m_auto_execute_value;
}
void OAIAdvisorProperties::setAutoExecuteValue(const QString &auto_execute_value) {
    m_auto_execute_value = auto_execute_value;
    m_auto_execute_value_isSet = true;
}

bool OAIAdvisorProperties::is_auto_execute_value_Set() const{
    return m_auto_execute_value_isSet;
}

bool OAIAdvisorProperties::is_auto_execute_value_Valid() const{
    return m_auto_execute_value_isValid;
}

QDateTime OAIAdvisorProperties::getLastChecked() const {
    return m_last_checked;
}
void OAIAdvisorProperties::setLastChecked(const QDateTime &last_checked) {
    m_last_checked = last_checked;
    m_last_checked_isSet = true;
}

bool OAIAdvisorProperties::is_last_checked_Set() const{
    return m_last_checked_isSet;
}

bool OAIAdvisorProperties::is_last_checked_Valid() const{
    return m_last_checked_isValid;
}

QString OAIAdvisorProperties::getRecommendationsStatus() const {
    return m_recommendations_status;
}
void OAIAdvisorProperties::setRecommendationsStatus(const QString &recommendations_status) {
    m_recommendations_status = recommendations_status;
    m_recommendations_status_isSet = true;
}

bool OAIAdvisorProperties::is_recommendations_status_Set() const{
    return m_recommendations_status_isSet;
}

bool OAIAdvisorProperties::is_recommendations_status_Valid() const{
    return m_recommendations_status_isValid;
}

bool OAIAdvisorProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advisor_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_execute_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_checked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendations_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvisorProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_execute_value_isValid && true;
}

} // namespace OpenAPI
