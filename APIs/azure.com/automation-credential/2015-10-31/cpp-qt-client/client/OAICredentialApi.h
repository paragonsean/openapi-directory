/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICredentialApi_H
#define OAI_OAICredentialApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICredential.h"
#include "OAICredentialCreateOrUpdateParameters.h"
#include "OAICredentialListResult.h"
#include "OAICredentialUpdateParameters.h"
#include "OAICredential_Get_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICredentialApi : public QObject {
    Q_OBJECT

public:
    OAICredentialApi(const int timeOut = 0);
    ~OAICredentialApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  credential_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICredentialCreateOrUpdateParameters [required]
    */
    virtual void credentialCreateOrUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &credential_name, const QString &subscription_id, const QString &api_version, const OAICredentialCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  credential_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void credentialDelete(const QString &resource_group_name, const QString &automation_account_name, const QString &credential_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  credential_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void credentialGet(const QString &resource_group_name, const QString &automation_account_name, const QString &credential_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void credentialListByAutomationAccount(const QString &resource_group_name, const QString &automation_account_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  credential_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICredentialUpdateParameters [required]
    */
    virtual void credentialUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &credential_name, const QString &subscription_id, const QString &api_version, const OAICredentialUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void credentialCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void credentialDeleteCallback(OAIHttpRequestWorker *worker);
    void credentialGetCallback(OAIHttpRequestWorker *worker);
    void credentialListByAutomationAccountCallback(OAIHttpRequestWorker *worker);
    void credentialUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void credentialCreateOrUpdateSignal(OAICredential summary);
    void credentialDeleteSignal();
    void credentialGetSignal(OAICredential summary);
    void credentialListByAutomationAccountSignal(OAICredentialListResult summary);
    void credentialUpdateSignal(OAICredential summary);


    void credentialCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAICredential summary);
    void credentialDeleteSignalFull(OAIHttpRequestWorker *worker);
    void credentialGetSignalFull(OAIHttpRequestWorker *worker, OAICredential summary);
    void credentialListByAutomationAccountSignalFull(OAIHttpRequestWorker *worker, OAICredentialListResult summary);
    void credentialUpdateSignalFull(OAIHttpRequestWorker *worker, OAICredential summary);

    Q_DECL_DEPRECATED_X("Use credentialCreateOrUpdateSignalError() instead")
    void credentialCreateOrUpdateSignalE(OAICredential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void credentialCreateOrUpdateSignalError(OAICredential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use credentialDeleteSignalError() instead")
    void credentialDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void credentialDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use credentialGetSignalError() instead")
    void credentialGetSignalE(OAICredential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void credentialGetSignalError(OAICredential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use credentialListByAutomationAccountSignalError() instead")
    void credentialListByAutomationAccountSignalE(OAICredentialListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void credentialListByAutomationAccountSignalError(OAICredentialListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use credentialUpdateSignalError() instead")
    void credentialUpdateSignalE(OAICredential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void credentialUpdateSignalError(OAICredential summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use credentialCreateOrUpdateSignalErrorFull() instead")
    void credentialCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void credentialCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use credentialDeleteSignalErrorFull() instead")
    void credentialDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void credentialDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use credentialGetSignalErrorFull() instead")
    void credentialGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void credentialGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use credentialListByAutomationAccountSignalErrorFull() instead")
    void credentialListByAutomationAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void credentialListByAutomationAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use credentialUpdateSignalErrorFull() instead")
    void credentialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void credentialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
