/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ScriptActionsGetExecutionDetail200ResponseAllOfExecutionSummaryInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The execution details of a script action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:26.436067-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScriptActionsGetExecutionDetail200Response {
  public static final String SERIALIZED_NAME_APPLICATION_NAME = "applicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private String parameters;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<String> roles = new ArrayList<>();

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_DEBUG_INFORMATION = "debugInformation";
  @SerializedName(SERIALIZED_NAME_DEBUG_INFORMATION)
  private String debugInformation;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_EXECUTION_SUMMARY = "executionSummary";
  @SerializedName(SERIALIZED_NAME_EXECUTION_SUMMARY)
  private List<ScriptActionsGetExecutionDetail200ResponseAllOfExecutionSummaryInner> executionSummary = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_SCRIPT_EXECUTION_ID = "scriptExecutionId";
  @SerializedName(SERIALIZED_NAME_SCRIPT_EXECUTION_ID)
  private Long scriptExecutionId;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public ScriptActionsGetExecutionDetail200Response() {
  }

  public ScriptActionsGetExecutionDetail200Response(
     String applicationName, 
     String debugInformation, 
     String endTime, 
     List<ScriptActionsGetExecutionDetail200ResponseAllOfExecutionSummaryInner> executionSummary, 
     String operation, 
     Long scriptExecutionId, 
     String startTime, 
     String status
  ) {
    this();
    this.applicationName = applicationName;
    this.debugInformation = debugInformation;
    this.endTime = endTime;
    this.executionSummary = executionSummary;
    this.operation = operation;
    this.scriptExecutionId = scriptExecutionId;
    this.startTime = startTime;
    this.status = status;
  }

  /**
   * The application name of the script action, if any.
   * @return applicationName
   */
  @javax.annotation.Nullable
  public String getApplicationName() {
    return applicationName;
  }



  public ScriptActionsGetExecutionDetail200Response name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the script action.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ScriptActionsGetExecutionDetail200Response parameters(String parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * The parameters for the script
   * @return parameters
   */
  @javax.annotation.Nullable
  public String getParameters() {
    return parameters;
  }

  public void setParameters(String parameters) {
    this.parameters = parameters;
  }


  public ScriptActionsGetExecutionDetail200Response roles(List<String> roles) {
    this.roles = roles;
    return this;
  }

  public ScriptActionsGetExecutionDetail200Response addRolesItem(String rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * The list of roles where script will be executed.
   * @return roles
   */
  @javax.annotation.Nonnull
  public List<String> getRoles() {
    return roles;
  }

  public void setRoles(List<String> roles) {
    this.roles = roles;
  }


  public ScriptActionsGetExecutionDetail200Response uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The URI to the script.
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  /**
   * The script action execution debug information.
   * @return debugInformation
   */
  @javax.annotation.Nullable
  public String getDebugInformation() {
    return debugInformation;
  }



  /**
   * The end time of script action execution.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }



  /**
   * The summary of script action execution result.
   * @return executionSummary
   */
  @javax.annotation.Nullable
  public List<ScriptActionsGetExecutionDetail200ResponseAllOfExecutionSummaryInner> getExecutionSummary() {
    return executionSummary;
  }



  /**
   * The reason why the script action was executed.
   * @return operation
   */
  @javax.annotation.Nullable
  public String getOperation() {
    return operation;
  }



  /**
   * The execution id of the script action.
   * @return scriptExecutionId
   */
  @javax.annotation.Nullable
  public Long getScriptExecutionId() {
    return scriptExecutionId;
  }



  /**
   * The start time of script action execution.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }



  /**
   * The current execution status of the script action.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScriptActionsGetExecutionDetail200Response scriptActionsGetExecutionDetail200Response = (ScriptActionsGetExecutionDetail200Response) o;
    return Objects.equals(this.applicationName, scriptActionsGetExecutionDetail200Response.applicationName) &&
        Objects.equals(this.name, scriptActionsGetExecutionDetail200Response.name) &&
        Objects.equals(this.parameters, scriptActionsGetExecutionDetail200Response.parameters) &&
        Objects.equals(this.roles, scriptActionsGetExecutionDetail200Response.roles) &&
        Objects.equals(this.uri, scriptActionsGetExecutionDetail200Response.uri) &&
        Objects.equals(this.debugInformation, scriptActionsGetExecutionDetail200Response.debugInformation) &&
        Objects.equals(this.endTime, scriptActionsGetExecutionDetail200Response.endTime) &&
        Objects.equals(this.executionSummary, scriptActionsGetExecutionDetail200Response.executionSummary) &&
        Objects.equals(this.operation, scriptActionsGetExecutionDetail200Response.operation) &&
        Objects.equals(this.scriptExecutionId, scriptActionsGetExecutionDetail200Response.scriptExecutionId) &&
        Objects.equals(this.startTime, scriptActionsGetExecutionDetail200Response.startTime) &&
        Objects.equals(this.status, scriptActionsGetExecutionDetail200Response.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationName, name, parameters, roles, uri, debugInformation, endTime, executionSummary, operation, scriptExecutionId, startTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScriptActionsGetExecutionDetail200Response {\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    debugInformation: ").append(toIndentedString(debugInformation)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    executionSummary: ").append(toIndentedString(executionSummary)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    scriptExecutionId: ").append(toIndentedString(scriptExecutionId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationName");
    openapiFields.add("name");
    openapiFields.add("parameters");
    openapiFields.add("roles");
    openapiFields.add("uri");
    openapiFields.add("debugInformation");
    openapiFields.add("endTime");
    openapiFields.add("executionSummary");
    openapiFields.add("operation");
    openapiFields.add("scriptExecutionId");
    openapiFields.add("startTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("roles");
    openapiRequiredFields.add("uri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScriptActionsGetExecutionDetail200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScriptActionsGetExecutionDetail200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScriptActionsGetExecutionDetail200Response is not found in the empty JSON string", ScriptActionsGetExecutionDetail200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScriptActionsGetExecutionDetail200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScriptActionsGetExecutionDetail200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScriptActionsGetExecutionDetail200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("applicationName") != null && !jsonObj.get("applicationName").isJsonNull()) && !jsonObj.get("applicationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationName").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) && !jsonObj.get("parameters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("roles") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("debugInformation") != null && !jsonObj.get("debugInformation").isJsonNull()) && !jsonObj.get("debugInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debugInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debugInformation").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if (jsonObj.get("executionSummary") != null && !jsonObj.get("executionSummary").isJsonNull()) {
        JsonArray jsonArrayexecutionSummary = jsonObj.getAsJsonArray("executionSummary");
        if (jsonArrayexecutionSummary != null) {
          // ensure the json data is an array
          if (!jsonObj.get("executionSummary").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `executionSummary` to be an array in the JSON string but got `%s`", jsonObj.get("executionSummary").toString()));
          }

          // validate the optional field `executionSummary` (array)
          for (int i = 0; i < jsonArrayexecutionSummary.size(); i++) {
            ScriptActionsGetExecutionDetail200ResponseAllOfExecutionSummaryInner.validateJsonElement(jsonArrayexecutionSummary.get(i));
          };
        }
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScriptActionsGetExecutionDetail200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScriptActionsGetExecutionDetail200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScriptActionsGetExecutionDetail200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScriptActionsGetExecutionDetail200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ScriptActionsGetExecutionDetail200Response>() {
           @Override
           public void write(JsonWriter out, ScriptActionsGetExecutionDetail200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScriptActionsGetExecutionDetail200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScriptActionsGetExecutionDetail200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScriptActionsGetExecutionDetail200Response
   * @throws IOException if the JSON string is invalid with respect to ScriptActionsGetExecutionDetail200Response
   */
  public static ScriptActionsGetExecutionDetail200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScriptActionsGetExecutionDetail200Response.class);
  }

  /**
   * Convert an instance of ScriptActionsGetExecutionDetail200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

