# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.managed_cluster_load_balancer_profile import ManagedClusterLoadBalancerProfile
import re
from openapi_server import util


class ContainerServiceNetworkProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_service_ip: str='10.0.0.10', docker_bridge_cidr: str='172.17.0.1/16', load_balancer_profile: ManagedClusterLoadBalancerProfile=None, load_balancer_sku: str=None, network_plugin: str='kubenet', network_policy: str=None, pod_cidr: str='10.244.0.0/16', service_cidr: str='10.0.0.0/16'):
        """ContainerServiceNetworkProfile - a model defined in OpenAPI

        :param dns_service_ip: The dns_service_ip of this ContainerServiceNetworkProfile.
        :param docker_bridge_cidr: The docker_bridge_cidr of this ContainerServiceNetworkProfile.
        :param load_balancer_profile: The load_balancer_profile of this ContainerServiceNetworkProfile.
        :param load_balancer_sku: The load_balancer_sku of this ContainerServiceNetworkProfile.
        :param network_plugin: The network_plugin of this ContainerServiceNetworkProfile.
        :param network_policy: The network_policy of this ContainerServiceNetworkProfile.
        :param pod_cidr: The pod_cidr of this ContainerServiceNetworkProfile.
        :param service_cidr: The service_cidr of this ContainerServiceNetworkProfile.
        """
        self.openapi_types = {
            'dns_service_ip': str,
            'docker_bridge_cidr': str,
            'load_balancer_profile': ManagedClusterLoadBalancerProfile,
            'load_balancer_sku': str,
            'network_plugin': str,
            'network_policy': str,
            'pod_cidr': str,
            'service_cidr': str
        }

        self.attribute_map = {
            'dns_service_ip': 'dnsServiceIP',
            'docker_bridge_cidr': 'dockerBridgeCidr',
            'load_balancer_profile': 'loadBalancerProfile',
            'load_balancer_sku': 'loadBalancerSku',
            'network_plugin': 'networkPlugin',
            'network_policy': 'networkPolicy',
            'pod_cidr': 'podCidr',
            'service_cidr': 'serviceCidr'
        }

        self._dns_service_ip = dns_service_ip
        self._docker_bridge_cidr = docker_bridge_cidr
        self._load_balancer_profile = load_balancer_profile
        self._load_balancer_sku = load_balancer_sku
        self._network_plugin = network_plugin
        self._network_policy = network_policy
        self._pod_cidr = pod_cidr
        self._service_cidr = service_cidr

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerServiceNetworkProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerServiceNetworkProfile of this ContainerServiceNetworkProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_service_ip(self):
        """Gets the dns_service_ip of this ContainerServiceNetworkProfile.

        An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.

        :return: The dns_service_ip of this ContainerServiceNetworkProfile.
        :rtype: str
        """
        return self._dns_service_ip

    @dns_service_ip.setter
    def dns_service_ip(self, dns_service_ip):
        """Sets the dns_service_ip of this ContainerServiceNetworkProfile.

        An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.

        :param dns_service_ip: The dns_service_ip of this ContainerServiceNetworkProfile.
        :type dns_service_ip: str
        """
        if dns_service_ip is not None and not re.search(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', dns_service_ip):
            raise ValueError("Invalid value for `dns_service_ip`, must be a follow pattern or equal to `/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/`")

        self._dns_service_ip = dns_service_ip

    @property
    def docker_bridge_cidr(self):
        """Gets the docker_bridge_cidr of this ContainerServiceNetworkProfile.

        A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.

        :return: The docker_bridge_cidr of this ContainerServiceNetworkProfile.
        :rtype: str
        """
        return self._docker_bridge_cidr

    @docker_bridge_cidr.setter
    def docker_bridge_cidr(self, docker_bridge_cidr):
        """Sets the docker_bridge_cidr of this ContainerServiceNetworkProfile.

        A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.

        :param docker_bridge_cidr: The docker_bridge_cidr of this ContainerServiceNetworkProfile.
        :type docker_bridge_cidr: str
        """
        if docker_bridge_cidr is not None and not re.search(r'^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$', docker_bridge_cidr):
            raise ValueError("Invalid value for `docker_bridge_cidr`, must be a follow pattern or equal to `/^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/`")

        self._docker_bridge_cidr = docker_bridge_cidr

    @property
    def load_balancer_profile(self):
        """Gets the load_balancer_profile of this ContainerServiceNetworkProfile.


        :return: The load_balancer_profile of this ContainerServiceNetworkProfile.
        :rtype: ManagedClusterLoadBalancerProfile
        """
        return self._load_balancer_profile

    @load_balancer_profile.setter
    def load_balancer_profile(self, load_balancer_profile):
        """Sets the load_balancer_profile of this ContainerServiceNetworkProfile.


        :param load_balancer_profile: The load_balancer_profile of this ContainerServiceNetworkProfile.
        :type load_balancer_profile: ManagedClusterLoadBalancerProfile
        """

        self._load_balancer_profile = load_balancer_profile

    @property
    def load_balancer_sku(self):
        """Gets the load_balancer_sku of this ContainerServiceNetworkProfile.

        The load balancer sku for the managed cluster.

        :return: The load_balancer_sku of this ContainerServiceNetworkProfile.
        :rtype: str
        """
        return self._load_balancer_sku

    @load_balancer_sku.setter
    def load_balancer_sku(self, load_balancer_sku):
        """Sets the load_balancer_sku of this ContainerServiceNetworkProfile.

        The load balancer sku for the managed cluster.

        :param load_balancer_sku: The load_balancer_sku of this ContainerServiceNetworkProfile.
        :type load_balancer_sku: str
        """
        allowed_values = ["standard", "basic"]  # noqa: E501
        if load_balancer_sku not in allowed_values:
            raise ValueError(
                "Invalid value for `load_balancer_sku` ({0}), must be one of {1}"
                .format(load_balancer_sku, allowed_values)
            )

        self._load_balancer_sku = load_balancer_sku

    @property
    def network_plugin(self):
        """Gets the network_plugin of this ContainerServiceNetworkProfile.

        Network plugin used for building Kubernetes network.

        :return: The network_plugin of this ContainerServiceNetworkProfile.
        :rtype: str
        """
        return self._network_plugin

    @network_plugin.setter
    def network_plugin(self, network_plugin):
        """Sets the network_plugin of this ContainerServiceNetworkProfile.

        Network plugin used for building Kubernetes network.

        :param network_plugin: The network_plugin of this ContainerServiceNetworkProfile.
        :type network_plugin: str
        """
        allowed_values = ["azure", "kubenet"]  # noqa: E501
        if network_plugin not in allowed_values:
            raise ValueError(
                "Invalid value for `network_plugin` ({0}), must be one of {1}"
                .format(network_plugin, allowed_values)
            )

        self._network_plugin = network_plugin

    @property
    def network_policy(self):
        """Gets the network_policy of this ContainerServiceNetworkProfile.

        Network policy used for building Kubernetes network.

        :return: The network_policy of this ContainerServiceNetworkProfile.
        :rtype: str
        """
        return self._network_policy

    @network_policy.setter
    def network_policy(self, network_policy):
        """Sets the network_policy of this ContainerServiceNetworkProfile.

        Network policy used for building Kubernetes network.

        :param network_policy: The network_policy of this ContainerServiceNetworkProfile.
        :type network_policy: str
        """
        allowed_values = ["calico", "azure"]  # noqa: E501
        if network_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `network_policy` ({0}), must be one of {1}"
                .format(network_policy, allowed_values)
            )

        self._network_policy = network_policy

    @property
    def pod_cidr(self):
        """Gets the pod_cidr of this ContainerServiceNetworkProfile.

        A CIDR notation IP range from which to assign pod IPs when kubenet is used.

        :return: The pod_cidr of this ContainerServiceNetworkProfile.
        :rtype: str
        """
        return self._pod_cidr

    @pod_cidr.setter
    def pod_cidr(self, pod_cidr):
        """Sets the pod_cidr of this ContainerServiceNetworkProfile.

        A CIDR notation IP range from which to assign pod IPs when kubenet is used.

        :param pod_cidr: The pod_cidr of this ContainerServiceNetworkProfile.
        :type pod_cidr: str
        """
        if pod_cidr is not None and not re.search(r'^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$', pod_cidr):
            raise ValueError("Invalid value for `pod_cidr`, must be a follow pattern or equal to `/^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/`")

        self._pod_cidr = pod_cidr

    @property
    def service_cidr(self):
        """Gets the service_cidr of this ContainerServiceNetworkProfile.

        A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.

        :return: The service_cidr of this ContainerServiceNetworkProfile.
        :rtype: str
        """
        return self._service_cidr

    @service_cidr.setter
    def service_cidr(self, service_cidr):
        """Sets the service_cidr of this ContainerServiceNetworkProfile.

        A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.

        :param service_cidr: The service_cidr of this ContainerServiceNetworkProfile.
        :type service_cidr: str
        """
        if service_cidr is not None and not re.search(r'^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$', service_cidr):
            raise ValueError("Invalid value for `service_cidr`, must be a follow pattern or equal to `/^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/`")

        self._service_cidr = service_cidr
