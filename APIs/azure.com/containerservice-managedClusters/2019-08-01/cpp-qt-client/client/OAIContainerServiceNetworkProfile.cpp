/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerServiceNetworkProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerServiceNetworkProfile::OAIContainerServiceNetworkProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerServiceNetworkProfile::OAIContainerServiceNetworkProfile() {
    this->initializeModel();
}

OAIContainerServiceNetworkProfile::~OAIContainerServiceNetworkProfile() {}

void OAIContainerServiceNetworkProfile::initializeModel() {

    m_dns_service_ip_isSet = false;
    m_dns_service_ip_isValid = false;

    m_docker_bridge_cidr_isSet = false;
    m_docker_bridge_cidr_isValid = false;

    m_load_balancer_profile_isSet = false;
    m_load_balancer_profile_isValid = false;

    m_load_balancer_sku_isSet = false;
    m_load_balancer_sku_isValid = false;

    m_network_plugin_isSet = false;
    m_network_plugin_isValid = false;

    m_network_policy_isSet = false;
    m_network_policy_isValid = false;

    m_pod_cidr_isSet = false;
    m_pod_cidr_isValid = false;

    m_service_cidr_isSet = false;
    m_service_cidr_isValid = false;
}

void OAIContainerServiceNetworkProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerServiceNetworkProfile::fromJsonObject(QJsonObject json) {

    m_dns_service_ip_isValid = ::OpenAPI::fromJsonValue(m_dns_service_ip, json[QString("dnsServiceIP")]);
    m_dns_service_ip_isSet = !json[QString("dnsServiceIP")].isNull() && m_dns_service_ip_isValid;

    m_docker_bridge_cidr_isValid = ::OpenAPI::fromJsonValue(m_docker_bridge_cidr, json[QString("dockerBridgeCidr")]);
    m_docker_bridge_cidr_isSet = !json[QString("dockerBridgeCidr")].isNull() && m_docker_bridge_cidr_isValid;

    m_load_balancer_profile_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_profile, json[QString("loadBalancerProfile")]);
    m_load_balancer_profile_isSet = !json[QString("loadBalancerProfile")].isNull() && m_load_balancer_profile_isValid;

    m_load_balancer_sku_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_sku, json[QString("loadBalancerSku")]);
    m_load_balancer_sku_isSet = !json[QString("loadBalancerSku")].isNull() && m_load_balancer_sku_isValid;

    m_network_plugin_isValid = ::OpenAPI::fromJsonValue(m_network_plugin, json[QString("networkPlugin")]);
    m_network_plugin_isSet = !json[QString("networkPlugin")].isNull() && m_network_plugin_isValid;

    m_network_policy_isValid = ::OpenAPI::fromJsonValue(m_network_policy, json[QString("networkPolicy")]);
    m_network_policy_isSet = !json[QString("networkPolicy")].isNull() && m_network_policy_isValid;

    m_pod_cidr_isValid = ::OpenAPI::fromJsonValue(m_pod_cidr, json[QString("podCidr")]);
    m_pod_cidr_isSet = !json[QString("podCidr")].isNull() && m_pod_cidr_isValid;

    m_service_cidr_isValid = ::OpenAPI::fromJsonValue(m_service_cidr, json[QString("serviceCidr")]);
    m_service_cidr_isSet = !json[QString("serviceCidr")].isNull() && m_service_cidr_isValid;
}

QString OAIContainerServiceNetworkProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerServiceNetworkProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_service_ip_isSet) {
        obj.insert(QString("dnsServiceIP"), ::OpenAPI::toJsonValue(m_dns_service_ip));
    }
    if (m_docker_bridge_cidr_isSet) {
        obj.insert(QString("dockerBridgeCidr"), ::OpenAPI::toJsonValue(m_docker_bridge_cidr));
    }
    if (m_load_balancer_profile.isSet()) {
        obj.insert(QString("loadBalancerProfile"), ::OpenAPI::toJsonValue(m_load_balancer_profile));
    }
    if (m_load_balancer_sku_isSet) {
        obj.insert(QString("loadBalancerSku"), ::OpenAPI::toJsonValue(m_load_balancer_sku));
    }
    if (m_network_plugin_isSet) {
        obj.insert(QString("networkPlugin"), ::OpenAPI::toJsonValue(m_network_plugin));
    }
    if (m_network_policy_isSet) {
        obj.insert(QString("networkPolicy"), ::OpenAPI::toJsonValue(m_network_policy));
    }
    if (m_pod_cidr_isSet) {
        obj.insert(QString("podCidr"), ::OpenAPI::toJsonValue(m_pod_cidr));
    }
    if (m_service_cidr_isSet) {
        obj.insert(QString("serviceCidr"), ::OpenAPI::toJsonValue(m_service_cidr));
    }
    return obj;
}

QString OAIContainerServiceNetworkProfile::getDnsServiceIp() const {
    return m_dns_service_ip;
}
void OAIContainerServiceNetworkProfile::setDnsServiceIp(const QString &dns_service_ip) {
    m_dns_service_ip = dns_service_ip;
    m_dns_service_ip_isSet = true;
}

bool OAIContainerServiceNetworkProfile::is_dns_service_ip_Set() const{
    return m_dns_service_ip_isSet;
}

bool OAIContainerServiceNetworkProfile::is_dns_service_ip_Valid() const{
    return m_dns_service_ip_isValid;
}

QString OAIContainerServiceNetworkProfile::getDockerBridgeCidr() const {
    return m_docker_bridge_cidr;
}
void OAIContainerServiceNetworkProfile::setDockerBridgeCidr(const QString &docker_bridge_cidr) {
    m_docker_bridge_cidr = docker_bridge_cidr;
    m_docker_bridge_cidr_isSet = true;
}

bool OAIContainerServiceNetworkProfile::is_docker_bridge_cidr_Set() const{
    return m_docker_bridge_cidr_isSet;
}

bool OAIContainerServiceNetworkProfile::is_docker_bridge_cidr_Valid() const{
    return m_docker_bridge_cidr_isValid;
}

OAIManagedClusterLoadBalancerProfile OAIContainerServiceNetworkProfile::getLoadBalancerProfile() const {
    return m_load_balancer_profile;
}
void OAIContainerServiceNetworkProfile::setLoadBalancerProfile(const OAIManagedClusterLoadBalancerProfile &load_balancer_profile) {
    m_load_balancer_profile = load_balancer_profile;
    m_load_balancer_profile_isSet = true;
}

bool OAIContainerServiceNetworkProfile::is_load_balancer_profile_Set() const{
    return m_load_balancer_profile_isSet;
}

bool OAIContainerServiceNetworkProfile::is_load_balancer_profile_Valid() const{
    return m_load_balancer_profile_isValid;
}

QString OAIContainerServiceNetworkProfile::getLoadBalancerSku() const {
    return m_load_balancer_sku;
}
void OAIContainerServiceNetworkProfile::setLoadBalancerSku(const QString &load_balancer_sku) {
    m_load_balancer_sku = load_balancer_sku;
    m_load_balancer_sku_isSet = true;
}

bool OAIContainerServiceNetworkProfile::is_load_balancer_sku_Set() const{
    return m_load_balancer_sku_isSet;
}

bool OAIContainerServiceNetworkProfile::is_load_balancer_sku_Valid() const{
    return m_load_balancer_sku_isValid;
}

QString OAIContainerServiceNetworkProfile::getNetworkPlugin() const {
    return m_network_plugin;
}
void OAIContainerServiceNetworkProfile::setNetworkPlugin(const QString &network_plugin) {
    m_network_plugin = network_plugin;
    m_network_plugin_isSet = true;
}

bool OAIContainerServiceNetworkProfile::is_network_plugin_Set() const{
    return m_network_plugin_isSet;
}

bool OAIContainerServiceNetworkProfile::is_network_plugin_Valid() const{
    return m_network_plugin_isValid;
}

QString OAIContainerServiceNetworkProfile::getNetworkPolicy() const {
    return m_network_policy;
}
void OAIContainerServiceNetworkProfile::setNetworkPolicy(const QString &network_policy) {
    m_network_policy = network_policy;
    m_network_policy_isSet = true;
}

bool OAIContainerServiceNetworkProfile::is_network_policy_Set() const{
    return m_network_policy_isSet;
}

bool OAIContainerServiceNetworkProfile::is_network_policy_Valid() const{
    return m_network_policy_isValid;
}

QString OAIContainerServiceNetworkProfile::getPodCidr() const {
    return m_pod_cidr;
}
void OAIContainerServiceNetworkProfile::setPodCidr(const QString &pod_cidr) {
    m_pod_cidr = pod_cidr;
    m_pod_cidr_isSet = true;
}

bool OAIContainerServiceNetworkProfile::is_pod_cidr_Set() const{
    return m_pod_cidr_isSet;
}

bool OAIContainerServiceNetworkProfile::is_pod_cidr_Valid() const{
    return m_pod_cidr_isValid;
}

QString OAIContainerServiceNetworkProfile::getServiceCidr() const {
    return m_service_cidr;
}
void OAIContainerServiceNetworkProfile::setServiceCidr(const QString &service_cidr) {
    m_service_cidr = service_cidr;
    m_service_cidr_isSet = true;
}

bool OAIContainerServiceNetworkProfile::is_service_cidr_Set() const{
    return m_service_cidr_isSet;
}

bool OAIContainerServiceNetworkProfile::is_service_cidr_Valid() const{
    return m_service_cidr_isValid;
}

bool OAIContainerServiceNetworkProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_service_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_bridge_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_plugin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerServiceNetworkProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
