/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AgentPoolType from './AgentPoolType';
import ContainerServiceVMSize from './ContainerServiceVMSize';
import OSType from './OSType';
import ScaleSetEvictionPolicy from './ScaleSetEvictionPolicy';
import ScaleSetPriority from './ScaleSetPriority';

/**
 * The ManagedClusterAgentPoolProfileProperties model module.
 * @module model/ManagedClusterAgentPoolProfileProperties
 * @version 2019-08-01
 */
class ManagedClusterAgentPoolProfileProperties {
    /**
     * Constructs a new <code>ManagedClusterAgentPoolProfileProperties</code>.
     * Properties for the container service agent pool profile.
     * @alias module:model/ManagedClusterAgentPoolProfileProperties
     */
    constructor() { 
        
        ManagedClusterAgentPoolProfileProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManagedClusterAgentPoolProfileProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedClusterAgentPoolProfileProperties} obj Optional instance to populate.
     * @return {module:model/ManagedClusterAgentPoolProfileProperties} The populated <code>ManagedClusterAgentPoolProfileProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedClusterAgentPoolProfileProperties();

            if (data.hasOwnProperty('availabilityZones')) {
                obj['availabilityZones'] = ApiClient.convertToType(data['availabilityZones'], ['String']);
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('enableAutoScaling')) {
                obj['enableAutoScaling'] = ApiClient.convertToType(data['enableAutoScaling'], 'Boolean');
            }
            if (data.hasOwnProperty('enableNodePublicIP')) {
                obj['enableNodePublicIP'] = ApiClient.convertToType(data['enableNodePublicIP'], 'Boolean');
            }
            if (data.hasOwnProperty('maxCount')) {
                obj['maxCount'] = ApiClient.convertToType(data['maxCount'], 'Number');
            }
            if (data.hasOwnProperty('maxPods')) {
                obj['maxPods'] = ApiClient.convertToType(data['maxPods'], 'Number');
            }
            if (data.hasOwnProperty('minCount')) {
                obj['minCount'] = ApiClient.convertToType(data['minCount'], 'Number');
            }
            if (data.hasOwnProperty('nodeTaints')) {
                obj['nodeTaints'] = ApiClient.convertToType(data['nodeTaints'], ['String']);
            }
            if (data.hasOwnProperty('orchestratorVersion')) {
                obj['orchestratorVersion'] = ApiClient.convertToType(data['orchestratorVersion'], 'String');
            }
            if (data.hasOwnProperty('osDiskSizeGB')) {
                obj['osDiskSizeGB'] = ApiClient.convertToType(data['osDiskSizeGB'], 'Number');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = OSType.constructFromObject(data['osType']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('scaleSetEvictionPolicy')) {
                obj['scaleSetEvictionPolicy'] = ScaleSetEvictionPolicy.constructFromObject(data['scaleSetEvictionPolicy']);
            }
            if (data.hasOwnProperty('scaleSetPriority')) {
                obj['scaleSetPriority'] = ScaleSetPriority.constructFromObject(data['scaleSetPriority']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = AgentPoolType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('vmSize')) {
                obj['vmSize'] = ContainerServiceVMSize.constructFromObject(data['vmSize']);
            }
            if (data.hasOwnProperty('vnetSubnetID')) {
                obj['vnetSubnetID'] = ApiClient.convertToType(data['vnetSubnetID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedClusterAgentPoolProfileProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedClusterAgentPoolProfileProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['availabilityZones'])) {
            throw new Error("Expected the field `availabilityZones` to be an array in the JSON data but got " + data['availabilityZones']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nodeTaints'])) {
            throw new Error("Expected the field `nodeTaints` to be an array in the JSON data but got " + data['nodeTaints']);
        }
        // ensure the json data is a string
        if (data['orchestratorVersion'] && !(typeof data['orchestratorVersion'] === 'string' || data['orchestratorVersion'] instanceof String)) {
            throw new Error("Expected the field `orchestratorVersion` to be a primitive type in the JSON string but got " + data['orchestratorVersion']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['vnetSubnetID'] && !(typeof data['vnetSubnetID'] === 'string' || data['vnetSubnetID'] instanceof String)) {
            throw new Error("Expected the field `vnetSubnetID` to be a primitive type in the JSON string but got " + data['vnetSubnetID']);
        }

        return true;
    }


}



/**
 * (PREVIEW) Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
 * @member {Array.<String>} availabilityZones
 */
ManagedClusterAgentPoolProfileProperties.prototype['availabilityZones'] = undefined;

/**
 * Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
 * @member {Number} count
 */
ManagedClusterAgentPoolProfileProperties.prototype['count'] = undefined;

/**
 * Whether to enable auto-scaler
 * @member {Boolean} enableAutoScaling
 */
ManagedClusterAgentPoolProfileProperties.prototype['enableAutoScaling'] = undefined;

/**
 * Enable public IP for nodes
 * @member {Boolean} enableNodePublicIP
 */
ManagedClusterAgentPoolProfileProperties.prototype['enableNodePublicIP'] = undefined;

/**
 * Maximum number of nodes for auto-scaling
 * @member {Number} maxCount
 */
ManagedClusterAgentPoolProfileProperties.prototype['maxCount'] = undefined;

/**
 * Maximum number of pods that can run on a node.
 * @member {Number} maxPods
 */
ManagedClusterAgentPoolProfileProperties.prototype['maxPods'] = undefined;

/**
 * Minimum number of nodes for auto-scaling
 * @member {Number} minCount
 */
ManagedClusterAgentPoolProfileProperties.prototype['minCount'] = undefined;

/**
 * Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
 * @member {Array.<String>} nodeTaints
 */
ManagedClusterAgentPoolProfileProperties.prototype['nodeTaints'] = undefined;

/**
 * Version of orchestrator specified when creating the managed cluster.
 * @member {String} orchestratorVersion
 */
ManagedClusterAgentPoolProfileProperties.prototype['orchestratorVersion'] = undefined;

/**
 * OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
 * @member {Number} osDiskSizeGB
 */
ManagedClusterAgentPoolProfileProperties.prototype['osDiskSizeGB'] = undefined;

/**
 * @member {module:model/OSType} osType
 */
ManagedClusterAgentPoolProfileProperties.prototype['osType'] = undefined;

/**
 * The current deployment or provisioning state, which only appears in the response.
 * @member {String} provisioningState
 */
ManagedClusterAgentPoolProfileProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/ScaleSetEvictionPolicy} scaleSetEvictionPolicy
 */
ManagedClusterAgentPoolProfileProperties.prototype['scaleSetEvictionPolicy'] = undefined;

/**
 * @member {module:model/ScaleSetPriority} scaleSetPriority
 */
ManagedClusterAgentPoolProfileProperties.prototype['scaleSetPriority'] = undefined;

/**
 * @member {module:model/AgentPoolType} type
 */
ManagedClusterAgentPoolProfileProperties.prototype['type'] = undefined;

/**
 * @member {module:model/ContainerServiceVMSize} vmSize
 */
ManagedClusterAgentPoolProfileProperties.prototype['vmSize'] = undefined;

/**
 * VNet SubnetID specifies the VNet's subnet identifier.
 * @member {String} vnetSubnetID
 */
ManagedClusterAgentPoolProfileProperties.prototype['vnetSubnetID'] = undefined;






export default ManagedClusterAgentPoolProfileProperties;

