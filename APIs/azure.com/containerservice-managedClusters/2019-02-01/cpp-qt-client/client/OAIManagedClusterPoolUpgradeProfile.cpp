/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedClusterPoolUpgradeProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedClusterPoolUpgradeProfile::OAIManagedClusterPoolUpgradeProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedClusterPoolUpgradeProfile::OAIManagedClusterPoolUpgradeProfile() {
    this->initializeModel();
}

OAIManagedClusterPoolUpgradeProfile::~OAIManagedClusterPoolUpgradeProfile() {}

void OAIManagedClusterPoolUpgradeProfile::initializeModel() {

    m_kubernetes_version_isSet = false;
    m_kubernetes_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_upgrades_isSet = false;
    m_upgrades_isValid = false;
}

void OAIManagedClusterPoolUpgradeProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedClusterPoolUpgradeProfile::fromJsonObject(QJsonObject json) {

    m_kubernetes_version_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_version, json[QString("kubernetesVersion")]);
    m_kubernetes_version_isSet = !json[QString("kubernetesVersion")].isNull() && m_kubernetes_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_upgrades_isValid = ::OpenAPI::fromJsonValue(m_upgrades, json[QString("upgrades")]);
    m_upgrades_isSet = !json[QString("upgrades")].isNull() && m_upgrades_isValid;
}

QString OAIManagedClusterPoolUpgradeProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedClusterPoolUpgradeProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_kubernetes_version_isSet) {
        obj.insert(QString("kubernetesVersion"), ::OpenAPI::toJsonValue(m_kubernetes_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_type.isSet()) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_upgrades.size() > 0) {
        obj.insert(QString("upgrades"), ::OpenAPI::toJsonValue(m_upgrades));
    }
    return obj;
}

QString OAIManagedClusterPoolUpgradeProfile::getKubernetesVersion() const {
    return m_kubernetes_version;
}
void OAIManagedClusterPoolUpgradeProfile::setKubernetesVersion(const QString &kubernetes_version) {
    m_kubernetes_version = kubernetes_version;
    m_kubernetes_version_isSet = true;
}

bool OAIManagedClusterPoolUpgradeProfile::is_kubernetes_version_Set() const{
    return m_kubernetes_version_isSet;
}

bool OAIManagedClusterPoolUpgradeProfile::is_kubernetes_version_Valid() const{
    return m_kubernetes_version_isValid;
}

QString OAIManagedClusterPoolUpgradeProfile::getName() const {
    return m_name;
}
void OAIManagedClusterPoolUpgradeProfile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIManagedClusterPoolUpgradeProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIManagedClusterPoolUpgradeProfile::is_name_Valid() const{
    return m_name_isValid;
}

OAIOSType OAIManagedClusterPoolUpgradeProfile::getOsType() const {
    return m_os_type;
}
void OAIManagedClusterPoolUpgradeProfile::setOsType(const OAIOSType &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIManagedClusterPoolUpgradeProfile::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIManagedClusterPoolUpgradeProfile::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QList<QString> OAIManagedClusterPoolUpgradeProfile::getUpgrades() const {
    return m_upgrades;
}
void OAIManagedClusterPoolUpgradeProfile::setUpgrades(const QList<QString> &upgrades) {
    m_upgrades = upgrades;
    m_upgrades_isSet = true;
}

bool OAIManagedClusterPoolUpgradeProfile::is_upgrades_Set() const{
    return m_upgrades_isSet;
}

bool OAIManagedClusterPoolUpgradeProfile::is_upgrades_Valid() const{
    return m_upgrades_isValid;
}

bool OAIManagedClusterPoolUpgradeProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kubernetes_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrades.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedClusterPoolUpgradeProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kubernetes_version_isValid && m_os_type_isValid && true;
}

} // namespace OpenAPI
