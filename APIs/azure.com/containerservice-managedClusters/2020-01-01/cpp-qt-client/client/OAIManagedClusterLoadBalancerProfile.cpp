/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedClusterLoadBalancerProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedClusterLoadBalancerProfile::OAIManagedClusterLoadBalancerProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedClusterLoadBalancerProfile::OAIManagedClusterLoadBalancerProfile() {
    this->initializeModel();
}

OAIManagedClusterLoadBalancerProfile::~OAIManagedClusterLoadBalancerProfile() {}

void OAIManagedClusterLoadBalancerProfile::initializeModel() {

    m_allocated_outbound_ports_isSet = false;
    m_allocated_outbound_ports_isValid = false;

    m_effective_outbound_ips_isSet = false;
    m_effective_outbound_ips_isValid = false;

    m_idle_timeout_in_minutes_isSet = false;
    m_idle_timeout_in_minutes_isValid = false;

    m_managed_outbound_ips_isSet = false;
    m_managed_outbound_ips_isValid = false;

    m_outbound_ip_prefixes_isSet = false;
    m_outbound_ip_prefixes_isValid = false;

    m_outbound_ips_isSet = false;
    m_outbound_ips_isValid = false;
}

void OAIManagedClusterLoadBalancerProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedClusterLoadBalancerProfile::fromJsonObject(QJsonObject json) {

    m_allocated_outbound_ports_isValid = ::OpenAPI::fromJsonValue(m_allocated_outbound_ports, json[QString("allocatedOutboundPorts")]);
    m_allocated_outbound_ports_isSet = !json[QString("allocatedOutboundPorts")].isNull() && m_allocated_outbound_ports_isValid;

    m_effective_outbound_ips_isValid = ::OpenAPI::fromJsonValue(m_effective_outbound_ips, json[QString("effectiveOutboundIPs")]);
    m_effective_outbound_ips_isSet = !json[QString("effectiveOutboundIPs")].isNull() && m_effective_outbound_ips_isValid;

    m_idle_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_idle_timeout_in_minutes, json[QString("idleTimeoutInMinutes")]);
    m_idle_timeout_in_minutes_isSet = !json[QString("idleTimeoutInMinutes")].isNull() && m_idle_timeout_in_minutes_isValid;

    m_managed_outbound_ips_isValid = ::OpenAPI::fromJsonValue(m_managed_outbound_ips, json[QString("managedOutboundIPs")]);
    m_managed_outbound_ips_isSet = !json[QString("managedOutboundIPs")].isNull() && m_managed_outbound_ips_isValid;

    m_outbound_ip_prefixes_isValid = ::OpenAPI::fromJsonValue(m_outbound_ip_prefixes, json[QString("outboundIPPrefixes")]);
    m_outbound_ip_prefixes_isSet = !json[QString("outboundIPPrefixes")].isNull() && m_outbound_ip_prefixes_isValid;

    m_outbound_ips_isValid = ::OpenAPI::fromJsonValue(m_outbound_ips, json[QString("outboundIPs")]);
    m_outbound_ips_isSet = !json[QString("outboundIPs")].isNull() && m_outbound_ips_isValid;
}

QString OAIManagedClusterLoadBalancerProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedClusterLoadBalancerProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_allocated_outbound_ports_isSet) {
        obj.insert(QString("allocatedOutboundPorts"), ::OpenAPI::toJsonValue(m_allocated_outbound_ports));
    }
    if (m_effective_outbound_ips.size() > 0) {
        obj.insert(QString("effectiveOutboundIPs"), ::OpenAPI::toJsonValue(m_effective_outbound_ips));
    }
    if (m_idle_timeout_in_minutes_isSet) {
        obj.insert(QString("idleTimeoutInMinutes"), ::OpenAPI::toJsonValue(m_idle_timeout_in_minutes));
    }
    if (m_managed_outbound_ips.isSet()) {
        obj.insert(QString("managedOutboundIPs"), ::OpenAPI::toJsonValue(m_managed_outbound_ips));
    }
    if (m_outbound_ip_prefixes.isSet()) {
        obj.insert(QString("outboundIPPrefixes"), ::OpenAPI::toJsonValue(m_outbound_ip_prefixes));
    }
    if (m_outbound_ips.isSet()) {
        obj.insert(QString("outboundIPs"), ::OpenAPI::toJsonValue(m_outbound_ips));
    }
    return obj;
}

qint32 OAIManagedClusterLoadBalancerProfile::getAllocatedOutboundPorts() const {
    return m_allocated_outbound_ports;
}
void OAIManagedClusterLoadBalancerProfile::setAllocatedOutboundPorts(const qint32 &allocated_outbound_ports) {
    m_allocated_outbound_ports = allocated_outbound_ports;
    m_allocated_outbound_ports_isSet = true;
}

bool OAIManagedClusterLoadBalancerProfile::is_allocated_outbound_ports_Set() const{
    return m_allocated_outbound_ports_isSet;
}

bool OAIManagedClusterLoadBalancerProfile::is_allocated_outbound_ports_Valid() const{
    return m_allocated_outbound_ports_isValid;
}

QList<OAIResourceReference> OAIManagedClusterLoadBalancerProfile::getEffectiveOutboundIps() const {
    return m_effective_outbound_ips;
}
void OAIManagedClusterLoadBalancerProfile::setEffectiveOutboundIps(const QList<OAIResourceReference> &effective_outbound_ips) {
    m_effective_outbound_ips = effective_outbound_ips;
    m_effective_outbound_ips_isSet = true;
}

bool OAIManagedClusterLoadBalancerProfile::is_effective_outbound_ips_Set() const{
    return m_effective_outbound_ips_isSet;
}

bool OAIManagedClusterLoadBalancerProfile::is_effective_outbound_ips_Valid() const{
    return m_effective_outbound_ips_isValid;
}

qint32 OAIManagedClusterLoadBalancerProfile::getIdleTimeoutInMinutes() const {
    return m_idle_timeout_in_minutes;
}
void OAIManagedClusterLoadBalancerProfile::setIdleTimeoutInMinutes(const qint32 &idle_timeout_in_minutes) {
    m_idle_timeout_in_minutes = idle_timeout_in_minutes;
    m_idle_timeout_in_minutes_isSet = true;
}

bool OAIManagedClusterLoadBalancerProfile::is_idle_timeout_in_minutes_Set() const{
    return m_idle_timeout_in_minutes_isSet;
}

bool OAIManagedClusterLoadBalancerProfile::is_idle_timeout_in_minutes_Valid() const{
    return m_idle_timeout_in_minutes_isValid;
}

OAIManagedClusterLoadBalancerProfile_managedOutboundIPs OAIManagedClusterLoadBalancerProfile::getManagedOutboundIps() const {
    return m_managed_outbound_ips;
}
void OAIManagedClusterLoadBalancerProfile::setManagedOutboundIps(const OAIManagedClusterLoadBalancerProfile_managedOutboundIPs &managed_outbound_ips) {
    m_managed_outbound_ips = managed_outbound_ips;
    m_managed_outbound_ips_isSet = true;
}

bool OAIManagedClusterLoadBalancerProfile::is_managed_outbound_ips_Set() const{
    return m_managed_outbound_ips_isSet;
}

bool OAIManagedClusterLoadBalancerProfile::is_managed_outbound_ips_Valid() const{
    return m_managed_outbound_ips_isValid;
}

OAIManagedClusterLoadBalancerProfile_outboundIPPrefixes OAIManagedClusterLoadBalancerProfile::getOutboundIpPrefixes() const {
    return m_outbound_ip_prefixes;
}
void OAIManagedClusterLoadBalancerProfile::setOutboundIpPrefixes(const OAIManagedClusterLoadBalancerProfile_outboundIPPrefixes &outbound_ip_prefixes) {
    m_outbound_ip_prefixes = outbound_ip_prefixes;
    m_outbound_ip_prefixes_isSet = true;
}

bool OAIManagedClusterLoadBalancerProfile::is_outbound_ip_prefixes_Set() const{
    return m_outbound_ip_prefixes_isSet;
}

bool OAIManagedClusterLoadBalancerProfile::is_outbound_ip_prefixes_Valid() const{
    return m_outbound_ip_prefixes_isValid;
}

OAIManagedClusterLoadBalancerProfile_outboundIPs OAIManagedClusterLoadBalancerProfile::getOutboundIps() const {
    return m_outbound_ips;
}
void OAIManagedClusterLoadBalancerProfile::setOutboundIps(const OAIManagedClusterLoadBalancerProfile_outboundIPs &outbound_ips) {
    m_outbound_ips = outbound_ips;
    m_outbound_ips_isSet = true;
}

bool OAIManagedClusterLoadBalancerProfile::is_outbound_ips_Set() const{
    return m_outbound_ips_isSet;
}

bool OAIManagedClusterLoadBalancerProfile::is_outbound_ips_Valid() const{
    return m_outbound_ips_isValid;
}

bool OAIManagedClusterLoadBalancerProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocated_outbound_ports_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_outbound_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_outbound_ips.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_ip_prefixes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_ips.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedClusterLoadBalancerProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
