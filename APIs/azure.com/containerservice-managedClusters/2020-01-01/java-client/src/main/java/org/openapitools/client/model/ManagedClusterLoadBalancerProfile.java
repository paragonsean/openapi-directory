/*
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ManagedClusterLoadBalancerProfileManagedOutboundIPs;
import org.openapitools.client.model.ManagedClusterLoadBalancerProfileOutboundIPPrefixes;
import org.openapitools.client.model.ManagedClusterLoadBalancerProfileOutboundIPs;
import org.openapitools.client.model.ResourceReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Profile of the managed cluster load balancer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:05:39.072658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedClusterLoadBalancerProfile {
  public static final String SERIALIZED_NAME_ALLOCATED_OUTBOUND_PORTS = "allocatedOutboundPorts";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_OUTBOUND_PORTS)
  private Integer allocatedOutboundPorts = 0;

  public static final String SERIALIZED_NAME_EFFECTIVE_OUTBOUND_I_PS = "effectiveOutboundIPs";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_OUTBOUND_I_PS)
  private List<ResourceReference> effectiveOutboundIPs = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDLE_TIMEOUT_IN_MINUTES = "idleTimeoutInMinutes";
  @SerializedName(SERIALIZED_NAME_IDLE_TIMEOUT_IN_MINUTES)
  private Integer idleTimeoutInMinutes = 30;

  public static final String SERIALIZED_NAME_MANAGED_OUTBOUND_I_PS = "managedOutboundIPs";
  @SerializedName(SERIALIZED_NAME_MANAGED_OUTBOUND_I_PS)
  private ManagedClusterLoadBalancerProfileManagedOutboundIPs managedOutboundIPs;

  public static final String SERIALIZED_NAME_OUTBOUND_I_P_PREFIXES = "outboundIPPrefixes";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_I_P_PREFIXES)
  private ManagedClusterLoadBalancerProfileOutboundIPPrefixes outboundIPPrefixes;

  public static final String SERIALIZED_NAME_OUTBOUND_I_PS = "outboundIPs";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_I_PS)
  private ManagedClusterLoadBalancerProfileOutboundIPs outboundIPs;

  public ManagedClusterLoadBalancerProfile() {
  }

  public ManagedClusterLoadBalancerProfile allocatedOutboundPorts(Integer allocatedOutboundPorts) {
    this.allocatedOutboundPorts = allocatedOutboundPorts;
    return this;
  }

  /**
   * Desired number of allocated SNAT ports per VM. Allowed values must be in the range of 0 to 64000 (inclusive). The default value is 0 which results in Azure dynamically allocating ports.
   * minimum: 0
   * maximum: 64000
   * @return allocatedOutboundPorts
   */
  @javax.annotation.Nullable
  public Integer getAllocatedOutboundPorts() {
    return allocatedOutboundPorts;
  }

  public void setAllocatedOutboundPorts(Integer allocatedOutboundPorts) {
    this.allocatedOutboundPorts = allocatedOutboundPorts;
  }


  public ManagedClusterLoadBalancerProfile effectiveOutboundIPs(List<ResourceReference> effectiveOutboundIPs) {
    this.effectiveOutboundIPs = effectiveOutboundIPs;
    return this;
  }

  public ManagedClusterLoadBalancerProfile addEffectiveOutboundIPsItem(ResourceReference effectiveOutboundIPsItem) {
    if (this.effectiveOutboundIPs == null) {
      this.effectiveOutboundIPs = new ArrayList<>();
    }
    this.effectiveOutboundIPs.add(effectiveOutboundIPsItem);
    return this;
  }

  /**
   * The effective outbound IP resources of the cluster load balancer.
   * @return effectiveOutboundIPs
   */
  @javax.annotation.Nullable
  public List<ResourceReference> getEffectiveOutboundIPs() {
    return effectiveOutboundIPs;
  }

  public void setEffectiveOutboundIPs(List<ResourceReference> effectiveOutboundIPs) {
    this.effectiveOutboundIPs = effectiveOutboundIPs;
  }


  public ManagedClusterLoadBalancerProfile idleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
    this.idleTimeoutInMinutes = idleTimeoutInMinutes;
    return this;
  }

  /**
   * Desired outbound flow idle timeout in minutes. Allowed values must be in the range of 4 to 120 (inclusive). The default value is 30 minutes.
   * minimum: 4
   * maximum: 120
   * @return idleTimeoutInMinutes
   */
  @javax.annotation.Nullable
  public Integer getIdleTimeoutInMinutes() {
    return idleTimeoutInMinutes;
  }

  public void setIdleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
    this.idleTimeoutInMinutes = idleTimeoutInMinutes;
  }


  public ManagedClusterLoadBalancerProfile managedOutboundIPs(ManagedClusterLoadBalancerProfileManagedOutboundIPs managedOutboundIPs) {
    this.managedOutboundIPs = managedOutboundIPs;
    return this;
  }

  /**
   * Get managedOutboundIPs
   * @return managedOutboundIPs
   */
  @javax.annotation.Nullable
  public ManagedClusterLoadBalancerProfileManagedOutboundIPs getManagedOutboundIPs() {
    return managedOutboundIPs;
  }

  public void setManagedOutboundIPs(ManagedClusterLoadBalancerProfileManagedOutboundIPs managedOutboundIPs) {
    this.managedOutboundIPs = managedOutboundIPs;
  }


  public ManagedClusterLoadBalancerProfile outboundIPPrefixes(ManagedClusterLoadBalancerProfileOutboundIPPrefixes outboundIPPrefixes) {
    this.outboundIPPrefixes = outboundIPPrefixes;
    return this;
  }

  /**
   * Get outboundIPPrefixes
   * @return outboundIPPrefixes
   */
  @javax.annotation.Nullable
  public ManagedClusterLoadBalancerProfileOutboundIPPrefixes getOutboundIPPrefixes() {
    return outboundIPPrefixes;
  }

  public void setOutboundIPPrefixes(ManagedClusterLoadBalancerProfileOutboundIPPrefixes outboundIPPrefixes) {
    this.outboundIPPrefixes = outboundIPPrefixes;
  }


  public ManagedClusterLoadBalancerProfile outboundIPs(ManagedClusterLoadBalancerProfileOutboundIPs outboundIPs) {
    this.outboundIPs = outboundIPs;
    return this;
  }

  /**
   * Get outboundIPs
   * @return outboundIPs
   */
  @javax.annotation.Nullable
  public ManagedClusterLoadBalancerProfileOutboundIPs getOutboundIPs() {
    return outboundIPs;
  }

  public void setOutboundIPs(ManagedClusterLoadBalancerProfileOutboundIPs outboundIPs) {
    this.outboundIPs = outboundIPs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedClusterLoadBalancerProfile managedClusterLoadBalancerProfile = (ManagedClusterLoadBalancerProfile) o;
    return Objects.equals(this.allocatedOutboundPorts, managedClusterLoadBalancerProfile.allocatedOutboundPorts) &&
        Objects.equals(this.effectiveOutboundIPs, managedClusterLoadBalancerProfile.effectiveOutboundIPs) &&
        Objects.equals(this.idleTimeoutInMinutes, managedClusterLoadBalancerProfile.idleTimeoutInMinutes) &&
        Objects.equals(this.managedOutboundIPs, managedClusterLoadBalancerProfile.managedOutboundIPs) &&
        Objects.equals(this.outboundIPPrefixes, managedClusterLoadBalancerProfile.outboundIPPrefixes) &&
        Objects.equals(this.outboundIPs, managedClusterLoadBalancerProfile.outboundIPs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocatedOutboundPorts, effectiveOutboundIPs, idleTimeoutInMinutes, managedOutboundIPs, outboundIPPrefixes, outboundIPs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedClusterLoadBalancerProfile {\n");
    sb.append("    allocatedOutboundPorts: ").append(toIndentedString(allocatedOutboundPorts)).append("\n");
    sb.append("    effectiveOutboundIPs: ").append(toIndentedString(effectiveOutboundIPs)).append("\n");
    sb.append("    idleTimeoutInMinutes: ").append(toIndentedString(idleTimeoutInMinutes)).append("\n");
    sb.append("    managedOutboundIPs: ").append(toIndentedString(managedOutboundIPs)).append("\n");
    sb.append("    outboundIPPrefixes: ").append(toIndentedString(outboundIPPrefixes)).append("\n");
    sb.append("    outboundIPs: ").append(toIndentedString(outboundIPs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocatedOutboundPorts");
    openapiFields.add("effectiveOutboundIPs");
    openapiFields.add("idleTimeoutInMinutes");
    openapiFields.add("managedOutboundIPs");
    openapiFields.add("outboundIPPrefixes");
    openapiFields.add("outboundIPs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedClusterLoadBalancerProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedClusterLoadBalancerProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedClusterLoadBalancerProfile is not found in the empty JSON string", ManagedClusterLoadBalancerProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedClusterLoadBalancerProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedClusterLoadBalancerProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("effectiveOutboundIPs") != null && !jsonObj.get("effectiveOutboundIPs").isJsonNull()) {
        JsonArray jsonArrayeffectiveOutboundIPs = jsonObj.getAsJsonArray("effectiveOutboundIPs");
        if (jsonArrayeffectiveOutboundIPs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("effectiveOutboundIPs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `effectiveOutboundIPs` to be an array in the JSON string but got `%s`", jsonObj.get("effectiveOutboundIPs").toString()));
          }

          // validate the optional field `effectiveOutboundIPs` (array)
          for (int i = 0; i < jsonArrayeffectiveOutboundIPs.size(); i++) {
            ResourceReference.validateJsonElement(jsonArrayeffectiveOutboundIPs.get(i));
          };
        }
      }
      // validate the optional field `managedOutboundIPs`
      if (jsonObj.get("managedOutboundIPs") != null && !jsonObj.get("managedOutboundIPs").isJsonNull()) {
        ManagedClusterLoadBalancerProfileManagedOutboundIPs.validateJsonElement(jsonObj.get("managedOutboundIPs"));
      }
      // validate the optional field `outboundIPPrefixes`
      if (jsonObj.get("outboundIPPrefixes") != null && !jsonObj.get("outboundIPPrefixes").isJsonNull()) {
        ManagedClusterLoadBalancerProfileOutboundIPPrefixes.validateJsonElement(jsonObj.get("outboundIPPrefixes"));
      }
      // validate the optional field `outboundIPs`
      if (jsonObj.get("outboundIPs") != null && !jsonObj.get("outboundIPs").isJsonNull()) {
        ManagedClusterLoadBalancerProfileOutboundIPs.validateJsonElement(jsonObj.get("outboundIPs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedClusterLoadBalancerProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedClusterLoadBalancerProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedClusterLoadBalancerProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedClusterLoadBalancerProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedClusterLoadBalancerProfile>() {
           @Override
           public void write(JsonWriter out, ManagedClusterLoadBalancerProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedClusterLoadBalancerProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedClusterLoadBalancerProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedClusterLoadBalancerProfile
   * @throws IOException if the JSON string is invalid with respect to ManagedClusterLoadBalancerProfile
   */
  public static ManagedClusterLoadBalancerProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedClusterLoadBalancerProfile.class);
  }

  /**
   * Convert an instance of ManagedClusterLoadBalancerProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

