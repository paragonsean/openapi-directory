# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ManagedClusterWindowsProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_password: str=None, admin_username: str=None):
        """ManagedClusterWindowsProfile - a model defined in OpenAPI

        :param admin_password: The admin_password of this ManagedClusterWindowsProfile.
        :param admin_username: The admin_username of this ManagedClusterWindowsProfile.
        """
        self.openapi_types = {
            'admin_password': str,
            'admin_username': str
        }

        self.attribute_map = {
            'admin_password': 'adminPassword',
            'admin_username': 'adminUsername'
        }

        self._admin_password = admin_password
        self._admin_username = admin_username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedClusterWindowsProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedClusterWindowsProfile of this ManagedClusterWindowsProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_password(self):
        """Gets the admin_password of this ManagedClusterWindowsProfile.

        The administrator password to use for Windows VMs.

        :return: The admin_password of this ManagedClusterWindowsProfile.
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this ManagedClusterWindowsProfile.

        The administrator password to use for Windows VMs.

        :param admin_password: The admin_password of this ManagedClusterWindowsProfile.
        :type admin_password: str
        """
        if admin_password is not None and not re.search(r'^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%\^&\*\(\)])[a-zA-Z\d!@#$%\^&\*\(\)]{12,123}$', admin_password):
            raise ValueError("Invalid value for `admin_password`, must be a follow pattern or equal to `/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%\^&\*\(\)])[a-zA-Z\d!@#$%\^&\*\(\)]{12,123}$/`")

        self._admin_password = admin_password

    @property
    def admin_username(self):
        """Gets the admin_username of this ManagedClusterWindowsProfile.

        The administrator username to use for Windows VMs.

        :return: The admin_username of this ManagedClusterWindowsProfile.
        :rtype: str
        """
        return self._admin_username

    @admin_username.setter
    def admin_username(self, admin_username):
        """Sets the admin_username of this ManagedClusterWindowsProfile.

        The administrator username to use for Windows VMs.

        :param admin_username: The admin_username of this ManagedClusterWindowsProfile.
        :type admin_username: str
        """
        if admin_username is None:
            raise ValueError("Invalid value for `admin_username`, must not be `None`")
        if admin_username is not None and not re.search(r'^[a-zA-Z0-9]+([._]?[a-zA-Z0-9]+)*$', admin_username):
            raise ValueError("Invalid value for `admin_username`, must be a follow pattern or equal to `/^[a-zA-Z0-9]+([._]?[a-zA-Z0-9]+)*$/`")

        self._admin_username = admin_username
