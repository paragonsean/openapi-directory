/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrchestratorProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrchestratorProfile::OAIOrchestratorProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrchestratorProfile::OAIOrchestratorProfile() {
    this->initializeModel();
}

OAIOrchestratorProfile::~OAIOrchestratorProfile() {}

void OAIOrchestratorProfile::initializeModel() {

    m_orchestrator_type_isSet = false;
    m_orchestrator_type_isValid = false;

    m_orchestrator_version_isSet = false;
    m_orchestrator_version_isValid = false;
}

void OAIOrchestratorProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrchestratorProfile::fromJsonObject(QJsonObject json) {

    m_orchestrator_type_isValid = ::OpenAPI::fromJsonValue(m_orchestrator_type, json[QString("orchestratorType")]);
    m_orchestrator_type_isSet = !json[QString("orchestratorType")].isNull() && m_orchestrator_type_isValid;

    m_orchestrator_version_isValid = ::OpenAPI::fromJsonValue(m_orchestrator_version, json[QString("orchestratorVersion")]);
    m_orchestrator_version_isSet = !json[QString("orchestratorVersion")].isNull() && m_orchestrator_version_isValid;
}

QString OAIOrchestratorProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrchestratorProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_orchestrator_type_isSet) {
        obj.insert(QString("orchestratorType"), ::OpenAPI::toJsonValue(m_orchestrator_type));
    }
    if (m_orchestrator_version_isSet) {
        obj.insert(QString("orchestratorVersion"), ::OpenAPI::toJsonValue(m_orchestrator_version));
    }
    return obj;
}

QString OAIOrchestratorProfile::getOrchestratorType() const {
    return m_orchestrator_type;
}
void OAIOrchestratorProfile::setOrchestratorType(const QString &orchestrator_type) {
    m_orchestrator_type = orchestrator_type;
    m_orchestrator_type_isSet = true;
}

bool OAIOrchestratorProfile::is_orchestrator_type_Set() const{
    return m_orchestrator_type_isSet;
}

bool OAIOrchestratorProfile::is_orchestrator_type_Valid() const{
    return m_orchestrator_type_isValid;
}

QString OAIOrchestratorProfile::getOrchestratorVersion() const {
    return m_orchestrator_version;
}
void OAIOrchestratorProfile::setOrchestratorVersion(const QString &orchestrator_version) {
    m_orchestrator_version = orchestrator_version;
    m_orchestrator_version_isSet = true;
}

bool OAIOrchestratorProfile::is_orchestrator_version_Set() const{
    return m_orchestrator_version_isSet;
}

bool OAIOrchestratorProfile::is_orchestrator_version_Valid() const{
    return m_orchestrator_version_isValid;
}

bool OAIOrchestratorProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_orchestrator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orchestrator_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrchestratorProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_orchestrator_type_isValid && m_orchestrator_version_isValid && true;
}

} // namespace OpenAPI
