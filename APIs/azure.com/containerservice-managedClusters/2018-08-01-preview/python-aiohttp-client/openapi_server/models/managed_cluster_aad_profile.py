# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManagedClusterAADProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_app_id: str=None, server_app_id: str=None, server_app_secret: str=None, tenant_id: str=None):
        """ManagedClusterAADProfile - a model defined in OpenAPI

        :param client_app_id: The client_app_id of this ManagedClusterAADProfile.
        :param server_app_id: The server_app_id of this ManagedClusterAADProfile.
        :param server_app_secret: The server_app_secret of this ManagedClusterAADProfile.
        :param tenant_id: The tenant_id of this ManagedClusterAADProfile.
        """
        self.openapi_types = {
            'client_app_id': str,
            'server_app_id': str,
            'server_app_secret': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'client_app_id': 'clientAppID',
            'server_app_id': 'serverAppID',
            'server_app_secret': 'serverAppSecret',
            'tenant_id': 'tenantID'
        }

        self._client_app_id = client_app_id
        self._server_app_id = server_app_id
        self._server_app_secret = server_app_secret
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedClusterAADProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedClusterAADProfile of this ManagedClusterAADProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_app_id(self):
        """Gets the client_app_id of this ManagedClusterAADProfile.

        The client AAD application ID.

        :return: The client_app_id of this ManagedClusterAADProfile.
        :rtype: str
        """
        return self._client_app_id

    @client_app_id.setter
    def client_app_id(self, client_app_id):
        """Sets the client_app_id of this ManagedClusterAADProfile.

        The client AAD application ID.

        :param client_app_id: The client_app_id of this ManagedClusterAADProfile.
        :type client_app_id: str
        """
        if client_app_id is None:
            raise ValueError("Invalid value for `client_app_id`, must not be `None`")

        self._client_app_id = client_app_id

    @property
    def server_app_id(self):
        """Gets the server_app_id of this ManagedClusterAADProfile.

        The server AAD application ID.

        :return: The server_app_id of this ManagedClusterAADProfile.
        :rtype: str
        """
        return self._server_app_id

    @server_app_id.setter
    def server_app_id(self, server_app_id):
        """Sets the server_app_id of this ManagedClusterAADProfile.

        The server AAD application ID.

        :param server_app_id: The server_app_id of this ManagedClusterAADProfile.
        :type server_app_id: str
        """
        if server_app_id is None:
            raise ValueError("Invalid value for `server_app_id`, must not be `None`")

        self._server_app_id = server_app_id

    @property
    def server_app_secret(self):
        """Gets the server_app_secret of this ManagedClusterAADProfile.

        The server AAD application secret.

        :return: The server_app_secret of this ManagedClusterAADProfile.
        :rtype: str
        """
        return self._server_app_secret

    @server_app_secret.setter
    def server_app_secret(self, server_app_secret):
        """Sets the server_app_secret of this ManagedClusterAADProfile.

        The server AAD application secret.

        :param server_app_secret: The server_app_secret of this ManagedClusterAADProfile.
        :type server_app_secret: str
        """

        self._server_app_secret = server_app_secret

    @property
    def tenant_id(self):
        """Gets the tenant_id of this ManagedClusterAADProfile.

        The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.

        :return: The tenant_id of this ManagedClusterAADProfile.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this ManagedClusterAADProfile.

        The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.

        :param tenant_id: The tenant_id of this ManagedClusterAADProfile.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
