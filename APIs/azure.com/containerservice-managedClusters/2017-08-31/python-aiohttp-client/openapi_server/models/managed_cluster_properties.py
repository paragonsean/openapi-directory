# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_service_agent_pool_profile import ContainerServiceAgentPoolProfile
from openapi_server.models.container_service_linux_profile import ContainerServiceLinuxProfile
from openapi_server.models.container_service_service_principal_profile import ContainerServiceServicePrincipalProfile
from openapi_server import util


class ManagedClusterProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_pool_profiles: List[ContainerServiceAgentPoolProfile]=None, dns_prefix: str=None, fqdn: str=None, kubernetes_version: str=None, linux_profile: ContainerServiceLinuxProfile=None, provisioning_state: str=None, service_principal_profile: ContainerServiceServicePrincipalProfile=None):
        """ManagedClusterProperties - a model defined in OpenAPI

        :param agent_pool_profiles: The agent_pool_profiles of this ManagedClusterProperties.
        :param dns_prefix: The dns_prefix of this ManagedClusterProperties.
        :param fqdn: The fqdn of this ManagedClusterProperties.
        :param kubernetes_version: The kubernetes_version of this ManagedClusterProperties.
        :param linux_profile: The linux_profile of this ManagedClusterProperties.
        :param provisioning_state: The provisioning_state of this ManagedClusterProperties.
        :param service_principal_profile: The service_principal_profile of this ManagedClusterProperties.
        """
        self.openapi_types = {
            'agent_pool_profiles': List[ContainerServiceAgentPoolProfile],
            'dns_prefix': str,
            'fqdn': str,
            'kubernetes_version': str,
            'linux_profile': ContainerServiceLinuxProfile,
            'provisioning_state': str,
            'service_principal_profile': ContainerServiceServicePrincipalProfile
        }

        self.attribute_map = {
            'agent_pool_profiles': 'agentPoolProfiles',
            'dns_prefix': 'dnsPrefix',
            'fqdn': 'fqdn',
            'kubernetes_version': 'kubernetesVersion',
            'linux_profile': 'linuxProfile',
            'provisioning_state': 'provisioningState',
            'service_principal_profile': 'servicePrincipalProfile'
        }

        self._agent_pool_profiles = agent_pool_profiles
        self._dns_prefix = dns_prefix
        self._fqdn = fqdn
        self._kubernetes_version = kubernetes_version
        self._linux_profile = linux_profile
        self._provisioning_state = provisioning_state
        self._service_principal_profile = service_principal_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedClusterProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedClusterProperties of this ManagedClusterProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_pool_profiles(self):
        """Gets the agent_pool_profiles of this ManagedClusterProperties.

        Properties of the agent pool.

        :return: The agent_pool_profiles of this ManagedClusterProperties.
        :rtype: List[ContainerServiceAgentPoolProfile]
        """
        return self._agent_pool_profiles

    @agent_pool_profiles.setter
    def agent_pool_profiles(self, agent_pool_profiles):
        """Sets the agent_pool_profiles of this ManagedClusterProperties.

        Properties of the agent pool.

        :param agent_pool_profiles: The agent_pool_profiles of this ManagedClusterProperties.
        :type agent_pool_profiles: List[ContainerServiceAgentPoolProfile]
        """

        self._agent_pool_profiles = agent_pool_profiles

    @property
    def dns_prefix(self):
        """Gets the dns_prefix of this ManagedClusterProperties.

        DNS prefix specified when creating the managed cluster.

        :return: The dns_prefix of this ManagedClusterProperties.
        :rtype: str
        """
        return self._dns_prefix

    @dns_prefix.setter
    def dns_prefix(self, dns_prefix):
        """Sets the dns_prefix of this ManagedClusterProperties.

        DNS prefix specified when creating the managed cluster.

        :param dns_prefix: The dns_prefix of this ManagedClusterProperties.
        :type dns_prefix: str
        """

        self._dns_prefix = dns_prefix

    @property
    def fqdn(self):
        """Gets the fqdn of this ManagedClusterProperties.

        FQDN for the master pool.

        :return: The fqdn of this ManagedClusterProperties.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this ManagedClusterProperties.

        FQDN for the master pool.

        :param fqdn: The fqdn of this ManagedClusterProperties.
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def kubernetes_version(self):
        """Gets the kubernetes_version of this ManagedClusterProperties.

        Version of Kubernetes specified when creating the managed cluster.

        :return: The kubernetes_version of this ManagedClusterProperties.
        :rtype: str
        """
        return self._kubernetes_version

    @kubernetes_version.setter
    def kubernetes_version(self, kubernetes_version):
        """Sets the kubernetes_version of this ManagedClusterProperties.

        Version of Kubernetes specified when creating the managed cluster.

        :param kubernetes_version: The kubernetes_version of this ManagedClusterProperties.
        :type kubernetes_version: str
        """

        self._kubernetes_version = kubernetes_version

    @property
    def linux_profile(self):
        """Gets the linux_profile of this ManagedClusterProperties.


        :return: The linux_profile of this ManagedClusterProperties.
        :rtype: ContainerServiceLinuxProfile
        """
        return self._linux_profile

    @linux_profile.setter
    def linux_profile(self, linux_profile):
        """Sets the linux_profile of this ManagedClusterProperties.


        :param linux_profile: The linux_profile of this ManagedClusterProperties.
        :type linux_profile: ContainerServiceLinuxProfile
        """

        self._linux_profile = linux_profile

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ManagedClusterProperties.

        The current deployment or provisioning state, which only appears in the response.

        :return: The provisioning_state of this ManagedClusterProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ManagedClusterProperties.

        The current deployment or provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this ManagedClusterProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def service_principal_profile(self):
        """Gets the service_principal_profile of this ManagedClusterProperties.


        :return: The service_principal_profile of this ManagedClusterProperties.
        :rtype: ContainerServiceServicePrincipalProfile
        """
        return self._service_principal_profile

    @service_principal_profile.setter
    def service_principal_profile(self, service_principal_profile):
        """Sets the service_principal_profile of this ManagedClusterProperties.


        :param service_principal_profile: The service_principal_profile of this ManagedClusterProperties.
        :type service_principal_profile: ContainerServiceServicePrincipalProfile
        """

        self._service_principal_profile = service_principal_profile
