/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedClusterProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedClusterProperties::OAIManagedClusterProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedClusterProperties::OAIManagedClusterProperties() {
    this->initializeModel();
}

OAIManagedClusterProperties::~OAIManagedClusterProperties() {}

void OAIManagedClusterProperties::initializeModel() {

    m_aad_profile_isSet = false;
    m_aad_profile_isValid = false;

    m_addon_profiles_isSet = false;
    m_addon_profiles_isValid = false;

    m_agent_pool_profiles_isSet = false;
    m_agent_pool_profiles_isValid = false;

    m_api_server_access_profile_isSet = false;
    m_api_server_access_profile_isValid = false;

    m_dns_prefix_isSet = false;
    m_dns_prefix_isValid = false;

    m_enable_pod_security_policy_isSet = false;
    m_enable_pod_security_policy_isValid = false;

    m_enable_rbac_isSet = false;
    m_enable_rbac_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_kubernetes_version_isSet = false;
    m_kubernetes_version_isValid = false;

    m_linux_profile_isSet = false;
    m_linux_profile_isValid = false;

    m_max_agent_pools_isSet = false;
    m_max_agent_pools_isValid = false;

    m_network_profile_isSet = false;
    m_network_profile_isValid = false;

    m_node_resource_group_isSet = false;
    m_node_resource_group_isValid = false;

    m_private_fqdn_isSet = false;
    m_private_fqdn_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_service_principal_profile_isSet = false;
    m_service_principal_profile_isValid = false;

    m_windows_profile_isSet = false;
    m_windows_profile_isValid = false;
}

void OAIManagedClusterProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedClusterProperties::fromJsonObject(QJsonObject json) {

    m_aad_profile_isValid = ::OpenAPI::fromJsonValue(m_aad_profile, json[QString("aadProfile")]);
    m_aad_profile_isSet = !json[QString("aadProfile")].isNull() && m_aad_profile_isValid;

    m_addon_profiles_isValid = ::OpenAPI::fromJsonValue(m_addon_profiles, json[QString("addonProfiles")]);
    m_addon_profiles_isSet = !json[QString("addonProfiles")].isNull() && m_addon_profiles_isValid;

    m_agent_pool_profiles_isValid = ::OpenAPI::fromJsonValue(m_agent_pool_profiles, json[QString("agentPoolProfiles")]);
    m_agent_pool_profiles_isSet = !json[QString("agentPoolProfiles")].isNull() && m_agent_pool_profiles_isValid;

    m_api_server_access_profile_isValid = ::OpenAPI::fromJsonValue(m_api_server_access_profile, json[QString("apiServerAccessProfile")]);
    m_api_server_access_profile_isSet = !json[QString("apiServerAccessProfile")].isNull() && m_api_server_access_profile_isValid;

    m_dns_prefix_isValid = ::OpenAPI::fromJsonValue(m_dns_prefix, json[QString("dnsPrefix")]);
    m_dns_prefix_isSet = !json[QString("dnsPrefix")].isNull() && m_dns_prefix_isValid;

    m_enable_pod_security_policy_isValid = ::OpenAPI::fromJsonValue(m_enable_pod_security_policy, json[QString("enablePodSecurityPolicy")]);
    m_enable_pod_security_policy_isSet = !json[QString("enablePodSecurityPolicy")].isNull() && m_enable_pod_security_policy_isValid;

    m_enable_rbac_isValid = ::OpenAPI::fromJsonValue(m_enable_rbac, json[QString("enableRBAC")]);
    m_enable_rbac_isSet = !json[QString("enableRBAC")].isNull() && m_enable_rbac_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_kubernetes_version_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_version, json[QString("kubernetesVersion")]);
    m_kubernetes_version_isSet = !json[QString("kubernetesVersion")].isNull() && m_kubernetes_version_isValid;

    m_linux_profile_isValid = ::OpenAPI::fromJsonValue(m_linux_profile, json[QString("linuxProfile")]);
    m_linux_profile_isSet = !json[QString("linuxProfile")].isNull() && m_linux_profile_isValid;

    m_max_agent_pools_isValid = ::OpenAPI::fromJsonValue(m_max_agent_pools, json[QString("maxAgentPools")]);
    m_max_agent_pools_isSet = !json[QString("maxAgentPools")].isNull() && m_max_agent_pools_isValid;

    m_network_profile_isValid = ::OpenAPI::fromJsonValue(m_network_profile, json[QString("networkProfile")]);
    m_network_profile_isSet = !json[QString("networkProfile")].isNull() && m_network_profile_isValid;

    m_node_resource_group_isValid = ::OpenAPI::fromJsonValue(m_node_resource_group, json[QString("nodeResourceGroup")]);
    m_node_resource_group_isSet = !json[QString("nodeResourceGroup")].isNull() && m_node_resource_group_isValid;

    m_private_fqdn_isValid = ::OpenAPI::fromJsonValue(m_private_fqdn, json[QString("privateFQDN")]);
    m_private_fqdn_isSet = !json[QString("privateFQDN")].isNull() && m_private_fqdn_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_service_principal_profile_isValid = ::OpenAPI::fromJsonValue(m_service_principal_profile, json[QString("servicePrincipalProfile")]);
    m_service_principal_profile_isSet = !json[QString("servicePrincipalProfile")].isNull() && m_service_principal_profile_isValid;

    m_windows_profile_isValid = ::OpenAPI::fromJsonValue(m_windows_profile, json[QString("windowsProfile")]);
    m_windows_profile_isSet = !json[QString("windowsProfile")].isNull() && m_windows_profile_isValid;
}

QString OAIManagedClusterProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedClusterProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_aad_profile.isSet()) {
        obj.insert(QString("aadProfile"), ::OpenAPI::toJsonValue(m_aad_profile));
    }
    if (m_addon_profiles_isSet) {
        obj.insert(QString("addonProfiles"), ::OpenAPI::toJsonValue(m_addon_profiles));
    }
    if (m_agent_pool_profiles.size() > 0) {
        obj.insert(QString("agentPoolProfiles"), ::OpenAPI::toJsonValue(m_agent_pool_profiles));
    }
    if (m_api_server_access_profile.isSet()) {
        obj.insert(QString("apiServerAccessProfile"), ::OpenAPI::toJsonValue(m_api_server_access_profile));
    }
    if (m_dns_prefix_isSet) {
        obj.insert(QString("dnsPrefix"), ::OpenAPI::toJsonValue(m_dns_prefix));
    }
    if (m_enable_pod_security_policy_isSet) {
        obj.insert(QString("enablePodSecurityPolicy"), ::OpenAPI::toJsonValue(m_enable_pod_security_policy));
    }
    if (m_enable_rbac_isSet) {
        obj.insert(QString("enableRBAC"), ::OpenAPI::toJsonValue(m_enable_rbac));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_kubernetes_version_isSet) {
        obj.insert(QString("kubernetesVersion"), ::OpenAPI::toJsonValue(m_kubernetes_version));
    }
    if (m_linux_profile.isSet()) {
        obj.insert(QString("linuxProfile"), ::OpenAPI::toJsonValue(m_linux_profile));
    }
    if (m_max_agent_pools_isSet) {
        obj.insert(QString("maxAgentPools"), ::OpenAPI::toJsonValue(m_max_agent_pools));
    }
    if (m_network_profile.isSet()) {
        obj.insert(QString("networkProfile"), ::OpenAPI::toJsonValue(m_network_profile));
    }
    if (m_node_resource_group_isSet) {
        obj.insert(QString("nodeResourceGroup"), ::OpenAPI::toJsonValue(m_node_resource_group));
    }
    if (m_private_fqdn_isSet) {
        obj.insert(QString("privateFQDN"), ::OpenAPI::toJsonValue(m_private_fqdn));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_service_principal_profile.isSet()) {
        obj.insert(QString("servicePrincipalProfile"), ::OpenAPI::toJsonValue(m_service_principal_profile));
    }
    if (m_windows_profile.isSet()) {
        obj.insert(QString("windowsProfile"), ::OpenAPI::toJsonValue(m_windows_profile));
    }
    return obj;
}

OAIManagedClusterAADProfile OAIManagedClusterProperties::getAadProfile() const {
    return m_aad_profile;
}
void OAIManagedClusterProperties::setAadProfile(const OAIManagedClusterAADProfile &aad_profile) {
    m_aad_profile = aad_profile;
    m_aad_profile_isSet = true;
}

bool OAIManagedClusterProperties::is_aad_profile_Set() const{
    return m_aad_profile_isSet;
}

bool OAIManagedClusterProperties::is_aad_profile_Valid() const{
    return m_aad_profile_isValid;
}

OAIObject OAIManagedClusterProperties::getAddonProfiles() const {
    return m_addon_profiles;
}
void OAIManagedClusterProperties::setAddonProfiles(const OAIObject &addon_profiles) {
    m_addon_profiles = addon_profiles;
    m_addon_profiles_isSet = true;
}

bool OAIManagedClusterProperties::is_addon_profiles_Set() const{
    return m_addon_profiles_isSet;
}

bool OAIManagedClusterProperties::is_addon_profiles_Valid() const{
    return m_addon_profiles_isValid;
}

QList<OAIManagedClusterAgentPoolProfile> OAIManagedClusterProperties::getAgentPoolProfiles() const {
    return m_agent_pool_profiles;
}
void OAIManagedClusterProperties::setAgentPoolProfiles(const QList<OAIManagedClusterAgentPoolProfile> &agent_pool_profiles) {
    m_agent_pool_profiles = agent_pool_profiles;
    m_agent_pool_profiles_isSet = true;
}

bool OAIManagedClusterProperties::is_agent_pool_profiles_Set() const{
    return m_agent_pool_profiles_isSet;
}

bool OAIManagedClusterProperties::is_agent_pool_profiles_Valid() const{
    return m_agent_pool_profiles_isValid;
}

OAIManagedClusterAPIServerAccessProfile OAIManagedClusterProperties::getApiServerAccessProfile() const {
    return m_api_server_access_profile;
}
void OAIManagedClusterProperties::setApiServerAccessProfile(const OAIManagedClusterAPIServerAccessProfile &api_server_access_profile) {
    m_api_server_access_profile = api_server_access_profile;
    m_api_server_access_profile_isSet = true;
}

bool OAIManagedClusterProperties::is_api_server_access_profile_Set() const{
    return m_api_server_access_profile_isSet;
}

bool OAIManagedClusterProperties::is_api_server_access_profile_Valid() const{
    return m_api_server_access_profile_isValid;
}

QString OAIManagedClusterProperties::getDnsPrefix() const {
    return m_dns_prefix;
}
void OAIManagedClusterProperties::setDnsPrefix(const QString &dns_prefix) {
    m_dns_prefix = dns_prefix;
    m_dns_prefix_isSet = true;
}

bool OAIManagedClusterProperties::is_dns_prefix_Set() const{
    return m_dns_prefix_isSet;
}

bool OAIManagedClusterProperties::is_dns_prefix_Valid() const{
    return m_dns_prefix_isValid;
}

bool OAIManagedClusterProperties::isEnablePodSecurityPolicy() const {
    return m_enable_pod_security_policy;
}
void OAIManagedClusterProperties::setEnablePodSecurityPolicy(const bool &enable_pod_security_policy) {
    m_enable_pod_security_policy = enable_pod_security_policy;
    m_enable_pod_security_policy_isSet = true;
}

bool OAIManagedClusterProperties::is_enable_pod_security_policy_Set() const{
    return m_enable_pod_security_policy_isSet;
}

bool OAIManagedClusterProperties::is_enable_pod_security_policy_Valid() const{
    return m_enable_pod_security_policy_isValid;
}

bool OAIManagedClusterProperties::isEnableRbac() const {
    return m_enable_rbac;
}
void OAIManagedClusterProperties::setEnableRbac(const bool &enable_rbac) {
    m_enable_rbac = enable_rbac;
    m_enable_rbac_isSet = true;
}

bool OAIManagedClusterProperties::is_enable_rbac_Set() const{
    return m_enable_rbac_isSet;
}

bool OAIManagedClusterProperties::is_enable_rbac_Valid() const{
    return m_enable_rbac_isValid;
}

QString OAIManagedClusterProperties::getFqdn() const {
    return m_fqdn;
}
void OAIManagedClusterProperties::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAIManagedClusterProperties::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAIManagedClusterProperties::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

QString OAIManagedClusterProperties::getKubernetesVersion() const {
    return m_kubernetes_version;
}
void OAIManagedClusterProperties::setKubernetesVersion(const QString &kubernetes_version) {
    m_kubernetes_version = kubernetes_version;
    m_kubernetes_version_isSet = true;
}

bool OAIManagedClusterProperties::is_kubernetes_version_Set() const{
    return m_kubernetes_version_isSet;
}

bool OAIManagedClusterProperties::is_kubernetes_version_Valid() const{
    return m_kubernetes_version_isValid;
}

OAIContainerServiceLinuxProfile OAIManagedClusterProperties::getLinuxProfile() const {
    return m_linux_profile;
}
void OAIManagedClusterProperties::setLinuxProfile(const OAIContainerServiceLinuxProfile &linux_profile) {
    m_linux_profile = linux_profile;
    m_linux_profile_isSet = true;
}

bool OAIManagedClusterProperties::is_linux_profile_Set() const{
    return m_linux_profile_isSet;
}

bool OAIManagedClusterProperties::is_linux_profile_Valid() const{
    return m_linux_profile_isValid;
}

qint32 OAIManagedClusterProperties::getMaxAgentPools() const {
    return m_max_agent_pools;
}
void OAIManagedClusterProperties::setMaxAgentPools(const qint32 &max_agent_pools) {
    m_max_agent_pools = max_agent_pools;
    m_max_agent_pools_isSet = true;
}

bool OAIManagedClusterProperties::is_max_agent_pools_Set() const{
    return m_max_agent_pools_isSet;
}

bool OAIManagedClusterProperties::is_max_agent_pools_Valid() const{
    return m_max_agent_pools_isValid;
}

OAIContainerServiceNetworkProfile OAIManagedClusterProperties::getNetworkProfile() const {
    return m_network_profile;
}
void OAIManagedClusterProperties::setNetworkProfile(const OAIContainerServiceNetworkProfile &network_profile) {
    m_network_profile = network_profile;
    m_network_profile_isSet = true;
}

bool OAIManagedClusterProperties::is_network_profile_Set() const{
    return m_network_profile_isSet;
}

bool OAIManagedClusterProperties::is_network_profile_Valid() const{
    return m_network_profile_isValid;
}

QString OAIManagedClusterProperties::getNodeResourceGroup() const {
    return m_node_resource_group;
}
void OAIManagedClusterProperties::setNodeResourceGroup(const QString &node_resource_group) {
    m_node_resource_group = node_resource_group;
    m_node_resource_group_isSet = true;
}

bool OAIManagedClusterProperties::is_node_resource_group_Set() const{
    return m_node_resource_group_isSet;
}

bool OAIManagedClusterProperties::is_node_resource_group_Valid() const{
    return m_node_resource_group_isValid;
}

QString OAIManagedClusterProperties::getPrivateFqdn() const {
    return m_private_fqdn;
}
void OAIManagedClusterProperties::setPrivateFqdn(const QString &private_fqdn) {
    m_private_fqdn = private_fqdn;
    m_private_fqdn_isSet = true;
}

bool OAIManagedClusterProperties::is_private_fqdn_Set() const{
    return m_private_fqdn_isSet;
}

bool OAIManagedClusterProperties::is_private_fqdn_Valid() const{
    return m_private_fqdn_isValid;
}

QString OAIManagedClusterProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIManagedClusterProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIManagedClusterProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIManagedClusterProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIManagedClusterServicePrincipalProfile OAIManagedClusterProperties::getServicePrincipalProfile() const {
    return m_service_principal_profile;
}
void OAIManagedClusterProperties::setServicePrincipalProfile(const OAIManagedClusterServicePrincipalProfile &service_principal_profile) {
    m_service_principal_profile = service_principal_profile;
    m_service_principal_profile_isSet = true;
}

bool OAIManagedClusterProperties::is_service_principal_profile_Set() const{
    return m_service_principal_profile_isSet;
}

bool OAIManagedClusterProperties::is_service_principal_profile_Valid() const{
    return m_service_principal_profile_isValid;
}

OAIManagedClusterWindowsProfile OAIManagedClusterProperties::getWindowsProfile() const {
    return m_windows_profile;
}
void OAIManagedClusterProperties::setWindowsProfile(const OAIManagedClusterWindowsProfile &windows_profile) {
    m_windows_profile = windows_profile;
    m_windows_profile_isSet = true;
}

bool OAIManagedClusterProperties::is_windows_profile_Set() const{
    return m_windows_profile_isSet;
}

bool OAIManagedClusterProperties::is_windows_profile_Valid() const{
    return m_windows_profile_isValid;
}

bool OAIManagedClusterProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aad_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_addon_profiles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_pool_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_server_access_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_pod_security_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_rbac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linux_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_agent_pools_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_principal_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedClusterProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
