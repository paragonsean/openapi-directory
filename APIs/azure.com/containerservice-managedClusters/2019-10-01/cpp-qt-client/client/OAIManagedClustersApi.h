/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIManagedClustersApi_H
#define OAI_OAIManagedClustersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAICredentialResults.h"
#include "OAIManagedCluster.h"
#include "OAIManagedClusterAADProfile.h"
#include "OAIManagedClusterAccessProfile.h"
#include "OAIManagedClusterListResult.h"
#include "OAIManagedClusterServicePrincipalProfile.h"
#include "OAIManagedClusterUpgradeProfile.h"
#include "OAIOperationListResult.h"
#include "OAITagsObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIManagedClustersApi : public QObject {
    Q_OBJECT

public:
    OAIManagedClustersApi(const int timeOut = 0);
    ~OAIManagedClustersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  parameters OAIManagedCluster [required]
    */
    virtual void managedClustersCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const OAIManagedCluster &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void managedClustersDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void managedClustersGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  role_name QString [required]
    */
    virtual void managedClustersGetAccessProfile(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &role_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void managedClustersGetUpgradeProfile(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void managedClustersList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void managedClustersListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void managedClustersListClusterAdminCredentials(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void managedClustersListClusterMonitoringUserCredentials(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void managedClustersListClusterUserCredentials(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  parameters OAIManagedClusterAADProfile [required]
    */
    virtual void managedClustersResetAADProfile(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const OAIManagedClusterAADProfile &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  parameters OAIManagedClusterServicePrincipalProfile [required]
    */
    virtual void managedClustersResetServicePrincipalProfile(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const OAIManagedClusterServicePrincipalProfile &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void managedClustersRotateClusterCertificates(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  parameters OAITagsObject [required]
    */
    virtual void managedClustersUpdateTags(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const OAITagsObject &parameters);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void operationsList(const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void managedClustersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void managedClustersDeleteCallback(OAIHttpRequestWorker *worker);
    void managedClustersGetCallback(OAIHttpRequestWorker *worker);
    void managedClustersGetAccessProfileCallback(OAIHttpRequestWorker *worker);
    void managedClustersGetUpgradeProfileCallback(OAIHttpRequestWorker *worker);
    void managedClustersListCallback(OAIHttpRequestWorker *worker);
    void managedClustersListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void managedClustersListClusterAdminCredentialsCallback(OAIHttpRequestWorker *worker);
    void managedClustersListClusterMonitoringUserCredentialsCallback(OAIHttpRequestWorker *worker);
    void managedClustersListClusterUserCredentialsCallback(OAIHttpRequestWorker *worker);
    void managedClustersResetAADProfileCallback(OAIHttpRequestWorker *worker);
    void managedClustersResetServicePrincipalProfileCallback(OAIHttpRequestWorker *worker);
    void managedClustersRotateClusterCertificatesCallback(OAIHttpRequestWorker *worker);
    void managedClustersUpdateTagsCallback(OAIHttpRequestWorker *worker);
    void operationsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void managedClustersCreateOrUpdateSignal(OAIManagedCluster summary);
    void managedClustersDeleteSignal();
    void managedClustersGetSignal(OAIManagedCluster summary);
    void managedClustersGetAccessProfileSignal(OAIManagedClusterAccessProfile summary);
    void managedClustersGetUpgradeProfileSignal(OAIManagedClusterUpgradeProfile summary);
    void managedClustersListSignal(OAIManagedClusterListResult summary);
    void managedClustersListByResourceGroupSignal(OAIManagedClusterListResult summary);
    void managedClustersListClusterAdminCredentialsSignal(OAICredentialResults summary);
    void managedClustersListClusterMonitoringUserCredentialsSignal(OAICredentialResults summary);
    void managedClustersListClusterUserCredentialsSignal(OAICredentialResults summary);
    void managedClustersResetAADProfileSignal();
    void managedClustersResetServicePrincipalProfileSignal();
    void managedClustersRotateClusterCertificatesSignal();
    void managedClustersUpdateTagsSignal(OAIManagedCluster summary);
    void operationsListSignal(OAIOperationListResult summary);


    void managedClustersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManagedCluster summary);
    void managedClustersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void managedClustersGetSignalFull(OAIHttpRequestWorker *worker, OAIManagedCluster summary);
    void managedClustersGetAccessProfileSignalFull(OAIHttpRequestWorker *worker, OAIManagedClusterAccessProfile summary);
    void managedClustersGetUpgradeProfileSignalFull(OAIHttpRequestWorker *worker, OAIManagedClusterUpgradeProfile summary);
    void managedClustersListSignalFull(OAIHttpRequestWorker *worker, OAIManagedClusterListResult summary);
    void managedClustersListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIManagedClusterListResult summary);
    void managedClustersListClusterAdminCredentialsSignalFull(OAIHttpRequestWorker *worker, OAICredentialResults summary);
    void managedClustersListClusterMonitoringUserCredentialsSignalFull(OAIHttpRequestWorker *worker, OAICredentialResults summary);
    void managedClustersListClusterUserCredentialsSignalFull(OAIHttpRequestWorker *worker, OAICredentialResults summary);
    void managedClustersResetAADProfileSignalFull(OAIHttpRequestWorker *worker);
    void managedClustersResetServicePrincipalProfileSignalFull(OAIHttpRequestWorker *worker);
    void managedClustersRotateClusterCertificatesSignalFull(OAIHttpRequestWorker *worker);
    void managedClustersUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIManagedCluster summary);
    void operationsListSignalFull(OAIHttpRequestWorker *worker, OAIOperationListResult summary);

    Q_DECL_DEPRECATED_X("Use managedClustersCreateOrUpdateSignalError() instead")
    void managedClustersCreateOrUpdateSignalE(OAIManagedCluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersCreateOrUpdateSignalError(OAIManagedCluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersDeleteSignalError() instead")
    void managedClustersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersGetSignalError() instead")
    void managedClustersGetSignalE(OAIManagedCluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersGetSignalError(OAIManagedCluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersGetAccessProfileSignalError() instead")
    void managedClustersGetAccessProfileSignalE(OAIManagedClusterAccessProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersGetAccessProfileSignalError(OAIManagedClusterAccessProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersGetUpgradeProfileSignalError() instead")
    void managedClustersGetUpgradeProfileSignalE(OAIManagedClusterUpgradeProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersGetUpgradeProfileSignalError(OAIManagedClusterUpgradeProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersListSignalError() instead")
    void managedClustersListSignalE(OAIManagedClusterListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersListSignalError(OAIManagedClusterListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersListByResourceGroupSignalError() instead")
    void managedClustersListByResourceGroupSignalE(OAIManagedClusterListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersListByResourceGroupSignalError(OAIManagedClusterListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersListClusterAdminCredentialsSignalError() instead")
    void managedClustersListClusterAdminCredentialsSignalE(OAICredentialResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersListClusterAdminCredentialsSignalError(OAICredentialResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersListClusterMonitoringUserCredentialsSignalError() instead")
    void managedClustersListClusterMonitoringUserCredentialsSignalE(OAICredentialResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersListClusterMonitoringUserCredentialsSignalError(OAICredentialResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersListClusterUserCredentialsSignalError() instead")
    void managedClustersListClusterUserCredentialsSignalE(OAICredentialResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersListClusterUserCredentialsSignalError(OAICredentialResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersResetAADProfileSignalError() instead")
    void managedClustersResetAADProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersResetAADProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersResetServicePrincipalProfileSignalError() instead")
    void managedClustersResetServicePrincipalProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersResetServicePrincipalProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersRotateClusterCertificatesSignalError() instead")
    void managedClustersRotateClusterCertificatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersRotateClusterCertificatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersUpdateTagsSignalError() instead")
    void managedClustersUpdateTagsSignalE(OAIManagedCluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersUpdateTagsSignalError(OAIManagedCluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsListSignalError() instead")
    void operationsListSignalE(OAIOperationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalError(OAIOperationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use managedClustersCreateOrUpdateSignalErrorFull() instead")
    void managedClustersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersDeleteSignalErrorFull() instead")
    void managedClustersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersGetSignalErrorFull() instead")
    void managedClustersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersGetAccessProfileSignalErrorFull() instead")
    void managedClustersGetAccessProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersGetAccessProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersGetUpgradeProfileSignalErrorFull() instead")
    void managedClustersGetUpgradeProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersGetUpgradeProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersListSignalErrorFull() instead")
    void managedClustersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersListByResourceGroupSignalErrorFull() instead")
    void managedClustersListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersListClusterAdminCredentialsSignalErrorFull() instead")
    void managedClustersListClusterAdminCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersListClusterAdminCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersListClusterMonitoringUserCredentialsSignalErrorFull() instead")
    void managedClustersListClusterMonitoringUserCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersListClusterMonitoringUserCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersListClusterUserCredentialsSignalErrorFull() instead")
    void managedClustersListClusterUserCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersListClusterUserCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersResetAADProfileSignalErrorFull() instead")
    void managedClustersResetAADProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersResetAADProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersResetServicePrincipalProfileSignalErrorFull() instead")
    void managedClustersResetServicePrincipalProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersResetServicePrincipalProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersRotateClusterCertificatesSignalErrorFull() instead")
    void managedClustersRotateClusterCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersRotateClusterCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedClustersUpdateTagsSignalErrorFull() instead")
    void managedClustersUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedClustersUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsListSignalErrorFull() instead")
    void operationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
