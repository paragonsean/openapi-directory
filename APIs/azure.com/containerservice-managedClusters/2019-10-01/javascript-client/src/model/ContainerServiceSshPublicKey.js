/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContainerServiceSshPublicKey model module.
 * @module model/ContainerServiceSshPublicKey
 * @version 2019-10-01
 */
class ContainerServiceSshPublicKey {
    /**
     * Constructs a new <code>ContainerServiceSshPublicKey</code>.
     * Contains information about SSH certificate public key data.
     * @alias module:model/ContainerServiceSshPublicKey
     * @param keyData {String} Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
     */
    constructor(keyData) { 
        
        ContainerServiceSshPublicKey.initialize(this, keyData);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyData) { 
        obj['keyData'] = keyData;
    }

    /**
     * Constructs a <code>ContainerServiceSshPublicKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerServiceSshPublicKey} obj Optional instance to populate.
     * @return {module:model/ContainerServiceSshPublicKey} The populated <code>ContainerServiceSshPublicKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerServiceSshPublicKey();

            if (data.hasOwnProperty('keyData')) {
                obj['keyData'] = ApiClient.convertToType(data['keyData'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerServiceSshPublicKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerServiceSshPublicKey</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContainerServiceSshPublicKey.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['keyData'] && !(typeof data['keyData'] === 'string' || data['keyData'] instanceof String)) {
            throw new Error("Expected the field `keyData` to be a primitive type in the JSON string but got " + data['keyData']);
        }

        return true;
    }


}

ContainerServiceSshPublicKey.RequiredProperties = ["keyData"];

/**
 * Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
 * @member {String} keyData
 */
ContainerServiceSshPublicKey.prototype['keyData'] = undefined;






export default ContainerServiceSshPublicKey;

