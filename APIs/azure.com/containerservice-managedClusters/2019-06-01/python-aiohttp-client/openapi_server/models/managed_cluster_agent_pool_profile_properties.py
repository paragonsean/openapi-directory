# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_pool_type import AgentPoolType
from openapi_server.models.container_service_vm_size import ContainerServiceVMSize
from openapi_server.models.os_type import OSType
from openapi_server.models.scale_set_eviction_policy import ScaleSetEvictionPolicy
from openapi_server.models.scale_set_priority import ScaleSetPriority
from openapi_server import util


class ManagedClusterAgentPoolProfileProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_zones: List[str]=None, count: int=None, enable_auto_scaling: bool=None, enable_node_public_ip: bool=None, max_count: int=None, max_pods: int=None, min_count: int=None, node_taints: List[str]=None, orchestrator_version: str=None, os_disk_size_gb: int=None, os_type: OSType=OSType.LINUX, provisioning_state: str=None, scale_set_eviction_policy: ScaleSetEvictionPolicy=ScaleSetEvictionPolicy.DELETE, scale_set_priority: ScaleSetPriority=ScaleSetPriority.REGULAR, type: AgentPoolType=None, vm_size: ContainerServiceVMSize=None, vnet_subnet_id: str=None):
        """ManagedClusterAgentPoolProfileProperties - a model defined in OpenAPI

        :param availability_zones: The availability_zones of this ManagedClusterAgentPoolProfileProperties.
        :param count: The count of this ManagedClusterAgentPoolProfileProperties.
        :param enable_auto_scaling: The enable_auto_scaling of this ManagedClusterAgentPoolProfileProperties.
        :param enable_node_public_ip: The enable_node_public_ip of this ManagedClusterAgentPoolProfileProperties.
        :param max_count: The max_count of this ManagedClusterAgentPoolProfileProperties.
        :param max_pods: The max_pods of this ManagedClusterAgentPoolProfileProperties.
        :param min_count: The min_count of this ManagedClusterAgentPoolProfileProperties.
        :param node_taints: The node_taints of this ManagedClusterAgentPoolProfileProperties.
        :param orchestrator_version: The orchestrator_version of this ManagedClusterAgentPoolProfileProperties.
        :param os_disk_size_gb: The os_disk_size_gb of this ManagedClusterAgentPoolProfileProperties.
        :param os_type: The os_type of this ManagedClusterAgentPoolProfileProperties.
        :param provisioning_state: The provisioning_state of this ManagedClusterAgentPoolProfileProperties.
        :param scale_set_eviction_policy: The scale_set_eviction_policy of this ManagedClusterAgentPoolProfileProperties.
        :param scale_set_priority: The scale_set_priority of this ManagedClusterAgentPoolProfileProperties.
        :param type: The type of this ManagedClusterAgentPoolProfileProperties.
        :param vm_size: The vm_size of this ManagedClusterAgentPoolProfileProperties.
        :param vnet_subnet_id: The vnet_subnet_id of this ManagedClusterAgentPoolProfileProperties.
        """
        self.openapi_types = {
            'availability_zones': List[str],
            'count': int,
            'enable_auto_scaling': bool,
            'enable_node_public_ip': bool,
            'max_count': int,
            'max_pods': int,
            'min_count': int,
            'node_taints': List[str],
            'orchestrator_version': str,
            'os_disk_size_gb': int,
            'os_type': OSType,
            'provisioning_state': str,
            'scale_set_eviction_policy': ScaleSetEvictionPolicy,
            'scale_set_priority': ScaleSetPriority,
            'type': AgentPoolType,
            'vm_size': ContainerServiceVMSize,
            'vnet_subnet_id': str
        }

        self.attribute_map = {
            'availability_zones': 'availabilityZones',
            'count': 'count',
            'enable_auto_scaling': 'enableAutoScaling',
            'enable_node_public_ip': 'enableNodePublicIP',
            'max_count': 'maxCount',
            'max_pods': 'maxPods',
            'min_count': 'minCount',
            'node_taints': 'nodeTaints',
            'orchestrator_version': 'orchestratorVersion',
            'os_disk_size_gb': 'osDiskSizeGB',
            'os_type': 'osType',
            'provisioning_state': 'provisioningState',
            'scale_set_eviction_policy': 'scaleSetEvictionPolicy',
            'scale_set_priority': 'scaleSetPriority',
            'type': 'type',
            'vm_size': 'vmSize',
            'vnet_subnet_id': 'vnetSubnetID'
        }

        self._availability_zones = availability_zones
        self._count = count
        self._enable_auto_scaling = enable_auto_scaling
        self._enable_node_public_ip = enable_node_public_ip
        self._max_count = max_count
        self._max_pods = max_pods
        self._min_count = min_count
        self._node_taints = node_taints
        self._orchestrator_version = orchestrator_version
        self._os_disk_size_gb = os_disk_size_gb
        self._os_type = os_type
        self._provisioning_state = provisioning_state
        self._scale_set_eviction_policy = scale_set_eviction_policy
        self._scale_set_priority = scale_set_priority
        self._type = type
        self._vm_size = vm_size
        self._vnet_subnet_id = vnet_subnet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedClusterAgentPoolProfileProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedClusterAgentPoolProfileProperties of this ManagedClusterAgentPoolProfileProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_zones(self):
        """Gets the availability_zones of this ManagedClusterAgentPoolProfileProperties.

        (PREVIEW) Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.

        :return: The availability_zones of this ManagedClusterAgentPoolProfileProperties.
        :rtype: List[str]
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this ManagedClusterAgentPoolProfileProperties.

        (PREVIEW) Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.

        :param availability_zones: The availability_zones of this ManagedClusterAgentPoolProfileProperties.
        :type availability_zones: List[str]
        """

        self._availability_zones = availability_zones

    @property
    def count(self):
        """Gets the count of this ManagedClusterAgentPoolProfileProperties.

        Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.

        :return: The count of this ManagedClusterAgentPoolProfileProperties.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ManagedClusterAgentPoolProfileProperties.

        Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.

        :param count: The count of this ManagedClusterAgentPoolProfileProperties.
        :type count: int
        """

        self._count = count

    @property
    def enable_auto_scaling(self):
        """Gets the enable_auto_scaling of this ManagedClusterAgentPoolProfileProperties.

        Whether to enable auto-scaler

        :return: The enable_auto_scaling of this ManagedClusterAgentPoolProfileProperties.
        :rtype: bool
        """
        return self._enable_auto_scaling

    @enable_auto_scaling.setter
    def enable_auto_scaling(self, enable_auto_scaling):
        """Sets the enable_auto_scaling of this ManagedClusterAgentPoolProfileProperties.

        Whether to enable auto-scaler

        :param enable_auto_scaling: The enable_auto_scaling of this ManagedClusterAgentPoolProfileProperties.
        :type enable_auto_scaling: bool
        """

        self._enable_auto_scaling = enable_auto_scaling

    @property
    def enable_node_public_ip(self):
        """Gets the enable_node_public_ip of this ManagedClusterAgentPoolProfileProperties.

        Enable public IP for nodes

        :return: The enable_node_public_ip of this ManagedClusterAgentPoolProfileProperties.
        :rtype: bool
        """
        return self._enable_node_public_ip

    @enable_node_public_ip.setter
    def enable_node_public_ip(self, enable_node_public_ip):
        """Sets the enable_node_public_ip of this ManagedClusterAgentPoolProfileProperties.

        Enable public IP for nodes

        :param enable_node_public_ip: The enable_node_public_ip of this ManagedClusterAgentPoolProfileProperties.
        :type enable_node_public_ip: bool
        """

        self._enable_node_public_ip = enable_node_public_ip

    @property
    def max_count(self):
        """Gets the max_count of this ManagedClusterAgentPoolProfileProperties.

        Maximum number of nodes for auto-scaling

        :return: The max_count of this ManagedClusterAgentPoolProfileProperties.
        :rtype: int
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """Sets the max_count of this ManagedClusterAgentPoolProfileProperties.

        Maximum number of nodes for auto-scaling

        :param max_count: The max_count of this ManagedClusterAgentPoolProfileProperties.
        :type max_count: int
        """

        self._max_count = max_count

    @property
    def max_pods(self):
        """Gets the max_pods of this ManagedClusterAgentPoolProfileProperties.

        Maximum number of pods that can run on a node.

        :return: The max_pods of this ManagedClusterAgentPoolProfileProperties.
        :rtype: int
        """
        return self._max_pods

    @max_pods.setter
    def max_pods(self, max_pods):
        """Sets the max_pods of this ManagedClusterAgentPoolProfileProperties.

        Maximum number of pods that can run on a node.

        :param max_pods: The max_pods of this ManagedClusterAgentPoolProfileProperties.
        :type max_pods: int
        """

        self._max_pods = max_pods

    @property
    def min_count(self):
        """Gets the min_count of this ManagedClusterAgentPoolProfileProperties.

        Minimum number of nodes for auto-scaling

        :return: The min_count of this ManagedClusterAgentPoolProfileProperties.
        :rtype: int
        """
        return self._min_count

    @min_count.setter
    def min_count(self, min_count):
        """Sets the min_count of this ManagedClusterAgentPoolProfileProperties.

        Minimum number of nodes for auto-scaling

        :param min_count: The min_count of this ManagedClusterAgentPoolProfileProperties.
        :type min_count: int
        """

        self._min_count = min_count

    @property
    def node_taints(self):
        """Gets the node_taints of this ManagedClusterAgentPoolProfileProperties.

        Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.

        :return: The node_taints of this ManagedClusterAgentPoolProfileProperties.
        :rtype: List[str]
        """
        return self._node_taints

    @node_taints.setter
    def node_taints(self, node_taints):
        """Sets the node_taints of this ManagedClusterAgentPoolProfileProperties.

        Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.

        :param node_taints: The node_taints of this ManagedClusterAgentPoolProfileProperties.
        :type node_taints: List[str]
        """

        self._node_taints = node_taints

    @property
    def orchestrator_version(self):
        """Gets the orchestrator_version of this ManagedClusterAgentPoolProfileProperties.

        Version of orchestrator specified when creating the managed cluster.

        :return: The orchestrator_version of this ManagedClusterAgentPoolProfileProperties.
        :rtype: str
        """
        return self._orchestrator_version

    @orchestrator_version.setter
    def orchestrator_version(self, orchestrator_version):
        """Sets the orchestrator_version of this ManagedClusterAgentPoolProfileProperties.

        Version of orchestrator specified when creating the managed cluster.

        :param orchestrator_version: The orchestrator_version of this ManagedClusterAgentPoolProfileProperties.
        :type orchestrator_version: str
        """

        self._orchestrator_version = orchestrator_version

    @property
    def os_disk_size_gb(self):
        """Gets the os_disk_size_gb of this ManagedClusterAgentPoolProfileProperties.

        OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.

        :return: The os_disk_size_gb of this ManagedClusterAgentPoolProfileProperties.
        :rtype: int
        """
        return self._os_disk_size_gb

    @os_disk_size_gb.setter
    def os_disk_size_gb(self, os_disk_size_gb):
        """Sets the os_disk_size_gb of this ManagedClusterAgentPoolProfileProperties.

        OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.

        :param os_disk_size_gb: The os_disk_size_gb of this ManagedClusterAgentPoolProfileProperties.
        :type os_disk_size_gb: int
        """
        if os_disk_size_gb is not None and os_disk_size_gb > 1023:
            raise ValueError("Invalid value for `os_disk_size_gb`, must be a value less than or equal to `1023`")
        if os_disk_size_gb is not None and os_disk_size_gb < 0:
            raise ValueError("Invalid value for `os_disk_size_gb`, must be a value greater than or equal to `0`")

        self._os_disk_size_gb = os_disk_size_gb

    @property
    def os_type(self):
        """Gets the os_type of this ManagedClusterAgentPoolProfileProperties.


        :return: The os_type of this ManagedClusterAgentPoolProfileProperties.
        :rtype: OSType
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this ManagedClusterAgentPoolProfileProperties.


        :param os_type: The os_type of this ManagedClusterAgentPoolProfileProperties.
        :type os_type: OSType
        """

        self._os_type = os_type

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ManagedClusterAgentPoolProfileProperties.

        The current deployment or provisioning state, which only appears in the response.

        :return: The provisioning_state of this ManagedClusterAgentPoolProfileProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ManagedClusterAgentPoolProfileProperties.

        The current deployment or provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this ManagedClusterAgentPoolProfileProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def scale_set_eviction_policy(self):
        """Gets the scale_set_eviction_policy of this ManagedClusterAgentPoolProfileProperties.


        :return: The scale_set_eviction_policy of this ManagedClusterAgentPoolProfileProperties.
        :rtype: ScaleSetEvictionPolicy
        """
        return self._scale_set_eviction_policy

    @scale_set_eviction_policy.setter
    def scale_set_eviction_policy(self, scale_set_eviction_policy):
        """Sets the scale_set_eviction_policy of this ManagedClusterAgentPoolProfileProperties.


        :param scale_set_eviction_policy: The scale_set_eviction_policy of this ManagedClusterAgentPoolProfileProperties.
        :type scale_set_eviction_policy: ScaleSetEvictionPolicy
        """

        self._scale_set_eviction_policy = scale_set_eviction_policy

    @property
    def scale_set_priority(self):
        """Gets the scale_set_priority of this ManagedClusterAgentPoolProfileProperties.


        :return: The scale_set_priority of this ManagedClusterAgentPoolProfileProperties.
        :rtype: ScaleSetPriority
        """
        return self._scale_set_priority

    @scale_set_priority.setter
    def scale_set_priority(self, scale_set_priority):
        """Sets the scale_set_priority of this ManagedClusterAgentPoolProfileProperties.


        :param scale_set_priority: The scale_set_priority of this ManagedClusterAgentPoolProfileProperties.
        :type scale_set_priority: ScaleSetPriority
        """

        self._scale_set_priority = scale_set_priority

    @property
    def type(self):
        """Gets the type of this ManagedClusterAgentPoolProfileProperties.


        :return: The type of this ManagedClusterAgentPoolProfileProperties.
        :rtype: AgentPoolType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ManagedClusterAgentPoolProfileProperties.


        :param type: The type of this ManagedClusterAgentPoolProfileProperties.
        :type type: AgentPoolType
        """

        self._type = type

    @property
    def vm_size(self):
        """Gets the vm_size of this ManagedClusterAgentPoolProfileProperties.


        :return: The vm_size of this ManagedClusterAgentPoolProfileProperties.
        :rtype: ContainerServiceVMSize
        """
        return self._vm_size

    @vm_size.setter
    def vm_size(self, vm_size):
        """Sets the vm_size of this ManagedClusterAgentPoolProfileProperties.


        :param vm_size: The vm_size of this ManagedClusterAgentPoolProfileProperties.
        :type vm_size: ContainerServiceVMSize
        """

        self._vm_size = vm_size

    @property
    def vnet_subnet_id(self):
        """Gets the vnet_subnet_id of this ManagedClusterAgentPoolProfileProperties.

        VNet SubnetID specifies the VNet's subnet identifier.

        :return: The vnet_subnet_id of this ManagedClusterAgentPoolProfileProperties.
        :rtype: str
        """
        return self._vnet_subnet_id

    @vnet_subnet_id.setter
    def vnet_subnet_id(self, vnet_subnet_id):
        """Sets the vnet_subnet_id of this ManagedClusterAgentPoolProfileProperties.

        VNet SubnetID specifies the VNet's subnet identifier.

        :param vnet_subnet_id: The vnet_subnet_id of this ManagedClusterAgentPoolProfileProperties.
        :type vnet_subnet_id: str
        """

        self._vnet_subnet_id = vnet_subnet_id
