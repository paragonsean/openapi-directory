/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedClusterAgentPoolProfileProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedClusterAgentPoolProfileProperties::OAIManagedClusterAgentPoolProfileProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedClusterAgentPoolProfileProperties::OAIManagedClusterAgentPoolProfileProperties() {
    this->initializeModel();
}

OAIManagedClusterAgentPoolProfileProperties::~OAIManagedClusterAgentPoolProfileProperties() {}

void OAIManagedClusterAgentPoolProfileProperties::initializeModel() {

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_enable_auto_scaling_isSet = false;
    m_enable_auto_scaling_isValid = false;

    m_enable_node_public_ip_isSet = false;
    m_enable_node_public_ip_isValid = false;

    m_max_count_isSet = false;
    m_max_count_isValid = false;

    m_max_pods_isSet = false;
    m_max_pods_isValid = false;

    m_min_count_isSet = false;
    m_min_count_isValid = false;

    m_node_taints_isSet = false;
    m_node_taints_isValid = false;

    m_orchestrator_version_isSet = false;
    m_orchestrator_version_isValid = false;

    m_os_disk_size_gb_isSet = false;
    m_os_disk_size_gb_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_scale_set_eviction_policy_isSet = false;
    m_scale_set_eviction_policy_isValid = false;

    m_scale_set_priority_isSet = false;
    m_scale_set_priority_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vm_size_isSet = false;
    m_vm_size_isValid = false;

    m_vnet_subnet_id_isSet = false;
    m_vnet_subnet_id_isValid = false;
}

void OAIManagedClusterAgentPoolProfileProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedClusterAgentPoolProfileProperties::fromJsonObject(QJsonObject json) {

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("availabilityZones")]);
    m_availability_zones_isSet = !json[QString("availabilityZones")].isNull() && m_availability_zones_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_enable_auto_scaling_isValid = ::OpenAPI::fromJsonValue(m_enable_auto_scaling, json[QString("enableAutoScaling")]);
    m_enable_auto_scaling_isSet = !json[QString("enableAutoScaling")].isNull() && m_enable_auto_scaling_isValid;

    m_enable_node_public_ip_isValid = ::OpenAPI::fromJsonValue(m_enable_node_public_ip, json[QString("enableNodePublicIP")]);
    m_enable_node_public_ip_isSet = !json[QString("enableNodePublicIP")].isNull() && m_enable_node_public_ip_isValid;

    m_max_count_isValid = ::OpenAPI::fromJsonValue(m_max_count, json[QString("maxCount")]);
    m_max_count_isSet = !json[QString("maxCount")].isNull() && m_max_count_isValid;

    m_max_pods_isValid = ::OpenAPI::fromJsonValue(m_max_pods, json[QString("maxPods")]);
    m_max_pods_isSet = !json[QString("maxPods")].isNull() && m_max_pods_isValid;

    m_min_count_isValid = ::OpenAPI::fromJsonValue(m_min_count, json[QString("minCount")]);
    m_min_count_isSet = !json[QString("minCount")].isNull() && m_min_count_isValid;

    m_node_taints_isValid = ::OpenAPI::fromJsonValue(m_node_taints, json[QString("nodeTaints")]);
    m_node_taints_isSet = !json[QString("nodeTaints")].isNull() && m_node_taints_isValid;

    m_orchestrator_version_isValid = ::OpenAPI::fromJsonValue(m_orchestrator_version, json[QString("orchestratorVersion")]);
    m_orchestrator_version_isSet = !json[QString("orchestratorVersion")].isNull() && m_orchestrator_version_isValid;

    m_os_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_os_disk_size_gb, json[QString("osDiskSizeGB")]);
    m_os_disk_size_gb_isSet = !json[QString("osDiskSizeGB")].isNull() && m_os_disk_size_gb_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_scale_set_eviction_policy_isValid = ::OpenAPI::fromJsonValue(m_scale_set_eviction_policy, json[QString("scaleSetEvictionPolicy")]);
    m_scale_set_eviction_policy_isSet = !json[QString("scaleSetEvictionPolicy")].isNull() && m_scale_set_eviction_policy_isValid;

    m_scale_set_priority_isValid = ::OpenAPI::fromJsonValue(m_scale_set_priority, json[QString("scaleSetPriority")]);
    m_scale_set_priority_isSet = !json[QString("scaleSetPriority")].isNull() && m_scale_set_priority_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vm_size_isValid = ::OpenAPI::fromJsonValue(m_vm_size, json[QString("vmSize")]);
    m_vm_size_isSet = !json[QString("vmSize")].isNull() && m_vm_size_isValid;

    m_vnet_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_vnet_subnet_id, json[QString("vnetSubnetID")]);
    m_vnet_subnet_id_isSet = !json[QString("vnetSubnetID")].isNull() && m_vnet_subnet_id_isValid;
}

QString OAIManagedClusterAgentPoolProfileProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedClusterAgentPoolProfileProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_zones.size() > 0) {
        obj.insert(QString("availabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_enable_auto_scaling_isSet) {
        obj.insert(QString("enableAutoScaling"), ::OpenAPI::toJsonValue(m_enable_auto_scaling));
    }
    if (m_enable_node_public_ip_isSet) {
        obj.insert(QString("enableNodePublicIP"), ::OpenAPI::toJsonValue(m_enable_node_public_ip));
    }
    if (m_max_count_isSet) {
        obj.insert(QString("maxCount"), ::OpenAPI::toJsonValue(m_max_count));
    }
    if (m_max_pods_isSet) {
        obj.insert(QString("maxPods"), ::OpenAPI::toJsonValue(m_max_pods));
    }
    if (m_min_count_isSet) {
        obj.insert(QString("minCount"), ::OpenAPI::toJsonValue(m_min_count));
    }
    if (m_node_taints.size() > 0) {
        obj.insert(QString("nodeTaints"), ::OpenAPI::toJsonValue(m_node_taints));
    }
    if (m_orchestrator_version_isSet) {
        obj.insert(QString("orchestratorVersion"), ::OpenAPI::toJsonValue(m_orchestrator_version));
    }
    if (m_os_disk_size_gb_isSet) {
        obj.insert(QString("osDiskSizeGB"), ::OpenAPI::toJsonValue(m_os_disk_size_gb));
    }
    if (m_os_type.isSet()) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_scale_set_eviction_policy.isSet()) {
        obj.insert(QString("scaleSetEvictionPolicy"), ::OpenAPI::toJsonValue(m_scale_set_eviction_policy));
    }
    if (m_scale_set_priority.isSet()) {
        obj.insert(QString("scaleSetPriority"), ::OpenAPI::toJsonValue(m_scale_set_priority));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vm_size.isSet()) {
        obj.insert(QString("vmSize"), ::OpenAPI::toJsonValue(m_vm_size));
    }
    if (m_vnet_subnet_id_isSet) {
        obj.insert(QString("vnetSubnetID"), ::OpenAPI::toJsonValue(m_vnet_subnet_id));
    }
    return obj;
}

QList<QString> OAIManagedClusterAgentPoolProfileProperties::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAIManagedClusterAgentPoolProfileProperties::setAvailabilityZones(const QList<QString> &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

qint32 OAIManagedClusterAgentPoolProfileProperties::getCount() const {
    return m_count;
}
void OAIManagedClusterAgentPoolProfileProperties::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_count_Set() const{
    return m_count_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_count_Valid() const{
    return m_count_isValid;
}

bool OAIManagedClusterAgentPoolProfileProperties::isEnableAutoScaling() const {
    return m_enable_auto_scaling;
}
void OAIManagedClusterAgentPoolProfileProperties::setEnableAutoScaling(const bool &enable_auto_scaling) {
    m_enable_auto_scaling = enable_auto_scaling;
    m_enable_auto_scaling_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_enable_auto_scaling_Set() const{
    return m_enable_auto_scaling_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_enable_auto_scaling_Valid() const{
    return m_enable_auto_scaling_isValid;
}

bool OAIManagedClusterAgentPoolProfileProperties::isEnableNodePublicIp() const {
    return m_enable_node_public_ip;
}
void OAIManagedClusterAgentPoolProfileProperties::setEnableNodePublicIp(const bool &enable_node_public_ip) {
    m_enable_node_public_ip = enable_node_public_ip;
    m_enable_node_public_ip_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_enable_node_public_ip_Set() const{
    return m_enable_node_public_ip_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_enable_node_public_ip_Valid() const{
    return m_enable_node_public_ip_isValid;
}

qint32 OAIManagedClusterAgentPoolProfileProperties::getMaxCount() const {
    return m_max_count;
}
void OAIManagedClusterAgentPoolProfileProperties::setMaxCount(const qint32 &max_count) {
    m_max_count = max_count;
    m_max_count_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_max_count_Set() const{
    return m_max_count_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_max_count_Valid() const{
    return m_max_count_isValid;
}

qint32 OAIManagedClusterAgentPoolProfileProperties::getMaxPods() const {
    return m_max_pods;
}
void OAIManagedClusterAgentPoolProfileProperties::setMaxPods(const qint32 &max_pods) {
    m_max_pods = max_pods;
    m_max_pods_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_max_pods_Set() const{
    return m_max_pods_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_max_pods_Valid() const{
    return m_max_pods_isValid;
}

qint32 OAIManagedClusterAgentPoolProfileProperties::getMinCount() const {
    return m_min_count;
}
void OAIManagedClusterAgentPoolProfileProperties::setMinCount(const qint32 &min_count) {
    m_min_count = min_count;
    m_min_count_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_min_count_Set() const{
    return m_min_count_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_min_count_Valid() const{
    return m_min_count_isValid;
}

QList<QString> OAIManagedClusterAgentPoolProfileProperties::getNodeTaints() const {
    return m_node_taints;
}
void OAIManagedClusterAgentPoolProfileProperties::setNodeTaints(const QList<QString> &node_taints) {
    m_node_taints = node_taints;
    m_node_taints_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_node_taints_Set() const{
    return m_node_taints_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_node_taints_Valid() const{
    return m_node_taints_isValid;
}

QString OAIManagedClusterAgentPoolProfileProperties::getOrchestratorVersion() const {
    return m_orchestrator_version;
}
void OAIManagedClusterAgentPoolProfileProperties::setOrchestratorVersion(const QString &orchestrator_version) {
    m_orchestrator_version = orchestrator_version;
    m_orchestrator_version_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_orchestrator_version_Set() const{
    return m_orchestrator_version_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_orchestrator_version_Valid() const{
    return m_orchestrator_version_isValid;
}

qint32 OAIManagedClusterAgentPoolProfileProperties::getOsDiskSizeGb() const {
    return m_os_disk_size_gb;
}
void OAIManagedClusterAgentPoolProfileProperties::setOsDiskSizeGb(const qint32 &os_disk_size_gb) {
    m_os_disk_size_gb = os_disk_size_gb;
    m_os_disk_size_gb_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_os_disk_size_gb_Set() const{
    return m_os_disk_size_gb_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_os_disk_size_gb_Valid() const{
    return m_os_disk_size_gb_isValid;
}

OAIOSType OAIManagedClusterAgentPoolProfileProperties::getOsType() const {
    return m_os_type;
}
void OAIManagedClusterAgentPoolProfileProperties::setOsType(const OAIOSType &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIManagedClusterAgentPoolProfileProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIManagedClusterAgentPoolProfileProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIScaleSetEvictionPolicy OAIManagedClusterAgentPoolProfileProperties::getScaleSetEvictionPolicy() const {
    return m_scale_set_eviction_policy;
}
void OAIManagedClusterAgentPoolProfileProperties::setScaleSetEvictionPolicy(const OAIScaleSetEvictionPolicy &scale_set_eviction_policy) {
    m_scale_set_eviction_policy = scale_set_eviction_policy;
    m_scale_set_eviction_policy_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_scale_set_eviction_policy_Set() const{
    return m_scale_set_eviction_policy_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_scale_set_eviction_policy_Valid() const{
    return m_scale_set_eviction_policy_isValid;
}

OAIScaleSetPriority OAIManagedClusterAgentPoolProfileProperties::getScaleSetPriority() const {
    return m_scale_set_priority;
}
void OAIManagedClusterAgentPoolProfileProperties::setScaleSetPriority(const OAIScaleSetPriority &scale_set_priority) {
    m_scale_set_priority = scale_set_priority;
    m_scale_set_priority_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_scale_set_priority_Set() const{
    return m_scale_set_priority_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_scale_set_priority_Valid() const{
    return m_scale_set_priority_isValid;
}

OAIAgentPoolType OAIManagedClusterAgentPoolProfileProperties::getType() const {
    return m_type;
}
void OAIManagedClusterAgentPoolProfileProperties::setType(const OAIAgentPoolType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_type_Valid() const{
    return m_type_isValid;
}

OAIContainerServiceVMSize OAIManagedClusterAgentPoolProfileProperties::getVmSize() const {
    return m_vm_size;
}
void OAIManagedClusterAgentPoolProfileProperties::setVmSize(const OAIContainerServiceVMSize &vm_size) {
    m_vm_size = vm_size;
    m_vm_size_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_vm_size_Set() const{
    return m_vm_size_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_vm_size_Valid() const{
    return m_vm_size_isValid;
}

QString OAIManagedClusterAgentPoolProfileProperties::getVnetSubnetId() const {
    return m_vnet_subnet_id;
}
void OAIManagedClusterAgentPoolProfileProperties::setVnetSubnetId(const QString &vnet_subnet_id) {
    m_vnet_subnet_id = vnet_subnet_id;
    m_vnet_subnet_id_isSet = true;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_vnet_subnet_id_Set() const{
    return m_vnet_subnet_id_isSet;
}

bool OAIManagedClusterAgentPoolProfileProperties::is_vnet_subnet_id_Valid() const{
    return m_vnet_subnet_id_isValid;
}

bool OAIManagedClusterAgentPoolProfileProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_zones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_auto_scaling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_node_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_taints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_orchestrator_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_set_eviction_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_set_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnet_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedClusterAgentPoolProfileProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
