# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.managed_cluster_pool_upgrade_profile import ManagedClusterPoolUpgradeProfile
from openapi_server import util


class ManagedClusterUpgradeProfileProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_pool_profiles: List[ManagedClusterPoolUpgradeProfile]=None, control_plane_profile: ManagedClusterPoolUpgradeProfile=None):
        """ManagedClusterUpgradeProfileProperties - a model defined in OpenAPI

        :param agent_pool_profiles: The agent_pool_profiles of this ManagedClusterUpgradeProfileProperties.
        :param control_plane_profile: The control_plane_profile of this ManagedClusterUpgradeProfileProperties.
        """
        self.openapi_types = {
            'agent_pool_profiles': List[ManagedClusterPoolUpgradeProfile],
            'control_plane_profile': ManagedClusterPoolUpgradeProfile
        }

        self.attribute_map = {
            'agent_pool_profiles': 'agentPoolProfiles',
            'control_plane_profile': 'controlPlaneProfile'
        }

        self._agent_pool_profiles = agent_pool_profiles
        self._control_plane_profile = control_plane_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedClusterUpgradeProfileProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedClusterUpgradeProfileProperties of this ManagedClusterUpgradeProfileProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_pool_profiles(self):
        """Gets the agent_pool_profiles of this ManagedClusterUpgradeProfileProperties.

        The list of available upgrade versions for agent pools.

        :return: The agent_pool_profiles of this ManagedClusterUpgradeProfileProperties.
        :rtype: List[ManagedClusterPoolUpgradeProfile]
        """
        return self._agent_pool_profiles

    @agent_pool_profiles.setter
    def agent_pool_profiles(self, agent_pool_profiles):
        """Sets the agent_pool_profiles of this ManagedClusterUpgradeProfileProperties.

        The list of available upgrade versions for agent pools.

        :param agent_pool_profiles: The agent_pool_profiles of this ManagedClusterUpgradeProfileProperties.
        :type agent_pool_profiles: List[ManagedClusterPoolUpgradeProfile]
        """
        if agent_pool_profiles is None:
            raise ValueError("Invalid value for `agent_pool_profiles`, must not be `None`")

        self._agent_pool_profiles = agent_pool_profiles

    @property
    def control_plane_profile(self):
        """Gets the control_plane_profile of this ManagedClusterUpgradeProfileProperties.


        :return: The control_plane_profile of this ManagedClusterUpgradeProfileProperties.
        :rtype: ManagedClusterPoolUpgradeProfile
        """
        return self._control_plane_profile

    @control_plane_profile.setter
    def control_plane_profile(self, control_plane_profile):
        """Sets the control_plane_profile of this ManagedClusterUpgradeProfileProperties.


        :param control_plane_profile: The control_plane_profile of this ManagedClusterUpgradeProfileProperties.
        :type control_plane_profile: ManagedClusterPoolUpgradeProfile
        """
        if control_plane_profile is None:
            raise ValueError("Invalid value for `control_plane_profile`, must not be `None`")

        self._control_plane_profile = control_plane_profile
