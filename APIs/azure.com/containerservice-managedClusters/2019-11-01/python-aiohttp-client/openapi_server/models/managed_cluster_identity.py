# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManagedClusterIdentity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, principal_id: str=None, tenant_id: str=None, type: str=None):
        """ManagedClusterIdentity - a model defined in OpenAPI

        :param principal_id: The principal_id of this ManagedClusterIdentity.
        :param tenant_id: The tenant_id of this ManagedClusterIdentity.
        :param type: The type of this ManagedClusterIdentity.
        """
        self.openapi_types = {
            'principal_id': str,
            'tenant_id': str,
            'type': str
        }

        self.attribute_map = {
            'principal_id': 'principalId',
            'tenant_id': 'tenantId',
            'type': 'type'
        }

        self._principal_id = principal_id
        self._tenant_id = tenant_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedClusterIdentity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedClusterIdentity of this ManagedClusterIdentity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def principal_id(self):
        """Gets the principal_id of this ManagedClusterIdentity.

        The principal id of the system assigned identity which is used by master components.

        :return: The principal_id of this ManagedClusterIdentity.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this ManagedClusterIdentity.

        The principal id of the system assigned identity which is used by master components.

        :param principal_id: The principal_id of this ManagedClusterIdentity.
        :type principal_id: str
        """

        self._principal_id = principal_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this ManagedClusterIdentity.

        The tenant id of the system assigned identity which is used by master components.

        :return: The tenant_id of this ManagedClusterIdentity.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this ManagedClusterIdentity.

        The tenant id of the system assigned identity which is used by master components.

        :param tenant_id: The tenant_id of this ManagedClusterIdentity.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def type(self):
        """Gets the type of this ManagedClusterIdentity.

        The type of identity used for the managed cluster. Type 'SystemAssigned' will use an implicitly created identity in master components and an auto-created user assigned identity in MC_ resource group in agent nodes. Type 'None' will not use MSI for the managed cluster, service principal will be used instead.

        :return: The type of this ManagedClusterIdentity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ManagedClusterIdentity.

        The type of identity used for the managed cluster. Type 'SystemAssigned' will use an implicitly created identity in master components and an auto-created user assigned identity in MC_ resource group in agent nodes. Type 'None' will not use MSI for the managed cluster, service principal will be used instead.

        :param type: The type of this ManagedClusterIdentity.
        :type type: str
        """
        allowed_values = ["SystemAssigned", "None"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
