# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_assigned_identity import UserAssignedIdentity
from openapi_server import util


class ManagedClusterAddonProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: object=None, enabled: bool=None, identity: UserAssignedIdentity=None):
        """ManagedClusterAddonProfile - a model defined in OpenAPI

        :param config: The config of this ManagedClusterAddonProfile.
        :param enabled: The enabled of this ManagedClusterAddonProfile.
        :param identity: The identity of this ManagedClusterAddonProfile.
        """
        self.openapi_types = {
            'config': object,
            'enabled': bool,
            'identity': UserAssignedIdentity
        }

        self.attribute_map = {
            'config': 'config',
            'enabled': 'enabled',
            'identity': 'identity'
        }

        self._config = config
        self._enabled = enabled
        self._identity = identity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedClusterAddonProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedClusterAddonProfile of this ManagedClusterAddonProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this ManagedClusterAddonProfile.

        Key-value pairs for configuring an add-on.

        :return: The config of this ManagedClusterAddonProfile.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ManagedClusterAddonProfile.

        Key-value pairs for configuring an add-on.

        :param config: The config of this ManagedClusterAddonProfile.
        :type config: object
        """

        self._config = config

    @property
    def enabled(self):
        """Gets the enabled of this ManagedClusterAddonProfile.

        Whether the add-on is enabled or not.

        :return: The enabled of this ManagedClusterAddonProfile.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ManagedClusterAddonProfile.

        Whether the add-on is enabled or not.

        :param enabled: The enabled of this ManagedClusterAddonProfile.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def identity(self):
        """Gets the identity of this ManagedClusterAddonProfile.

        Information of user assigned identity used by this add-on.

        :return: The identity of this ManagedClusterAddonProfile.
        :rtype: UserAssignedIdentity
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this ManagedClusterAddonProfile.

        Information of user assigned identity used by this add-on.

        :param identity: The identity of this ManagedClusterAddonProfile.
        :type identity: UserAssignedIdentity
        """

        self._identity = identity
