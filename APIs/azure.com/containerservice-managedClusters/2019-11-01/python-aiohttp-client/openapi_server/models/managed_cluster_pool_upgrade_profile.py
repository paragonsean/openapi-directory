# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_pool_upgrade_profile_properties_upgrades_inner import AgentPoolUpgradeProfilePropertiesUpgradesInner
from openapi_server.models.os_type import OSType
from openapi_server import util


class ManagedClusterPoolUpgradeProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kubernetes_version: str=None, name: str=None, os_type: OSType=OSType.LINUX, upgrades: List[AgentPoolUpgradeProfilePropertiesUpgradesInner]=None):
        """ManagedClusterPoolUpgradeProfile - a model defined in OpenAPI

        :param kubernetes_version: The kubernetes_version of this ManagedClusterPoolUpgradeProfile.
        :param name: The name of this ManagedClusterPoolUpgradeProfile.
        :param os_type: The os_type of this ManagedClusterPoolUpgradeProfile.
        :param upgrades: The upgrades of this ManagedClusterPoolUpgradeProfile.
        """
        self.openapi_types = {
            'kubernetes_version': str,
            'name': str,
            'os_type': OSType,
            'upgrades': List[AgentPoolUpgradeProfilePropertiesUpgradesInner]
        }

        self.attribute_map = {
            'kubernetes_version': 'kubernetesVersion',
            'name': 'name',
            'os_type': 'osType',
            'upgrades': 'upgrades'
        }

        self._kubernetes_version = kubernetes_version
        self._name = name
        self._os_type = os_type
        self._upgrades = upgrades

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedClusterPoolUpgradeProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedClusterPoolUpgradeProfile of this ManagedClusterPoolUpgradeProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kubernetes_version(self):
        """Gets the kubernetes_version of this ManagedClusterPoolUpgradeProfile.

        Kubernetes version (major, minor, patch).

        :return: The kubernetes_version of this ManagedClusterPoolUpgradeProfile.
        :rtype: str
        """
        return self._kubernetes_version

    @kubernetes_version.setter
    def kubernetes_version(self, kubernetes_version):
        """Sets the kubernetes_version of this ManagedClusterPoolUpgradeProfile.

        Kubernetes version (major, minor, patch).

        :param kubernetes_version: The kubernetes_version of this ManagedClusterPoolUpgradeProfile.
        :type kubernetes_version: str
        """
        if kubernetes_version is None:
            raise ValueError("Invalid value for `kubernetes_version`, must not be `None`")

        self._kubernetes_version = kubernetes_version

    @property
    def name(self):
        """Gets the name of this ManagedClusterPoolUpgradeProfile.

        Pool name.

        :return: The name of this ManagedClusterPoolUpgradeProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManagedClusterPoolUpgradeProfile.

        Pool name.

        :param name: The name of this ManagedClusterPoolUpgradeProfile.
        :type name: str
        """

        self._name = name

    @property
    def os_type(self):
        """Gets the os_type of this ManagedClusterPoolUpgradeProfile.


        :return: The os_type of this ManagedClusterPoolUpgradeProfile.
        :rtype: OSType
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this ManagedClusterPoolUpgradeProfile.


        :param os_type: The os_type of this ManagedClusterPoolUpgradeProfile.
        :type os_type: OSType
        """
        if os_type is None:
            raise ValueError("Invalid value for `os_type`, must not be `None`")

        self._os_type = os_type

    @property
    def upgrades(self):
        """Gets the upgrades of this ManagedClusterPoolUpgradeProfile.

        List of orchestrator types and versions available for upgrade.

        :return: The upgrades of this ManagedClusterPoolUpgradeProfile.
        :rtype: List[AgentPoolUpgradeProfilePropertiesUpgradesInner]
        """
        return self._upgrades

    @upgrades.setter
    def upgrades(self, upgrades):
        """Sets the upgrades of this ManagedClusterPoolUpgradeProfile.

        List of orchestrator types and versions available for upgrade.

        :param upgrades: The upgrades of this ManagedClusterPoolUpgradeProfile.
        :type upgrades: List[AgentPoolUpgradeProfilePropertiesUpgradesInner]
        """

        self._upgrades = upgrades
