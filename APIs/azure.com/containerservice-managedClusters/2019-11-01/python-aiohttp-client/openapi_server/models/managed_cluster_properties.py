# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_service_linux_profile import ContainerServiceLinuxProfile
from openapi_server.models.container_service_network_profile import ContainerServiceNetworkProfile
from openapi_server.models.managed_cluster_aad_profile import ManagedClusterAADProfile
from openapi_server.models.managed_cluster_api_server_access_profile import ManagedClusterAPIServerAccessProfile
from openapi_server.models.managed_cluster_agent_pool_profile import ManagedClusterAgentPoolProfile
from openapi_server.models.managed_cluster_service_principal_profile import ManagedClusterServicePrincipalProfile
from openapi_server.models.managed_cluster_windows_profile import ManagedClusterWindowsProfile
from openapi_server import util


class ManagedClusterProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aad_profile: ManagedClusterAADProfile=None, addon_profiles: object=None, agent_pool_profiles: List[ManagedClusterAgentPoolProfile]=None, api_server_access_profile: ManagedClusterAPIServerAccessProfile=None, dns_prefix: str=None, enable_pod_security_policy: bool=None, enable_rbac: bool=None, fqdn: str=None, identity_profile: object=None, kubernetes_version: str=None, linux_profile: ContainerServiceLinuxProfile=None, max_agent_pools: int=None, network_profile: ContainerServiceNetworkProfile=None, node_resource_group: str=None, private_fqdn: str=None, provisioning_state: str=None, service_principal_profile: ManagedClusterServicePrincipalProfile=None, windows_profile: ManagedClusterWindowsProfile=None):
        """ManagedClusterProperties - a model defined in OpenAPI

        :param aad_profile: The aad_profile of this ManagedClusterProperties.
        :param addon_profiles: The addon_profiles of this ManagedClusterProperties.
        :param agent_pool_profiles: The agent_pool_profiles of this ManagedClusterProperties.
        :param api_server_access_profile: The api_server_access_profile of this ManagedClusterProperties.
        :param dns_prefix: The dns_prefix of this ManagedClusterProperties.
        :param enable_pod_security_policy: The enable_pod_security_policy of this ManagedClusterProperties.
        :param enable_rbac: The enable_rbac of this ManagedClusterProperties.
        :param fqdn: The fqdn of this ManagedClusterProperties.
        :param identity_profile: The identity_profile of this ManagedClusterProperties.
        :param kubernetes_version: The kubernetes_version of this ManagedClusterProperties.
        :param linux_profile: The linux_profile of this ManagedClusterProperties.
        :param max_agent_pools: The max_agent_pools of this ManagedClusterProperties.
        :param network_profile: The network_profile of this ManagedClusterProperties.
        :param node_resource_group: The node_resource_group of this ManagedClusterProperties.
        :param private_fqdn: The private_fqdn of this ManagedClusterProperties.
        :param provisioning_state: The provisioning_state of this ManagedClusterProperties.
        :param service_principal_profile: The service_principal_profile of this ManagedClusterProperties.
        :param windows_profile: The windows_profile of this ManagedClusterProperties.
        """
        self.openapi_types = {
            'aad_profile': ManagedClusterAADProfile,
            'addon_profiles': object,
            'agent_pool_profiles': List[ManagedClusterAgentPoolProfile],
            'api_server_access_profile': ManagedClusterAPIServerAccessProfile,
            'dns_prefix': str,
            'enable_pod_security_policy': bool,
            'enable_rbac': bool,
            'fqdn': str,
            'identity_profile': object,
            'kubernetes_version': str,
            'linux_profile': ContainerServiceLinuxProfile,
            'max_agent_pools': int,
            'network_profile': ContainerServiceNetworkProfile,
            'node_resource_group': str,
            'private_fqdn': str,
            'provisioning_state': str,
            'service_principal_profile': ManagedClusterServicePrincipalProfile,
            'windows_profile': ManagedClusterWindowsProfile
        }

        self.attribute_map = {
            'aad_profile': 'aadProfile',
            'addon_profiles': 'addonProfiles',
            'agent_pool_profiles': 'agentPoolProfiles',
            'api_server_access_profile': 'apiServerAccessProfile',
            'dns_prefix': 'dnsPrefix',
            'enable_pod_security_policy': 'enablePodSecurityPolicy',
            'enable_rbac': 'enableRBAC',
            'fqdn': 'fqdn',
            'identity_profile': 'identityProfile',
            'kubernetes_version': 'kubernetesVersion',
            'linux_profile': 'linuxProfile',
            'max_agent_pools': 'maxAgentPools',
            'network_profile': 'networkProfile',
            'node_resource_group': 'nodeResourceGroup',
            'private_fqdn': 'privateFQDN',
            'provisioning_state': 'provisioningState',
            'service_principal_profile': 'servicePrincipalProfile',
            'windows_profile': 'windowsProfile'
        }

        self._aad_profile = aad_profile
        self._addon_profiles = addon_profiles
        self._agent_pool_profiles = agent_pool_profiles
        self._api_server_access_profile = api_server_access_profile
        self._dns_prefix = dns_prefix
        self._enable_pod_security_policy = enable_pod_security_policy
        self._enable_rbac = enable_rbac
        self._fqdn = fqdn
        self._identity_profile = identity_profile
        self._kubernetes_version = kubernetes_version
        self._linux_profile = linux_profile
        self._max_agent_pools = max_agent_pools
        self._network_profile = network_profile
        self._node_resource_group = node_resource_group
        self._private_fqdn = private_fqdn
        self._provisioning_state = provisioning_state
        self._service_principal_profile = service_principal_profile
        self._windows_profile = windows_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedClusterProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedClusterProperties of this ManagedClusterProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aad_profile(self):
        """Gets the aad_profile of this ManagedClusterProperties.


        :return: The aad_profile of this ManagedClusterProperties.
        :rtype: ManagedClusterAADProfile
        """
        return self._aad_profile

    @aad_profile.setter
    def aad_profile(self, aad_profile):
        """Sets the aad_profile of this ManagedClusterProperties.


        :param aad_profile: The aad_profile of this ManagedClusterProperties.
        :type aad_profile: ManagedClusterAADProfile
        """

        self._aad_profile = aad_profile

    @property
    def addon_profiles(self):
        """Gets the addon_profiles of this ManagedClusterProperties.

        Profile of managed cluster add-on.

        :return: The addon_profiles of this ManagedClusterProperties.
        :rtype: object
        """
        return self._addon_profiles

    @addon_profiles.setter
    def addon_profiles(self, addon_profiles):
        """Sets the addon_profiles of this ManagedClusterProperties.

        Profile of managed cluster add-on.

        :param addon_profiles: The addon_profiles of this ManagedClusterProperties.
        :type addon_profiles: object
        """

        self._addon_profiles = addon_profiles

    @property
    def agent_pool_profiles(self):
        """Gets the agent_pool_profiles of this ManagedClusterProperties.

        Properties of the agent pool.

        :return: The agent_pool_profiles of this ManagedClusterProperties.
        :rtype: List[ManagedClusterAgentPoolProfile]
        """
        return self._agent_pool_profiles

    @agent_pool_profiles.setter
    def agent_pool_profiles(self, agent_pool_profiles):
        """Sets the agent_pool_profiles of this ManagedClusterProperties.

        Properties of the agent pool.

        :param agent_pool_profiles: The agent_pool_profiles of this ManagedClusterProperties.
        :type agent_pool_profiles: List[ManagedClusterAgentPoolProfile]
        """

        self._agent_pool_profiles = agent_pool_profiles

    @property
    def api_server_access_profile(self):
        """Gets the api_server_access_profile of this ManagedClusterProperties.


        :return: The api_server_access_profile of this ManagedClusterProperties.
        :rtype: ManagedClusterAPIServerAccessProfile
        """
        return self._api_server_access_profile

    @api_server_access_profile.setter
    def api_server_access_profile(self, api_server_access_profile):
        """Sets the api_server_access_profile of this ManagedClusterProperties.


        :param api_server_access_profile: The api_server_access_profile of this ManagedClusterProperties.
        :type api_server_access_profile: ManagedClusterAPIServerAccessProfile
        """

        self._api_server_access_profile = api_server_access_profile

    @property
    def dns_prefix(self):
        """Gets the dns_prefix of this ManagedClusterProperties.

        DNS prefix specified when creating the managed cluster.

        :return: The dns_prefix of this ManagedClusterProperties.
        :rtype: str
        """
        return self._dns_prefix

    @dns_prefix.setter
    def dns_prefix(self, dns_prefix):
        """Sets the dns_prefix of this ManagedClusterProperties.

        DNS prefix specified when creating the managed cluster.

        :param dns_prefix: The dns_prefix of this ManagedClusterProperties.
        :type dns_prefix: str
        """

        self._dns_prefix = dns_prefix

    @property
    def enable_pod_security_policy(self):
        """Gets the enable_pod_security_policy of this ManagedClusterProperties.

        (PREVIEW) Whether to enable Kubernetes Pod security policy.

        :return: The enable_pod_security_policy of this ManagedClusterProperties.
        :rtype: bool
        """
        return self._enable_pod_security_policy

    @enable_pod_security_policy.setter
    def enable_pod_security_policy(self, enable_pod_security_policy):
        """Sets the enable_pod_security_policy of this ManagedClusterProperties.

        (PREVIEW) Whether to enable Kubernetes Pod security policy.

        :param enable_pod_security_policy: The enable_pod_security_policy of this ManagedClusterProperties.
        :type enable_pod_security_policy: bool
        """

        self._enable_pod_security_policy = enable_pod_security_policy

    @property
    def enable_rbac(self):
        """Gets the enable_rbac of this ManagedClusterProperties.

        Whether to enable Kubernetes Role-Based Access Control.

        :return: The enable_rbac of this ManagedClusterProperties.
        :rtype: bool
        """
        return self._enable_rbac

    @enable_rbac.setter
    def enable_rbac(self, enable_rbac):
        """Sets the enable_rbac of this ManagedClusterProperties.

        Whether to enable Kubernetes Role-Based Access Control.

        :param enable_rbac: The enable_rbac of this ManagedClusterProperties.
        :type enable_rbac: bool
        """

        self._enable_rbac = enable_rbac

    @property
    def fqdn(self):
        """Gets the fqdn of this ManagedClusterProperties.

        FQDN for the master pool.

        :return: The fqdn of this ManagedClusterProperties.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this ManagedClusterProperties.

        FQDN for the master pool.

        :param fqdn: The fqdn of this ManagedClusterProperties.
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def identity_profile(self):
        """Gets the identity_profile of this ManagedClusterProperties.

        Identities associated with the cluster.

        :return: The identity_profile of this ManagedClusterProperties.
        :rtype: object
        """
        return self._identity_profile

    @identity_profile.setter
    def identity_profile(self, identity_profile):
        """Sets the identity_profile of this ManagedClusterProperties.

        Identities associated with the cluster.

        :param identity_profile: The identity_profile of this ManagedClusterProperties.
        :type identity_profile: object
        """

        self._identity_profile = identity_profile

    @property
    def kubernetes_version(self):
        """Gets the kubernetes_version of this ManagedClusterProperties.

        Version of Kubernetes specified when creating the managed cluster.

        :return: The kubernetes_version of this ManagedClusterProperties.
        :rtype: str
        """
        return self._kubernetes_version

    @kubernetes_version.setter
    def kubernetes_version(self, kubernetes_version):
        """Sets the kubernetes_version of this ManagedClusterProperties.

        Version of Kubernetes specified when creating the managed cluster.

        :param kubernetes_version: The kubernetes_version of this ManagedClusterProperties.
        :type kubernetes_version: str
        """

        self._kubernetes_version = kubernetes_version

    @property
    def linux_profile(self):
        """Gets the linux_profile of this ManagedClusterProperties.


        :return: The linux_profile of this ManagedClusterProperties.
        :rtype: ContainerServiceLinuxProfile
        """
        return self._linux_profile

    @linux_profile.setter
    def linux_profile(self, linux_profile):
        """Sets the linux_profile of this ManagedClusterProperties.


        :param linux_profile: The linux_profile of this ManagedClusterProperties.
        :type linux_profile: ContainerServiceLinuxProfile
        """

        self._linux_profile = linux_profile

    @property
    def max_agent_pools(self):
        """Gets the max_agent_pools of this ManagedClusterProperties.

        The max number of agent pools for the managed cluster.

        :return: The max_agent_pools of this ManagedClusterProperties.
        :rtype: int
        """
        return self._max_agent_pools

    @max_agent_pools.setter
    def max_agent_pools(self, max_agent_pools):
        """Sets the max_agent_pools of this ManagedClusterProperties.

        The max number of agent pools for the managed cluster.

        :param max_agent_pools: The max_agent_pools of this ManagedClusterProperties.
        :type max_agent_pools: int
        """

        self._max_agent_pools = max_agent_pools

    @property
    def network_profile(self):
        """Gets the network_profile of this ManagedClusterProperties.


        :return: The network_profile of this ManagedClusterProperties.
        :rtype: ContainerServiceNetworkProfile
        """
        return self._network_profile

    @network_profile.setter
    def network_profile(self, network_profile):
        """Sets the network_profile of this ManagedClusterProperties.


        :param network_profile: The network_profile of this ManagedClusterProperties.
        :type network_profile: ContainerServiceNetworkProfile
        """

        self._network_profile = network_profile

    @property
    def node_resource_group(self):
        """Gets the node_resource_group of this ManagedClusterProperties.

        Name of the resource group containing agent pool nodes.

        :return: The node_resource_group of this ManagedClusterProperties.
        :rtype: str
        """
        return self._node_resource_group

    @node_resource_group.setter
    def node_resource_group(self, node_resource_group):
        """Sets the node_resource_group of this ManagedClusterProperties.

        Name of the resource group containing agent pool nodes.

        :param node_resource_group: The node_resource_group of this ManagedClusterProperties.
        :type node_resource_group: str
        """

        self._node_resource_group = node_resource_group

    @property
    def private_fqdn(self):
        """Gets the private_fqdn of this ManagedClusterProperties.

        FQDN of private cluster.

        :return: The private_fqdn of this ManagedClusterProperties.
        :rtype: str
        """
        return self._private_fqdn

    @private_fqdn.setter
    def private_fqdn(self, private_fqdn):
        """Sets the private_fqdn of this ManagedClusterProperties.

        FQDN of private cluster.

        :param private_fqdn: The private_fqdn of this ManagedClusterProperties.
        :type private_fqdn: str
        """

        self._private_fqdn = private_fqdn

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ManagedClusterProperties.

        The current deployment or provisioning state, which only appears in the response.

        :return: The provisioning_state of this ManagedClusterProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ManagedClusterProperties.

        The current deployment or provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this ManagedClusterProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def service_principal_profile(self):
        """Gets the service_principal_profile of this ManagedClusterProperties.


        :return: The service_principal_profile of this ManagedClusterProperties.
        :rtype: ManagedClusterServicePrincipalProfile
        """
        return self._service_principal_profile

    @service_principal_profile.setter
    def service_principal_profile(self, service_principal_profile):
        """Sets the service_principal_profile of this ManagedClusterProperties.


        :param service_principal_profile: The service_principal_profile of this ManagedClusterProperties.
        :type service_principal_profile: ManagedClusterServicePrincipalProfile
        """

        self._service_principal_profile = service_principal_profile

    @property
    def windows_profile(self):
        """Gets the windows_profile of this ManagedClusterProperties.


        :return: The windows_profile of this ManagedClusterProperties.
        :rtype: ManagedClusterWindowsProfile
        """
        return self._windows_profile

    @windows_profile.setter
    def windows_profile(self, windows_profile):
        """Sets the windows_profile of this ManagedClusterProperties.


        :param windows_profile: The windows_profile of this ManagedClusterProperties.
        :type windows_profile: ManagedClusterWindowsProfile
        """

        self._windows_profile = windows_profile
