/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ManagedClusterLoadBalancerProfile from './ManagedClusterLoadBalancerProfile';

/**
 * The ContainerServiceNetworkProfile model module.
 * @module model/ContainerServiceNetworkProfile
 * @version 2019-11-01
 */
class ContainerServiceNetworkProfile {
    /**
     * Constructs a new <code>ContainerServiceNetworkProfile</code>.
     * Profile of network configuration.
     * @alias module:model/ContainerServiceNetworkProfile
     */
    constructor() { 
        
        ContainerServiceNetworkProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['dnsServiceIP'] = '10.0.0.10';
        obj['dockerBridgeCidr'] = '172.17.0.1/16';
        obj['networkPlugin'] = 'kubenet';
        obj['outboundType'] = 'loadBalancer';
        obj['podCidr'] = '10.244.0.0/16';
        obj['serviceCidr'] = '10.0.0.0/16';
    }

    /**
     * Constructs a <code>ContainerServiceNetworkProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerServiceNetworkProfile} obj Optional instance to populate.
     * @return {module:model/ContainerServiceNetworkProfile} The populated <code>ContainerServiceNetworkProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerServiceNetworkProfile();

            if (data.hasOwnProperty('dnsServiceIP')) {
                obj['dnsServiceIP'] = ApiClient.convertToType(data['dnsServiceIP'], 'String');
            }
            if (data.hasOwnProperty('dockerBridgeCidr')) {
                obj['dockerBridgeCidr'] = ApiClient.convertToType(data['dockerBridgeCidr'], 'String');
            }
            if (data.hasOwnProperty('loadBalancerProfile')) {
                obj['loadBalancerProfile'] = ManagedClusterLoadBalancerProfile.constructFromObject(data['loadBalancerProfile']);
            }
            if (data.hasOwnProperty('loadBalancerSku')) {
                obj['loadBalancerSku'] = ApiClient.convertToType(data['loadBalancerSku'], 'String');
            }
            if (data.hasOwnProperty('networkPlugin')) {
                obj['networkPlugin'] = ApiClient.convertToType(data['networkPlugin'], 'String');
            }
            if (data.hasOwnProperty('networkPolicy')) {
                obj['networkPolicy'] = ApiClient.convertToType(data['networkPolicy'], 'String');
            }
            if (data.hasOwnProperty('outboundType')) {
                obj['outboundType'] = ApiClient.convertToType(data['outboundType'], 'String');
            }
            if (data.hasOwnProperty('podCidr')) {
                obj['podCidr'] = ApiClient.convertToType(data['podCidr'], 'String');
            }
            if (data.hasOwnProperty('serviceCidr')) {
                obj['serviceCidr'] = ApiClient.convertToType(data['serviceCidr'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerServiceNetworkProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerServiceNetworkProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dnsServiceIP'] && !(typeof data['dnsServiceIP'] === 'string' || data['dnsServiceIP'] instanceof String)) {
            throw new Error("Expected the field `dnsServiceIP` to be a primitive type in the JSON string but got " + data['dnsServiceIP']);
        }
        // ensure the json data is a string
        if (data['dockerBridgeCidr'] && !(typeof data['dockerBridgeCidr'] === 'string' || data['dockerBridgeCidr'] instanceof String)) {
            throw new Error("Expected the field `dockerBridgeCidr` to be a primitive type in the JSON string but got " + data['dockerBridgeCidr']);
        }
        // validate the optional field `loadBalancerProfile`
        if (data['loadBalancerProfile']) { // data not null
          ManagedClusterLoadBalancerProfile.validateJSON(data['loadBalancerProfile']);
        }
        // ensure the json data is a string
        if (data['loadBalancerSku'] && !(typeof data['loadBalancerSku'] === 'string' || data['loadBalancerSku'] instanceof String)) {
            throw new Error("Expected the field `loadBalancerSku` to be a primitive type in the JSON string but got " + data['loadBalancerSku']);
        }
        // ensure the json data is a string
        if (data['networkPlugin'] && !(typeof data['networkPlugin'] === 'string' || data['networkPlugin'] instanceof String)) {
            throw new Error("Expected the field `networkPlugin` to be a primitive type in the JSON string but got " + data['networkPlugin']);
        }
        // ensure the json data is a string
        if (data['networkPolicy'] && !(typeof data['networkPolicy'] === 'string' || data['networkPolicy'] instanceof String)) {
            throw new Error("Expected the field `networkPolicy` to be a primitive type in the JSON string but got " + data['networkPolicy']);
        }
        // ensure the json data is a string
        if (data['outboundType'] && !(typeof data['outboundType'] === 'string' || data['outboundType'] instanceof String)) {
            throw new Error("Expected the field `outboundType` to be a primitive type in the JSON string but got " + data['outboundType']);
        }
        // ensure the json data is a string
        if (data['podCidr'] && !(typeof data['podCidr'] === 'string' || data['podCidr'] instanceof String)) {
            throw new Error("Expected the field `podCidr` to be a primitive type in the JSON string but got " + data['podCidr']);
        }
        // ensure the json data is a string
        if (data['serviceCidr'] && !(typeof data['serviceCidr'] === 'string' || data['serviceCidr'] instanceof String)) {
            throw new Error("Expected the field `serviceCidr` to be a primitive type in the JSON string but got " + data['serviceCidr']);
        }

        return true;
    }


}



/**
 * An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
 * @member {String} dnsServiceIP
 * @default '10.0.0.10'
 */
ContainerServiceNetworkProfile.prototype['dnsServiceIP'] = '10.0.0.10';

/**
 * A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
 * @member {String} dockerBridgeCidr
 * @default '172.17.0.1/16'
 */
ContainerServiceNetworkProfile.prototype['dockerBridgeCidr'] = '172.17.0.1/16';

/**
 * @member {module:model/ManagedClusterLoadBalancerProfile} loadBalancerProfile
 */
ContainerServiceNetworkProfile.prototype['loadBalancerProfile'] = undefined;

/**
 * The load balancer sku for the managed cluster.
 * @member {module:model/ContainerServiceNetworkProfile.LoadBalancerSkuEnum} loadBalancerSku
 */
ContainerServiceNetworkProfile.prototype['loadBalancerSku'] = undefined;

/**
 * Network plugin used for building Kubernetes network.
 * @member {module:model/ContainerServiceNetworkProfile.NetworkPluginEnum} networkPlugin
 * @default 'kubenet'
 */
ContainerServiceNetworkProfile.prototype['networkPlugin'] = 'kubenet';

/**
 * Network policy used for building Kubernetes network.
 * @member {module:model/ContainerServiceNetworkProfile.NetworkPolicyEnum} networkPolicy
 */
ContainerServiceNetworkProfile.prototype['networkPolicy'] = undefined;

/**
 * The outbound (egress) routing method.
 * @member {module:model/ContainerServiceNetworkProfile.OutboundTypeEnum} outboundType
 * @default 'loadBalancer'
 */
ContainerServiceNetworkProfile.prototype['outboundType'] = 'loadBalancer';

/**
 * A CIDR notation IP range from which to assign pod IPs when kubenet is used.
 * @member {String} podCidr
 * @default '10.244.0.0/16'
 */
ContainerServiceNetworkProfile.prototype['podCidr'] = '10.244.0.0/16';

/**
 * A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
 * @member {String} serviceCidr
 * @default '10.0.0.0/16'
 */
ContainerServiceNetworkProfile.prototype['serviceCidr'] = '10.0.0.0/16';





/**
 * Allowed values for the <code>loadBalancerSku</code> property.
 * @enum {String}
 * @readonly
 */
ContainerServiceNetworkProfile['LoadBalancerSkuEnum'] = {

    /**
     * value: "standard"
     * @const
     */
    "standard": "standard",

    /**
     * value: "basic"
     * @const
     */
    "basic": "basic"
};


/**
 * Allowed values for the <code>networkPlugin</code> property.
 * @enum {String}
 * @readonly
 */
ContainerServiceNetworkProfile['NetworkPluginEnum'] = {

    /**
     * value: "azure"
     * @const
     */
    "azure": "azure",

    /**
     * value: "kubenet"
     * @const
     */
    "kubenet": "kubenet"
};


/**
 * Allowed values for the <code>networkPolicy</code> property.
 * @enum {String}
 * @readonly
 */
ContainerServiceNetworkProfile['NetworkPolicyEnum'] = {

    /**
     * value: "calico"
     * @const
     */
    "calico": "calico",

    /**
     * value: "azure"
     * @const
     */
    "azure": "azure"
};


/**
 * Allowed values for the <code>outboundType</code> property.
 * @enum {String}
 * @readonly
 */
ContainerServiceNetworkProfile['OutboundTypeEnum'] = {

    /**
     * value: "loadBalancer"
     * @const
     */
    "loadBalancer": "loadBalancer",

    /**
     * value: "userDefinedRouting"
     * @const
     */
    "userDefinedRouting": "userDefinedRouting"
};



export default ContainerServiceNetworkProfile;

