/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAgentPoolsApi_H
#define OAI_OAIAgentPoolsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAgentPool.h"
#include "OAIAgentPoolAvailableVersions.h"
#include "OAIAgentPoolListResult.h"
#include "OAIAgentPoolUpgradeProfile.h"
#include "OAICloudError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAgentPoolsApi : public QObject {
    Q_OBJECT

public:
    OAIAgentPoolsApi(const int timeOut = 0);
    ~OAIAgentPoolsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  agent_pool_name QString [required]
    * @param[in]  parameters OAIAgentPool [required]
    */
    virtual void agentPoolsCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &agent_pool_name, const OAIAgentPool &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  agent_pool_name QString [required]
    */
    virtual void agentPoolsDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &agent_pool_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  agent_pool_name QString [required]
    */
    virtual void agentPoolsGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &agent_pool_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void agentPoolsGetAvailableAgentPoolVersions(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  agent_pool_name QString [required]
    */
    virtual void agentPoolsGetUpgradeProfile(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &agent_pool_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void agentPoolsList(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void agentPoolsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void agentPoolsDeleteCallback(OAIHttpRequestWorker *worker);
    void agentPoolsGetCallback(OAIHttpRequestWorker *worker);
    void agentPoolsGetAvailableAgentPoolVersionsCallback(OAIHttpRequestWorker *worker);
    void agentPoolsGetUpgradeProfileCallback(OAIHttpRequestWorker *worker);
    void agentPoolsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void agentPoolsCreateOrUpdateSignal(OAIAgentPool summary);
    void agentPoolsDeleteSignal();
    void agentPoolsGetSignal(OAIAgentPool summary);
    void agentPoolsGetAvailableAgentPoolVersionsSignal(OAIAgentPoolAvailableVersions summary);
    void agentPoolsGetUpgradeProfileSignal(OAIAgentPoolUpgradeProfile summary);
    void agentPoolsListSignal(OAIAgentPoolListResult summary);


    void agentPoolsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAgentPool summary);
    void agentPoolsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void agentPoolsGetSignalFull(OAIHttpRequestWorker *worker, OAIAgentPool summary);
    void agentPoolsGetAvailableAgentPoolVersionsSignalFull(OAIHttpRequestWorker *worker, OAIAgentPoolAvailableVersions summary);
    void agentPoolsGetUpgradeProfileSignalFull(OAIHttpRequestWorker *worker, OAIAgentPoolUpgradeProfile summary);
    void agentPoolsListSignalFull(OAIHttpRequestWorker *worker, OAIAgentPoolListResult summary);

    Q_DECL_DEPRECATED_X("Use agentPoolsCreateOrUpdateSignalError() instead")
    void agentPoolsCreateOrUpdateSignalE(OAIAgentPool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentPoolsCreateOrUpdateSignalError(OAIAgentPool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentPoolsDeleteSignalError() instead")
    void agentPoolsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void agentPoolsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentPoolsGetSignalError() instead")
    void agentPoolsGetSignalE(OAIAgentPool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentPoolsGetSignalError(OAIAgentPool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentPoolsGetAvailableAgentPoolVersionsSignalError() instead")
    void agentPoolsGetAvailableAgentPoolVersionsSignalE(OAIAgentPoolAvailableVersions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentPoolsGetAvailableAgentPoolVersionsSignalError(OAIAgentPoolAvailableVersions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentPoolsGetUpgradeProfileSignalError() instead")
    void agentPoolsGetUpgradeProfileSignalE(OAIAgentPoolUpgradeProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentPoolsGetUpgradeProfileSignalError(OAIAgentPoolUpgradeProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentPoolsListSignalError() instead")
    void agentPoolsListSignalE(OAIAgentPoolListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentPoolsListSignalError(OAIAgentPoolListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use agentPoolsCreateOrUpdateSignalErrorFull() instead")
    void agentPoolsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentPoolsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentPoolsDeleteSignalErrorFull() instead")
    void agentPoolsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentPoolsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentPoolsGetSignalErrorFull() instead")
    void agentPoolsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentPoolsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentPoolsGetAvailableAgentPoolVersionsSignalErrorFull() instead")
    void agentPoolsGetAvailableAgentPoolVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentPoolsGetAvailableAgentPoolVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentPoolsGetUpgradeProfileSignalErrorFull() instead")
    void agentPoolsGetUpgradeProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentPoolsGetUpgradeProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentPoolsListSignalErrorFull() instead")
    void agentPoolsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentPoolsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
