/**
 * Azure Activity Log Alerts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityLogAlertList from '../model/ActivityLogAlertList';
import ActivityLogAlertResource from '../model/ActivityLogAlertResource';
import ActivityLogAlertResourcePatch from '../model/ActivityLogAlertResourcePatch';
import ErrorResponse from '../model/ErrorResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-03-01-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activityLogAlertsCreateOrUpdate operation.
     * @callback module:api/DefaultApi~activityLogAlertsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityLogAlertResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new activity log alert or update an existing one.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} activityLogAlertName The name of the activity log alert.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/ActivityLogAlertResource} activityLogAlert The activity log alert to create or use for the update.
     * @param {module:api/DefaultApi~activityLogAlertsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityLogAlertResource}
     */
    activityLogAlertsCreateOrUpdate(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, activityLogAlert, callback) {
      let postBody = activityLogAlert;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling activityLogAlertsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling activityLogAlertsCreateOrUpdate");
      }
      // verify the required parameter 'activityLogAlertName' is set
      if (activityLogAlertName === undefined || activityLogAlertName === null) {
        throw new Error("Missing the required parameter 'activityLogAlertName' when calling activityLogAlertsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling activityLogAlertsCreateOrUpdate");
      }
      // verify the required parameter 'activityLogAlert' is set
      if (activityLogAlert === undefined || activityLogAlert === null) {
        throw new Error("Missing the required parameter 'activityLogAlert' when calling activityLogAlertsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'activityLogAlertName': activityLogAlertName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivityLogAlertResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityLogAlertsDelete operation.
     * @callback module:api/DefaultApi~activityLogAlertsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an activity log alert.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} activityLogAlertName The name of the activity log alert.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~activityLogAlertsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activityLogAlertsDelete(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling activityLogAlertsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling activityLogAlertsDelete");
      }
      // verify the required parameter 'activityLogAlertName' is set
      if (activityLogAlertName === undefined || activityLogAlertName === null) {
        throw new Error("Missing the required parameter 'activityLogAlertName' when calling activityLogAlertsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling activityLogAlertsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'activityLogAlertName': activityLogAlertName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityLogAlertsGet operation.
     * @callback module:api/DefaultApi~activityLogAlertsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityLogAlertResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an activity log alert.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} activityLogAlertName The name of the activity log alert.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~activityLogAlertsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityLogAlertResource}
     */
    activityLogAlertsGet(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling activityLogAlertsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling activityLogAlertsGet");
      }
      // verify the required parameter 'activityLogAlertName' is set
      if (activityLogAlertName === undefined || activityLogAlertName === null) {
        throw new Error("Missing the required parameter 'activityLogAlertName' when calling activityLogAlertsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling activityLogAlertsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'activityLogAlertName': activityLogAlertName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityLogAlertResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityLogAlertsListByResourceGroup operation.
     * @callback module:api/DefaultApi~activityLogAlertsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityLogAlertList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all activity log alerts in a resource group.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~activityLogAlertsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityLogAlertList}
     */
    activityLogAlertsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling activityLogAlertsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling activityLogAlertsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling activityLogAlertsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityLogAlertList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityLogAlertsListBySubscriptionId operation.
     * @callback module:api/DefaultApi~activityLogAlertsListBySubscriptionIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityLogAlertList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all activity log alerts in a subscription.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~activityLogAlertsListBySubscriptionIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityLogAlertList}
     */
    activityLogAlertsListBySubscriptionId(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling activityLogAlertsListBySubscriptionId");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling activityLogAlertsListBySubscriptionId");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityLogAlertList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/microsoft.insights/activityLogAlerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityLogAlertsUpdate operation.
     * @callback module:api/DefaultApi~activityLogAlertsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityLogAlertResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing ActivityLogAlertResource's tags. To update other fields use the CreateOrUpdate method.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} activityLogAlertName The name of the activity log alert.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/ActivityLogAlertResourcePatch} activityLogAlertPatch Parameters supplied to the operation.
     * @param {module:api/DefaultApi~activityLogAlertsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityLogAlertResource}
     */
    activityLogAlertsUpdate(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, activityLogAlertPatch, callback) {
      let postBody = activityLogAlertPatch;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling activityLogAlertsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling activityLogAlertsUpdate");
      }
      // verify the required parameter 'activityLogAlertName' is set
      if (activityLogAlertName === undefined || activityLogAlertName === null) {
        throw new Error("Missing the required parameter 'activityLogAlertName' when calling activityLogAlertsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling activityLogAlertsUpdate");
      }
      // verify the required parameter 'activityLogAlertPatch' is set
      if (activityLogAlertPatch === undefined || activityLogAlertPatch === null) {
        throw new Error("Missing the required parameter 'activityLogAlertPatch' when calling activityLogAlertsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'activityLogAlertName': activityLogAlertName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivityLogAlertResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
