/**
 * Azure Activity Log Alerts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivityLogAlertActionList from './ActivityLogAlertActionList';
import ActivityLogAlertAllOfCondition from './ActivityLogAlertAllOfCondition';

/**
 * The ActivityLogAlert model module.
 * @module model/ActivityLogAlert
 * @version 2017-03-01-preview
 */
class ActivityLogAlert {
    /**
     * Constructs a new <code>ActivityLogAlert</code>.
     * An Azure activity log alert.
     * @alias module:model/ActivityLogAlert
     * @param actions {module:model/ActivityLogAlertActionList} 
     * @param condition {module:model/ActivityLogAlertAllOfCondition} 
     * @param scopes {Array.<String>} A list of resourceIds that will be used as prefixes. The alert will only apply to activityLogs with resourceIds that fall under one of these prefixes. This list must include at least one item.
     */
    constructor(actions, condition, scopes) { 
        
        ActivityLogAlert.initialize(this, actions, condition, scopes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actions, condition, scopes) { 
        obj['actions'] = actions;
        obj['condition'] = condition;
        obj['enabled'] = true;
        obj['scopes'] = scopes;
    }

    /**
     * Constructs a <code>ActivityLogAlert</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityLogAlert} obj Optional instance to populate.
     * @return {module:model/ActivityLogAlert} The populated <code>ActivityLogAlert</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityLogAlert();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ActivityLogAlertActionList.constructFromObject(data['actions']);
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ActivityLogAlertAllOfCondition.constructFromObject(data['condition']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivityLogAlert</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivityLogAlert</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ActivityLogAlert.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `actions`
        if (data['actions']) { // data not null
          ActivityLogAlertActionList.validateJSON(data['actions']);
        }
        // validate the optional field `condition`
        if (data['condition']) { // data not null
          ActivityLogAlertAllOfCondition.validateJSON(data['condition']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }

        return true;
    }


}

ActivityLogAlert.RequiredProperties = ["actions", "condition", "scopes"];

/**
 * @member {module:model/ActivityLogAlertActionList} actions
 */
ActivityLogAlert.prototype['actions'] = undefined;

/**
 * @member {module:model/ActivityLogAlertAllOfCondition} condition
 */
ActivityLogAlert.prototype['condition'] = undefined;

/**
 * A description of this activity log alert.
 * @member {String} description
 */
ActivityLogAlert.prototype['description'] = undefined;

/**
 * Indicates whether this activity log alert is enabled. If an activity log alert is not enabled, then none of its actions will be activated.
 * @member {Boolean} enabled
 * @default true
 */
ActivityLogAlert.prototype['enabled'] = true;

/**
 * A list of resourceIds that will be used as prefixes. The alert will only apply to activityLogs with resourceIds that fall under one of these prefixes. This list must include at least one item.
 * @member {Array.<String>} scopes
 */
ActivityLogAlert.prototype['scopes'] = undefined;






export default ActivityLogAlert;

