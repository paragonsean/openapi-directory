/**
 * Azure Activity Log Alerts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityLogAlert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityLogAlert::OAIActivityLogAlert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityLogAlert::OAIActivityLogAlert() {
    this->initializeModel();
}

OAIActivityLogAlert::~OAIActivityLogAlert() {}

void OAIActivityLogAlert::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAIActivityLogAlert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityLogAlert::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;
}

QString OAIActivityLogAlert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityLogAlert::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.isSet()) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    return obj;
}

OAIActivityLogAlertActionList OAIActivityLogAlert::getActions() const {
    return m_actions;
}
void OAIActivityLogAlert::setActions(const OAIActivityLogAlertActionList &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIActivityLogAlert::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIActivityLogAlert::is_actions_Valid() const{
    return m_actions_isValid;
}

OAIActivityLogAlertAllOfCondition OAIActivityLogAlert::getCondition() const {
    return m_condition;
}
void OAIActivityLogAlert::setCondition(const OAIActivityLogAlertAllOfCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIActivityLogAlert::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIActivityLogAlert::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIActivityLogAlert::getDescription() const {
    return m_description;
}
void OAIActivityLogAlert::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIActivityLogAlert::is_description_Set() const{
    return m_description_isSet;
}

bool OAIActivityLogAlert::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIActivityLogAlert::isEnabled() const {
    return m_enabled;
}
void OAIActivityLogAlert::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIActivityLogAlert::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIActivityLogAlert::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<QString> OAIActivityLogAlert::getScopes() const {
    return m_scopes;
}
void OAIActivityLogAlert::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIActivityLogAlert::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIActivityLogAlert::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIActivityLogAlert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityLogAlert::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actions_isValid && m_condition_isValid && m_scopes_isValid && true;
}

} // namespace OpenAPI
