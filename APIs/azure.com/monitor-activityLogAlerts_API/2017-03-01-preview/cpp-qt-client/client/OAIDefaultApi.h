/**
 * Azure Activity Log Alerts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivityLogAlertList.h"
#include "OAIActivityLogAlertResource.h"
#include "OAIActivityLogAlertResourcePatch.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  activity_log_alert_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  activity_log_alert OAIActivityLogAlertResource [required]
    */
    Q_DECL_DEPRECATED virtual void activityLogAlertsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &activity_log_alert_name, const QString &api_version, const OAIActivityLogAlertResource &activity_log_alert);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  activity_log_alert_name QString [required]
    * @param[in]  api_version QString [required]
    */
    Q_DECL_DEPRECATED virtual void activityLogAlertsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &activity_log_alert_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  activity_log_alert_name QString [required]
    * @param[in]  api_version QString [required]
    */
    Q_DECL_DEPRECATED virtual void activityLogAlertsGet(const QString &subscription_id, const QString &resource_group_name, const QString &activity_log_alert_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    Q_DECL_DEPRECATED virtual void activityLogAlertsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    Q_DECL_DEPRECATED virtual void activityLogAlertsListBySubscriptionId(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  activity_log_alert_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  activity_log_alert_patch OAIActivityLogAlertResourcePatch [required]
    */
    Q_DECL_DEPRECATED virtual void activityLogAlertsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &activity_log_alert_name, const QString &api_version, const OAIActivityLogAlertResourcePatch &activity_log_alert_patch);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activityLogAlertsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void activityLogAlertsDeleteCallback(OAIHttpRequestWorker *worker);
    void activityLogAlertsGetCallback(OAIHttpRequestWorker *worker);
    void activityLogAlertsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void activityLogAlertsListBySubscriptionIdCallback(OAIHttpRequestWorker *worker);
    void activityLogAlertsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activityLogAlertsCreateOrUpdateSignal(OAIActivityLogAlertResource summary);
    void activityLogAlertsDeleteSignal();
    void activityLogAlertsGetSignal(OAIActivityLogAlertResource summary);
    void activityLogAlertsListByResourceGroupSignal(OAIActivityLogAlertList summary);
    void activityLogAlertsListBySubscriptionIdSignal(OAIActivityLogAlertList summary);
    void activityLogAlertsUpdateSignal(OAIActivityLogAlertResource summary);


    void activityLogAlertsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIActivityLogAlertResource summary);
    void activityLogAlertsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void activityLogAlertsGetSignalFull(OAIHttpRequestWorker *worker, OAIActivityLogAlertResource summary);
    void activityLogAlertsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIActivityLogAlertList summary);
    void activityLogAlertsListBySubscriptionIdSignalFull(OAIHttpRequestWorker *worker, OAIActivityLogAlertList summary);
    void activityLogAlertsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIActivityLogAlertResource summary);

    Q_DECL_DEPRECATED_X("Use activityLogAlertsCreateOrUpdateSignalError() instead")
    void activityLogAlertsCreateOrUpdateSignalE(OAIActivityLogAlertResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityLogAlertsCreateOrUpdateSignalError(OAIActivityLogAlertResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityLogAlertsDeleteSignalError() instead")
    void activityLogAlertsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activityLogAlertsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityLogAlertsGetSignalError() instead")
    void activityLogAlertsGetSignalE(OAIActivityLogAlertResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityLogAlertsGetSignalError(OAIActivityLogAlertResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityLogAlertsListByResourceGroupSignalError() instead")
    void activityLogAlertsListByResourceGroupSignalE(OAIActivityLogAlertList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityLogAlertsListByResourceGroupSignalError(OAIActivityLogAlertList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityLogAlertsListBySubscriptionIdSignalError() instead")
    void activityLogAlertsListBySubscriptionIdSignalE(OAIActivityLogAlertList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityLogAlertsListBySubscriptionIdSignalError(OAIActivityLogAlertList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityLogAlertsUpdateSignalError() instead")
    void activityLogAlertsUpdateSignalE(OAIActivityLogAlertResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityLogAlertsUpdateSignalError(OAIActivityLogAlertResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activityLogAlertsCreateOrUpdateSignalErrorFull() instead")
    void activityLogAlertsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityLogAlertsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityLogAlertsDeleteSignalErrorFull() instead")
    void activityLogAlertsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityLogAlertsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityLogAlertsGetSignalErrorFull() instead")
    void activityLogAlertsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityLogAlertsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityLogAlertsListByResourceGroupSignalErrorFull() instead")
    void activityLogAlertsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityLogAlertsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityLogAlertsListBySubscriptionIdSignalErrorFull() instead")
    void activityLogAlertsListBySubscriptionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityLogAlertsListBySubscriptionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityLogAlertsUpdateSignalErrorFull() instead")
    void activityLogAlertsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityLogAlertsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
