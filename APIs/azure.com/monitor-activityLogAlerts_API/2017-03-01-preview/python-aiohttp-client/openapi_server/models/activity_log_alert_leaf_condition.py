# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivityLogAlertLeafCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, equals: str=None, _field: str=None):
        """ActivityLogAlertLeafCondition - a model defined in OpenAPI

        :param equals: The equals of this ActivityLogAlertLeafCondition.
        :param _field: The _field of this ActivityLogAlertLeafCondition.
        """
        self.openapi_types = {
            'equals': str,
            '_field': str
        }

        self.attribute_map = {
            'equals': 'equals',
            '_field': 'field'
        }

        self._equals = equals
        self.__field = _field

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityLogAlertLeafCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityLogAlertLeafCondition of this ActivityLogAlertLeafCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def equals(self):
        """Gets the equals of this ActivityLogAlertLeafCondition.

        The field value will be compared to this value (case-insensitive) to determine if the condition is met.

        :return: The equals of this ActivityLogAlertLeafCondition.
        :rtype: str
        """
        return self._equals

    @equals.setter
    def equals(self, equals):
        """Sets the equals of this ActivityLogAlertLeafCondition.

        The field value will be compared to this value (case-insensitive) to determine if the condition is met.

        :param equals: The equals of this ActivityLogAlertLeafCondition.
        :type equals: str
        """
        if equals is None:
            raise ValueError("Invalid value for `equals`, must not be `None`")

        self._equals = equals

    @property
    def _field(self):
        """Gets the _field of this ActivityLogAlertLeafCondition.

        The name of the field that this condition will examine. The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties.'.

        :return: The _field of this ActivityLogAlertLeafCondition.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this ActivityLogAlertLeafCondition.

        The name of the field that this condition will examine. The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties.'.

        :param _field: The _field of this ActivityLogAlertLeafCondition.
        :type _field: str
        """
        if _field is None:
            raise ValueError("Invalid value for `_field`, must not be `None`")

        self.__field = _field
