# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_log_alert_action_list import ActivityLogAlertActionList
from openapi_server.models.activity_log_alert_all_of_condition import ActivityLogAlertAllOfCondition
from openapi_server import util


class ActivityLogAlert(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: ActivityLogAlertActionList=None, condition: ActivityLogAlertAllOfCondition=None, description: str=None, enabled: bool=True, scopes: List[str]=None):
        """ActivityLogAlert - a model defined in OpenAPI

        :param actions: The actions of this ActivityLogAlert.
        :param condition: The condition of this ActivityLogAlert.
        :param description: The description of this ActivityLogAlert.
        :param enabled: The enabled of this ActivityLogAlert.
        :param scopes: The scopes of this ActivityLogAlert.
        """
        self.openapi_types = {
            'actions': ActivityLogAlertActionList,
            'condition': ActivityLogAlertAllOfCondition,
            'description': str,
            'enabled': bool,
            'scopes': List[str]
        }

        self.attribute_map = {
            'actions': 'actions',
            'condition': 'condition',
            'description': 'description',
            'enabled': 'enabled',
            'scopes': 'scopes'
        }

        self._actions = actions
        self._condition = condition
        self._description = description
        self._enabled = enabled
        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityLogAlert':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityLogAlert of this ActivityLogAlert.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this ActivityLogAlert.


        :return: The actions of this ActivityLogAlert.
        :rtype: ActivityLogAlertActionList
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ActivityLogAlert.


        :param actions: The actions of this ActivityLogAlert.
        :type actions: ActivityLogAlertActionList
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def condition(self):
        """Gets the condition of this ActivityLogAlert.


        :return: The condition of this ActivityLogAlert.
        :rtype: ActivityLogAlertAllOfCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ActivityLogAlert.


        :param condition: The condition of this ActivityLogAlert.
        :type condition: ActivityLogAlertAllOfCondition
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")

        self._condition = condition

    @property
    def description(self):
        """Gets the description of this ActivityLogAlert.

        A description of this activity log alert.

        :return: The description of this ActivityLogAlert.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityLogAlert.

        A description of this activity log alert.

        :param description: The description of this ActivityLogAlert.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this ActivityLogAlert.

        Indicates whether this activity log alert is enabled. If an activity log alert is not enabled, then none of its actions will be activated.

        :return: The enabled of this ActivityLogAlert.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ActivityLogAlert.

        Indicates whether this activity log alert is enabled. If an activity log alert is not enabled, then none of its actions will be activated.

        :param enabled: The enabled of this ActivityLogAlert.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def scopes(self):
        """Gets the scopes of this ActivityLogAlert.

        A list of resourceIds that will be used as prefixes. The alert will only apply to activityLogs with resourceIds that fall under one of these prefixes. This list must include at least one item.

        :return: The scopes of this ActivityLogAlert.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ActivityLogAlert.

        A list of resourceIds that will be used as prefixes. The alert will only apply to activityLogs with resourceIds that fall under one of these prefixes. This list must include at least one item.

        :param scopes: The scopes of this ActivityLogAlert.
        :type scopes: List[str]
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")

        self._scopes = scopes
