/*
 * Azure Activity Log Alerts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivityLogAlertList;
import org.openapitools.client.model.ActivityLogAlertPatchBody;
import org.openapitools.client.model.ActivityLogAlertResource;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activityLogAlertsCreateOrUpdate
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @param activityLogAlert The activity log alert to create or use for the update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing activity log alert was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new activity log alert was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the activity log alert could not be created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityLogAlertsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, ActivityLogAlertResource activityLogAlert, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activityLogAlert;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "activityLogAlertName" + "}", localVarApiClient.escapeString(activityLogAlertName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityLogAlertsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, ActivityLogAlertResource activityLogAlert, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling activityLogAlertsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling activityLogAlertsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'activityLogAlertName' is set
        if (activityLogAlertName == null) {
            throw new ApiException("Missing the required parameter 'activityLogAlertName' when calling activityLogAlertsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling activityLogAlertsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'activityLogAlert' is set
        if (activityLogAlert == null) {
            throw new ApiException("Missing the required parameter 'activityLogAlert' when calling activityLogAlertsCreateOrUpdate(Async)");
        }

        return activityLogAlertsCreateOrUpdateCall(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, activityLogAlert, _callback);

    }

    /**
     * 
     * Create a new activity log alert or update an existing one.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @param activityLogAlert The activity log alert to create or use for the update. (required)
     * @return ActivityLogAlertResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing activity log alert was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new activity log alert was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the activity log alert could not be created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public ActivityLogAlertResource activityLogAlertsCreateOrUpdate(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, ActivityLogAlertResource activityLogAlert) throws ApiException {
        ApiResponse<ActivityLogAlertResource> localVarResp = activityLogAlertsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, activityLogAlert);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new activity log alert or update an existing one.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @param activityLogAlert The activity log alert to create or use for the update. (required)
     * @return ApiResponse&lt;ActivityLogAlertResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing activity log alert was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new activity log alert was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the activity log alert could not be created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivityLogAlertResource> activityLogAlertsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, ActivityLogAlertResource activityLogAlert) throws ApiException {
        okhttp3.Call localVarCall = activityLogAlertsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, activityLogAlert, null);
        Type localVarReturnType = new TypeToken<ActivityLogAlertResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new activity log alert or update an existing one.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @param activityLogAlert The activity log alert to create or use for the update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing activity log alert was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new activity log alert was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the activity log alert could not be created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityLogAlertsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, ActivityLogAlertResource activityLogAlert, final ApiCallback<ActivityLogAlertResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityLogAlertsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, activityLogAlert, _callback);
        Type localVarReturnType = new TypeToken<ActivityLogAlertResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityLogAlertsDelete
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The activity log alert was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The activity log alert does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the activity log alert could not be deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityLogAlertsDeleteCall(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "activityLogAlertName" + "}", localVarApiClient.escapeString(activityLogAlertName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityLogAlertsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling activityLogAlertsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling activityLogAlertsDelete(Async)");
        }

        // verify the required parameter 'activityLogAlertName' is set
        if (activityLogAlertName == null) {
            throw new ApiException("Missing the required parameter 'activityLogAlertName' when calling activityLogAlertsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling activityLogAlertsDelete(Async)");
        }

        return activityLogAlertsDeleteCall(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, _callback);

    }

    /**
     * 
     * Delete an activity log alert.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The activity log alert was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The activity log alert does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the activity log alert could not be deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void activityLogAlertsDelete(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion) throws ApiException {
        activityLogAlertsDeleteWithHttpInfo(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion);
    }

    /**
     * 
     * Delete an activity log alert.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The activity log alert was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The activity log alert does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the activity log alert could not be deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> activityLogAlertsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = activityLogAlertsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an activity log alert.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The activity log alert was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The activity log alert does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the activity log alert could not be deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityLogAlertsDeleteAsync(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityLogAlertsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityLogAlertsGet
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the activity log alert could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityLogAlertsGetCall(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "activityLogAlertName" + "}", localVarApiClient.escapeString(activityLogAlertName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityLogAlertsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling activityLogAlertsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling activityLogAlertsGet(Async)");
        }

        // verify the required parameter 'activityLogAlertName' is set
        if (activityLogAlertName == null) {
            throw new ApiException("Missing the required parameter 'activityLogAlertName' when calling activityLogAlertsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling activityLogAlertsGet(Async)");
        }

        return activityLogAlertsGetCall(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, _callback);

    }

    /**
     * 
     * Get an activity log alert.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ActivityLogAlertResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the activity log alert could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ActivityLogAlertResource activityLogAlertsGet(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion) throws ApiException {
        ApiResponse<ActivityLogAlertResource> localVarResp = activityLogAlertsGetWithHttpInfo(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an activity log alert.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;ActivityLogAlertResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the activity log alert could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivityLogAlertResource> activityLogAlertsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = activityLogAlertsGetValidateBeforeCall(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ActivityLogAlertResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an activity log alert.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the activity log alert could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityLogAlertsGetAsync(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, final ApiCallback<ActivityLogAlertResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityLogAlertsGetValidateBeforeCall(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ActivityLogAlertResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityLogAlertsListByResourceGroup
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of activity log alerts could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityLogAlertsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityLogAlertsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling activityLogAlertsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling activityLogAlertsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling activityLogAlertsListByResourceGroup(Async)");
        }

        return activityLogAlertsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Get a list of all activity log alerts in a resource group.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ActivityLogAlertList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of activity log alerts could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ActivityLogAlertList activityLogAlertsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<ActivityLogAlertList> localVarResp = activityLogAlertsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all activity log alerts in a resource group.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;ActivityLogAlertList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of activity log alerts could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivityLogAlertList> activityLogAlertsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = activityLogAlertsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ActivityLogAlertList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all activity log alerts in a resource group.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of activity log alerts could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityLogAlertsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<ActivityLogAlertList> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityLogAlertsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ActivityLogAlertList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityLogAlertsListBySubscriptionId
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of activity log alerts could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityLogAlertsListBySubscriptionIdCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/microsoft.insights/activityLogAlerts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityLogAlertsListBySubscriptionIdValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling activityLogAlertsListBySubscriptionId(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling activityLogAlertsListBySubscriptionId(Async)");
        }

        return activityLogAlertsListBySubscriptionIdCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Get a list of all activity log alerts in a subscription.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ActivityLogAlertList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of activity log alerts could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ActivityLogAlertList activityLogAlertsListBySubscriptionId(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ActivityLogAlertList> localVarResp = activityLogAlertsListBySubscriptionIdWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all activity log alerts in a subscription.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;ActivityLogAlertList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of activity log alerts could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivityLogAlertList> activityLogAlertsListBySubscriptionIdWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = activityLogAlertsListBySubscriptionIdValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ActivityLogAlertList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all activity log alerts in a subscription.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of activity log alerts could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityLogAlertsListBySubscriptionIdAsync(String subscriptionId, String apiVersion, final ApiCallback<ActivityLogAlertList> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityLogAlertsListBySubscriptionIdValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ActivityLogAlertList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityLogAlertsUpdate
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @param activityLogAlertPatch Parameters supplied to the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing activity log alert was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityLogAlertsUpdateCall(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, ActivityLogAlertPatchBody activityLogAlertPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activityLogAlertPatch;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "activityLogAlertName" + "}", localVarApiClient.escapeString(activityLogAlertName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityLogAlertsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, ActivityLogAlertPatchBody activityLogAlertPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling activityLogAlertsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling activityLogAlertsUpdate(Async)");
        }

        // verify the required parameter 'activityLogAlertName' is set
        if (activityLogAlertName == null) {
            throw new ApiException("Missing the required parameter 'activityLogAlertName' when calling activityLogAlertsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling activityLogAlertsUpdate(Async)");
        }

        // verify the required parameter 'activityLogAlertPatch' is set
        if (activityLogAlertPatch == null) {
            throw new ApiException("Missing the required parameter 'activityLogAlertPatch' when calling activityLogAlertsUpdate(Async)");
        }

        return activityLogAlertsUpdateCall(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, activityLogAlertPatch, _callback);

    }

    /**
     * 
     * Updates an existing ActivityLogAlertResource&#39;s tags. To update other fields use the CreateOrUpdate method.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @param activityLogAlertPatch Parameters supplied to the operation. (required)
     * @return ActivityLogAlertResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing activity log alert was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActivityLogAlertResource activityLogAlertsUpdate(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, ActivityLogAlertPatchBody activityLogAlertPatch) throws ApiException {
        ApiResponse<ActivityLogAlertResource> localVarResp = activityLogAlertsUpdateWithHttpInfo(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, activityLogAlertPatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing ActivityLogAlertResource&#39;s tags. To update other fields use the CreateOrUpdate method.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @param activityLogAlertPatch Parameters supplied to the operation. (required)
     * @return ApiResponse&lt;ActivityLogAlertResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing activity log alert was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivityLogAlertResource> activityLogAlertsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, ActivityLogAlertPatchBody activityLogAlertPatch) throws ApiException {
        okhttp3.Call localVarCall = activityLogAlertsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, activityLogAlertPatch, null);
        Type localVarReturnType = new TypeToken<ActivityLogAlertResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing ActivityLogAlertResource&#39;s tags. To update other fields use the CreateOrUpdate method.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param activityLogAlertName The name of the activity log alert. (required)
     * @param apiVersion Client Api Version. (required)
     * @param activityLogAlertPatch Parameters supplied to the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing activity log alert was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityLogAlertsUpdateAsync(String subscriptionId, String resourceGroupName, String activityLogAlertName, String apiVersion, ActivityLogAlertPatchBody activityLogAlertPatch, final ApiCallback<ActivityLogAlertResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityLogAlertsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, activityLogAlertName, apiVersion, activityLogAlertPatch, _callback);
        Type localVarReturnType = new TypeToken<ActivityLogAlertResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
