# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_log_alert_leaf_condition import ActivityLogAlertLeafCondition
from openapi_server import util


class ActivityLogAlertAllOfCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_of: List[ActivityLogAlertLeafCondition]=None):
        """ActivityLogAlertAllOfCondition - a model defined in OpenAPI

        :param all_of: The all_of of this ActivityLogAlertAllOfCondition.
        """
        self.openapi_types = {
            'all_of': List[ActivityLogAlertLeafCondition]
        }

        self.attribute_map = {
            'all_of': 'allOf'
        }

        self._all_of = all_of

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityLogAlertAllOfCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityLogAlertAllOfCondition of this ActivityLogAlertAllOfCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_of(self):
        """Gets the all_of of this ActivityLogAlertAllOfCondition.

        The list of activity log alert conditions.

        :return: The all_of of this ActivityLogAlertAllOfCondition.
        :rtype: List[ActivityLogAlertLeafCondition]
        """
        return self._all_of

    @all_of.setter
    def all_of(self, all_of):
        """Sets the all_of of this ActivityLogAlertAllOfCondition.

        The list of activity log alert conditions.

        :param all_of: The all_of of this ActivityLogAlertAllOfCondition.
        :type all_of: List[ActivityLogAlertLeafCondition]
        """
        if all_of is None:
            raise ValueError("Invalid value for `all_of`, must not be `None`")

        self._all_of = all_of
