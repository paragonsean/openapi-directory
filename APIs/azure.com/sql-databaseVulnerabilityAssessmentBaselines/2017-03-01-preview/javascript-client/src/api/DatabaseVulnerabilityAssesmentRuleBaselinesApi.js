/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DatabaseVulnerabilityAssessmentRuleBaseline from '../model/DatabaseVulnerabilityAssessmentRuleBaseline';

/**
* DatabaseVulnerabilityAssesmentRuleBaselines service.
* @module api/DatabaseVulnerabilityAssesmentRuleBaselinesApi
* @version 2017-03-01-preview
*/
export default class DatabaseVulnerabilityAssesmentRuleBaselinesApi {

    /**
    * Constructs a new DatabaseVulnerabilityAssesmentRuleBaselinesApi. 
    * @alias module:api/DatabaseVulnerabilityAssesmentRuleBaselinesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate operation.
     * @callback module:api/DatabaseVulnerabilityAssesmentRuleBaselinesApi~databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseVulnerabilityAssessmentRuleBaseline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param {module:model/String} vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param {String} ruleId The vulnerability assessment rule ID.
     * @param {module:model/String} baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/DatabaseVulnerabilityAssessmentRuleBaseline} parameters The requested rule baseline resource.
     * @param {module:api/DatabaseVulnerabilityAssesmentRuleBaselinesApi~databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseVulnerabilityAssessmentRuleBaseline}
     */
    databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate");
      }
      // verify the required parameter 'vulnerabilityAssessmentName' is set
      if (vulnerabilityAssessmentName === undefined || vulnerabilityAssessmentName === null) {
        throw new Error("Missing the required parameter 'vulnerabilityAssessmentName' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate");
      }
      // verify the required parameter 'baselineName' is set
      if (baselineName === undefined || baselineName === null) {
        throw new Error("Missing the required parameter 'baselineName' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'vulnerabilityAssessmentName': vulnerabilityAssessmentName,
        'ruleId': ruleId,
        'baselineName': baselineName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatabaseVulnerabilityAssessmentRuleBaseline;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseVulnerabilityAssessmentRuleBaselinesDelete operation.
     * @callback module:api/DatabaseVulnerabilityAssesmentRuleBaselinesApi~databaseVulnerabilityAssessmentRuleBaselinesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the database's vulnerability assessment rule baseline.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param {module:model/String} vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param {String} ruleId The vulnerability assessment rule ID.
     * @param {module:model/String} baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/DatabaseVulnerabilityAssesmentRuleBaselinesApi~databaseVulnerabilityAssessmentRuleBaselinesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseVulnerabilityAssessmentRuleBaselinesDelete(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete");
      }
      // verify the required parameter 'vulnerabilityAssessmentName' is set
      if (vulnerabilityAssessmentName === undefined || vulnerabilityAssessmentName === null) {
        throw new Error("Missing the required parameter 'vulnerabilityAssessmentName' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete");
      }
      // verify the required parameter 'baselineName' is set
      if (baselineName === undefined || baselineName === null) {
        throw new Error("Missing the required parameter 'baselineName' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'vulnerabilityAssessmentName': vulnerabilityAssessmentName,
        'ruleId': ruleId,
        'baselineName': baselineName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseVulnerabilityAssessmentRuleBaselinesGet operation.
     * @callback module:api/DatabaseVulnerabilityAssesmentRuleBaselinesApi~databaseVulnerabilityAssessmentRuleBaselinesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseVulnerabilityAssessmentRuleBaseline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a database's vulnerability assessment rule baseline.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param {module:model/String} vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param {String} ruleId The vulnerability assessment rule ID.
     * @param {module:model/String} baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/DatabaseVulnerabilityAssesmentRuleBaselinesApi~databaseVulnerabilityAssessmentRuleBaselinesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseVulnerabilityAssessmentRuleBaseline}
     */
    databaseVulnerabilityAssessmentRuleBaselinesGet(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseVulnerabilityAssessmentRuleBaselinesGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databaseVulnerabilityAssessmentRuleBaselinesGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseVulnerabilityAssessmentRuleBaselinesGet");
      }
      // verify the required parameter 'vulnerabilityAssessmentName' is set
      if (vulnerabilityAssessmentName === undefined || vulnerabilityAssessmentName === null) {
        throw new Error("Missing the required parameter 'vulnerabilityAssessmentName' when calling databaseVulnerabilityAssessmentRuleBaselinesGet");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling databaseVulnerabilityAssessmentRuleBaselinesGet");
      }
      // verify the required parameter 'baselineName' is set
      if (baselineName === undefined || baselineName === null) {
        throw new Error("Missing the required parameter 'baselineName' when calling databaseVulnerabilityAssessmentRuleBaselinesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseVulnerabilityAssessmentRuleBaselinesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseVulnerabilityAssessmentRuleBaselinesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'vulnerabilityAssessmentName': vulnerabilityAssessmentName,
        'ruleId': ruleId,
        'baselineName': baselineName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseVulnerabilityAssessmentRuleBaseline;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
