/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DatabaseVulnerabilityAssessmentRuleBaseline;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatabaseVulnerabilityAssesmentRuleBaselinesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatabaseVulnerabilityAssesmentRuleBaselinesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatabaseVulnerabilityAssesmentRuleBaselinesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param ruleId The vulnerability assessment rule ID. (required)
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested rule baseline resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the vulnerability assessment rule baseline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account &#39;{0}&#39; .   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account &#39;{0}&#39; that was defined in the policy is invalid.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule &#39;{0}&#39; does not exist.   * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule &#39;{0}&#39;   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateCall(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion, DatabaseVulnerabilityAssessmentRuleBaseline parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "vulnerabilityAssessmentName" + "}", localVarApiClient.escapeString(vulnerabilityAssessmentName.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "baselineName" + "}", localVarApiClient.escapeString(baselineName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion, DatabaseVulnerabilityAssessmentRuleBaseline parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'vulnerabilityAssessmentName' is set
        if (vulnerabilityAssessmentName == null) {
            throw new ApiException("Missing the required parameter 'vulnerabilityAssessmentName' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'baselineName' is set
        if (baselineName == null) {
            throw new ApiException("Missing the required parameter 'baselineName' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(Async)");
        }

        return databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateCall(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a database&#39;s vulnerability assessment rule baseline.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param ruleId The vulnerability assessment rule ID. (required)
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested rule baseline resource. (required)
     * @return DatabaseVulnerabilityAssessmentRuleBaseline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the vulnerability assessment rule baseline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account &#39;{0}&#39; .   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account &#39;{0}&#39; that was defined in the policy is invalid.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule &#39;{0}&#39; does not exist.   * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule &#39;{0}&#39;   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseVulnerabilityAssessmentRuleBaseline databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion, DatabaseVulnerabilityAssessmentRuleBaseline parameters) throws ApiException {
        ApiResponse<DatabaseVulnerabilityAssessmentRuleBaseline> localVarResp = databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateWithHttpInfo(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a database&#39;s vulnerability assessment rule baseline.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param ruleId The vulnerability assessment rule ID. (required)
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested rule baseline resource. (required)
     * @return ApiResponse&lt;DatabaseVulnerabilityAssessmentRuleBaseline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the vulnerability assessment rule baseline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account &#39;{0}&#39; .   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account &#39;{0}&#39; that was defined in the policy is invalid.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule &#39;{0}&#39; does not exist.   * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule &#39;{0}&#39;   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseVulnerabilityAssessmentRuleBaseline> databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateWithHttpInfo(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion, DatabaseVulnerabilityAssessmentRuleBaseline parameters) throws ApiException {
        okhttp3.Call localVarCall = databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateValidateBeforeCall(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<DatabaseVulnerabilityAssessmentRuleBaseline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a database&#39;s vulnerability assessment rule baseline.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param ruleId The vulnerability assessment rule ID. (required)
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested rule baseline resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the vulnerability assessment rule baseline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account &#39;{0}&#39; .   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account &#39;{0}&#39; that was defined in the policy is invalid.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule &#39;{0}&#39; does not exist.   * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule &#39;{0}&#39;   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateAsync(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion, DatabaseVulnerabilityAssessmentRuleBaseline parameters, final ApiCallback<DatabaseVulnerabilityAssessmentRuleBaseline> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateValidateBeforeCall(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<DatabaseVulnerabilityAssessmentRuleBaseline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseVulnerabilityAssessmentRuleBaselinesDelete
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param ruleId The vulnerability assessment rule ID. (required)
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the database vulnerability assessment rule baseline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account &#39;{0}&#39; .   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account &#39;{0}&#39; that was defined in the policy is invalid.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule &#39;{0}&#39; does not exist.   * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule &#39;{0}&#39;   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseVulnerabilityAssessmentRuleBaselinesDeleteCall(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "vulnerabilityAssessmentName" + "}", localVarApiClient.escapeString(vulnerabilityAssessmentName.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "baselineName" + "}", localVarApiClient.escapeString(baselineName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseVulnerabilityAssessmentRuleBaselinesDeleteValidateBeforeCall(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete(Async)");
        }

        // verify the required parameter 'vulnerabilityAssessmentName' is set
        if (vulnerabilityAssessmentName == null) {
            throw new ApiException("Missing the required parameter 'vulnerabilityAssessmentName' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete(Async)");
        }

        // verify the required parameter 'baselineName' is set
        if (baselineName == null) {
            throw new ApiException("Missing the required parameter 'baselineName' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseVulnerabilityAssessmentRuleBaselinesDelete(Async)");
        }

        return databaseVulnerabilityAssessmentRuleBaselinesDeleteCall(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Removes the database&#39;s vulnerability assessment rule baseline.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param ruleId The vulnerability assessment rule ID. (required)
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the database vulnerability assessment rule baseline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account &#39;{0}&#39; .   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account &#39;{0}&#39; that was defined in the policy is invalid.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule &#39;{0}&#39; does not exist.   * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule &#39;{0}&#39;   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseVulnerabilityAssessmentRuleBaselinesDelete(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion) throws ApiException {
        databaseVulnerabilityAssessmentRuleBaselinesDeleteWithHttpInfo(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Removes the database&#39;s vulnerability assessment rule baseline.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param ruleId The vulnerability assessment rule ID. (required)
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the database vulnerability assessment rule baseline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account &#39;{0}&#39; .   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account &#39;{0}&#39; that was defined in the policy is invalid.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule &#39;{0}&#39; does not exist.   * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule &#39;{0}&#39;   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseVulnerabilityAssessmentRuleBaselinesDeleteWithHttpInfo(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseVulnerabilityAssessmentRuleBaselinesDeleteValidateBeforeCall(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes the database&#39;s vulnerability assessment rule baseline.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param ruleId The vulnerability assessment rule ID. (required)
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the database vulnerability assessment rule baseline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account &#39;{0}&#39; .   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account &#39;{0}&#39; that was defined in the policy is invalid.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule &#39;{0}&#39; does not exist.   * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule &#39;{0}&#39;   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseVulnerabilityAssessmentRuleBaselinesDeleteAsync(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseVulnerabilityAssessmentRuleBaselinesDeleteValidateBeforeCall(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseVulnerabilityAssessmentRuleBaselinesGet
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param ruleId The vulnerability assessment rule ID. (required)
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got the vulnerability assessment rule baseline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account &#39;{0}&#39; .   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account &#39;{0}&#39; that was defined in the policy is invalid.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule &#39;{0}&#39; does not exist.   * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule &#39;{0}&#39;   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseVulnerabilityAssessmentRuleBaselinesGetCall(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "vulnerabilityAssessmentName" + "}", localVarApiClient.escapeString(vulnerabilityAssessmentName.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "baselineName" + "}", localVarApiClient.escapeString(baselineName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseVulnerabilityAssessmentRuleBaselinesGetValidateBeforeCall(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseVulnerabilityAssessmentRuleBaselinesGet(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling databaseVulnerabilityAssessmentRuleBaselinesGet(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseVulnerabilityAssessmentRuleBaselinesGet(Async)");
        }

        // verify the required parameter 'vulnerabilityAssessmentName' is set
        if (vulnerabilityAssessmentName == null) {
            throw new ApiException("Missing the required parameter 'vulnerabilityAssessmentName' when calling databaseVulnerabilityAssessmentRuleBaselinesGet(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling databaseVulnerabilityAssessmentRuleBaselinesGet(Async)");
        }

        // verify the required parameter 'baselineName' is set
        if (baselineName == null) {
            throw new ApiException("Missing the required parameter 'baselineName' when calling databaseVulnerabilityAssessmentRuleBaselinesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseVulnerabilityAssessmentRuleBaselinesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseVulnerabilityAssessmentRuleBaselinesGet(Async)");
        }

        return databaseVulnerabilityAssessmentRuleBaselinesGetCall(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a database&#39;s vulnerability assessment rule baseline.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param ruleId The vulnerability assessment rule ID. (required)
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return DatabaseVulnerabilityAssessmentRuleBaseline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got the vulnerability assessment rule baseline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account &#39;{0}&#39; .   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account &#39;{0}&#39; that was defined in the policy is invalid.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule &#39;{0}&#39; does not exist.   * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule &#39;{0}&#39;   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseVulnerabilityAssessmentRuleBaseline databaseVulnerabilityAssessmentRuleBaselinesGet(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DatabaseVulnerabilityAssessmentRuleBaseline> localVarResp = databaseVulnerabilityAssessmentRuleBaselinesGetWithHttpInfo(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a database&#39;s vulnerability assessment rule baseline.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param ruleId The vulnerability assessment rule ID. (required)
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;DatabaseVulnerabilityAssessmentRuleBaseline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got the vulnerability assessment rule baseline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account &#39;{0}&#39; .   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account &#39;{0}&#39; that was defined in the policy is invalid.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule &#39;{0}&#39; does not exist.   * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule &#39;{0}&#39;   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseVulnerabilityAssessmentRuleBaseline> databaseVulnerabilityAssessmentRuleBaselinesGetWithHttpInfo(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseVulnerabilityAssessmentRuleBaselinesGetValidateBeforeCall(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseVulnerabilityAssessmentRuleBaseline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a database&#39;s vulnerability assessment rule baseline.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param ruleId The vulnerability assessment rule ID. (required)
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got the vulnerability assessment rule baseline. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account &#39;{0}&#39; .   * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don&#39;t exist or invalid storage specified in settings.    * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account &#39;{0}&#39; that was defined in the policy is invalid.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule &#39;{0}&#39; does not exist.   * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule &#39;{0}&#39;   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseVulnerabilityAssessmentRuleBaselinesGetAsync(String resourceGroupName, String serverName, String databaseName, String vulnerabilityAssessmentName, String ruleId, String baselineName, String subscriptionId, String apiVersion, final ApiCallback<DatabaseVulnerabilityAssessmentRuleBaseline> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseVulnerabilityAssessmentRuleBaselinesGetValidateBeforeCall(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseVulnerabilityAssessmentRuleBaseline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
