/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDatabaseVulnerabilityAssesmentRuleBaselinesApi_H
#define OAI_OAIDatabaseVulnerabilityAssesmentRuleBaselinesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDatabaseVulnerabilityAssessmentRuleBaseline.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDatabaseVulnerabilityAssesmentRuleBaselinesApi : public QObject {
    Q_OBJECT

public:
    OAIDatabaseVulnerabilityAssesmentRuleBaselinesApi(const int timeOut = 0);
    ~OAIDatabaseVulnerabilityAssesmentRuleBaselinesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  vulnerability_assessment_name QString [required]
    * @param[in]  rule_id QString [required]
    * @param[in]  baseline_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDatabaseVulnerabilityAssessmentRuleBaseline [required]
    */
    virtual void databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &vulnerability_assessment_name, const QString &rule_id, const QString &baseline_name, const QString &subscription_id, const QString &api_version, const OAIDatabaseVulnerabilityAssessmentRuleBaseline &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  vulnerability_assessment_name QString [required]
    * @param[in]  rule_id QString [required]
    * @param[in]  baseline_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseVulnerabilityAssessmentRuleBaselinesDelete(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &vulnerability_assessment_name, const QString &rule_id, const QString &baseline_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  vulnerability_assessment_name QString [required]
    * @param[in]  rule_id QString [required]
    * @param[in]  baseline_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseVulnerabilityAssessmentRuleBaselinesGet(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &vulnerability_assessment_name, const QString &rule_id, const QString &baseline_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void databaseVulnerabilityAssessmentRuleBaselinesDeleteCallback(OAIHttpRequestWorker *worker);
    void databaseVulnerabilityAssessmentRuleBaselinesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignal(OAIDatabaseVulnerabilityAssessmentRuleBaseline summary);
    void databaseVulnerabilityAssessmentRuleBaselinesDeleteSignal();
    void databaseVulnerabilityAssessmentRuleBaselinesGetSignal(OAIDatabaseVulnerabilityAssessmentRuleBaseline summary);


    void databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseVulnerabilityAssessmentRuleBaseline summary);
    void databaseVulnerabilityAssessmentRuleBaselinesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void databaseVulnerabilityAssessmentRuleBaselinesGetSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseVulnerabilityAssessmentRuleBaseline summary);

    Q_DECL_DEPRECATED_X("Use databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignalError() instead")
    void databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignalE(OAIDatabaseVulnerabilityAssessmentRuleBaseline summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignalError(OAIDatabaseVulnerabilityAssessmentRuleBaseline summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseVulnerabilityAssessmentRuleBaselinesDeleteSignalError() instead")
    void databaseVulnerabilityAssessmentRuleBaselinesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseVulnerabilityAssessmentRuleBaselinesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseVulnerabilityAssessmentRuleBaselinesGetSignalError() instead")
    void databaseVulnerabilityAssessmentRuleBaselinesGetSignalE(OAIDatabaseVulnerabilityAssessmentRuleBaseline summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseVulnerabilityAssessmentRuleBaselinesGetSignalError(OAIDatabaseVulnerabilityAssessmentRuleBaseline summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignalErrorFull() instead")
    void databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseVulnerabilityAssessmentRuleBaselinesDeleteSignalErrorFull() instead")
    void databaseVulnerabilityAssessmentRuleBaselinesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseVulnerabilityAssessmentRuleBaselinesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseVulnerabilityAssessmentRuleBaselinesGetSignalErrorFull() instead")
    void databaseVulnerabilityAssessmentRuleBaselinesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseVulnerabilityAssessmentRuleBaselinesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
