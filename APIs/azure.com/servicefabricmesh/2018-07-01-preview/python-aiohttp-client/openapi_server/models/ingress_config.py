# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.layer4_ingress_config import Layer4IngressConfig
from openapi_server import util


class IngressConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, layer4: List[Layer4IngressConfig]=None, public_ip_address: str=None, qos_level: str=None):
        """IngressConfig - a model defined in OpenAPI

        :param layer4: The layer4 of this IngressConfig.
        :param public_ip_address: The public_ip_address of this IngressConfig.
        :param qos_level: The qos_level of this IngressConfig.
        """
        self.openapi_types = {
            'layer4': List[Layer4IngressConfig],
            'public_ip_address': str,
            'qos_level': str
        }

        self.attribute_map = {
            'layer4': 'layer4',
            'public_ip_address': 'publicIPAddress',
            'qos_level': 'qosLevel'
        }

        self._layer4 = layer4
        self._public_ip_address = public_ip_address
        self._qos_level = qos_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IngressConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IngressConfig of this IngressConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def layer4(self):
        """Gets the layer4 of this IngressConfig.

        Configuration for layer4 public connectivity for this network.

        :return: The layer4 of this IngressConfig.
        :rtype: List[Layer4IngressConfig]
        """
        return self._layer4

    @layer4.setter
    def layer4(self, layer4):
        """Sets the layer4 of this IngressConfig.

        Configuration for layer4 public connectivity for this network.

        :param layer4: The layer4 of this IngressConfig.
        :type layer4: List[Layer4IngressConfig]
        """

        self._layer4 = layer4

    @property
    def public_ip_address(self):
        """Gets the public_ip_address of this IngressConfig.

        The public IP address for reaching this network.

        :return: The public_ip_address of this IngressConfig.
        :rtype: str
        """
        return self._public_ip_address

    @public_ip_address.setter
    def public_ip_address(self, public_ip_address):
        """Sets the public_ip_address of this IngressConfig.

        The public IP address for reaching this network.

        :param public_ip_address: The public_ip_address of this IngressConfig.
        :type public_ip_address: str
        """

        self._public_ip_address = public_ip_address

    @property
    def qos_level(self):
        """Gets the qos_level of this IngressConfig.

        The QoS tier for ingress.

        :return: The qos_level of this IngressConfig.
        :rtype: str
        """
        return self._qos_level

    @qos_level.setter
    def qos_level(self, qos_level):
        """Sets the qos_level of this IngressConfig.

        The QoS tier for ingress.

        :param qos_level: The qos_level of this IngressConfig.
        :type qos_level: str
        """
        allowed_values = ["Bronze"]  # noqa: E501
        if qos_level not in allowed_values:
            raise ValueError(
                "Invalid value for `qos_level` ({0}), must be one of {1}"
                .format(qos_level, allowed_values)
            )

        self._qos_level = qos_level
