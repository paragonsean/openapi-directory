# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ingress_config import IngressConfig
from openapi_server import util


class NetworkProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_prefix: str=None, description: str=None, ingress_config: IngressConfig=None):
        """NetworkProperties - a model defined in OpenAPI

        :param address_prefix: The address_prefix of this NetworkProperties.
        :param description: The description of this NetworkProperties.
        :param ingress_config: The ingress_config of this NetworkProperties.
        """
        self.openapi_types = {
            'address_prefix': str,
            'description': str,
            'ingress_config': IngressConfig
        }

        self.attribute_map = {
            'address_prefix': 'addressPrefix',
            'description': 'description',
            'ingress_config': 'ingressConfig'
        }

        self._address_prefix = address_prefix
        self._description = description
        self._ingress_config = ingress_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkProperties of this NetworkProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_prefix(self):
        """Gets the address_prefix of this NetworkProperties.

        the address prefix for this network.

        :return: The address_prefix of this NetworkProperties.
        :rtype: str
        """
        return self._address_prefix

    @address_prefix.setter
    def address_prefix(self, address_prefix):
        """Sets the address_prefix of this NetworkProperties.

        the address prefix for this network.

        :param address_prefix: The address_prefix of this NetworkProperties.
        :type address_prefix: str
        """
        if address_prefix is None:
            raise ValueError("Invalid value for `address_prefix`, must not be `None`")

        self._address_prefix = address_prefix

    @property
    def description(self):
        """Gets the description of this NetworkProperties.

        User readable description of the network.

        :return: The description of this NetworkProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NetworkProperties.

        User readable description of the network.

        :param description: The description of this NetworkProperties.
        :type description: str
        """

        self._description = description

    @property
    def ingress_config(self):
        """Gets the ingress_config of this NetworkProperties.


        :return: The ingress_config of this NetworkProperties.
        :rtype: IngressConfig
        """
        return self._ingress_config

    @ingress_config.setter
    def ingress_config(self, ingress_config):
        """Sets the ingress_config of this NetworkProperties.


        :param ingress_config: The ingress_config of this NetworkProperties.
        :type ingress_config: IngressConfig
        """

        self._ingress_config = ingress_config
