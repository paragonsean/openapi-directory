# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.diagnostics_sink_properties import DiagnosticsSinkProperties
from openapi_server import util


class DiagnosticsDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_sink_refs: List[str]=None, enabled: bool=None, sinks: List[DiagnosticsSinkProperties]=None):
        """DiagnosticsDescription - a model defined in OpenAPI

        :param default_sink_refs: The default_sink_refs of this DiagnosticsDescription.
        :param enabled: The enabled of this DiagnosticsDescription.
        :param sinks: The sinks of this DiagnosticsDescription.
        """
        self.openapi_types = {
            'default_sink_refs': List[str],
            'enabled': bool,
            'sinks': List[DiagnosticsSinkProperties]
        }

        self.attribute_map = {
            'default_sink_refs': 'defaultSinkRefs',
            'enabled': 'enabled',
            'sinks': 'sinks'
        }

        self._default_sink_refs = default_sink_refs
        self._enabled = enabled
        self._sinks = sinks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosticsDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosticsDescription of this DiagnosticsDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_sink_refs(self):
        """Gets the default_sink_refs of this DiagnosticsDescription.

        The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.

        :return: The default_sink_refs of this DiagnosticsDescription.
        :rtype: List[str]
        """
        return self._default_sink_refs

    @default_sink_refs.setter
    def default_sink_refs(self, default_sink_refs):
        """Sets the default_sink_refs of this DiagnosticsDescription.

        The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.

        :param default_sink_refs: The default_sink_refs of this DiagnosticsDescription.
        :type default_sink_refs: List[str]
        """

        self._default_sink_refs = default_sink_refs

    @property
    def enabled(self):
        """Gets the enabled of this DiagnosticsDescription.

        Status of whether or not sinks are enabled.

        :return: The enabled of this DiagnosticsDescription.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DiagnosticsDescription.

        Status of whether or not sinks are enabled.

        :param enabled: The enabled of this DiagnosticsDescription.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def sinks(self):
        """Gets the sinks of this DiagnosticsDescription.

        List of supported sinks that can be referenced.

        :return: The sinks of this DiagnosticsDescription.
        :rtype: List[DiagnosticsSinkProperties]
        """
        return self._sinks

    @sinks.setter
    def sinks(self, sinks):
        """Sets the sinks of this DiagnosticsDescription.

        List of supported sinks that can be referenced.

        :param sinks: The sinks of this DiagnosticsDescription.
        :type sinks: List[DiagnosticsSinkProperties]
        """

        self._sinks = sinks
