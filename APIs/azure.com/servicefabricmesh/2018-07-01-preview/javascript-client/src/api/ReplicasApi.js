/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ServiceReplicaDescription from '../model/ServiceReplicaDescription';
import ServiceReplicaList from '../model/ServiceReplicaList';

/**
* Replicas service.
* @module api/ReplicasApi
* @version 2018-07-01-preview
*/
export default class ReplicasApi {

    /**
    * Constructs a new ReplicasApi. 
    * @alias module:api/ReplicasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the replicaGet operation.
     * @callback module:api/ReplicasApi~replicaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceReplicaDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific replica of a given service.
     * Gets the information about the specified replica of a given service of an application. The information includes the runtime properties of the replica instance.
     * @param {String} subscriptionId The customer subscription identifier
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be `2018-07-01-preview`.
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} applicationName The identity of the application.
     * @param {String} serviceName The identity of the service.
     * @param {String} replicaName The identity of the service replica.
     * @param {module:api/ReplicasApi~replicaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceReplicaDescription}
     */
    replicaGet(subscriptionId, apiVersion, resourceGroupName, applicationName, serviceName, replicaName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicaGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicaGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicaGet");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling replicaGet");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling replicaGet");
      }
      // verify the required parameter 'replicaName' is set
      if (replicaName === undefined || replicaName === null) {
        throw new Error("Missing the required parameter 'replicaName' when calling replicaGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'applicationName': applicationName,
        'serviceName': serviceName,
        'replicaName': replicaName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceReplicaDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}/services/{serviceName}/replicas/{replicaName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicaListByServiceName operation.
     * @callback module:api/ReplicasApi~replicaListByServiceNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceReplicaList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets replicas of a given service.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     * @param {String} subscriptionId The customer subscription identifier
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be `2018-07-01-preview`.
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} applicationName The identity of the application.
     * @param {String} serviceName The identity of the service.
     * @param {module:api/ReplicasApi~replicaListByServiceNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceReplicaList}
     */
    replicaListByServiceName(subscriptionId, apiVersion, resourceGroupName, applicationName, serviceName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicaListByServiceName");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicaListByServiceName");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicaListByServiceName");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling replicaListByServiceName");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling replicaListByServiceName");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'applicationName': applicationName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceReplicaList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}/services/{serviceName}/replicas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
