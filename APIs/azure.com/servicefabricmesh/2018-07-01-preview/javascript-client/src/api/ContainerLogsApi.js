/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContainerLogs from '../model/ContainerLogs';
import ErrorModel from '../model/ErrorModel';

/**
* ContainerLogs service.
* @module api/ContainerLogsApi
* @version 2018-07-01-preview
*/
export default class ContainerLogsApi {

    /**
    * Constructs a new ContainerLogsApi. 
    * @alias module:api/ContainerLogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the codePackageGetContainerLog operation.
     * @callback module:api/ContainerLogsApi~codePackageGetContainerLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContainerLogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the logs for the container.
     * Get the logs for the container of a given code package of an application.
     * @param {String} subscriptionId The customer subscription identifier
     * @param {String} resourceGroupName Azure resource group name
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be `2018-07-01-preview`.
     * @param {String} applicationName The identity of the application.
     * @param {String} serviceName The identity of the service.
     * @param {String} replicaName The identity of the service replica.
     * @param {String} codePackageName The name of the code package.
     * @param {Object} opts Optional parameters
     * @param {Number} [tail] Number of lines to show from the end of the logs. Default is 100.
     * @param {module:api/ContainerLogsApi~codePackageGetContainerLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContainerLogs}
     */
    codePackageGetContainerLog(subscriptionId, resourceGroupName, apiVersion, applicationName, serviceName, replicaName, codePackageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling codePackageGetContainerLog");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling codePackageGetContainerLog");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling codePackageGetContainerLog");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling codePackageGetContainerLog");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling codePackageGetContainerLog");
      }
      // verify the required parameter 'replicaName' is set
      if (replicaName === undefined || replicaName === null) {
        throw new Error("Missing the required parameter 'replicaName' when calling codePackageGetContainerLog");
      }
      // verify the required parameter 'codePackageName' is set
      if (codePackageName === undefined || codePackageName === null) {
        throw new Error("Missing the required parameter 'codePackageName' when calling codePackageGetContainerLog");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'applicationName': applicationName,
        'serviceName': serviceName,
        'replicaName': replicaName,
        'codePackageName': codePackageName
      };
      let queryParams = {
        'api-version': apiVersion,
        'tail': opts['tail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerLogs;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}/services/{serviceName}/replicas/{replicaName}/codePackages/{codePackageName}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
