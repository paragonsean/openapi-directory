/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServiceResourceProperties.h
 *
 * This type describes properties of a service resource.
 */

#ifndef OAIServiceResourceProperties_H
#define OAIServiceResourceProperties_H

#include <QJsonObject>

#include "OAIContainerCodePackageProperties.h"
#include "OAIDiagnosticsRef.h"
#include "OAIHealthState.h"
#include "OAINetworkRef.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContainerCodePackageProperties;
class OAIDiagnosticsRef;
class OAINetworkRef;

class OAIServiceResourceProperties : public OAIObject {
public:
    OAIServiceResourceProperties();
    OAIServiceResourceProperties(QString json);
    ~OAIServiceResourceProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIContainerCodePackageProperties> getCodePackages() const;
    void setCodePackages(const QList<OAIContainerCodePackageProperties> &code_packages);
    bool is_code_packages_Set() const;
    bool is_code_packages_Valid() const;

    OAIDiagnosticsRef getDiagnostics() const;
    void setDiagnostics(const OAIDiagnosticsRef &diagnostics);
    bool is_diagnostics_Set() const;
    bool is_diagnostics_Valid() const;

    QList<OAINetworkRef> getNetworkRefs() const;
    void setNetworkRefs(const QList<OAINetworkRef> &network_refs);
    bool is_network_refs_Set() const;
    bool is_network_refs_Valid() const;

    QString getOsType() const;
    void setOsType(const QString &os_type);
    bool is_os_type_Set() const;
    bool is_os_type_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIHealthState getHealthState() const;
    void setHealthState(const OAIHealthState &health_state);
    bool is_health_state_Set() const;
    bool is_health_state_Valid() const;

    qint32 getReplicaCount() const;
    void setReplicaCount(const qint32 &replica_count);
    bool is_replica_count_Set() const;
    bool is_replica_count_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIContainerCodePackageProperties> m_code_packages;
    bool m_code_packages_isSet;
    bool m_code_packages_isValid;

    OAIDiagnosticsRef m_diagnostics;
    bool m_diagnostics_isSet;
    bool m_diagnostics_isValid;

    QList<OAINetworkRef> m_network_refs;
    bool m_network_refs_isSet;
    bool m_network_refs_isValid;

    QString m_os_type;
    bool m_os_type_isSet;
    bool m_os_type_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIHealthState m_health_state;
    bool m_health_state_isSet;
    bool m_health_state_isValid;

    qint32 m_replica_count;
    bool m_replica_count_isSet;
    bool m_replica_count_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServiceResourceProperties)

#endif // OAIServiceResourceProperties_H
