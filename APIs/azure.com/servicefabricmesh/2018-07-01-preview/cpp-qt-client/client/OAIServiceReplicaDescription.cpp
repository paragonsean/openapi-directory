/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceReplicaDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceReplicaDescription::OAIServiceReplicaDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceReplicaDescription::OAIServiceReplicaDescription() {
    this->initializeModel();
}

OAIServiceReplicaDescription::~OAIServiceReplicaDescription() {}

void OAIServiceReplicaDescription::initializeModel() {

    m_code_packages_isSet = false;
    m_code_packages_isValid = false;

    m_diagnostics_isSet = false;
    m_diagnostics_isValid = false;

    m_network_refs_isSet = false;
    m_network_refs_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_replica_name_isSet = false;
    m_replica_name_isValid = false;
}

void OAIServiceReplicaDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceReplicaDescription::fromJsonObject(QJsonObject json) {

    m_code_packages_isValid = ::OpenAPI::fromJsonValue(m_code_packages, json[QString("codePackages")]);
    m_code_packages_isSet = !json[QString("codePackages")].isNull() && m_code_packages_isValid;

    m_diagnostics_isValid = ::OpenAPI::fromJsonValue(m_diagnostics, json[QString("diagnostics")]);
    m_diagnostics_isSet = !json[QString("diagnostics")].isNull() && m_diagnostics_isValid;

    m_network_refs_isValid = ::OpenAPI::fromJsonValue(m_network_refs, json[QString("networkRefs")]);
    m_network_refs_isSet = !json[QString("networkRefs")].isNull() && m_network_refs_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_replica_name_isValid = ::OpenAPI::fromJsonValue(m_replica_name, json[QString("replicaName")]);
    m_replica_name_isSet = !json[QString("replicaName")].isNull() && m_replica_name_isValid;
}

QString OAIServiceReplicaDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceReplicaDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_code_packages.size() > 0) {
        obj.insert(QString("codePackages"), ::OpenAPI::toJsonValue(m_code_packages));
    }
    if (m_diagnostics.isSet()) {
        obj.insert(QString("diagnostics"), ::OpenAPI::toJsonValue(m_diagnostics));
    }
    if (m_network_refs.size() > 0) {
        obj.insert(QString("networkRefs"), ::OpenAPI::toJsonValue(m_network_refs));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_replica_name_isSet) {
        obj.insert(QString("replicaName"), ::OpenAPI::toJsonValue(m_replica_name));
    }
    return obj;
}

QList<OAIContainerCodePackageProperties> OAIServiceReplicaDescription::getCodePackages() const {
    return m_code_packages;
}
void OAIServiceReplicaDescription::setCodePackages(const QList<OAIContainerCodePackageProperties> &code_packages) {
    m_code_packages = code_packages;
    m_code_packages_isSet = true;
}

bool OAIServiceReplicaDescription::is_code_packages_Set() const{
    return m_code_packages_isSet;
}

bool OAIServiceReplicaDescription::is_code_packages_Valid() const{
    return m_code_packages_isValid;
}

OAIDiagnosticsRef OAIServiceReplicaDescription::getDiagnostics() const {
    return m_diagnostics;
}
void OAIServiceReplicaDescription::setDiagnostics(const OAIDiagnosticsRef &diagnostics) {
    m_diagnostics = diagnostics;
    m_diagnostics_isSet = true;
}

bool OAIServiceReplicaDescription::is_diagnostics_Set() const{
    return m_diagnostics_isSet;
}

bool OAIServiceReplicaDescription::is_diagnostics_Valid() const{
    return m_diagnostics_isValid;
}

QList<OAINetworkRef> OAIServiceReplicaDescription::getNetworkRefs() const {
    return m_network_refs;
}
void OAIServiceReplicaDescription::setNetworkRefs(const QList<OAINetworkRef> &network_refs) {
    m_network_refs = network_refs;
    m_network_refs_isSet = true;
}

bool OAIServiceReplicaDescription::is_network_refs_Set() const{
    return m_network_refs_isSet;
}

bool OAIServiceReplicaDescription::is_network_refs_Valid() const{
    return m_network_refs_isValid;
}

QString OAIServiceReplicaDescription::getOsType() const {
    return m_os_type;
}
void OAIServiceReplicaDescription::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIServiceReplicaDescription::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIServiceReplicaDescription::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIServiceReplicaDescription::getReplicaName() const {
    return m_replica_name;
}
void OAIServiceReplicaDescription::setReplicaName(const QString &replica_name) {
    m_replica_name = replica_name;
    m_replica_name_isSet = true;
}

bool OAIServiceReplicaDescription::is_replica_name_Set() const{
    return m_replica_name_isSet;
}

bool OAIServiceReplicaDescription::is_replica_name_Valid() const{
    return m_replica_name_isValid;
}

bool OAIServiceReplicaDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagnostics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceReplicaDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_packages_isValid && m_os_type_isValid && true;
}

} // namespace OpenAPI
