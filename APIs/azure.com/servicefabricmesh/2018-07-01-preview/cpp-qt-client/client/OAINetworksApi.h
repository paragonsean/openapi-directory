/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINetworksApi_H
#define OAI_OAINetworksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAINetworkResourceDescription.h"
#include "OAINetworkResourceDescriptionList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINetworksApi : public QObject {
    Q_OBJECT

public:
    OAINetworksApi(const int timeOut = 0);
    ~OAINetworksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_name QString [required]
    * @param[in]  network_resource_description OAINetworkResourceDescription [required]
    */
    virtual void networkCreate(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &network_name, const OAINetworkResourceDescription &network_resource_description);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_name QString [required]
    */
    virtual void networkDelete(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &network_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_name QString [required]
    */
    virtual void networkGet(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &network_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void networkListByResourceGroup(const QString &subscription_id, const QString &api_version, const QString &resource_group_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void networkListBySubscription(const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void networkCreateCallback(OAIHttpRequestWorker *worker);
    void networkDeleteCallback(OAIHttpRequestWorker *worker);
    void networkGetCallback(OAIHttpRequestWorker *worker);
    void networkListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void networkListBySubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void networkCreateSignal(OAINetworkResourceDescription summary);
    void networkDeleteSignal();
    void networkGetSignal(OAINetworkResourceDescription summary);
    void networkListByResourceGroupSignal(OAINetworkResourceDescriptionList summary);
    void networkListBySubscriptionSignal(OAINetworkResourceDescriptionList summary);


    void networkCreateSignalFull(OAIHttpRequestWorker *worker, OAINetworkResourceDescription summary);
    void networkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void networkGetSignalFull(OAIHttpRequestWorker *worker, OAINetworkResourceDescription summary);
    void networkListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAINetworkResourceDescriptionList summary);
    void networkListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAINetworkResourceDescriptionList summary);

    Q_DECL_DEPRECATED_X("Use networkCreateSignalError() instead")
    void networkCreateSignalE(OAINetworkResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkCreateSignalError(OAINetworkResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkDeleteSignalError() instead")
    void networkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void networkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkGetSignalError() instead")
    void networkGetSignalE(OAINetworkResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkGetSignalError(OAINetworkResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkListByResourceGroupSignalError() instead")
    void networkListByResourceGroupSignalE(OAINetworkResourceDescriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkListByResourceGroupSignalError(OAINetworkResourceDescriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkListBySubscriptionSignalError() instead")
    void networkListBySubscriptionSignalE(OAINetworkResourceDescriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkListBySubscriptionSignalError(OAINetworkResourceDescriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use networkCreateSignalErrorFull() instead")
    void networkCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkDeleteSignalErrorFull() instead")
    void networkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkGetSignalErrorFull() instead")
    void networkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkListByResourceGroupSignalErrorFull() instead")
    void networkListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkListBySubscriptionSignalErrorFull() instead")
    void networkListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
