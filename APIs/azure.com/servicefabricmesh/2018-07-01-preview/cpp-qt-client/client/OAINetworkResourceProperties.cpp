/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkResourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkResourceProperties::OAINetworkResourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkResourceProperties::OAINetworkResourceProperties() {
    this->initializeModel();
}

OAINetworkResourceProperties::~OAINetworkResourceProperties() {}

void OAINetworkResourceProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_address_prefix_isSet = false;
    m_address_prefix_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ingress_config_isSet = false;
    m_ingress_config_isValid = false;
}

void OAINetworkResourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkResourceProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_address_prefix, json[QString("addressPrefix")]);
    m_address_prefix_isSet = !json[QString("addressPrefix")].isNull() && m_address_prefix_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ingress_config_isValid = ::OpenAPI::fromJsonValue(m_ingress_config, json[QString("ingressConfig")]);
    m_ingress_config_isSet = !json[QString("ingressConfig")].isNull() && m_ingress_config_isValid;
}

QString OAINetworkResourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkResourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_address_prefix_isSet) {
        obj.insert(QString("addressPrefix"), ::OpenAPI::toJsonValue(m_address_prefix));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ingress_config.isSet()) {
        obj.insert(QString("ingressConfig"), ::OpenAPI::toJsonValue(m_ingress_config));
    }
    return obj;
}

QString OAINetworkResourceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAINetworkResourceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAINetworkResourceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAINetworkResourceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAINetworkResourceProperties::getAddressPrefix() const {
    return m_address_prefix;
}
void OAINetworkResourceProperties::setAddressPrefix(const QString &address_prefix) {
    m_address_prefix = address_prefix;
    m_address_prefix_isSet = true;
}

bool OAINetworkResourceProperties::is_address_prefix_Set() const{
    return m_address_prefix_isSet;
}

bool OAINetworkResourceProperties::is_address_prefix_Valid() const{
    return m_address_prefix_isValid;
}

QString OAINetworkResourceProperties::getDescription() const {
    return m_description;
}
void OAINetworkResourceProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINetworkResourceProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAINetworkResourceProperties::is_description_Valid() const{
    return m_description_isValid;
}

OAIIngressConfig OAINetworkResourceProperties::getIngressConfig() const {
    return m_ingress_config;
}
void OAINetworkResourceProperties::setIngressConfig(const OAIIngressConfig &ingress_config) {
    m_ingress_config = ingress_config;
    m_ingress_config_isSet = true;
}

bool OAINetworkResourceProperties::is_ingress_config_Set() const{
    return m_ingress_config_isSet;
}

bool OAINetworkResourceProperties::is_ingress_config_Valid() const{
    return m_ingress_config_isValid;
}

bool OAINetworkResourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkResourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_prefix_isValid && true;
}

} // namespace OpenAPI
