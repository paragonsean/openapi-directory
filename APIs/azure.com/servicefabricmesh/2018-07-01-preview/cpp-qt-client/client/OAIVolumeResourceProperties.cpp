/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeResourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeResourceProperties::OAIVolumeResourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeResourceProperties::OAIVolumeResourceProperties() {
    this->initializeModel();
}

OAIVolumeResourceProperties::~OAIVolumeResourceProperties() {}

void OAIVolumeResourceProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_azure_file_parameters_isSet = false;
    m_azure_file_parameters_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;
}

void OAIVolumeResourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeResourceProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_azure_file_parameters_isValid = ::OpenAPI::fromJsonValue(m_azure_file_parameters, json[QString("azureFileParameters")]);
    m_azure_file_parameters_isSet = !json[QString("azureFileParameters")].isNull() && m_azure_file_parameters_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;
}

QString OAIVolumeResourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeResourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_azure_file_parameters.isSet()) {
        obj.insert(QString("azureFileParameters"), ::OpenAPI::toJsonValue(m_azure_file_parameters));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    return obj;
}

QString OAIVolumeResourceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVolumeResourceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVolumeResourceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVolumeResourceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIVolumeProviderParametersAzureFile OAIVolumeResourceProperties::getAzureFileParameters() const {
    return m_azure_file_parameters;
}
void OAIVolumeResourceProperties::setAzureFileParameters(const OAIVolumeProviderParametersAzureFile &azure_file_parameters) {
    m_azure_file_parameters = azure_file_parameters;
    m_azure_file_parameters_isSet = true;
}

bool OAIVolumeResourceProperties::is_azure_file_parameters_Set() const{
    return m_azure_file_parameters_isSet;
}

bool OAIVolumeResourceProperties::is_azure_file_parameters_Valid() const{
    return m_azure_file_parameters_isValid;
}

QString OAIVolumeResourceProperties::getDescription() const {
    return m_description;
}
void OAIVolumeResourceProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVolumeResourceProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVolumeResourceProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVolumeResourceProperties::getProvider() const {
    return m_provider;
}
void OAIVolumeResourceProperties::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIVolumeResourceProperties::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIVolumeResourceProperties::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAIVolumeResourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_file_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeResourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_provider_isValid && true;
}

} // namespace OpenAPI
