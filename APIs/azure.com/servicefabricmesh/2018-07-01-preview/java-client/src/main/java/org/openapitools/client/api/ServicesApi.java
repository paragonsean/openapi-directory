/*
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ServiceList;
import org.openapitools.client.model.ServiceResourceDescription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for serviceGet
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param serviceName The identity of the service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGetCall(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, String serviceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}/services/{serviceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceGetValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, String serviceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serviceGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serviceGet(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling serviceGet(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceGet(Async)");
        }

        return serviceGetCall(subscriptionId, apiVersion, resourceGroupName, applicationName, serviceName, _callback);

    }

    /**
     * Gets the properties of the service.
     * The operation returns the properties of the service.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param serviceName The identity of the service. (required)
     * @return ServiceResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServiceResourceDescription serviceGet(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, String serviceName) throws ApiException {
        ApiResponse<ServiceResourceDescription> localVarResp = serviceGetWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, applicationName, serviceName);
        return localVarResp.getData();
    }

    /**
     * Gets the properties of the service.
     * The operation returns the properties of the service.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param serviceName The identity of the service. (required)
     * @return ApiResponse&lt;ServiceResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceResourceDescription> serviceGetWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, String serviceName) throws ApiException {
        okhttp3.Call localVarCall = serviceGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, applicationName, serviceName, null);
        Type localVarReturnType = new TypeToken<ServiceResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the properties of the service. (asynchronously)
     * The operation returns the properties of the service.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param serviceName The identity of the service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGetAsync(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, String serviceName, final ApiCallback<ServiceResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, applicationName, serviceName, _callback);
        Type localVarReturnType = new TypeToken<ServiceResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceListByApplicationName
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceListByApplicationNameCall(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}/services"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceListByApplicationNameValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serviceListByApplicationName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceListByApplicationName(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serviceListByApplicationName(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling serviceListByApplicationName(Async)");
        }

        return serviceListByApplicationNameCall(subscriptionId, apiVersion, resourceGroupName, applicationName, _callback);

    }

    /**
     * Gets services of a given application.
     * Gets the information about all services of a given service of an application. The information includes the runtime properties of the service instance.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @return ServiceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServiceList serviceListByApplicationName(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName) throws ApiException {
        ApiResponse<ServiceList> localVarResp = serviceListByApplicationNameWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, applicationName);
        return localVarResp.getData();
    }

    /**
     * Gets services of a given application.
     * Gets the information about all services of a given service of an application. The information includes the runtime properties of the service instance.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @return ApiResponse&lt;ServiceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceList> serviceListByApplicationNameWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName) throws ApiException {
        okhttp3.Call localVarCall = serviceListByApplicationNameValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, applicationName, null);
        Type localVarReturnType = new TypeToken<ServiceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets services of a given application. (asynchronously)
     * Gets the information about all services of a given service of an application. The information includes the runtime properties of the service instance.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceListByApplicationNameAsync(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, final ApiCallback<ServiceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceListByApplicationNameValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, applicationName, _callback);
        Type localVarReturnType = new TypeToken<ServiceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
