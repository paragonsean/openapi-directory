/*
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContainerCodePackageProperties;
import org.openapitools.client.model.DiagnosticsRef;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.NetworkRef;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type describes properties of a service resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:21.159648-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceResourceProperties {
  public static final String SERIALIZED_NAME_CODE_PACKAGES = "codePackages";
  @SerializedName(SERIALIZED_NAME_CODE_PACKAGES)
  private List<ContainerCodePackageProperties> codePackages = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIAGNOSTICS = "diagnostics";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS)
  private DiagnosticsRef diagnostics;

  public static final String SERIALIZED_NAME_NETWORK_REFS = "networkRefs";
  @SerializedName(SERIALIZED_NAME_NETWORK_REFS)
  private List<NetworkRef> networkRefs = new ArrayList<>();

  /**
   * The Operating system type required by the code in service. 
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    LINUX("Linux"),
    
    WINDOWS("Windows");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HEALTH_STATE = "healthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthState healthState;

  public static final String SERIALIZED_NAME_REPLICA_COUNT = "replicaCount";
  @SerializedName(SERIALIZED_NAME_REPLICA_COUNT)
  private Integer replicaCount;

  /**
   * Represents the status of the service.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNKNOWN("Unknown"),
    
    ACTIVE("Active"),
    
    UPGRADING("Upgrading"),
    
    DELETING("Deleting"),
    
    CREATING("Creating"),
    
    FAILED("Failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public ServiceResourceProperties() {
  }

  public ServiceResourceProperties(
     StatusEnum status
  ) {
    this();
    this.status = status;
  }

  public ServiceResourceProperties codePackages(List<ContainerCodePackageProperties> codePackages) {
    this.codePackages = codePackages;
    return this;
  }

  public ServiceResourceProperties addCodePackagesItem(ContainerCodePackageProperties codePackagesItem) {
    if (this.codePackages == null) {
      this.codePackages = new ArrayList<>();
    }
    this.codePackages.add(codePackagesItem);
    return this;
  }

  /**
   * Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.). 
   * @return codePackages
   */
  @javax.annotation.Nonnull
  public List<ContainerCodePackageProperties> getCodePackages() {
    return codePackages;
  }

  public void setCodePackages(List<ContainerCodePackageProperties> codePackages) {
    this.codePackages = codePackages;
  }


  public ServiceResourceProperties diagnostics(DiagnosticsRef diagnostics) {
    this.diagnostics = diagnostics;
    return this;
  }

  /**
   * Get diagnostics
   * @return diagnostics
   */
  @javax.annotation.Nullable
  public DiagnosticsRef getDiagnostics() {
    return diagnostics;
  }

  public void setDiagnostics(DiagnosticsRef diagnostics) {
    this.diagnostics = diagnostics;
  }


  public ServiceResourceProperties networkRefs(List<NetworkRef> networkRefs) {
    this.networkRefs = networkRefs;
    return this;
  }

  public ServiceResourceProperties addNetworkRefsItem(NetworkRef networkRefsItem) {
    if (this.networkRefs == null) {
      this.networkRefs = new ArrayList<>();
    }
    this.networkRefs.add(networkRefsItem);
    return this;
  }

  /**
   * The names of the private networks that this service needs to be part of.
   * @return networkRefs
   */
  @javax.annotation.Nullable
  public List<NetworkRef> getNetworkRefs() {
    return networkRefs;
  }

  public void setNetworkRefs(List<NetworkRef> networkRefs) {
    this.networkRefs = networkRefs;
  }


  public ServiceResourceProperties osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * The Operating system type required by the code in service. 
   * @return osType
   */
  @javax.annotation.Nonnull
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  public ServiceResourceProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User readable description of the service.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ServiceResourceProperties healthState(HealthState healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Get healthState
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthState getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthState healthState) {
    this.healthState = healthState;
  }


  public ServiceResourceProperties replicaCount(Integer replicaCount) {
    this.replicaCount = replicaCount;
    return this;
  }

  /**
   * The number of replicas of the service to create. Defaults to 1 if not specified.
   * @return replicaCount
   */
  @javax.annotation.Nullable
  public Integer getReplicaCount() {
    return replicaCount;
  }

  public void setReplicaCount(Integer replicaCount) {
    this.replicaCount = replicaCount;
  }


  /**
   * Represents the status of the service.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceResourceProperties serviceResourceProperties = (ServiceResourceProperties) o;
    return Objects.equals(this.codePackages, serviceResourceProperties.codePackages) &&
        Objects.equals(this.diagnostics, serviceResourceProperties.diagnostics) &&
        Objects.equals(this.networkRefs, serviceResourceProperties.networkRefs) &&
        Objects.equals(this.osType, serviceResourceProperties.osType) &&
        Objects.equals(this.description, serviceResourceProperties.description) &&
        Objects.equals(this.healthState, serviceResourceProperties.healthState) &&
        Objects.equals(this.replicaCount, serviceResourceProperties.replicaCount) &&
        Objects.equals(this.status, serviceResourceProperties.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codePackages, diagnostics, networkRefs, osType, description, healthState, replicaCount, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceResourceProperties {\n");
    sb.append("    codePackages: ").append(toIndentedString(codePackages)).append("\n");
    sb.append("    diagnostics: ").append(toIndentedString(diagnostics)).append("\n");
    sb.append("    networkRefs: ").append(toIndentedString(networkRefs)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    replicaCount: ").append(toIndentedString(replicaCount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codePackages");
    openapiFields.add("diagnostics");
    openapiFields.add("networkRefs");
    openapiFields.add("osType");
    openapiFields.add("description");
    openapiFields.add("healthState");
    openapiFields.add("replicaCount");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("codePackages");
    openapiRequiredFields.add("osType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceResourceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceResourceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceResourceProperties is not found in the empty JSON string", ServiceResourceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceResourceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceResourceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceResourceProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("codePackages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `codePackages` to be an array in the JSON string but got `%s`", jsonObj.get("codePackages").toString()));
      }

      JsonArray jsonArraycodePackages = jsonObj.getAsJsonArray("codePackages");
      // validate the required field `codePackages` (array)
      for (int i = 0; i < jsonArraycodePackages.size(); i++) {
        ContainerCodePackageProperties.validateJsonElement(jsonArraycodePackages.get(i));
      };
      // validate the optional field `diagnostics`
      if (jsonObj.get("diagnostics") != null && !jsonObj.get("diagnostics").isJsonNull()) {
        DiagnosticsRef.validateJsonElement(jsonObj.get("diagnostics"));
      }
      if (jsonObj.get("networkRefs") != null && !jsonObj.get("networkRefs").isJsonNull()) {
        JsonArray jsonArraynetworkRefs = jsonObj.getAsJsonArray("networkRefs");
        if (jsonArraynetworkRefs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkRefs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkRefs` to be an array in the JSON string but got `%s`", jsonObj.get("networkRefs").toString()));
          }

          // validate the optional field `networkRefs` (array)
          for (int i = 0; i < jsonArraynetworkRefs.size(); i++) {
            NetworkRef.validateJsonElement(jsonArraynetworkRefs.get(i));
          };
        }
      }
      if (!jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the required field `osType`
      OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `healthState`
      if (jsonObj.get("healthState") != null && !jsonObj.get("healthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("healthState"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceResourceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceResourceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceResourceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceResourceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceResourceProperties>() {
           @Override
           public void write(JsonWriter out, ServiceResourceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceResourceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceResourceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceResourceProperties
   * @throws IOException if the JSON string is invalid with respect to ServiceResourceProperties
   */
  public static ServiceResourceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceResourceProperties.class);
  }

  /**
   * Convert an instance of ServiceResourceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

