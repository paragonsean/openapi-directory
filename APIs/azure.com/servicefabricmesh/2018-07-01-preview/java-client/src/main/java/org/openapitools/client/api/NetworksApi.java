/*
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.NetworkResourceDescription;
import org.openapitools.client.model.NetworkResourceDescriptionList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NetworksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for networkCreate
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param networkName The identity of the network. (required)
     * @param networkResourceDescription Description for creating a network resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkCreateCall(String subscriptionId, String apiVersion, String resourceGroupName, String networkName, NetworkResourceDescription networkResourceDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkResourceDescription;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks/{networkName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkName" + "}", localVarApiClient.escapeString(networkName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkCreateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String networkName, NetworkResourceDescription networkResourceDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling networkCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling networkCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling networkCreate(Async)");
        }

        // verify the required parameter 'networkName' is set
        if (networkName == null) {
            throw new ApiException("Missing the required parameter 'networkName' when calling networkCreate(Async)");
        }

        // verify the required parameter 'networkResourceDescription' is set
        if (networkResourceDescription == null) {
            throw new ApiException("Missing the required parameter 'networkResourceDescription' when calling networkCreate(Async)");
        }

        return networkCreateCall(subscriptionId, apiVersion, resourceGroupName, networkName, networkResourceDescription, _callback);

    }

    /**
     * Creates or updates a network resource.
     * Creates a network resource with the specified name and description. If a network with the same name already exists, then its description is updated to the one indicated in this request.  Use network resources to create private network and configure public connectivity for services within your application.  
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param networkName The identity of the network. (required)
     * @param networkResourceDescription Description for creating a network resource. (required)
     * @return NetworkResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public NetworkResourceDescription networkCreate(String subscriptionId, String apiVersion, String resourceGroupName, String networkName, NetworkResourceDescription networkResourceDescription) throws ApiException {
        ApiResponse<NetworkResourceDescription> localVarResp = networkCreateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, networkName, networkResourceDescription);
        return localVarResp.getData();
    }

    /**
     * Creates or updates a network resource.
     * Creates a network resource with the specified name and description. If a network with the same name already exists, then its description is updated to the one indicated in this request.  Use network resources to create private network and configure public connectivity for services within your application.  
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param networkName The identity of the network. (required)
     * @param networkResourceDescription Description for creating a network resource. (required)
     * @return ApiResponse&lt;NetworkResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkResourceDescription> networkCreateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String networkName, NetworkResourceDescription networkResourceDescription) throws ApiException {
        okhttp3.Call localVarCall = networkCreateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, networkName, networkResourceDescription, null);
        Type localVarReturnType = new TypeToken<NetworkResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates a network resource. (asynchronously)
     * Creates a network resource with the specified name and description. If a network with the same name already exists, then its description is updated to the one indicated in this request.  Use network resources to create private network and configure public connectivity for services within your application.  
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param networkName The identity of the network. (required)
     * @param networkResourceDescription Description for creating a network resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkCreateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String networkName, NetworkResourceDescription networkResourceDescription, final ApiCallback<NetworkResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkCreateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, networkName, networkResourceDescription, _callback);
        Type localVarReturnType = new TypeToken<NetworkResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkDelete
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param networkName The identity of the network. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified network was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkDeleteCall(String subscriptionId, String apiVersion, String resourceGroupName, String networkName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks/{networkName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkName" + "}", localVarApiClient.escapeString(networkName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkDeleteValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String networkName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling networkDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling networkDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling networkDelete(Async)");
        }

        // verify the required parameter 'networkName' is set
        if (networkName == null) {
            throw new ApiException("Missing the required parameter 'networkName' when calling networkDelete(Async)");
        }

        return networkDeleteCall(subscriptionId, apiVersion, resourceGroupName, networkName, _callback);

    }

    /**
     * Deletes the network resource.
     * Deletes the network resource identified by the name.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param networkName The identity of the network. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified network was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void networkDelete(String subscriptionId, String apiVersion, String resourceGroupName, String networkName) throws ApiException {
        networkDeleteWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, networkName);
    }

    /**
     * Deletes the network resource.
     * Deletes the network resource identified by the name.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param networkName The identity of the network. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified network was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> networkDeleteWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String networkName) throws ApiException {
        okhttp3.Call localVarCall = networkDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, networkName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the network resource. (asynchronously)
     * Deletes the network resource identified by the name.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param networkName The identity of the network. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified network was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkDeleteAsync(String subscriptionId, String apiVersion, String resourceGroupName, String networkName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, networkName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkGet
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param networkName The identity of the network. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkGetCall(String subscriptionId, String apiVersion, String resourceGroupName, String networkName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks/{networkName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkName" + "}", localVarApiClient.escapeString(networkName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkGetValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String networkName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling networkGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling networkGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling networkGet(Async)");
        }

        // verify the required parameter 'networkName' is set
        if (networkName == null) {
            throw new ApiException("Missing the required parameter 'networkName' when calling networkGet(Async)");
        }

        return networkGetCall(subscriptionId, apiVersion, resourceGroupName, networkName, _callback);

    }

    /**
     * Gets the network resource.
     * Gets the information about the network resource with a given name. This information includes the network description and other runtime information. 
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param networkName The identity of the network. (required)
     * @return NetworkResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public NetworkResourceDescription networkGet(String subscriptionId, String apiVersion, String resourceGroupName, String networkName) throws ApiException {
        ApiResponse<NetworkResourceDescription> localVarResp = networkGetWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, networkName);
        return localVarResp.getData();
    }

    /**
     * Gets the network resource.
     * Gets the information about the network resource with a given name. This information includes the network description and other runtime information. 
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param networkName The identity of the network. (required)
     * @return ApiResponse&lt;NetworkResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkResourceDescription> networkGetWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String networkName) throws ApiException {
        okhttp3.Call localVarCall = networkGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, networkName, null);
        Type localVarReturnType = new TypeToken<NetworkResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the network resource. (asynchronously)
     * Gets the information about the network resource with a given name. This information includes the network description and other runtime information. 
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param networkName The identity of the network. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkGetAsync(String subscriptionId, String apiVersion, String resourceGroupName, String networkName, final ApiCallback<NetworkResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, networkName, _callback);
        Type localVarReturnType = new TypeToken<NetworkResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkListByResourceGroup
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkListByResourceGroupCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkListByResourceGroupValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling networkListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling networkListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling networkListByResourceGroup(Async)");
        }

        return networkListByResourceGroupCall(subscriptionId, apiVersion, resourceGroupName, _callback);

    }

    /**
     * Gets all the network resources in a given resource group.
     * Gets the information about all network resources in a given resource group. The information includes the network description and other runtime properties. 
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @return NetworkResourceDescriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public NetworkResourceDescriptionList networkListByResourceGroup(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        ApiResponse<NetworkResourceDescriptionList> localVarResp = networkListByResourceGroupWithHttpInfo(subscriptionId, apiVersion, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * Gets all the network resources in a given resource group.
     * Gets the information about all network resources in a given resource group. The information includes the network description and other runtime properties. 
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @return ApiResponse&lt;NetworkResourceDescriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkResourceDescriptionList> networkListByResourceGroupWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = networkListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<NetworkResourceDescriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the network resources in a given resource group. (asynchronously)
     * Gets the information about all network resources in a given resource group. The information includes the network description and other runtime properties. 
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkListByResourceGroupAsync(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback<NetworkResourceDescriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<NetworkResourceDescriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkListBySubscription
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkListBySubscriptionCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/networks"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling networkListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling networkListBySubscription(Async)");
        }

        return networkListBySubscriptionCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets all the network resources in a given subscription.
     * Gets the information about all network resources in a given subscription. The information includes the network description and other runtime properties.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @return NetworkResourceDescriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public NetworkResourceDescriptionList networkListBySubscription(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<NetworkResourceDescriptionList> localVarResp = networkListBySubscriptionWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all the network resources in a given subscription.
     * Gets the information about all network resources in a given subscription. The information includes the network description and other runtime properties.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @return ApiResponse&lt;NetworkResourceDescriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkResourceDescriptionList> networkListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = networkListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<NetworkResourceDescriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the network resources in a given subscription. (asynchronously)
     * Gets the information about all network resources in a given subscription. The information includes the network description and other runtime properties.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkListBySubscriptionAsync(String subscriptionId, String apiVersion, final ApiCallback<NetworkResourceDescriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<NetworkResourceDescriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
