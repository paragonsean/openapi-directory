/*
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DiagnosticsSinkKind;
import org.openapitools.client.model.DiagnosticsSinkProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Diagnostics settings for Geneva.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:21.159648-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureInternalMonitoringPipelineSinkDescription extends DiagnosticsSinkProperties {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_AUTO_KEY_CONFIG_URL = "autoKeyConfigUrl";
  @SerializedName(SERIALIZED_NAME_AUTO_KEY_CONFIG_URL)
  private String autoKeyConfigUrl;

  public static final String SERIALIZED_NAME_FLUENTD_CONFIG_URL = "fluentdConfigUrl";
  @SerializedName(SERIALIZED_NAME_FLUENTD_CONFIG_URL)
  private Object fluentdConfigUrl;

  public static final String SERIALIZED_NAME_MA_CONFIG_URL = "maConfigUrl";
  @SerializedName(SERIALIZED_NAME_MA_CONFIG_URL)
  private String maConfigUrl;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public AzureInternalMonitoringPipelineSinkDescription() {
    this.kind = this.getClass().getSimpleName();
  }

  public AzureInternalMonitoringPipelineSinkDescription accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Azure Internal monitoring pipeline account.
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public AzureInternalMonitoringPipelineSinkDescription autoKeyConfigUrl(String autoKeyConfigUrl) {
    this.autoKeyConfigUrl = autoKeyConfigUrl;
    return this;
  }

  /**
   * Azure Internal monitoring pipeline autokey associated with the certificate.
   * @return autoKeyConfigUrl
   */
  @javax.annotation.Nullable
  public String getAutoKeyConfigUrl() {
    return autoKeyConfigUrl;
  }

  public void setAutoKeyConfigUrl(String autoKeyConfigUrl) {
    this.autoKeyConfigUrl = autoKeyConfigUrl;
  }


  public AzureInternalMonitoringPipelineSinkDescription fluentdConfigUrl(Object fluentdConfigUrl) {
    this.fluentdConfigUrl = fluentdConfigUrl;
    return this;
  }

  /**
   * Azure Internal monitoring agent fluentd configuration.
   * @return fluentdConfigUrl
   */
  @javax.annotation.Nullable
  public Object getFluentdConfigUrl() {
    return fluentdConfigUrl;
  }

  public void setFluentdConfigUrl(Object fluentdConfigUrl) {
    this.fluentdConfigUrl = fluentdConfigUrl;
  }


  public AzureInternalMonitoringPipelineSinkDescription maConfigUrl(String maConfigUrl) {
    this.maConfigUrl = maConfigUrl;
    return this;
  }

  /**
   * Azure Internal monitoring agent configuration.
   * @return maConfigUrl
   */
  @javax.annotation.Nullable
  public String getMaConfigUrl() {
    return maConfigUrl;
  }

  public void setMaConfigUrl(String maConfigUrl) {
    this.maConfigUrl = maConfigUrl;
  }


  public AzureInternalMonitoringPipelineSinkDescription namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Azure Internal monitoring pipeline account namespace.
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureInternalMonitoringPipelineSinkDescription azureInternalMonitoringPipelineSinkDescription = (AzureInternalMonitoringPipelineSinkDescription) o;
    return Objects.equals(this.accountName, azureInternalMonitoringPipelineSinkDescription.accountName) &&
        Objects.equals(this.autoKeyConfigUrl, azureInternalMonitoringPipelineSinkDescription.autoKeyConfigUrl) &&
        Objects.equals(this.fluentdConfigUrl, azureInternalMonitoringPipelineSinkDescription.fluentdConfigUrl) &&
        Objects.equals(this.maConfigUrl, azureInternalMonitoringPipelineSinkDescription.maConfigUrl) &&
        Objects.equals(this.namespace, azureInternalMonitoringPipelineSinkDescription.namespace) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, autoKeyConfigUrl, fluentdConfigUrl, maConfigUrl, namespace, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureInternalMonitoringPipelineSinkDescription {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    autoKeyConfigUrl: ").append(toIndentedString(autoKeyConfigUrl)).append("\n");
    sb.append("    fluentdConfigUrl: ").append(toIndentedString(fluentdConfigUrl)).append("\n");
    sb.append("    maConfigUrl: ").append(toIndentedString(maConfigUrl)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("kind");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("kind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureInternalMonitoringPipelineSinkDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureInternalMonitoringPipelineSinkDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureInternalMonitoringPipelineSinkDescription is not found in the empty JSON string", AzureInternalMonitoringPipelineSinkDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AzureInternalMonitoringPipelineSinkDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AzureInternalMonitoringPipelineSinkDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AzureInternalMonitoringPipelineSinkDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AzureInternalMonitoringPipelineSinkDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AzureInternalMonitoringPipelineSinkDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AzureInternalMonitoringPipelineSinkDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AzureInternalMonitoringPipelineSinkDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<AzureInternalMonitoringPipelineSinkDescription>() {
           @Override
           public void write(JsonWriter out, AzureInternalMonitoringPipelineSinkDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AzureInternalMonitoringPipelineSinkDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AzureInternalMonitoringPipelineSinkDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureInternalMonitoringPipelineSinkDescription
   * @throws IOException if the JSON string is invalid with respect to AzureInternalMonitoringPipelineSinkDescription
   */
  public static AzureInternalMonitoringPipelineSinkDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureInternalMonitoringPipelineSinkDescription.class);
  }

  /**
   * Convert an instance of AzureInternalMonitoringPipelineSinkDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

