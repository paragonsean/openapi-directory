/*
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplicationResourceDescription;
import org.openapitools.client.model.ApplicationResourceDescriptionList;
import org.openapitools.client.model.ErrorModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for applicationCreate
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param applicationResourceDescription Description for creating an application resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationCreateCall(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, ApplicationResourceDescription applicationResourceDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationResourceDescription;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationCreateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, ApplicationResourceDescription applicationResourceDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applicationCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationCreate(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationCreate(Async)");
        }

        // verify the required parameter 'applicationResourceDescription' is set
        if (applicationResourceDescription == null) {
            throw new ApiException("Missing the required parameter 'applicationResourceDescription' when calling applicationCreate(Async)");
        }

        return applicationCreateCall(subscriptionId, apiVersion, resourceGroupName, applicationName, applicationResourceDescription, _callback);

    }

    /**
     * Creates or updates an application resource.
     * Creates an application resource with the specified name and description. If an application with the same name already exists, then its description is updated to the one indicated in this request.  Use network resources to provide public connectivity to the services of an application. 
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param applicationResourceDescription Description for creating an application resource. (required)
     * @return ApplicationResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResourceDescription applicationCreate(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, ApplicationResourceDescription applicationResourceDescription) throws ApiException {
        ApiResponse<ApplicationResourceDescription> localVarResp = applicationCreateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, applicationName, applicationResourceDescription);
        return localVarResp.getData();
    }

    /**
     * Creates or updates an application resource.
     * Creates an application resource with the specified name and description. If an application with the same name already exists, then its description is updated to the one indicated in this request.  Use network resources to provide public connectivity to the services of an application. 
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param applicationResourceDescription Description for creating an application resource. (required)
     * @return ApiResponse&lt;ApplicationResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResourceDescription> applicationCreateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, ApplicationResourceDescription applicationResourceDescription) throws ApiException {
        okhttp3.Call localVarCall = applicationCreateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, applicationName, applicationResourceDescription, null);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates an application resource. (asynchronously)
     * Creates an application resource with the specified name and description. If an application with the same name already exists, then its description is updated to the one indicated in this request.  Use network resources to provide public connectivity to the services of an application. 
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param applicationResourceDescription Description for creating an application resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationCreateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, ApplicationResourceDescription applicationResourceDescription, final ApiCallback<ApplicationResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationCreateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, applicationName, applicationResourceDescription, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationDelete
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified application was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationDeleteCall(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationDeleteValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applicationDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationDelete(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationDelete(Async)");
        }

        return applicationDeleteCall(subscriptionId, apiVersion, resourceGroupName, applicationName, _callback);

    }

    /**
     * Deletes the application resource.
     * Deletes the application resource identified by the name.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified application was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void applicationDelete(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName) throws ApiException {
        applicationDeleteWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, applicationName);
    }

    /**
     * Deletes the application resource.
     * Deletes the application resource identified by the name.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified application was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> applicationDeleteWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName) throws ApiException {
        okhttp3.Call localVarCall = applicationDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, applicationName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the application resource. (asynchronously)
     * Deletes the application resource identified by the name.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified application was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationDeleteAsync(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, applicationName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGet
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGetCall(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGetValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applicationGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationGet(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationGet(Async)");
        }

        return applicationGetCall(subscriptionId, apiVersion, resourceGroupName, applicationName, _callback);

    }

    /**
     * Gets the application resource.
     * Gets the information about the application resource with a given name. The information includes the information about the application&#39;s services and other runtime properties.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @return ApplicationResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResourceDescription applicationGet(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName) throws ApiException {
        ApiResponse<ApplicationResourceDescription> localVarResp = applicationGetWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, applicationName);
        return localVarResp.getData();
    }

    /**
     * Gets the application resource.
     * Gets the information about the application resource with a given name. The information includes the information about the application&#39;s services and other runtime properties.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @return ApiResponse&lt;ApplicationResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResourceDescription> applicationGetWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName) throws ApiException {
        okhttp3.Call localVarCall = applicationGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, applicationName, null);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the application resource. (asynchronously)
     * Gets the information about the application resource with a given name. The information includes the information about the application&#39;s services and other runtime properties.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param applicationName The identity of the application. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGetAsync(String subscriptionId, String apiVersion, String resourceGroupName, String applicationName, final ApiCallback<ApplicationResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, applicationName, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationListByResourceGroup
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationListByResourceGroupCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationListByResourceGroupValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applicationListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationListByResourceGroup(Async)");
        }

        return applicationListByResourceGroupCall(subscriptionId, apiVersion, resourceGroupName, _callback);

    }

    /**
     * Gets all the application resources in a given resource group.
     * Gets the information about all application resources in a given resource group. The information includes the information about the application&#39;s services and other runtime properties.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @return ApplicationResourceDescriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResourceDescriptionList applicationListByResourceGroup(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        ApiResponse<ApplicationResourceDescriptionList> localVarResp = applicationListByResourceGroupWithHttpInfo(subscriptionId, apiVersion, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * Gets all the application resources in a given resource group.
     * Gets the information about all application resources in a given resource group. The information includes the information about the application&#39;s services and other runtime properties.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @return ApiResponse&lt;ApplicationResourceDescriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResourceDescriptionList> applicationListByResourceGroupWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = applicationListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the application resources in a given resource group. (asynchronously)
     * Gets the information about all application resources in a given resource group. The information includes the information about the application&#39;s services and other runtime properties.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationListByResourceGroupAsync(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback<ApplicationResourceDescriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationListBySubscription
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationListBySubscriptionCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/applications"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applicationListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationListBySubscription(Async)");
        }

        return applicationListBySubscriptionCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets all the application resources in a given subscription.
     * Gets the information about all application resources in a given subscription. The information includes the information about the application&#39;s services and other runtime properties.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @return ApplicationResourceDescriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResourceDescriptionList applicationListBySubscription(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ApplicationResourceDescriptionList> localVarResp = applicationListBySubscriptionWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all the application resources in a given subscription.
     * Gets the information about all application resources in a given subscription. The information includes the information about the application&#39;s services and other runtime properties.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @return ApiResponse&lt;ApplicationResourceDescriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResourceDescriptionList> applicationListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = applicationListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the application resources in a given subscription. (asynchronously)
     * Gets the information about all application resources in a given subscription. The information includes the information about the application&#39;s services and other runtime properties.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-07-01-preview&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationListBySubscriptionAsync(String subscriptionId, String apiVersion, final ApiCallback<ApplicationResourceDescriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
