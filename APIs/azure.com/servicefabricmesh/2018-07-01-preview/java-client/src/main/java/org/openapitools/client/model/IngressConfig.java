/*
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Layer4IngressConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes public connectivity configuration for the network.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:21.159648-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IngressConfig {
  public static final String SERIALIZED_NAME_LAYER4 = "layer4";
  @SerializedName(SERIALIZED_NAME_LAYER4)
  private List<Layer4IngressConfig> layer4 = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLIC_I_P_ADDRESS = "publicIPAddress";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P_ADDRESS)
  private String publicIPAddress;

  /**
   * The QoS tier for ingress.
   */
  @JsonAdapter(QosLevelEnum.Adapter.class)
  public enum QosLevelEnum {
    BRONZE("Bronze");

    private String value;

    QosLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QosLevelEnum fromValue(String value) {
      for (QosLevelEnum b : QosLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QosLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QosLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QosLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QosLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QosLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QOS_LEVEL = "qosLevel";
  @SerializedName(SERIALIZED_NAME_QOS_LEVEL)
  private QosLevelEnum qosLevel;

  public IngressConfig() {
  }

  public IngressConfig(
     String publicIPAddress
  ) {
    this();
    this.publicIPAddress = publicIPAddress;
  }

  public IngressConfig layer4(List<Layer4IngressConfig> layer4) {
    this.layer4 = layer4;
    return this;
  }

  public IngressConfig addLayer4Item(Layer4IngressConfig layer4Item) {
    if (this.layer4 == null) {
      this.layer4 = new ArrayList<>();
    }
    this.layer4.add(layer4Item);
    return this;
  }

  /**
   * Configuration for layer4 public connectivity for this network.
   * @return layer4
   */
  @javax.annotation.Nullable
  public List<Layer4IngressConfig> getLayer4() {
    return layer4;
  }

  public void setLayer4(List<Layer4IngressConfig> layer4) {
    this.layer4 = layer4;
  }


  /**
   * The public IP address for reaching this network.
   * @return publicIPAddress
   */
  @javax.annotation.Nullable
  public String getPublicIPAddress() {
    return publicIPAddress;
  }



  public IngressConfig qosLevel(QosLevelEnum qosLevel) {
    this.qosLevel = qosLevel;
    return this;
  }

  /**
   * The QoS tier for ingress.
   * @return qosLevel
   */
  @javax.annotation.Nullable
  public QosLevelEnum getQosLevel() {
    return qosLevel;
  }

  public void setQosLevel(QosLevelEnum qosLevel) {
    this.qosLevel = qosLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IngressConfig ingressConfig = (IngressConfig) o;
    return Objects.equals(this.layer4, ingressConfig.layer4) &&
        Objects.equals(this.publicIPAddress, ingressConfig.publicIPAddress) &&
        Objects.equals(this.qosLevel, ingressConfig.qosLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(layer4, publicIPAddress, qosLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IngressConfig {\n");
    sb.append("    layer4: ").append(toIndentedString(layer4)).append("\n");
    sb.append("    publicIPAddress: ").append(toIndentedString(publicIPAddress)).append("\n");
    sb.append("    qosLevel: ").append(toIndentedString(qosLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("layer4");
    openapiFields.add("publicIPAddress");
    openapiFields.add("qosLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IngressConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IngressConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IngressConfig is not found in the empty JSON string", IngressConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IngressConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IngressConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("layer4") != null && !jsonObj.get("layer4").isJsonNull()) {
        JsonArray jsonArraylayer4 = jsonObj.getAsJsonArray("layer4");
        if (jsonArraylayer4 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("layer4").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `layer4` to be an array in the JSON string but got `%s`", jsonObj.get("layer4").toString()));
          }

          // validate the optional field `layer4` (array)
          for (int i = 0; i < jsonArraylayer4.size(); i++) {
            Layer4IngressConfig.validateJsonElement(jsonArraylayer4.get(i));
          };
        }
      }
      if ((jsonObj.get("publicIPAddress") != null && !jsonObj.get("publicIPAddress").isJsonNull()) && !jsonObj.get("publicIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIPAddress").toString()));
      }
      if ((jsonObj.get("qosLevel") != null && !jsonObj.get("qosLevel").isJsonNull()) && !jsonObj.get("qosLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qosLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qosLevel").toString()));
      }
      // validate the optional field `qosLevel`
      if (jsonObj.get("qosLevel") != null && !jsonObj.get("qosLevel").isJsonNull()) {
        QosLevelEnum.validateJsonElement(jsonObj.get("qosLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IngressConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IngressConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IngressConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IngressConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<IngressConfig>() {
           @Override
           public void write(JsonWriter out, IngressConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IngressConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IngressConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IngressConfig
   * @throws IOException if the JSON string is invalid with respect to IngressConfig
   */
  public static IngressConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IngressConfig.class);
  }

  /**
   * Convert an instance of IngressConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

