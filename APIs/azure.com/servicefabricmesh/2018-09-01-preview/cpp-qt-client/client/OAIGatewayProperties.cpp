/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGatewayProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGatewayProperties::OAIGatewayProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGatewayProperties::OAIGatewayProperties() {
    this->initializeModel();
}

OAIGatewayProperties::~OAIGatewayProperties() {}

void OAIGatewayProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_network_isSet = false;
    m_destination_network_isValid = false;

    m_http_isSet = false;
    m_http_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_source_network_isSet = false;
    m_source_network_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_tcp_isSet = false;
    m_tcp_isValid = false;
}

void OAIGatewayProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGatewayProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_destination_network_isValid = ::OpenAPI::fromJsonValue(m_destination_network, json[QString("destinationNetwork")]);
    m_destination_network_isSet = !json[QString("destinationNetwork")].isNull() && m_destination_network_isValid;

    m_http_isValid = ::OpenAPI::fromJsonValue(m_http, json[QString("http")]);
    m_http_isSet = !json[QString("http")].isNull() && m_http_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_source_network_isValid = ::OpenAPI::fromJsonValue(m_source_network, json[QString("sourceNetwork")]);
    m_source_network_isSet = !json[QString("sourceNetwork")].isNull() && m_source_network_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("statusDetails")]);
    m_status_details_isSet = !json[QString("statusDetails")].isNull() && m_status_details_isValid;

    m_tcp_isValid = ::OpenAPI::fromJsonValue(m_tcp, json[QString("tcp")]);
    m_tcp_isSet = !json[QString("tcp")].isNull() && m_tcp_isValid;
}

QString OAIGatewayProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGatewayProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination_network.isSet()) {
        obj.insert(QString("destinationNetwork"), ::OpenAPI::toJsonValue(m_destination_network));
    }
    if (m_http.size() > 0) {
        obj.insert(QString("http"), ::OpenAPI::toJsonValue(m_http));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_source_network.isSet()) {
        obj.insert(QString("sourceNetwork"), ::OpenAPI::toJsonValue(m_source_network));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_details_isSet) {
        obj.insert(QString("statusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_tcp.size() > 0) {
        obj.insert(QString("tcp"), ::OpenAPI::toJsonValue(m_tcp));
    }
    return obj;
}

QString OAIGatewayProperties::getDescription() const {
    return m_description;
}
void OAIGatewayProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGatewayProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGatewayProperties::is_description_Valid() const{
    return m_description_isValid;
}

OAINetworkRef OAIGatewayProperties::getDestinationNetwork() const {
    return m_destination_network;
}
void OAIGatewayProperties::setDestinationNetwork(const OAINetworkRef &destination_network) {
    m_destination_network = destination_network;
    m_destination_network_isSet = true;
}

bool OAIGatewayProperties::is_destination_network_Set() const{
    return m_destination_network_isSet;
}

bool OAIGatewayProperties::is_destination_network_Valid() const{
    return m_destination_network_isValid;
}

QList<OAIHttpConfig> OAIGatewayProperties::getHttp() const {
    return m_http;
}
void OAIGatewayProperties::setHttp(const QList<OAIHttpConfig> &http) {
    m_http = http;
    m_http_isSet = true;
}

bool OAIGatewayProperties::is_http_Set() const{
    return m_http_isSet;
}

bool OAIGatewayProperties::is_http_Valid() const{
    return m_http_isValid;
}

QString OAIGatewayProperties::getIpAddress() const {
    return m_ip_address;
}
void OAIGatewayProperties::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIGatewayProperties::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIGatewayProperties::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

OAINetworkRef OAIGatewayProperties::getSourceNetwork() const {
    return m_source_network;
}
void OAIGatewayProperties::setSourceNetwork(const OAINetworkRef &source_network) {
    m_source_network = source_network;
    m_source_network_isSet = true;
}

bool OAIGatewayProperties::is_source_network_Set() const{
    return m_source_network_isSet;
}

bool OAIGatewayProperties::is_source_network_Valid() const{
    return m_source_network_isValid;
}

OAIResourceStatus OAIGatewayProperties::getStatus() const {
    return m_status;
}
void OAIGatewayProperties::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGatewayProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGatewayProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGatewayProperties::getStatusDetails() const {
    return m_status_details;
}
void OAIGatewayProperties::setStatusDetails(const QString &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIGatewayProperties::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIGatewayProperties::is_status_details_Valid() const{
    return m_status_details_isValid;
}

QList<OAITcpConfig> OAIGatewayProperties::getTcp() const {
    return m_tcp;
}
void OAIGatewayProperties::setTcp(const QList<OAITcpConfig> &tcp) {
    m_tcp = tcp;
    m_tcp_isSet = true;
}

bool OAIGatewayProperties::is_tcp_Set() const{
    return m_tcp_isSet;
}

bool OAIGatewayProperties::is_tcp_Valid() const{
    return m_tcp_isValid;
}

bool OAIGatewayProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tcp.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGatewayProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_network_isValid && m_source_network_isValid && true;
}

} // namespace OpenAPI
