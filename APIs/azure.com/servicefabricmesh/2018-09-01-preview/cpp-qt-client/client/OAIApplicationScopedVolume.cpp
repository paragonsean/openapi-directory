/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationScopedVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationScopedVolume::OAIApplicationScopedVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationScopedVolume::OAIApplicationScopedVolume() {
    this->initializeModel();
}

OAIApplicationScopedVolume::~OAIApplicationScopedVolume() {}

void OAIApplicationScopedVolume::initializeModel() {

    m_creation_parameters_isSet = false;
    m_creation_parameters_isValid = false;

    m_destination_path_isSet = false;
    m_destination_path_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;
}

void OAIApplicationScopedVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationScopedVolume::fromJsonObject(QJsonObject json) {

    m_creation_parameters_isValid = ::OpenAPI::fromJsonValue(m_creation_parameters, json[QString("creationParameters")]);
    m_creation_parameters_isSet = !json[QString("creationParameters")].isNull() && m_creation_parameters_isValid;

    m_destination_path_isValid = ::OpenAPI::fromJsonValue(m_destination_path, json[QString("destinationPath")]);
    m_destination_path_isSet = !json[QString("destinationPath")].isNull() && m_destination_path_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;
}

QString OAIApplicationScopedVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationScopedVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_parameters.isSet()) {
        obj.insert(QString("creationParameters"), ::OpenAPI::toJsonValue(m_creation_parameters));
    }
    if (m_destination_path_isSet) {
        obj.insert(QString("destinationPath"), ::OpenAPI::toJsonValue(m_destination_path));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    return obj;
}

OAIApplicationScopedVolumeCreationParameters OAIApplicationScopedVolume::getCreationParameters() const {
    return m_creation_parameters;
}
void OAIApplicationScopedVolume::setCreationParameters(const OAIApplicationScopedVolumeCreationParameters &creation_parameters) {
    m_creation_parameters = creation_parameters;
    m_creation_parameters_isSet = true;
}

bool OAIApplicationScopedVolume::is_creation_parameters_Set() const{
    return m_creation_parameters_isSet;
}

bool OAIApplicationScopedVolume::is_creation_parameters_Valid() const{
    return m_creation_parameters_isValid;
}

QString OAIApplicationScopedVolume::getDestinationPath() const {
    return m_destination_path;
}
void OAIApplicationScopedVolume::setDestinationPath(const QString &destination_path) {
    m_destination_path = destination_path;
    m_destination_path_isSet = true;
}

bool OAIApplicationScopedVolume::is_destination_path_Set() const{
    return m_destination_path_isSet;
}

bool OAIApplicationScopedVolume::is_destination_path_Valid() const{
    return m_destination_path_isValid;
}

QString OAIApplicationScopedVolume::getName() const {
    return m_name;
}
void OAIApplicationScopedVolume::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationScopedVolume::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationScopedVolume::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIApplicationScopedVolume::isReadOnly() const {
    return m_read_only;
}
void OAIApplicationScopedVolume::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIApplicationScopedVolume::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIApplicationScopedVolume::is_read_only_Valid() const{
    return m_read_only_isValid;
}

bool OAIApplicationScopedVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationScopedVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creation_parameters_isValid && m_destination_path_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
