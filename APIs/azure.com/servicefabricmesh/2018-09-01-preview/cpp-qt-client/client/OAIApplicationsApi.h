/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplicationsApi_H
#define OAI_OAIApplicationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationResourceDescription.h"
#include "OAIApplicationResourceDescriptionList.h"
#include "OAIErrorModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplicationsApi : public QObject {
    Q_OBJECT

public:
    OAIApplicationsApi(const int timeOut = 0);
    ~OAIApplicationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_resource_name QString [required]
    * @param[in]  application_resource_description OAIApplicationResourceDescription [required]
    */
    virtual void applicationCreate(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &application_resource_name, const OAIApplicationResourceDescription &application_resource_description);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_resource_name QString [required]
    */
    virtual void applicationDelete(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &application_resource_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_resource_name QString [required]
    */
    virtual void applicationGet(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &application_resource_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void applicationListByResourceGroup(const QString &subscription_id, const QString &api_version, const QString &resource_group_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void applicationListBySubscription(const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void applicationCreateCallback(OAIHttpRequestWorker *worker);
    void applicationDeleteCallback(OAIHttpRequestWorker *worker);
    void applicationGetCallback(OAIHttpRequestWorker *worker);
    void applicationListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void applicationListBySubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void applicationCreateSignal(OAIApplicationResourceDescription summary);
    void applicationDeleteSignal();
    void applicationGetSignal(OAIApplicationResourceDescription summary);
    void applicationListByResourceGroupSignal(OAIApplicationResourceDescriptionList summary);
    void applicationListBySubscriptionSignal(OAIApplicationResourceDescriptionList summary);


    void applicationCreateSignalFull(OAIHttpRequestWorker *worker, OAIApplicationResourceDescription summary);
    void applicationDeleteSignalFull(OAIHttpRequestWorker *worker);
    void applicationGetSignalFull(OAIHttpRequestWorker *worker, OAIApplicationResourceDescription summary);
    void applicationListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIApplicationResourceDescriptionList summary);
    void applicationListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIApplicationResourceDescriptionList summary);

    Q_DECL_DEPRECATED_X("Use applicationCreateSignalError() instead")
    void applicationCreateSignalE(OAIApplicationResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationCreateSignalError(OAIApplicationResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationDeleteSignalError() instead")
    void applicationDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void applicationDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGetSignalError() instead")
    void applicationGetSignalE(OAIApplicationResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGetSignalError(OAIApplicationResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationListByResourceGroupSignalError() instead")
    void applicationListByResourceGroupSignalE(OAIApplicationResourceDescriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationListByResourceGroupSignalError(OAIApplicationResourceDescriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationListBySubscriptionSignalError() instead")
    void applicationListBySubscriptionSignalE(OAIApplicationResourceDescriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationListBySubscriptionSignalError(OAIApplicationResourceDescriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use applicationCreateSignalErrorFull() instead")
    void applicationCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationDeleteSignalErrorFull() instead")
    void applicationDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGetSignalErrorFull() instead")
    void applicationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationListByResourceGroupSignalErrorFull() instead")
    void applicationListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationListBySubscriptionSignalErrorFull() instead")
    void applicationListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
