/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISecretValuesApi_H
#define OAI_OAISecretValuesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAISecretValue.h"
#include "OAISecretValueResourceDescription.h"
#include "OAISecretValueResourceDescriptionList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISecretValuesApi : public QObject {
    Q_OBJECT

public:
    OAISecretValuesApi(const int timeOut = 0);
    ~OAISecretValuesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  secret_resource_name QString [required]
    * @param[in]  secret_value_resource_name QString [required]
    * @param[in]  secret_value_resource_description OAISecretValueResourceDescription [required]
    */
    virtual void secretValueCreate(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &secret_resource_name, const QString &secret_value_resource_name, const OAISecretValueResourceDescription &secret_value_resource_description);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  secret_resource_name QString [required]
    * @param[in]  secret_value_resource_name QString [required]
    */
    virtual void secretValueDelete(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &secret_resource_name, const QString &secret_value_resource_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  secret_resource_name QString [required]
    * @param[in]  secret_value_resource_name QString [required]
    */
    virtual void secretValueGet(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &secret_resource_name, const QString &secret_value_resource_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  secret_resource_name QString [required]
    */
    virtual void secretValueList(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &secret_resource_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  secret_resource_name QString [required]
    * @param[in]  secret_value_resource_name QString [required]
    */
    virtual void secretValueListValue(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &secret_resource_name, const QString &secret_value_resource_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void secretValueCreateCallback(OAIHttpRequestWorker *worker);
    void secretValueDeleteCallback(OAIHttpRequestWorker *worker);
    void secretValueGetCallback(OAIHttpRequestWorker *worker);
    void secretValueListCallback(OAIHttpRequestWorker *worker);
    void secretValueListValueCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void secretValueCreateSignal(OAISecretValueResourceDescription summary);
    void secretValueDeleteSignal();
    void secretValueGetSignal(OAISecretValueResourceDescription summary);
    void secretValueListSignal(OAISecretValueResourceDescriptionList summary);
    void secretValueListValueSignal(OAISecretValue summary);


    void secretValueCreateSignalFull(OAIHttpRequestWorker *worker, OAISecretValueResourceDescription summary);
    void secretValueDeleteSignalFull(OAIHttpRequestWorker *worker);
    void secretValueGetSignalFull(OAIHttpRequestWorker *worker, OAISecretValueResourceDescription summary);
    void secretValueListSignalFull(OAIHttpRequestWorker *worker, OAISecretValueResourceDescriptionList summary);
    void secretValueListValueSignalFull(OAIHttpRequestWorker *worker, OAISecretValue summary);

    Q_DECL_DEPRECATED_X("Use secretValueCreateSignalError() instead")
    void secretValueCreateSignalE(OAISecretValueResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretValueCreateSignalError(OAISecretValueResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretValueDeleteSignalError() instead")
    void secretValueDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void secretValueDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretValueGetSignalError() instead")
    void secretValueGetSignalE(OAISecretValueResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretValueGetSignalError(OAISecretValueResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretValueListSignalError() instead")
    void secretValueListSignalE(OAISecretValueResourceDescriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretValueListSignalError(OAISecretValueResourceDescriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretValueListValueSignalError() instead")
    void secretValueListValueSignalE(OAISecretValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretValueListValueSignalError(OAISecretValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use secretValueCreateSignalErrorFull() instead")
    void secretValueCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretValueCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretValueDeleteSignalErrorFull() instead")
    void secretValueDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretValueDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretValueGetSignalErrorFull() instead")
    void secretValueGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretValueGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretValueListSignalErrorFull() instead")
    void secretValueListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretValueListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretValueListValueSignalErrorFull() instead")
    void secretValueListValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretValueListValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
