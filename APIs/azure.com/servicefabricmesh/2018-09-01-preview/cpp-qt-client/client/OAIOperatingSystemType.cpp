/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperatingSystemType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperatingSystemType::OAIOperatingSystemType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperatingSystemType::OAIOperatingSystemType() {
    this->initializeModel();
}

OAIOperatingSystemType::~OAIOperatingSystemType() {}

void OAIOperatingSystemType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOperatingSystemType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOperatingSystemType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Linux", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatingSystemType::LINUX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Windows", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatingSystemType::WINDOWS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOperatingSystemType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOperatingSystemType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOperatingSystemType::LINUX:
            val = "Linux";
            break;
        case eOAIOperatingSystemType::WINDOWS:
            val = "Windows";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOperatingSystemType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOperatingSystemType::eOAIOperatingSystemType OAIOperatingSystemType::getValue() const {
    return m_value;
}

void OAIOperatingSystemType::setValue(const OAIOperatingSystemType::eOAIOperatingSystemType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOperatingSystemType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOperatingSystemType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
