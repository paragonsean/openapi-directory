/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGatewayDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGatewayDestination::OAIGatewayDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGatewayDestination::OAIGatewayDestination() {
    this->initializeModel();
}

OAIGatewayDestination::~OAIGatewayDestination() {}

void OAIGatewayDestination::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_endpoint_name_isSet = false;
    m_endpoint_name_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIGatewayDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGatewayDestination::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("applicationName")]);
    m_application_name_isSet = !json[QString("applicationName")].isNull() && m_application_name_isValid;

    m_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_name, json[QString("endpointName")]);
    m_endpoint_name_isSet = !json[QString("endpointName")].isNull() && m_endpoint_name_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;
}

QString OAIGatewayDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGatewayDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("applicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_endpoint_name_isSet) {
        obj.insert(QString("endpointName"), ::OpenAPI::toJsonValue(m_endpoint_name));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

QString OAIGatewayDestination::getApplicationName() const {
    return m_application_name;
}
void OAIGatewayDestination::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIGatewayDestination::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIGatewayDestination::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIGatewayDestination::getEndpointName() const {
    return m_endpoint_name;
}
void OAIGatewayDestination::setEndpointName(const QString &endpoint_name) {
    m_endpoint_name = endpoint_name;
    m_endpoint_name_isSet = true;
}

bool OAIGatewayDestination::is_endpoint_name_Set() const{
    return m_endpoint_name_isSet;
}

bool OAIGatewayDestination::is_endpoint_name_Valid() const{
    return m_endpoint_name_isValid;
}

QString OAIGatewayDestination::getServiceName() const {
    return m_service_name;
}
void OAIGatewayDestination::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIGatewayDestination::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIGatewayDestination::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIGatewayDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGatewayDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_endpoint_name_isValid && m_service_name_isValid && true;
}

} // namespace OpenAPI
