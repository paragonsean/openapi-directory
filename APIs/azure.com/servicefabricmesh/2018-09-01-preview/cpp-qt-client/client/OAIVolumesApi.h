/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVolumesApi_H
#define OAI_OAIVolumesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAIVolumeResourceDescription.h"
#include "OAIVolumeResourceDescriptionList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVolumesApi : public QObject {
    Q_OBJECT

public:
    OAIVolumesApi(const int timeOut = 0);
    ~OAIVolumesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  volume_resource_name QString [required]
    * @param[in]  volume_resource_description OAIVolumeResourceDescription [required]
    */
    virtual void volumeCreate(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &volume_resource_name, const OAIVolumeResourceDescription &volume_resource_description);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  volume_resource_name QString [required]
    */
    virtual void volumeDelete(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &volume_resource_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  volume_resource_name QString [required]
    */
    virtual void volumeGet(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &volume_resource_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void volumeListByResourceGroup(const QString &subscription_id, const QString &api_version, const QString &resource_group_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void volumeListBySubscription(const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void volumeCreateCallback(OAIHttpRequestWorker *worker);
    void volumeDeleteCallback(OAIHttpRequestWorker *worker);
    void volumeGetCallback(OAIHttpRequestWorker *worker);
    void volumeListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void volumeListBySubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void volumeCreateSignal(OAIVolumeResourceDescription summary);
    void volumeDeleteSignal();
    void volumeGetSignal(OAIVolumeResourceDescription summary);
    void volumeListByResourceGroupSignal(OAIVolumeResourceDescriptionList summary);
    void volumeListBySubscriptionSignal(OAIVolumeResourceDescriptionList summary);


    void volumeCreateSignalFull(OAIHttpRequestWorker *worker, OAIVolumeResourceDescription summary);
    void volumeDeleteSignalFull(OAIHttpRequestWorker *worker);
    void volumeGetSignalFull(OAIHttpRequestWorker *worker, OAIVolumeResourceDescription summary);
    void volumeListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIVolumeResourceDescriptionList summary);
    void volumeListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIVolumeResourceDescriptionList summary);

    Q_DECL_DEPRECATED_X("Use volumeCreateSignalError() instead")
    void volumeCreateSignalE(OAIVolumeResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void volumeCreateSignalError(OAIVolumeResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumeDeleteSignalError() instead")
    void volumeDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void volumeDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumeGetSignalError() instead")
    void volumeGetSignalE(OAIVolumeResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void volumeGetSignalError(OAIVolumeResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumeListByResourceGroupSignalError() instead")
    void volumeListByResourceGroupSignalE(OAIVolumeResourceDescriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void volumeListByResourceGroupSignalError(OAIVolumeResourceDescriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumeListBySubscriptionSignalError() instead")
    void volumeListBySubscriptionSignalE(OAIVolumeResourceDescriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void volumeListBySubscriptionSignalError(OAIVolumeResourceDescriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use volumeCreateSignalErrorFull() instead")
    void volumeCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void volumeCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumeDeleteSignalErrorFull() instead")
    void volumeDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void volumeDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumeGetSignalErrorFull() instead")
    void volumeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void volumeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumeListByResourceGroupSignalErrorFull() instead")
    void volumeListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void volumeListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumeListBySubscriptionSignalErrorFull() instead")
    void volumeListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void volumeListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
