/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureInternalMonitoringPipelineSinkDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureInternalMonitoringPipelineSinkDescription::OAIAzureInternalMonitoringPipelineSinkDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureInternalMonitoringPipelineSinkDescription::OAIAzureInternalMonitoringPipelineSinkDescription() {
    this->initializeModel();
}

OAIAzureInternalMonitoringPipelineSinkDescription::~OAIAzureInternalMonitoringPipelineSinkDescription() {}

void OAIAzureInternalMonitoringPipelineSinkDescription::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_auto_key_config_url_isSet = false;
    m_auto_key_config_url_isValid = false;

    m_fluentd_config_url_isSet = false;
    m_fluentd_config_url_isValid = false;

    m_ma_config_url_isSet = false;
    m_ma_config_url_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAzureInternalMonitoringPipelineSinkDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureInternalMonitoringPipelineSinkDescription::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_auto_key_config_url_isValid = ::OpenAPI::fromJsonValue(m_auto_key_config_url, json[QString("autoKeyConfigUrl")]);
    m_auto_key_config_url_isSet = !json[QString("autoKeyConfigUrl")].isNull() && m_auto_key_config_url_isValid;

    m_fluentd_config_url_isValid = ::OpenAPI::fromJsonValue(m_fluentd_config_url, json[QString("fluentdConfigUrl")]);
    m_fluentd_config_url_isSet = !json[QString("fluentdConfigUrl")].isNull() && m_fluentd_config_url_isValid;

    m_ma_config_url_isValid = ::OpenAPI::fromJsonValue(m_ma_config_url, json[QString("maConfigUrl")]);
    m_ma_config_url_isSet = !json[QString("maConfigUrl")].isNull() && m_ma_config_url_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIAzureInternalMonitoringPipelineSinkDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureInternalMonitoringPipelineSinkDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_auto_key_config_url_isSet) {
        obj.insert(QString("autoKeyConfigUrl"), ::OpenAPI::toJsonValue(m_auto_key_config_url));
    }
    if (m_fluentd_config_url_isSet) {
        obj.insert(QString("fluentdConfigUrl"), ::OpenAPI::toJsonValue(m_fluentd_config_url));
    }
    if (m_ma_config_url_isSet) {
        obj.insert(QString("maConfigUrl"), ::OpenAPI::toJsonValue(m_ma_config_url));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIAzureInternalMonitoringPipelineSinkDescription::getAccountName() const {
    return m_account_name;
}
void OAIAzureInternalMonitoringPipelineSinkDescription::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIAzureInternalMonitoringPipelineSinkDescription::getAutoKeyConfigUrl() const {
    return m_auto_key_config_url;
}
void OAIAzureInternalMonitoringPipelineSinkDescription::setAutoKeyConfigUrl(const QString &auto_key_config_url) {
    m_auto_key_config_url = auto_key_config_url;
    m_auto_key_config_url_isSet = true;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_auto_key_config_url_Set() const{
    return m_auto_key_config_url_isSet;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_auto_key_config_url_Valid() const{
    return m_auto_key_config_url_isValid;
}

OAIObject OAIAzureInternalMonitoringPipelineSinkDescription::getFluentdConfigUrl() const {
    return m_fluentd_config_url;
}
void OAIAzureInternalMonitoringPipelineSinkDescription::setFluentdConfigUrl(const OAIObject &fluentd_config_url) {
    m_fluentd_config_url = fluentd_config_url;
    m_fluentd_config_url_isSet = true;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_fluentd_config_url_Set() const{
    return m_fluentd_config_url_isSet;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_fluentd_config_url_Valid() const{
    return m_fluentd_config_url_isValid;
}

QString OAIAzureInternalMonitoringPipelineSinkDescription::getMaConfigUrl() const {
    return m_ma_config_url;
}
void OAIAzureInternalMonitoringPipelineSinkDescription::setMaConfigUrl(const QString &ma_config_url) {
    m_ma_config_url = ma_config_url;
    m_ma_config_url_isSet = true;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_ma_config_url_Set() const{
    return m_ma_config_url_isSet;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_ma_config_url_Valid() const{
    return m_ma_config_url_isValid;
}

QString OAIAzureInternalMonitoringPipelineSinkDescription::getRNamespace() const {
    return m_r_namespace;
}
void OAIAzureInternalMonitoringPipelineSinkDescription::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIAzureInternalMonitoringPipelineSinkDescription::getDescription() const {
    return m_description;
}
void OAIAzureInternalMonitoringPipelineSinkDescription::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_description_Valid() const{
    return m_description_isValid;
}

OAIDiagnosticsSinkKind OAIAzureInternalMonitoringPipelineSinkDescription::getKind() const {
    return m_kind;
}
void OAIAzureInternalMonitoringPipelineSinkDescription::setKind(const OAIDiagnosticsSinkKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIAzureInternalMonitoringPipelineSinkDescription::getName() const {
    return m_name;
}
void OAIAzureInternalMonitoringPipelineSinkDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_key_config_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fluentd_config_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ma_config_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureInternalMonitoringPipelineSinkDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kind_isValid && true;
}

} // namespace OpenAPI
