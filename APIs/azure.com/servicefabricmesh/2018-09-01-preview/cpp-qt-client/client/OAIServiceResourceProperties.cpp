/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceResourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceResourceProperties::OAIServiceResourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceResourceProperties::OAIServiceResourceProperties() {
    this->initializeModel();
}

OAIServiceResourceProperties::~OAIServiceResourceProperties() {}

void OAIServiceResourceProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_code_packages_isSet = false;
    m_code_packages_isValid = false;

    m_diagnostics_isSet = false;
    m_diagnostics_isValid = false;

    m_network_refs_isSet = false;
    m_network_refs_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_auto_scaling_policies_isSet = false;
    m_auto_scaling_policies_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_replica_count_isSet = false;
    m_replica_count_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_unhealthy_evaluation_isSet = false;
    m_unhealthy_evaluation_isValid = false;
}

void OAIServiceResourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceResourceProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_code_packages_isValid = ::OpenAPI::fromJsonValue(m_code_packages, json[QString("codePackages")]);
    m_code_packages_isSet = !json[QString("codePackages")].isNull() && m_code_packages_isValid;

    m_diagnostics_isValid = ::OpenAPI::fromJsonValue(m_diagnostics, json[QString("diagnostics")]);
    m_diagnostics_isSet = !json[QString("diagnostics")].isNull() && m_diagnostics_isValid;

    m_network_refs_isValid = ::OpenAPI::fromJsonValue(m_network_refs, json[QString("networkRefs")]);
    m_network_refs_isSet = !json[QString("networkRefs")].isNull() && m_network_refs_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_auto_scaling_policies_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_policies, json[QString("autoScalingPolicies")]);
    m_auto_scaling_policies_isSet = !json[QString("autoScalingPolicies")].isNull() && m_auto_scaling_policies_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("healthState")]);
    m_health_state_isSet = !json[QString("healthState")].isNull() && m_health_state_isValid;

    m_replica_count_isValid = ::OpenAPI::fromJsonValue(m_replica_count, json[QString("replicaCount")]);
    m_replica_count_isSet = !json[QString("replicaCount")].isNull() && m_replica_count_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("statusDetails")]);
    m_status_details_isSet = !json[QString("statusDetails")].isNull() && m_status_details_isValid;

    m_unhealthy_evaluation_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_evaluation, json[QString("unhealthyEvaluation")]);
    m_unhealthy_evaluation_isSet = !json[QString("unhealthyEvaluation")].isNull() && m_unhealthy_evaluation_isValid;
}

QString OAIServiceResourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceResourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_code_packages.size() > 0) {
        obj.insert(QString("codePackages"), ::OpenAPI::toJsonValue(m_code_packages));
    }
    if (m_diagnostics.isSet()) {
        obj.insert(QString("diagnostics"), ::OpenAPI::toJsonValue(m_diagnostics));
    }
    if (m_network_refs.size() > 0) {
        obj.insert(QString("networkRefs"), ::OpenAPI::toJsonValue(m_network_refs));
    }
    if (m_os_type.isSet()) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_auto_scaling_policies.size() > 0) {
        obj.insert(QString("autoScalingPolicies"), ::OpenAPI::toJsonValue(m_auto_scaling_policies));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_health_state.isSet()) {
        obj.insert(QString("healthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_replica_count_isSet) {
        obj.insert(QString("replicaCount"), ::OpenAPI::toJsonValue(m_replica_count));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_details_isSet) {
        obj.insert(QString("statusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_unhealthy_evaluation_isSet) {
        obj.insert(QString("unhealthyEvaluation"), ::OpenAPI::toJsonValue(m_unhealthy_evaluation));
    }
    return obj;
}

QString OAIServiceResourceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIServiceResourceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIServiceResourceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIServiceResourceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIContainerCodePackageProperties> OAIServiceResourceProperties::getCodePackages() const {
    return m_code_packages;
}
void OAIServiceResourceProperties::setCodePackages(const QList<OAIContainerCodePackageProperties> &code_packages) {
    m_code_packages = code_packages;
    m_code_packages_isSet = true;
}

bool OAIServiceResourceProperties::is_code_packages_Set() const{
    return m_code_packages_isSet;
}

bool OAIServiceResourceProperties::is_code_packages_Valid() const{
    return m_code_packages_isValid;
}

OAIDiagnosticsRef OAIServiceResourceProperties::getDiagnostics() const {
    return m_diagnostics;
}
void OAIServiceResourceProperties::setDiagnostics(const OAIDiagnosticsRef &diagnostics) {
    m_diagnostics = diagnostics;
    m_diagnostics_isSet = true;
}

bool OAIServiceResourceProperties::is_diagnostics_Set() const{
    return m_diagnostics_isSet;
}

bool OAIServiceResourceProperties::is_diagnostics_Valid() const{
    return m_diagnostics_isValid;
}

QList<OAINetworkRef> OAIServiceResourceProperties::getNetworkRefs() const {
    return m_network_refs;
}
void OAIServiceResourceProperties::setNetworkRefs(const QList<OAINetworkRef> &network_refs) {
    m_network_refs = network_refs;
    m_network_refs_isSet = true;
}

bool OAIServiceResourceProperties::is_network_refs_Set() const{
    return m_network_refs_isSet;
}

bool OAIServiceResourceProperties::is_network_refs_Valid() const{
    return m_network_refs_isValid;
}

OAIOperatingSystemType OAIServiceResourceProperties::getOsType() const {
    return m_os_type;
}
void OAIServiceResourceProperties::setOsType(const OAIOperatingSystemType &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIServiceResourceProperties::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIServiceResourceProperties::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QList<OAIAutoScalingPolicy> OAIServiceResourceProperties::getAutoScalingPolicies() const {
    return m_auto_scaling_policies;
}
void OAIServiceResourceProperties::setAutoScalingPolicies(const QList<OAIAutoScalingPolicy> &auto_scaling_policies) {
    m_auto_scaling_policies = auto_scaling_policies;
    m_auto_scaling_policies_isSet = true;
}

bool OAIServiceResourceProperties::is_auto_scaling_policies_Set() const{
    return m_auto_scaling_policies_isSet;
}

bool OAIServiceResourceProperties::is_auto_scaling_policies_Valid() const{
    return m_auto_scaling_policies_isValid;
}

QString OAIServiceResourceProperties::getDescription() const {
    return m_description;
}
void OAIServiceResourceProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceResourceProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceResourceProperties::is_description_Valid() const{
    return m_description_isValid;
}

OAIHealthState OAIServiceResourceProperties::getHealthState() const {
    return m_health_state;
}
void OAIServiceResourceProperties::setHealthState(const OAIHealthState &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIServiceResourceProperties::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIServiceResourceProperties::is_health_state_Valid() const{
    return m_health_state_isValid;
}

qint32 OAIServiceResourceProperties::getReplicaCount() const {
    return m_replica_count;
}
void OAIServiceResourceProperties::setReplicaCount(const qint32 &replica_count) {
    m_replica_count = replica_count;
    m_replica_count_isSet = true;
}

bool OAIServiceResourceProperties::is_replica_count_Set() const{
    return m_replica_count_isSet;
}

bool OAIServiceResourceProperties::is_replica_count_Valid() const{
    return m_replica_count_isValid;
}

OAIResourceStatus OAIServiceResourceProperties::getStatus() const {
    return m_status;
}
void OAIServiceResourceProperties::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServiceResourceProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServiceResourceProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIServiceResourceProperties::getStatusDetails() const {
    return m_status_details;
}
void OAIServiceResourceProperties::setStatusDetails(const QString &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIServiceResourceProperties::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIServiceResourceProperties::is_status_details_Valid() const{
    return m_status_details_isValid;
}

QString OAIServiceResourceProperties::getUnhealthyEvaluation() const {
    return m_unhealthy_evaluation;
}
void OAIServiceResourceProperties::setUnhealthyEvaluation(const QString &unhealthy_evaluation) {
    m_unhealthy_evaluation = unhealthy_evaluation;
    m_unhealthy_evaluation_isSet = true;
}

bool OAIServiceResourceProperties::is_unhealthy_evaluation_Set() const{
    return m_unhealthy_evaluation_isSet;
}

bool OAIServiceResourceProperties::is_unhealthy_evaluation_Valid() const{
    return m_unhealthy_evaluation_isValid;
}

bool OAIServiceResourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagnostics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_evaluation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceResourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_packages_isValid && m_os_type_isValid && true;
}

} // namespace OpenAPI
