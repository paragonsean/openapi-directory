/*
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.GatewayResourceDescription;
import org.openapitools.client.model.GatewayResourceDescriptionList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GatewaysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GatewaysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GatewaysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gatewayCreate
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param gatewayResourceName The identity of the gateway. (required)
     * @param gatewayResourceDescription Description for creating a Gateway resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateCall(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName, GatewayResourceDescription gatewayResourceDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayResourceDescription;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/gateways/{gatewayResourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "gatewayResourceName" + "}", localVarApiClient.escapeString(gatewayResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName, GatewayResourceDescription gatewayResourceDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gatewayCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gatewayCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gatewayCreate(Async)");
        }

        // verify the required parameter 'gatewayResourceName' is set
        if (gatewayResourceName == null) {
            throw new ApiException("Missing the required parameter 'gatewayResourceName' when calling gatewayCreate(Async)");
        }

        // verify the required parameter 'gatewayResourceDescription' is set
        if (gatewayResourceDescription == null) {
            throw new ApiException("Missing the required parameter 'gatewayResourceDescription' when calling gatewayCreate(Async)");
        }

        return gatewayCreateCall(subscriptionId, apiVersion, resourceGroupName, gatewayResourceName, gatewayResourceDescription, _callback);

    }

    /**
     * Creates or updates a gateway resource.
     * Creates a gateway resource with the specified name, description and properties. If a gateway resource with the same name exists, then it is updated with the specified description and properties. Use gateway resources to create a gateway for public connectivity for services within your application.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param gatewayResourceName The identity of the gateway. (required)
     * @param gatewayResourceDescription Description for creating a Gateway resource. (required)
     * @return GatewayResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GatewayResourceDescription gatewayCreate(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName, GatewayResourceDescription gatewayResourceDescription) throws ApiException {
        ApiResponse<GatewayResourceDescription> localVarResp = gatewayCreateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, gatewayResourceName, gatewayResourceDescription);
        return localVarResp.getData();
    }

    /**
     * Creates or updates a gateway resource.
     * Creates a gateway resource with the specified name, description and properties. If a gateway resource with the same name exists, then it is updated with the specified description and properties. Use gateway resources to create a gateway for public connectivity for services within your application.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param gatewayResourceName The identity of the gateway. (required)
     * @param gatewayResourceDescription Description for creating a Gateway resource. (required)
     * @return ApiResponse&lt;GatewayResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayResourceDescription> gatewayCreateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName, GatewayResourceDescription gatewayResourceDescription) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, gatewayResourceName, gatewayResourceDescription, null);
        Type localVarReturnType = new TypeToken<GatewayResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates a gateway resource. (asynchronously)
     * Creates a gateway resource with the specified name, description and properties. If a gateway resource with the same name exists, then it is updated with the specified description and properties. Use gateway resources to create a gateway for public connectivity for services within your application.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param gatewayResourceName The identity of the gateway. (required)
     * @param gatewayResourceDescription Description for creating a Gateway resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName, GatewayResourceDescription gatewayResourceDescription, final ApiCallback<GatewayResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, gatewayResourceName, gatewayResourceDescription, _callback);
        Type localVarReturnType = new TypeToken<GatewayResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayDelete
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param gatewayResourceName The identity of the gateway. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified gateway was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteCall(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/gateways/{gatewayResourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "gatewayResourceName" + "}", localVarApiClient.escapeString(gatewayResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayDeleteValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gatewayDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gatewayDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gatewayDelete(Async)");
        }

        // verify the required parameter 'gatewayResourceName' is set
        if (gatewayResourceName == null) {
            throw new ApiException("Missing the required parameter 'gatewayResourceName' when calling gatewayDelete(Async)");
        }

        return gatewayDeleteCall(subscriptionId, apiVersion, resourceGroupName, gatewayResourceName, _callback);

    }

    /**
     * Deletes the gateway resource.
     * Deletes the gateway resource identified by the name.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param gatewayResourceName The identity of the gateway. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified gateway was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void gatewayDelete(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName) throws ApiException {
        gatewayDeleteWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, gatewayResourceName);
    }

    /**
     * Deletes the gateway resource.
     * Deletes the gateway resource identified by the name.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param gatewayResourceName The identity of the gateway. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified gateway was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gatewayDeleteWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName) throws ApiException {
        okhttp3.Call localVarCall = gatewayDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, gatewayResourceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the gateway resource. (asynchronously)
     * Deletes the gateway resource identified by the name.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param gatewayResourceName The identity of the gateway. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified gateway was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteAsync(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, gatewayResourceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGet
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param gatewayResourceName The identity of the gateway. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetCall(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/gateways/{gatewayResourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "gatewayResourceName" + "}", localVarApiClient.escapeString(gatewayResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gatewayGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gatewayGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gatewayGet(Async)");
        }

        // verify the required parameter 'gatewayResourceName' is set
        if (gatewayResourceName == null) {
            throw new ApiException("Missing the required parameter 'gatewayResourceName' when calling gatewayGet(Async)");
        }

        return gatewayGetCall(subscriptionId, apiVersion, resourceGroupName, gatewayResourceName, _callback);

    }

    /**
     * Gets the gateway resource with the given name.
     * Gets the information about the gateway resource with the given name. The information include the description and other properties of the gateway.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param gatewayResourceName The identity of the gateway. (required)
     * @return GatewayResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GatewayResourceDescription gatewayGet(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName) throws ApiException {
        ApiResponse<GatewayResourceDescription> localVarResp = gatewayGetWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, gatewayResourceName);
        return localVarResp.getData();
    }

    /**
     * Gets the gateway resource with the given name.
     * Gets the information about the gateway resource with the given name. The information include the description and other properties of the gateway.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param gatewayResourceName The identity of the gateway. (required)
     * @return ApiResponse&lt;GatewayResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayResourceDescription> gatewayGetWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, gatewayResourceName, null);
        Type localVarReturnType = new TypeToken<GatewayResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the gateway resource with the given name. (asynchronously)
     * Gets the information about the gateway resource with the given name. The information include the description and other properties of the gateway.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param gatewayResourceName The identity of the gateway. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetAsync(String subscriptionId, String apiVersion, String resourceGroupName, String gatewayResourceName, final ApiCallback<GatewayResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, gatewayResourceName, _callback);
        Type localVarReturnType = new TypeToken<GatewayResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayListByResourceGroup
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListByResourceGroupCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/gateways"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayListByResourceGroupValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gatewayListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gatewayListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gatewayListByResourceGroup(Async)");
        }

        return gatewayListByResourceGroupCall(subscriptionId, apiVersion, resourceGroupName, _callback);

    }

    /**
     * Gets all the gateway resources in a given resource group.
     * Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @return GatewayResourceDescriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GatewayResourceDescriptionList gatewayListByResourceGroup(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        ApiResponse<GatewayResourceDescriptionList> localVarResp = gatewayListByResourceGroupWithHttpInfo(subscriptionId, apiVersion, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * Gets all the gateway resources in a given resource group.
     * Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @return ApiResponse&lt;GatewayResourceDescriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayResourceDescriptionList> gatewayListByResourceGroupWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = gatewayListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<GatewayResourceDescriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the gateway resources in a given resource group. (asynchronously)
     * Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListByResourceGroupAsync(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback<GatewayResourceDescriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<GatewayResourceDescriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayListBySubscription
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListBySubscriptionCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/gateways"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gatewayListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gatewayListBySubscription(Async)");
        }

        return gatewayListBySubscriptionCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets all the gateway resources in a given subscription.
     * Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the gateway.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @return GatewayResourceDescriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GatewayResourceDescriptionList gatewayListBySubscription(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<GatewayResourceDescriptionList> localVarResp = gatewayListBySubscriptionWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all the gateway resources in a given subscription.
     * Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the gateway.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @return ApiResponse&lt;GatewayResourceDescriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayResourceDescriptionList> gatewayListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = gatewayListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<GatewayResourceDescriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the gateway resources in a given subscription. (asynchronously)
     * Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the gateway.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListBySubscriptionAsync(String subscriptionId, String apiVersion, final ApiCallback<GatewayResourceDescriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GatewayResourceDescriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
