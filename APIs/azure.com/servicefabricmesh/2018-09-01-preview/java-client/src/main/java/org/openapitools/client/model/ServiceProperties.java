/*
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoScalingPolicy;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.ResourceStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes properties of a service resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:22.850379-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceProperties {
  public static final String SERIALIZED_NAME_AUTO_SCALING_POLICIES = "autoScalingPolicies";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALING_POLICIES)
  private List<AutoScalingPolicy> autoScalingPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HEALTH_STATE = "healthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthState healthState;

  public static final String SERIALIZED_NAME_REPLICA_COUNT = "replicaCount";
  @SerializedName(SERIALIZED_NAME_REPLICA_COUNT)
  private Integer replicaCount;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ResourceStatus status;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "statusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private String statusDetails;

  public static final String SERIALIZED_NAME_UNHEALTHY_EVALUATION = "unhealthyEvaluation";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_EVALUATION)
  private String unhealthyEvaluation;

  public ServiceProperties() {
  }

  public ServiceProperties(
     String statusDetails, 
     String unhealthyEvaluation
  ) {
    this();
    this.statusDetails = statusDetails;
    this.unhealthyEvaluation = unhealthyEvaluation;
  }

  public ServiceProperties autoScalingPolicies(List<AutoScalingPolicy> autoScalingPolicies) {
    this.autoScalingPolicies = autoScalingPolicies;
    return this;
  }

  public ServiceProperties addAutoScalingPoliciesItem(AutoScalingPolicy autoScalingPoliciesItem) {
    if (this.autoScalingPolicies == null) {
      this.autoScalingPolicies = new ArrayList<>();
    }
    this.autoScalingPolicies.add(autoScalingPoliciesItem);
    return this;
  }

  /**
   * Auto scaling policies
   * @return autoScalingPolicies
   */
  @javax.annotation.Nullable
  public List<AutoScalingPolicy> getAutoScalingPolicies() {
    return autoScalingPolicies;
  }

  public void setAutoScalingPolicies(List<AutoScalingPolicy> autoScalingPolicies) {
    this.autoScalingPolicies = autoScalingPolicies;
  }


  public ServiceProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User readable description of the service.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ServiceProperties healthState(HealthState healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Get healthState
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthState getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthState healthState) {
    this.healthState = healthState;
  }


  public ServiceProperties replicaCount(Integer replicaCount) {
    this.replicaCount = replicaCount;
    return this;
  }

  /**
   * The number of replicas of the service to create. Defaults to 1 if not specified.
   * @return replicaCount
   */
  @javax.annotation.Nullable
  public Integer getReplicaCount() {
    return replicaCount;
  }

  public void setReplicaCount(Integer replicaCount) {
    this.replicaCount = replicaCount;
  }


  public ServiceProperties status(ResourceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ResourceStatus getStatus() {
    return status;
  }

  public void setStatus(ResourceStatus status) {
    this.status = status;
  }


  /**
   * Gives additional information about the current status of the service.
   * @return statusDetails
   */
  @javax.annotation.Nullable
  public String getStatusDetails() {
    return statusDetails;
  }



  /**
   * When the service&#39;s health state is not &#39;Ok&#39;, this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy.
   * @return unhealthyEvaluation
   */
  @javax.annotation.Nullable
  public String getUnhealthyEvaluation() {
    return unhealthyEvaluation;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceProperties serviceProperties = (ServiceProperties) o;
    return Objects.equals(this.autoScalingPolicies, serviceProperties.autoScalingPolicies) &&
        Objects.equals(this.description, serviceProperties.description) &&
        Objects.equals(this.healthState, serviceProperties.healthState) &&
        Objects.equals(this.replicaCount, serviceProperties.replicaCount) &&
        Objects.equals(this.status, serviceProperties.status) &&
        Objects.equals(this.statusDetails, serviceProperties.statusDetails) &&
        Objects.equals(this.unhealthyEvaluation, serviceProperties.unhealthyEvaluation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoScalingPolicies, description, healthState, replicaCount, status, statusDetails, unhealthyEvaluation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceProperties {\n");
    sb.append("    autoScalingPolicies: ").append(toIndentedString(autoScalingPolicies)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    replicaCount: ").append(toIndentedString(replicaCount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("    unhealthyEvaluation: ").append(toIndentedString(unhealthyEvaluation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoScalingPolicies");
    openapiFields.add("description");
    openapiFields.add("healthState");
    openapiFields.add("replicaCount");
    openapiFields.add("status");
    openapiFields.add("statusDetails");
    openapiFields.add("unhealthyEvaluation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceProperties is not found in the empty JSON string", ServiceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("autoScalingPolicies") != null && !jsonObj.get("autoScalingPolicies").isJsonNull()) {
        JsonArray jsonArrayautoScalingPolicies = jsonObj.getAsJsonArray("autoScalingPolicies");
        if (jsonArrayautoScalingPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("autoScalingPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `autoScalingPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("autoScalingPolicies").toString()));
          }

          // validate the optional field `autoScalingPolicies` (array)
          for (int i = 0; i < jsonArrayautoScalingPolicies.size(); i++) {
            AutoScalingPolicy.validateJsonElement(jsonArrayautoScalingPolicies.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `healthState`
      if (jsonObj.get("healthState") != null && !jsonObj.get("healthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("healthState"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ResourceStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("statusDetails") != null && !jsonObj.get("statusDetails").isJsonNull()) && !jsonObj.get("statusDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusDetails").toString()));
      }
      if ((jsonObj.get("unhealthyEvaluation") != null && !jsonObj.get("unhealthyEvaluation").isJsonNull()) && !jsonObj.get("unhealthyEvaluation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unhealthyEvaluation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unhealthyEvaluation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceProperties>() {
           @Override
           public void write(JsonWriter out, ServiceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceProperties
   * @throws IOException if the JSON string is invalid with respect to ServiceProperties
   */
  public static ServiceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceProperties.class);
  }

  /**
   * Convert an instance of ServiceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

