/*
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.SecretValue;
import org.openapitools.client.model.SecretValueResourceDescription;
import org.openapitools.client.model.SecretValueResourceDescriptionList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecretValuesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecretValuesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecretValuesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for secretValueCreate
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @param secretValueResourceDescription Description for creating a value of a secret resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secretValueCreateCall(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, SecretValueResourceDescription secretValueResourceDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = secretValueResourceDescription;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values/{secretValueResourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "secretResourceName" + "}", localVarApiClient.escapeString(secretResourceName.toString()))
            .replace("{" + "secretValueResourceName" + "}", localVarApiClient.escapeString(secretValueResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secretValueCreateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, SecretValueResourceDescription secretValueResourceDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling secretValueCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling secretValueCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling secretValueCreate(Async)");
        }

        // verify the required parameter 'secretResourceName' is set
        if (secretResourceName == null) {
            throw new ApiException("Missing the required parameter 'secretResourceName' when calling secretValueCreate(Async)");
        }

        // verify the required parameter 'secretValueResourceName' is set
        if (secretValueResourceName == null) {
            throw new ApiException("Missing the required parameter 'secretValueResourceName' when calling secretValueCreate(Async)");
        }

        // verify the required parameter 'secretValueResourceDescription' is set
        if (secretValueResourceDescription == null) {
            throw new ApiException("Missing the required parameter 'secretValueResourceDescription' when calling secretValueCreate(Async)");
        }

        return secretValueCreateCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName, secretValueResourceDescription, _callback);

    }

    /**
     * Adds the specified value as a new version of the specified secret resource.
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @param secretValueResourceDescription Description for creating a value of a secret resource. (required)
     * @return SecretValueResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SecretValueResourceDescription secretValueCreate(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, SecretValueResourceDescription secretValueResourceDescription) throws ApiException {
        ApiResponse<SecretValueResourceDescription> localVarResp = secretValueCreateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName, secretValueResourceDescription);
        return localVarResp.getData();
    }

    /**
     * Adds the specified value as a new version of the specified secret resource.
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @param secretValueResourceDescription Description for creating a value of a secret resource. (required)
     * @return ApiResponse&lt;SecretValueResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecretValueResourceDescription> secretValueCreateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, SecretValueResourceDescription secretValueResourceDescription) throws ApiException {
        okhttp3.Call localVarCall = secretValueCreateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName, secretValueResourceDescription, null);
        Type localVarReturnType = new TypeToken<SecretValueResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds the specified value as a new version of the specified secret resource. (asynchronously)
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @param secretValueResourceDescription Description for creating a value of a secret resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secretValueCreateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, SecretValueResourceDescription secretValueResourceDescription, final ApiCallback<SecretValueResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = secretValueCreateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName, secretValueResourceDescription, _callback);
        Type localVarReturnType = new TypeToken<SecretValueResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secretValueDelete
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified named secret value was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secretValueDeleteCall(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values/{secretValueResourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "secretResourceName" + "}", localVarApiClient.escapeString(secretResourceName.toString()))
            .replace("{" + "secretValueResourceName" + "}", localVarApiClient.escapeString(secretValueResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secretValueDeleteValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling secretValueDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling secretValueDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling secretValueDelete(Async)");
        }

        // verify the required parameter 'secretResourceName' is set
        if (secretResourceName == null) {
            throw new ApiException("Missing the required parameter 'secretResourceName' when calling secretValueDelete(Async)");
        }

        // verify the required parameter 'secretValueResourceName' is set
        if (secretValueResourceName == null) {
            throw new ApiException("Missing the required parameter 'secretValueResourceName' when calling secretValueDelete(Async)");
        }

        return secretValueDeleteCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName, _callback);

    }

    /**
     * Deletes the specified  value of the named secret resource.
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified named secret value was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void secretValueDelete(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName) throws ApiException {
        secretValueDeleteWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName);
    }

    /**
     * Deletes the specified  value of the named secret resource.
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified named secret value was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> secretValueDeleteWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName) throws ApiException {
        okhttp3.Call localVarCall = secretValueDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the specified  value of the named secret resource. (asynchronously)
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified named secret value was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secretValueDeleteAsync(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = secretValueDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for secretValueGet
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secretValueGetCall(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values/{secretValueResourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "secretResourceName" + "}", localVarApiClient.escapeString(secretResourceName.toString()))
            .replace("{" + "secretValueResourceName" + "}", localVarApiClient.escapeString(secretValueResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secretValueGetValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling secretValueGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling secretValueGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling secretValueGet(Async)");
        }

        // verify the required parameter 'secretResourceName' is set
        if (secretResourceName == null) {
            throw new ApiException("Missing the required parameter 'secretResourceName' when calling secretValueGet(Async)");
        }

        // verify the required parameter 'secretValueResourceName' is set
        if (secretValueResourceName == null) {
            throw new ApiException("Missing the required parameter 'secretValueResourceName' when calling secretValueGet(Async)");
        }

        return secretValueGetCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName, _callback);

    }

    /**
     * Gets the specified secret value resource.
     * Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @return SecretValueResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SecretValueResourceDescription secretValueGet(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName) throws ApiException {
        ApiResponse<SecretValueResourceDescription> localVarResp = secretValueGetWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName);
        return localVarResp.getData();
    }

    /**
     * Gets the specified secret value resource.
     * Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @return ApiResponse&lt;SecretValueResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecretValueResourceDescription> secretValueGetWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName) throws ApiException {
        okhttp3.Call localVarCall = secretValueGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName, null);
        Type localVarReturnType = new TypeToken<SecretValueResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the specified secret value resource. (asynchronously)
     * Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secretValueGetAsync(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, final ApiCallback<SecretValueResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = secretValueGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName, _callback);
        Type localVarReturnType = new TypeToken<SecretValueResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secretValueList
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secretValueListCall(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "secretResourceName" + "}", localVarApiClient.escapeString(secretResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secretValueListValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling secretValueList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling secretValueList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling secretValueList(Async)");
        }

        // verify the required parameter 'secretResourceName' is set
        if (secretResourceName == null) {
            throw new ApiException("Missing the required parameter 'secretResourceName' when calling secretValueList(Async)");
        }

        return secretValueListCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, _callback);

    }

    /**
     * List names of all values of the specified secret resource.
     * Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @return SecretValueResourceDescriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SecretValueResourceDescriptionList secretValueList(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName) throws ApiException {
        ApiResponse<SecretValueResourceDescriptionList> localVarResp = secretValueListWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, secretResourceName);
        return localVarResp.getData();
    }

    /**
     * List names of all values of the specified secret resource.
     * Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @return ApiResponse&lt;SecretValueResourceDescriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecretValueResourceDescriptionList> secretValueListWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName) throws ApiException {
        okhttp3.Call localVarCall = secretValueListValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, null);
        Type localVarReturnType = new TypeToken<SecretValueResourceDescriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List names of all values of the specified secret resource. (asynchronously)
     * Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secretValueListAsync(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, final ApiCallback<SecretValueResourceDescriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = secretValueListValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, _callback);
        Type localVarReturnType = new TypeToken<SecretValueResourceDescriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secretValueListValue
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secretValueListValueCall(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values/{secretValueResourceName}/list_value"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "secretResourceName" + "}", localVarApiClient.escapeString(secretResourceName.toString()))
            .replace("{" + "secretValueResourceName" + "}", localVarApiClient.escapeString(secretValueResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secretValueListValueValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling secretValueListValue(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling secretValueListValue(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling secretValueListValue(Async)");
        }

        // verify the required parameter 'secretResourceName' is set
        if (secretResourceName == null) {
            throw new ApiException("Missing the required parameter 'secretResourceName' when calling secretValueListValue(Async)");
        }

        // verify the required parameter 'secretValueResourceName' is set
        if (secretValueResourceName == null) {
            throw new ApiException("Missing the required parameter 'secretValueResourceName' when calling secretValueListValue(Async)");
        }

        return secretValueListValueCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName, _callback);

    }

    /**
     * Lists the specified value of the secret resource.
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @return SecretValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SecretValue secretValueListValue(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName) throws ApiException {
        ApiResponse<SecretValue> localVarResp = secretValueListValueWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName);
        return localVarResp.getData();
    }

    /**
     * Lists the specified value of the secret resource.
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @return ApiResponse&lt;SecretValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecretValue> secretValueListValueWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName) throws ApiException {
        okhttp3.Call localVarCall = secretValueListValueValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName, null);
        Type localVarReturnType = new TypeToken<SecretValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists the specified value of the secret resource. (asynchronously)
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     * @param subscriptionId The customer subscription identifier (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#x60;2018-09-01-preview&#x60;. (required)
     * @param resourceGroupName Azure resource group name (required)
     * @param secretResourceName The name of the secret resource. (required)
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier for the value. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secretValueListValueAsync(String subscriptionId, String apiVersion, String resourceGroupName, String secretResourceName, String secretValueResourceName, final ApiCallback<SecretValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = secretValueListValueValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, secretResourceName, secretValueResourceName, _callback);
        Type localVarReturnType = new TypeToken<SecretValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
