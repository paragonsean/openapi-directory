/*
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiagnosticsDescription;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.ResourceStatus;
import org.openapitools.client.model.ServiceResourceDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type describes properties of an application resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:22.850379-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationResourceProperties {
  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_DEBUG_PARAMS = "debugParams";
  @SerializedName(SERIALIZED_NAME_DEBUG_PARAMS)
  private String debugParams;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DIAGNOSTICS = "diagnostics";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS)
  private DiagnosticsDescription diagnostics;

  public static final String SERIALIZED_NAME_HEALTH_STATE = "healthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthState healthState;

  public static final String SERIALIZED_NAME_SERVICE_NAMES = "serviceNames";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAMES)
  private List<String> serviceNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<ServiceResourceDescription> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ResourceStatus status;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "statusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private String statusDetails;

  public static final String SERIALIZED_NAME_UNHEALTHY_EVALUATION = "unhealthyEvaluation";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_EVALUATION)
  private String unhealthyEvaluation;

  public ApplicationResourceProperties() {
  }

  public ApplicationResourceProperties(
     String provisioningState, 
     List<String> serviceNames, 
     String statusDetails, 
     String unhealthyEvaluation
  ) {
    this();
    this.provisioningState = provisioningState;
    this.serviceNames = serviceNames;
    this.statusDetails = statusDetails;
    this.unhealthyEvaluation = unhealthyEvaluation;
  }

  /**
   * State of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public ApplicationResourceProperties debugParams(String debugParams) {
    this.debugParams = debugParams;
    return this;
  }

  /**
   * Internal - used by Visual Studio to setup the debugging session on the local development environment.
   * @return debugParams
   */
  @javax.annotation.Nullable
  public String getDebugParams() {
    return debugParams;
  }

  public void setDebugParams(String debugParams) {
    this.debugParams = debugParams;
  }


  public ApplicationResourceProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User readable description of the application.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApplicationResourceProperties diagnostics(DiagnosticsDescription diagnostics) {
    this.diagnostics = diagnostics;
    return this;
  }

  /**
   * Get diagnostics
   * @return diagnostics
   */
  @javax.annotation.Nullable
  public DiagnosticsDescription getDiagnostics() {
    return diagnostics;
  }

  public void setDiagnostics(DiagnosticsDescription diagnostics) {
    this.diagnostics = diagnostics;
  }


  public ApplicationResourceProperties healthState(HealthState healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Get healthState
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthState getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthState healthState) {
    this.healthState = healthState;
  }


  /**
   * Names of the services in the application.
   * @return serviceNames
   */
  @javax.annotation.Nullable
  public List<String> getServiceNames() {
    return serviceNames;
  }



  public ApplicationResourceProperties services(List<ServiceResourceDescription> services) {
    this.services = services;
    return this;
  }

  public ApplicationResourceProperties addServicesItem(ServiceResourceDescription servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

  /**
   * Describes the services in the application. This property is used to create or modify services of the application. On get only the name of the service is returned. The service description can be obtained by querying for the service resource.
   * @return services
   */
  @javax.annotation.Nullable
  public List<ServiceResourceDescription> getServices() {
    return services;
  }

  public void setServices(List<ServiceResourceDescription> services) {
    this.services = services;
  }


  public ApplicationResourceProperties status(ResourceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ResourceStatus getStatus() {
    return status;
  }

  public void setStatus(ResourceStatus status) {
    this.status = status;
  }


  /**
   * Gives additional information about the current status of the application.
   * @return statusDetails
   */
  @javax.annotation.Nullable
  public String getStatusDetails() {
    return statusDetails;
  }



  /**
   * When the application&#39;s health state is not &#39;Ok&#39;, this additional details from service fabric Health Manager for the user to know why the application is marked unhealthy.
   * @return unhealthyEvaluation
   */
  @javax.annotation.Nullable
  public String getUnhealthyEvaluation() {
    return unhealthyEvaluation;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationResourceProperties applicationResourceProperties = (ApplicationResourceProperties) o;
    return Objects.equals(this.provisioningState, applicationResourceProperties.provisioningState) &&
        Objects.equals(this.debugParams, applicationResourceProperties.debugParams) &&
        Objects.equals(this.description, applicationResourceProperties.description) &&
        Objects.equals(this.diagnostics, applicationResourceProperties.diagnostics) &&
        Objects.equals(this.healthState, applicationResourceProperties.healthState) &&
        Objects.equals(this.serviceNames, applicationResourceProperties.serviceNames) &&
        Objects.equals(this.services, applicationResourceProperties.services) &&
        Objects.equals(this.status, applicationResourceProperties.status) &&
        Objects.equals(this.statusDetails, applicationResourceProperties.statusDetails) &&
        Objects.equals(this.unhealthyEvaluation, applicationResourceProperties.unhealthyEvaluation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provisioningState, debugParams, description, diagnostics, healthState, serviceNames, services, status, statusDetails, unhealthyEvaluation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationResourceProperties {\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    debugParams: ").append(toIndentedString(debugParams)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    diagnostics: ").append(toIndentedString(diagnostics)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    serviceNames: ").append(toIndentedString(serviceNames)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("    unhealthyEvaluation: ").append(toIndentedString(unhealthyEvaluation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("provisioningState");
    openapiFields.add("debugParams");
    openapiFields.add("description");
    openapiFields.add("diagnostics");
    openapiFields.add("healthState");
    openapiFields.add("serviceNames");
    openapiFields.add("services");
    openapiFields.add("status");
    openapiFields.add("statusDetails");
    openapiFields.add("unhealthyEvaluation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationResourceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationResourceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationResourceProperties is not found in the empty JSON string", ApplicationResourceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationResourceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationResourceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("debugParams") != null && !jsonObj.get("debugParams").isJsonNull()) && !jsonObj.get("debugParams").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debugParams` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debugParams").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `diagnostics`
      if (jsonObj.get("diagnostics") != null && !jsonObj.get("diagnostics").isJsonNull()) {
        DiagnosticsDescription.validateJsonElement(jsonObj.get("diagnostics"));
      }
      // validate the optional field `healthState`
      if (jsonObj.get("healthState") != null && !jsonObj.get("healthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("healthState"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("serviceNames") != null && !jsonObj.get("serviceNames").isJsonNull() && !jsonObj.get("serviceNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceNames` to be an array in the JSON string but got `%s`", jsonObj.get("serviceNames").toString()));
      }
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
        if (jsonArrayservices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
          }

          // validate the optional field `services` (array)
          for (int i = 0; i < jsonArrayservices.size(); i++) {
            ServiceResourceDescription.validateJsonElement(jsonArrayservices.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ResourceStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("statusDetails") != null && !jsonObj.get("statusDetails").isJsonNull()) && !jsonObj.get("statusDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusDetails").toString()));
      }
      if ((jsonObj.get("unhealthyEvaluation") != null && !jsonObj.get("unhealthyEvaluation").isJsonNull()) && !jsonObj.get("unhealthyEvaluation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unhealthyEvaluation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unhealthyEvaluation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationResourceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationResourceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationResourceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationResourceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationResourceProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationResourceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationResourceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationResourceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationResourceProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationResourceProperties
   */
  public static ApplicationResourceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationResourceProperties.class);
  }

  /**
   * Convert an instance of ApplicationResourceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

