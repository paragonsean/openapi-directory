/*
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ResourceStatus;
import org.openapitools.client.model.VolumeProvider;
import org.openapitools.client.model.VolumeProviderParametersAzureFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes properties of a volume resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:22.850379-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeProperties {
  public static final String SERIALIZED_NAME_AZURE_FILE_PARAMETERS = "azureFileParameters";
  @SerializedName(SERIALIZED_NAME_AZURE_FILE_PARAMETERS)
  private VolumeProviderParametersAzureFile azureFileParameters;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private VolumeProvider provider;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ResourceStatus status;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "statusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private String statusDetails;

  public VolumeProperties() {
  }

  public VolumeProperties(
     String statusDetails
  ) {
    this();
    this.statusDetails = statusDetails;
  }

  public VolumeProperties azureFileParameters(VolumeProviderParametersAzureFile azureFileParameters) {
    this.azureFileParameters = azureFileParameters;
    return this;
  }

  /**
   * Get azureFileParameters
   * @return azureFileParameters
   */
  @javax.annotation.Nullable
  public VolumeProviderParametersAzureFile getAzureFileParameters() {
    return azureFileParameters;
  }

  public void setAzureFileParameters(VolumeProviderParametersAzureFile azureFileParameters) {
    this.azureFileParameters = azureFileParameters;
  }


  public VolumeProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User readable description of the volume.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public VolumeProperties provider(VolumeProvider provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nonnull
  public VolumeProvider getProvider() {
    return provider;
  }

  public void setProvider(VolumeProvider provider) {
    this.provider = provider;
  }


  public VolumeProperties status(ResourceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ResourceStatus getStatus() {
    return status;
  }

  public void setStatus(ResourceStatus status) {
    this.status = status;
  }


  /**
   * Gives additional information about the current status of the volume.
   * @return statusDetails
   */
  @javax.annotation.Nullable
  public String getStatusDetails() {
    return statusDetails;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeProperties volumeProperties = (VolumeProperties) o;
    return Objects.equals(this.azureFileParameters, volumeProperties.azureFileParameters) &&
        Objects.equals(this.description, volumeProperties.description) &&
        Objects.equals(this.provider, volumeProperties.provider) &&
        Objects.equals(this.status, volumeProperties.status) &&
        Objects.equals(this.statusDetails, volumeProperties.statusDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureFileParameters, description, provider, status, statusDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeProperties {\n");
    sb.append("    azureFileParameters: ").append(toIndentedString(azureFileParameters)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureFileParameters");
    openapiFields.add("description");
    openapiFields.add("provider");
    openapiFields.add("status");
    openapiFields.add("statusDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("provider");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeProperties is not found in the empty JSON string", VolumeProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VolumeProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `azureFileParameters`
      if (jsonObj.get("azureFileParameters") != null && !jsonObj.get("azureFileParameters").isJsonNull()) {
        VolumeProviderParametersAzureFile.validateJsonElement(jsonObj.get("azureFileParameters"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `provider`
      VolumeProvider.validateJsonElement(jsonObj.get("provider"));
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ResourceStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("statusDetails") != null && !jsonObj.get("statusDetails").isJsonNull()) && !jsonObj.get("statusDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusDetails").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeProperties>() {
           @Override
           public void write(JsonWriter out, VolumeProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeProperties
   * @throws IOException if the JSON string is invalid with respect to VolumeProperties
   */
  public static VolumeProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeProperties.class);
  }

  /**
   * Convert an instance of VolumeProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

