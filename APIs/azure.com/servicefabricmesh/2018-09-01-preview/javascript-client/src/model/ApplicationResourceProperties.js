/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationProperties from './ApplicationProperties';
import DiagnosticsDescription from './DiagnosticsDescription';
import HealthState from './HealthState';
import ProvisionedResourceProperties from './ProvisionedResourceProperties';
import ResourceStatus from './ResourceStatus';
import ServiceResourceDescription from './ServiceResourceDescription';

/**
 * The ApplicationResourceProperties model module.
 * @module model/ApplicationResourceProperties
 * @version 2018-09-01-preview
 */
class ApplicationResourceProperties {
    /**
     * Constructs a new <code>ApplicationResourceProperties</code>.
     * This type describes properties of an application resource.
     * @alias module:model/ApplicationResourceProperties
     * @implements module:model/ProvisionedResourceProperties
     * @implements module:model/ApplicationProperties
     */
    constructor() { 
        ProvisionedResourceProperties.initialize(this);ApplicationProperties.initialize(this);
        ApplicationResourceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplicationResourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationResourceProperties} obj Optional instance to populate.
     * @return {module:model/ApplicationResourceProperties} The populated <code>ApplicationResourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationResourceProperties();
            ProvisionedResourceProperties.constructFromObject(data, obj);
            ApplicationProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('debugParams')) {
                obj['debugParams'] = ApiClient.convertToType(data['debugParams'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('diagnostics')) {
                obj['diagnostics'] = DiagnosticsDescription.constructFromObject(data['diagnostics']);
            }
            if (data.hasOwnProperty('healthState')) {
                obj['healthState'] = HealthState.constructFromObject(data['healthState']);
            }
            if (data.hasOwnProperty('serviceNames')) {
                obj['serviceNames'] = ApiClient.convertToType(data['serviceNames'], ['String']);
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = ApiClient.convertToType(data['services'], [ServiceResourceDescription]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ResourceStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('statusDetails')) {
                obj['statusDetails'] = ApiClient.convertToType(data['statusDetails'], 'String');
            }
            if (data.hasOwnProperty('unhealthyEvaluation')) {
                obj['unhealthyEvaluation'] = ApiClient.convertToType(data['unhealthyEvaluation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationResourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationResourceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['debugParams'] && !(typeof data['debugParams'] === 'string' || data['debugParams'] instanceof String)) {
            throw new Error("Expected the field `debugParams` to be a primitive type in the JSON string but got " + data['debugParams']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `diagnostics`
        if (data['diagnostics']) { // data not null
          DiagnosticsDescription.validateJSON(data['diagnostics']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['serviceNames'])) {
            throw new Error("Expected the field `serviceNames` to be an array in the JSON data but got " + data['serviceNames']);
        }
        if (data['services']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['services'])) {
                throw new Error("Expected the field `services` to be an array in the JSON data but got " + data['services']);
            }
            // validate the optional field `services` (array)
            for (const item of data['services']) {
                ServiceResourceDescription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['statusDetails'] && !(typeof data['statusDetails'] === 'string' || data['statusDetails'] instanceof String)) {
            throw new Error("Expected the field `statusDetails` to be a primitive type in the JSON string but got " + data['statusDetails']);
        }
        // ensure the json data is a string
        if (data['unhealthyEvaluation'] && !(typeof data['unhealthyEvaluation'] === 'string' || data['unhealthyEvaluation'] instanceof String)) {
            throw new Error("Expected the field `unhealthyEvaluation` to be a primitive type in the JSON string but got " + data['unhealthyEvaluation']);
        }

        return true;
    }


}



/**
 * State of the resource.
 * @member {String} provisioningState
 */
ApplicationResourceProperties.prototype['provisioningState'] = undefined;

/**
 * Internal - used by Visual Studio to setup the debugging session on the local development environment.
 * @member {String} debugParams
 */
ApplicationResourceProperties.prototype['debugParams'] = undefined;

/**
 * User readable description of the application.
 * @member {String} description
 */
ApplicationResourceProperties.prototype['description'] = undefined;

/**
 * @member {module:model/DiagnosticsDescription} diagnostics
 */
ApplicationResourceProperties.prototype['diagnostics'] = undefined;

/**
 * @member {module:model/HealthState} healthState
 */
ApplicationResourceProperties.prototype['healthState'] = undefined;

/**
 * Names of the services in the application.
 * @member {Array.<String>} serviceNames
 */
ApplicationResourceProperties.prototype['serviceNames'] = undefined;

/**
 * Describes the services in the application. This property is used to create or modify services of the application. On get only the name of the service is returned. The service description can be obtained by querying for the service resource.
 * @member {Array.<module:model/ServiceResourceDescription>} services
 */
ApplicationResourceProperties.prototype['services'] = undefined;

/**
 * @member {module:model/ResourceStatus} status
 */
ApplicationResourceProperties.prototype['status'] = undefined;

/**
 * Gives additional information about the current status of the application.
 * @member {String} statusDetails
 */
ApplicationResourceProperties.prototype['statusDetails'] = undefined;

/**
 * When the application's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the application is marked unhealthy.
 * @member {String} unhealthyEvaluation
 */
ApplicationResourceProperties.prototype['unhealthyEvaluation'] = undefined;


// Implement ProvisionedResourceProperties interface:
/**
 * State of the resource.
 * @member {String} provisioningState
 */
ProvisionedResourceProperties.prototype['provisioningState'] = undefined;
// Implement ApplicationProperties interface:
/**
 * Internal - used by Visual Studio to setup the debugging session on the local development environment.
 * @member {String} debugParams
 */
ApplicationProperties.prototype['debugParams'] = undefined;
/**
 * User readable description of the application.
 * @member {String} description
 */
ApplicationProperties.prototype['description'] = undefined;
/**
 * @member {module:model/DiagnosticsDescription} diagnostics
 */
ApplicationProperties.prototype['diagnostics'] = undefined;
/**
 * @member {module:model/HealthState} healthState
 */
ApplicationProperties.prototype['healthState'] = undefined;
/**
 * Names of the services in the application.
 * @member {Array.<String>} serviceNames
 */
ApplicationProperties.prototype['serviceNames'] = undefined;
/**
 * Describes the services in the application. This property is used to create or modify services of the application. On get only the name of the service is returned. The service description can be obtained by querying for the service resource.
 * @member {Array.<module:model/ServiceResourceDescription>} services
 */
ApplicationProperties.prototype['services'] = undefined;
/**
 * @member {module:model/ResourceStatus} status
 */
ApplicationProperties.prototype['status'] = undefined;
/**
 * Gives additional information about the current status of the application.
 * @member {String} statusDetails
 */
ApplicationProperties.prototype['statusDetails'] = undefined;
/**
 * When the application's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the application is marked unhealthy.
 * @member {String} unhealthyEvaluation
 */
ApplicationProperties.prototype['unhealthyEvaluation'] = undefined;




export default ApplicationResourceProperties;

