/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GatewayProperties from './GatewayProperties';
import HttpConfig from './HttpConfig';
import NetworkRef from './NetworkRef';
import ProvisionedResourceProperties from './ProvisionedResourceProperties';
import ResourceStatus from './ResourceStatus';
import TcpConfig from './TcpConfig';

/**
 * The GatewayResourceProperties model module.
 * @module model/GatewayResourceProperties
 * @version 2018-09-01-preview
 */
class GatewayResourceProperties {
    /**
     * Constructs a new <code>GatewayResourceProperties</code>.
     * This type describes properties of a gateway resource.
     * @alias module:model/GatewayResourceProperties
     * @implements module:model/ProvisionedResourceProperties
     * @implements module:model/GatewayProperties
     * @param destinationNetwork {module:model/NetworkRef} 
     * @param sourceNetwork {module:model/NetworkRef} 
     */
    constructor(destinationNetwork, sourceNetwork) { 
        ProvisionedResourceProperties.initialize(this);GatewayProperties.initialize(this, destinationNetwork, sourceNetwork);
        GatewayResourceProperties.initialize(this, destinationNetwork, sourceNetwork);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destinationNetwork, sourceNetwork) { 
        obj['destinationNetwork'] = destinationNetwork;
        obj['sourceNetwork'] = sourceNetwork;
    }

    /**
     * Constructs a <code>GatewayResourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayResourceProperties} obj Optional instance to populate.
     * @return {module:model/GatewayResourceProperties} The populated <code>GatewayResourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GatewayResourceProperties();
            ProvisionedResourceProperties.constructFromObject(data, obj);
            GatewayProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('destinationNetwork')) {
                obj['destinationNetwork'] = NetworkRef.constructFromObject(data['destinationNetwork']);
            }
            if (data.hasOwnProperty('http')) {
                obj['http'] = ApiClient.convertToType(data['http'], [HttpConfig]);
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('sourceNetwork')) {
                obj['sourceNetwork'] = NetworkRef.constructFromObject(data['sourceNetwork']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ResourceStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('statusDetails')) {
                obj['statusDetails'] = ApiClient.convertToType(data['statusDetails'], 'String');
            }
            if (data.hasOwnProperty('tcp')) {
                obj['tcp'] = ApiClient.convertToType(data['tcp'], [TcpConfig]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GatewayResourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GatewayResourceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GatewayResourceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `destinationNetwork`
        if (data['destinationNetwork']) { // data not null
          NetworkRef.validateJSON(data['destinationNetwork']);
        }
        if (data['http']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['http'])) {
                throw new Error("Expected the field `http` to be an array in the JSON data but got " + data['http']);
            }
            // validate the optional field `http` (array)
            for (const item of data['http']) {
                HttpConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // validate the optional field `sourceNetwork`
        if (data['sourceNetwork']) { // data not null
          NetworkRef.validateJSON(data['sourceNetwork']);
        }
        // ensure the json data is a string
        if (data['statusDetails'] && !(typeof data['statusDetails'] === 'string' || data['statusDetails'] instanceof String)) {
            throw new Error("Expected the field `statusDetails` to be a primitive type in the JSON string but got " + data['statusDetails']);
        }
        if (data['tcp']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tcp'])) {
                throw new Error("Expected the field `tcp` to be an array in the JSON data but got " + data['tcp']);
            }
            // validate the optional field `tcp` (array)
            for (const item of data['tcp']) {
                TcpConfig.validateJSON(item);
            };
        }

        return true;
    }


}

GatewayResourceProperties.RequiredProperties = ["destinationNetwork", "sourceNetwork"];

/**
 * State of the resource.
 * @member {String} provisioningState
 */
GatewayResourceProperties.prototype['provisioningState'] = undefined;

/**
 * User readable description of the gateway.
 * @member {String} description
 */
GatewayResourceProperties.prototype['description'] = undefined;

/**
 * @member {module:model/NetworkRef} destinationNetwork
 */
GatewayResourceProperties.prototype['destinationNetwork'] = undefined;

/**
 * Configuration for http connectivity for this gateway.
 * @member {Array.<module:model/HttpConfig>} http
 */
GatewayResourceProperties.prototype['http'] = undefined;

/**
 * IP address of the gateway. This is populated in the response and is ignored for incoming requests.
 * @member {String} ipAddress
 */
GatewayResourceProperties.prototype['ipAddress'] = undefined;

/**
 * @member {module:model/NetworkRef} sourceNetwork
 */
GatewayResourceProperties.prototype['sourceNetwork'] = undefined;

/**
 * @member {module:model/ResourceStatus} status
 */
GatewayResourceProperties.prototype['status'] = undefined;

/**
 * Gives additional information about the current status of the gateway.
 * @member {String} statusDetails
 */
GatewayResourceProperties.prototype['statusDetails'] = undefined;

/**
 * Configuration for tcp connectivity for this gateway.
 * @member {Array.<module:model/TcpConfig>} tcp
 */
GatewayResourceProperties.prototype['tcp'] = undefined;


// Implement ProvisionedResourceProperties interface:
/**
 * State of the resource.
 * @member {String} provisioningState
 */
ProvisionedResourceProperties.prototype['provisioningState'] = undefined;
// Implement GatewayProperties interface:
/**
 * User readable description of the gateway.
 * @member {String} description
 */
GatewayProperties.prototype['description'] = undefined;
/**
 * @member {module:model/NetworkRef} destinationNetwork
 */
GatewayProperties.prototype['destinationNetwork'] = undefined;
/**
 * Configuration for http connectivity for this gateway.
 * @member {Array.<module:model/HttpConfig>} http
 */
GatewayProperties.prototype['http'] = undefined;
/**
 * IP address of the gateway. This is populated in the response and is ignored for incoming requests.
 * @member {String} ipAddress
 */
GatewayProperties.prototype['ipAddress'] = undefined;
/**
 * @member {module:model/NetworkRef} sourceNetwork
 */
GatewayProperties.prototype['sourceNetwork'] = undefined;
/**
 * @member {module:model/ResourceStatus} status
 */
GatewayProperties.prototype['status'] = undefined;
/**
 * Gives additional information about the current status of the gateway.
 * @member {String} statusDetails
 */
GatewayProperties.prototype['statusDetails'] = undefined;
/**
 * Configuration for tcp connectivity for this gateway.
 * @member {Array.<module:model/TcpConfig>} tcp
 */
GatewayProperties.prototype['tcp'] = undefined;




export default GatewayResourceProperties;

