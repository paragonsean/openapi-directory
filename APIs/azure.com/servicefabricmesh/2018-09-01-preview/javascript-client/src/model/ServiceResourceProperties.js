/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoScalingPolicy from './AutoScalingPolicy';
import ContainerCodePackageProperties from './ContainerCodePackageProperties';
import DiagnosticsRef from './DiagnosticsRef';
import HealthState from './HealthState';
import NetworkRef from './NetworkRef';
import OperatingSystemType from './OperatingSystemType';
import ProvisionedResourceProperties from './ProvisionedResourceProperties';
import ResourceStatus from './ResourceStatus';
import ServiceProperties from './ServiceProperties';
import ServiceReplicaProperties from './ServiceReplicaProperties';

/**
 * The ServiceResourceProperties model module.
 * @module model/ServiceResourceProperties
 * @version 2018-09-01-preview
 */
class ServiceResourceProperties {
    /**
     * Constructs a new <code>ServiceResourceProperties</code>.
     * This type describes properties of a service resource.
     * @alias module:model/ServiceResourceProperties
     * @implements module:model/ProvisionedResourceProperties
     * @implements module:model/ServiceReplicaProperties
     * @implements module:model/ServiceProperties
     * @param codePackages {Array.<module:model/ContainerCodePackageProperties>} Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
     * @param osType {module:model/OperatingSystemType} 
     */
    constructor(codePackages, osType) { 
        ProvisionedResourceProperties.initialize(this);ServiceReplicaProperties.initialize(this, codePackages, osType);ServiceProperties.initialize(this);
        ServiceResourceProperties.initialize(this, codePackages, osType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, codePackages, osType) { 
        obj['codePackages'] = codePackages;
        obj['osType'] = osType;
    }

    /**
     * Constructs a <code>ServiceResourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceResourceProperties} obj Optional instance to populate.
     * @return {module:model/ServiceResourceProperties} The populated <code>ServiceResourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceResourceProperties();
            ProvisionedResourceProperties.constructFromObject(data, obj);
            ServiceReplicaProperties.constructFromObject(data, obj);
            ServiceProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('codePackages')) {
                obj['codePackages'] = ApiClient.convertToType(data['codePackages'], [ContainerCodePackageProperties]);
            }
            if (data.hasOwnProperty('diagnostics')) {
                obj['diagnostics'] = DiagnosticsRef.constructFromObject(data['diagnostics']);
            }
            if (data.hasOwnProperty('networkRefs')) {
                obj['networkRefs'] = ApiClient.convertToType(data['networkRefs'], [NetworkRef]);
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = OperatingSystemType.constructFromObject(data['osType']);
            }
            if (data.hasOwnProperty('autoScalingPolicies')) {
                obj['autoScalingPolicies'] = ApiClient.convertToType(data['autoScalingPolicies'], [AutoScalingPolicy]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('healthState')) {
                obj['healthState'] = HealthState.constructFromObject(data['healthState']);
            }
            if (data.hasOwnProperty('replicaCount')) {
                obj['replicaCount'] = ApiClient.convertToType(data['replicaCount'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ResourceStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('statusDetails')) {
                obj['statusDetails'] = ApiClient.convertToType(data['statusDetails'], 'String');
            }
            if (data.hasOwnProperty('unhealthyEvaluation')) {
                obj['unhealthyEvaluation'] = ApiClient.convertToType(data['unhealthyEvaluation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceResourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceResourceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceResourceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        if (data['codePackages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['codePackages'])) {
                throw new Error("Expected the field `codePackages` to be an array in the JSON data but got " + data['codePackages']);
            }
            // validate the optional field `codePackages` (array)
            for (const item of data['codePackages']) {
                ContainerCodePackageProperties.validateJSON(item);
            };
        }
        // validate the optional field `diagnostics`
        if (data['diagnostics']) { // data not null
          DiagnosticsRef.validateJSON(data['diagnostics']);
        }
        if (data['networkRefs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networkRefs'])) {
                throw new Error("Expected the field `networkRefs` to be an array in the JSON data but got " + data['networkRefs']);
            }
            // validate the optional field `networkRefs` (array)
            for (const item of data['networkRefs']) {
                NetworkRef.validateJSON(item);
            };
        }
        if (data['autoScalingPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['autoScalingPolicies'])) {
                throw new Error("Expected the field `autoScalingPolicies` to be an array in the JSON data but got " + data['autoScalingPolicies']);
            }
            // validate the optional field `autoScalingPolicies` (array)
            for (const item of data['autoScalingPolicies']) {
                AutoScalingPolicy.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['statusDetails'] && !(typeof data['statusDetails'] === 'string' || data['statusDetails'] instanceof String)) {
            throw new Error("Expected the field `statusDetails` to be a primitive type in the JSON string but got " + data['statusDetails']);
        }
        // ensure the json data is a string
        if (data['unhealthyEvaluation'] && !(typeof data['unhealthyEvaluation'] === 'string' || data['unhealthyEvaluation'] instanceof String)) {
            throw new Error("Expected the field `unhealthyEvaluation` to be a primitive type in the JSON string but got " + data['unhealthyEvaluation']);
        }

        return true;
    }


}

ServiceResourceProperties.RequiredProperties = ["codePackages", "osType"];

/**
 * State of the resource.
 * @member {String} provisioningState
 */
ServiceResourceProperties.prototype['provisioningState'] = undefined;

/**
 * Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
 * @member {Array.<module:model/ContainerCodePackageProperties>} codePackages
 */
ServiceResourceProperties.prototype['codePackages'] = undefined;

/**
 * @member {module:model/DiagnosticsRef} diagnostics
 */
ServiceResourceProperties.prototype['diagnostics'] = undefined;

/**
 * The names of the private networks that this service needs to be part of.
 * @member {Array.<module:model/NetworkRef>} networkRefs
 */
ServiceResourceProperties.prototype['networkRefs'] = undefined;

/**
 * @member {module:model/OperatingSystemType} osType
 */
ServiceResourceProperties.prototype['osType'] = undefined;

/**
 * Auto scaling policies
 * @member {Array.<module:model/AutoScalingPolicy>} autoScalingPolicies
 */
ServiceResourceProperties.prototype['autoScalingPolicies'] = undefined;

/**
 * User readable description of the service.
 * @member {String} description
 */
ServiceResourceProperties.prototype['description'] = undefined;

/**
 * @member {module:model/HealthState} healthState
 */
ServiceResourceProperties.prototype['healthState'] = undefined;

/**
 * The number of replicas of the service to create. Defaults to 1 if not specified.
 * @member {Number} replicaCount
 */
ServiceResourceProperties.prototype['replicaCount'] = undefined;

/**
 * @member {module:model/ResourceStatus} status
 */
ServiceResourceProperties.prototype['status'] = undefined;

/**
 * Gives additional information about the current status of the service.
 * @member {String} statusDetails
 */
ServiceResourceProperties.prototype['statusDetails'] = undefined;

/**
 * When the service's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy.
 * @member {String} unhealthyEvaluation
 */
ServiceResourceProperties.prototype['unhealthyEvaluation'] = undefined;


// Implement ProvisionedResourceProperties interface:
/**
 * State of the resource.
 * @member {String} provisioningState
 */
ProvisionedResourceProperties.prototype['provisioningState'] = undefined;
// Implement ServiceReplicaProperties interface:
/**
 * Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
 * @member {Array.<module:model/ContainerCodePackageProperties>} codePackages
 */
ServiceReplicaProperties.prototype['codePackages'] = undefined;
/**
 * @member {module:model/DiagnosticsRef} diagnostics
 */
ServiceReplicaProperties.prototype['diagnostics'] = undefined;
/**
 * The names of the private networks that this service needs to be part of.
 * @member {Array.<module:model/NetworkRef>} networkRefs
 */
ServiceReplicaProperties.prototype['networkRefs'] = undefined;
/**
 * @member {module:model/OperatingSystemType} osType
 */
ServiceReplicaProperties.prototype['osType'] = undefined;
// Implement ServiceProperties interface:
/**
 * Auto scaling policies
 * @member {Array.<module:model/AutoScalingPolicy>} autoScalingPolicies
 */
ServiceProperties.prototype['autoScalingPolicies'] = undefined;
/**
 * User readable description of the service.
 * @member {String} description
 */
ServiceProperties.prototype['description'] = undefined;
/**
 * @member {module:model/HealthState} healthState
 */
ServiceProperties.prototype['healthState'] = undefined;
/**
 * The number of replicas of the service to create. Defaults to 1 if not specified.
 * @member {Number} replicaCount
 */
ServiceProperties.prototype['replicaCount'] = undefined;
/**
 * @member {module:model/ResourceStatus} status
 */
ServiceProperties.prototype['status'] = undefined;
/**
 * Gives additional information about the current status of the service.
 * @member {String} statusDetails
 */
ServiceProperties.prototype['statusDetails'] = undefined;
/**
 * When the service's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy.
 * @member {String} unhealthyEvaluation
 */
ServiceProperties.prototype['unhealthyEvaluation'] = undefined;




export default ServiceResourceProperties;

