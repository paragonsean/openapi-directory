/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HttpRouteMatchHeader from './HttpRouteMatchHeader';
import HttpRouteMatchPath from './HttpRouteMatchPath';

/**
 * The HttpRouteMatchRule model module.
 * @module model/HttpRouteMatchRule
 * @version 2018-09-01-preview
 */
class HttpRouteMatchRule {
    /**
     * Constructs a new <code>HttpRouteMatchRule</code>.
     * Describes a rule for http route matching.
     * @alias module:model/HttpRouteMatchRule
     * @param path {module:model/HttpRouteMatchPath} 
     */
    constructor(path) { 
        
        HttpRouteMatchRule.initialize(this, path);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, path) { 
        obj['path'] = path;
    }

    /**
     * Constructs a <code>HttpRouteMatchRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpRouteMatchRule} obj Optional instance to populate.
     * @return {module:model/HttpRouteMatchRule} The populated <code>HttpRouteMatchRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpRouteMatchRule();

            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], [HttpRouteMatchHeader]);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = HttpRouteMatchPath.constructFromObject(data['path']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpRouteMatchRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpRouteMatchRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HttpRouteMatchRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['headers'])) {
                throw new Error("Expected the field `headers` to be an array in the JSON data but got " + data['headers']);
            }
            // validate the optional field `headers` (array)
            for (const item of data['headers']) {
                HttpRouteMatchHeader.validateJSON(item);
            };
        }
        // validate the optional field `path`
        if (data['path']) { // data not null
          HttpRouteMatchPath.validateJSON(data['path']);
        }

        return true;
    }


}

HttpRouteMatchRule.RequiredProperties = ["path"];

/**
 * headers and their values to match in request.
 * @member {Array.<module:model/HttpRouteMatchHeader>} headers
 */
HttpRouteMatchRule.prototype['headers'] = undefined;

/**
 * @member {module:model/HttpRouteMatchPath} path
 */
HttpRouteMatchRule.prototype['path'] = undefined;






export default HttpRouteMatchRule;

