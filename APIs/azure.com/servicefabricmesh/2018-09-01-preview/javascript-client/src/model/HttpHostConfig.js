/**
 * SeaBreezeManagementClient
 * APIs to deploy and manage resources to SeaBreeze.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HttpRouteConfig from './HttpRouteConfig';

/**
 * The HttpHostConfig model module.
 * @module model/HttpHostConfig
 * @version 2018-09-01-preview
 */
class HttpHostConfig {
    /**
     * Constructs a new <code>HttpHostConfig</code>.
     * Describes the hostname properties for http routing.
     * @alias module:model/HttpHostConfig
     * @param name {String} http hostname config name.
     * @param routes {Array.<module:model/HttpRouteConfig>} Route information to use for routing. Routes are processed in the order they are specified. Specify routes that are more specific before routes that can handle general cases.
     */
    constructor(name, routes) { 
        
        HttpHostConfig.initialize(this, name, routes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, routes) { 
        obj['name'] = name;
        obj['routes'] = routes;
    }

    /**
     * Constructs a <code>HttpHostConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpHostConfig} obj Optional instance to populate.
     * @return {module:model/HttpHostConfig} The populated <code>HttpHostConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpHostConfig();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('routes')) {
                obj['routes'] = ApiClient.convertToType(data['routes'], [HttpRouteConfig]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpHostConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpHostConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HttpHostConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['routes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['routes'])) {
                throw new Error("Expected the field `routes` to be an array in the JSON data but got " + data['routes']);
            }
            // validate the optional field `routes` (array)
            for (const item of data['routes']) {
                HttpRouteConfig.validateJSON(item);
            };
        }

        return true;
    }


}

HttpHostConfig.RequiredProperties = ["name", "routes"];

/**
 * http hostname config name.
 * @member {String} name
 */
HttpHostConfig.prototype['name'] = undefined;

/**
 * Route information to use for routing. Routes are processed in the order they are specified. Specify routes that are more specific before routes that can handle general cases.
 * @member {Array.<module:model/HttpRouteConfig>} routes
 */
HttpHostConfig.prototype['routes'] = undefined;






export default HttpHostConfig;

