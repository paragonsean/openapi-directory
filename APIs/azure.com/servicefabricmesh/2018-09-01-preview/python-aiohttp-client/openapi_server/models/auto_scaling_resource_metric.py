# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_scaling_metric import AutoScalingMetric
from openapi_server.models.auto_scaling_metric_kind import AutoScalingMetricKind
from openapi_server.models.auto_scaling_resource_metric_name import AutoScalingResourceMetricName
from openapi_server import util


class AutoScalingResourceMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: AutoScalingResourceMetricName=None, kind: AutoScalingMetricKind=None):
        """AutoScalingResourceMetric - a model defined in OpenAPI

        :param name: The name of this AutoScalingResourceMetric.
        :param kind: The kind of this AutoScalingResourceMetric.
        """
        self.openapi_types = {
            'name': AutoScalingResourceMetricName,
            'kind': AutoScalingMetricKind
        }

        self.attribute_map = {
            'name': 'name',
            'kind': 'kind'
        }

        self._name = name
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoScalingResourceMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoScalingResourceMetric of this AutoScalingResourceMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AutoScalingResourceMetric.


        :return: The name of this AutoScalingResourceMetric.
        :rtype: AutoScalingResourceMetricName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutoScalingResourceMetric.


        :param name: The name of this AutoScalingResourceMetric.
        :type name: AutoScalingResourceMetricName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def kind(self):
        """Gets the kind of this AutoScalingResourceMetric.


        :return: The kind of this AutoScalingResourceMetric.
        :rtype: AutoScalingMetricKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AutoScalingResourceMetric.


        :param kind: The kind of this AutoScalingResourceMetric.
        :type kind: AutoScalingMetricKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind
