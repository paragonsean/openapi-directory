# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_ref import EndpointRef
from openapi_server import util


class NetworkRef(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_refs: List[EndpointRef]=None, name: str=None):
        """NetworkRef - a model defined in OpenAPI

        :param endpoint_refs: The endpoint_refs of this NetworkRef.
        :param name: The name of this NetworkRef.
        """
        self.openapi_types = {
            'endpoint_refs': List[EndpointRef],
            'name': str
        }

        self.attribute_map = {
            'endpoint_refs': 'endpointRefs',
            'name': 'name'
        }

        self._endpoint_refs = endpoint_refs
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkRef':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkRef of this NetworkRef.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_refs(self):
        """Gets the endpoint_refs of this NetworkRef.

        A list of endpoints that are exposed on this network.

        :return: The endpoint_refs of this NetworkRef.
        :rtype: List[EndpointRef]
        """
        return self._endpoint_refs

    @endpoint_refs.setter
    def endpoint_refs(self, endpoint_refs):
        """Sets the endpoint_refs of this NetworkRef.

        A list of endpoints that are exposed on this network.

        :param endpoint_refs: The endpoint_refs of this NetworkRef.
        :type endpoint_refs: List[EndpointRef]
        """

        self._endpoint_refs = endpoint_refs

    @property
    def name(self):
        """Gets the name of this NetworkRef.

        Name of the network

        :return: The name of this NetworkRef.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkRef.

        Name of the network

        :param name: The name of this NetworkRef.
        :type name: str
        """

        self._name = name
