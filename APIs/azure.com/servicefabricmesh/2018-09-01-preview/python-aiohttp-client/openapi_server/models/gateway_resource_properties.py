# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_config import HttpConfig
from openapi_server.models.network_ref import NetworkRef
from openapi_server.models.resource_status import ResourceStatus
from openapi_server.models.tcp_config import TcpConfig
from openapi_server import util


class GatewayResourceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provisioning_state: str=None, description: str=None, destination_network: NetworkRef=None, http: List[HttpConfig]=None, ip_address: str=None, source_network: NetworkRef=None, status: ResourceStatus=None, status_details: str=None, tcp: List[TcpConfig]=None):
        """GatewayResourceProperties - a model defined in OpenAPI

        :param provisioning_state: The provisioning_state of this GatewayResourceProperties.
        :param description: The description of this GatewayResourceProperties.
        :param destination_network: The destination_network of this GatewayResourceProperties.
        :param http: The http of this GatewayResourceProperties.
        :param ip_address: The ip_address of this GatewayResourceProperties.
        :param source_network: The source_network of this GatewayResourceProperties.
        :param status: The status of this GatewayResourceProperties.
        :param status_details: The status_details of this GatewayResourceProperties.
        :param tcp: The tcp of this GatewayResourceProperties.
        """
        self.openapi_types = {
            'provisioning_state': str,
            'description': str,
            'destination_network': NetworkRef,
            'http': List[HttpConfig],
            'ip_address': str,
            'source_network': NetworkRef,
            'status': ResourceStatus,
            'status_details': str,
            'tcp': List[TcpConfig]
        }

        self.attribute_map = {
            'provisioning_state': 'provisioningState',
            'description': 'description',
            'destination_network': 'destinationNetwork',
            'http': 'http',
            'ip_address': 'ipAddress',
            'source_network': 'sourceNetwork',
            'status': 'status',
            'status_details': 'statusDetails',
            'tcp': 'tcp'
        }

        self._provisioning_state = provisioning_state
        self._description = description
        self._destination_network = destination_network
        self._http = http
        self._ip_address = ip_address
        self._source_network = source_network
        self._status = status
        self._status_details = status_details
        self._tcp = tcp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GatewayResourceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GatewayResourceProperties of this GatewayResourceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this GatewayResourceProperties.

        State of the resource.

        :return: The provisioning_state of this GatewayResourceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this GatewayResourceProperties.

        State of the resource.

        :param provisioning_state: The provisioning_state of this GatewayResourceProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def description(self):
        """Gets the description of this GatewayResourceProperties.

        User readable description of the gateway.

        :return: The description of this GatewayResourceProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GatewayResourceProperties.

        User readable description of the gateway.

        :param description: The description of this GatewayResourceProperties.
        :type description: str
        """

        self._description = description

    @property
    def destination_network(self):
        """Gets the destination_network of this GatewayResourceProperties.


        :return: The destination_network of this GatewayResourceProperties.
        :rtype: NetworkRef
        """
        return self._destination_network

    @destination_network.setter
    def destination_network(self, destination_network):
        """Sets the destination_network of this GatewayResourceProperties.


        :param destination_network: The destination_network of this GatewayResourceProperties.
        :type destination_network: NetworkRef
        """
        if destination_network is None:
            raise ValueError("Invalid value for `destination_network`, must not be `None`")

        self._destination_network = destination_network

    @property
    def http(self):
        """Gets the http of this GatewayResourceProperties.

        Configuration for http connectivity for this gateway.

        :return: The http of this GatewayResourceProperties.
        :rtype: List[HttpConfig]
        """
        return self._http

    @http.setter
    def http(self, http):
        """Sets the http of this GatewayResourceProperties.

        Configuration for http connectivity for this gateway.

        :param http: The http of this GatewayResourceProperties.
        :type http: List[HttpConfig]
        """

        self._http = http

    @property
    def ip_address(self):
        """Gets the ip_address of this GatewayResourceProperties.

        IP address of the gateway. This is populated in the response and is ignored for incoming requests.

        :return: The ip_address of this GatewayResourceProperties.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this GatewayResourceProperties.

        IP address of the gateway. This is populated in the response and is ignored for incoming requests.

        :param ip_address: The ip_address of this GatewayResourceProperties.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def source_network(self):
        """Gets the source_network of this GatewayResourceProperties.


        :return: The source_network of this GatewayResourceProperties.
        :rtype: NetworkRef
        """
        return self._source_network

    @source_network.setter
    def source_network(self, source_network):
        """Sets the source_network of this GatewayResourceProperties.


        :param source_network: The source_network of this GatewayResourceProperties.
        :type source_network: NetworkRef
        """
        if source_network is None:
            raise ValueError("Invalid value for `source_network`, must not be `None`")

        self._source_network = source_network

    @property
    def status(self):
        """Gets the status of this GatewayResourceProperties.


        :return: The status of this GatewayResourceProperties.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GatewayResourceProperties.


        :param status: The status of this GatewayResourceProperties.
        :type status: ResourceStatus
        """

        self._status = status

    @property
    def status_details(self):
        """Gets the status_details of this GatewayResourceProperties.

        Gives additional information about the current status of the gateway.

        :return: The status_details of this GatewayResourceProperties.
        :rtype: str
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this GatewayResourceProperties.

        Gives additional information about the current status of the gateway.

        :param status_details: The status_details of this GatewayResourceProperties.
        :type status_details: str
        """

        self._status_details = status_details

    @property
    def tcp(self):
        """Gets the tcp of this GatewayResourceProperties.

        Configuration for tcp connectivity for this gateway.

        :return: The tcp of this GatewayResourceProperties.
        :rtype: List[TcpConfig]
        """
        return self._tcp

    @tcp.setter
    def tcp(self, tcp):
        """Sets the tcp of this GatewayResourceProperties.

        Configuration for tcp connectivity for this gateway.

        :param tcp: The tcp of this GatewayResourceProperties.
        :type tcp: List[TcpConfig]
        """

        self._tcp = tcp
