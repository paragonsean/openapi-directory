# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_host_config import HttpHostConfig
from openapi_server import util


class HttpConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosts: List[HttpHostConfig]=None, name: str=None, port: int=None):
        """HttpConfig - a model defined in OpenAPI

        :param hosts: The hosts of this HttpConfig.
        :param name: The name of this HttpConfig.
        :param port: The port of this HttpConfig.
        """
        self.openapi_types = {
            'hosts': List[HttpHostConfig],
            'name': str,
            'port': int
        }

        self.attribute_map = {
            'hosts': 'hosts',
            'name': 'name',
            'port': 'port'
        }

        self._hosts = hosts
        self._name = name
        self._port = port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpConfig of this HttpConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosts(self):
        """Gets the hosts of this HttpConfig.

        description for routing.

        :return: The hosts of this HttpConfig.
        :rtype: List[HttpHostConfig]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this HttpConfig.

        description for routing.

        :param hosts: The hosts of this HttpConfig.
        :type hosts: List[HttpHostConfig]
        """
        if hosts is None:
            raise ValueError("Invalid value for `hosts`, must not be `None`")

        self._hosts = hosts

    @property
    def name(self):
        """Gets the name of this HttpConfig.

        http gateway config name.

        :return: The name of this HttpConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HttpConfig.

        http gateway config name.

        :param name: The name of this HttpConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def port(self):
        """Gets the port of this HttpConfig.

        Specifies the port at which the service endpoint below needs to be exposed.

        :return: The port of this HttpConfig.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this HttpConfig.

        Specifies the port at which the service endpoint below needs to be exposed.

        :param port: The port of this HttpConfig.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port
