# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_scaling_mechanism import AutoScalingMechanism
from openapi_server.models.auto_scaling_trigger import AutoScalingTrigger
from openapi_server import util


class AutoScalingPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mechanism: AutoScalingMechanism=None, name: str=None, trigger: AutoScalingTrigger=None):
        """AutoScalingPolicy - a model defined in OpenAPI

        :param mechanism: The mechanism of this AutoScalingPolicy.
        :param name: The name of this AutoScalingPolicy.
        :param trigger: The trigger of this AutoScalingPolicy.
        """
        self.openapi_types = {
            'mechanism': AutoScalingMechanism,
            'name': str,
            'trigger': AutoScalingTrigger
        }

        self.attribute_map = {
            'mechanism': 'mechanism',
            'name': 'name',
            'trigger': 'trigger'
        }

        self._mechanism = mechanism
        self._name = name
        self._trigger = trigger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoScalingPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoScalingPolicy of this AutoScalingPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mechanism(self):
        """Gets the mechanism of this AutoScalingPolicy.


        :return: The mechanism of this AutoScalingPolicy.
        :rtype: AutoScalingMechanism
        """
        return self._mechanism

    @mechanism.setter
    def mechanism(self, mechanism):
        """Sets the mechanism of this AutoScalingPolicy.


        :param mechanism: The mechanism of this AutoScalingPolicy.
        :type mechanism: AutoScalingMechanism
        """
        if mechanism is None:
            raise ValueError("Invalid value for `mechanism`, must not be `None`")

        self._mechanism = mechanism

    @property
    def name(self):
        """Gets the name of this AutoScalingPolicy.

        The name of the auto scaling policy.

        :return: The name of this AutoScalingPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutoScalingPolicy.

        The name of the auto scaling policy.

        :param name: The name of this AutoScalingPolicy.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def trigger(self):
        """Gets the trigger of this AutoScalingPolicy.


        :return: The trigger of this AutoScalingPolicy.
        :rtype: AutoScalingTrigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this AutoScalingPolicy.


        :param trigger: The trigger of this AutoScalingPolicy.
        :type trigger: AutoScalingTrigger
        """
        if trigger is None:
            raise ValueError("Invalid value for `trigger`, must not be `None`")

        self._trigger = trigger
