# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_code_package_properties import ContainerCodePackageProperties
from openapi_server.models.diagnostics_ref import DiagnosticsRef
from openapi_server.models.network_ref import NetworkRef
from openapi_server.models.operating_system_type import OperatingSystemType
from openapi_server import util


class ServiceReplicaDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, replica_name: str=None, code_packages: List[ContainerCodePackageProperties]=None, diagnostics: DiagnosticsRef=None, network_refs: List[NetworkRef]=None, os_type: OperatingSystemType=None):
        """ServiceReplicaDescription - a model defined in OpenAPI

        :param replica_name: The replica_name of this ServiceReplicaDescription.
        :param code_packages: The code_packages of this ServiceReplicaDescription.
        :param diagnostics: The diagnostics of this ServiceReplicaDescription.
        :param network_refs: The network_refs of this ServiceReplicaDescription.
        :param os_type: The os_type of this ServiceReplicaDescription.
        """
        self.openapi_types = {
            'replica_name': str,
            'code_packages': List[ContainerCodePackageProperties],
            'diagnostics': DiagnosticsRef,
            'network_refs': List[NetworkRef],
            'os_type': OperatingSystemType
        }

        self.attribute_map = {
            'replica_name': 'replicaName',
            'code_packages': 'codePackages',
            'diagnostics': 'diagnostics',
            'network_refs': 'networkRefs',
            'os_type': 'osType'
        }

        self._replica_name = replica_name
        self._code_packages = code_packages
        self._diagnostics = diagnostics
        self._network_refs = network_refs
        self._os_type = os_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceReplicaDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceReplicaDescription of this ServiceReplicaDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def replica_name(self):
        """Gets the replica_name of this ServiceReplicaDescription.

        Name of the replica.

        :return: The replica_name of this ServiceReplicaDescription.
        :rtype: str
        """
        return self._replica_name

    @replica_name.setter
    def replica_name(self, replica_name):
        """Sets the replica_name of this ServiceReplicaDescription.

        Name of the replica.

        :param replica_name: The replica_name of this ServiceReplicaDescription.
        :type replica_name: str
        """
        if replica_name is None:
            raise ValueError("Invalid value for `replica_name`, must not be `None`")

        self._replica_name = replica_name

    @property
    def code_packages(self):
        """Gets the code_packages of this ServiceReplicaDescription.

        Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).

        :return: The code_packages of this ServiceReplicaDescription.
        :rtype: List[ContainerCodePackageProperties]
        """
        return self._code_packages

    @code_packages.setter
    def code_packages(self, code_packages):
        """Sets the code_packages of this ServiceReplicaDescription.

        Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).

        :param code_packages: The code_packages of this ServiceReplicaDescription.
        :type code_packages: List[ContainerCodePackageProperties]
        """
        if code_packages is None:
            raise ValueError("Invalid value for `code_packages`, must not be `None`")

        self._code_packages = code_packages

    @property
    def diagnostics(self):
        """Gets the diagnostics of this ServiceReplicaDescription.


        :return: The diagnostics of this ServiceReplicaDescription.
        :rtype: DiagnosticsRef
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this ServiceReplicaDescription.


        :param diagnostics: The diagnostics of this ServiceReplicaDescription.
        :type diagnostics: DiagnosticsRef
        """

        self._diagnostics = diagnostics

    @property
    def network_refs(self):
        """Gets the network_refs of this ServiceReplicaDescription.

        The names of the private networks that this service needs to be part of.

        :return: The network_refs of this ServiceReplicaDescription.
        :rtype: List[NetworkRef]
        """
        return self._network_refs

    @network_refs.setter
    def network_refs(self, network_refs):
        """Sets the network_refs of this ServiceReplicaDescription.

        The names of the private networks that this service needs to be part of.

        :param network_refs: The network_refs of this ServiceReplicaDescription.
        :type network_refs: List[NetworkRef]
        """

        self._network_refs = network_refs

    @property
    def os_type(self):
        """Gets the os_type of this ServiceReplicaDescription.


        :return: The os_type of this ServiceReplicaDescription.
        :rtype: OperatingSystemType
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this ServiceReplicaDescription.


        :param os_type: The os_type of this ServiceReplicaDescription.
        :type os_type: OperatingSystemType
        """
        if os_type is None:
            raise ValueError("Invalid value for `os_type`, must not be `None`")

        self._os_type = os_type
