# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GatewayDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, endpoint_name: str=None, service_name: str=None):
        """GatewayDestination - a model defined in OpenAPI

        :param application_name: The application_name of this GatewayDestination.
        :param endpoint_name: The endpoint_name of this GatewayDestination.
        :param service_name: The service_name of this GatewayDestination.
        """
        self.openapi_types = {
            'application_name': str,
            'endpoint_name': str,
            'service_name': str
        }

        self.attribute_map = {
            'application_name': 'applicationName',
            'endpoint_name': 'endpointName',
            'service_name': 'serviceName'
        }

        self._application_name = application_name
        self._endpoint_name = endpoint_name
        self._service_name = service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GatewayDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GatewayDestination of this GatewayDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this GatewayDestination.

        Name of the service fabric Mesh application.

        :return: The application_name of this GatewayDestination.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this GatewayDestination.

        Name of the service fabric Mesh application.

        :param application_name: The application_name of this GatewayDestination.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this GatewayDestination.

        name of the endpoint in the service.

        :return: The endpoint_name of this GatewayDestination.
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this GatewayDestination.

        name of the endpoint in the service.

        :param endpoint_name: The endpoint_name of this GatewayDestination.
        :type endpoint_name: str
        """
        if endpoint_name is None:
            raise ValueError("Invalid value for `endpoint_name`, must not be `None`")

        self._endpoint_name = endpoint_name

    @property
    def service_name(self):
        """Gets the service_name of this GatewayDestination.

        service that contains the endpoint.

        :return: The service_name of this GatewayDestination.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this GatewayDestination.

        service that contains the endpoint.

        :param service_name: The service_name of this GatewayDestination.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name
