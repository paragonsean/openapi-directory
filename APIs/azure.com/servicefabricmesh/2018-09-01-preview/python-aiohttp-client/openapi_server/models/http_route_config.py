# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gateway_destination import GatewayDestination
from openapi_server.models.http_route_match_rule import HttpRouteMatchRule
from openapi_server import util


class HttpRouteConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: GatewayDestination=None, match: HttpRouteMatchRule=None, name: str=None):
        """HttpRouteConfig - a model defined in OpenAPI

        :param destination: The destination of this HttpRouteConfig.
        :param match: The match of this HttpRouteConfig.
        :param name: The name of this HttpRouteConfig.
        """
        self.openapi_types = {
            'destination': GatewayDestination,
            'match': HttpRouteMatchRule,
            'name': str
        }

        self.attribute_map = {
            'destination': 'destination',
            'match': 'match',
            'name': 'name'
        }

        self._destination = destination
        self._match = match
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRouteConfig of this HttpRouteConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this HttpRouteConfig.


        :return: The destination of this HttpRouteConfig.
        :rtype: GatewayDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this HttpRouteConfig.


        :param destination: The destination of this HttpRouteConfig.
        :type destination: GatewayDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def match(self):
        """Gets the match of this HttpRouteConfig.


        :return: The match of this HttpRouteConfig.
        :rtype: HttpRouteMatchRule
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this HttpRouteConfig.


        :param match: The match of this HttpRouteConfig.
        :type match: HttpRouteMatchRule
        """
        if match is None:
            raise ValueError("Invalid value for `match`, must not be `None`")

        self._match = match

    @property
    def name(self):
        """Gets the name of this HttpRouteConfig.

        http route name.

        :return: The name of this HttpRouteConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HttpRouteConfig.

        http route name.

        :param name: The name of this HttpRouteConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
