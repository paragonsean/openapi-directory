# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_scoped_volume import ApplicationScopedVolume
from openapi_server.models.container_instance_view import ContainerInstanceView
from openapi_server.models.container_label import ContainerLabel
from openapi_server.models.diagnostics_ref import DiagnosticsRef
from openapi_server.models.endpoint_properties import EndpointProperties
from openapi_server.models.environment_variable import EnvironmentVariable
from openapi_server.models.image_registry_credential import ImageRegistryCredential
from openapi_server.models.reliable_collections_ref import ReliableCollectionsRef
from openapi_server.models.resource_requirements import ResourceRequirements
from openapi_server.models.setting import Setting
from openapi_server.models.volume_reference import VolumeReference
from openapi_server import util


class ContainerCodePackageProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commands: List[str]=None, diagnostics: DiagnosticsRef=None, endpoints: List[EndpointProperties]=None, entrypoint: str=None, environment_variables: List[EnvironmentVariable]=None, image: str=None, image_registry_credential: ImageRegistryCredential=None, instance_view: ContainerInstanceView=None, labels: List[ContainerLabel]=None, name: str=None, reliable_collections_refs: List[ReliableCollectionsRef]=None, resources: ResourceRequirements=None, settings: List[Setting]=None, volume_refs: List[VolumeReference]=None, volumes: List[ApplicationScopedVolume]=None):
        """ContainerCodePackageProperties - a model defined in OpenAPI

        :param commands: The commands of this ContainerCodePackageProperties.
        :param diagnostics: The diagnostics of this ContainerCodePackageProperties.
        :param endpoints: The endpoints of this ContainerCodePackageProperties.
        :param entrypoint: The entrypoint of this ContainerCodePackageProperties.
        :param environment_variables: The environment_variables of this ContainerCodePackageProperties.
        :param image: The image of this ContainerCodePackageProperties.
        :param image_registry_credential: The image_registry_credential of this ContainerCodePackageProperties.
        :param instance_view: The instance_view of this ContainerCodePackageProperties.
        :param labels: The labels of this ContainerCodePackageProperties.
        :param name: The name of this ContainerCodePackageProperties.
        :param reliable_collections_refs: The reliable_collections_refs of this ContainerCodePackageProperties.
        :param resources: The resources of this ContainerCodePackageProperties.
        :param settings: The settings of this ContainerCodePackageProperties.
        :param volume_refs: The volume_refs of this ContainerCodePackageProperties.
        :param volumes: The volumes of this ContainerCodePackageProperties.
        """
        self.openapi_types = {
            'commands': List[str],
            'diagnostics': DiagnosticsRef,
            'endpoints': List[EndpointProperties],
            'entrypoint': str,
            'environment_variables': List[EnvironmentVariable],
            'image': str,
            'image_registry_credential': ImageRegistryCredential,
            'instance_view': ContainerInstanceView,
            'labels': List[ContainerLabel],
            'name': str,
            'reliable_collections_refs': List[ReliableCollectionsRef],
            'resources': ResourceRequirements,
            'settings': List[Setting],
            'volume_refs': List[VolumeReference],
            'volumes': List[ApplicationScopedVolume]
        }

        self.attribute_map = {
            'commands': 'commands',
            'diagnostics': 'diagnostics',
            'endpoints': 'endpoints',
            'entrypoint': 'entrypoint',
            'environment_variables': 'environmentVariables',
            'image': 'image',
            'image_registry_credential': 'imageRegistryCredential',
            'instance_view': 'instanceView',
            'labels': 'labels',
            'name': 'name',
            'reliable_collections_refs': 'reliableCollectionsRefs',
            'resources': 'resources',
            'settings': 'settings',
            'volume_refs': 'volumeRefs',
            'volumes': 'volumes'
        }

        self._commands = commands
        self._diagnostics = diagnostics
        self._endpoints = endpoints
        self._entrypoint = entrypoint
        self._environment_variables = environment_variables
        self._image = image
        self._image_registry_credential = image_registry_credential
        self._instance_view = instance_view
        self._labels = labels
        self._name = name
        self._reliable_collections_refs = reliable_collections_refs
        self._resources = resources
        self._settings = settings
        self._volume_refs = volume_refs
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerCodePackageProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerCodePackageProperties of this ContainerCodePackageProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commands(self):
        """Gets the commands of this ContainerCodePackageProperties.

        Command array to execute within the container in exec form.

        :return: The commands of this ContainerCodePackageProperties.
        :rtype: List[str]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this ContainerCodePackageProperties.

        Command array to execute within the container in exec form.

        :param commands: The commands of this ContainerCodePackageProperties.
        :type commands: List[str]
        """

        self._commands = commands

    @property
    def diagnostics(self):
        """Gets the diagnostics of this ContainerCodePackageProperties.


        :return: The diagnostics of this ContainerCodePackageProperties.
        :rtype: DiagnosticsRef
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this ContainerCodePackageProperties.


        :param diagnostics: The diagnostics of this ContainerCodePackageProperties.
        :type diagnostics: DiagnosticsRef
        """

        self._diagnostics = diagnostics

    @property
    def endpoints(self):
        """Gets the endpoints of this ContainerCodePackageProperties.

        The endpoints exposed by this container.

        :return: The endpoints of this ContainerCodePackageProperties.
        :rtype: List[EndpointProperties]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ContainerCodePackageProperties.

        The endpoints exposed by this container.

        :param endpoints: The endpoints of this ContainerCodePackageProperties.
        :type endpoints: List[EndpointProperties]
        """

        self._endpoints = endpoints

    @property
    def entrypoint(self):
        """Gets the entrypoint of this ContainerCodePackageProperties.

        Override for the default entry point in the container.

        :return: The entrypoint of this ContainerCodePackageProperties.
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this ContainerCodePackageProperties.

        Override for the default entry point in the container.

        :param entrypoint: The entrypoint of this ContainerCodePackageProperties.
        :type entrypoint: str
        """

        self._entrypoint = entrypoint

    @property
    def environment_variables(self):
        """Gets the environment_variables of this ContainerCodePackageProperties.

        The environment variables to set in this container

        :return: The environment_variables of this ContainerCodePackageProperties.
        :rtype: List[EnvironmentVariable]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this ContainerCodePackageProperties.

        The environment variables to set in this container

        :param environment_variables: The environment_variables of this ContainerCodePackageProperties.
        :type environment_variables: List[EnvironmentVariable]
        """

        self._environment_variables = environment_variables

    @property
    def image(self):
        """Gets the image of this ContainerCodePackageProperties.

        The Container image to use.

        :return: The image of this ContainerCodePackageProperties.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ContainerCodePackageProperties.

        The Container image to use.

        :param image: The image of this ContainerCodePackageProperties.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def image_registry_credential(self):
        """Gets the image_registry_credential of this ContainerCodePackageProperties.


        :return: The image_registry_credential of this ContainerCodePackageProperties.
        :rtype: ImageRegistryCredential
        """
        return self._image_registry_credential

    @image_registry_credential.setter
    def image_registry_credential(self, image_registry_credential):
        """Sets the image_registry_credential of this ContainerCodePackageProperties.


        :param image_registry_credential: The image_registry_credential of this ContainerCodePackageProperties.
        :type image_registry_credential: ImageRegistryCredential
        """

        self._image_registry_credential = image_registry_credential

    @property
    def instance_view(self):
        """Gets the instance_view of this ContainerCodePackageProperties.


        :return: The instance_view of this ContainerCodePackageProperties.
        :rtype: ContainerInstanceView
        """
        return self._instance_view

    @instance_view.setter
    def instance_view(self, instance_view):
        """Sets the instance_view of this ContainerCodePackageProperties.


        :param instance_view: The instance_view of this ContainerCodePackageProperties.
        :type instance_view: ContainerInstanceView
        """

        self._instance_view = instance_view

    @property
    def labels(self):
        """Gets the labels of this ContainerCodePackageProperties.

        The labels to set in this container.

        :return: The labels of this ContainerCodePackageProperties.
        :rtype: List[ContainerLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ContainerCodePackageProperties.

        The labels to set in this container.

        :param labels: The labels of this ContainerCodePackageProperties.
        :type labels: List[ContainerLabel]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ContainerCodePackageProperties.

        The name of the code package.

        :return: The name of this ContainerCodePackageProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContainerCodePackageProperties.

        The name of the code package.

        :param name: The name of this ContainerCodePackageProperties.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def reliable_collections_refs(self):
        """Gets the reliable_collections_refs of this ContainerCodePackageProperties.

        A list of ReliableCollection resources used by this particular code package. Please refer to ReliableCollectionsRef for more details.

        :return: The reliable_collections_refs of this ContainerCodePackageProperties.
        :rtype: List[ReliableCollectionsRef]
        """
        return self._reliable_collections_refs

    @reliable_collections_refs.setter
    def reliable_collections_refs(self, reliable_collections_refs):
        """Sets the reliable_collections_refs of this ContainerCodePackageProperties.

        A list of ReliableCollection resources used by this particular code package. Please refer to ReliableCollectionsRef for more details.

        :param reliable_collections_refs: The reliable_collections_refs of this ContainerCodePackageProperties.
        :type reliable_collections_refs: List[ReliableCollectionsRef]
        """

        self._reliable_collections_refs = reliable_collections_refs

    @property
    def resources(self):
        """Gets the resources of this ContainerCodePackageProperties.


        :return: The resources of this ContainerCodePackageProperties.
        :rtype: ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ContainerCodePackageProperties.


        :param resources: The resources of this ContainerCodePackageProperties.
        :type resources: ResourceRequirements
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")

        self._resources = resources

    @property
    def settings(self):
        """Gets the settings of this ContainerCodePackageProperties.

        The settings to set in this container. The setting file path can be fetched from environment variable \"Fabric_SettingPath\". The path for Windows container is \"C:\\\\secrets\". The path for Linux container is \"/var/secrets\".

        :return: The settings of this ContainerCodePackageProperties.
        :rtype: List[Setting]
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this ContainerCodePackageProperties.

        The settings to set in this container. The setting file path can be fetched from environment variable \"Fabric_SettingPath\". The path for Windows container is \"C:\\\\secrets\". The path for Linux container is \"/var/secrets\".

        :param settings: The settings of this ContainerCodePackageProperties.
        :type settings: List[Setting]
        """

        self._settings = settings

    @property
    def volume_refs(self):
        """Gets the volume_refs of this ContainerCodePackageProperties.

        Volumes to be attached to the container. The lifetime of these volumes is independent of the application's lifetime.

        :return: The volume_refs of this ContainerCodePackageProperties.
        :rtype: List[VolumeReference]
        """
        return self._volume_refs

    @volume_refs.setter
    def volume_refs(self, volume_refs):
        """Sets the volume_refs of this ContainerCodePackageProperties.

        Volumes to be attached to the container. The lifetime of these volumes is independent of the application's lifetime.

        :param volume_refs: The volume_refs of this ContainerCodePackageProperties.
        :type volume_refs: List[VolumeReference]
        """

        self._volume_refs = volume_refs

    @property
    def volumes(self):
        """Gets the volumes of this ContainerCodePackageProperties.

        Volumes to be attached to the container. The lifetime of these volumes is scoped to the application's lifetime.

        :return: The volumes of this ContainerCodePackageProperties.
        :rtype: List[ApplicationScopedVolume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ContainerCodePackageProperties.

        Volumes to be attached to the container. The lifetime of these volumes is scoped to the application's lifetime.

        :param volumes: The volumes of this ContainerCodePackageProperties.
        :type volumes: List[ApplicationScopedVolume]
        """

        self._volumes = volumes
