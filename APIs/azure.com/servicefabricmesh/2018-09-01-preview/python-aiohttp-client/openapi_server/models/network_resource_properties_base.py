# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_kind import NetworkKind
from openapi_server import util


class NetworkResourcePropertiesBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: NetworkKind=None, provisioning_state: str=None):
        """NetworkResourcePropertiesBase - a model defined in OpenAPI

        :param kind: The kind of this NetworkResourcePropertiesBase.
        :param provisioning_state: The provisioning_state of this NetworkResourcePropertiesBase.
        """
        self.openapi_types = {
            'kind': NetworkKind,
            'provisioning_state': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'provisioning_state': 'provisioningState'
        }

        self._kind = kind
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkResourcePropertiesBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkResourcePropertiesBase of this NetworkResourcePropertiesBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this NetworkResourcePropertiesBase.


        :return: The kind of this NetworkResourcePropertiesBase.
        :rtype: NetworkKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this NetworkResourcePropertiesBase.


        :param kind: The kind of this NetworkResourcePropertiesBase.
        :type kind: NetworkKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this NetworkResourcePropertiesBase.

        State of the resource.

        :return: The provisioning_state of this NetworkResourcePropertiesBase.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this NetworkResourcePropertiesBase.

        State of the resource.

        :param provisioning_state: The provisioning_state of this NetworkResourcePropertiesBase.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state
