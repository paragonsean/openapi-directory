# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_scoped_volume_creation_parameters import ApplicationScopedVolumeCreationParameters
from openapi_server import util


class ApplicationScopedVolume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_parameters: ApplicationScopedVolumeCreationParameters=None, destination_path: str=None, name: str=None, read_only: bool=None):
        """ApplicationScopedVolume - a model defined in OpenAPI

        :param creation_parameters: The creation_parameters of this ApplicationScopedVolume.
        :param destination_path: The destination_path of this ApplicationScopedVolume.
        :param name: The name of this ApplicationScopedVolume.
        :param read_only: The read_only of this ApplicationScopedVolume.
        """
        self.openapi_types = {
            'creation_parameters': ApplicationScopedVolumeCreationParameters,
            'destination_path': str,
            'name': str,
            'read_only': bool
        }

        self.attribute_map = {
            'creation_parameters': 'creationParameters',
            'destination_path': 'destinationPath',
            'name': 'name',
            'read_only': 'readOnly'
        }

        self._creation_parameters = creation_parameters
        self._destination_path = destination_path
        self._name = name
        self._read_only = read_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationScopedVolume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationScopedVolume of this ApplicationScopedVolume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_parameters(self):
        """Gets the creation_parameters of this ApplicationScopedVolume.


        :return: The creation_parameters of this ApplicationScopedVolume.
        :rtype: ApplicationScopedVolumeCreationParameters
        """
        return self._creation_parameters

    @creation_parameters.setter
    def creation_parameters(self, creation_parameters):
        """Sets the creation_parameters of this ApplicationScopedVolume.


        :param creation_parameters: The creation_parameters of this ApplicationScopedVolume.
        :type creation_parameters: ApplicationScopedVolumeCreationParameters
        """
        if creation_parameters is None:
            raise ValueError("Invalid value for `creation_parameters`, must not be `None`")

        self._creation_parameters = creation_parameters

    @property
    def destination_path(self):
        """Gets the destination_path of this ApplicationScopedVolume.

        The path within the container at which the volume should be mounted. Only valid path characters are allowed.

        :return: The destination_path of this ApplicationScopedVolume.
        :rtype: str
        """
        return self._destination_path

    @destination_path.setter
    def destination_path(self, destination_path):
        """Sets the destination_path of this ApplicationScopedVolume.

        The path within the container at which the volume should be mounted. Only valid path characters are allowed.

        :param destination_path: The destination_path of this ApplicationScopedVolume.
        :type destination_path: str
        """
        if destination_path is None:
            raise ValueError("Invalid value for `destination_path`, must not be `None`")

        self._destination_path = destination_path

    @property
    def name(self):
        """Gets the name of this ApplicationScopedVolume.

        Name of the volume being referenced.

        :return: The name of this ApplicationScopedVolume.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationScopedVolume.

        Name of the volume being referenced.

        :param name: The name of this ApplicationScopedVolume.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def read_only(self):
        """Gets the read_only of this ApplicationScopedVolume.

        The flag indicating whether the volume is read only. Default is 'false'.

        :return: The read_only of this ApplicationScopedVolume.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ApplicationScopedVolume.

        The flag indicating whether the volume is read only. Default is 'false'.

        :param read_only: The read_only of this ApplicationScopedVolume.
        :type read_only: bool
        """

        self._read_only = read_only
