/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationGatewayAutoscaleConfiguration from './ApplicationGatewayAutoscaleConfiguration';
import ApplicationGatewayCustomError from './ApplicationGatewayCustomError';
import ApplicationGatewaySku from './ApplicationGatewaySku';
import ApplicationGatewaySslPolicy from './ApplicationGatewaySslPolicy';
import ApplicationGatewayWebApplicationFirewallConfiguration from './ApplicationGatewayWebApplicationFirewallConfiguration';

/**
 * The ApplicationGatewayPropertiesFormat model module.
 * @module model/ApplicationGatewayPropertiesFormat
 * @version 2018-08-01
 */
class ApplicationGatewayPropertiesFormat {
    /**
     * Constructs a new <code>ApplicationGatewayPropertiesFormat</code>.
     * Properties of the application gateway.
     * @alias module:model/ApplicationGatewayPropertiesFormat
     */
    constructor() { 
        
        ApplicationGatewayPropertiesFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplicationGatewayPropertiesFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationGatewayPropertiesFormat} obj Optional instance to populate.
     * @return {module:model/ApplicationGatewayPropertiesFormat} The populated <code>ApplicationGatewayPropertiesFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationGatewayPropertiesFormat();

            if (data.hasOwnProperty('authenticationCertificates')) {
                obj['authenticationCertificates'] = ApiClient.convertToType(data['authenticationCertificates'], [Object]);
            }
            if (data.hasOwnProperty('autoscaleConfiguration')) {
                obj['autoscaleConfiguration'] = ApplicationGatewayAutoscaleConfiguration.constructFromObject(data['autoscaleConfiguration']);
            }
            if (data.hasOwnProperty('backendAddressPools')) {
                obj['backendAddressPools'] = ApiClient.convertToType(data['backendAddressPools'], [Object]);
            }
            if (data.hasOwnProperty('backendHttpSettingsCollection')) {
                obj['backendHttpSettingsCollection'] = ApiClient.convertToType(data['backendHttpSettingsCollection'], [Object]);
            }
            if (data.hasOwnProperty('customErrorConfigurations')) {
                obj['customErrorConfigurations'] = ApiClient.convertToType(data['customErrorConfigurations'], [ApplicationGatewayCustomError]);
            }
            if (data.hasOwnProperty('enableFips')) {
                obj['enableFips'] = ApiClient.convertToType(data['enableFips'], 'Boolean');
            }
            if (data.hasOwnProperty('enableHttp2')) {
                obj['enableHttp2'] = ApiClient.convertToType(data['enableHttp2'], 'Boolean');
            }
            if (data.hasOwnProperty('frontendIPConfigurations')) {
                obj['frontendIPConfigurations'] = ApiClient.convertToType(data['frontendIPConfigurations'], [Object]);
            }
            if (data.hasOwnProperty('frontendPorts')) {
                obj['frontendPorts'] = ApiClient.convertToType(data['frontendPorts'], [Object]);
            }
            if (data.hasOwnProperty('gatewayIPConfigurations')) {
                obj['gatewayIPConfigurations'] = ApiClient.convertToType(data['gatewayIPConfigurations'], [Object]);
            }
            if (data.hasOwnProperty('httpListeners')) {
                obj['httpListeners'] = ApiClient.convertToType(data['httpListeners'], [Object]);
            }
            if (data.hasOwnProperty('operationalState')) {
                obj['operationalState'] = ApiClient.convertToType(data['operationalState'], 'String');
            }
            if (data.hasOwnProperty('probes')) {
                obj['probes'] = ApiClient.convertToType(data['probes'], [Object]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('redirectConfigurations')) {
                obj['redirectConfigurations'] = ApiClient.convertToType(data['redirectConfigurations'], [Object]);
            }
            if (data.hasOwnProperty('requestRoutingRules')) {
                obj['requestRoutingRules'] = ApiClient.convertToType(data['requestRoutingRules'], [Object]);
            }
            if (data.hasOwnProperty('resourceGuid')) {
                obj['resourceGuid'] = ApiClient.convertToType(data['resourceGuid'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApplicationGatewaySku.constructFromObject(data['sku']);
            }
            if (data.hasOwnProperty('sslCertificates')) {
                obj['sslCertificates'] = ApiClient.convertToType(data['sslCertificates'], [Object]);
            }
            if (data.hasOwnProperty('sslPolicy')) {
                obj['sslPolicy'] = ApplicationGatewaySslPolicy.constructFromObject(data['sslPolicy']);
            }
            if (data.hasOwnProperty('trustedRootCertificates')) {
                obj['trustedRootCertificates'] = ApiClient.convertToType(data['trustedRootCertificates'], [Object]);
            }
            if (data.hasOwnProperty('urlPathMaps')) {
                obj['urlPathMaps'] = ApiClient.convertToType(data['urlPathMaps'], [Object]);
            }
            if (data.hasOwnProperty('webApplicationFirewallConfiguration')) {
                obj['webApplicationFirewallConfiguration'] = ApplicationGatewayWebApplicationFirewallConfiguration.constructFromObject(data['webApplicationFirewallConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationGatewayPropertiesFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationGatewayPropertiesFormat</code>.
     */
    static validateJSON(data) {
        if (data['authenticationCertificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authenticationCertificates'])) {
                throw new Error("Expected the field `authenticationCertificates` to be an array in the JSON data but got " + data['authenticationCertificates']);
            }
            // validate the optional field `authenticationCertificates` (array)
            for (const item of data['authenticationCertificates']) {
                Object.validateJSON(item);
            };
        }
        // validate the optional field `autoscaleConfiguration`
        if (data['autoscaleConfiguration']) { // data not null
          ApplicationGatewayAutoscaleConfiguration.validateJSON(data['autoscaleConfiguration']);
        }
        if (data['backendAddressPools']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['backendAddressPools'])) {
                throw new Error("Expected the field `backendAddressPools` to be an array in the JSON data but got " + data['backendAddressPools']);
            }
            // validate the optional field `backendAddressPools` (array)
            for (const item of data['backendAddressPools']) {
                Object.validateJSON(item);
            };
        }
        if (data['backendHttpSettingsCollection']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['backendHttpSettingsCollection'])) {
                throw new Error("Expected the field `backendHttpSettingsCollection` to be an array in the JSON data but got " + data['backendHttpSettingsCollection']);
            }
            // validate the optional field `backendHttpSettingsCollection` (array)
            for (const item of data['backendHttpSettingsCollection']) {
                Object.validateJSON(item);
            };
        }
        if (data['customErrorConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customErrorConfigurations'])) {
                throw new Error("Expected the field `customErrorConfigurations` to be an array in the JSON data but got " + data['customErrorConfigurations']);
            }
            // validate the optional field `customErrorConfigurations` (array)
            for (const item of data['customErrorConfigurations']) {
                ApplicationGatewayCustomError.validateJSON(item);
            };
        }
        if (data['frontendIPConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['frontendIPConfigurations'])) {
                throw new Error("Expected the field `frontendIPConfigurations` to be an array in the JSON data but got " + data['frontendIPConfigurations']);
            }
            // validate the optional field `frontendIPConfigurations` (array)
            for (const item of data['frontendIPConfigurations']) {
                Object.validateJSON(item);
            };
        }
        if (data['frontendPorts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['frontendPorts'])) {
                throw new Error("Expected the field `frontendPorts` to be an array in the JSON data but got " + data['frontendPorts']);
            }
            // validate the optional field `frontendPorts` (array)
            for (const item of data['frontendPorts']) {
                Object.validateJSON(item);
            };
        }
        if (data['gatewayIPConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['gatewayIPConfigurations'])) {
                throw new Error("Expected the field `gatewayIPConfigurations` to be an array in the JSON data but got " + data['gatewayIPConfigurations']);
            }
            // validate the optional field `gatewayIPConfigurations` (array)
            for (const item of data['gatewayIPConfigurations']) {
                Object.validateJSON(item);
            };
        }
        if (data['httpListeners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['httpListeners'])) {
                throw new Error("Expected the field `httpListeners` to be an array in the JSON data but got " + data['httpListeners']);
            }
            // validate the optional field `httpListeners` (array)
            for (const item of data['httpListeners']) {
                Object.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['operationalState'] && !(typeof data['operationalState'] === 'string' || data['operationalState'] instanceof String)) {
            throw new Error("Expected the field `operationalState` to be a primitive type in the JSON string but got " + data['operationalState']);
        }
        if (data['probes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['probes'])) {
                throw new Error("Expected the field `probes` to be an array in the JSON data but got " + data['probes']);
            }
            // validate the optional field `probes` (array)
            for (const item of data['probes']) {
                Object.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        if (data['redirectConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['redirectConfigurations'])) {
                throw new Error("Expected the field `redirectConfigurations` to be an array in the JSON data but got " + data['redirectConfigurations']);
            }
            // validate the optional field `redirectConfigurations` (array)
            for (const item of data['redirectConfigurations']) {
                Object.validateJSON(item);
            };
        }
        if (data['requestRoutingRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['requestRoutingRules'])) {
                throw new Error("Expected the field `requestRoutingRules` to be an array in the JSON data but got " + data['requestRoutingRules']);
            }
            // validate the optional field `requestRoutingRules` (array)
            for (const item of data['requestRoutingRules']) {
                Object.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['resourceGuid'] && !(typeof data['resourceGuid'] === 'string' || data['resourceGuid'] instanceof String)) {
            throw new Error("Expected the field `resourceGuid` to be a primitive type in the JSON string but got " + data['resourceGuid']);
        }
        // validate the optional field `sku`
        if (data['sku']) { // data not null
          ApplicationGatewaySku.validateJSON(data['sku']);
        }
        if (data['sslCertificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sslCertificates'])) {
                throw new Error("Expected the field `sslCertificates` to be an array in the JSON data but got " + data['sslCertificates']);
            }
            // validate the optional field `sslCertificates` (array)
            for (const item of data['sslCertificates']) {
                Object.validateJSON(item);
            };
        }
        // validate the optional field `sslPolicy`
        if (data['sslPolicy']) { // data not null
          ApplicationGatewaySslPolicy.validateJSON(data['sslPolicy']);
        }
        if (data['trustedRootCertificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trustedRootCertificates'])) {
                throw new Error("Expected the field `trustedRootCertificates` to be an array in the JSON data but got " + data['trustedRootCertificates']);
            }
            // validate the optional field `trustedRootCertificates` (array)
            for (const item of data['trustedRootCertificates']) {
                Object.validateJSON(item);
            };
        }
        if (data['urlPathMaps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['urlPathMaps'])) {
                throw new Error("Expected the field `urlPathMaps` to be an array in the JSON data but got " + data['urlPathMaps']);
            }
            // validate the optional field `urlPathMaps` (array)
            for (const item of data['urlPathMaps']) {
                Object.validateJSON(item);
            };
        }
        // validate the optional field `webApplicationFirewallConfiguration`
        if (data['webApplicationFirewallConfiguration']) { // data not null
          ApplicationGatewayWebApplicationFirewallConfiguration.validateJSON(data['webApplicationFirewallConfiguration']);
        }

        return true;
    }


}



/**
 * Authentication certificates of the application gateway resource.
 * @member {Array.<Object>} authenticationCertificates
 */
ApplicationGatewayPropertiesFormat.prototype['authenticationCertificates'] = undefined;

/**
 * @member {module:model/ApplicationGatewayAutoscaleConfiguration} autoscaleConfiguration
 */
ApplicationGatewayPropertiesFormat.prototype['autoscaleConfiguration'] = undefined;

/**
 * Backend address pool of the application gateway resource.
 * @member {Array.<Object>} backendAddressPools
 */
ApplicationGatewayPropertiesFormat.prototype['backendAddressPools'] = undefined;

/**
 * Backend http settings of the application gateway resource.
 * @member {Array.<Object>} backendHttpSettingsCollection
 */
ApplicationGatewayPropertiesFormat.prototype['backendHttpSettingsCollection'] = undefined;

/**
 * Custom error configurations of the application gateway resource.
 * @member {Array.<module:model/ApplicationGatewayCustomError>} customErrorConfigurations
 */
ApplicationGatewayPropertiesFormat.prototype['customErrorConfigurations'] = undefined;

/**
 * Whether FIPS is enabled on the application gateway resource.
 * @member {Boolean} enableFips
 */
ApplicationGatewayPropertiesFormat.prototype['enableFips'] = undefined;

/**
 * Whether HTTP2 is enabled on the application gateway resource.
 * @member {Boolean} enableHttp2
 */
ApplicationGatewayPropertiesFormat.prototype['enableHttp2'] = undefined;

/**
 * Frontend IP addresses of the application gateway resource.
 * @member {Array.<Object>} frontendIPConfigurations
 */
ApplicationGatewayPropertiesFormat.prototype['frontendIPConfigurations'] = undefined;

/**
 * Frontend ports of the application gateway resource.
 * @member {Array.<Object>} frontendPorts
 */
ApplicationGatewayPropertiesFormat.prototype['frontendPorts'] = undefined;

/**
 * Subnets of application the gateway resource.
 * @member {Array.<Object>} gatewayIPConfigurations
 */
ApplicationGatewayPropertiesFormat.prototype['gatewayIPConfigurations'] = undefined;

/**
 * Http listeners of the application gateway resource.
 * @member {Array.<Object>} httpListeners
 */
ApplicationGatewayPropertiesFormat.prototype['httpListeners'] = undefined;

/**
 * Operational state of the application gateway resource.
 * @member {module:model/ApplicationGatewayPropertiesFormat.OperationalStateEnum} operationalState
 */
ApplicationGatewayPropertiesFormat.prototype['operationalState'] = undefined;

/**
 * Probes of the application gateway resource.
 * @member {Array.<Object>} probes
 */
ApplicationGatewayPropertiesFormat.prototype['probes'] = undefined;

/**
 * Provisioning state of the application gateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
 * @member {String} provisioningState
 */
ApplicationGatewayPropertiesFormat.prototype['provisioningState'] = undefined;

/**
 * Redirect configurations of the application gateway resource.
 * @member {Array.<Object>} redirectConfigurations
 */
ApplicationGatewayPropertiesFormat.prototype['redirectConfigurations'] = undefined;

/**
 * Request routing rules of the application gateway resource.
 * @member {Array.<Object>} requestRoutingRules
 */
ApplicationGatewayPropertiesFormat.prototype['requestRoutingRules'] = undefined;

/**
 * Resource GUID property of the application gateway resource.
 * @member {String} resourceGuid
 */
ApplicationGatewayPropertiesFormat.prototype['resourceGuid'] = undefined;

/**
 * @member {module:model/ApplicationGatewaySku} sku
 */
ApplicationGatewayPropertiesFormat.prototype['sku'] = undefined;

/**
 * SSL certificates of the application gateway resource.
 * @member {Array.<Object>} sslCertificates
 */
ApplicationGatewayPropertiesFormat.prototype['sslCertificates'] = undefined;

/**
 * @member {module:model/ApplicationGatewaySslPolicy} sslPolicy
 */
ApplicationGatewayPropertiesFormat.prototype['sslPolicy'] = undefined;

/**
 * Trusted Root certificates of the application gateway resource.
 * @member {Array.<Object>} trustedRootCertificates
 */
ApplicationGatewayPropertiesFormat.prototype['trustedRootCertificates'] = undefined;

/**
 * URL path map of the application gateway resource.
 * @member {Array.<Object>} urlPathMaps
 */
ApplicationGatewayPropertiesFormat.prototype['urlPathMaps'] = undefined;

/**
 * @member {module:model/ApplicationGatewayWebApplicationFirewallConfiguration} webApplicationFirewallConfiguration
 */
ApplicationGatewayPropertiesFormat.prototype['webApplicationFirewallConfiguration'] = undefined;





/**
 * Allowed values for the <code>operationalState</code> property.
 * @enum {String}
 * @readonly
 */
ApplicationGatewayPropertiesFormat['OperationalStateEnum'] = {

    /**
     * value: "Stopped"
     * @const
     */
    "Stopped": "Stopped",

    /**
     * value: "Starting"
     * @const
     */
    "Starting": "Starting",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Stopping"
     * @const
     */
    "Stopping": "Stopping"
};



export default ApplicationGatewayPropertiesFormat;

