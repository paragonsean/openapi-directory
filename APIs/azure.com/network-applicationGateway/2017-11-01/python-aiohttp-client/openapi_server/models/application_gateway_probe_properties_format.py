# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_gateway_probe_health_response_match import ApplicationGatewayProbeHealthResponseMatch
from openapi_server import util


class ApplicationGatewayProbePropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, interval: int=None, match: ApplicationGatewayProbeHealthResponseMatch=None, min_servers: int=None, path: str=None, pick_host_name_from_backend_http_settings: bool=None, protocol: str=None, provisioning_state: str=None, timeout: int=None, unhealthy_threshold: int=None):
        """ApplicationGatewayProbePropertiesFormat - a model defined in OpenAPI

        :param host: The host of this ApplicationGatewayProbePropertiesFormat.
        :param interval: The interval of this ApplicationGatewayProbePropertiesFormat.
        :param match: The match of this ApplicationGatewayProbePropertiesFormat.
        :param min_servers: The min_servers of this ApplicationGatewayProbePropertiesFormat.
        :param path: The path of this ApplicationGatewayProbePropertiesFormat.
        :param pick_host_name_from_backend_http_settings: The pick_host_name_from_backend_http_settings of this ApplicationGatewayProbePropertiesFormat.
        :param protocol: The protocol of this ApplicationGatewayProbePropertiesFormat.
        :param provisioning_state: The provisioning_state of this ApplicationGatewayProbePropertiesFormat.
        :param timeout: The timeout of this ApplicationGatewayProbePropertiesFormat.
        :param unhealthy_threshold: The unhealthy_threshold of this ApplicationGatewayProbePropertiesFormat.
        """
        self.openapi_types = {
            'host': str,
            'interval': int,
            'match': ApplicationGatewayProbeHealthResponseMatch,
            'min_servers': int,
            'path': str,
            'pick_host_name_from_backend_http_settings': bool,
            'protocol': str,
            'provisioning_state': str,
            'timeout': int,
            'unhealthy_threshold': int
        }

        self.attribute_map = {
            'host': 'host',
            'interval': 'interval',
            'match': 'match',
            'min_servers': 'minServers',
            'path': 'path',
            'pick_host_name_from_backend_http_settings': 'pickHostNameFromBackendHttpSettings',
            'protocol': 'protocol',
            'provisioning_state': 'provisioningState',
            'timeout': 'timeout',
            'unhealthy_threshold': 'unhealthyThreshold'
        }

        self._host = host
        self._interval = interval
        self._match = match
        self._min_servers = min_servers
        self._path = path
        self._pick_host_name_from_backend_http_settings = pick_host_name_from_backend_http_settings
        self._protocol = protocol
        self._provisioning_state = provisioning_state
        self._timeout = timeout
        self._unhealthy_threshold = unhealthy_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayProbePropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayProbePropertiesFormat of this ApplicationGatewayProbePropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this ApplicationGatewayProbePropertiesFormat.

        Host name to send the probe to.

        :return: The host of this ApplicationGatewayProbePropertiesFormat.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ApplicationGatewayProbePropertiesFormat.

        Host name to send the probe to.

        :param host: The host of this ApplicationGatewayProbePropertiesFormat.
        :type host: str
        """

        self._host = host

    @property
    def interval(self):
        """Gets the interval of this ApplicationGatewayProbePropertiesFormat.

        The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1 second to 86400 seconds.

        :return: The interval of this ApplicationGatewayProbePropertiesFormat.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ApplicationGatewayProbePropertiesFormat.

        The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1 second to 86400 seconds.

        :param interval: The interval of this ApplicationGatewayProbePropertiesFormat.
        :type interval: int
        """

        self._interval = interval

    @property
    def match(self):
        """Gets the match of this ApplicationGatewayProbePropertiesFormat.


        :return: The match of this ApplicationGatewayProbePropertiesFormat.
        :rtype: ApplicationGatewayProbeHealthResponseMatch
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this ApplicationGatewayProbePropertiesFormat.


        :param match: The match of this ApplicationGatewayProbePropertiesFormat.
        :type match: ApplicationGatewayProbeHealthResponseMatch
        """

        self._match = match

    @property
    def min_servers(self):
        """Gets the min_servers of this ApplicationGatewayProbePropertiesFormat.

        Minimum number of servers that are always marked healthy. Default value is 0.

        :return: The min_servers of this ApplicationGatewayProbePropertiesFormat.
        :rtype: int
        """
        return self._min_servers

    @min_servers.setter
    def min_servers(self, min_servers):
        """Sets the min_servers of this ApplicationGatewayProbePropertiesFormat.

        Minimum number of servers that are always marked healthy. Default value is 0.

        :param min_servers: The min_servers of this ApplicationGatewayProbePropertiesFormat.
        :type min_servers: int
        """

        self._min_servers = min_servers

    @property
    def path(self):
        """Gets the path of this ApplicationGatewayProbePropertiesFormat.

        Relative path of probe. Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>

        :return: The path of this ApplicationGatewayProbePropertiesFormat.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ApplicationGatewayProbePropertiesFormat.

        Relative path of probe. Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>

        :param path: The path of this ApplicationGatewayProbePropertiesFormat.
        :type path: str
        """

        self._path = path

    @property
    def pick_host_name_from_backend_http_settings(self):
        """Gets the pick_host_name_from_backend_http_settings of this ApplicationGatewayProbePropertiesFormat.

        Whether the host header should be picked from the backend http settings. Default value is false.

        :return: The pick_host_name_from_backend_http_settings of this ApplicationGatewayProbePropertiesFormat.
        :rtype: bool
        """
        return self._pick_host_name_from_backend_http_settings

    @pick_host_name_from_backend_http_settings.setter
    def pick_host_name_from_backend_http_settings(self, pick_host_name_from_backend_http_settings):
        """Sets the pick_host_name_from_backend_http_settings of this ApplicationGatewayProbePropertiesFormat.

        Whether the host header should be picked from the backend http settings. Default value is false.

        :param pick_host_name_from_backend_http_settings: The pick_host_name_from_backend_http_settings of this ApplicationGatewayProbePropertiesFormat.
        :type pick_host_name_from_backend_http_settings: bool
        """

        self._pick_host_name_from_backend_http_settings = pick_host_name_from_backend_http_settings

    @property
    def protocol(self):
        """Gets the protocol of this ApplicationGatewayProbePropertiesFormat.

        Protocol.

        :return: The protocol of this ApplicationGatewayProbePropertiesFormat.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ApplicationGatewayProbePropertiesFormat.

        Protocol.

        :param protocol: The protocol of this ApplicationGatewayProbePropertiesFormat.
        :type protocol: str
        """
        allowed_values = ["Http", "Https"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApplicationGatewayProbePropertiesFormat.

        Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :return: The provisioning_state of this ApplicationGatewayProbePropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApplicationGatewayProbePropertiesFormat.

        Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :param provisioning_state: The provisioning_state of this ApplicationGatewayProbePropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def timeout(self):
        """Gets the timeout of this ApplicationGatewayProbePropertiesFormat.

        the probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.

        :return: The timeout of this ApplicationGatewayProbePropertiesFormat.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ApplicationGatewayProbePropertiesFormat.

        the probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.

        :param timeout: The timeout of this ApplicationGatewayProbePropertiesFormat.
        :type timeout: int
        """

        self._timeout = timeout

    @property
    def unhealthy_threshold(self):
        """Gets the unhealthy_threshold of this ApplicationGatewayProbePropertiesFormat.

        The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second to 20.

        :return: The unhealthy_threshold of this ApplicationGatewayProbePropertiesFormat.
        :rtype: int
        """
        return self._unhealthy_threshold

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, unhealthy_threshold):
        """Sets the unhealthy_threshold of this ApplicationGatewayProbePropertiesFormat.

        The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second to 20.

        :param unhealthy_threshold: The unhealthy_threshold of this ApplicationGatewayProbePropertiesFormat.
        :type unhealthy_threshold: int
        """

        self._unhealthy_threshold = unhealthy_threshold
