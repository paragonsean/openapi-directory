# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cipher_suites_enum import CipherSuitesEnum
from openapi_server.models.policy_name_enum import PolicyNameEnum
from openapi_server.models.protocols_enum import ProtocolsEnum
from openapi_server import util


class ApplicationGatewaySslPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cipher_suites: List[CipherSuitesEnum]=None, disabled_ssl_protocols: List[ProtocolsEnum]=None, min_protocol_version: ProtocolsEnum=None, policy_name: PolicyNameEnum=None, policy_type: str=None):
        """ApplicationGatewaySslPolicy - a model defined in OpenAPI

        :param cipher_suites: The cipher_suites of this ApplicationGatewaySslPolicy.
        :param disabled_ssl_protocols: The disabled_ssl_protocols of this ApplicationGatewaySslPolicy.
        :param min_protocol_version: The min_protocol_version of this ApplicationGatewaySslPolicy.
        :param policy_name: The policy_name of this ApplicationGatewaySslPolicy.
        :param policy_type: The policy_type of this ApplicationGatewaySslPolicy.
        """
        self.openapi_types = {
            'cipher_suites': List[CipherSuitesEnum],
            'disabled_ssl_protocols': List[ProtocolsEnum],
            'min_protocol_version': ProtocolsEnum,
            'policy_name': PolicyNameEnum,
            'policy_type': str
        }

        self.attribute_map = {
            'cipher_suites': 'cipherSuites',
            'disabled_ssl_protocols': 'disabledSslProtocols',
            'min_protocol_version': 'minProtocolVersion',
            'policy_name': 'policyName',
            'policy_type': 'policyType'
        }

        self._cipher_suites = cipher_suites
        self._disabled_ssl_protocols = disabled_ssl_protocols
        self._min_protocol_version = min_protocol_version
        self._policy_name = policy_name
        self._policy_type = policy_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewaySslPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewaySslPolicy of this ApplicationGatewaySslPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cipher_suites(self):
        """Gets the cipher_suites of this ApplicationGatewaySslPolicy.

        Ssl cipher suites to be enabled in the specified order to application gateway.

        :return: The cipher_suites of this ApplicationGatewaySslPolicy.
        :rtype: List[CipherSuitesEnum]
        """
        return self._cipher_suites

    @cipher_suites.setter
    def cipher_suites(self, cipher_suites):
        """Sets the cipher_suites of this ApplicationGatewaySslPolicy.

        Ssl cipher suites to be enabled in the specified order to application gateway.

        :param cipher_suites: The cipher_suites of this ApplicationGatewaySslPolicy.
        :type cipher_suites: List[CipherSuitesEnum]
        """

        self._cipher_suites = cipher_suites

    @property
    def disabled_ssl_protocols(self):
        """Gets the disabled_ssl_protocols of this ApplicationGatewaySslPolicy.

        Ssl protocols to be disabled on application gateway.

        :return: The disabled_ssl_protocols of this ApplicationGatewaySslPolicy.
        :rtype: List[ProtocolsEnum]
        """
        return self._disabled_ssl_protocols

    @disabled_ssl_protocols.setter
    def disabled_ssl_protocols(self, disabled_ssl_protocols):
        """Sets the disabled_ssl_protocols of this ApplicationGatewaySslPolicy.

        Ssl protocols to be disabled on application gateway.

        :param disabled_ssl_protocols: The disabled_ssl_protocols of this ApplicationGatewaySslPolicy.
        :type disabled_ssl_protocols: List[ProtocolsEnum]
        """

        self._disabled_ssl_protocols = disabled_ssl_protocols

    @property
    def min_protocol_version(self):
        """Gets the min_protocol_version of this ApplicationGatewaySslPolicy.


        :return: The min_protocol_version of this ApplicationGatewaySslPolicy.
        :rtype: ProtocolsEnum
        """
        return self._min_protocol_version

    @min_protocol_version.setter
    def min_protocol_version(self, min_protocol_version):
        """Sets the min_protocol_version of this ApplicationGatewaySslPolicy.


        :param min_protocol_version: The min_protocol_version of this ApplicationGatewaySslPolicy.
        :type min_protocol_version: ProtocolsEnum
        """

        self._min_protocol_version = min_protocol_version

    @property
    def policy_name(self):
        """Gets the policy_name of this ApplicationGatewaySslPolicy.


        :return: The policy_name of this ApplicationGatewaySslPolicy.
        :rtype: PolicyNameEnum
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this ApplicationGatewaySslPolicy.


        :param policy_name: The policy_name of this ApplicationGatewaySslPolicy.
        :type policy_name: PolicyNameEnum
        """

        self._policy_name = policy_name

    @property
    def policy_type(self):
        """Gets the policy_type of this ApplicationGatewaySslPolicy.

        Type of Ssl Policy

        :return: The policy_type of this ApplicationGatewaySslPolicy.
        :rtype: str
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this ApplicationGatewaySslPolicy.

        Type of Ssl Policy

        :param policy_type: The policy_type of this ApplicationGatewaySslPolicy.
        :type policy_type: str
        """
        allowed_values = ["Predefined", "Custom"]  # noqa: E501
        if policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_type` ({0}), must be one of {1}"
                .format(policy_type, allowed_values)
            )

        self._policy_type = policy_type
