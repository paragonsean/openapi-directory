/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Application gateway BackendHealthHttp settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:36.607151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayBackendHealthHttpSettings {
  public static final String SERIALIZED_NAME_BACKEND_HTTP_SETTINGS = "backendHttpSettings";
  @SerializedName(SERIALIZED_NAME_BACKEND_HTTP_SETTINGS)
  private Object backendHttpSettings;

  public static final String SERIALIZED_NAME_SERVERS = "servers";
  @SerializedName(SERIALIZED_NAME_SERVERS)
  private List<ApplicationGatewayBackendHealthServer> servers = new ArrayList<>();

  public ApplicationGatewayBackendHealthHttpSettings() {
  }

  public ApplicationGatewayBackendHealthHttpSettings backendHttpSettings(Object backendHttpSettings) {
    this.backendHttpSettings = backendHttpSettings;
    return this;
  }

  /**
   * Get backendHttpSettings
   * @return backendHttpSettings
   */
  @javax.annotation.Nullable
  public Object getBackendHttpSettings() {
    return backendHttpSettings;
  }

  public void setBackendHttpSettings(Object backendHttpSettings) {
    this.backendHttpSettings = backendHttpSettings;
  }


  public ApplicationGatewayBackendHealthHttpSettings servers(List<ApplicationGatewayBackendHealthServer> servers) {
    this.servers = servers;
    return this;
  }

  public ApplicationGatewayBackendHealthHttpSettings addServersItem(ApplicationGatewayBackendHealthServer serversItem) {
    if (this.servers == null) {
      this.servers = new ArrayList<>();
    }
    this.servers.add(serversItem);
    return this;
  }

  /**
   * List of ApplicationGatewayBackendHealthServer resources.
   * @return servers
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendHealthServer> getServers() {
    return servers;
  }

  public void setServers(List<ApplicationGatewayBackendHealthServer> servers) {
    this.servers = servers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayBackendHealthHttpSettings applicationGatewayBackendHealthHttpSettings = (ApplicationGatewayBackendHealthHttpSettings) o;
    return Objects.equals(this.backendHttpSettings, applicationGatewayBackendHealthHttpSettings.backendHttpSettings) &&
        Objects.equals(this.servers, applicationGatewayBackendHealthHttpSettings.servers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendHttpSettings, servers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayBackendHealthHttpSettings {\n");
    sb.append("    backendHttpSettings: ").append(toIndentedString(backendHttpSettings)).append("\n");
    sb.append("    servers: ").append(toIndentedString(servers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendHttpSettings");
    openapiFields.add("servers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayBackendHealthHttpSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayBackendHealthHttpSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayBackendHealthHttpSettings is not found in the empty JSON string", ApplicationGatewayBackendHealthHttpSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayBackendHealthHttpSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayBackendHealthHttpSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backendHttpSettings`
      if (jsonObj.get("backendHttpSettings") != null && !jsonObj.get("backendHttpSettings").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("backendHttpSettings"));
      }
      if (jsonObj.get("servers") != null && !jsonObj.get("servers").isJsonNull()) {
        JsonArray jsonArrayservers = jsonObj.getAsJsonArray("servers");
        if (jsonArrayservers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("servers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `servers` to be an array in the JSON string but got `%s`", jsonObj.get("servers").toString()));
          }

          // validate the optional field `servers` (array)
          for (int i = 0; i < jsonArrayservers.size(); i++) {
            ApplicationGatewayBackendHealthServer.validateJsonElement(jsonArrayservers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayBackendHealthHttpSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayBackendHealthHttpSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayBackendHealthHttpSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayBackendHealthHttpSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayBackendHealthHttpSettings>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayBackendHealthHttpSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayBackendHealthHttpSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayBackendHealthHttpSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayBackendHealthHttpSettings
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayBackendHealthHttpSettings
   */
  public static ApplicationGatewayBackendHealthHttpSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayBackendHealthHttpSettings.class);
  }

  /**
   * Convert an instance of ApplicationGatewayBackendHealthHttpSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

