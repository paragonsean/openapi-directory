/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayProbeHealthResponseMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayProbeHealthResponseMatch::OAIApplicationGatewayProbeHealthResponseMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayProbeHealthResponseMatch::OAIApplicationGatewayProbeHealthResponseMatch() {
    this->initializeModel();
}

OAIApplicationGatewayProbeHealthResponseMatch::~OAIApplicationGatewayProbeHealthResponseMatch() {}

void OAIApplicationGatewayProbeHealthResponseMatch::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_status_codes_isSet = false;
    m_status_codes_isValid = false;
}

void OAIApplicationGatewayProbeHealthResponseMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayProbeHealthResponseMatch::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_status_codes_isValid = ::OpenAPI::fromJsonValue(m_status_codes, json[QString("statusCodes")]);
    m_status_codes_isSet = !json[QString("statusCodes")].isNull() && m_status_codes_isValid;
}

QString OAIApplicationGatewayProbeHealthResponseMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayProbeHealthResponseMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_status_codes.size() > 0) {
        obj.insert(QString("statusCodes"), ::OpenAPI::toJsonValue(m_status_codes));
    }
    return obj;
}

QString OAIApplicationGatewayProbeHealthResponseMatch::getBody() const {
    return m_body;
}
void OAIApplicationGatewayProbeHealthResponseMatch::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIApplicationGatewayProbeHealthResponseMatch::is_body_Set() const{
    return m_body_isSet;
}

bool OAIApplicationGatewayProbeHealthResponseMatch::is_body_Valid() const{
    return m_body_isValid;
}

QList<QString> OAIApplicationGatewayProbeHealthResponseMatch::getStatusCodes() const {
    return m_status_codes;
}
void OAIApplicationGatewayProbeHealthResponseMatch::setStatusCodes(const QList<QString> &status_codes) {
    m_status_codes = status_codes;
    m_status_codes_isSet = true;
}

bool OAIApplicationGatewayProbeHealthResponseMatch::is_status_codes_Set() const{
    return m_status_codes_isSet;
}

bool OAIApplicationGatewayProbeHealthResponseMatch::is_status_codes_Valid() const{
    return m_status_codes_isValid;
}

bool OAIApplicationGatewayProbeHealthResponseMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayProbeHealthResponseMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
