/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PrivateIPAllocationMethod;
import org.openapitools.client.model.PublicIPAddress;
import org.openapitools.client.model.Subnet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of IP configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:58.775570-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties {
  public static final String SERIALIZED_NAME_PRIVATE_I_P_ADDRESS = "privateIPAddress";
  @SerializedName(SERIALIZED_NAME_PRIVATE_I_P_ADDRESS)
  private String privateIPAddress;

  public static final String SERIALIZED_NAME_PRIVATE_I_P_ALLOCATION_METHOD = "privateIPAllocationMethod";
  @SerializedName(SERIALIZED_NAME_PRIVATE_I_P_ALLOCATION_METHOD)
  private PrivateIPAllocationMethod privateIPAllocationMethod = null;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_PUBLIC_I_P_ADDRESS = "publicIPAddress";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P_ADDRESS)
  private PublicIPAddress publicIPAddress = null;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private Subnet subnet = null;

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties() {
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties privateIPAddress(String privateIPAddress) {
    this.privateIPAddress = privateIPAddress;
    return this;
  }

  /**
   * The private IP address of the IP configuration.
   * @return privateIPAddress
   */
  @javax.annotation.Nullable
  public String getPrivateIPAddress() {
    return privateIPAddress;
  }

  public void setPrivateIPAddress(String privateIPAddress) {
    this.privateIPAddress = privateIPAddress;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties privateIPAllocationMethod(PrivateIPAllocationMethod privateIPAllocationMethod) {
    this.privateIPAllocationMethod = privateIPAllocationMethod;
    return this;
  }

  /**
   * Get privateIPAllocationMethod
   * @return privateIPAllocationMethod
   */
  @javax.annotation.Nullable
  public PrivateIPAllocationMethod getPrivateIPAllocationMethod() {
    return privateIPAllocationMethod;
  }

  public void setPrivateIPAllocationMethod(PrivateIPAllocationMethod privateIPAllocationMethod) {
    this.privateIPAllocationMethod = privateIPAllocationMethod;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets the provisioning state of the public IP resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties publicIPAddress(PublicIPAddress publicIPAddress) {
    this.publicIPAddress = publicIPAddress;
    return this;
  }

  /**
   * Get publicIPAddress
   * @return publicIPAddress
   */
  @javax.annotation.Nullable
  public PublicIPAddress getPublicIPAddress() {
    return publicIPAddress;
  }

  public void setPublicIPAddress(PublicIPAddress publicIPAddress) {
    this.publicIPAddress = publicIPAddress;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties subnet(Subnet subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * Get subnet
   * @return subnet
   */
  @javax.annotation.Nullable
  public Subnet getSubnet() {
    return subnet;
  }

  public void setSubnet(Subnet subnet) {
    this.subnet = subnet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties = (ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties) o;
    return Objects.equals(this.privateIPAddress, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties.privateIPAddress) &&
        Objects.equals(this.privateIPAllocationMethod, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties.privateIPAllocationMethod) &&
        Objects.equals(this.provisioningState, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties.provisioningState) &&
        Objects.equals(this.publicIPAddress, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties.publicIPAddress) &&
        Objects.equals(this.subnet, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties.subnet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(privateIPAddress, privateIPAllocationMethod, provisioningState, publicIPAddress, subnet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties {\n");
    sb.append("    privateIPAddress: ").append(toIndentedString(privateIPAddress)).append("\n");
    sb.append("    privateIPAllocationMethod: ").append(toIndentedString(privateIPAllocationMethod)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publicIPAddress: ").append(toIndentedString(publicIPAddress)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("privateIPAddress");
    openapiFields.add("privateIPAllocationMethod");
    openapiFields.add("provisioningState");
    openapiFields.add("publicIPAddress");
    openapiFields.add("subnet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties is not found in the empty JSON string", ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("privateIPAddress") != null && !jsonObj.get("privateIPAddress").isJsonNull()) && !jsonObj.get("privateIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateIPAddress").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties
   */
  public static ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties.class);
  }

  /**
   * Convert an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

