/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInner;
import org.openapitools.client.model.Items;
import org.openapitools.client.model.Subnet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the private endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:58.775570-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties {
  public static final String SERIALIZED_NAME_MANUAL_PRIVATE_LINK_SERVICE_CONNECTIONS = "manualPrivateLinkServiceConnections";
  @SerializedName(SERIALIZED_NAME_MANUAL_PRIVATE_LINK_SERVICE_CONNECTIONS)
  private List<Items> manualPrivateLinkServiceConnections = new ArrayList<>();

  public static final String SERIALIZED_NAME_NETWORK_INTERFACES = "networkInterfaces";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACES)
  private List<Items> networkInterfaces = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIVATE_LINK_SERVICE_CONNECTIONS = "privateLinkServiceConnections";
  @SerializedName(SERIALIZED_NAME_PRIVATE_LINK_SERVICE_CONNECTIONS)
  private List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInner> privateLinkServiceConnections = new ArrayList<>();

  /**
   * The current provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private Subnet subnet = null;

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties() {
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties(
     List<Items> networkInterfaces, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.networkInterfaces = networkInterfaces;
    this.provisioningState = provisioningState;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties manualPrivateLinkServiceConnections(List<Items> manualPrivateLinkServiceConnections) {
    this.manualPrivateLinkServiceConnections = manualPrivateLinkServiceConnections;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties addManualPrivateLinkServiceConnectionsItem(Items manualPrivateLinkServiceConnectionsItem) {
    if (this.manualPrivateLinkServiceConnections == null) {
      this.manualPrivateLinkServiceConnections = new ArrayList<>();
    }
    this.manualPrivateLinkServiceConnections.add(manualPrivateLinkServiceConnectionsItem);
    return this;
  }

  /**
   * A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource.
   * @return manualPrivateLinkServiceConnections
   */
  @javax.annotation.Nullable
  public List<Items> getManualPrivateLinkServiceConnections() {
    return manualPrivateLinkServiceConnections;
  }

  public void setManualPrivateLinkServiceConnections(List<Items> manualPrivateLinkServiceConnections) {
    this.manualPrivateLinkServiceConnections = manualPrivateLinkServiceConnections;
  }


  /**
   * Gets an array of references to the network interfaces created for this private endpoint.
   * @return networkInterfaces
   */
  @javax.annotation.Nullable
  public List<Items> getNetworkInterfaces() {
    return networkInterfaces;
  }



  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties privateLinkServiceConnections(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInner> privateLinkServiceConnections) {
    this.privateLinkServiceConnections = privateLinkServiceConnections;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties addPrivateLinkServiceConnectionsItem(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInner privateLinkServiceConnectionsItem) {
    if (this.privateLinkServiceConnections == null) {
      this.privateLinkServiceConnections = new ArrayList<>();
    }
    this.privateLinkServiceConnections.add(privateLinkServiceConnectionsItem);
    return this;
  }

  /**
   * A grouping of information about the connection to the remote resource.
   * @return privateLinkServiceConnections
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInner> getPrivateLinkServiceConnections() {
    return privateLinkServiceConnections;
  }

  public void setPrivateLinkServiceConnections(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInner> privateLinkServiceConnections) {
    this.privateLinkServiceConnections = privateLinkServiceConnections;
  }


  /**
   * The current provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties subnet(Subnet subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * Get subnet
   * @return subnet
   */
  @javax.annotation.Nullable
  public Subnet getSubnet() {
    return subnet;
  }

  public void setSubnet(Subnet subnet) {
    this.subnet = subnet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties = (ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties) o;
    return Objects.equals(this.manualPrivateLinkServiceConnections, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties.manualPrivateLinkServiceConnections) &&
        Objects.equals(this.networkInterfaces, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties.networkInterfaces) &&
        Objects.equals(this.privateLinkServiceConnections, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties.privateLinkServiceConnections) &&
        Objects.equals(this.provisioningState, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties.provisioningState) &&
        Objects.equals(this.subnet, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties.subnet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(manualPrivateLinkServiceConnections, networkInterfaces, privateLinkServiceConnections, provisioningState, subnet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties {\n");
    sb.append("    manualPrivateLinkServiceConnections: ").append(toIndentedString(manualPrivateLinkServiceConnections)).append("\n");
    sb.append("    networkInterfaces: ").append(toIndentedString(networkInterfaces)).append("\n");
    sb.append("    privateLinkServiceConnections: ").append(toIndentedString(privateLinkServiceConnections)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("manualPrivateLinkServiceConnections");
    openapiFields.add("networkInterfaces");
    openapiFields.add("privateLinkServiceConnections");
    openapiFields.add("provisioningState");
    openapiFields.add("subnet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties is not found in the empty JSON string", ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("manualPrivateLinkServiceConnections") != null && !jsonObj.get("manualPrivateLinkServiceConnections").isJsonNull() && !jsonObj.get("manualPrivateLinkServiceConnections").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `manualPrivateLinkServiceConnections` to be an array in the JSON string but got `%s`", jsonObj.get("manualPrivateLinkServiceConnections").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("networkInterfaces") != null && !jsonObj.get("networkInterfaces").isJsonNull() && !jsonObj.get("networkInterfaces").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkInterfaces` to be an array in the JSON string but got `%s`", jsonObj.get("networkInterfaces").toString()));
      }
      if (jsonObj.get("privateLinkServiceConnections") != null && !jsonObj.get("privateLinkServiceConnections").isJsonNull()) {
        JsonArray jsonArrayprivateLinkServiceConnections = jsonObj.getAsJsonArray("privateLinkServiceConnections");
        if (jsonArrayprivateLinkServiceConnections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("privateLinkServiceConnections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `privateLinkServiceConnections` to be an array in the JSON string but got `%s`", jsonObj.get("privateLinkServiceConnections").toString()));
          }

          // validate the optional field `privateLinkServiceConnections` (array)
          for (int i = 0; i < jsonArrayprivateLinkServiceConnections.size(); i++) {
            ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInner.validateJsonElement(jsonArrayprivateLinkServiceConnections.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties
   */
  public static ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties.class);
  }

  /**
   * Convert an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

