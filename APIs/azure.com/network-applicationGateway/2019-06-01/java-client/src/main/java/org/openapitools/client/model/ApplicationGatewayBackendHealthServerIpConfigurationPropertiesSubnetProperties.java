/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesDelegationsInner;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationProfilesInner;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInner;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroup;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInner;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesResourceNavigationLinksInner;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTable;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceAssociationLinksInner;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointPoliciesInner;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointsInner;
import org.openapitools.client.model.Model0;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the subnet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:58.775570-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties {
  public static final String SERIALIZED_NAME_ADDRESS_PREFIX = "addressPrefix";
  @SerializedName(SERIALIZED_NAME_ADDRESS_PREFIX)
  private String addressPrefix;

  public static final String SERIALIZED_NAME_ADDRESS_PREFIXES = "addressPrefixes";
  @SerializedName(SERIALIZED_NAME_ADDRESS_PREFIXES)
  private List<String> addressPrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELEGATIONS = "delegations";
  @SerializedName(SERIALIZED_NAME_DELEGATIONS)
  private List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesDelegationsInner> delegations = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_CONFIGURATION_PROFILES = "ipConfigurationProfiles";
  @SerializedName(SERIALIZED_NAME_IP_CONFIGURATION_PROFILES)
  private List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationProfilesInner> ipConfigurationProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_CONFIGURATIONS = "ipConfigurations";
  @SerializedName(SERIALIZED_NAME_IP_CONFIGURATIONS)
  private List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInner> ipConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAT_GATEWAY = "natGateway";
  @SerializedName(SERIALIZED_NAME_NAT_GATEWAY)
  private Model0 natGateway = null;

  public static final String SERIALIZED_NAME_NETWORK_SECURITY_GROUP = "networkSecurityGroup";
  @SerializedName(SERIALIZED_NAME_NETWORK_SECURITY_GROUP)
  private ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroup networkSecurityGroup;

  public static final String SERIALIZED_NAME_PRIVATE_ENDPOINT_NETWORK_POLICIES = "privateEndpointNetworkPolicies";
  @SerializedName(SERIALIZED_NAME_PRIVATE_ENDPOINT_NETWORK_POLICIES)
  private String privateEndpointNetworkPolicies;

  public static final String SERIALIZED_NAME_PRIVATE_ENDPOINTS = "privateEndpoints";
  @SerializedName(SERIALIZED_NAME_PRIVATE_ENDPOINTS)
  private List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInner> privateEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIVATE_LINK_SERVICE_NETWORK_POLICIES = "privateLinkServiceNetworkPolicies";
  @SerializedName(SERIALIZED_NAME_PRIVATE_LINK_SERVICE_NETWORK_POLICIES)
  private String privateLinkServiceNetworkPolicies;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private String purpose;

  public static final String SERIALIZED_NAME_RESOURCE_NAVIGATION_LINKS = "resourceNavigationLinks";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAVIGATION_LINKS)
  private List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesResourceNavigationLinksInner> resourceNavigationLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROUTE_TABLE = "routeTable";
  @SerializedName(SERIALIZED_NAME_ROUTE_TABLE)
  private ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTable routeTable;

  public static final String SERIALIZED_NAME_SERVICE_ASSOCIATION_LINKS = "serviceAssociationLinks";
  @SerializedName(SERIALIZED_NAME_SERVICE_ASSOCIATION_LINKS)
  private List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceAssociationLinksInner> serviceAssociationLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_ENDPOINT_POLICIES = "serviceEndpointPolicies";
  @SerializedName(SERIALIZED_NAME_SERVICE_ENDPOINT_POLICIES)
  private List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointPoliciesInner> serviceEndpointPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_ENDPOINTS = "serviceEndpoints";
  @SerializedName(SERIALIZED_NAME_SERVICE_ENDPOINTS)
  private List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointsInner> serviceEndpoints = new ArrayList<>();

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties() {
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties(
     List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationProfilesInner> ipConfigurationProfiles, 
     List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInner> ipConfigurations, 
     List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInner> privateEndpoints, 
     String purpose
  ) {
    this();
    this.ipConfigurationProfiles = ipConfigurationProfiles;
    this.ipConfigurations = ipConfigurations;
    this.privateEndpoints = privateEndpoints;
    this.purpose = purpose;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties addressPrefix(String addressPrefix) {
    this.addressPrefix = addressPrefix;
    return this;
  }

  /**
   * The address prefix for the subnet.
   * @return addressPrefix
   */
  @javax.annotation.Nullable
  public String getAddressPrefix() {
    return addressPrefix;
  }

  public void setAddressPrefix(String addressPrefix) {
    this.addressPrefix = addressPrefix;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties addressPrefixes(List<String> addressPrefixes) {
    this.addressPrefixes = addressPrefixes;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties addAddressPrefixesItem(String addressPrefixesItem) {
    if (this.addressPrefixes == null) {
      this.addressPrefixes = new ArrayList<>();
    }
    this.addressPrefixes.add(addressPrefixesItem);
    return this;
  }

  /**
   * List of address prefixes for the subnet.
   * @return addressPrefixes
   */
  @javax.annotation.Nullable
  public List<String> getAddressPrefixes() {
    return addressPrefixes;
  }

  public void setAddressPrefixes(List<String> addressPrefixes) {
    this.addressPrefixes = addressPrefixes;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties delegations(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesDelegationsInner> delegations) {
    this.delegations = delegations;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties addDelegationsItem(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesDelegationsInner delegationsItem) {
    if (this.delegations == null) {
      this.delegations = new ArrayList<>();
    }
    this.delegations.add(delegationsItem);
    return this;
  }

  /**
   * Gets an array of references to the delegations on the subnet.
   * @return delegations
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesDelegationsInner> getDelegations() {
    return delegations;
  }

  public void setDelegations(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesDelegationsInner> delegations) {
    this.delegations = delegations;
  }


  /**
   * Array of IP configuration profiles which reference this subnet.
   * @return ipConfigurationProfiles
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationProfilesInner> getIpConfigurationProfiles() {
    return ipConfigurationProfiles;
  }



  /**
   * Gets an array of references to the network interface IP configurations using subnet.
   * @return ipConfigurations
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInner> getIpConfigurations() {
    return ipConfigurations;
  }



  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties natGateway(Model0 natGateway) {
    this.natGateway = natGateway;
    return this;
  }

  /**
   * Get natGateway
   * @return natGateway
   */
  @javax.annotation.Nullable
  public Model0 getNatGateway() {
    return natGateway;
  }

  public void setNatGateway(Model0 natGateway) {
    this.natGateway = natGateway;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties networkSecurityGroup(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroup networkSecurityGroup) {
    this.networkSecurityGroup = networkSecurityGroup;
    return this;
  }

  /**
   * Get networkSecurityGroup
   * @return networkSecurityGroup
   */
  @javax.annotation.Nullable
  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroup getNetworkSecurityGroup() {
    return networkSecurityGroup;
  }

  public void setNetworkSecurityGroup(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroup networkSecurityGroup) {
    this.networkSecurityGroup = networkSecurityGroup;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties privateEndpointNetworkPolicies(String privateEndpointNetworkPolicies) {
    this.privateEndpointNetworkPolicies = privateEndpointNetworkPolicies;
    return this;
  }

  /**
   * Enable or Disable apply network policies on private end point in the subnet.
   * @return privateEndpointNetworkPolicies
   */
  @javax.annotation.Nullable
  public String getPrivateEndpointNetworkPolicies() {
    return privateEndpointNetworkPolicies;
  }

  public void setPrivateEndpointNetworkPolicies(String privateEndpointNetworkPolicies) {
    this.privateEndpointNetworkPolicies = privateEndpointNetworkPolicies;
  }


  /**
   * An array of references to private endpoints.
   * @return privateEndpoints
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInner> getPrivateEndpoints() {
    return privateEndpoints;
  }



  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties privateLinkServiceNetworkPolicies(String privateLinkServiceNetworkPolicies) {
    this.privateLinkServiceNetworkPolicies = privateLinkServiceNetworkPolicies;
    return this;
  }

  /**
   * Enable or Disable apply network policies on private link service in the subnet.
   * @return privateLinkServiceNetworkPolicies
   */
  @javax.annotation.Nullable
  public String getPrivateLinkServiceNetworkPolicies() {
    return privateLinkServiceNetworkPolicies;
  }

  public void setPrivateLinkServiceNetworkPolicies(String privateLinkServiceNetworkPolicies) {
    this.privateLinkServiceNetworkPolicies = privateLinkServiceNetworkPolicies;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  /**
   * A read-only string identifying the intention of use for this subnet based on delegations and other user-defined properties.
   * @return purpose
   */
  @javax.annotation.Nullable
  public String getPurpose() {
    return purpose;
  }



  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties resourceNavigationLinks(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesResourceNavigationLinksInner> resourceNavigationLinks) {
    this.resourceNavigationLinks = resourceNavigationLinks;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties addResourceNavigationLinksItem(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesResourceNavigationLinksInner resourceNavigationLinksItem) {
    if (this.resourceNavigationLinks == null) {
      this.resourceNavigationLinks = new ArrayList<>();
    }
    this.resourceNavigationLinks.add(resourceNavigationLinksItem);
    return this;
  }

  /**
   * Gets an array of references to the external resources using subnet.
   * @return resourceNavigationLinks
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesResourceNavigationLinksInner> getResourceNavigationLinks() {
    return resourceNavigationLinks;
  }

  public void setResourceNavigationLinks(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesResourceNavigationLinksInner> resourceNavigationLinks) {
    this.resourceNavigationLinks = resourceNavigationLinks;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties routeTable(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTable routeTable) {
    this.routeTable = routeTable;
    return this;
  }

  /**
   * Get routeTable
   * @return routeTable
   */
  @javax.annotation.Nullable
  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTable getRouteTable() {
    return routeTable;
  }

  public void setRouteTable(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTable routeTable) {
    this.routeTable = routeTable;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties serviceAssociationLinks(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceAssociationLinksInner> serviceAssociationLinks) {
    this.serviceAssociationLinks = serviceAssociationLinks;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties addServiceAssociationLinksItem(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceAssociationLinksInner serviceAssociationLinksItem) {
    if (this.serviceAssociationLinks == null) {
      this.serviceAssociationLinks = new ArrayList<>();
    }
    this.serviceAssociationLinks.add(serviceAssociationLinksItem);
    return this;
  }

  /**
   * Gets an array of references to services injecting into this subnet.
   * @return serviceAssociationLinks
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceAssociationLinksInner> getServiceAssociationLinks() {
    return serviceAssociationLinks;
  }

  public void setServiceAssociationLinks(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceAssociationLinksInner> serviceAssociationLinks) {
    this.serviceAssociationLinks = serviceAssociationLinks;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties serviceEndpointPolicies(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointPoliciesInner> serviceEndpointPolicies) {
    this.serviceEndpointPolicies = serviceEndpointPolicies;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties addServiceEndpointPoliciesItem(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointPoliciesInner serviceEndpointPoliciesItem) {
    if (this.serviceEndpointPolicies == null) {
      this.serviceEndpointPolicies = new ArrayList<>();
    }
    this.serviceEndpointPolicies.add(serviceEndpointPoliciesItem);
    return this;
  }

  /**
   * An array of service endpoint policies.
   * @return serviceEndpointPolicies
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointPoliciesInner> getServiceEndpointPolicies() {
    return serviceEndpointPolicies;
  }

  public void setServiceEndpointPolicies(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointPoliciesInner> serviceEndpointPolicies) {
    this.serviceEndpointPolicies = serviceEndpointPolicies;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties serviceEndpoints(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointsInner> serviceEndpoints) {
    this.serviceEndpoints = serviceEndpoints;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties addServiceEndpointsItem(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointsInner serviceEndpointsItem) {
    if (this.serviceEndpoints == null) {
      this.serviceEndpoints = new ArrayList<>();
    }
    this.serviceEndpoints.add(serviceEndpointsItem);
    return this;
  }

  /**
   * An array of service endpoints.
   * @return serviceEndpoints
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointsInner> getServiceEndpoints() {
    return serviceEndpoints;
  }

  public void setServiceEndpoints(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointsInner> serviceEndpoints) {
    this.serviceEndpoints = serviceEndpoints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties = (ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties) o;
    return Objects.equals(this.addressPrefix, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.addressPrefix) &&
        Objects.equals(this.addressPrefixes, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.addressPrefixes) &&
        Objects.equals(this.delegations, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.delegations) &&
        Objects.equals(this.ipConfigurationProfiles, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.ipConfigurationProfiles) &&
        Objects.equals(this.ipConfigurations, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.ipConfigurations) &&
        Objects.equals(this.natGateway, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.natGateway) &&
        Objects.equals(this.networkSecurityGroup, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.networkSecurityGroup) &&
        Objects.equals(this.privateEndpointNetworkPolicies, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.privateEndpointNetworkPolicies) &&
        Objects.equals(this.privateEndpoints, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.privateEndpoints) &&
        Objects.equals(this.privateLinkServiceNetworkPolicies, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.privateLinkServiceNetworkPolicies) &&
        Objects.equals(this.provisioningState, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.provisioningState) &&
        Objects.equals(this.purpose, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.purpose) &&
        Objects.equals(this.resourceNavigationLinks, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.resourceNavigationLinks) &&
        Objects.equals(this.routeTable, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.routeTable) &&
        Objects.equals(this.serviceAssociationLinks, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.serviceAssociationLinks) &&
        Objects.equals(this.serviceEndpointPolicies, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.serviceEndpointPolicies) &&
        Objects.equals(this.serviceEndpoints, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.serviceEndpoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressPrefix, addressPrefixes, delegations, ipConfigurationProfiles, ipConfigurations, natGateway, networkSecurityGroup, privateEndpointNetworkPolicies, privateEndpoints, privateLinkServiceNetworkPolicies, provisioningState, purpose, resourceNavigationLinks, routeTable, serviceAssociationLinks, serviceEndpointPolicies, serviceEndpoints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties {\n");
    sb.append("    addressPrefix: ").append(toIndentedString(addressPrefix)).append("\n");
    sb.append("    addressPrefixes: ").append(toIndentedString(addressPrefixes)).append("\n");
    sb.append("    delegations: ").append(toIndentedString(delegations)).append("\n");
    sb.append("    ipConfigurationProfiles: ").append(toIndentedString(ipConfigurationProfiles)).append("\n");
    sb.append("    ipConfigurations: ").append(toIndentedString(ipConfigurations)).append("\n");
    sb.append("    natGateway: ").append(toIndentedString(natGateway)).append("\n");
    sb.append("    networkSecurityGroup: ").append(toIndentedString(networkSecurityGroup)).append("\n");
    sb.append("    privateEndpointNetworkPolicies: ").append(toIndentedString(privateEndpointNetworkPolicies)).append("\n");
    sb.append("    privateEndpoints: ").append(toIndentedString(privateEndpoints)).append("\n");
    sb.append("    privateLinkServiceNetworkPolicies: ").append(toIndentedString(privateLinkServiceNetworkPolicies)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    resourceNavigationLinks: ").append(toIndentedString(resourceNavigationLinks)).append("\n");
    sb.append("    routeTable: ").append(toIndentedString(routeTable)).append("\n");
    sb.append("    serviceAssociationLinks: ").append(toIndentedString(serviceAssociationLinks)).append("\n");
    sb.append("    serviceEndpointPolicies: ").append(toIndentedString(serviceEndpointPolicies)).append("\n");
    sb.append("    serviceEndpoints: ").append(toIndentedString(serviceEndpoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressPrefix");
    openapiFields.add("addressPrefixes");
    openapiFields.add("delegations");
    openapiFields.add("ipConfigurationProfiles");
    openapiFields.add("ipConfigurations");
    openapiFields.add("natGateway");
    openapiFields.add("networkSecurityGroup");
    openapiFields.add("privateEndpointNetworkPolicies");
    openapiFields.add("privateEndpoints");
    openapiFields.add("privateLinkServiceNetworkPolicies");
    openapiFields.add("provisioningState");
    openapiFields.add("purpose");
    openapiFields.add("resourceNavigationLinks");
    openapiFields.add("routeTable");
    openapiFields.add("serviceAssociationLinks");
    openapiFields.add("serviceEndpointPolicies");
    openapiFields.add("serviceEndpoints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties is not found in the empty JSON string", ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressPrefix") != null && !jsonObj.get("addressPrefix").isJsonNull()) && !jsonObj.get("addressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressPrefix").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("addressPrefixes") != null && !jsonObj.get("addressPrefixes").isJsonNull() && !jsonObj.get("addressPrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressPrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("addressPrefixes").toString()));
      }
      if (jsonObj.get("delegations") != null && !jsonObj.get("delegations").isJsonNull()) {
        JsonArray jsonArraydelegations = jsonObj.getAsJsonArray("delegations");
        if (jsonArraydelegations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("delegations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `delegations` to be an array in the JSON string but got `%s`", jsonObj.get("delegations").toString()));
          }

          // validate the optional field `delegations` (array)
          for (int i = 0; i < jsonArraydelegations.size(); i++) {
            ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesDelegationsInner.validateJsonElement(jsonArraydelegations.get(i));
          };
        }
      }
      if (jsonObj.get("ipConfigurationProfiles") != null && !jsonObj.get("ipConfigurationProfiles").isJsonNull()) {
        JsonArray jsonArrayipConfigurationProfiles = jsonObj.getAsJsonArray("ipConfigurationProfiles");
        if (jsonArrayipConfigurationProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipConfigurationProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipConfigurationProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("ipConfigurationProfiles").toString()));
          }

          // validate the optional field `ipConfigurationProfiles` (array)
          for (int i = 0; i < jsonArrayipConfigurationProfiles.size(); i++) {
            ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationProfilesInner.validateJsonElement(jsonArrayipConfigurationProfiles.get(i));
          };
        }
      }
      if (jsonObj.get("ipConfigurations") != null && !jsonObj.get("ipConfigurations").isJsonNull()) {
        JsonArray jsonArrayipConfigurations = jsonObj.getAsJsonArray("ipConfigurations");
        if (jsonArrayipConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("ipConfigurations").toString()));
          }

          // validate the optional field `ipConfigurations` (array)
          for (int i = 0; i < jsonArrayipConfigurations.size(); i++) {
            ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInner.validateJsonElement(jsonArrayipConfigurations.get(i));
          };
        }
      }
      // validate the optional field `networkSecurityGroup`
      if (jsonObj.get("networkSecurityGroup") != null && !jsonObj.get("networkSecurityGroup").isJsonNull()) {
        ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroup.validateJsonElement(jsonObj.get("networkSecurityGroup"));
      }
      if ((jsonObj.get("privateEndpointNetworkPolicies") != null && !jsonObj.get("privateEndpointNetworkPolicies").isJsonNull()) && !jsonObj.get("privateEndpointNetworkPolicies").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateEndpointNetworkPolicies` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateEndpointNetworkPolicies").toString()));
      }
      if (jsonObj.get("privateEndpoints") != null && !jsonObj.get("privateEndpoints").isJsonNull()) {
        JsonArray jsonArrayprivateEndpoints = jsonObj.getAsJsonArray("privateEndpoints");
        if (jsonArrayprivateEndpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("privateEndpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `privateEndpoints` to be an array in the JSON string but got `%s`", jsonObj.get("privateEndpoints").toString()));
          }

          // validate the optional field `privateEndpoints` (array)
          for (int i = 0; i < jsonArrayprivateEndpoints.size(); i++) {
            ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInner.validateJsonElement(jsonArrayprivateEndpoints.get(i));
          };
        }
      }
      if ((jsonObj.get("privateLinkServiceNetworkPolicies") != null && !jsonObj.get("privateLinkServiceNetworkPolicies").isJsonNull()) && !jsonObj.get("privateLinkServiceNetworkPolicies").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateLinkServiceNetworkPolicies` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateLinkServiceNetworkPolicies").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("purpose") != null && !jsonObj.get("purpose").isJsonNull()) && !jsonObj.get("purpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purpose").toString()));
      }
      if (jsonObj.get("resourceNavigationLinks") != null && !jsonObj.get("resourceNavigationLinks").isJsonNull()) {
        JsonArray jsonArrayresourceNavigationLinks = jsonObj.getAsJsonArray("resourceNavigationLinks");
        if (jsonArrayresourceNavigationLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceNavigationLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceNavigationLinks` to be an array in the JSON string but got `%s`", jsonObj.get("resourceNavigationLinks").toString()));
          }

          // validate the optional field `resourceNavigationLinks` (array)
          for (int i = 0; i < jsonArrayresourceNavigationLinks.size(); i++) {
            ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesResourceNavigationLinksInner.validateJsonElement(jsonArrayresourceNavigationLinks.get(i));
          };
        }
      }
      // validate the optional field `routeTable`
      if (jsonObj.get("routeTable") != null && !jsonObj.get("routeTable").isJsonNull()) {
        ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTable.validateJsonElement(jsonObj.get("routeTable"));
      }
      if (jsonObj.get("serviceAssociationLinks") != null && !jsonObj.get("serviceAssociationLinks").isJsonNull()) {
        JsonArray jsonArrayserviceAssociationLinks = jsonObj.getAsJsonArray("serviceAssociationLinks");
        if (jsonArrayserviceAssociationLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceAssociationLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceAssociationLinks` to be an array in the JSON string but got `%s`", jsonObj.get("serviceAssociationLinks").toString()));
          }

          // validate the optional field `serviceAssociationLinks` (array)
          for (int i = 0; i < jsonArrayserviceAssociationLinks.size(); i++) {
            ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceAssociationLinksInner.validateJsonElement(jsonArrayserviceAssociationLinks.get(i));
          };
        }
      }
      if (jsonObj.get("serviceEndpointPolicies") != null && !jsonObj.get("serviceEndpointPolicies").isJsonNull()) {
        JsonArray jsonArrayserviceEndpointPolicies = jsonObj.getAsJsonArray("serviceEndpointPolicies");
        if (jsonArrayserviceEndpointPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceEndpointPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceEndpointPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("serviceEndpointPolicies").toString()));
          }

          // validate the optional field `serviceEndpointPolicies` (array)
          for (int i = 0; i < jsonArrayserviceEndpointPolicies.size(); i++) {
            ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointPoliciesInner.validateJsonElement(jsonArrayserviceEndpointPolicies.get(i));
          };
        }
      }
      if (jsonObj.get("serviceEndpoints") != null && !jsonObj.get("serviceEndpoints").isJsonNull()) {
        JsonArray jsonArrayserviceEndpoints = jsonObj.getAsJsonArray("serviceEndpoints");
        if (jsonArrayserviceEndpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceEndpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceEndpoints` to be an array in the JSON string but got `%s`", jsonObj.get("serviceEndpoints").toString()));
          }

          // validate the optional field `serviceEndpoints` (array)
          for (int i = 0; i < jsonArrayserviceEndpoints.size(); i++) {
            ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointsInner.validateJsonElement(jsonArrayserviceEndpoints.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties
   */
  public static ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties.class);
  }

  /**
   * Convert an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

