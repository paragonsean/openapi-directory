/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet;
import org.openapitools.client.model.CipherSuitesEnum;
import org.openapitools.client.model.PolicyNameEnum;
import org.openapitools.client.model.ProtocolsEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of ApplicationGatewayAvailableSslOptions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:58.775570-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayAvailableSslOptionsPropertiesFormat {
  public static final String SERIALIZED_NAME_AVAILABLE_CIPHER_SUITES = "availableCipherSuites";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_CIPHER_SUITES)
  private List<CipherSuitesEnum> availableCipherSuites = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_PROTOCOLS = "availableProtocols";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_PROTOCOLS)
  private List<ProtocolsEnum> availableProtocols = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_POLICY = "defaultPolicy";
  @SerializedName(SERIALIZED_NAME_DEFAULT_POLICY)
  private PolicyNameEnum defaultPolicy;

  public static final String SERIALIZED_NAME_PREDEFINED_POLICIES = "predefinedPolicies";
  @SerializedName(SERIALIZED_NAME_PREDEFINED_POLICIES)
  private List<ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet> predefinedPolicies = new ArrayList<>();

  public ApplicationGatewayAvailableSslOptionsPropertiesFormat() {
  }

  public ApplicationGatewayAvailableSslOptionsPropertiesFormat availableCipherSuites(List<CipherSuitesEnum> availableCipherSuites) {
    this.availableCipherSuites = availableCipherSuites;
    return this;
  }

  public ApplicationGatewayAvailableSslOptionsPropertiesFormat addAvailableCipherSuitesItem(CipherSuitesEnum availableCipherSuitesItem) {
    if (this.availableCipherSuites == null) {
      this.availableCipherSuites = new ArrayList<>();
    }
    this.availableCipherSuites.add(availableCipherSuitesItem);
    return this;
  }

  /**
   * List of available Ssl cipher suites.
   * @return availableCipherSuites
   */
  @javax.annotation.Nullable
  public List<CipherSuitesEnum> getAvailableCipherSuites() {
    return availableCipherSuites;
  }

  public void setAvailableCipherSuites(List<CipherSuitesEnum> availableCipherSuites) {
    this.availableCipherSuites = availableCipherSuites;
  }


  public ApplicationGatewayAvailableSslOptionsPropertiesFormat availableProtocols(List<ProtocolsEnum> availableProtocols) {
    this.availableProtocols = availableProtocols;
    return this;
  }

  public ApplicationGatewayAvailableSslOptionsPropertiesFormat addAvailableProtocolsItem(ProtocolsEnum availableProtocolsItem) {
    if (this.availableProtocols == null) {
      this.availableProtocols = new ArrayList<>();
    }
    this.availableProtocols.add(availableProtocolsItem);
    return this;
  }

  /**
   * List of available Ssl protocols.
   * @return availableProtocols
   */
  @javax.annotation.Nullable
  public List<ProtocolsEnum> getAvailableProtocols() {
    return availableProtocols;
  }

  public void setAvailableProtocols(List<ProtocolsEnum> availableProtocols) {
    this.availableProtocols = availableProtocols;
  }


  public ApplicationGatewayAvailableSslOptionsPropertiesFormat defaultPolicy(PolicyNameEnum defaultPolicy) {
    this.defaultPolicy = defaultPolicy;
    return this;
  }

  /**
   * Get defaultPolicy
   * @return defaultPolicy
   */
  @javax.annotation.Nullable
  public PolicyNameEnum getDefaultPolicy() {
    return defaultPolicy;
  }

  public void setDefaultPolicy(PolicyNameEnum defaultPolicy) {
    this.defaultPolicy = defaultPolicy;
  }


  public ApplicationGatewayAvailableSslOptionsPropertiesFormat predefinedPolicies(List<ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet> predefinedPolicies) {
    this.predefinedPolicies = predefinedPolicies;
    return this;
  }

  public ApplicationGatewayAvailableSslOptionsPropertiesFormat addPredefinedPoliciesItem(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet predefinedPoliciesItem) {
    if (this.predefinedPolicies == null) {
      this.predefinedPolicies = new ArrayList<>();
    }
    this.predefinedPolicies.add(predefinedPoliciesItem);
    return this;
  }

  /**
   * List of available Ssl predefined policy.
   * @return predefinedPolicies
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet> getPredefinedPolicies() {
    return predefinedPolicies;
  }

  public void setPredefinedPolicies(List<ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet> predefinedPolicies) {
    this.predefinedPolicies = predefinedPolicies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayAvailableSslOptionsPropertiesFormat applicationGatewayAvailableSslOptionsPropertiesFormat = (ApplicationGatewayAvailableSslOptionsPropertiesFormat) o;
    return Objects.equals(this.availableCipherSuites, applicationGatewayAvailableSslOptionsPropertiesFormat.availableCipherSuites) &&
        Objects.equals(this.availableProtocols, applicationGatewayAvailableSslOptionsPropertiesFormat.availableProtocols) &&
        Objects.equals(this.defaultPolicy, applicationGatewayAvailableSslOptionsPropertiesFormat.defaultPolicy) &&
        Objects.equals(this.predefinedPolicies, applicationGatewayAvailableSslOptionsPropertiesFormat.predefinedPolicies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableCipherSuites, availableProtocols, defaultPolicy, predefinedPolicies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayAvailableSslOptionsPropertiesFormat {\n");
    sb.append("    availableCipherSuites: ").append(toIndentedString(availableCipherSuites)).append("\n");
    sb.append("    availableProtocols: ").append(toIndentedString(availableProtocols)).append("\n");
    sb.append("    defaultPolicy: ").append(toIndentedString(defaultPolicy)).append("\n");
    sb.append("    predefinedPolicies: ").append(toIndentedString(predefinedPolicies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableCipherSuites");
    openapiFields.add("availableProtocols");
    openapiFields.add("defaultPolicy");
    openapiFields.add("predefinedPolicies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayAvailableSslOptionsPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayAvailableSslOptionsPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayAvailableSslOptionsPropertiesFormat is not found in the empty JSON string", ApplicationGatewayAvailableSslOptionsPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayAvailableSslOptionsPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayAvailableSslOptionsPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("availableCipherSuites") != null && !jsonObj.get("availableCipherSuites").isJsonNull() && !jsonObj.get("availableCipherSuites").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableCipherSuites` to be an array in the JSON string but got `%s`", jsonObj.get("availableCipherSuites").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("availableProtocols") != null && !jsonObj.get("availableProtocols").isJsonNull() && !jsonObj.get("availableProtocols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableProtocols` to be an array in the JSON string but got `%s`", jsonObj.get("availableProtocols").toString()));
      }
      // validate the optional field `defaultPolicy`
      if (jsonObj.get("defaultPolicy") != null && !jsonObj.get("defaultPolicy").isJsonNull()) {
        PolicyNameEnum.validateJsonElement(jsonObj.get("defaultPolicy"));
      }
      if (jsonObj.get("predefinedPolicies") != null && !jsonObj.get("predefinedPolicies").isJsonNull()) {
        JsonArray jsonArraypredefinedPolicies = jsonObj.getAsJsonArray("predefinedPolicies");
        if (jsonArraypredefinedPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("predefinedPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `predefinedPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("predefinedPolicies").toString()));
          }

          // validate the optional field `predefinedPolicies` (array)
          for (int i = 0; i < jsonArraypredefinedPolicies.size(); i++) {
            ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonArraypredefinedPolicies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayAvailableSslOptionsPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayAvailableSslOptionsPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayAvailableSslOptionsPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayAvailableSslOptionsPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayAvailableSslOptionsPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayAvailableSslOptionsPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayAvailableSslOptionsPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayAvailableSslOptionsPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayAvailableSslOptionsPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayAvailableSslOptionsPropertiesFormat
   */
  public static ApplicationGatewayAvailableSslOptionsPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayAvailableSslOptionsPropertiesFormat.class);
  }

  /**
   * Convert an instance of ApplicationGatewayAvailableSslOptionsPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

