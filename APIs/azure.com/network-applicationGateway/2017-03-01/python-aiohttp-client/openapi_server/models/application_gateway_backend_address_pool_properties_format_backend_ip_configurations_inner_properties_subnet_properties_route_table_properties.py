# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_gateway_backend_address_pool_properties_format_backend_ip_configurations_inner_properties_subnet_properties_route_table_properties_routes_inner import ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTablePropertiesRoutesInner
from openapi_server.models.subnet import Subnet
from openapi_server import util


class ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provisioning_state: str=None, routes: List[ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTablePropertiesRoutesInner]=None, subnets: List[Subnet]=None):
        """ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties - a model defined in OpenAPI

        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.
        :param routes: The routes of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.
        :param subnets: The subnets of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.
        """
        self.openapi_types = {
            'provisioning_state': str,
            'routes': List[ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTablePropertiesRoutesInner],
            'subnets': List[Subnet]
        }

        self.attribute_map = {
            'provisioning_state': 'provisioningState',
            'routes': 'routes',
            'subnets': 'subnets'
        }

        self._provisioning_state = provisioning_state
        self._routes = routes
        self._subnets = subnets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayBackendAddressPoolPropertiesFormat_backendIPConfigurations_inner_properties_subnet_properties_routeTable_properties of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.

        The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :return: The provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.

        The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def routes(self):
        """Gets the routes of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.

        Collection of routes contained within a route table.

        :return: The routes of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.
        :rtype: List[ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTablePropertiesRoutesInner]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.

        Collection of routes contained within a route table.

        :param routes: The routes of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.
        :type routes: List[ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTablePropertiesRoutesInner]
        """

        self._routes = routes

    @property
    def subnets(self):
        """Gets the subnets of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.

        A collection of references to subnets.

        :return: The subnets of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.
        :rtype: List[Subnet]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.

        A collection of references to subnets.

        :param subnets: The subnets of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesRouteTableProperties.
        :type subnets: List[Subnet]
        """

        self._subnets = subnets
