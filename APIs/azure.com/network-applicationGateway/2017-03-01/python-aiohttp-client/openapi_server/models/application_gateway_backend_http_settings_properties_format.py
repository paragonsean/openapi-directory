# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_gateway_connection_draining import ApplicationGatewayConnectionDraining
from openapi_server.models.application_gateway_http_listener_properties_format_frontend_port import ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
from openapi_server import util


class ApplicationGatewayBackendHttpSettingsPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_certificates: List[ApplicationGatewayHttpListenerPropertiesFormatFrontendPort]=None, connection_draining: ApplicationGatewayConnectionDraining=None, cookie_based_affinity: str=None, port: int=None, probe: ApplicationGatewayHttpListenerPropertiesFormatFrontendPort=None, protocol: str=None, provisioning_state: str=None, request_timeout: int=None):
        """ApplicationGatewayBackendHttpSettingsPropertiesFormat - a model defined in OpenAPI

        :param authentication_certificates: The authentication_certificates of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :param connection_draining: The connection_draining of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :param cookie_based_affinity: The cookie_based_affinity of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :param port: The port of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :param probe: The probe of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :param protocol: The protocol of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :param request_timeout: The request_timeout of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        """
        self.openapi_types = {
            'authentication_certificates': List[ApplicationGatewayHttpListenerPropertiesFormatFrontendPort],
            'connection_draining': ApplicationGatewayConnectionDraining,
            'cookie_based_affinity': str,
            'port': int,
            'probe': ApplicationGatewayHttpListenerPropertiesFormatFrontendPort,
            'protocol': str,
            'provisioning_state': str,
            'request_timeout': int
        }

        self.attribute_map = {
            'authentication_certificates': 'authenticationCertificates',
            'connection_draining': 'connectionDraining',
            'cookie_based_affinity': 'cookieBasedAffinity',
            'port': 'port',
            'probe': 'probe',
            'protocol': 'protocol',
            'provisioning_state': 'provisioningState',
            'request_timeout': 'requestTimeout'
        }

        self._authentication_certificates = authentication_certificates
        self._connection_draining = connection_draining
        self._cookie_based_affinity = cookie_based_affinity
        self._port = port
        self._probe = probe
        self._protocol = protocol
        self._provisioning_state = provisioning_state
        self._request_timeout = request_timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayBackendHttpSettingsPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayBackendHttpSettingsPropertiesFormat of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_certificates(self):
        """Gets the authentication_certificates of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.

        Array of references to application gateway authentication certificates.

        :return: The authentication_certificates of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :rtype: List[ApplicationGatewayHttpListenerPropertiesFormatFrontendPort]
        """
        return self._authentication_certificates

    @authentication_certificates.setter
    def authentication_certificates(self, authentication_certificates):
        """Sets the authentication_certificates of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.

        Array of references to application gateway authentication certificates.

        :param authentication_certificates: The authentication_certificates of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :type authentication_certificates: List[ApplicationGatewayHttpListenerPropertiesFormatFrontendPort]
        """

        self._authentication_certificates = authentication_certificates

    @property
    def connection_draining(self):
        """Gets the connection_draining of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.


        :return: The connection_draining of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :rtype: ApplicationGatewayConnectionDraining
        """
        return self._connection_draining

    @connection_draining.setter
    def connection_draining(self, connection_draining):
        """Sets the connection_draining of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.


        :param connection_draining: The connection_draining of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :type connection_draining: ApplicationGatewayConnectionDraining
        """

        self._connection_draining = connection_draining

    @property
    def cookie_based_affinity(self):
        """Gets the cookie_based_affinity of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.

        Cookie based affinity.

        :return: The cookie_based_affinity of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :rtype: str
        """
        return self._cookie_based_affinity

    @cookie_based_affinity.setter
    def cookie_based_affinity(self, cookie_based_affinity):
        """Sets the cookie_based_affinity of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.

        Cookie based affinity.

        :param cookie_based_affinity: The cookie_based_affinity of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :type cookie_based_affinity: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if cookie_based_affinity not in allowed_values:
            raise ValueError(
                "Invalid value for `cookie_based_affinity` ({0}), must be one of {1}"
                .format(cookie_based_affinity, allowed_values)
            )

        self._cookie_based_affinity = cookie_based_affinity

    @property
    def port(self):
        """Gets the port of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.

        Port

        :return: The port of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.

        Port

        :param port: The port of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :type port: int
        """

        self._port = port

    @property
    def probe(self):
        """Gets the probe of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.


        :return: The probe of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :rtype: ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
        """
        return self._probe

    @probe.setter
    def probe(self, probe):
        """Sets the probe of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.


        :param probe: The probe of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :type probe: ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
        """

        self._probe = probe

    @property
    def protocol(self):
        """Gets the protocol of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.

        Protocol.

        :return: The protocol of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.

        Protocol.

        :param protocol: The protocol of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :type protocol: str
        """
        allowed_values = ["Http", "Https"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.

        Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :return: The provisioning_state of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.

        Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def request_timeout(self):
        """Gets the request_timeout of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.

        Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.

        :return: The request_timeout of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :rtype: int
        """
        return self._request_timeout

    @request_timeout.setter
    def request_timeout(self, request_timeout):
        """Sets the request_timeout of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.

        Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.

        :param request_timeout: The request_timeout of this ApplicationGatewayBackendHttpSettingsPropertiesFormat.
        :type request_timeout: int
        """

        self._request_timeout = request_timeout
