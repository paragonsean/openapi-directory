# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_gateway_http_listener_properties_format_frontend_port import ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
from openapi_server import util


class ApplicationGatewayFrontendIPConfigurationPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, private_ip_address: str=None, private_ip_allocation_method: str=None, provisioning_state: str=None, public_ip_address: ApplicationGatewayHttpListenerPropertiesFormatFrontendPort=None, subnet: ApplicationGatewayHttpListenerPropertiesFormatFrontendPort=None):
        """ApplicationGatewayFrontendIPConfigurationPropertiesFormat - a model defined in OpenAPI

        :param private_ip_address: The private_ip_address of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :param private_ip_allocation_method: The private_ip_allocation_method of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :param provisioning_state: The provisioning_state of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :param public_ip_address: The public_ip_address of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :param subnet: The subnet of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        """
        self.openapi_types = {
            'private_ip_address': str,
            'private_ip_allocation_method': str,
            'provisioning_state': str,
            'public_ip_address': ApplicationGatewayHttpListenerPropertiesFormatFrontendPort,
            'subnet': ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
        }

        self.attribute_map = {
            'private_ip_address': 'privateIPAddress',
            'private_ip_allocation_method': 'privateIPAllocationMethod',
            'provisioning_state': 'provisioningState',
            'public_ip_address': 'publicIPAddress',
            'subnet': 'subnet'
        }

        self._private_ip_address = private_ip_address
        self._private_ip_allocation_method = private_ip_allocation_method
        self._provisioning_state = provisioning_state
        self._public_ip_address = public_ip_address
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayFrontendIPConfigurationPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayFrontendIPConfigurationPropertiesFormat of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def private_ip_address(self):
        """Gets the private_ip_address of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.

        PrivateIPAddress of the network interface IP Configuration.

        :return: The private_ip_address of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :rtype: str
        """
        return self._private_ip_address

    @private_ip_address.setter
    def private_ip_address(self, private_ip_address):
        """Sets the private_ip_address of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.

        PrivateIPAddress of the network interface IP Configuration.

        :param private_ip_address: The private_ip_address of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :type private_ip_address: str
        """

        self._private_ip_address = private_ip_address

    @property
    def private_ip_allocation_method(self):
        """Gets the private_ip_allocation_method of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.

        PrivateIP allocation method.

        :return: The private_ip_allocation_method of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :rtype: str
        """
        return self._private_ip_allocation_method

    @private_ip_allocation_method.setter
    def private_ip_allocation_method(self, private_ip_allocation_method):
        """Sets the private_ip_allocation_method of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.

        PrivateIP allocation method.

        :param private_ip_allocation_method: The private_ip_allocation_method of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :type private_ip_allocation_method: str
        """
        allowed_values = ["Static", "Dynamic"]  # noqa: E501
        if private_ip_allocation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `private_ip_allocation_method` ({0}), must be one of {1}"
                .format(private_ip_allocation_method, allowed_values)
            )

        self._private_ip_allocation_method = private_ip_allocation_method

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.

        Provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :return: The provisioning_state of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.

        Provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :param provisioning_state: The provisioning_state of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def public_ip_address(self):
        """Gets the public_ip_address of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.


        :return: The public_ip_address of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :rtype: ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
        """
        return self._public_ip_address

    @public_ip_address.setter
    def public_ip_address(self, public_ip_address):
        """Sets the public_ip_address of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.


        :param public_ip_address: The public_ip_address of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :type public_ip_address: ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
        """

        self._public_ip_address = public_ip_address

    @property
    def subnet(self):
        """Gets the subnet of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.


        :return: The subnet of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :rtype: ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.


        :param subnet: The subnet of this ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        :type subnet: ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
        """

        self._subnet = subnet
