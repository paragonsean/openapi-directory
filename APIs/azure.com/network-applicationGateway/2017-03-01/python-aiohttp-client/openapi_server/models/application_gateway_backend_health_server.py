# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_gateway_http_listener_properties_format_frontend_port import ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
from openapi_server import util


class ApplicationGatewayBackendHealthServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, health: str=None, ip_configuration: ApplicationGatewayHttpListenerPropertiesFormatFrontendPort=None):
        """ApplicationGatewayBackendHealthServer - a model defined in OpenAPI

        :param address: The address of this ApplicationGatewayBackendHealthServer.
        :param health: The health of this ApplicationGatewayBackendHealthServer.
        :param ip_configuration: The ip_configuration of this ApplicationGatewayBackendHealthServer.
        """
        self.openapi_types = {
            'address': str,
            'health': str,
            'ip_configuration': ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
        }

        self.attribute_map = {
            'address': 'address',
            'health': 'health',
            'ip_configuration': 'ipConfiguration'
        }

        self._address = address
        self._health = health
        self._ip_configuration = ip_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayBackendHealthServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayBackendHealthServer of this ApplicationGatewayBackendHealthServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ApplicationGatewayBackendHealthServer.

        IP address or FQDN of backend server.

        :return: The address of this ApplicationGatewayBackendHealthServer.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ApplicationGatewayBackendHealthServer.

        IP address or FQDN of backend server.

        :param address: The address of this ApplicationGatewayBackendHealthServer.
        :type address: str
        """

        self._address = address

    @property
    def health(self):
        """Gets the health of this ApplicationGatewayBackendHealthServer.

        Health of backend server.

        :return: The health of this ApplicationGatewayBackendHealthServer.
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this ApplicationGatewayBackendHealthServer.

        Health of backend server.

        :param health: The health of this ApplicationGatewayBackendHealthServer.
        :type health: str
        """
        allowed_values = ["Unknown", "Up", "Down", "Partial", "Draining"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def ip_configuration(self):
        """Gets the ip_configuration of this ApplicationGatewayBackendHealthServer.


        :return: The ip_configuration of this ApplicationGatewayBackendHealthServer.
        :rtype: ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
        """
        return self._ip_configuration

    @ip_configuration.setter
    def ip_configuration(self, ip_configuration):
        """Sets the ip_configuration of this ApplicationGatewayBackendHealthServer.


        :param ip_configuration: The ip_configuration of this ApplicationGatewayBackendHealthServer.
        :type ip_configuration: ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
        """

        self._ip_configuration = ip_configuration
