/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort() {
    this->initializeModel();
}

OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::~OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort() {}

void OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::getId() const {
    return m_id;
}
void OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
