/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayRequestRoutingRulePropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayRequestRoutingRulePropertiesFormat::OAIApplicationGatewayRequestRoutingRulePropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayRequestRoutingRulePropertiesFormat::OAIApplicationGatewayRequestRoutingRulePropertiesFormat() {
    this->initializeModel();
}

OAIApplicationGatewayRequestRoutingRulePropertiesFormat::~OAIApplicationGatewayRequestRoutingRulePropertiesFormat() {}

void OAIApplicationGatewayRequestRoutingRulePropertiesFormat::initializeModel() {

    m_backend_address_pool_isSet = false;
    m_backend_address_pool_isValid = false;

    m_backend_http_settings_isSet = false;
    m_backend_http_settings_isValid = false;

    m_http_listener_isSet = false;
    m_http_listener_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_rule_type_isSet = false;
    m_rule_type_isValid = false;

    m_url_path_map_isSet = false;
    m_url_path_map_isValid = false;
}

void OAIApplicationGatewayRequestRoutingRulePropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayRequestRoutingRulePropertiesFormat::fromJsonObject(QJsonObject json) {

    m_backend_address_pool_isValid = ::OpenAPI::fromJsonValue(m_backend_address_pool, json[QString("backendAddressPool")]);
    m_backend_address_pool_isSet = !json[QString("backendAddressPool")].isNull() && m_backend_address_pool_isValid;

    m_backend_http_settings_isValid = ::OpenAPI::fromJsonValue(m_backend_http_settings, json[QString("backendHttpSettings")]);
    m_backend_http_settings_isSet = !json[QString("backendHttpSettings")].isNull() && m_backend_http_settings_isValid;

    m_http_listener_isValid = ::OpenAPI::fromJsonValue(m_http_listener, json[QString("httpListener")]);
    m_http_listener_isSet = !json[QString("httpListener")].isNull() && m_http_listener_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_rule_type_isValid = ::OpenAPI::fromJsonValue(m_rule_type, json[QString("ruleType")]);
    m_rule_type_isSet = !json[QString("ruleType")].isNull() && m_rule_type_isValid;

    m_url_path_map_isValid = ::OpenAPI::fromJsonValue(m_url_path_map, json[QString("urlPathMap")]);
    m_url_path_map_isSet = !json[QString("urlPathMap")].isNull() && m_url_path_map_isValid;
}

QString OAIApplicationGatewayRequestRoutingRulePropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayRequestRoutingRulePropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_address_pool.isSet()) {
        obj.insert(QString("backendAddressPool"), ::OpenAPI::toJsonValue(m_backend_address_pool));
    }
    if (m_backend_http_settings.isSet()) {
        obj.insert(QString("backendHttpSettings"), ::OpenAPI::toJsonValue(m_backend_http_settings));
    }
    if (m_http_listener.isSet()) {
        obj.insert(QString("httpListener"), ::OpenAPI::toJsonValue(m_http_listener));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_rule_type_isSet) {
        obj.insert(QString("ruleType"), ::OpenAPI::toJsonValue(m_rule_type));
    }
    if (m_url_path_map.isSet()) {
        obj.insert(QString("urlPathMap"), ::OpenAPI::toJsonValue(m_url_path_map));
    }
    return obj;
}

OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort OAIApplicationGatewayRequestRoutingRulePropertiesFormat::getBackendAddressPool() const {
    return m_backend_address_pool;
}
void OAIApplicationGatewayRequestRoutingRulePropertiesFormat::setBackendAddressPool(const OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort &backend_address_pool) {
    m_backend_address_pool = backend_address_pool;
    m_backend_address_pool_isSet = true;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::is_backend_address_pool_Set() const{
    return m_backend_address_pool_isSet;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::is_backend_address_pool_Valid() const{
    return m_backend_address_pool_isValid;
}

OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort OAIApplicationGatewayRequestRoutingRulePropertiesFormat::getBackendHttpSettings() const {
    return m_backend_http_settings;
}
void OAIApplicationGatewayRequestRoutingRulePropertiesFormat::setBackendHttpSettings(const OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort &backend_http_settings) {
    m_backend_http_settings = backend_http_settings;
    m_backend_http_settings_isSet = true;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::is_backend_http_settings_Set() const{
    return m_backend_http_settings_isSet;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::is_backend_http_settings_Valid() const{
    return m_backend_http_settings_isValid;
}

OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort OAIApplicationGatewayRequestRoutingRulePropertiesFormat::getHttpListener() const {
    return m_http_listener;
}
void OAIApplicationGatewayRequestRoutingRulePropertiesFormat::setHttpListener(const OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort &http_listener) {
    m_http_listener = http_listener;
    m_http_listener_isSet = true;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::is_http_listener_Set() const{
    return m_http_listener_isSet;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::is_http_listener_Valid() const{
    return m_http_listener_isValid;
}

QString OAIApplicationGatewayRequestRoutingRulePropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationGatewayRequestRoutingRulePropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIApplicationGatewayRequestRoutingRulePropertiesFormat::getRuleType() const {
    return m_rule_type;
}
void OAIApplicationGatewayRequestRoutingRulePropertiesFormat::setRuleType(const QString &rule_type) {
    m_rule_type = rule_type;
    m_rule_type_isSet = true;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::is_rule_type_Set() const{
    return m_rule_type_isSet;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::is_rule_type_Valid() const{
    return m_rule_type_isValid;
}

OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort OAIApplicationGatewayRequestRoutingRulePropertiesFormat::getUrlPathMap() const {
    return m_url_path_map;
}
void OAIApplicationGatewayRequestRoutingRulePropertiesFormat::setUrlPathMap(const OAIApplicationGatewayHttpListenerPropertiesFormat_frontendPort &url_path_map) {
    m_url_path_map = url_path_map;
    m_url_path_map_isSet = true;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::is_url_path_map_Set() const{
    return m_url_path_map_isSet;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::is_url_path_map_Valid() const{
    return m_url_path_map_isValid;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_address_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_http_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_listener.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_path_map.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayRequestRoutingRulePropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
