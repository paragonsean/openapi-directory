/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayWebApplicationFirewallConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayWebApplicationFirewallConfiguration::OAIApplicationGatewayWebApplicationFirewallConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayWebApplicationFirewallConfiguration::OAIApplicationGatewayWebApplicationFirewallConfiguration() {
    this->initializeModel();
}

OAIApplicationGatewayWebApplicationFirewallConfiguration::~OAIApplicationGatewayWebApplicationFirewallConfiguration() {}

void OAIApplicationGatewayWebApplicationFirewallConfiguration::initializeModel() {

    m_disabled_rule_groups_isSet = false;
    m_disabled_rule_groups_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_exclusions_isSet = false;
    m_exclusions_isValid = false;

    m_file_upload_limit_in_mb_isSet = false;
    m_file_upload_limit_in_mb_isValid = false;

    m_firewall_mode_isSet = false;
    m_firewall_mode_isValid = false;

    m_max_request_body_size_isSet = false;
    m_max_request_body_size_isValid = false;

    m_max_request_body_size_in_kb_isSet = false;
    m_max_request_body_size_in_kb_isValid = false;

    m_request_body_check_isSet = false;
    m_request_body_check_isValid = false;

    m_rule_set_type_isSet = false;
    m_rule_set_type_isValid = false;

    m_rule_set_version_isSet = false;
    m_rule_set_version_isValid = false;
}

void OAIApplicationGatewayWebApplicationFirewallConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayWebApplicationFirewallConfiguration::fromJsonObject(QJsonObject json) {

    m_disabled_rule_groups_isValid = ::OpenAPI::fromJsonValue(m_disabled_rule_groups, json[QString("disabledRuleGroups")]);
    m_disabled_rule_groups_isSet = !json[QString("disabledRuleGroups")].isNull() && m_disabled_rule_groups_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_exclusions_isValid = ::OpenAPI::fromJsonValue(m_exclusions, json[QString("exclusions")]);
    m_exclusions_isSet = !json[QString("exclusions")].isNull() && m_exclusions_isValid;

    m_file_upload_limit_in_mb_isValid = ::OpenAPI::fromJsonValue(m_file_upload_limit_in_mb, json[QString("fileUploadLimitInMb")]);
    m_file_upload_limit_in_mb_isSet = !json[QString("fileUploadLimitInMb")].isNull() && m_file_upload_limit_in_mb_isValid;

    m_firewall_mode_isValid = ::OpenAPI::fromJsonValue(m_firewall_mode, json[QString("firewallMode")]);
    m_firewall_mode_isSet = !json[QString("firewallMode")].isNull() && m_firewall_mode_isValid;

    m_max_request_body_size_isValid = ::OpenAPI::fromJsonValue(m_max_request_body_size, json[QString("maxRequestBodySize")]);
    m_max_request_body_size_isSet = !json[QString("maxRequestBodySize")].isNull() && m_max_request_body_size_isValid;

    m_max_request_body_size_in_kb_isValid = ::OpenAPI::fromJsonValue(m_max_request_body_size_in_kb, json[QString("maxRequestBodySizeInKb")]);
    m_max_request_body_size_in_kb_isSet = !json[QString("maxRequestBodySizeInKb")].isNull() && m_max_request_body_size_in_kb_isValid;

    m_request_body_check_isValid = ::OpenAPI::fromJsonValue(m_request_body_check, json[QString("requestBodyCheck")]);
    m_request_body_check_isSet = !json[QString("requestBodyCheck")].isNull() && m_request_body_check_isValid;

    m_rule_set_type_isValid = ::OpenAPI::fromJsonValue(m_rule_set_type, json[QString("ruleSetType")]);
    m_rule_set_type_isSet = !json[QString("ruleSetType")].isNull() && m_rule_set_type_isValid;

    m_rule_set_version_isValid = ::OpenAPI::fromJsonValue(m_rule_set_version, json[QString("ruleSetVersion")]);
    m_rule_set_version_isSet = !json[QString("ruleSetVersion")].isNull() && m_rule_set_version_isValid;
}

QString OAIApplicationGatewayWebApplicationFirewallConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayWebApplicationFirewallConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_disabled_rule_groups.size() > 0) {
        obj.insert(QString("disabledRuleGroups"), ::OpenAPI::toJsonValue(m_disabled_rule_groups));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_exclusions.size() > 0) {
        obj.insert(QString("exclusions"), ::OpenAPI::toJsonValue(m_exclusions));
    }
    if (m_file_upload_limit_in_mb_isSet) {
        obj.insert(QString("fileUploadLimitInMb"), ::OpenAPI::toJsonValue(m_file_upload_limit_in_mb));
    }
    if (m_firewall_mode_isSet) {
        obj.insert(QString("firewallMode"), ::OpenAPI::toJsonValue(m_firewall_mode));
    }
    if (m_max_request_body_size_isSet) {
        obj.insert(QString("maxRequestBodySize"), ::OpenAPI::toJsonValue(m_max_request_body_size));
    }
    if (m_max_request_body_size_in_kb_isSet) {
        obj.insert(QString("maxRequestBodySizeInKb"), ::OpenAPI::toJsonValue(m_max_request_body_size_in_kb));
    }
    if (m_request_body_check_isSet) {
        obj.insert(QString("requestBodyCheck"), ::OpenAPI::toJsonValue(m_request_body_check));
    }
    if (m_rule_set_type_isSet) {
        obj.insert(QString("ruleSetType"), ::OpenAPI::toJsonValue(m_rule_set_type));
    }
    if (m_rule_set_version_isSet) {
        obj.insert(QString("ruleSetVersion"), ::OpenAPI::toJsonValue(m_rule_set_version));
    }
    return obj;
}

QList<OAIApplicationGatewayFirewallDisabledRuleGroup> OAIApplicationGatewayWebApplicationFirewallConfiguration::getDisabledRuleGroups() const {
    return m_disabled_rule_groups;
}
void OAIApplicationGatewayWebApplicationFirewallConfiguration::setDisabledRuleGroups(const QList<OAIApplicationGatewayFirewallDisabledRuleGroup> &disabled_rule_groups) {
    m_disabled_rule_groups = disabled_rule_groups;
    m_disabled_rule_groups_isSet = true;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_disabled_rule_groups_Set() const{
    return m_disabled_rule_groups_isSet;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_disabled_rule_groups_Valid() const{
    return m_disabled_rule_groups_isValid;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::isEnabled() const {
    return m_enabled;
}
void OAIApplicationGatewayWebApplicationFirewallConfiguration::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<OAIApplicationGatewayFirewallExclusion> OAIApplicationGatewayWebApplicationFirewallConfiguration::getExclusions() const {
    return m_exclusions;
}
void OAIApplicationGatewayWebApplicationFirewallConfiguration::setExclusions(const QList<OAIApplicationGatewayFirewallExclusion> &exclusions) {
    m_exclusions = exclusions;
    m_exclusions_isSet = true;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_exclusions_Set() const{
    return m_exclusions_isSet;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_exclusions_Valid() const{
    return m_exclusions_isValid;
}

qint32 OAIApplicationGatewayWebApplicationFirewallConfiguration::getFileUploadLimitInMb() const {
    return m_file_upload_limit_in_mb;
}
void OAIApplicationGatewayWebApplicationFirewallConfiguration::setFileUploadLimitInMb(const qint32 &file_upload_limit_in_mb) {
    m_file_upload_limit_in_mb = file_upload_limit_in_mb;
    m_file_upload_limit_in_mb_isSet = true;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_file_upload_limit_in_mb_Set() const{
    return m_file_upload_limit_in_mb_isSet;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_file_upload_limit_in_mb_Valid() const{
    return m_file_upload_limit_in_mb_isValid;
}

QString OAIApplicationGatewayWebApplicationFirewallConfiguration::getFirewallMode() const {
    return m_firewall_mode;
}
void OAIApplicationGatewayWebApplicationFirewallConfiguration::setFirewallMode(const QString &firewall_mode) {
    m_firewall_mode = firewall_mode;
    m_firewall_mode_isSet = true;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_firewall_mode_Set() const{
    return m_firewall_mode_isSet;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_firewall_mode_Valid() const{
    return m_firewall_mode_isValid;
}

qint32 OAIApplicationGatewayWebApplicationFirewallConfiguration::getMaxRequestBodySize() const {
    return m_max_request_body_size;
}
void OAIApplicationGatewayWebApplicationFirewallConfiguration::setMaxRequestBodySize(const qint32 &max_request_body_size) {
    m_max_request_body_size = max_request_body_size;
    m_max_request_body_size_isSet = true;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_max_request_body_size_Set() const{
    return m_max_request_body_size_isSet;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_max_request_body_size_Valid() const{
    return m_max_request_body_size_isValid;
}

qint32 OAIApplicationGatewayWebApplicationFirewallConfiguration::getMaxRequestBodySizeInKb() const {
    return m_max_request_body_size_in_kb;
}
void OAIApplicationGatewayWebApplicationFirewallConfiguration::setMaxRequestBodySizeInKb(const qint32 &max_request_body_size_in_kb) {
    m_max_request_body_size_in_kb = max_request_body_size_in_kb;
    m_max_request_body_size_in_kb_isSet = true;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_max_request_body_size_in_kb_Set() const{
    return m_max_request_body_size_in_kb_isSet;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_max_request_body_size_in_kb_Valid() const{
    return m_max_request_body_size_in_kb_isValid;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::isRequestBodyCheck() const {
    return m_request_body_check;
}
void OAIApplicationGatewayWebApplicationFirewallConfiguration::setRequestBodyCheck(const bool &request_body_check) {
    m_request_body_check = request_body_check;
    m_request_body_check_isSet = true;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_request_body_check_Set() const{
    return m_request_body_check_isSet;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_request_body_check_Valid() const{
    return m_request_body_check_isValid;
}

QString OAIApplicationGatewayWebApplicationFirewallConfiguration::getRuleSetType() const {
    return m_rule_set_type;
}
void OAIApplicationGatewayWebApplicationFirewallConfiguration::setRuleSetType(const QString &rule_set_type) {
    m_rule_set_type = rule_set_type;
    m_rule_set_type_isSet = true;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_rule_set_type_Set() const{
    return m_rule_set_type_isSet;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_rule_set_type_Valid() const{
    return m_rule_set_type_isValid;
}

QString OAIApplicationGatewayWebApplicationFirewallConfiguration::getRuleSetVersion() const {
    return m_rule_set_version;
}
void OAIApplicationGatewayWebApplicationFirewallConfiguration::setRuleSetVersion(const QString &rule_set_version) {
    m_rule_set_version = rule_set_version;
    m_rule_set_version_isSet = true;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_rule_set_version_Set() const{
    return m_rule_set_version_isSet;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::is_rule_set_version_Valid() const{
    return m_rule_set_version_isValid;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disabled_rule_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_upload_limit_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firewall_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_request_body_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_request_body_size_in_kb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_body_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_set_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_set_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayWebApplicationFirewallConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && m_firewall_mode_isValid && m_rule_set_type_isValid && m_rule_set_version_isValid && true;
}

} // namespace OpenAPI
