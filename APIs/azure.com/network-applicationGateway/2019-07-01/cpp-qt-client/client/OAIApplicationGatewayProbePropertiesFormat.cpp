/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayProbePropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayProbePropertiesFormat::OAIApplicationGatewayProbePropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayProbePropertiesFormat::OAIApplicationGatewayProbePropertiesFormat() {
    this->initializeModel();
}

OAIApplicationGatewayProbePropertiesFormat::~OAIApplicationGatewayProbePropertiesFormat() {}

void OAIApplicationGatewayProbePropertiesFormat::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_min_servers_isSet = false;
    m_min_servers_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_pick_host_name_from_backend_http_settings_isSet = false;
    m_pick_host_name_from_backend_http_settings_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_unhealthy_threshold_isSet = false;
    m_unhealthy_threshold_isValid = false;
}

void OAIApplicationGatewayProbePropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayProbePropertiesFormat::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_min_servers_isValid = ::OpenAPI::fromJsonValue(m_min_servers, json[QString("minServers")]);
    m_min_servers_isSet = !json[QString("minServers")].isNull() && m_min_servers_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_pick_host_name_from_backend_http_settings_isValid = ::OpenAPI::fromJsonValue(m_pick_host_name_from_backend_http_settings, json[QString("pickHostNameFromBackendHttpSettings")]);
    m_pick_host_name_from_backend_http_settings_isSet = !json[QString("pickHostNameFromBackendHttpSettings")].isNull() && m_pick_host_name_from_backend_http_settings_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_unhealthy_threshold_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_threshold, json[QString("unhealthyThreshold")]);
    m_unhealthy_threshold_isSet = !json[QString("unhealthyThreshold")].isNull() && m_unhealthy_threshold_isValid;
}

QString OAIApplicationGatewayProbePropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayProbePropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_min_servers_isSet) {
        obj.insert(QString("minServers"), ::OpenAPI::toJsonValue(m_min_servers));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_pick_host_name_from_backend_http_settings_isSet) {
        obj.insert(QString("pickHostNameFromBackendHttpSettings"), ::OpenAPI::toJsonValue(m_pick_host_name_from_backend_http_settings));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_unhealthy_threshold_isSet) {
        obj.insert(QString("unhealthyThreshold"), ::OpenAPI::toJsonValue(m_unhealthy_threshold));
    }
    return obj;
}

QString OAIApplicationGatewayProbePropertiesFormat::getHost() const {
    return m_host;
}
void OAIApplicationGatewayProbePropertiesFormat::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_host_Set() const{
    return m_host_isSet;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_host_Valid() const{
    return m_host_isValid;
}

qint32 OAIApplicationGatewayProbePropertiesFormat::getInterval() const {
    return m_interval;
}
void OAIApplicationGatewayProbePropertiesFormat::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_interval_Valid() const{
    return m_interval_isValid;
}

OAIApplicationGatewayProbeHealthResponseMatch OAIApplicationGatewayProbePropertiesFormat::getMatch() const {
    return m_match;
}
void OAIApplicationGatewayProbePropertiesFormat::setMatch(const OAIApplicationGatewayProbeHealthResponseMatch &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_match_Set() const{
    return m_match_isSet;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_match_Valid() const{
    return m_match_isValid;
}

qint32 OAIApplicationGatewayProbePropertiesFormat::getMinServers() const {
    return m_min_servers;
}
void OAIApplicationGatewayProbePropertiesFormat::setMinServers(const qint32 &min_servers) {
    m_min_servers = min_servers;
    m_min_servers_isSet = true;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_min_servers_Set() const{
    return m_min_servers_isSet;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_min_servers_Valid() const{
    return m_min_servers_isValid;
}

QString OAIApplicationGatewayProbePropertiesFormat::getPath() const {
    return m_path;
}
void OAIApplicationGatewayProbePropertiesFormat::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_path_Set() const{
    return m_path_isSet;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIApplicationGatewayProbePropertiesFormat::isPickHostNameFromBackendHttpSettings() const {
    return m_pick_host_name_from_backend_http_settings;
}
void OAIApplicationGatewayProbePropertiesFormat::setPickHostNameFromBackendHttpSettings(const bool &pick_host_name_from_backend_http_settings) {
    m_pick_host_name_from_backend_http_settings = pick_host_name_from_backend_http_settings;
    m_pick_host_name_from_backend_http_settings_isSet = true;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_pick_host_name_from_backend_http_settings_Set() const{
    return m_pick_host_name_from_backend_http_settings_isSet;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_pick_host_name_from_backend_http_settings_Valid() const{
    return m_pick_host_name_from_backend_http_settings_isValid;
}

qint32 OAIApplicationGatewayProbePropertiesFormat::getPort() const {
    return m_port;
}
void OAIApplicationGatewayProbePropertiesFormat::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_port_Set() const{
    return m_port_isSet;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_port_Valid() const{
    return m_port_isValid;
}

OAIApplicationGatewayProtocol OAIApplicationGatewayProbePropertiesFormat::getProtocol() const {
    return m_protocol;
}
void OAIApplicationGatewayProbePropertiesFormat::setProtocol(const OAIApplicationGatewayProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIApplicationGatewayProbePropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationGatewayProbePropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

qint32 OAIApplicationGatewayProbePropertiesFormat::getTimeout() const {
    return m_timeout;
}
void OAIApplicationGatewayProbePropertiesFormat::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_timeout_Valid() const{
    return m_timeout_isValid;
}

qint32 OAIApplicationGatewayProbePropertiesFormat::getUnhealthyThreshold() const {
    return m_unhealthy_threshold;
}
void OAIApplicationGatewayProbePropertiesFormat::setUnhealthyThreshold(const qint32 &unhealthy_threshold) {
    m_unhealthy_threshold = unhealthy_threshold;
    m_unhealthy_threshold_isSet = true;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_unhealthy_threshold_Set() const{
    return m_unhealthy_threshold_isSet;
}

bool OAIApplicationGatewayProbePropertiesFormat::is_unhealthy_threshold_Valid() const{
    return m_unhealthy_threshold_isValid;
}

bool OAIApplicationGatewayProbePropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_servers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pick_host_name_from_backend_http_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayProbePropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
