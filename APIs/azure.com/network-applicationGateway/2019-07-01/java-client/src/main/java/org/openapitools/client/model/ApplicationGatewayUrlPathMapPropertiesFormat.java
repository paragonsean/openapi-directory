/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of UrlPathMap of the application gateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:52.280048-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayUrlPathMapPropertiesFormat {
  public static final String SERIALIZED_NAME_DEFAULT_BACKEND_ADDRESS_POOL = "defaultBackendAddressPool";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BACKEND_ADDRESS_POOL)
  private ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet defaultBackendAddressPool;

  public static final String SERIALIZED_NAME_DEFAULT_BACKEND_HTTP_SETTINGS = "defaultBackendHttpSettings";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BACKEND_HTTP_SETTINGS)
  private ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet defaultBackendHttpSettings;

  public static final String SERIALIZED_NAME_DEFAULT_REDIRECT_CONFIGURATION = "defaultRedirectConfiguration";
  @SerializedName(SERIALIZED_NAME_DEFAULT_REDIRECT_CONFIGURATION)
  private ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet defaultRedirectConfiguration;

  public static final String SERIALIZED_NAME_DEFAULT_REWRITE_RULE_SET = "defaultRewriteRuleSet";
  @SerializedName(SERIALIZED_NAME_DEFAULT_REWRITE_RULE_SET)
  private ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet defaultRewriteRuleSet;

  public static final String SERIALIZED_NAME_PATH_RULES = "pathRules";
  @SerializedName(SERIALIZED_NAME_PATH_RULES)
  private List<Object> pathRules = new ArrayList<>();

  /**
   * The current provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public ApplicationGatewayUrlPathMapPropertiesFormat() {
  }

  public ApplicationGatewayUrlPathMapPropertiesFormat(
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public ApplicationGatewayUrlPathMapPropertiesFormat defaultBackendAddressPool(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet defaultBackendAddressPool) {
    this.defaultBackendAddressPool = defaultBackendAddressPool;
    return this;
  }

  /**
   * Get defaultBackendAddressPool
   * @return defaultBackendAddressPool
   */
  @javax.annotation.Nullable
  public ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet getDefaultBackendAddressPool() {
    return defaultBackendAddressPool;
  }

  public void setDefaultBackendAddressPool(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet defaultBackendAddressPool) {
    this.defaultBackendAddressPool = defaultBackendAddressPool;
  }


  public ApplicationGatewayUrlPathMapPropertiesFormat defaultBackendHttpSettings(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet defaultBackendHttpSettings) {
    this.defaultBackendHttpSettings = defaultBackendHttpSettings;
    return this;
  }

  /**
   * Get defaultBackendHttpSettings
   * @return defaultBackendHttpSettings
   */
  @javax.annotation.Nullable
  public ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet getDefaultBackendHttpSettings() {
    return defaultBackendHttpSettings;
  }

  public void setDefaultBackendHttpSettings(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet defaultBackendHttpSettings) {
    this.defaultBackendHttpSettings = defaultBackendHttpSettings;
  }


  public ApplicationGatewayUrlPathMapPropertiesFormat defaultRedirectConfiguration(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet defaultRedirectConfiguration) {
    this.defaultRedirectConfiguration = defaultRedirectConfiguration;
    return this;
  }

  /**
   * Get defaultRedirectConfiguration
   * @return defaultRedirectConfiguration
   */
  @javax.annotation.Nullable
  public ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet getDefaultRedirectConfiguration() {
    return defaultRedirectConfiguration;
  }

  public void setDefaultRedirectConfiguration(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet defaultRedirectConfiguration) {
    this.defaultRedirectConfiguration = defaultRedirectConfiguration;
  }


  public ApplicationGatewayUrlPathMapPropertiesFormat defaultRewriteRuleSet(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet defaultRewriteRuleSet) {
    this.defaultRewriteRuleSet = defaultRewriteRuleSet;
    return this;
  }

  /**
   * Get defaultRewriteRuleSet
   * @return defaultRewriteRuleSet
   */
  @javax.annotation.Nullable
  public ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet getDefaultRewriteRuleSet() {
    return defaultRewriteRuleSet;
  }

  public void setDefaultRewriteRuleSet(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet defaultRewriteRuleSet) {
    this.defaultRewriteRuleSet = defaultRewriteRuleSet;
  }


  public ApplicationGatewayUrlPathMapPropertiesFormat pathRules(List<Object> pathRules) {
    this.pathRules = pathRules;
    return this;
  }

  public ApplicationGatewayUrlPathMapPropertiesFormat addPathRulesItem(Object pathRulesItem) {
    if (this.pathRules == null) {
      this.pathRules = new ArrayList<>();
    }
    this.pathRules.add(pathRulesItem);
    return this;
  }

  /**
   * Path rule of URL path map resource.
   * @return pathRules
   */
  @javax.annotation.Nullable
  public List<Object> getPathRules() {
    return pathRules;
  }

  public void setPathRules(List<Object> pathRules) {
    this.pathRules = pathRules;
  }


  /**
   * The current provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayUrlPathMapPropertiesFormat applicationGatewayUrlPathMapPropertiesFormat = (ApplicationGatewayUrlPathMapPropertiesFormat) o;
    return Objects.equals(this.defaultBackendAddressPool, applicationGatewayUrlPathMapPropertiesFormat.defaultBackendAddressPool) &&
        Objects.equals(this.defaultBackendHttpSettings, applicationGatewayUrlPathMapPropertiesFormat.defaultBackendHttpSettings) &&
        Objects.equals(this.defaultRedirectConfiguration, applicationGatewayUrlPathMapPropertiesFormat.defaultRedirectConfiguration) &&
        Objects.equals(this.defaultRewriteRuleSet, applicationGatewayUrlPathMapPropertiesFormat.defaultRewriteRuleSet) &&
        Objects.equals(this.pathRules, applicationGatewayUrlPathMapPropertiesFormat.pathRules) &&
        Objects.equals(this.provisioningState, applicationGatewayUrlPathMapPropertiesFormat.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultBackendAddressPool, defaultBackendHttpSettings, defaultRedirectConfiguration, defaultRewriteRuleSet, pathRules, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayUrlPathMapPropertiesFormat {\n");
    sb.append("    defaultBackendAddressPool: ").append(toIndentedString(defaultBackendAddressPool)).append("\n");
    sb.append("    defaultBackendHttpSettings: ").append(toIndentedString(defaultBackendHttpSettings)).append("\n");
    sb.append("    defaultRedirectConfiguration: ").append(toIndentedString(defaultRedirectConfiguration)).append("\n");
    sb.append("    defaultRewriteRuleSet: ").append(toIndentedString(defaultRewriteRuleSet)).append("\n");
    sb.append("    pathRules: ").append(toIndentedString(pathRules)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultBackendAddressPool");
    openapiFields.add("defaultBackendHttpSettings");
    openapiFields.add("defaultRedirectConfiguration");
    openapiFields.add("defaultRewriteRuleSet");
    openapiFields.add("pathRules");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayUrlPathMapPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayUrlPathMapPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayUrlPathMapPropertiesFormat is not found in the empty JSON string", ApplicationGatewayUrlPathMapPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayUrlPathMapPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayUrlPathMapPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `defaultBackendAddressPool`
      if (jsonObj.get("defaultBackendAddressPool") != null && !jsonObj.get("defaultBackendAddressPool").isJsonNull()) {
        ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonObj.get("defaultBackendAddressPool"));
      }
      // validate the optional field `defaultBackendHttpSettings`
      if (jsonObj.get("defaultBackendHttpSettings") != null && !jsonObj.get("defaultBackendHttpSettings").isJsonNull()) {
        ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonObj.get("defaultBackendHttpSettings"));
      }
      // validate the optional field `defaultRedirectConfiguration`
      if (jsonObj.get("defaultRedirectConfiguration") != null && !jsonObj.get("defaultRedirectConfiguration").isJsonNull()) {
        ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonObj.get("defaultRedirectConfiguration"));
      }
      // validate the optional field `defaultRewriteRuleSet`
      if (jsonObj.get("defaultRewriteRuleSet") != null && !jsonObj.get("defaultRewriteRuleSet").isJsonNull()) {
        ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonObj.get("defaultRewriteRuleSet"));
      }
      if (jsonObj.get("pathRules") != null && !jsonObj.get("pathRules").isJsonNull()) {
        JsonArray jsonArraypathRules = jsonObj.getAsJsonArray("pathRules");
        if (jsonArraypathRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pathRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pathRules` to be an array in the JSON string but got `%s`", jsonObj.get("pathRules").toString()));
          }

          // validate the optional field `pathRules` (array)
          for (int i = 0; i < jsonArraypathRules.size(); i++) {
            Object.validateJsonElement(jsonArraypathRules.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayUrlPathMapPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayUrlPathMapPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayUrlPathMapPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayUrlPathMapPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayUrlPathMapPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayUrlPathMapPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayUrlPathMapPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayUrlPathMapPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayUrlPathMapPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayUrlPathMapPropertiesFormat
   */
  public static ApplicationGatewayUrlPathMapPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayUrlPathMapPropertiesFormat.class);
  }

  /**
   * Convert an instance of ApplicationGatewayUrlPathMapPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

