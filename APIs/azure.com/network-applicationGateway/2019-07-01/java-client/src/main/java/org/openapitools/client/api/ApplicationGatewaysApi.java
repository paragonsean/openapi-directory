/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplicationGateway;
import org.openapitools.client.model.ApplicationGatewayAvailableSslPredefinedPolicies;
import org.openapitools.client.model.ApplicationGatewayAvailableWafRuleSetsResult;
import org.openapitools.client.model.ApplicationGatewayBackendHealth;
import org.openapitools.client.model.ApplicationGatewayBackendHealthOnDemand;
import org.openapitools.client.model.ApplicationGatewayListResult;
import org.openapitools.client.model.ApplicationGatewayOnDemandProbe;
import org.openapitools.client.model.ApplicationGatewaysListAvailableServerVariablesDefaultResponse;
import org.openapitools.client.model.ApplicationGatewaysUpdateTagsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationGatewaysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationGatewaysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationGatewaysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for applicationGatewaysBackendHealth
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands BackendAddressPool and BackendHttpSettings referenced in backend health. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysBackendHealthCall(String resourceGroupName, String applicationGatewayName, String apiVersion, String subscriptionId, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/backendhealth"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationGatewayName" + "}", localVarApiClient.escapeString(applicationGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysBackendHealthValidateBeforeCall(String resourceGroupName, String applicationGatewayName, String apiVersion, String subscriptionId, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationGatewaysBackendHealth(Async)");
        }

        // verify the required parameter 'applicationGatewayName' is set
        if (applicationGatewayName == null) {
            throw new ApiException("Missing the required parameter 'applicationGatewayName' when calling applicationGatewaysBackendHealth(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationGatewaysBackendHealth(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applicationGatewaysBackendHealth(Async)");
        }

        return applicationGatewaysBackendHealthCall(resourceGroupName, applicationGatewayName, apiVersion, subscriptionId, $expand, _callback);

    }

    /**
     * 
     * Gets the backend health of the specified application gateway in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands BackendAddressPool and BackendHttpSettings referenced in backend health. (optional)
     * @return ApplicationGatewayBackendHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationGatewayBackendHealth applicationGatewaysBackendHealth(String resourceGroupName, String applicationGatewayName, String apiVersion, String subscriptionId, String $expand) throws ApiException {
        ApiResponse<ApplicationGatewayBackendHealth> localVarResp = applicationGatewaysBackendHealthWithHttpInfo(resourceGroupName, applicationGatewayName, apiVersion, subscriptionId, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the backend health of the specified application gateway in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands BackendAddressPool and BackendHttpSettings referenced in backend health. (optional)
     * @return ApiResponse&lt;ApplicationGatewayBackendHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationGatewayBackendHealth> applicationGatewaysBackendHealthWithHttpInfo(String resourceGroupName, String applicationGatewayName, String apiVersion, String subscriptionId, String $expand) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysBackendHealthValidateBeforeCall(resourceGroupName, applicationGatewayName, apiVersion, subscriptionId, $expand, null);
        Type localVarReturnType = new TypeToken<ApplicationGatewayBackendHealth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the backend health of the specified application gateway in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands BackendAddressPool and BackendHttpSettings referenced in backend health. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysBackendHealthAsync(String resourceGroupName, String applicationGatewayName, String apiVersion, String subscriptionId, String $expand, final ApiCallback<ApplicationGatewayBackendHealth> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysBackendHealthValidateBeforeCall(resourceGroupName, applicationGatewayName, apiVersion, subscriptionId, $expand, _callback);
        Type localVarReturnType = new TypeToken<ApplicationGatewayBackendHealth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysBackendHealthOnDemand
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param probeRequest Request body for on-demand test probe operation. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param $expand Expands BackendAddressPool and BackendHttpSettings referenced in backend health. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysBackendHealthOnDemandCall(String resourceGroupName, String applicationGatewayName, ApplicationGatewayOnDemandProbe probeRequest,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = probeRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/getBackendHealthOnDemand"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationGatewayName" + "}", localVarApiClient.escapeString(applicationGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysBackendHealthOnDemandValidateBeforeCall(String resourceGroupName, String applicationGatewayName, ApplicationGatewayOnDemandProbe probeRequest,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationGatewaysBackendHealthOnDemand(Async)");
        }

        // verify the required parameter 'applicationGatewayName' is set
        if (applicationGatewayName == null) {
            throw new ApiException("Missing the required parameter 'applicationGatewayName' when calling applicationGatewaysBackendHealthOnDemand(Async)");
        }

        // verify the required parameter 'probeRequest' is set
        if (probeRequest == null) {
            throw new ApiException("Missing the required parameter 'probeRequest' when calling applicationGatewaysBackendHealthOnDemand(Async)");
        }

        return applicationGatewaysBackendHealthOnDemandCall(resourceGroupName, applicationGatewayName, probeRequest, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, $expand, _callback);

    }

    /**
     * 
     * Gets the backend health for given combination of backend pool and http setting of the specified application gateway in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param probeRequest Request body for on-demand test probe operation. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param $expand Expands BackendAddressPool and BackendHttpSettings referenced in backend health. (optional)
     * @return ApplicationGatewayBackendHealthOnDemand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationGatewayBackendHealthOnDemand applicationGatewaysBackendHealthOnDemand(String resourceGroupName, String applicationGatewayName, ApplicationGatewayOnDemandProbe probeRequest,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, String $expand) throws ApiException {
        ApiResponse<ApplicationGatewayBackendHealthOnDemand> localVarResp = applicationGatewaysBackendHealthOnDemandWithHttpInfo(resourceGroupName, applicationGatewayName, probeRequest, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the backend health for given combination of backend pool and http setting of the specified application gateway in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param probeRequest Request body for on-demand test probe operation. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param $expand Expands BackendAddressPool and BackendHttpSettings referenced in backend health. (optional)
     * @return ApiResponse&lt;ApplicationGatewayBackendHealthOnDemand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationGatewayBackendHealthOnDemand> applicationGatewaysBackendHealthOnDemandWithHttpInfo(String resourceGroupName, String applicationGatewayName, ApplicationGatewayOnDemandProbe probeRequest,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, String $expand) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysBackendHealthOnDemandValidateBeforeCall(resourceGroupName, applicationGatewayName, probeRequest, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, $expand, null);
        Type localVarReturnType = new TypeToken<ApplicationGatewayBackendHealthOnDemand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the backend health for given combination of backend pool and http setting of the specified application gateway in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param probeRequest Request body for on-demand test probe operation. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param $expand Expands BackendAddressPool and BackendHttpSettings referenced in backend health. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysBackendHealthOnDemandAsync(String resourceGroupName, String applicationGatewayName, ApplicationGatewayOnDemandProbe probeRequest,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, String $expand, final ApiCallback<ApplicationGatewayBackendHealthOnDemand> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysBackendHealthOnDemandValidateBeforeCall(resourceGroupName, applicationGatewayName, probeRequest, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, $expand, _callback);
        Type localVarReturnType = new TypeToken<ApplicationGatewayBackendHealthOnDemand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param parameters Parameters supplied to the create or update application gateway operation. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ApplicationGateway resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ApplicationGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysCreateOrUpdateCall(String resourceGroupName, String applicationGatewayName, ApplicationGateway parameters,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationGatewayName" + "}", localVarApiClient.escapeString(applicationGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysCreateOrUpdateValidateBeforeCall(String resourceGroupName, String applicationGatewayName, ApplicationGateway parameters,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'applicationGatewayName' is set
        if (applicationGatewayName == null) {
            throw new ApiException("Missing the required parameter 'applicationGatewayName' when calling applicationGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling applicationGatewaysCreateOrUpdate(Async)");
        }

        return applicationGatewaysCreateOrUpdateCall(resourceGroupName, applicationGatewayName, parameters, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Creates or updates the specified application gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param parameters Parameters supplied to the create or update application gateway operation. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApplicationGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ApplicationGateway resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ApplicationGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationGateway applicationGatewaysCreateOrUpdate(String resourceGroupName, String applicationGatewayName, ApplicationGateway parameters,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        ApiResponse<ApplicationGateway> localVarResp = applicationGatewaysCreateOrUpdateWithHttpInfo(resourceGroupName, applicationGatewayName, parameters, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the specified application gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param parameters Parameters supplied to the create or update application gateway operation. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;ApplicationGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ApplicationGateway resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ApplicationGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationGateway> applicationGatewaysCreateOrUpdateWithHttpInfo(String resourceGroupName, String applicationGatewayName, ApplicationGateway parameters,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysCreateOrUpdateValidateBeforeCall(resourceGroupName, applicationGatewayName, parameters, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        Type localVarReturnType = new TypeToken<ApplicationGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the specified application gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param parameters Parameters supplied to the create or update application gateway operation. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ApplicationGateway resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ApplicationGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysCreateOrUpdateAsync(String resourceGroupName, String applicationGatewayName, ApplicationGateway parameters,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<ApplicationGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysCreateOrUpdateValidateBeforeCall(resourceGroupName, applicationGatewayName, parameters, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        Type localVarReturnType = new TypeToken<ApplicationGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource with the specified name does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysDeleteCall(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationGatewayName" + "}", localVarApiClient.escapeString(applicationGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysDeleteValidateBeforeCall(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationGatewaysDelete(Async)");
        }

        // verify the required parameter 'applicationGatewayName' is set
        if (applicationGatewayName == null) {
            throw new ApiException("Missing the required parameter 'applicationGatewayName' when calling applicationGatewaysDelete(Async)");
        }

        return applicationGatewaysDeleteCall(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Deletes the specified application gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource with the specified name does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void applicationGatewaysDelete(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        applicationGatewaysDeleteWithHttpInfo(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
    }

    /**
     * 
     * Deletes the specified application gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource with the specified name does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> applicationGatewaysDeleteWithHttpInfo(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysDeleteValidateBeforeCall(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified application gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource with the specified name does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysDeleteAsync(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysDeleteValidateBeforeCall(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns an ApplicationGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysGetCall(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationGatewayName" + "}", localVarApiClient.escapeString(applicationGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysGetValidateBeforeCall(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationGatewaysGet(Async)");
        }

        // verify the required parameter 'applicationGatewayName' is set
        if (applicationGatewayName == null) {
            throw new ApiException("Missing the required parameter 'applicationGatewayName' when calling applicationGatewaysGet(Async)");
        }

        return applicationGatewaysGetCall(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Gets the specified application gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApplicationGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns an ApplicationGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationGateway applicationGatewaysGet(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        ApiResponse<ApplicationGateway> localVarResp = applicationGatewaysGetWithHttpInfo(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified application gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;ApplicationGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns an ApplicationGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationGateway> applicationGatewaysGetWithHttpInfo(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysGetValidateBeforeCall(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        Type localVarReturnType = new TypeToken<ApplicationGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified application gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns an ApplicationGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysGetAsync(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<ApplicationGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysGetValidateBeforeCall(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        Type localVarReturnType = new TypeToken<ApplicationGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysGetSslPredefinedPolicy
     * @param predefinedPolicyName Name of Ssl predefined policy. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a Ssl predefined policy with the specified policy name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysGetSslPredefinedPolicyCall(String predefinedPolicyName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies/{predefinedPolicyName}"
            .replace("{" + "predefinedPolicyName" + "}", localVarApiClient.escapeString(predefinedPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysGetSslPredefinedPolicyValidateBeforeCall(String predefinedPolicyName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'predefinedPolicyName' is set
        if (predefinedPolicyName == null) {
            throw new ApiException("Missing the required parameter 'predefinedPolicyName' when calling applicationGatewaysGetSslPredefinedPolicy(Async)");
        }

        return applicationGatewaysGetSslPredefinedPolicyCall(predefinedPolicyName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Gets Ssl predefined policy with the specified policy name.
     * @param predefinedPolicyName Name of Ssl predefined policy. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a Ssl predefined policy with the specified policy name. </td><td>  -  </td></tr>
     </table>
     */
    public Object applicationGatewaysGetSslPredefinedPolicy(String predefinedPolicyName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        ApiResponse<Object> localVarResp = applicationGatewaysGetSslPredefinedPolicyWithHttpInfo(predefinedPolicyName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets Ssl predefined policy with the specified policy name.
     * @param predefinedPolicyName Name of Ssl predefined policy. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a Ssl predefined policy with the specified policy name. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> applicationGatewaysGetSslPredefinedPolicyWithHttpInfo(String predefinedPolicyName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysGetSslPredefinedPolicyValidateBeforeCall(predefinedPolicyName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets Ssl predefined policy with the specified policy name.
     * @param predefinedPolicyName Name of Ssl predefined policy. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a Ssl predefined policy with the specified policy name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysGetSslPredefinedPolicyAsync(String predefinedPolicyName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysGetSslPredefinedPolicyValidateBeforeCall(predefinedPolicyName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysList
     * @param resourceGroupName The name of the resource group. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of ApplicationGateway resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListCall(String resourceGroupName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysListValidateBeforeCall(String resourceGroupName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationGatewaysList(Async)");
        }

        return applicationGatewaysListCall(resourceGroupName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Lists all application gateways in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApplicationGatewayListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of ApplicationGateway resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationGatewayListResult applicationGatewaysList(String resourceGroupName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        ApiResponse<ApplicationGatewayListResult> localVarResp = applicationGatewaysListWithHttpInfo(resourceGroupName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all application gateways in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;ApplicationGatewayListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of ApplicationGateway resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationGatewayListResult> applicationGatewaysListWithHttpInfo(String resourceGroupName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysListValidateBeforeCall(resourceGroupName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        Type localVarReturnType = new TypeToken<ApplicationGatewayListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all application gateways in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of ApplicationGateway resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAsync(String resourceGroupName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<ApplicationGatewayListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysListValidateBeforeCall(resourceGroupName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        Type localVarReturnType = new TypeToken<ApplicationGatewayListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysListAll
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of ApplicationGateway resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAllCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGateways";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysListAllValidateBeforeCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        return applicationGatewaysListAllCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Gets all the application gateways in a subscription.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApplicationGatewayListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of ApplicationGateway resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationGatewayListResult applicationGatewaysListAll( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        ApiResponse<ApplicationGatewayListResult> localVarResp = applicationGatewaysListAllWithHttpInfo(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the application gateways in a subscription.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;ApplicationGatewayListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of ApplicationGateway resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationGatewayListResult> applicationGatewaysListAllWithHttpInfo( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysListAllValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        Type localVarReturnType = new TypeToken<ApplicationGatewayListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the application gateways in a subscription.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of ApplicationGateway resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAllAsync( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<ApplicationGatewayListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysListAllValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        Type localVarReturnType = new TypeToken<ApplicationGatewayListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysListAvailableRequestHeaders
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available request headers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAvailableRequestHeadersCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableRequestHeaders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysListAvailableRequestHeadersValidateBeforeCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        return applicationGatewaysListAvailableRequestHeadersCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Lists all available request headers.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available request headers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> applicationGatewaysListAvailableRequestHeaders( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        ApiResponse<List<String>> localVarResp = applicationGatewaysListAvailableRequestHeadersWithHttpInfo(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all available request headers.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available request headers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> applicationGatewaysListAvailableRequestHeadersWithHttpInfo( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysListAvailableRequestHeadersValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all available request headers.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available request headers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAvailableRequestHeadersAsync( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysListAvailableRequestHeadersValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysListAvailableResponseHeaders
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available response headers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAvailableResponseHeadersCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableResponseHeaders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysListAvailableResponseHeadersValidateBeforeCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        return applicationGatewaysListAvailableResponseHeadersCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Lists all available response headers.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available response headers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> applicationGatewaysListAvailableResponseHeaders( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        ApiResponse<List<String>> localVarResp = applicationGatewaysListAvailableResponseHeadersWithHttpInfo(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all available response headers.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available response headers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> applicationGatewaysListAvailableResponseHeadersWithHttpInfo( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysListAvailableResponseHeadersValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all available response headers.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available response headers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAvailableResponseHeadersAsync( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysListAvailableResponseHeadersValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysListAvailableServerVariables
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available server variables. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAvailableServerVariablesCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableServerVariables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysListAvailableServerVariablesValidateBeforeCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        return applicationGatewaysListAvailableServerVariablesCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Lists all available server variables.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available server variables. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> applicationGatewaysListAvailableServerVariables( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        ApiResponse<List<String>> localVarResp = applicationGatewaysListAvailableServerVariablesWithHttpInfo(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all available server variables.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available server variables. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> applicationGatewaysListAvailableServerVariablesWithHttpInfo( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysListAvailableServerVariablesValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all available server variables.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available server variables. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAvailableServerVariablesAsync( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysListAvailableServerVariablesValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysListAvailableSslOptions
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns all available Ssl options for configuring Ssl policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAvailableSslOptionsCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysListAvailableSslOptionsValidateBeforeCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        return applicationGatewaysListAvailableSslOptionsCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Lists available Ssl options for configuring Ssl policy.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns all available Ssl options for configuring Ssl policy. </td><td>  -  </td></tr>
     </table>
     */
    public Object applicationGatewaysListAvailableSslOptions( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        ApiResponse<Object> localVarResp = applicationGatewaysListAvailableSslOptionsWithHttpInfo(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists available Ssl options for configuring Ssl policy.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns all available Ssl options for configuring Ssl policy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> applicationGatewaysListAvailableSslOptionsWithHttpInfo( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysListAvailableSslOptionsValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists available Ssl options for configuring Ssl policy.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns all available Ssl options for configuring Ssl policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAvailableSslOptionsAsync( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysListAvailableSslOptionsValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysListAvailableSslPredefinedPolicies
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a lists of all Ssl predefined policies for configuring Ssl policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAvailableSslPredefinedPoliciesCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysListAvailableSslPredefinedPoliciesValidateBeforeCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        return applicationGatewaysListAvailableSslPredefinedPoliciesCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Lists all SSL predefined policies for configuring Ssl policy.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApplicationGatewayAvailableSslPredefinedPolicies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a lists of all Ssl predefined policies for configuring Ssl policy. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationGatewayAvailableSslPredefinedPolicies applicationGatewaysListAvailableSslPredefinedPolicies( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        ApiResponse<ApplicationGatewayAvailableSslPredefinedPolicies> localVarResp = applicationGatewaysListAvailableSslPredefinedPoliciesWithHttpInfo(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all SSL predefined policies for configuring Ssl policy.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;ApplicationGatewayAvailableSslPredefinedPolicies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a lists of all Ssl predefined policies for configuring Ssl policy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationGatewayAvailableSslPredefinedPolicies> applicationGatewaysListAvailableSslPredefinedPoliciesWithHttpInfo( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysListAvailableSslPredefinedPoliciesValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        Type localVarReturnType = new TypeToken<ApplicationGatewayAvailableSslPredefinedPolicies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all SSL predefined policies for configuring Ssl policy.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a lists of all Ssl predefined policies for configuring Ssl policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAvailableSslPredefinedPoliciesAsync( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<ApplicationGatewayAvailableSslPredefinedPolicies> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysListAvailableSslPredefinedPoliciesValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        Type localVarReturnType = new TypeToken<ApplicationGatewayAvailableSslPredefinedPolicies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysListAvailableWafRuleSets
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available web application firewall rule sets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAvailableWafRuleSetsCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableWafRuleSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysListAvailableWafRuleSetsValidateBeforeCall( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        return applicationGatewaysListAvailableWafRuleSetsCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Lists all available web application firewall rule sets.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApplicationGatewayAvailableWafRuleSetsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available web application firewall rule sets. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationGatewayAvailableWafRuleSetsResult applicationGatewaysListAvailableWafRuleSets( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        ApiResponse<ApplicationGatewayAvailableWafRuleSetsResult> localVarResp = applicationGatewaysListAvailableWafRuleSetsWithHttpInfo(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all available web application firewall rule sets.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;ApplicationGatewayAvailableWafRuleSetsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available web application firewall rule sets. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationGatewayAvailableWafRuleSetsResult> applicationGatewaysListAvailableWafRuleSetsWithHttpInfo( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysListAvailableWafRuleSetsValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        Type localVarReturnType = new TypeToken<ApplicationGatewayAvailableWafRuleSetsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all available web application firewall rule sets.
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of all available web application firewall rule sets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysListAvailableWafRuleSetsAsync( UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<ApplicationGatewayAvailableWafRuleSetsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysListAvailableWafRuleSetsValidateBeforeCall(UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        Type localVarReturnType = new TypeToken<ApplicationGatewayAvailableWafRuleSetsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysStart
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation starts the ApplicationGateway resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysStartCall(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/start"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationGatewayName" + "}", localVarApiClient.escapeString(applicationGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysStartValidateBeforeCall(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationGatewaysStart(Async)");
        }

        // verify the required parameter 'applicationGatewayName' is set
        if (applicationGatewayName == null) {
            throw new ApiException("Missing the required parameter 'applicationGatewayName' when calling applicationGatewaysStart(Async)");
        }

        return applicationGatewaysStartCall(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Starts the specified application gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation starts the ApplicationGateway resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public void applicationGatewaysStart(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        applicationGatewaysStartWithHttpInfo(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
    }

    /**
     * 
     * Starts the specified application gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation starts the ApplicationGateway resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> applicationGatewaysStartWithHttpInfo(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysStartValidateBeforeCall(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Starts the specified application gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation starts the ApplicationGateway resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysStartAsync(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysStartValidateBeforeCall(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysStop
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation stops the ApplicationGateway resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysStopCall(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/stop"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationGatewayName" + "}", localVarApiClient.escapeString(applicationGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysStopValidateBeforeCall(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationGatewaysStop(Async)");
        }

        // verify the required parameter 'applicationGatewayName' is set
        if (applicationGatewayName == null) {
            throw new ApiException("Missing the required parameter 'applicationGatewayName' when calling applicationGatewaysStop(Async)");
        }

        return applicationGatewaysStopCall(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Stops the specified application gateway in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation stops the ApplicationGateway resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public void applicationGatewaysStop(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        applicationGatewaysStopWithHttpInfo(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
    }

    /**
     * 
     * Stops the specified application gateway in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation stops the ApplicationGateway resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> applicationGatewaysStopWithHttpInfo(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysStopValidateBeforeCall(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Stops the specified application gateway in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation stops the ApplicationGateway resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysStopAsync(String resourceGroupName, String applicationGatewayName,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysStopValidateBeforeCall(resourceGroupName, applicationGatewayName, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGatewaysUpdateTags
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param parameters Parameters supplied to update application gateway tags. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ApplicationGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysUpdateTagsCall(String resourceGroupName, String applicationGatewayName, ApplicationGatewaysUpdateTagsRequest parameters,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationGatewayName" + "}", localVarApiClient.escapeString(applicationGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGatewaysUpdateTagsValidateBeforeCall(String resourceGroupName, String applicationGatewayName, ApplicationGatewaysUpdateTagsRequest parameters,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationGatewaysUpdateTags(Async)");
        }

        // verify the required parameter 'applicationGatewayName' is set
        if (applicationGatewayName == null) {
            throw new ApiException("Missing the required parameter 'applicationGatewayName' when calling applicationGatewaysUpdateTags(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling applicationGatewaysUpdateTags(Async)");
        }

        return applicationGatewaysUpdateTagsCall(resourceGroupName, applicationGatewayName, parameters, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);

    }

    /**
     * 
     * Updates the specified application gateway tags.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param parameters Parameters supplied to update application gateway tags. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApplicationGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ApplicationGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationGateway applicationGatewaysUpdateTags(String resourceGroupName, String applicationGatewayName, ApplicationGatewaysUpdateTagsRequest parameters,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        ApiResponse<ApplicationGateway> localVarResp = applicationGatewaysUpdateTagsWithHttpInfo(resourceGroupName, applicationGatewayName, parameters, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the specified application gateway tags.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param parameters Parameters supplied to update application gateway tags. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @return ApiResponse&lt;ApplicationGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ApplicationGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationGateway> applicationGatewaysUpdateTagsWithHttpInfo(String resourceGroupName, String applicationGatewayName, ApplicationGatewaysUpdateTagsRequest parameters,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2) throws ApiException {
        okhttp3.Call localVarCall = applicationGatewaysUpdateTagsValidateBeforeCall(resourceGroupName, applicationGatewayName, parameters, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, null);
        Type localVarReturnType = new TypeToken<ApplicationGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the specified application gateway tags.
     * @param resourceGroupName The name of the resource group. (required)
     * @param applicationGatewayName The name of the application gateway. (required)
     * @param parameters Parameters supplied to update application gateway tags. (required)
     * @param UNKNOWN_PARAMETER_NAME  (optional)
     * @param UNKNOWN_PARAMETER_NAME2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ApplicationGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGatewaysUpdateTagsAsync(String resourceGroupName, String applicationGatewayName, ApplicationGatewaysUpdateTagsRequest parameters,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2, final ApiCallback<ApplicationGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGatewaysUpdateTagsValidateBeforeCall(resourceGroupName, applicationGatewayName, parameters, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, _callback);
        Type localVarReturnType = new TypeToken<ApplicationGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
