/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationGatewayBackendHealthHttpSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result of on demand test probe.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:52.280048-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayBackendHealthOnDemand {
  public static final String SERIALIZED_NAME_BACKEND_ADDRESS_POOL = "backendAddressPool";
  @SerializedName(SERIALIZED_NAME_BACKEND_ADDRESS_POOL)
  private Object backendAddressPool;

  public static final String SERIALIZED_NAME_BACKEND_HEALTH_HTTP_SETTINGS = "backendHealthHttpSettings";
  @SerializedName(SERIALIZED_NAME_BACKEND_HEALTH_HTTP_SETTINGS)
  private ApplicationGatewayBackendHealthHttpSettings backendHealthHttpSettings;

  public ApplicationGatewayBackendHealthOnDemand() {
  }

  public ApplicationGatewayBackendHealthOnDemand backendAddressPool(Object backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
    return this;
  }

  /**
   * Get backendAddressPool
   * @return backendAddressPool
   */
  @javax.annotation.Nullable
  public Object getBackendAddressPool() {
    return backendAddressPool;
  }

  public void setBackendAddressPool(Object backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
  }


  public ApplicationGatewayBackendHealthOnDemand backendHealthHttpSettings(ApplicationGatewayBackendHealthHttpSettings backendHealthHttpSettings) {
    this.backendHealthHttpSettings = backendHealthHttpSettings;
    return this;
  }

  /**
   * Get backendHealthHttpSettings
   * @return backendHealthHttpSettings
   */
  @javax.annotation.Nullable
  public ApplicationGatewayBackendHealthHttpSettings getBackendHealthHttpSettings() {
    return backendHealthHttpSettings;
  }

  public void setBackendHealthHttpSettings(ApplicationGatewayBackendHealthHttpSettings backendHealthHttpSettings) {
    this.backendHealthHttpSettings = backendHealthHttpSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayBackendHealthOnDemand applicationGatewayBackendHealthOnDemand = (ApplicationGatewayBackendHealthOnDemand) o;
    return Objects.equals(this.backendAddressPool, applicationGatewayBackendHealthOnDemand.backendAddressPool) &&
        Objects.equals(this.backendHealthHttpSettings, applicationGatewayBackendHealthOnDemand.backendHealthHttpSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendAddressPool, backendHealthHttpSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayBackendHealthOnDemand {\n");
    sb.append("    backendAddressPool: ").append(toIndentedString(backendAddressPool)).append("\n");
    sb.append("    backendHealthHttpSettings: ").append(toIndentedString(backendHealthHttpSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendAddressPool");
    openapiFields.add("backendHealthHttpSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayBackendHealthOnDemand
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayBackendHealthOnDemand.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayBackendHealthOnDemand is not found in the empty JSON string", ApplicationGatewayBackendHealthOnDemand.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayBackendHealthOnDemand.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayBackendHealthOnDemand` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backendAddressPool`
      if (jsonObj.get("backendAddressPool") != null && !jsonObj.get("backendAddressPool").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("backendAddressPool"));
      }
      // validate the optional field `backendHealthHttpSettings`
      if (jsonObj.get("backendHealthHttpSettings") != null && !jsonObj.get("backendHealthHttpSettings").isJsonNull()) {
        ApplicationGatewayBackendHealthHttpSettings.validateJsonElement(jsonObj.get("backendHealthHttpSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayBackendHealthOnDemand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayBackendHealthOnDemand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayBackendHealthOnDemand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayBackendHealthOnDemand.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayBackendHealthOnDemand>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayBackendHealthOnDemand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayBackendHealthOnDemand read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayBackendHealthOnDemand given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayBackendHealthOnDemand
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayBackendHealthOnDemand
   */
  public static ApplicationGatewayBackendHealthOnDemand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayBackendHealthOnDemand.class);
  }

  /**
   * Convert an instance of ApplicationGatewayBackendHealthOnDemand to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

