/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PrivateLinkConnection properties for the network interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:52.280048-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties {
  public static final String SERIALIZED_NAME_FQDNS = "fqdns";
  @SerializedName(SERIALIZED_NAME_FQDNS)
  private List<String> fqdns = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private String groupId;

  public static final String SERIALIZED_NAME_REQUIRED_MEMBER_NAME = "requiredMemberName";
  @SerializedName(SERIALIZED_NAME_REQUIRED_MEMBER_NAME)
  private String requiredMemberName;

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties() {
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties(
     List<String> fqdns, 
     String groupId, 
     String requiredMemberName
  ) {
    this();
    this.fqdns = fqdns;
    this.groupId = groupId;
    this.requiredMemberName = requiredMemberName;
  }

  /**
   * List of FQDNs for current private link connection.
   * @return fqdns
   */
  @javax.annotation.Nullable
  public List<String> getFqdns() {
    return fqdns;
  }



  /**
   * The group ID for current private link connection.
   * @return groupId
   */
  @javax.annotation.Nullable
  public String getGroupId() {
    return groupId;
  }



  /**
   * The required member name for current private link connection.
   * @return requiredMemberName
   */
  @javax.annotation.Nullable
  public String getRequiredMemberName() {
    return requiredMemberName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties applicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties = (ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties) o;
    return Objects.equals(this.fqdns, applicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties.fqdns) &&
        Objects.equals(this.groupId, applicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties.groupId) &&
        Objects.equals(this.requiredMemberName, applicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties.requiredMemberName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fqdns, groupId, requiredMemberName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties {\n");
    sb.append("    fqdns: ").append(toIndentedString(fqdns)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    requiredMemberName: ").append(toIndentedString(requiredMemberName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fqdns");
    openapiFields.add("groupId");
    openapiFields.add("requiredMemberName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties is not found in the empty JSON string", ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("fqdns") != null && !jsonObj.get("fqdns").isJsonNull() && !jsonObj.get("fqdns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdns` to be an array in the JSON string but got `%s`", jsonObj.get("fqdns").toString()));
      }
      if ((jsonObj.get("groupId") != null && !jsonObj.get("groupId").isJsonNull()) && !jsonObj.get("groupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupId").toString()));
      }
      if ((jsonObj.get("requiredMemberName") != null && !jsonObj.get("requiredMemberName").isJsonNull()) && !jsonObj.get("requiredMemberName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredMemberName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requiredMemberName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties
   */
  public static ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties.class);
  }

  /**
   * Convert an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPrivateLinkConnectionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

