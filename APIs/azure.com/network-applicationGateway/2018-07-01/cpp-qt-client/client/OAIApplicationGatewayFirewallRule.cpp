/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayFirewallRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayFirewallRule::OAIApplicationGatewayFirewallRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayFirewallRule::OAIApplicationGatewayFirewallRule() {
    this->initializeModel();
}

OAIApplicationGatewayFirewallRule::~OAIApplicationGatewayFirewallRule() {}

void OAIApplicationGatewayFirewallRule::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;
}

void OAIApplicationGatewayFirewallRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayFirewallRule::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("ruleId")]);
    m_rule_id_isSet = !json[QString("ruleId")].isNull() && m_rule_id_isValid;
}

QString OAIApplicationGatewayFirewallRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayFirewallRule::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("ruleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    return obj;
}

QString OAIApplicationGatewayFirewallRule::getDescription() const {
    return m_description;
}
void OAIApplicationGatewayFirewallRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplicationGatewayFirewallRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplicationGatewayFirewallRule::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIApplicationGatewayFirewallRule::getRuleId() const {
    return m_rule_id;
}
void OAIApplicationGatewayFirewallRule::setRuleId(const qint32 &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIApplicationGatewayFirewallRule::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIApplicationGatewayFirewallRule::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

bool OAIApplicationGatewayFirewallRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayFirewallRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_id_isValid && true;
}

} // namespace OpenAPI
