/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Model0;
import org.openapitools.client.model.RedirectTypeEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of redirect configuration of the application gateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:05.086323-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayRedirectConfigurationPropertiesFormat {
  public static final String SERIALIZED_NAME_INCLUDE_PATH = "includePath";
  @SerializedName(SERIALIZED_NAME_INCLUDE_PATH)
  private Boolean includePath;

  public static final String SERIALIZED_NAME_INCLUDE_QUERY_STRING = "includeQueryString";
  @SerializedName(SERIALIZED_NAME_INCLUDE_QUERY_STRING)
  private Boolean includeQueryString;

  public static final String SERIALIZED_NAME_PATH_RULES = "pathRules";
  @SerializedName(SERIALIZED_NAME_PATH_RULES)
  private List<Model0> pathRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_REDIRECT_TYPE = "redirectType";
  @SerializedName(SERIALIZED_NAME_REDIRECT_TYPE)
  private RedirectTypeEnum redirectType;

  public static final String SERIALIZED_NAME_REQUEST_ROUTING_RULES = "requestRoutingRules";
  @SerializedName(SERIALIZED_NAME_REQUEST_ROUTING_RULES)
  private List<Model0> requestRoutingRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_LISTENER = "targetListener";
  @SerializedName(SERIALIZED_NAME_TARGET_LISTENER)
  private Model0 targetListener = null;

  public static final String SERIALIZED_NAME_TARGET_URL = "targetUrl";
  @SerializedName(SERIALIZED_NAME_TARGET_URL)
  private String targetUrl;

  public static final String SERIALIZED_NAME_URL_PATH_MAPS = "urlPathMaps";
  @SerializedName(SERIALIZED_NAME_URL_PATH_MAPS)
  private List<Model0> urlPathMaps = new ArrayList<>();

  public ApplicationGatewayRedirectConfigurationPropertiesFormat() {
  }

  public ApplicationGatewayRedirectConfigurationPropertiesFormat includePath(Boolean includePath) {
    this.includePath = includePath;
    return this;
  }

  /**
   * Include path in the redirected url.
   * @return includePath
   */
  @javax.annotation.Nullable
  public Boolean getIncludePath() {
    return includePath;
  }

  public void setIncludePath(Boolean includePath) {
    this.includePath = includePath;
  }


  public ApplicationGatewayRedirectConfigurationPropertiesFormat includeQueryString(Boolean includeQueryString) {
    this.includeQueryString = includeQueryString;
    return this;
  }

  /**
   * Include query string in the redirected url.
   * @return includeQueryString
   */
  @javax.annotation.Nullable
  public Boolean getIncludeQueryString() {
    return includeQueryString;
  }

  public void setIncludeQueryString(Boolean includeQueryString) {
    this.includeQueryString = includeQueryString;
  }


  public ApplicationGatewayRedirectConfigurationPropertiesFormat pathRules(List<Model0> pathRules) {
    this.pathRules = pathRules;
    return this;
  }

  public ApplicationGatewayRedirectConfigurationPropertiesFormat addPathRulesItem(Model0 pathRulesItem) {
    if (this.pathRules == null) {
      this.pathRules = new ArrayList<>();
    }
    this.pathRules.add(pathRulesItem);
    return this;
  }

  /**
   * Path rules specifying redirect configuration.
   * @return pathRules
   */
  @javax.annotation.Nullable
  public List<Model0> getPathRules() {
    return pathRules;
  }

  public void setPathRules(List<Model0> pathRules) {
    this.pathRules = pathRules;
  }


  public ApplicationGatewayRedirectConfigurationPropertiesFormat redirectType(RedirectTypeEnum redirectType) {
    this.redirectType = redirectType;
    return this;
  }

  /**
   * Get redirectType
   * @return redirectType
   */
  @javax.annotation.Nullable
  public RedirectTypeEnum getRedirectType() {
    return redirectType;
  }

  public void setRedirectType(RedirectTypeEnum redirectType) {
    this.redirectType = redirectType;
  }


  public ApplicationGatewayRedirectConfigurationPropertiesFormat requestRoutingRules(List<Model0> requestRoutingRules) {
    this.requestRoutingRules = requestRoutingRules;
    return this;
  }

  public ApplicationGatewayRedirectConfigurationPropertiesFormat addRequestRoutingRulesItem(Model0 requestRoutingRulesItem) {
    if (this.requestRoutingRules == null) {
      this.requestRoutingRules = new ArrayList<>();
    }
    this.requestRoutingRules.add(requestRoutingRulesItem);
    return this;
  }

  /**
   * Request routing specifying redirect configuration.
   * @return requestRoutingRules
   */
  @javax.annotation.Nullable
  public List<Model0> getRequestRoutingRules() {
    return requestRoutingRules;
  }

  public void setRequestRoutingRules(List<Model0> requestRoutingRules) {
    this.requestRoutingRules = requestRoutingRules;
  }


  public ApplicationGatewayRedirectConfigurationPropertiesFormat targetListener(Model0 targetListener) {
    this.targetListener = targetListener;
    return this;
  }

  /**
   * Get targetListener
   * @return targetListener
   */
  @javax.annotation.Nullable
  public Model0 getTargetListener() {
    return targetListener;
  }

  public void setTargetListener(Model0 targetListener) {
    this.targetListener = targetListener;
  }


  public ApplicationGatewayRedirectConfigurationPropertiesFormat targetUrl(String targetUrl) {
    this.targetUrl = targetUrl;
    return this;
  }

  /**
   * Url to redirect the request to.
   * @return targetUrl
   */
  @javax.annotation.Nullable
  public String getTargetUrl() {
    return targetUrl;
  }

  public void setTargetUrl(String targetUrl) {
    this.targetUrl = targetUrl;
  }


  public ApplicationGatewayRedirectConfigurationPropertiesFormat urlPathMaps(List<Model0> urlPathMaps) {
    this.urlPathMaps = urlPathMaps;
    return this;
  }

  public ApplicationGatewayRedirectConfigurationPropertiesFormat addUrlPathMapsItem(Model0 urlPathMapsItem) {
    if (this.urlPathMaps == null) {
      this.urlPathMaps = new ArrayList<>();
    }
    this.urlPathMaps.add(urlPathMapsItem);
    return this;
  }

  /**
   * Url path maps specifying default redirect configuration.
   * @return urlPathMaps
   */
  @javax.annotation.Nullable
  public List<Model0> getUrlPathMaps() {
    return urlPathMaps;
  }

  public void setUrlPathMaps(List<Model0> urlPathMaps) {
    this.urlPathMaps = urlPathMaps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayRedirectConfigurationPropertiesFormat applicationGatewayRedirectConfigurationPropertiesFormat = (ApplicationGatewayRedirectConfigurationPropertiesFormat) o;
    return Objects.equals(this.includePath, applicationGatewayRedirectConfigurationPropertiesFormat.includePath) &&
        Objects.equals(this.includeQueryString, applicationGatewayRedirectConfigurationPropertiesFormat.includeQueryString) &&
        Objects.equals(this.pathRules, applicationGatewayRedirectConfigurationPropertiesFormat.pathRules) &&
        Objects.equals(this.redirectType, applicationGatewayRedirectConfigurationPropertiesFormat.redirectType) &&
        Objects.equals(this.requestRoutingRules, applicationGatewayRedirectConfigurationPropertiesFormat.requestRoutingRules) &&
        Objects.equals(this.targetListener, applicationGatewayRedirectConfigurationPropertiesFormat.targetListener) &&
        Objects.equals(this.targetUrl, applicationGatewayRedirectConfigurationPropertiesFormat.targetUrl) &&
        Objects.equals(this.urlPathMaps, applicationGatewayRedirectConfigurationPropertiesFormat.urlPathMaps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includePath, includeQueryString, pathRules, redirectType, requestRoutingRules, targetListener, targetUrl, urlPathMaps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayRedirectConfigurationPropertiesFormat {\n");
    sb.append("    includePath: ").append(toIndentedString(includePath)).append("\n");
    sb.append("    includeQueryString: ").append(toIndentedString(includeQueryString)).append("\n");
    sb.append("    pathRules: ").append(toIndentedString(pathRules)).append("\n");
    sb.append("    redirectType: ").append(toIndentedString(redirectType)).append("\n");
    sb.append("    requestRoutingRules: ").append(toIndentedString(requestRoutingRules)).append("\n");
    sb.append("    targetListener: ").append(toIndentedString(targetListener)).append("\n");
    sb.append("    targetUrl: ").append(toIndentedString(targetUrl)).append("\n");
    sb.append("    urlPathMaps: ").append(toIndentedString(urlPathMaps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("includePath");
    openapiFields.add("includeQueryString");
    openapiFields.add("pathRules");
    openapiFields.add("redirectType");
    openapiFields.add("requestRoutingRules");
    openapiFields.add("targetListener");
    openapiFields.add("targetUrl");
    openapiFields.add("urlPathMaps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayRedirectConfigurationPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayRedirectConfigurationPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayRedirectConfigurationPropertiesFormat is not found in the empty JSON string", ApplicationGatewayRedirectConfigurationPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayRedirectConfigurationPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayRedirectConfigurationPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("pathRules") != null && !jsonObj.get("pathRules").isJsonNull() && !jsonObj.get("pathRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pathRules` to be an array in the JSON string but got `%s`", jsonObj.get("pathRules").toString()));
      }
      // validate the optional field `redirectType`
      if (jsonObj.get("redirectType") != null && !jsonObj.get("redirectType").isJsonNull()) {
        RedirectTypeEnum.validateJsonElement(jsonObj.get("redirectType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requestRoutingRules") != null && !jsonObj.get("requestRoutingRules").isJsonNull() && !jsonObj.get("requestRoutingRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestRoutingRules` to be an array in the JSON string but got `%s`", jsonObj.get("requestRoutingRules").toString()));
      }
      if ((jsonObj.get("targetUrl") != null && !jsonObj.get("targetUrl").isJsonNull()) && !jsonObj.get("targetUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("urlPathMaps") != null && !jsonObj.get("urlPathMaps").isJsonNull() && !jsonObj.get("urlPathMaps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlPathMaps` to be an array in the JSON string but got `%s`", jsonObj.get("urlPathMaps").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayRedirectConfigurationPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayRedirectConfigurationPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayRedirectConfigurationPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayRedirectConfigurationPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayRedirectConfigurationPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayRedirectConfigurationPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayRedirectConfigurationPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayRedirectConfigurationPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayRedirectConfigurationPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayRedirectConfigurationPropertiesFormat
   */
  public static ApplicationGatewayRedirectConfigurationPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayRedirectConfigurationPropertiesFormat.class);
  }

  /**
   * Convert an instance of ApplicationGatewayRedirectConfigurationPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

