/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApplicationGatewayBackendAddressPoolPropertiesFormat_backendIPConfigurations_inner_properties_loadBalancerInboundNatRules_inner_properties.h
 *
 * Properties of the inbound NAT rule.
 */

#ifndef OAIApplicationGatewayBackendAddressPoolPropertiesFormat_backendIPConfigurations_inner_properties_loadBalancerInboundNatRules_inner_properties_H
#define OAIApplicationGatewayBackendAddressPoolPropertiesFormat_backendIPConfigurations_inner_properties_loadBalancerInboundNatRules_inner_properties_H

#include <QJsonObject>

#include "OAI0.h"
#include "OAIItems.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIApplicationGatewayBackendAddressPoolPropertiesFormat_backendIPConfigurations_inner_properties_loadBalancerInboundNatRules_inner_properties : public OAIObject {
public:
    OAIApplicationGatewayBackendAddressPoolPropertiesFormat_backendIPConfigurations_inner_properties_loadBalancerInboundNatRules_inner_properties();
    OAIApplicationGatewayBackendAddressPoolPropertiesFormat_backendIPConfigurations_inner_properties_loadBalancerInboundNatRules_inner_properties(QString json);
    ~OAIApplicationGatewayBackendAddressPoolPropertiesFormat_backendIPConfigurations_inner_properties_loadBalancerInboundNatRules_inner_properties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIItems getBackendIpConfiguration() const;
    void setBackendIpConfiguration(const OAIItems &backend_ip_configuration);
    bool is_backend_ip_configuration_Set() const;
    bool is_backend_ip_configuration_Valid() const;

    qint32 getBackendPort() const;
    void setBackendPort(const qint32 &backend_port);
    bool is_backend_port_Set() const;
    bool is_backend_port_Valid() const;

    bool isEnableFloatingIp() const;
    void setEnableFloatingIp(const bool &enable_floating_ip);
    bool is_enable_floating_ip_Set() const;
    bool is_enable_floating_ip_Valid() const;

    OAI0 getFrontendIpConfiguration() const;
    void setFrontendIpConfiguration(const OAI0 &frontend_ip_configuration);
    bool is_frontend_ip_configuration_Set() const;
    bool is_frontend_ip_configuration_Valid() const;

    qint32 getFrontendPort() const;
    void setFrontendPort(const qint32 &frontend_port);
    bool is_frontend_port_Set() const;
    bool is_frontend_port_Valid() const;

    qint32 getIdleTimeoutInMinutes() const;
    void setIdleTimeoutInMinutes(const qint32 &idle_timeout_in_minutes);
    bool is_idle_timeout_in_minutes_Set() const;
    bool is_idle_timeout_in_minutes_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIItems m_backend_ip_configuration;
    bool m_backend_ip_configuration_isSet;
    bool m_backend_ip_configuration_isValid;

    qint32 m_backend_port;
    bool m_backend_port_isSet;
    bool m_backend_port_isValid;

    bool m_enable_floating_ip;
    bool m_enable_floating_ip_isSet;
    bool m_enable_floating_ip_isValid;

    OAI0 m_frontend_ip_configuration;
    bool m_frontend_ip_configuration_isSet;
    bool m_frontend_ip_configuration_isValid;

    qint32 m_frontend_port;
    bool m_frontend_port_isSet;
    bool m_frontend_port_isValid;

    qint32 m_idle_timeout_in_minutes;
    bool m_idle_timeout_in_minutes_isSet;
    bool m_idle_timeout_in_minutes_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApplicationGatewayBackendAddressPoolPropertiesFormat_backendIPConfigurations_inner_properties_loadBalancerInboundNatRules_inner_properties)

#endif // OAIApplicationGatewayBackendAddressPoolPropertiesFormat_backendIPConfigurations_inner_properties_loadBalancerInboundNatRules_inner_properties_H
