# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationGatewayWebApplicationFirewallConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, firewall_mode: str=None):
        """ApplicationGatewayWebApplicationFirewallConfiguration - a model defined in OpenAPI

        :param enabled: The enabled of this ApplicationGatewayWebApplicationFirewallConfiguration.
        :param firewall_mode: The firewall_mode of this ApplicationGatewayWebApplicationFirewallConfiguration.
        """
        self.openapi_types = {
            'enabled': bool,
            'firewall_mode': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'firewall_mode': 'firewallMode'
        }

        self._enabled = enabled
        self._firewall_mode = firewall_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayWebApplicationFirewallConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayWebApplicationFirewallConfiguration of this ApplicationGatewayWebApplicationFirewallConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this ApplicationGatewayWebApplicationFirewallConfiguration.

        Whether the web application firewall is enabled or not.

        :return: The enabled of this ApplicationGatewayWebApplicationFirewallConfiguration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApplicationGatewayWebApplicationFirewallConfiguration.

        Whether the web application firewall is enabled or not.

        :param enabled: The enabled of this ApplicationGatewayWebApplicationFirewallConfiguration.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def firewall_mode(self):
        """Gets the firewall_mode of this ApplicationGatewayWebApplicationFirewallConfiguration.

        Web application firewall mode. Possible values are: 'Detection' and 'Prevention'.

        :return: The firewall_mode of this ApplicationGatewayWebApplicationFirewallConfiguration.
        :rtype: str
        """
        return self._firewall_mode

    @firewall_mode.setter
    def firewall_mode(self, firewall_mode):
        """Sets the firewall_mode of this ApplicationGatewayWebApplicationFirewallConfiguration.

        Web application firewall mode. Possible values are: 'Detection' and 'Prevention'.

        :param firewall_mode: The firewall_mode of this ApplicationGatewayWebApplicationFirewallConfiguration.
        :type firewall_mode: str
        """
        allowed_values = ["Detection", "Prevention"]  # noqa: E501
        if firewall_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `firewall_mode` ({0}), must be one of {1}"
                .format(firewall_mode, allowed_values)
            )

        self._firewall_mode = firewall_mode
