# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationGatewaySslPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled_ssl_protocols: List[str]=None):
        """ApplicationGatewaySslPolicy - a model defined in OpenAPI

        :param disabled_ssl_protocols: The disabled_ssl_protocols of this ApplicationGatewaySslPolicy.
        """
        self.openapi_types = {
            'disabled_ssl_protocols': List[str]
        }

        self.attribute_map = {
            'disabled_ssl_protocols': 'disabledSslProtocols'
        }

        self._disabled_ssl_protocols = disabled_ssl_protocols

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewaySslPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewaySslPolicy of this ApplicationGatewaySslPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled_ssl_protocols(self):
        """Gets the disabled_ssl_protocols of this ApplicationGatewaySslPolicy.

        SSL protocols to be disabled on application gateway. Possible values are: 'TLSv1_0', 'TLSv1_1', and 'TLSv1_2'.

        :return: The disabled_ssl_protocols of this ApplicationGatewaySslPolicy.
        :rtype: List[str]
        """
        return self._disabled_ssl_protocols

    @disabled_ssl_protocols.setter
    def disabled_ssl_protocols(self, disabled_ssl_protocols):
        """Sets the disabled_ssl_protocols of this ApplicationGatewaySslPolicy.

        SSL protocols to be disabled on application gateway. Possible values are: 'TLSv1_0', 'TLSv1_1', and 'TLSv1_2'.

        :param disabled_ssl_protocols: The disabled_ssl_protocols of this ApplicationGatewaySslPolicy.
        :type disabled_ssl_protocols: List[str]
        """
        allowed_values = ["TLSv1_0", "TLSv1_1", "TLSv1_2"]  # noqa: E501
        if not set(disabled_ssl_protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `disabled_ssl_protocols` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(disabled_ssl_protocols) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._disabled_ssl_protocols = disabled_ssl_protocols
