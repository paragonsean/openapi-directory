/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInner;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesTapConfigurationsInner;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Virtual Network Tap properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:13.158413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties {
  public static final String SERIALIZED_NAME_DESTINATION_LOAD_BALANCER_FRONT_END_I_P_CONFIGURATION = "destinationLoadBalancerFrontEndIPConfiguration";
  @SerializedName(SERIALIZED_NAME_DESTINATION_LOAD_BALANCER_FRONT_END_I_P_CONFIGURATION)
  private ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfiguration destinationLoadBalancerFrontEndIPConfiguration;

  public static final String SERIALIZED_NAME_DESTINATION_NETWORK_INTERFACE_I_P_CONFIGURATION = "destinationNetworkInterfaceIPConfiguration";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NETWORK_INTERFACE_I_P_CONFIGURATION)
  private ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInner destinationNetworkInterfaceIPConfiguration;

  public static final String SERIALIZED_NAME_DESTINATION_PORT = "destinationPort";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PORT)
  private Integer destinationPort;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACE_TAP_CONFIGURATIONS = "networkInterfaceTapConfigurations";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACE_TAP_CONFIGURATIONS)
  private List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesTapConfigurationsInner> networkInterfaceTapConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_GUID = "resourceGuid";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GUID)
  private String resourceGuid;

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties() {
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties(
     List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesTapConfigurationsInner> networkInterfaceTapConfigurations, 
     String provisioningState, 
     String resourceGuid
  ) {
    this();
    this.networkInterfaceTapConfigurations = networkInterfaceTapConfigurations;
    this.provisioningState = provisioningState;
    this.resourceGuid = resourceGuid;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties destinationLoadBalancerFrontEndIPConfiguration(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfiguration destinationLoadBalancerFrontEndIPConfiguration) {
    this.destinationLoadBalancerFrontEndIPConfiguration = destinationLoadBalancerFrontEndIPConfiguration;
    return this;
  }

  /**
   * Get destinationLoadBalancerFrontEndIPConfiguration
   * @return destinationLoadBalancerFrontEndIPConfiguration
   */
  @javax.annotation.Nullable
  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfiguration getDestinationLoadBalancerFrontEndIPConfiguration() {
    return destinationLoadBalancerFrontEndIPConfiguration;
  }

  public void setDestinationLoadBalancerFrontEndIPConfiguration(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfiguration destinationLoadBalancerFrontEndIPConfiguration) {
    this.destinationLoadBalancerFrontEndIPConfiguration = destinationLoadBalancerFrontEndIPConfiguration;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties destinationNetworkInterfaceIPConfiguration(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInner destinationNetworkInterfaceIPConfiguration) {
    this.destinationNetworkInterfaceIPConfiguration = destinationNetworkInterfaceIPConfiguration;
    return this;
  }

  /**
   * Get destinationNetworkInterfaceIPConfiguration
   * @return destinationNetworkInterfaceIPConfiguration
   */
  @javax.annotation.Nullable
  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInner getDestinationNetworkInterfaceIPConfiguration() {
    return destinationNetworkInterfaceIPConfiguration;
  }

  public void setDestinationNetworkInterfaceIPConfiguration(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInner destinationNetworkInterfaceIPConfiguration) {
    this.destinationNetworkInterfaceIPConfiguration = destinationNetworkInterfaceIPConfiguration;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties destinationPort(Integer destinationPort) {
    this.destinationPort = destinationPort;
    return this;
  }

  /**
   * The VXLAN destination port that will receive the tapped traffic.
   * @return destinationPort
   */
  @javax.annotation.Nullable
  public Integer getDestinationPort() {
    return destinationPort;
  }

  public void setDestinationPort(Integer destinationPort) {
    this.destinationPort = destinationPort;
  }


  /**
   * Specifies the list of resource IDs for the network interface IP configuration that needs to be tapped.
   * @return networkInterfaceTapConfigurations
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesTapConfigurationsInner> getNetworkInterfaceTapConfigurations() {
    return networkInterfaceTapConfigurations;
  }



  /**
   * The provisioning state of the virtual network tap. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * The resourceGuid property of the virtual network tap.
   * @return resourceGuid
   */
  @javax.annotation.Nullable
  public String getResourceGuid() {
    return resourceGuid;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties = (ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties) o;
    return Objects.equals(this.destinationLoadBalancerFrontEndIPConfiguration, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties.destinationLoadBalancerFrontEndIPConfiguration) &&
        Objects.equals(this.destinationNetworkInterfaceIPConfiguration, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties.destinationNetworkInterfaceIPConfiguration) &&
        Objects.equals(this.destinationPort, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties.destinationPort) &&
        Objects.equals(this.networkInterfaceTapConfigurations, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties.networkInterfaceTapConfigurations) &&
        Objects.equals(this.provisioningState, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties.provisioningState) &&
        Objects.equals(this.resourceGuid, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties.resourceGuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationLoadBalancerFrontEndIPConfiguration, destinationNetworkInterfaceIPConfiguration, destinationPort, networkInterfaceTapConfigurations, provisioningState, resourceGuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties {\n");
    sb.append("    destinationLoadBalancerFrontEndIPConfiguration: ").append(toIndentedString(destinationLoadBalancerFrontEndIPConfiguration)).append("\n");
    sb.append("    destinationNetworkInterfaceIPConfiguration: ").append(toIndentedString(destinationNetworkInterfaceIPConfiguration)).append("\n");
    sb.append("    destinationPort: ").append(toIndentedString(destinationPort)).append("\n");
    sb.append("    networkInterfaceTapConfigurations: ").append(toIndentedString(networkInterfaceTapConfigurations)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceGuid: ").append(toIndentedString(resourceGuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationLoadBalancerFrontEndIPConfiguration");
    openapiFields.add("destinationNetworkInterfaceIPConfiguration");
    openapiFields.add("destinationPort");
    openapiFields.add("networkInterfaceTapConfigurations");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceGuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties is not found in the empty JSON string", ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `destinationLoadBalancerFrontEndIPConfiguration`
      if (jsonObj.get("destinationLoadBalancerFrontEndIPConfiguration") != null && !jsonObj.get("destinationLoadBalancerFrontEndIPConfiguration").isJsonNull()) {
        ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfiguration.validateJsonElement(jsonObj.get("destinationLoadBalancerFrontEndIPConfiguration"));
      }
      // validate the optional field `destinationNetworkInterfaceIPConfiguration`
      if (jsonObj.get("destinationNetworkInterfaceIPConfiguration") != null && !jsonObj.get("destinationNetworkInterfaceIPConfiguration").isJsonNull()) {
        ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInner.validateJsonElement(jsonObj.get("destinationNetworkInterfaceIPConfiguration"));
      }
      if (jsonObj.get("networkInterfaceTapConfigurations") != null && !jsonObj.get("networkInterfaceTapConfigurations").isJsonNull()) {
        JsonArray jsonArraynetworkInterfaceTapConfigurations = jsonObj.getAsJsonArray("networkInterfaceTapConfigurations");
        if (jsonArraynetworkInterfaceTapConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkInterfaceTapConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkInterfaceTapConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("networkInterfaceTapConfigurations").toString()));
          }

          // validate the optional field `networkInterfaceTapConfigurations` (array)
          for (int i = 0; i < jsonArraynetworkInterfaceTapConfigurations.size(); i++) {
            ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesTapConfigurationsInner.validateJsonElement(jsonArraynetworkInterfaceTapConfigurations.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("resourceGuid") != null && !jsonObj.get("resourceGuid").isJsonNull()) && !jsonObj.get("resourceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties
   */
  public static ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties.class);
  }

  /**
   * Convert an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

