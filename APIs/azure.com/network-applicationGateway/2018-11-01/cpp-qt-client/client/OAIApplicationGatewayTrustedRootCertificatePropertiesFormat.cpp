/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayTrustedRootCertificatePropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::OAIApplicationGatewayTrustedRootCertificatePropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::OAIApplicationGatewayTrustedRootCertificatePropertiesFormat() {
    this->initializeModel();
}

OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::~OAIApplicationGatewayTrustedRootCertificatePropertiesFormat() {}

void OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_key_vault_secret_id_isSet = false;
    m_key_vault_secret_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_key_vault_secret_id_isValid = ::OpenAPI::fromJsonValue(m_key_vault_secret_id, json[QString("keyVaultSecretId")]);
    m_key_vault_secret_id_isSet = !json[QString("keyVaultSecretId")].isNull() && m_key_vault_secret_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_key_vault_secret_id_isSet) {
        obj.insert(QString("keyVaultSecretId"), ::OpenAPI::toJsonValue(m_key_vault_secret_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::getData() const {
    return m_data;
}
void OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::is_data_Set() const{
    return m_data_isSet;
}

bool OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::getKeyVaultSecretId() const {
    return m_key_vault_secret_id;
}
void OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::setKeyVaultSecretId(const QString &key_vault_secret_id) {
    m_key_vault_secret_id = key_vault_secret_id;
    m_key_vault_secret_id_isSet = true;
}

bool OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::is_key_vault_secret_id_Set() const{
    return m_key_vault_secret_id_isSet;
}

bool OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::is_key_vault_secret_id_Valid() const{
    return m_key_vault_secret_id_isValid;
}

QString OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_vault_secret_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayTrustedRootCertificatePropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
