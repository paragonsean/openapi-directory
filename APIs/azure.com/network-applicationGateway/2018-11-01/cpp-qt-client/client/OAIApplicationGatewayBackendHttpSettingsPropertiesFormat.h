/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApplicationGatewayBackendHttpSettingsPropertiesFormat.h
 *
 * Properties of Backend address pool settings of an application gateway.
 */

#ifndef OAIApplicationGatewayBackendHttpSettingsPropertiesFormat_H
#define OAIApplicationGatewayBackendHttpSettingsPropertiesFormat_H

#include <QJsonObject>

#include "OAI0.h"
#include "OAIApplicationGatewayConnectionDraining.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApplicationGatewayConnectionDraining;

class OAIApplicationGatewayBackendHttpSettingsPropertiesFormat : public OAIObject {
public:
    OAIApplicationGatewayBackendHttpSettingsPropertiesFormat();
    OAIApplicationGatewayBackendHttpSettingsPropertiesFormat(QString json);
    ~OAIApplicationGatewayBackendHttpSettingsPropertiesFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAffinityCookieName() const;
    void setAffinityCookieName(const QString &affinity_cookie_name);
    bool is_affinity_cookie_name_Set() const;
    bool is_affinity_cookie_name_Valid() const;

    QList<OAI0> getAuthenticationCertificates() const;
    void setAuthenticationCertificates(const QList<OAI0> &authentication_certificates);
    bool is_authentication_certificates_Set() const;
    bool is_authentication_certificates_Valid() const;

    OAIApplicationGatewayConnectionDraining getConnectionDraining() const;
    void setConnectionDraining(const OAIApplicationGatewayConnectionDraining &connection_draining);
    bool is_connection_draining_Set() const;
    bool is_connection_draining_Valid() const;

    QString getCookieBasedAffinity() const;
    void setCookieBasedAffinity(const QString &cookie_based_affinity);
    bool is_cookie_based_affinity_Set() const;
    bool is_cookie_based_affinity_Valid() const;

    QString getHostName() const;
    void setHostName(const QString &host_name);
    bool is_host_name_Set() const;
    bool is_host_name_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    bool isPickHostNameFromBackendAddress() const;
    void setPickHostNameFromBackendAddress(const bool &pick_host_name_from_backend_address);
    bool is_pick_host_name_from_backend_address_Set() const;
    bool is_pick_host_name_from_backend_address_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    OAI0 getProbe() const;
    void setProbe(const OAI0 &probe);
    bool is_probe_Set() const;
    bool is_probe_Valid() const;

    bool isProbeEnabled() const;
    void setProbeEnabled(const bool &probe_enabled);
    bool is_probe_enabled_Set() const;
    bool is_probe_enabled_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    qint32 getRequestTimeout() const;
    void setRequestTimeout(const qint32 &request_timeout);
    bool is_request_timeout_Set() const;
    bool is_request_timeout_Valid() const;

    QList<OAI0> getTrustedRootCertificates() const;
    void setTrustedRootCertificates(const QList<OAI0> &trusted_root_certificates);
    bool is_trusted_root_certificates_Set() const;
    bool is_trusted_root_certificates_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_affinity_cookie_name;
    bool m_affinity_cookie_name_isSet;
    bool m_affinity_cookie_name_isValid;

    QList<OAI0> m_authentication_certificates;
    bool m_authentication_certificates_isSet;
    bool m_authentication_certificates_isValid;

    OAIApplicationGatewayConnectionDraining m_connection_draining;
    bool m_connection_draining_isSet;
    bool m_connection_draining_isValid;

    QString m_cookie_based_affinity;
    bool m_cookie_based_affinity_isSet;
    bool m_cookie_based_affinity_isValid;

    QString m_host_name;
    bool m_host_name_isSet;
    bool m_host_name_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    bool m_pick_host_name_from_backend_address;
    bool m_pick_host_name_from_backend_address_isSet;
    bool m_pick_host_name_from_backend_address_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    OAI0 m_probe;
    bool m_probe_isSet;
    bool m_probe_isValid;

    bool m_probe_enabled;
    bool m_probe_enabled_isSet;
    bool m_probe_enabled_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    qint32 m_request_timeout;
    bool m_request_timeout_isSet;
    bool m_request_timeout_isValid;

    QList<OAI0> m_trusted_root_certificates;
    bool m_trusted_root_certificates_isSet;
    bool m_trusted_root_certificates_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApplicationGatewayBackendHttpSettingsPropertiesFormat)

#endif // OAIApplicationGatewayBackendHttpSettingsPropertiesFormat_H
