/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInner;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationSecurityGroupsInner;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerBackendAddressPoolsInner;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInner;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPublicIPAddress;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnet;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ApplicationGatewayBackendHealthServerIpConfigurationProperties
 */
public class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesTest {
    private final ApplicationGatewayBackendHealthServerIpConfigurationProperties model = new ApplicationGatewayBackendHealthServerIpConfigurationProperties();

    /**
     * Model tests for ApplicationGatewayBackendHealthServerIpConfigurationProperties
     */
    @Test
    public void testApplicationGatewayBackendHealthServerIpConfigurationProperties() {
        // TODO: test ApplicationGatewayBackendHealthServerIpConfigurationProperties
    }

    /**
     * Test the property 'applicationGatewayBackendAddressPools'
     */
    @Test
    public void applicationGatewayBackendAddressPoolsTest() {
        // TODO: test applicationGatewayBackendAddressPools
    }

    /**
     * Test the property 'applicationSecurityGroups'
     */
    @Test
    public void applicationSecurityGroupsTest() {
        // TODO: test applicationSecurityGroups
    }

    /**
     * Test the property 'loadBalancerBackendAddressPools'
     */
    @Test
    public void loadBalancerBackendAddressPoolsTest() {
        // TODO: test loadBalancerBackendAddressPools
    }

    /**
     * Test the property 'loadBalancerInboundNatRules'
     */
    @Test
    public void loadBalancerInboundNatRulesTest() {
        // TODO: test loadBalancerInboundNatRules
    }

    /**
     * Test the property 'primary'
     */
    @Test
    public void primaryTest() {
        // TODO: test primary
    }

    /**
     * Test the property 'privateIPAddress'
     */
    @Test
    public void privateIPAddressTest() {
        // TODO: test privateIPAddress
    }

    /**
     * Test the property 'privateIPAddressVersion'
     */
    @Test
    public void privateIPAddressVersionTest() {
        // TODO: test privateIPAddressVersion
    }

    /**
     * Test the property 'privateIPAllocationMethod'
     */
    @Test
    public void privateIPAllocationMethodTest() {
        // TODO: test privateIPAllocationMethod
    }

    /**
     * Test the property 'provisioningState'
     */
    @Test
    public void provisioningStateTest() {
        // TODO: test provisioningState
    }

    /**
     * Test the property 'publicIPAddress'
     */
    @Test
    public void publicIPAddressTest() {
        // TODO: test publicIPAddress
    }

    /**
     * Test the property 'subnet'
     */
    @Test
    public void subnetTest() {
        // TODO: test subnet
    }

}
