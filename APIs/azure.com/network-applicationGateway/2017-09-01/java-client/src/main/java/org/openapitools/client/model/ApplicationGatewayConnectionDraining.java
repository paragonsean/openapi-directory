/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Connection draining allows open connections to a backend server to be active for a specified time after the backend server got removed from the configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:26.443957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayConnectionDraining {
  public static final String SERIALIZED_NAME_DRAIN_TIMEOUT_IN_SEC = "drainTimeoutInSec";
  @SerializedName(SERIALIZED_NAME_DRAIN_TIMEOUT_IN_SEC)
  private Integer drainTimeoutInSec;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public ApplicationGatewayConnectionDraining() {
  }

  public ApplicationGatewayConnectionDraining drainTimeoutInSec(Integer drainTimeoutInSec) {
    this.drainTimeoutInSec = drainTimeoutInSec;
    return this;
  }

  /**
   * The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.
   * minimum: 1
   * maximum: 3600
   * @return drainTimeoutInSec
   */
  @javax.annotation.Nonnull
  public Integer getDrainTimeoutInSec() {
    return drainTimeoutInSec;
  }

  public void setDrainTimeoutInSec(Integer drainTimeoutInSec) {
    this.drainTimeoutInSec = drainTimeoutInSec;
  }


  public ApplicationGatewayConnectionDraining enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether connection draining is enabled or not.
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayConnectionDraining applicationGatewayConnectionDraining = (ApplicationGatewayConnectionDraining) o;
    return Objects.equals(this.drainTimeoutInSec, applicationGatewayConnectionDraining.drainTimeoutInSec) &&
        Objects.equals(this.enabled, applicationGatewayConnectionDraining.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(drainTimeoutInSec, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayConnectionDraining {\n");
    sb.append("    drainTimeoutInSec: ").append(toIndentedString(drainTimeoutInSec)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("drainTimeoutInSec");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("drainTimeoutInSec");
    openapiRequiredFields.add("enabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayConnectionDraining
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayConnectionDraining.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayConnectionDraining is not found in the empty JSON string", ApplicationGatewayConnectionDraining.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayConnectionDraining.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayConnectionDraining` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationGatewayConnectionDraining.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayConnectionDraining.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayConnectionDraining' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayConnectionDraining> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayConnectionDraining.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayConnectionDraining>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayConnectionDraining value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayConnectionDraining read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayConnectionDraining given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayConnectionDraining
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayConnectionDraining
   */
  public static ApplicationGatewayConnectionDraining fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayConnectionDraining.class);
  }

  /**
   * Convert an instance of ApplicationGatewayConnectionDraining to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

