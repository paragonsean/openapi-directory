/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CipherSuitesEnum;
import org.openapitools.client.model.ProtocolsEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of ApplicationGatewaySslPredefinedPolicy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:26.443957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewaySslPredefinedPolicyPropertiesFormat {
  public static final String SERIALIZED_NAME_CIPHER_SUITES = "cipherSuites";
  @SerializedName(SERIALIZED_NAME_CIPHER_SUITES)
  private List<CipherSuitesEnum> cipherSuites = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIN_PROTOCOL_VERSION = "minProtocolVersion";
  @SerializedName(SERIALIZED_NAME_MIN_PROTOCOL_VERSION)
  private ProtocolsEnum minProtocolVersion;

  public ApplicationGatewaySslPredefinedPolicyPropertiesFormat() {
  }

  public ApplicationGatewaySslPredefinedPolicyPropertiesFormat cipherSuites(List<CipherSuitesEnum> cipherSuites) {
    this.cipherSuites = cipherSuites;
    return this;
  }

  public ApplicationGatewaySslPredefinedPolicyPropertiesFormat addCipherSuitesItem(CipherSuitesEnum cipherSuitesItem) {
    if (this.cipherSuites == null) {
      this.cipherSuites = new ArrayList<>();
    }
    this.cipherSuites.add(cipherSuitesItem);
    return this;
  }

  /**
   * Ssl cipher suites to be enabled in the specified order for application gateway.
   * @return cipherSuites
   */
  @javax.annotation.Nullable
  public List<CipherSuitesEnum> getCipherSuites() {
    return cipherSuites;
  }

  public void setCipherSuites(List<CipherSuitesEnum> cipherSuites) {
    this.cipherSuites = cipherSuites;
  }


  public ApplicationGatewaySslPredefinedPolicyPropertiesFormat minProtocolVersion(ProtocolsEnum minProtocolVersion) {
    this.minProtocolVersion = minProtocolVersion;
    return this;
  }

  /**
   * Get minProtocolVersion
   * @return minProtocolVersion
   */
  @javax.annotation.Nullable
  public ProtocolsEnum getMinProtocolVersion() {
    return minProtocolVersion;
  }

  public void setMinProtocolVersion(ProtocolsEnum minProtocolVersion) {
    this.minProtocolVersion = minProtocolVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewaySslPredefinedPolicyPropertiesFormat applicationGatewaySslPredefinedPolicyPropertiesFormat = (ApplicationGatewaySslPredefinedPolicyPropertiesFormat) o;
    return Objects.equals(this.cipherSuites, applicationGatewaySslPredefinedPolicyPropertiesFormat.cipherSuites) &&
        Objects.equals(this.minProtocolVersion, applicationGatewaySslPredefinedPolicyPropertiesFormat.minProtocolVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cipherSuites, minProtocolVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewaySslPredefinedPolicyPropertiesFormat {\n");
    sb.append("    cipherSuites: ").append(toIndentedString(cipherSuites)).append("\n");
    sb.append("    minProtocolVersion: ").append(toIndentedString(minProtocolVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cipherSuites");
    openapiFields.add("minProtocolVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewaySslPredefinedPolicyPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewaySslPredefinedPolicyPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewaySslPredefinedPolicyPropertiesFormat is not found in the empty JSON string", ApplicationGatewaySslPredefinedPolicyPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewaySslPredefinedPolicyPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewaySslPredefinedPolicyPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("cipherSuites") != null && !jsonObj.get("cipherSuites").isJsonNull() && !jsonObj.get("cipherSuites").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cipherSuites` to be an array in the JSON string but got `%s`", jsonObj.get("cipherSuites").toString()));
      }
      // validate the optional field `minProtocolVersion`
      if (jsonObj.get("minProtocolVersion") != null && !jsonObj.get("minProtocolVersion").isJsonNull()) {
        ProtocolsEnum.validateJsonElement(jsonObj.get("minProtocolVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewaySslPredefinedPolicyPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewaySslPredefinedPolicyPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewaySslPredefinedPolicyPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewaySslPredefinedPolicyPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewaySslPredefinedPolicyPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewaySslPredefinedPolicyPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewaySslPredefinedPolicyPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewaySslPredefinedPolicyPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewaySslPredefinedPolicyPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewaySslPredefinedPolicyPropertiesFormat
   */
  public static ApplicationGatewaySslPredefinedPolicyPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewaySslPredefinedPolicyPropertiesFormat.class);
  }

  /**
   * Convert an instance of ApplicationGatewaySslPredefinedPolicyPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

