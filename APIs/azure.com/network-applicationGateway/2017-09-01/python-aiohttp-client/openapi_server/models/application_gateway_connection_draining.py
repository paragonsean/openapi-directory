# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationGatewayConnectionDraining(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drain_timeout_in_sec: int=None, enabled: bool=None):
        """ApplicationGatewayConnectionDraining - a model defined in OpenAPI

        :param drain_timeout_in_sec: The drain_timeout_in_sec of this ApplicationGatewayConnectionDraining.
        :param enabled: The enabled of this ApplicationGatewayConnectionDraining.
        """
        self.openapi_types = {
            'drain_timeout_in_sec': int,
            'enabled': bool
        }

        self.attribute_map = {
            'drain_timeout_in_sec': 'drainTimeoutInSec',
            'enabled': 'enabled'
        }

        self._drain_timeout_in_sec = drain_timeout_in_sec
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayConnectionDraining':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayConnectionDraining of this ApplicationGatewayConnectionDraining.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drain_timeout_in_sec(self):
        """Gets the drain_timeout_in_sec of this ApplicationGatewayConnectionDraining.

        The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.

        :return: The drain_timeout_in_sec of this ApplicationGatewayConnectionDraining.
        :rtype: int
        """
        return self._drain_timeout_in_sec

    @drain_timeout_in_sec.setter
    def drain_timeout_in_sec(self, drain_timeout_in_sec):
        """Sets the drain_timeout_in_sec of this ApplicationGatewayConnectionDraining.

        The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.

        :param drain_timeout_in_sec: The drain_timeout_in_sec of this ApplicationGatewayConnectionDraining.
        :type drain_timeout_in_sec: int
        """
        if drain_timeout_in_sec is None:
            raise ValueError("Invalid value for `drain_timeout_in_sec`, must not be `None`")
        if drain_timeout_in_sec is not None and drain_timeout_in_sec > 3600:
            raise ValueError("Invalid value for `drain_timeout_in_sec`, must be a value less than or equal to `3600`")
        if drain_timeout_in_sec is not None and drain_timeout_in_sec < 1:
            raise ValueError("Invalid value for `drain_timeout_in_sec`, must be a value greater than or equal to `1`")

        self._drain_timeout_in_sec = drain_timeout_in_sec

    @property
    def enabled(self):
        """Gets the enabled of this ApplicationGatewayConnectionDraining.

        Whether connection draining is enabled or not.

        :return: The enabled of this ApplicationGatewayConnectionDraining.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApplicationGatewayConnectionDraining.

        Whether connection draining is enabled or not.

        :param enabled: The enabled of this ApplicationGatewayConnectionDraining.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled
