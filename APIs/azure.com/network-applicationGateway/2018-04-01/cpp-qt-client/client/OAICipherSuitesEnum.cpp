/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICipherSuitesEnum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICipherSuitesEnum::OAICipherSuitesEnum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICipherSuitesEnum::OAICipherSuitesEnum() {
    this->initializeModel();
}

OAICipherSuitesEnum::~OAICipherSuitesEnum() {}

void OAICipherSuitesEnum::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICipherSuitesEnum::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICipherSuitesEnum::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::ECDHE_RSA_WITH_AES_256_CBC_SHA384;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::ECDHE_RSA_WITH_AES_128_CBC_SHA256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::ECDHE_RSA_WITH_AES_256_CBC_SHA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::ECDHE_RSA_WITH_AES_128_CBC_SHA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::DHE_RSA_WITH_AES_256_GCM_SHA384;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::DHE_RSA_WITH_AES_128_GCM_SHA256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::DHE_RSA_WITH_AES_256_CBC_SHA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::DHE_RSA_WITH_AES_128_CBC_SHA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_RSA_WITH_AES_256_GCM_SHA384", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::RSA_WITH_AES_256_GCM_SHA384;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_RSA_WITH_AES_128_GCM_SHA256", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::RSA_WITH_AES_128_GCM_SHA256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_RSA_WITH_AES_256_CBC_SHA256", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::RSA_WITH_AES_256_CBC_SHA256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_RSA_WITH_AES_128_CBC_SHA256", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::RSA_WITH_AES_128_CBC_SHA256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_RSA_WITH_AES_256_CBC_SHA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::RSA_WITH_AES_256_CBC_SHA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_RSA_WITH_AES_128_CBC_SHA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::RSA_WITH_AES_128_CBC_SHA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::ECDHE_ECDSA_WITH_AES_256_GCM_SHA384;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::ECDHE_ECDSA_WITH_AES_128_GCM_SHA256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::ECDHE_ECDSA_WITH_AES_256_CBC_SHA384;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::ECDHE_ECDSA_WITH_AES_128_CBC_SHA256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::ECDHE_ECDSA_WITH_AES_256_CBC_SHA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::ECDHE_ECDSA_WITH_AES_128_CBC_SHA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::DHE_DSS_WITH_AES_256_CBC_SHA256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::DHE_DSS_WITH_AES_128_CBC_SHA256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::DHE_DSS_WITH_AES_256_CBC_SHA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::DHE_DSS_WITH_AES_128_CBC_SHA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_RSA_WITH_3DES_EDE_CBC_SHA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::RSA_WITH_3DES_EDE_CBC_SHA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::DHE_DSS_WITH_3DES_EDE_CBC_SHA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::ECDHE_RSA_WITH_AES_128_GCM_SHA256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", Qt::CaseInsensitive) == 0) {
        m_value = eOAICipherSuitesEnum::ECDHE_RSA_WITH_AES_256_GCM_SHA384;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICipherSuitesEnum::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICipherSuitesEnum::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICipherSuitesEnum::ECDHE_RSA_WITH_AES_256_CBC_SHA384:
            val = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384";
            break;
        case eOAICipherSuitesEnum::ECDHE_RSA_WITH_AES_128_CBC_SHA256:
            val = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";
            break;
        case eOAICipherSuitesEnum::ECDHE_RSA_WITH_AES_256_CBC_SHA:
            val = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";
            break;
        case eOAICipherSuitesEnum::ECDHE_RSA_WITH_AES_128_CBC_SHA:
            val = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";
            break;
        case eOAICipherSuitesEnum::DHE_RSA_WITH_AES_256_GCM_SHA384:
            val = "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384";
            break;
        case eOAICipherSuitesEnum::DHE_RSA_WITH_AES_128_GCM_SHA256:
            val = "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256";
            break;
        case eOAICipherSuitesEnum::DHE_RSA_WITH_AES_256_CBC_SHA:
            val = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA";
            break;
        case eOAICipherSuitesEnum::DHE_RSA_WITH_AES_128_CBC_SHA:
            val = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA";
            break;
        case eOAICipherSuitesEnum::RSA_WITH_AES_256_GCM_SHA384:
            val = "TLS_RSA_WITH_AES_256_GCM_SHA384";
            break;
        case eOAICipherSuitesEnum::RSA_WITH_AES_128_GCM_SHA256:
            val = "TLS_RSA_WITH_AES_128_GCM_SHA256";
            break;
        case eOAICipherSuitesEnum::RSA_WITH_AES_256_CBC_SHA256:
            val = "TLS_RSA_WITH_AES_256_CBC_SHA256";
            break;
        case eOAICipherSuitesEnum::RSA_WITH_AES_128_CBC_SHA256:
            val = "TLS_RSA_WITH_AES_128_CBC_SHA256";
            break;
        case eOAICipherSuitesEnum::RSA_WITH_AES_256_CBC_SHA:
            val = "TLS_RSA_WITH_AES_256_CBC_SHA";
            break;
        case eOAICipherSuitesEnum::RSA_WITH_AES_128_CBC_SHA:
            val = "TLS_RSA_WITH_AES_128_CBC_SHA";
            break;
        case eOAICipherSuitesEnum::ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:
            val = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";
            break;
        case eOAICipherSuitesEnum::ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
            val = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";
            break;
        case eOAICipherSuitesEnum::ECDHE_ECDSA_WITH_AES_256_CBC_SHA384:
            val = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384";
            break;
        case eOAICipherSuitesEnum::ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:
            val = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";
            break;
        case eOAICipherSuitesEnum::ECDHE_ECDSA_WITH_AES_256_CBC_SHA:
            val = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA";
            break;
        case eOAICipherSuitesEnum::ECDHE_ECDSA_WITH_AES_128_CBC_SHA:
            val = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";
            break;
        case eOAICipherSuitesEnum::DHE_DSS_WITH_AES_256_CBC_SHA256:
            val = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256";
            break;
        case eOAICipherSuitesEnum::DHE_DSS_WITH_AES_128_CBC_SHA256:
            val = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256";
            break;
        case eOAICipherSuitesEnum::DHE_DSS_WITH_AES_256_CBC_SHA:
            val = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA";
            break;
        case eOAICipherSuitesEnum::DHE_DSS_WITH_AES_128_CBC_SHA:
            val = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA";
            break;
        case eOAICipherSuitesEnum::RSA_WITH_3DES_EDE_CBC_SHA:
            val = "TLS_RSA_WITH_3DES_EDE_CBC_SHA";
            break;
        case eOAICipherSuitesEnum::DHE_DSS_WITH_3DES_EDE_CBC_SHA:
            val = "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA";
            break;
        case eOAICipherSuitesEnum::ECDHE_RSA_WITH_AES_128_GCM_SHA256:
            val = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256";
            break;
        case eOAICipherSuitesEnum::ECDHE_RSA_WITH_AES_256_GCM_SHA384:
            val = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICipherSuitesEnum::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICipherSuitesEnum::eOAICipherSuitesEnum OAICipherSuitesEnum::getValue() const {
    return m_value;
}

void OAICipherSuitesEnum::setValue(const OAICipherSuitesEnum::eOAICipherSuitesEnum& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICipherSuitesEnum::isSet() const {
    
    return m_value_isSet;
}

bool OAICipherSuitesEnum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
