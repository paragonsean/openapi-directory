/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayAuthenticationCertificatePropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::OAIApplicationGatewayAuthenticationCertificatePropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::OAIApplicationGatewayAuthenticationCertificatePropertiesFormat() {
    this->initializeModel();
}

OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::~OAIApplicationGatewayAuthenticationCertificatePropertiesFormat() {}

void OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::getData() const {
    return m_data;
}
void OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::is_data_Set() const{
    return m_data_isSet;
}

bool OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayAuthenticationCertificatePropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
