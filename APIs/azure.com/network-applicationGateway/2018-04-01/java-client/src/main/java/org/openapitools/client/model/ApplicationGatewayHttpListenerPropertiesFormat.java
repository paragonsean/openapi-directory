/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Model0;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of HTTP listener of an application gateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:46.287008-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayHttpListenerPropertiesFormat {
  public static final String SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATION = "frontendIPConfiguration";
  @SerializedName(SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATION)
  private Model0 frontendIPConfiguration = null;

  public static final String SERIALIZED_NAME_FRONTEND_PORT = "frontendPort";
  @SerializedName(SERIALIZED_NAME_FRONTEND_PORT)
  private Model0 frontendPort = null;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  /**
   * Protocol of the HTTP listener. Possible values are &#39;Http&#39; and &#39;Https&#39;.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    HTTP("Http"),
    
    HTTPS("Https");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_REQUIRE_SERVER_NAME_INDICATION = "requireServerNameIndication";
  @SerializedName(SERIALIZED_NAME_REQUIRE_SERVER_NAME_INDICATION)
  private Boolean requireServerNameIndication;

  public static final String SERIALIZED_NAME_SSL_CERTIFICATE = "sslCertificate";
  @SerializedName(SERIALIZED_NAME_SSL_CERTIFICATE)
  private Model0 sslCertificate = null;

  public ApplicationGatewayHttpListenerPropertiesFormat() {
  }

  public ApplicationGatewayHttpListenerPropertiesFormat frontendIPConfiguration(Model0 frontendIPConfiguration) {
    this.frontendIPConfiguration = frontendIPConfiguration;
    return this;
  }

  /**
   * Get frontendIPConfiguration
   * @return frontendIPConfiguration
   */
  @javax.annotation.Nullable
  public Model0 getFrontendIPConfiguration() {
    return frontendIPConfiguration;
  }

  public void setFrontendIPConfiguration(Model0 frontendIPConfiguration) {
    this.frontendIPConfiguration = frontendIPConfiguration;
  }


  public ApplicationGatewayHttpListenerPropertiesFormat frontendPort(Model0 frontendPort) {
    this.frontendPort = frontendPort;
    return this;
  }

  /**
   * Get frontendPort
   * @return frontendPort
   */
  @javax.annotation.Nullable
  public Model0 getFrontendPort() {
    return frontendPort;
  }

  public void setFrontendPort(Model0 frontendPort) {
    this.frontendPort = frontendPort;
  }


  public ApplicationGatewayHttpListenerPropertiesFormat hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * Host name of HTTP listener.
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public ApplicationGatewayHttpListenerPropertiesFormat protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Protocol of the HTTP listener. Possible values are &#39;Http&#39; and &#39;Https&#39;.
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public ApplicationGatewayHttpListenerPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Provisioning state of the HTTP listener resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ApplicationGatewayHttpListenerPropertiesFormat requireServerNameIndication(Boolean requireServerNameIndication) {
    this.requireServerNameIndication = requireServerNameIndication;
    return this;
  }

  /**
   * Applicable only if protocol is https. Enables SNI for multi-hosting.
   * @return requireServerNameIndication
   */
  @javax.annotation.Nullable
  public Boolean getRequireServerNameIndication() {
    return requireServerNameIndication;
  }

  public void setRequireServerNameIndication(Boolean requireServerNameIndication) {
    this.requireServerNameIndication = requireServerNameIndication;
  }


  public ApplicationGatewayHttpListenerPropertiesFormat sslCertificate(Model0 sslCertificate) {
    this.sslCertificate = sslCertificate;
    return this;
  }

  /**
   * Get sslCertificate
   * @return sslCertificate
   */
  @javax.annotation.Nullable
  public Model0 getSslCertificate() {
    return sslCertificate;
  }

  public void setSslCertificate(Model0 sslCertificate) {
    this.sslCertificate = sslCertificate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayHttpListenerPropertiesFormat applicationGatewayHttpListenerPropertiesFormat = (ApplicationGatewayHttpListenerPropertiesFormat) o;
    return Objects.equals(this.frontendIPConfiguration, applicationGatewayHttpListenerPropertiesFormat.frontendIPConfiguration) &&
        Objects.equals(this.frontendPort, applicationGatewayHttpListenerPropertiesFormat.frontendPort) &&
        Objects.equals(this.hostName, applicationGatewayHttpListenerPropertiesFormat.hostName) &&
        Objects.equals(this.protocol, applicationGatewayHttpListenerPropertiesFormat.protocol) &&
        Objects.equals(this.provisioningState, applicationGatewayHttpListenerPropertiesFormat.provisioningState) &&
        Objects.equals(this.requireServerNameIndication, applicationGatewayHttpListenerPropertiesFormat.requireServerNameIndication) &&
        Objects.equals(this.sslCertificate, applicationGatewayHttpListenerPropertiesFormat.sslCertificate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frontendIPConfiguration, frontendPort, hostName, protocol, provisioningState, requireServerNameIndication, sslCertificate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayHttpListenerPropertiesFormat {\n");
    sb.append("    frontendIPConfiguration: ").append(toIndentedString(frontendIPConfiguration)).append("\n");
    sb.append("    frontendPort: ").append(toIndentedString(frontendPort)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    requireServerNameIndication: ").append(toIndentedString(requireServerNameIndication)).append("\n");
    sb.append("    sslCertificate: ").append(toIndentedString(sslCertificate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("frontendIPConfiguration");
    openapiFields.add("frontendPort");
    openapiFields.add("hostName");
    openapiFields.add("protocol");
    openapiFields.add("provisioningState");
    openapiFields.add("requireServerNameIndication");
    openapiFields.add("sslCertificate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayHttpListenerPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayHttpListenerPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayHttpListenerPropertiesFormat is not found in the empty JSON string", ApplicationGatewayHttpListenerPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayHttpListenerPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayHttpListenerPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayHttpListenerPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayHttpListenerPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayHttpListenerPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayHttpListenerPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayHttpListenerPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayHttpListenerPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayHttpListenerPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayHttpListenerPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayHttpListenerPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayHttpListenerPropertiesFormat
   */
  public static ApplicationGatewayHttpListenerPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayHttpListenerPropertiesFormat.class);
  }

  /**
   * Convert an instance of ApplicationGatewayHttpListenerPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

