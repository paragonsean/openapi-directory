/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Items;
import org.openapitools.client.model.Model0;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the inbound NAT rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:46.287008-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties {
  public static final String SERIALIZED_NAME_BACKEND_I_P_CONFIGURATION = "backendIPConfiguration";
  @SerializedName(SERIALIZED_NAME_BACKEND_I_P_CONFIGURATION)
  private Items backendIPConfiguration = null;

  public static final String SERIALIZED_NAME_BACKEND_PORT = "backendPort";
  @SerializedName(SERIALIZED_NAME_BACKEND_PORT)
  private Integer backendPort;

  public static final String SERIALIZED_NAME_ENABLE_FLOATING_I_P = "enableFloatingIP";
  @SerializedName(SERIALIZED_NAME_ENABLE_FLOATING_I_P)
  private Boolean enableFloatingIP;

  public static final String SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATION = "frontendIPConfiguration";
  @SerializedName(SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATION)
  private Model0 frontendIPConfiguration = null;

  public static final String SERIALIZED_NAME_FRONTEND_PORT = "frontendPort";
  @SerializedName(SERIALIZED_NAME_FRONTEND_PORT)
  private Integer frontendPort;

  public static final String SERIALIZED_NAME_IDLE_TIMEOUT_IN_MINUTES = "idleTimeoutInMinutes";
  @SerializedName(SERIALIZED_NAME_IDLE_TIMEOUT_IN_MINUTES)
  private Integer idleTimeoutInMinutes;

  /**
   * The transport protocol for the endpoint. Possible values are &#39;Udp&#39; or &#39;Tcp&#39; or &#39;All&#39;.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    UDP("Udp"),
    
    TCP("Tcp"),
    
    ALL("All");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties() {
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties backendIPConfiguration(Items backendIPConfiguration) {
    this.backendIPConfiguration = backendIPConfiguration;
    return this;
  }

  /**
   * Get backendIPConfiguration
   * @return backendIPConfiguration
   */
  @javax.annotation.Nullable
  public Items getBackendIPConfiguration() {
    return backendIPConfiguration;
  }

  public void setBackendIPConfiguration(Items backendIPConfiguration) {
    this.backendIPConfiguration = backendIPConfiguration;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties backendPort(Integer backendPort) {
    this.backendPort = backendPort;
    return this;
  }

  /**
   * The port used for the internal endpoint. Acceptable values range from 1 to 65535.
   * @return backendPort
   */
  @javax.annotation.Nullable
  public Integer getBackendPort() {
    return backendPort;
  }

  public void setBackendPort(Integer backendPort) {
    this.backendPort = backendPort;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties enableFloatingIP(Boolean enableFloatingIP) {
    this.enableFloatingIP = enableFloatingIP;
    return this;
  }

  /**
   * Configures a virtual machine&#39;s endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can&#39;t be changed after you create the endpoint.
   * @return enableFloatingIP
   */
  @javax.annotation.Nullable
  public Boolean getEnableFloatingIP() {
    return enableFloatingIP;
  }

  public void setEnableFloatingIP(Boolean enableFloatingIP) {
    this.enableFloatingIP = enableFloatingIP;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties frontendIPConfiguration(Model0 frontendIPConfiguration) {
    this.frontendIPConfiguration = frontendIPConfiguration;
    return this;
  }

  /**
   * Get frontendIPConfiguration
   * @return frontendIPConfiguration
   */
  @javax.annotation.Nullable
  public Model0 getFrontendIPConfiguration() {
    return frontendIPConfiguration;
  }

  public void setFrontendIPConfiguration(Model0 frontendIPConfiguration) {
    this.frontendIPConfiguration = frontendIPConfiguration;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties frontendPort(Integer frontendPort) {
    this.frontendPort = frontendPort;
    return this;
  }

  /**
   * The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.
   * @return frontendPort
   */
  @javax.annotation.Nullable
  public Integer getFrontendPort() {
    return frontendPort;
  }

  public void setFrontendPort(Integer frontendPort) {
    this.frontendPort = frontendPort;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties idleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
    this.idleTimeoutInMinutes = idleTimeoutInMinutes;
    return this;
  }

  /**
   * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
   * @return idleTimeoutInMinutes
   */
  @javax.annotation.Nullable
  public Integer getIdleTimeoutInMinutes() {
    return idleTimeoutInMinutes;
  }

  public void setIdleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
    this.idleTimeoutInMinutes = idleTimeoutInMinutes;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * The transport protocol for the endpoint. Possible values are &#39;Udp&#39; or &#39;Tcp&#39; or &#39;All&#39;.
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets the provisioning state of the public IP resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties applicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties = (ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties) o;
    return Objects.equals(this.backendIPConfiguration, applicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.backendIPConfiguration) &&
        Objects.equals(this.backendPort, applicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.backendPort) &&
        Objects.equals(this.enableFloatingIP, applicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.enableFloatingIP) &&
        Objects.equals(this.frontendIPConfiguration, applicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.frontendIPConfiguration) &&
        Objects.equals(this.frontendPort, applicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.frontendPort) &&
        Objects.equals(this.idleTimeoutInMinutes, applicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.idleTimeoutInMinutes) &&
        Objects.equals(this.protocol, applicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.protocol) &&
        Objects.equals(this.provisioningState, applicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendIPConfiguration, backendPort, enableFloatingIP, frontendIPConfiguration, frontendPort, idleTimeoutInMinutes, protocol, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties {\n");
    sb.append("    backendIPConfiguration: ").append(toIndentedString(backendIPConfiguration)).append("\n");
    sb.append("    backendPort: ").append(toIndentedString(backendPort)).append("\n");
    sb.append("    enableFloatingIP: ").append(toIndentedString(enableFloatingIP)).append("\n");
    sb.append("    frontendIPConfiguration: ").append(toIndentedString(frontendIPConfiguration)).append("\n");
    sb.append("    frontendPort: ").append(toIndentedString(frontendPort)).append("\n");
    sb.append("    idleTimeoutInMinutes: ").append(toIndentedString(idleTimeoutInMinutes)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendIPConfiguration");
    openapiFields.add("backendPort");
    openapiFields.add("enableFloatingIP");
    openapiFields.add("frontendIPConfiguration");
    openapiFields.add("frontendPort");
    openapiFields.add("idleTimeoutInMinutes");
    openapiFields.add("protocol");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties is not found in the empty JSON string", ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties
   */
  public static ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.class);
  }

  /**
   * Convert an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

