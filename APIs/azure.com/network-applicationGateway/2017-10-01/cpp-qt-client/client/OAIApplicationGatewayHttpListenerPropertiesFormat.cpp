/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayHttpListenerPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayHttpListenerPropertiesFormat::OAIApplicationGatewayHttpListenerPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayHttpListenerPropertiesFormat::OAIApplicationGatewayHttpListenerPropertiesFormat() {
    this->initializeModel();
}

OAIApplicationGatewayHttpListenerPropertiesFormat::~OAIApplicationGatewayHttpListenerPropertiesFormat() {}

void OAIApplicationGatewayHttpListenerPropertiesFormat::initializeModel() {

    m_frontend_ip_configuration_isSet = false;
    m_frontend_ip_configuration_isValid = false;

    m_frontend_port_isSet = false;
    m_frontend_port_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_require_server_name_indication_isSet = false;
    m_require_server_name_indication_isValid = false;

    m_ssl_certificate_isSet = false;
    m_ssl_certificate_isValid = false;
}

void OAIApplicationGatewayHttpListenerPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayHttpListenerPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_frontend_ip_configuration_isValid = ::OpenAPI::fromJsonValue(m_frontend_ip_configuration, json[QString("frontendIPConfiguration")]);
    m_frontend_ip_configuration_isSet = !json[QString("frontendIPConfiguration")].isNull() && m_frontend_ip_configuration_isValid;

    m_frontend_port_isValid = ::OpenAPI::fromJsonValue(m_frontend_port, json[QString("frontendPort")]);
    m_frontend_port_isSet = !json[QString("frontendPort")].isNull() && m_frontend_port_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_require_server_name_indication_isValid = ::OpenAPI::fromJsonValue(m_require_server_name_indication, json[QString("requireServerNameIndication")]);
    m_require_server_name_indication_isSet = !json[QString("requireServerNameIndication")].isNull() && m_require_server_name_indication_isValid;

    m_ssl_certificate_isValid = ::OpenAPI::fromJsonValue(m_ssl_certificate, json[QString("sslCertificate")]);
    m_ssl_certificate_isSet = !json[QString("sslCertificate")].isNull() && m_ssl_certificate_isValid;
}

QString OAIApplicationGatewayHttpListenerPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayHttpListenerPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_frontend_ip_configuration.isSet()) {
        obj.insert(QString("frontendIPConfiguration"), ::OpenAPI::toJsonValue(m_frontend_ip_configuration));
    }
    if (m_frontend_port.isSet()) {
        obj.insert(QString("frontendPort"), ::OpenAPI::toJsonValue(m_frontend_port));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_require_server_name_indication_isSet) {
        obj.insert(QString("requireServerNameIndication"), ::OpenAPI::toJsonValue(m_require_server_name_indication));
    }
    if (m_ssl_certificate.isSet()) {
        obj.insert(QString("sslCertificate"), ::OpenAPI::toJsonValue(m_ssl_certificate));
    }
    return obj;
}

OAI0 OAIApplicationGatewayHttpListenerPropertiesFormat::getFrontendIpConfiguration() const {
    return m_frontend_ip_configuration;
}
void OAIApplicationGatewayHttpListenerPropertiesFormat::setFrontendIpConfiguration(const OAI0 &frontend_ip_configuration) {
    m_frontend_ip_configuration = frontend_ip_configuration;
    m_frontend_ip_configuration_isSet = true;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_frontend_ip_configuration_Set() const{
    return m_frontend_ip_configuration_isSet;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_frontend_ip_configuration_Valid() const{
    return m_frontend_ip_configuration_isValid;
}

OAI0 OAIApplicationGatewayHttpListenerPropertiesFormat::getFrontendPort() const {
    return m_frontend_port;
}
void OAIApplicationGatewayHttpListenerPropertiesFormat::setFrontendPort(const OAI0 &frontend_port) {
    m_frontend_port = frontend_port;
    m_frontend_port_isSet = true;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_frontend_port_Set() const{
    return m_frontend_port_isSet;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_frontend_port_Valid() const{
    return m_frontend_port_isValid;
}

QString OAIApplicationGatewayHttpListenerPropertiesFormat::getHostName() const {
    return m_host_name;
}
void OAIApplicationGatewayHttpListenerPropertiesFormat::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QString OAIApplicationGatewayHttpListenerPropertiesFormat::getProtocol() const {
    return m_protocol;
}
void OAIApplicationGatewayHttpListenerPropertiesFormat::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIApplicationGatewayHttpListenerPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationGatewayHttpListenerPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::isRequireServerNameIndication() const {
    return m_require_server_name_indication;
}
void OAIApplicationGatewayHttpListenerPropertiesFormat::setRequireServerNameIndication(const bool &require_server_name_indication) {
    m_require_server_name_indication = require_server_name_indication;
    m_require_server_name_indication_isSet = true;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_require_server_name_indication_Set() const{
    return m_require_server_name_indication_isSet;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_require_server_name_indication_Valid() const{
    return m_require_server_name_indication_isValid;
}

OAI0 OAIApplicationGatewayHttpListenerPropertiesFormat::getSslCertificate() const {
    return m_ssl_certificate;
}
void OAIApplicationGatewayHttpListenerPropertiesFormat::setSslCertificate(const OAI0 &ssl_certificate) {
    m_ssl_certificate = ssl_certificate;
    m_ssl_certificate_isSet = true;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_ssl_certificate_Set() const{
    return m_ssl_certificate_isSet;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::is_ssl_certificate_Valid() const{
    return m_ssl_certificate_isValid;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frontend_ip_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_port.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_server_name_indication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayHttpListenerPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
