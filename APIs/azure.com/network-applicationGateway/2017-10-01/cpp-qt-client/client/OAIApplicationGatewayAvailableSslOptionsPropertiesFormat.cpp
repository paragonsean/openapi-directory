/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayAvailableSslOptionsPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::OAIApplicationGatewayAvailableSslOptionsPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::OAIApplicationGatewayAvailableSslOptionsPropertiesFormat() {
    this->initializeModel();
}

OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::~OAIApplicationGatewayAvailableSslOptionsPropertiesFormat() {}

void OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::initializeModel() {

    m_available_cipher_suites_isSet = false;
    m_available_cipher_suites_isValid = false;

    m_available_protocols_isSet = false;
    m_available_protocols_isValid = false;

    m_default_policy_isSet = false;
    m_default_policy_isValid = false;

    m_predefined_policies_isSet = false;
    m_predefined_policies_isValid = false;
}

void OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_available_cipher_suites_isValid = ::OpenAPI::fromJsonValue(m_available_cipher_suites, json[QString("availableCipherSuites")]);
    m_available_cipher_suites_isSet = !json[QString("availableCipherSuites")].isNull() && m_available_cipher_suites_isValid;

    m_available_protocols_isValid = ::OpenAPI::fromJsonValue(m_available_protocols, json[QString("availableProtocols")]);
    m_available_protocols_isSet = !json[QString("availableProtocols")].isNull() && m_available_protocols_isValid;

    m_default_policy_isValid = ::OpenAPI::fromJsonValue(m_default_policy, json[QString("defaultPolicy")]);
    m_default_policy_isSet = !json[QString("defaultPolicy")].isNull() && m_default_policy_isValid;

    m_predefined_policies_isValid = ::OpenAPI::fromJsonValue(m_predefined_policies, json[QString("predefinedPolicies")]);
    m_predefined_policies_isSet = !json[QString("predefinedPolicies")].isNull() && m_predefined_policies_isValid;
}

QString OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_available_cipher_suites.size() > 0) {
        obj.insert(QString("availableCipherSuites"), ::OpenAPI::toJsonValue(m_available_cipher_suites));
    }
    if (m_available_protocols.size() > 0) {
        obj.insert(QString("availableProtocols"), ::OpenAPI::toJsonValue(m_available_protocols));
    }
    if (m_default_policy.isSet()) {
        obj.insert(QString("defaultPolicy"), ::OpenAPI::toJsonValue(m_default_policy));
    }
    if (m_predefined_policies.size() > 0) {
        obj.insert(QString("predefinedPolicies"), ::OpenAPI::toJsonValue(m_predefined_policies));
    }
    return obj;
}

QList<OAICipherSuitesEnum> OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::getAvailableCipherSuites() const {
    return m_available_cipher_suites;
}
void OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::setAvailableCipherSuites(const QList<OAICipherSuitesEnum> &available_cipher_suites) {
    m_available_cipher_suites = available_cipher_suites;
    m_available_cipher_suites_isSet = true;
}

bool OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::is_available_cipher_suites_Set() const{
    return m_available_cipher_suites_isSet;
}

bool OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::is_available_cipher_suites_Valid() const{
    return m_available_cipher_suites_isValid;
}

QList<OAIProtocolsEnum> OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::getAvailableProtocols() const {
    return m_available_protocols;
}
void OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::setAvailableProtocols(const QList<OAIProtocolsEnum> &available_protocols) {
    m_available_protocols = available_protocols;
    m_available_protocols_isSet = true;
}

bool OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::is_available_protocols_Set() const{
    return m_available_protocols_isSet;
}

bool OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::is_available_protocols_Valid() const{
    return m_available_protocols_isValid;
}

OAIPolicyNameEnum OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::getDefaultPolicy() const {
    return m_default_policy;
}
void OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::setDefaultPolicy(const OAIPolicyNameEnum &default_policy) {
    m_default_policy = default_policy;
    m_default_policy_isSet = true;
}

bool OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::is_default_policy_Set() const{
    return m_default_policy_isSet;
}

bool OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::is_default_policy_Valid() const{
    return m_default_policy_isValid;
}

QList<OAI0> OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::getPredefinedPolicies() const {
    return m_predefined_policies;
}
void OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::setPredefinedPolicies(const QList<OAI0> &predefined_policies) {
    m_predefined_policies = predefined_policies;
    m_predefined_policies_isSet = true;
}

bool OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::is_predefined_policies_Set() const{
    return m_predefined_policies_isSet;
}

bool OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::is_predefined_policies_Valid() const{
    return m_predefined_policies_isValid;
}

bool OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_cipher_suites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_predefined_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayAvailableSslOptionsPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
