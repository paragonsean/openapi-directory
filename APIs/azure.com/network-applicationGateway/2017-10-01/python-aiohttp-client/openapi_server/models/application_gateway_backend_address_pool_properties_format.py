# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_gateway_backend_address import ApplicationGatewayBackendAddress
from openapi_server.models.application_gateway_backend_health_server_ip_configuration import ApplicationGatewayBackendHealthServerIpConfiguration
from openapi_server import util


class ApplicationGatewayBackendAddressPoolPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_addresses: List[ApplicationGatewayBackendAddress]=None, backend_ip_configurations: List[ApplicationGatewayBackendHealthServerIpConfiguration]=None, provisioning_state: str=None):
        """ApplicationGatewayBackendAddressPoolPropertiesFormat - a model defined in OpenAPI

        :param backend_addresses: The backend_addresses of this ApplicationGatewayBackendAddressPoolPropertiesFormat.
        :param backend_ip_configurations: The backend_ip_configurations of this ApplicationGatewayBackendAddressPoolPropertiesFormat.
        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormat.
        """
        self.openapi_types = {
            'backend_addresses': List[ApplicationGatewayBackendAddress],
            'backend_ip_configurations': List[ApplicationGatewayBackendHealthServerIpConfiguration],
            'provisioning_state': str
        }

        self.attribute_map = {
            'backend_addresses': 'backendAddresses',
            'backend_ip_configurations': 'backendIPConfigurations',
            'provisioning_state': 'provisioningState'
        }

        self._backend_addresses = backend_addresses
        self._backend_ip_configurations = backend_ip_configurations
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayBackendAddressPoolPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayBackendAddressPoolPropertiesFormat of this ApplicationGatewayBackendAddressPoolPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_addresses(self):
        """Gets the backend_addresses of this ApplicationGatewayBackendAddressPoolPropertiesFormat.

        Backend addresses

        :return: The backend_addresses of this ApplicationGatewayBackendAddressPoolPropertiesFormat.
        :rtype: List[ApplicationGatewayBackendAddress]
        """
        return self._backend_addresses

    @backend_addresses.setter
    def backend_addresses(self, backend_addresses):
        """Sets the backend_addresses of this ApplicationGatewayBackendAddressPoolPropertiesFormat.

        Backend addresses

        :param backend_addresses: The backend_addresses of this ApplicationGatewayBackendAddressPoolPropertiesFormat.
        :type backend_addresses: List[ApplicationGatewayBackendAddress]
        """

        self._backend_addresses = backend_addresses

    @property
    def backend_ip_configurations(self):
        """Gets the backend_ip_configurations of this ApplicationGatewayBackendAddressPoolPropertiesFormat.

        Collection of references to IPs defined in network interfaces.

        :return: The backend_ip_configurations of this ApplicationGatewayBackendAddressPoolPropertiesFormat.
        :rtype: List[ApplicationGatewayBackendHealthServerIpConfiguration]
        """
        return self._backend_ip_configurations

    @backend_ip_configurations.setter
    def backend_ip_configurations(self, backend_ip_configurations):
        """Sets the backend_ip_configurations of this ApplicationGatewayBackendAddressPoolPropertiesFormat.

        Collection of references to IPs defined in network interfaces.

        :param backend_ip_configurations: The backend_ip_configurations of this ApplicationGatewayBackendAddressPoolPropertiesFormat.
        :type backend_ip_configurations: List[ApplicationGatewayBackendHealthServerIpConfiguration]
        """

        self._backend_ip_configurations = backend_ip_configurations

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormat.

        Provisioning state of the backend address pool resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :return: The provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormat.

        Provisioning state of the backend address pool resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state
