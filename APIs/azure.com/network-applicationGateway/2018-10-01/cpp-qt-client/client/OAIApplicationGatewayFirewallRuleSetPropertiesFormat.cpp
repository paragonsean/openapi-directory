/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayFirewallRuleSetPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayFirewallRuleSetPropertiesFormat::OAIApplicationGatewayFirewallRuleSetPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayFirewallRuleSetPropertiesFormat::OAIApplicationGatewayFirewallRuleSetPropertiesFormat() {
    this->initializeModel();
}

OAIApplicationGatewayFirewallRuleSetPropertiesFormat::~OAIApplicationGatewayFirewallRuleSetPropertiesFormat() {}

void OAIApplicationGatewayFirewallRuleSetPropertiesFormat::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_rule_groups_isSet = false;
    m_rule_groups_isValid = false;

    m_rule_set_type_isSet = false;
    m_rule_set_type_isValid = false;

    m_rule_set_version_isSet = false;
    m_rule_set_version_isValid = false;
}

void OAIApplicationGatewayFirewallRuleSetPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayFirewallRuleSetPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_rule_groups_isValid = ::OpenAPI::fromJsonValue(m_rule_groups, json[QString("ruleGroups")]);
    m_rule_groups_isSet = !json[QString("ruleGroups")].isNull() && m_rule_groups_isValid;

    m_rule_set_type_isValid = ::OpenAPI::fromJsonValue(m_rule_set_type, json[QString("ruleSetType")]);
    m_rule_set_type_isSet = !json[QString("ruleSetType")].isNull() && m_rule_set_type_isValid;

    m_rule_set_version_isValid = ::OpenAPI::fromJsonValue(m_rule_set_version, json[QString("ruleSetVersion")]);
    m_rule_set_version_isSet = !json[QString("ruleSetVersion")].isNull() && m_rule_set_version_isValid;
}

QString OAIApplicationGatewayFirewallRuleSetPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayFirewallRuleSetPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_rule_groups.size() > 0) {
        obj.insert(QString("ruleGroups"), ::OpenAPI::toJsonValue(m_rule_groups));
    }
    if (m_rule_set_type_isSet) {
        obj.insert(QString("ruleSetType"), ::OpenAPI::toJsonValue(m_rule_set_type));
    }
    if (m_rule_set_version_isSet) {
        obj.insert(QString("ruleSetVersion"), ::OpenAPI::toJsonValue(m_rule_set_version));
    }
    return obj;
}

QString OAIApplicationGatewayFirewallRuleSetPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationGatewayFirewallRuleSetPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationGatewayFirewallRuleSetPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationGatewayFirewallRuleSetPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIApplicationGatewayFirewallRuleGroup> OAIApplicationGatewayFirewallRuleSetPropertiesFormat::getRuleGroups() const {
    return m_rule_groups;
}
void OAIApplicationGatewayFirewallRuleSetPropertiesFormat::setRuleGroups(const QList<OAIApplicationGatewayFirewallRuleGroup> &rule_groups) {
    m_rule_groups = rule_groups;
    m_rule_groups_isSet = true;
}

bool OAIApplicationGatewayFirewallRuleSetPropertiesFormat::is_rule_groups_Set() const{
    return m_rule_groups_isSet;
}

bool OAIApplicationGatewayFirewallRuleSetPropertiesFormat::is_rule_groups_Valid() const{
    return m_rule_groups_isValid;
}

QString OAIApplicationGatewayFirewallRuleSetPropertiesFormat::getRuleSetType() const {
    return m_rule_set_type;
}
void OAIApplicationGatewayFirewallRuleSetPropertiesFormat::setRuleSetType(const QString &rule_set_type) {
    m_rule_set_type = rule_set_type;
    m_rule_set_type_isSet = true;
}

bool OAIApplicationGatewayFirewallRuleSetPropertiesFormat::is_rule_set_type_Set() const{
    return m_rule_set_type_isSet;
}

bool OAIApplicationGatewayFirewallRuleSetPropertiesFormat::is_rule_set_type_Valid() const{
    return m_rule_set_type_isValid;
}

QString OAIApplicationGatewayFirewallRuleSetPropertiesFormat::getRuleSetVersion() const {
    return m_rule_set_version;
}
void OAIApplicationGatewayFirewallRuleSetPropertiesFormat::setRuleSetVersion(const QString &rule_set_version) {
    m_rule_set_version = rule_set_version;
    m_rule_set_version_isSet = true;
}

bool OAIApplicationGatewayFirewallRuleSetPropertiesFormat::is_rule_set_version_Set() const{
    return m_rule_set_version_isSet;
}

bool OAIApplicationGatewayFirewallRuleSetPropertiesFormat::is_rule_set_version_Valid() const{
    return m_rule_set_version_isValid;
}

bool OAIApplicationGatewayFirewallRuleSetPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_set_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_set_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayFirewallRuleSetPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_groups_isValid && m_rule_set_type_isValid && m_rule_set_version_isValid && true;
}

} // namespace OpenAPI
