/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendAddressesInner;
import org.openapitools.client.model.DestinationNetworkInterfaceIPConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of Backend Address Pool of an application gateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:09.073772-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties {
  public static final String SERIALIZED_NAME_BACKEND_ADDRESSES = "backendAddresses";
  @SerializedName(SERIALIZED_NAME_BACKEND_ADDRESSES)
  private List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendAddressesInner> backendAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_BACKEND_I_P_CONFIGURATIONS = "backendIPConfigurations";
  @SerializedName(SERIALIZED_NAME_BACKEND_I_P_CONFIGURATIONS)
  private List<DestinationNetworkInterfaceIPConfiguration> backendIPConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties() {
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties backendAddresses(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendAddressesInner> backendAddresses) {
    this.backendAddresses = backendAddresses;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties addBackendAddressesItem(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendAddressesInner backendAddressesItem) {
    if (this.backendAddresses == null) {
      this.backendAddresses = new ArrayList<>();
    }
    this.backendAddresses.add(backendAddressesItem);
    return this;
  }

  /**
   * Backend addresses
   * @return backendAddresses
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendAddressesInner> getBackendAddresses() {
    return backendAddresses;
  }

  public void setBackendAddresses(List<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendAddressesInner> backendAddresses) {
    this.backendAddresses = backendAddresses;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties backendIPConfigurations(List<DestinationNetworkInterfaceIPConfiguration> backendIPConfigurations) {
    this.backendIPConfigurations = backendIPConfigurations;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties addBackendIPConfigurationsItem(DestinationNetworkInterfaceIPConfiguration backendIPConfigurationsItem) {
    if (this.backendIPConfigurations == null) {
      this.backendIPConfigurations = new ArrayList<>();
    }
    this.backendIPConfigurations.add(backendIPConfigurationsItem);
    return this;
  }

  /**
   * Collection of references to IPs defined in network interfaces.
   * @return backendIPConfigurations
   */
  @javax.annotation.Nullable
  public List<DestinationNetworkInterfaceIPConfiguration> getBackendIPConfigurations() {
    return backendIPConfigurations;
  }

  public void setBackendIPConfigurations(List<DestinationNetworkInterfaceIPConfiguration> backendIPConfigurations) {
    this.backendIPConfigurations = backendIPConfigurations;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Provisioning state of the backend address pool resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties applicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties = (ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties) o;
    return Objects.equals(this.backendAddresses, applicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties.backendAddresses) &&
        Objects.equals(this.backendIPConfigurations, applicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties.backendIPConfigurations) &&
        Objects.equals(this.provisioningState, applicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendAddresses, backendIPConfigurations, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties {\n");
    sb.append("    backendAddresses: ").append(toIndentedString(backendAddresses)).append("\n");
    sb.append("    backendIPConfigurations: ").append(toIndentedString(backendIPConfigurations)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendAddresses");
    openapiFields.add("backendIPConfigurations");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties is not found in the empty JSON string", ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("backendAddresses") != null && !jsonObj.get("backendAddresses").isJsonNull()) {
        JsonArray jsonArraybackendAddresses = jsonObj.getAsJsonArray("backendAddresses");
        if (jsonArraybackendAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("backendAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `backendAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("backendAddresses").toString()));
          }

          // validate the optional field `backendAddresses` (array)
          for (int i = 0; i < jsonArraybackendAddresses.size(); i++) {
            ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendAddressesInner.validateJsonElement(jsonArraybackendAddresses.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("backendIPConfigurations") != null && !jsonObj.get("backendIPConfigurations").isJsonNull() && !jsonObj.get("backendIPConfigurations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendIPConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("backendIPConfigurations").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties
   */
  public static ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties.class);
  }

  /**
   * Convert an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

