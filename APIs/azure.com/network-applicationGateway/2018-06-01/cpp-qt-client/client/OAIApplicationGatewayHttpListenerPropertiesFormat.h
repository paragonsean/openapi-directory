/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApplicationGatewayHttpListenerPropertiesFormat.h
 *
 * Properties of HTTP listener of an application gateway.
 */

#ifndef OAIApplicationGatewayHttpListenerPropertiesFormat_H
#define OAIApplicationGatewayHttpListenerPropertiesFormat_H

#include <QJsonObject>

#include "OAI0.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIApplicationGatewayHttpListenerPropertiesFormat : public OAIObject {
public:
    OAIApplicationGatewayHttpListenerPropertiesFormat();
    OAIApplicationGatewayHttpListenerPropertiesFormat(QString json);
    ~OAIApplicationGatewayHttpListenerPropertiesFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAI0 getFrontendIpConfiguration() const;
    void setFrontendIpConfiguration(const OAI0 &frontend_ip_configuration);
    bool is_frontend_ip_configuration_Set() const;
    bool is_frontend_ip_configuration_Valid() const;

    OAI0 getFrontendPort() const;
    void setFrontendPort(const OAI0 &frontend_port);
    bool is_frontend_port_Set() const;
    bool is_frontend_port_Valid() const;

    QString getHostName() const;
    void setHostName(const QString &host_name);
    bool is_host_name_Set() const;
    bool is_host_name_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    bool isRequireServerNameIndication() const;
    void setRequireServerNameIndication(const bool &require_server_name_indication);
    bool is_require_server_name_indication_Set() const;
    bool is_require_server_name_indication_Valid() const;

    OAI0 getSslCertificate() const;
    void setSslCertificate(const OAI0 &ssl_certificate);
    bool is_ssl_certificate_Set() const;
    bool is_ssl_certificate_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAI0 m_frontend_ip_configuration;
    bool m_frontend_ip_configuration_isSet;
    bool m_frontend_ip_configuration_isValid;

    OAI0 m_frontend_port;
    bool m_frontend_port_isSet;
    bool m_frontend_port_isValid;

    QString m_host_name;
    bool m_host_name_isSet;
    bool m_host_name_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    bool m_require_server_name_indication;
    bool m_require_server_name_indication_isSet;
    bool m_require_server_name_indication_isValid;

    OAI0 m_ssl_certificate;
    bool m_ssl_certificate_isSet;
    bool m_ssl_certificate_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApplicationGatewayHttpListenerPropertiesFormat)

#endif // OAIApplicationGatewayHttpListenerPropertiesFormat_H
