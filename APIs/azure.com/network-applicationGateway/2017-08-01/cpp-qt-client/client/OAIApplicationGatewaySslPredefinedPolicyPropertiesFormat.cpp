/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat() {
    this->initializeModel();
}

OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::~OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat() {}

void OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::initializeModel() {

    m_cipher_suites_isSet = false;
    m_cipher_suites_isValid = false;

    m_min_protocol_version_isSet = false;
    m_min_protocol_version_isValid = false;
}

void OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_cipher_suites_isValid = ::OpenAPI::fromJsonValue(m_cipher_suites, json[QString("cipherSuites")]);
    m_cipher_suites_isSet = !json[QString("cipherSuites")].isNull() && m_cipher_suites_isValid;

    m_min_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_min_protocol_version, json[QString("minProtocolVersion")]);
    m_min_protocol_version_isSet = !json[QString("minProtocolVersion")].isNull() && m_min_protocol_version_isValid;
}

QString OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_cipher_suites.size() > 0) {
        obj.insert(QString("cipherSuites"), ::OpenAPI::toJsonValue(m_cipher_suites));
    }
    if (m_min_protocol_version.isSet()) {
        obj.insert(QString("minProtocolVersion"), ::OpenAPI::toJsonValue(m_min_protocol_version));
    }
    return obj;
}

QList<OAICipherSuitesEnum> OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::getCipherSuites() const {
    return m_cipher_suites;
}
void OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::setCipherSuites(const QList<OAICipherSuitesEnum> &cipher_suites) {
    m_cipher_suites = cipher_suites;
    m_cipher_suites_isSet = true;
}

bool OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::is_cipher_suites_Set() const{
    return m_cipher_suites_isSet;
}

bool OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::is_cipher_suites_Valid() const{
    return m_cipher_suites_isValid;
}

OAIProtocolsEnum OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::getMinProtocolVersion() const {
    return m_min_protocol_version;
}
void OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::setMinProtocolVersion(const OAIProtocolsEnum &min_protocol_version) {
    m_min_protocol_version = min_protocol_version;
    m_min_protocol_version_isSet = true;
}

bool OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::is_min_protocol_version_Set() const{
    return m_min_protocol_version_isSet;
}

bool OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::is_min_protocol_version_Valid() const{
    return m_min_protocol_version_isValid;
}

bool OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cipher_suites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_protocol_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewaySslPredefinedPolicyPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
