# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cipher_suites_enum import CipherSuitesEnum
from openapi_server.models.model0 import Model0
from openapi_server.models.policy_name_enum import PolicyNameEnum
from openapi_server.models.protocols_enum import ProtocolsEnum
from openapi_server import util


class ApplicationGatewayAvailableSslOptionsPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_cipher_suites: List[CipherSuitesEnum]=None, available_protocols: List[ProtocolsEnum]=None, default_policy: PolicyNameEnum=None, predefined_policies: List[Model0]=None):
        """ApplicationGatewayAvailableSslOptionsPropertiesFormat - a model defined in OpenAPI

        :param available_cipher_suites: The available_cipher_suites of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.
        :param available_protocols: The available_protocols of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.
        :param default_policy: The default_policy of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.
        :param predefined_policies: The predefined_policies of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.
        """
        self.openapi_types = {
            'available_cipher_suites': List[CipherSuitesEnum],
            'available_protocols': List[ProtocolsEnum],
            'default_policy': PolicyNameEnum,
            'predefined_policies': List[Model0]
        }

        self.attribute_map = {
            'available_cipher_suites': 'availableCipherSuites',
            'available_protocols': 'availableProtocols',
            'default_policy': 'defaultPolicy',
            'predefined_policies': 'predefinedPolicies'
        }

        self._available_cipher_suites = available_cipher_suites
        self._available_protocols = available_protocols
        self._default_policy = default_policy
        self._predefined_policies = predefined_policies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayAvailableSslOptionsPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayAvailableSslOptionsPropertiesFormat of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_cipher_suites(self):
        """Gets the available_cipher_suites of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.

        List of available Ssl cipher suites.

        :return: The available_cipher_suites of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.
        :rtype: List[CipherSuitesEnum]
        """
        return self._available_cipher_suites

    @available_cipher_suites.setter
    def available_cipher_suites(self, available_cipher_suites):
        """Sets the available_cipher_suites of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.

        List of available Ssl cipher suites.

        :param available_cipher_suites: The available_cipher_suites of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.
        :type available_cipher_suites: List[CipherSuitesEnum]
        """

        self._available_cipher_suites = available_cipher_suites

    @property
    def available_protocols(self):
        """Gets the available_protocols of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.

        List of available Ssl protocols.

        :return: The available_protocols of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.
        :rtype: List[ProtocolsEnum]
        """
        return self._available_protocols

    @available_protocols.setter
    def available_protocols(self, available_protocols):
        """Sets the available_protocols of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.

        List of available Ssl protocols.

        :param available_protocols: The available_protocols of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.
        :type available_protocols: List[ProtocolsEnum]
        """

        self._available_protocols = available_protocols

    @property
    def default_policy(self):
        """Gets the default_policy of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.


        :return: The default_policy of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.
        :rtype: PolicyNameEnum
        """
        return self._default_policy

    @default_policy.setter
    def default_policy(self, default_policy):
        """Sets the default_policy of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.


        :param default_policy: The default_policy of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.
        :type default_policy: PolicyNameEnum
        """

        self._default_policy = default_policy

    @property
    def predefined_policies(self):
        """Gets the predefined_policies of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.

        List of available Ssl predefined policy.

        :return: The predefined_policies of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.
        :rtype: List[Model0]
        """
        return self._predefined_policies

    @predefined_policies.setter
    def predefined_policies(self, predefined_policies):
        """Sets the predefined_policies of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.

        List of available Ssl predefined policy.

        :param predefined_policies: The predefined_policies of this ApplicationGatewayAvailableSslOptionsPropertiesFormat.
        :type predefined_policies: List[Model0]
        """

        self._predefined_policies = predefined_policies
