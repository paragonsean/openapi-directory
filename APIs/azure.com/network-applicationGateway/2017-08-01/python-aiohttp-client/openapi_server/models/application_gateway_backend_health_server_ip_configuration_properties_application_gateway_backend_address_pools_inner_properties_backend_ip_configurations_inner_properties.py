# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.items import Items
from openapi_server.models.public_ip_address import PublicIPAddress
from openapi_server.models.subnet import Subnet
from openapi_server import util


class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_gateway_backend_address_pools: List[Items]=None, load_balancer_backend_address_pools: List[Items]=None, load_balancer_inbound_nat_rules: List[Items]=None, primary: bool=None, private_ip_address: str=None, private_ip_address_version: str=None, private_ip_allocation_method: str=None, provisioning_state: str=None, public_ip_address: PublicIPAddress=None, subnet: Subnet=None):
        """ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties - a model defined in OpenAPI

        :param application_gateway_backend_address_pools: The application_gateway_backend_address_pools of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :param load_balancer_backend_address_pools: The load_balancer_backend_address_pools of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :param load_balancer_inbound_nat_rules: The load_balancer_inbound_nat_rules of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :param primary: The primary of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :param private_ip_address: The private_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :param private_ip_address_version: The private_ip_address_version of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :param private_ip_allocation_method: The private_ip_allocation_method of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :param public_ip_address: The public_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :param subnet: The subnet of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        """
        self.openapi_types = {
            'application_gateway_backend_address_pools': List[Items],
            'load_balancer_backend_address_pools': List[Items],
            'load_balancer_inbound_nat_rules': List[Items],
            'primary': bool,
            'private_ip_address': str,
            'private_ip_address_version': str,
            'private_ip_allocation_method': str,
            'provisioning_state': str,
            'public_ip_address': PublicIPAddress,
            'subnet': Subnet
        }

        self.attribute_map = {
            'application_gateway_backend_address_pools': 'applicationGatewayBackendAddressPools',
            'load_balancer_backend_address_pools': 'loadBalancerBackendAddressPools',
            'load_balancer_inbound_nat_rules': 'loadBalancerInboundNatRules',
            'primary': 'primary',
            'private_ip_address': 'privateIPAddress',
            'private_ip_address_version': 'privateIPAddressVersion',
            'private_ip_allocation_method': 'privateIPAllocationMethod',
            'provisioning_state': 'provisioningState',
            'public_ip_address': 'publicIPAddress',
            'subnet': 'subnet'
        }

        self._application_gateway_backend_address_pools = application_gateway_backend_address_pools
        self._load_balancer_backend_address_pools = load_balancer_backend_address_pools
        self._load_balancer_inbound_nat_rules = load_balancer_inbound_nat_rules
        self._primary = primary
        self._private_ip_address = private_ip_address
        self._private_ip_address_version = private_ip_address_version
        self._private_ip_allocation_method = private_ip_allocation_method
        self._provisioning_state = provisioning_state
        self._public_ip_address = public_ip_address
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayBackendHealthServer_ipConfiguration_properties_applicationGatewayBackendAddressPools_inner_properties_backendIPConfigurations_inner_properties of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_gateway_backend_address_pools(self):
        """Gets the application_gateway_backend_address_pools of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        The reference of ApplicationGatewayBackendAddressPool resource.

        :return: The application_gateway_backend_address_pools of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :rtype: List[Items]
        """
        return self._application_gateway_backend_address_pools

    @application_gateway_backend_address_pools.setter
    def application_gateway_backend_address_pools(self, application_gateway_backend_address_pools):
        """Sets the application_gateway_backend_address_pools of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        The reference of ApplicationGatewayBackendAddressPool resource.

        :param application_gateway_backend_address_pools: The application_gateway_backend_address_pools of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :type application_gateway_backend_address_pools: List[Items]
        """

        self._application_gateway_backend_address_pools = application_gateway_backend_address_pools

    @property
    def load_balancer_backend_address_pools(self):
        """Gets the load_balancer_backend_address_pools of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        The reference of LoadBalancerBackendAddressPool resource.

        :return: The load_balancer_backend_address_pools of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :rtype: List[Items]
        """
        return self._load_balancer_backend_address_pools

    @load_balancer_backend_address_pools.setter
    def load_balancer_backend_address_pools(self, load_balancer_backend_address_pools):
        """Sets the load_balancer_backend_address_pools of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        The reference of LoadBalancerBackendAddressPool resource.

        :param load_balancer_backend_address_pools: The load_balancer_backend_address_pools of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :type load_balancer_backend_address_pools: List[Items]
        """

        self._load_balancer_backend_address_pools = load_balancer_backend_address_pools

    @property
    def load_balancer_inbound_nat_rules(self):
        """Gets the load_balancer_inbound_nat_rules of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        A list of references of LoadBalancerInboundNatRules.

        :return: The load_balancer_inbound_nat_rules of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :rtype: List[Items]
        """
        return self._load_balancer_inbound_nat_rules

    @load_balancer_inbound_nat_rules.setter
    def load_balancer_inbound_nat_rules(self, load_balancer_inbound_nat_rules):
        """Sets the load_balancer_inbound_nat_rules of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        A list of references of LoadBalancerInboundNatRules.

        :param load_balancer_inbound_nat_rules: The load_balancer_inbound_nat_rules of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :type load_balancer_inbound_nat_rules: List[Items]
        """

        self._load_balancer_inbound_nat_rules = load_balancer_inbound_nat_rules

    @property
    def primary(self):
        """Gets the primary of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        Gets whether this is a primary customer address on the network interface.

        :return: The primary of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        Gets whether this is a primary customer address on the network interface.

        :param primary: The primary of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :type primary: bool
        """

        self._primary = primary

    @property
    def private_ip_address(self):
        """Gets the private_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        Private IP address of the IP configuration.

        :return: The private_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :rtype: str
        """
        return self._private_ip_address

    @private_ip_address.setter
    def private_ip_address(self, private_ip_address):
        """Sets the private_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        Private IP address of the IP configuration.

        :param private_ip_address: The private_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :type private_ip_address: str
        """

        self._private_ip_address = private_ip_address

    @property
    def private_ip_address_version(self):
        """Gets the private_ip_address_version of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        Available from Api-Version 2016-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.

        :return: The private_ip_address_version of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :rtype: str
        """
        return self._private_ip_address_version

    @private_ip_address_version.setter
    def private_ip_address_version(self, private_ip_address_version):
        """Sets the private_ip_address_version of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        Available from Api-Version 2016-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.

        :param private_ip_address_version: The private_ip_address_version of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :type private_ip_address_version: str
        """
        allowed_values = ["IPv4", "IPv6"]  # noqa: E501
        if private_ip_address_version not in allowed_values:
            raise ValueError(
                "Invalid value for `private_ip_address_version` ({0}), must be one of {1}"
                .format(private_ip_address_version, allowed_values)
            )

        self._private_ip_address_version = private_ip_address_version

    @property
    def private_ip_allocation_method(self):
        """Gets the private_ip_allocation_method of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        Defines how a private IP address is assigned. Possible values are: 'Static' and 'Dynamic'.

        :return: The private_ip_allocation_method of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :rtype: str
        """
        return self._private_ip_allocation_method

    @private_ip_allocation_method.setter
    def private_ip_allocation_method(self, private_ip_allocation_method):
        """Sets the private_ip_allocation_method of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        Defines how a private IP address is assigned. Possible values are: 'Static' and 'Dynamic'.

        :param private_ip_allocation_method: The private_ip_allocation_method of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :type private_ip_allocation_method: str
        """
        allowed_values = ["Static", "Dynamic"]  # noqa: E501
        if private_ip_allocation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `private_ip_allocation_method` ({0}), must be one of {1}"
                .format(private_ip_allocation_method, allowed_values)
            )

        self._private_ip_allocation_method = private_ip_allocation_method

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        The provisioning state of the network interface IP configuration. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :return: The provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.

        The provisioning state of the network interface IP configuration. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def public_ip_address(self):
        """Gets the public_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.


        :return: The public_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :rtype: PublicIPAddress
        """
        return self._public_ip_address

    @public_ip_address.setter
    def public_ip_address(self, public_ip_address):
        """Sets the public_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.


        :param public_ip_address: The public_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :type public_ip_address: PublicIPAddress
        """

        self._public_ip_address = public_ip_address

    @property
    def subnet(self):
        """Gets the subnet of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.


        :return: The subnet of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :rtype: Subnet
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.


        :param subnet: The subnet of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.
        :type subnet: Subnet
        """

        self._subnet = subnet
