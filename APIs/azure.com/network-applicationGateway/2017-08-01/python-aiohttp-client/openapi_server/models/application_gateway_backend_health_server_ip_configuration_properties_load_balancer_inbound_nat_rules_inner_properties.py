# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.items import Items
from openapi_server.models.model0 import Model0
from openapi_server import util


class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_ip_configuration: Items=None, backend_port: int=None, enable_floating_ip: bool=None, frontend_ip_configuration: Model0=None, frontend_port: int=None, idle_timeout_in_minutes: int=None, protocol: str=None, provisioning_state: str=None):
        """ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties - a model defined in OpenAPI

        :param backend_ip_configuration: The backend_ip_configuration of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :param backend_port: The backend_port of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :param enable_floating_ip: The enable_floating_ip of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :param frontend_ip_configuration: The frontend_ip_configuration of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :param frontend_port: The frontend_port of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :param idle_timeout_in_minutes: The idle_timeout_in_minutes of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :param protocol: The protocol of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        """
        self.openapi_types = {
            'backend_ip_configuration': Items,
            'backend_port': int,
            'enable_floating_ip': bool,
            'frontend_ip_configuration': Model0,
            'frontend_port': int,
            'idle_timeout_in_minutes': int,
            'protocol': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'backend_ip_configuration': 'backendIPConfiguration',
            'backend_port': 'backendPort',
            'enable_floating_ip': 'enableFloatingIP',
            'frontend_ip_configuration': 'frontendIPConfiguration',
            'frontend_port': 'frontendPort',
            'idle_timeout_in_minutes': 'idleTimeoutInMinutes',
            'protocol': 'protocol',
            'provisioning_state': 'provisioningState'
        }

        self._backend_ip_configuration = backend_ip_configuration
        self._backend_port = backend_port
        self._enable_floating_ip = enable_floating_ip
        self._frontend_ip_configuration = frontend_ip_configuration
        self._frontend_port = frontend_port
        self._idle_timeout_in_minutes = idle_timeout_in_minutes
        self._protocol = protocol
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayBackendHealthServer_ipConfiguration_properties_loadBalancerInboundNatRules_inner_properties of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_ip_configuration(self):
        """Gets the backend_ip_configuration of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.


        :return: The backend_ip_configuration of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :rtype: Items
        """
        return self._backend_ip_configuration

    @backend_ip_configuration.setter
    def backend_ip_configuration(self, backend_ip_configuration):
        """Sets the backend_ip_configuration of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.


        :param backend_ip_configuration: The backend_ip_configuration of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :type backend_ip_configuration: Items
        """

        self._backend_ip_configuration = backend_ip_configuration

    @property
    def backend_port(self):
        """Gets the backend_port of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.

        The port used for the internal endpoint. Acceptable values range from 1 to 65535.

        :return: The backend_port of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :rtype: int
        """
        return self._backend_port

    @backend_port.setter
    def backend_port(self, backend_port):
        """Sets the backend_port of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.

        The port used for the internal endpoint. Acceptable values range from 1 to 65535.

        :param backend_port: The backend_port of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :type backend_port: int
        """

        self._backend_port = backend_port

    @property
    def enable_floating_ip(self):
        """Gets the enable_floating_ip of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.

        Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.

        :return: The enable_floating_ip of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :rtype: bool
        """
        return self._enable_floating_ip

    @enable_floating_ip.setter
    def enable_floating_ip(self, enable_floating_ip):
        """Sets the enable_floating_ip of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.

        Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.

        :param enable_floating_ip: The enable_floating_ip of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :type enable_floating_ip: bool
        """

        self._enable_floating_ip = enable_floating_ip

    @property
    def frontend_ip_configuration(self):
        """Gets the frontend_ip_configuration of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.


        :return: The frontend_ip_configuration of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :rtype: Model0
        """
        return self._frontend_ip_configuration

    @frontend_ip_configuration.setter
    def frontend_ip_configuration(self, frontend_ip_configuration):
        """Sets the frontend_ip_configuration of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.


        :param frontend_ip_configuration: The frontend_ip_configuration of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :type frontend_ip_configuration: Model0
        """

        self._frontend_ip_configuration = frontend_ip_configuration

    @property
    def frontend_port(self):
        """Gets the frontend_port of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.

        The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.

        :return: The frontend_port of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :rtype: int
        """
        return self._frontend_port

    @frontend_port.setter
    def frontend_port(self, frontend_port):
        """Sets the frontend_port of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.

        The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.

        :param frontend_port: The frontend_port of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :type frontend_port: int
        """

        self._frontend_port = frontend_port

    @property
    def idle_timeout_in_minutes(self):
        """Gets the idle_timeout_in_minutes of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.

        The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.

        :return: The idle_timeout_in_minutes of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :rtype: int
        """
        return self._idle_timeout_in_minutes

    @idle_timeout_in_minutes.setter
    def idle_timeout_in_minutes(self, idle_timeout_in_minutes):
        """Sets the idle_timeout_in_minutes of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.

        The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.

        :param idle_timeout_in_minutes: The idle_timeout_in_minutes of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :type idle_timeout_in_minutes: int
        """

        self._idle_timeout_in_minutes = idle_timeout_in_minutes

    @property
    def protocol(self):
        """Gets the protocol of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.

        The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'

        :return: The protocol of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.

        The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'

        :param protocol: The protocol of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :type protocol: str
        """
        allowed_values = ["Udp", "Tcp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.

        Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :return: The provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.

        Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesLoadBalancerInboundNatRulesInnerProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state
