/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Model0;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of path rule of an application gateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:31.935156-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayPathRulePropertiesFormat {
  public static final String SERIALIZED_NAME_BACKEND_ADDRESS_POOL = "backendAddressPool";
  @SerializedName(SERIALIZED_NAME_BACKEND_ADDRESS_POOL)
  private Model0 backendAddressPool = null;

  public static final String SERIALIZED_NAME_BACKEND_HTTP_SETTINGS = "backendHttpSettings";
  @SerializedName(SERIALIZED_NAME_BACKEND_HTTP_SETTINGS)
  private Model0 backendHttpSettings = null;

  public static final String SERIALIZED_NAME_PATHS = "paths";
  @SerializedName(SERIALIZED_NAME_PATHS)
  private List<String> paths = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_REDIRECT_CONFIGURATION = "redirectConfiguration";
  @SerializedName(SERIALIZED_NAME_REDIRECT_CONFIGURATION)
  private Model0 redirectConfiguration = null;

  public ApplicationGatewayPathRulePropertiesFormat() {
  }

  public ApplicationGatewayPathRulePropertiesFormat backendAddressPool(Model0 backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
    return this;
  }

  /**
   * Get backendAddressPool
   * @return backendAddressPool
   */
  @javax.annotation.Nullable
  public Model0 getBackendAddressPool() {
    return backendAddressPool;
  }

  public void setBackendAddressPool(Model0 backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
  }


  public ApplicationGatewayPathRulePropertiesFormat backendHttpSettings(Model0 backendHttpSettings) {
    this.backendHttpSettings = backendHttpSettings;
    return this;
  }

  /**
   * Get backendHttpSettings
   * @return backendHttpSettings
   */
  @javax.annotation.Nullable
  public Model0 getBackendHttpSettings() {
    return backendHttpSettings;
  }

  public void setBackendHttpSettings(Model0 backendHttpSettings) {
    this.backendHttpSettings = backendHttpSettings;
  }


  public ApplicationGatewayPathRulePropertiesFormat paths(List<String> paths) {
    this.paths = paths;
    return this;
  }

  public ApplicationGatewayPathRulePropertiesFormat addPathsItem(String pathsItem) {
    if (this.paths == null) {
      this.paths = new ArrayList<>();
    }
    this.paths.add(pathsItem);
    return this;
  }

  /**
   * Path rules of URL path map.
   * @return paths
   */
  @javax.annotation.Nullable
  public List<String> getPaths() {
    return paths;
  }

  public void setPaths(List<String> paths) {
    this.paths = paths;
  }


  public ApplicationGatewayPathRulePropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Path rule of URL path map resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ApplicationGatewayPathRulePropertiesFormat redirectConfiguration(Model0 redirectConfiguration) {
    this.redirectConfiguration = redirectConfiguration;
    return this;
  }

  /**
   * Get redirectConfiguration
   * @return redirectConfiguration
   */
  @javax.annotation.Nullable
  public Model0 getRedirectConfiguration() {
    return redirectConfiguration;
  }

  public void setRedirectConfiguration(Model0 redirectConfiguration) {
    this.redirectConfiguration = redirectConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayPathRulePropertiesFormat applicationGatewayPathRulePropertiesFormat = (ApplicationGatewayPathRulePropertiesFormat) o;
    return Objects.equals(this.backendAddressPool, applicationGatewayPathRulePropertiesFormat.backendAddressPool) &&
        Objects.equals(this.backendHttpSettings, applicationGatewayPathRulePropertiesFormat.backendHttpSettings) &&
        Objects.equals(this.paths, applicationGatewayPathRulePropertiesFormat.paths) &&
        Objects.equals(this.provisioningState, applicationGatewayPathRulePropertiesFormat.provisioningState) &&
        Objects.equals(this.redirectConfiguration, applicationGatewayPathRulePropertiesFormat.redirectConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendAddressPool, backendHttpSettings, paths, provisioningState, redirectConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayPathRulePropertiesFormat {\n");
    sb.append("    backendAddressPool: ").append(toIndentedString(backendAddressPool)).append("\n");
    sb.append("    backendHttpSettings: ").append(toIndentedString(backendHttpSettings)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    redirectConfiguration: ").append(toIndentedString(redirectConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendAddressPool");
    openapiFields.add("backendHttpSettings");
    openapiFields.add("paths");
    openapiFields.add("provisioningState");
    openapiFields.add("redirectConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayPathRulePropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayPathRulePropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayPathRulePropertiesFormat is not found in the empty JSON string", ApplicationGatewayPathRulePropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayPathRulePropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayPathRulePropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("paths") != null && !jsonObj.get("paths").isJsonNull() && !jsonObj.get("paths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `paths` to be an array in the JSON string but got `%s`", jsonObj.get("paths").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayPathRulePropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayPathRulePropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayPathRulePropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayPathRulePropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayPathRulePropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayPathRulePropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayPathRulePropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayPathRulePropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayPathRulePropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayPathRulePropertiesFormat
   */
  public static ApplicationGatewayPathRulePropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayPathRulePropertiesFormat.class);
  }

  /**
   * Convert an instance of ApplicationGatewayPathRulePropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

