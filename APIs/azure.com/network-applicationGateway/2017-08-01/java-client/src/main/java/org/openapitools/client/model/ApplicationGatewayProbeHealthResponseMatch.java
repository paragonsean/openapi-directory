/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Application gateway probe health response match
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:31.935156-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayProbeHealthResponseMatch {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_STATUS_CODES = "statusCodes";
  @SerializedName(SERIALIZED_NAME_STATUS_CODES)
  private List<String> statusCodes = new ArrayList<>();

  public ApplicationGatewayProbeHealthResponseMatch() {
  }

  public ApplicationGatewayProbeHealthResponseMatch body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Body that must be contained in the health response. Default value is empty.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public ApplicationGatewayProbeHealthResponseMatch statusCodes(List<String> statusCodes) {
    this.statusCodes = statusCodes;
    return this;
  }

  public ApplicationGatewayProbeHealthResponseMatch addStatusCodesItem(String statusCodesItem) {
    if (this.statusCodes == null) {
      this.statusCodes = new ArrayList<>();
    }
    this.statusCodes.add(statusCodesItem);
    return this;
  }

  /**
   * Allowed ranges of healthy status codes. Default range of healthy status codes is 200-399.
   * @return statusCodes
   */
  @javax.annotation.Nullable
  public List<String> getStatusCodes() {
    return statusCodes;
  }

  public void setStatusCodes(List<String> statusCodes) {
    this.statusCodes = statusCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayProbeHealthResponseMatch applicationGatewayProbeHealthResponseMatch = (ApplicationGatewayProbeHealthResponseMatch) o;
    return Objects.equals(this.body, applicationGatewayProbeHealthResponseMatch.body) &&
        Objects.equals(this.statusCodes, applicationGatewayProbeHealthResponseMatch.statusCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, statusCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayProbeHealthResponseMatch {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    statusCodes: ").append(toIndentedString(statusCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("statusCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayProbeHealthResponseMatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayProbeHealthResponseMatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayProbeHealthResponseMatch is not found in the empty JSON string", ApplicationGatewayProbeHealthResponseMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayProbeHealthResponseMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayProbeHealthResponseMatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statusCodes") != null && !jsonObj.get("statusCodes").isJsonNull() && !jsonObj.get("statusCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCodes` to be an array in the JSON string but got `%s`", jsonObj.get("statusCodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayProbeHealthResponseMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayProbeHealthResponseMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayProbeHealthResponseMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayProbeHealthResponseMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayProbeHealthResponseMatch>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayProbeHealthResponseMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayProbeHealthResponseMatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayProbeHealthResponseMatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayProbeHealthResponseMatch
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayProbeHealthResponseMatch
   */
  public static ApplicationGatewayProbeHealthResponseMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayProbeHealthResponseMatch.class);
  }

  /**
   * Convert an instance of ApplicationGatewayProbeHealthResponseMatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

