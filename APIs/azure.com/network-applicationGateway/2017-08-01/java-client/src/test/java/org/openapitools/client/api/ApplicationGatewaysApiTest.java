/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplicationGateway;
import org.openapitools.client.model.ApplicationGatewayAvailableSslPredefinedPolicies;
import org.openapitools.client.model.ApplicationGatewayAvailableWafRuleSetsResult;
import org.openapitools.client.model.ApplicationGatewayBackendHealth;
import org.openapitools.client.model.ApplicationGatewayListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationGatewaysApi
 */
@Disabled
public class ApplicationGatewaysApiTest {

    private final ApplicationGatewaysApi api = new ApplicationGatewaysApi();

    /**
     * Gets the backend health of the specified application gateway in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationGatewaysBackendHealthTest() throws ApiException {
        String resourceGroupName = null;
        String applicationGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $expand = null;
        ApplicationGatewayBackendHealth response = api.applicationGatewaysBackendHealth(resourceGroupName, applicationGatewayName, apiVersion, subscriptionId, $expand);
        // TODO: test validations
    }

    /**
     * Creates or updates the specified application gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationGatewaysCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String applicationGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ApplicationGateway parameters = null;
        ApplicationGateway response = api.applicationGatewaysCreateOrUpdate(resourceGroupName, applicationGatewayName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified application gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationGatewaysDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String applicationGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.applicationGatewaysDelete(resourceGroupName, applicationGatewayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the specified application gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationGatewaysGetTest() throws ApiException {
        String resourceGroupName = null;
        String applicationGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ApplicationGateway response = api.applicationGatewaysGet(resourceGroupName, applicationGatewayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets Ssl predefined policy with the specified policy name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationGatewaysGetSslPredefinedPolicyTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String predefinedPolicyName = null;
        Object response = api.applicationGatewaysGetSslPredefinedPolicy(apiVersion, subscriptionId, predefinedPolicyName);
        // TODO: test validations
    }

    /**
     * Lists all application gateways in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationGatewaysListTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ApplicationGatewayListResult response = api.applicationGatewaysList(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all the application gateways in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationGatewaysListAllTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        ApplicationGatewayListResult response = api.applicationGatewaysListAll(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists available Ssl options for configuring Ssl policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationGatewaysListAvailableSslOptionsTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        Object response = api.applicationGatewaysListAvailableSslOptions(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all SSL predefined policies for configuring Ssl policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationGatewaysListAvailableSslPredefinedPoliciesTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        ApplicationGatewayAvailableSslPredefinedPolicies response = api.applicationGatewaysListAvailableSslPredefinedPolicies(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all available web application firewall rule sets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationGatewaysListAvailableWafRuleSetsTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        ApplicationGatewayAvailableWafRuleSetsResult response = api.applicationGatewaysListAvailableWafRuleSets(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Starts the specified application gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationGatewaysStartTest() throws ApiException {
        String resourceGroupName = null;
        String applicationGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.applicationGatewaysStart(resourceGroupName, applicationGatewayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Stops the specified application gateway in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationGatewaysStopTest() throws ApiException {
        String resourceGroupName = null;
        String applicationGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.applicationGatewaysStop(resourceGroupName, applicationGatewayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

}
