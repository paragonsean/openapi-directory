# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_prefix: str=None, next_hop_ip_address: str=None, next_hop_type: str=None, provisioning_state: str=None):
        """ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties - a model defined in OpenAPI

        :param address_prefix: The address_prefix of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.
        :param next_hop_ip_address: The next_hop_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.
        :param next_hop_type: The next_hop_type of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.
        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.
        """
        self.openapi_types = {
            'address_prefix': str,
            'next_hop_ip_address': str,
            'next_hop_type': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'address_prefix': 'addressPrefix',
            'next_hop_ip_address': 'nextHopIpAddress',
            'next_hop_type': 'nextHopType',
            'provisioning_state': 'provisioningState'
        }

        self._address_prefix = address_prefix
        self._next_hop_ip_address = next_hop_ip_address
        self._next_hop_type = next_hop_type
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayBackendHealthServer_ipConfiguration_properties_subnet_properties_routeTable_properties_routes_inner_properties of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_prefix(self):
        """Gets the address_prefix of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.

        The destination CIDR to which the route applies.

        :return: The address_prefix of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.
        :rtype: str
        """
        return self._address_prefix

    @address_prefix.setter
    def address_prefix(self, address_prefix):
        """Sets the address_prefix of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.

        The destination CIDR to which the route applies.

        :param address_prefix: The address_prefix of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.
        :type address_prefix: str
        """

        self._address_prefix = address_prefix

    @property
    def next_hop_ip_address(self):
        """Gets the next_hop_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.

        The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.

        :return: The next_hop_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.
        :rtype: str
        """
        return self._next_hop_ip_address

    @next_hop_ip_address.setter
    def next_hop_ip_address(self, next_hop_ip_address):
        """Sets the next_hop_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.

        The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.

        :param next_hop_ip_address: The next_hop_ip_address of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.
        :type next_hop_ip_address: str
        """

        self._next_hop_ip_address = next_hop_ip_address

    @property
    def next_hop_type(self):
        """Gets the next_hop_type of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.

        The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'

        :return: The next_hop_type of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.
        :rtype: str
        """
        return self._next_hop_type

    @next_hop_type.setter
    def next_hop_type(self, next_hop_type):
        """Sets the next_hop_type of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.

        The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'

        :param next_hop_type: The next_hop_type of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.
        :type next_hop_type: str
        """
        allowed_values = ["VirtualNetworkGateway", "VnetLocal", "Internet", "VirtualAppliance", "None"]  # noqa: E501
        if next_hop_type not in allowed_values:
            raise ValueError(
                "Invalid value for `next_hop_type` ({0}), must be one of {1}"
                .format(next_hop_type, allowed_values)
            )

        self._next_hop_type = next_hop_type

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.

        The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :return: The provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.

        The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTablePropertiesRoutesInnerProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state
