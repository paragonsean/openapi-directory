/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetworkManagementClient);
  }
}(this, function(expect, NetworkManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApplicationGatewayBackendHttpSettingsPropertiesFormat', function() {
    it('should create an instance of ApplicationGatewayBackendHttpSettingsPropertiesFormat', function() {
      // uncomment below and update the code to test ApplicationGatewayBackendHttpSettingsPropertiesFormat
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be.a(NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat);
    });

    it('should have the property affinityCookieName (base name: "affinityCookieName")', function() {
      // uncomment below and update the code to test the property affinityCookieName
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property authenticationCertificates (base name: "authenticationCertificates")', function() {
      // uncomment below and update the code to test the property authenticationCertificates
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property connectionDraining (base name: "connectionDraining")', function() {
      // uncomment below and update the code to test the property connectionDraining
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property cookieBasedAffinity (base name: "cookieBasedAffinity")', function() {
      // uncomment below and update the code to test the property cookieBasedAffinity
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property hostName (base name: "hostName")', function() {
      // uncomment below and update the code to test the property hostName
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property pickHostNameFromBackendAddress (base name: "pickHostNameFromBackendAddress")', function() {
      // uncomment below and update the code to test the property pickHostNameFromBackendAddress
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property probe (base name: "probe")', function() {
      // uncomment below and update the code to test the property probe
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property probeEnabled (base name: "probeEnabled")', function() {
      // uncomment below and update the code to test the property probeEnabled
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property protocol (base name: "protocol")', function() {
      // uncomment below and update the code to test the property protocol
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property requestTimeout (base name: "requestTimeout")', function() {
      // uncomment below and update the code to test the property requestTimeout
      //var instance = new NetworkManagementClient.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
      //expect(instance).to.be();
    });

  });

}));
