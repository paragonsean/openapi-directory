/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Items;
import org.openapitools.client.model.PrivateIPAddressVersion;
import org.openapitools.client.model.PrivateIPAllocationMethod;
import org.openapitools.client.model.PublicIPAddress;
import org.openapitools.client.model.Subnet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of IP configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:46.096636-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties {
  public static final String SERIALIZED_NAME_APPLICATION_GATEWAY_BACKEND_ADDRESS_POOLS = "applicationGatewayBackendAddressPools";
  @SerializedName(SERIALIZED_NAME_APPLICATION_GATEWAY_BACKEND_ADDRESS_POOLS)
  private List<Items> applicationGatewayBackendAddressPools = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPLICATION_SECURITY_GROUPS = "applicationSecurityGroups";
  @SerializedName(SERIALIZED_NAME_APPLICATION_SECURITY_GROUPS)
  private List<Items> applicationSecurityGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOAD_BALANCER_BACKEND_ADDRESS_POOLS = "loadBalancerBackendAddressPools";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_BACKEND_ADDRESS_POOLS)
  private List<Items> loadBalancerBackendAddressPools = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOAD_BALANCER_INBOUND_NAT_RULES = "loadBalancerInboundNatRules";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_INBOUND_NAT_RULES)
  private List<Items> loadBalancerInboundNatRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private Boolean primary;

  public static final String SERIALIZED_NAME_PRIVATE_I_P_ADDRESS = "privateIPAddress";
  @SerializedName(SERIALIZED_NAME_PRIVATE_I_P_ADDRESS)
  private String privateIPAddress;

  public static final String SERIALIZED_NAME_PRIVATE_I_P_ADDRESS_VERSION = "privateIPAddressVersion";
  @SerializedName(SERIALIZED_NAME_PRIVATE_I_P_ADDRESS_VERSION)
  private PrivateIPAddressVersion privateIPAddressVersion = null;

  public static final String SERIALIZED_NAME_PRIVATE_I_P_ALLOCATION_METHOD = "privateIPAllocationMethod";
  @SerializedName(SERIALIZED_NAME_PRIVATE_I_P_ALLOCATION_METHOD)
  private PrivateIPAllocationMethod privateIPAllocationMethod = null;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_PUBLIC_I_P_ADDRESS = "publicIPAddress";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P_ADDRESS)
  private PublicIPAddress publicIPAddress = null;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private Subnet subnet = null;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_TAPS = "virtualNetworkTaps";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_TAPS)
  private List<Items> virtualNetworkTaps = new ArrayList<>();

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties() {
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties applicationGatewayBackendAddressPools(List<Items> applicationGatewayBackendAddressPools) {
    this.applicationGatewayBackendAddressPools = applicationGatewayBackendAddressPools;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties addApplicationGatewayBackendAddressPoolsItem(Items applicationGatewayBackendAddressPoolsItem) {
    if (this.applicationGatewayBackendAddressPools == null) {
      this.applicationGatewayBackendAddressPools = new ArrayList<>();
    }
    this.applicationGatewayBackendAddressPools.add(applicationGatewayBackendAddressPoolsItem);
    return this;
  }

  /**
   * The reference of ApplicationGatewayBackendAddressPool resource.
   * @return applicationGatewayBackendAddressPools
   */
  @javax.annotation.Nullable
  public List<Items> getApplicationGatewayBackendAddressPools() {
    return applicationGatewayBackendAddressPools;
  }

  public void setApplicationGatewayBackendAddressPools(List<Items> applicationGatewayBackendAddressPools) {
    this.applicationGatewayBackendAddressPools = applicationGatewayBackendAddressPools;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties applicationSecurityGroups(List<Items> applicationSecurityGroups) {
    this.applicationSecurityGroups = applicationSecurityGroups;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties addApplicationSecurityGroupsItem(Items applicationSecurityGroupsItem) {
    if (this.applicationSecurityGroups == null) {
      this.applicationSecurityGroups = new ArrayList<>();
    }
    this.applicationSecurityGroups.add(applicationSecurityGroupsItem);
    return this;
  }

  /**
   * Application security groups in which the IP configuration is included.
   * @return applicationSecurityGroups
   */
  @javax.annotation.Nullable
  public List<Items> getApplicationSecurityGroups() {
    return applicationSecurityGroups;
  }

  public void setApplicationSecurityGroups(List<Items> applicationSecurityGroups) {
    this.applicationSecurityGroups = applicationSecurityGroups;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties loadBalancerBackendAddressPools(List<Items> loadBalancerBackendAddressPools) {
    this.loadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties addLoadBalancerBackendAddressPoolsItem(Items loadBalancerBackendAddressPoolsItem) {
    if (this.loadBalancerBackendAddressPools == null) {
      this.loadBalancerBackendAddressPools = new ArrayList<>();
    }
    this.loadBalancerBackendAddressPools.add(loadBalancerBackendAddressPoolsItem);
    return this;
  }

  /**
   * The reference of LoadBalancerBackendAddressPool resource.
   * @return loadBalancerBackendAddressPools
   */
  @javax.annotation.Nullable
  public List<Items> getLoadBalancerBackendAddressPools() {
    return loadBalancerBackendAddressPools;
  }

  public void setLoadBalancerBackendAddressPools(List<Items> loadBalancerBackendAddressPools) {
    this.loadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties loadBalancerInboundNatRules(List<Items> loadBalancerInboundNatRules) {
    this.loadBalancerInboundNatRules = loadBalancerInboundNatRules;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties addLoadBalancerInboundNatRulesItem(Items loadBalancerInboundNatRulesItem) {
    if (this.loadBalancerInboundNatRules == null) {
      this.loadBalancerInboundNatRules = new ArrayList<>();
    }
    this.loadBalancerInboundNatRules.add(loadBalancerInboundNatRulesItem);
    return this;
  }

  /**
   * A list of references of LoadBalancerInboundNatRules.
   * @return loadBalancerInboundNatRules
   */
  @javax.annotation.Nullable
  public List<Items> getLoadBalancerInboundNatRules() {
    return loadBalancerInboundNatRules;
  }

  public void setLoadBalancerInboundNatRules(List<Items> loadBalancerInboundNatRules) {
    this.loadBalancerInboundNatRules = loadBalancerInboundNatRules;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties primary(Boolean primary) {
    this.primary = primary;
    return this;
  }

  /**
   * Gets whether this is a primary customer address on the network interface.
   * @return primary
   */
  @javax.annotation.Nullable
  public Boolean getPrimary() {
    return primary;
  }

  public void setPrimary(Boolean primary) {
    this.primary = primary;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties privateIPAddress(String privateIPAddress) {
    this.privateIPAddress = privateIPAddress;
    return this;
  }

  /**
   * Private IP address of the IP configuration.
   * @return privateIPAddress
   */
  @javax.annotation.Nullable
  public String getPrivateIPAddress() {
    return privateIPAddress;
  }

  public void setPrivateIPAddress(String privateIPAddress) {
    this.privateIPAddress = privateIPAddress;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties privateIPAddressVersion(PrivateIPAddressVersion privateIPAddressVersion) {
    this.privateIPAddressVersion = privateIPAddressVersion;
    return this;
  }

  /**
   * Get privateIPAddressVersion
   * @return privateIPAddressVersion
   */
  @javax.annotation.Nullable
  public PrivateIPAddressVersion getPrivateIPAddressVersion() {
    return privateIPAddressVersion;
  }

  public void setPrivateIPAddressVersion(PrivateIPAddressVersion privateIPAddressVersion) {
    this.privateIPAddressVersion = privateIPAddressVersion;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties privateIPAllocationMethod(PrivateIPAllocationMethod privateIPAllocationMethod) {
    this.privateIPAllocationMethod = privateIPAllocationMethod;
    return this;
  }

  /**
   * Get privateIPAllocationMethod
   * @return privateIPAllocationMethod
   */
  @javax.annotation.Nullable
  public PrivateIPAllocationMethod getPrivateIPAllocationMethod() {
    return privateIPAllocationMethod;
  }

  public void setPrivateIPAllocationMethod(PrivateIPAllocationMethod privateIPAllocationMethod) {
    this.privateIPAllocationMethod = privateIPAllocationMethod;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state of the network interface IP configuration. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties publicIPAddress(PublicIPAddress publicIPAddress) {
    this.publicIPAddress = publicIPAddress;
    return this;
  }

  /**
   * Get publicIPAddress
   * @return publicIPAddress
   */
  @javax.annotation.Nullable
  public PublicIPAddress getPublicIPAddress() {
    return publicIPAddress;
  }

  public void setPublicIPAddress(PublicIPAddress publicIPAddress) {
    this.publicIPAddress = publicIPAddress;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties subnet(Subnet subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * Get subnet
   * @return subnet
   */
  @javax.annotation.Nullable
  public Subnet getSubnet() {
    return subnet;
  }

  public void setSubnet(Subnet subnet) {
    this.subnet = subnet;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties virtualNetworkTaps(List<Items> virtualNetworkTaps) {
    this.virtualNetworkTaps = virtualNetworkTaps;
    return this;
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties addVirtualNetworkTapsItem(Items virtualNetworkTapsItem) {
    if (this.virtualNetworkTaps == null) {
      this.virtualNetworkTaps = new ArrayList<>();
    }
    this.virtualNetworkTaps.add(virtualNetworkTapsItem);
    return this;
  }

  /**
   * The reference to Virtual Network Taps.
   * @return virtualNetworkTaps
   */
  @javax.annotation.Nullable
  public List<Items> getVirtualNetworkTaps() {
    return virtualNetworkTaps;
  }

  public void setVirtualNetworkTaps(List<Items> virtualNetworkTaps) {
    this.virtualNetworkTaps = virtualNetworkTaps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties = (ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties) o;
    return Objects.equals(this.applicationGatewayBackendAddressPools, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.applicationGatewayBackendAddressPools) &&
        Objects.equals(this.applicationSecurityGroups, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.applicationSecurityGroups) &&
        Objects.equals(this.loadBalancerBackendAddressPools, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.loadBalancerBackendAddressPools) &&
        Objects.equals(this.loadBalancerInboundNatRules, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.loadBalancerInboundNatRules) &&
        Objects.equals(this.primary, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.primary) &&
        Objects.equals(this.privateIPAddress, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.privateIPAddress) &&
        Objects.equals(this.privateIPAddressVersion, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.privateIPAddressVersion) &&
        Objects.equals(this.privateIPAllocationMethod, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.privateIPAllocationMethod) &&
        Objects.equals(this.provisioningState, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.provisioningState) &&
        Objects.equals(this.publicIPAddress, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.publicIPAddress) &&
        Objects.equals(this.subnet, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.subnet) &&
        Objects.equals(this.virtualNetworkTaps, applicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.virtualNetworkTaps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationGatewayBackendAddressPools, applicationSecurityGroups, loadBalancerBackendAddressPools, loadBalancerInboundNatRules, primary, privateIPAddress, privateIPAddressVersion, privateIPAllocationMethod, provisioningState, publicIPAddress, subnet, virtualNetworkTaps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties {\n");
    sb.append("    applicationGatewayBackendAddressPools: ").append(toIndentedString(applicationGatewayBackendAddressPools)).append("\n");
    sb.append("    applicationSecurityGroups: ").append(toIndentedString(applicationSecurityGroups)).append("\n");
    sb.append("    loadBalancerBackendAddressPools: ").append(toIndentedString(loadBalancerBackendAddressPools)).append("\n");
    sb.append("    loadBalancerInboundNatRules: ").append(toIndentedString(loadBalancerInboundNatRules)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    privateIPAddress: ").append(toIndentedString(privateIPAddress)).append("\n");
    sb.append("    privateIPAddressVersion: ").append(toIndentedString(privateIPAddressVersion)).append("\n");
    sb.append("    privateIPAllocationMethod: ").append(toIndentedString(privateIPAllocationMethod)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publicIPAddress: ").append(toIndentedString(publicIPAddress)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("    virtualNetworkTaps: ").append(toIndentedString(virtualNetworkTaps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationGatewayBackendAddressPools");
    openapiFields.add("applicationSecurityGroups");
    openapiFields.add("loadBalancerBackendAddressPools");
    openapiFields.add("loadBalancerInboundNatRules");
    openapiFields.add("primary");
    openapiFields.add("privateIPAddress");
    openapiFields.add("privateIPAddressVersion");
    openapiFields.add("privateIPAllocationMethod");
    openapiFields.add("provisioningState");
    openapiFields.add("publicIPAddress");
    openapiFields.add("subnet");
    openapiFields.add("virtualNetworkTaps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties is not found in the empty JSON string", ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("applicationGatewayBackendAddressPools") != null && !jsonObj.get("applicationGatewayBackendAddressPools").isJsonNull() && !jsonObj.get("applicationGatewayBackendAddressPools").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationGatewayBackendAddressPools` to be an array in the JSON string but got `%s`", jsonObj.get("applicationGatewayBackendAddressPools").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("applicationSecurityGroups") != null && !jsonObj.get("applicationSecurityGroups").isJsonNull() && !jsonObj.get("applicationSecurityGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationSecurityGroups` to be an array in the JSON string but got `%s`", jsonObj.get("applicationSecurityGroups").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("loadBalancerBackendAddressPools") != null && !jsonObj.get("loadBalancerBackendAddressPools").isJsonNull() && !jsonObj.get("loadBalancerBackendAddressPools").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadBalancerBackendAddressPools` to be an array in the JSON string but got `%s`", jsonObj.get("loadBalancerBackendAddressPools").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("loadBalancerInboundNatRules") != null && !jsonObj.get("loadBalancerInboundNatRules").isJsonNull() && !jsonObj.get("loadBalancerInboundNatRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadBalancerInboundNatRules` to be an array in the JSON string but got `%s`", jsonObj.get("loadBalancerInboundNatRules").toString()));
      }
      if ((jsonObj.get("privateIPAddress") != null && !jsonObj.get("privateIPAddress").isJsonNull()) && !jsonObj.get("privateIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateIPAddress").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("virtualNetworkTaps") != null && !jsonObj.get("virtualNetworkTaps").isJsonNull() && !jsonObj.get("virtualNetworkTaps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualNetworkTaps` to be an array in the JSON string but got `%s`", jsonObj.get("virtualNetworkTaps").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties
   */
  public static ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties.class);
  }

  /**
   * Convert an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

