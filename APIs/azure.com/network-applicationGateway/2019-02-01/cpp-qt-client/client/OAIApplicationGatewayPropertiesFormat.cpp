/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayPropertiesFormat::OAIApplicationGatewayPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayPropertiesFormat::OAIApplicationGatewayPropertiesFormat() {
    this->initializeModel();
}

OAIApplicationGatewayPropertiesFormat::~OAIApplicationGatewayPropertiesFormat() {}

void OAIApplicationGatewayPropertiesFormat::initializeModel() {

    m_authentication_certificates_isSet = false;
    m_authentication_certificates_isValid = false;

    m_autoscale_configuration_isSet = false;
    m_autoscale_configuration_isValid = false;

    m_backend_address_pools_isSet = false;
    m_backend_address_pools_isValid = false;

    m_backend_http_settings_collection_isSet = false;
    m_backend_http_settings_collection_isValid = false;

    m_custom_error_configurations_isSet = false;
    m_custom_error_configurations_isValid = false;

    m_enable_fips_isSet = false;
    m_enable_fips_isValid = false;

    m_enable_http2_isSet = false;
    m_enable_http2_isValid = false;

    m_firewall_policy_isSet = false;
    m_firewall_policy_isValid = false;

    m_frontend_ip_configurations_isSet = false;
    m_frontend_ip_configurations_isValid = false;

    m_frontend_ports_isSet = false;
    m_frontend_ports_isValid = false;

    m_gateway_ip_configurations_isSet = false;
    m_gateway_ip_configurations_isValid = false;

    m_http_listeners_isSet = false;
    m_http_listeners_isValid = false;

    m_operational_state_isSet = false;
    m_operational_state_isValid = false;

    m_probes_isSet = false;
    m_probes_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_redirect_configurations_isSet = false;
    m_redirect_configurations_isValid = false;

    m_request_routing_rules_isSet = false;
    m_request_routing_rules_isValid = false;

    m_resource_guid_isSet = false;
    m_resource_guid_isValid = false;

    m_rewrite_rule_sets_isSet = false;
    m_rewrite_rule_sets_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_ssl_certificates_isSet = false;
    m_ssl_certificates_isValid = false;

    m_ssl_policy_isSet = false;
    m_ssl_policy_isValid = false;

    m_trusted_root_certificates_isSet = false;
    m_trusted_root_certificates_isValid = false;

    m_url_path_maps_isSet = false;
    m_url_path_maps_isValid = false;

    m_web_application_firewall_configuration_isSet = false;
    m_web_application_firewall_configuration_isValid = false;
}

void OAIApplicationGatewayPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_authentication_certificates_isValid = ::OpenAPI::fromJsonValue(m_authentication_certificates, json[QString("authenticationCertificates")]);
    m_authentication_certificates_isSet = !json[QString("authenticationCertificates")].isNull() && m_authentication_certificates_isValid;

    m_autoscale_configuration_isValid = ::OpenAPI::fromJsonValue(m_autoscale_configuration, json[QString("autoscaleConfiguration")]);
    m_autoscale_configuration_isSet = !json[QString("autoscaleConfiguration")].isNull() && m_autoscale_configuration_isValid;

    m_backend_address_pools_isValid = ::OpenAPI::fromJsonValue(m_backend_address_pools, json[QString("backendAddressPools")]);
    m_backend_address_pools_isSet = !json[QString("backendAddressPools")].isNull() && m_backend_address_pools_isValid;

    m_backend_http_settings_collection_isValid = ::OpenAPI::fromJsonValue(m_backend_http_settings_collection, json[QString("backendHttpSettingsCollection")]);
    m_backend_http_settings_collection_isSet = !json[QString("backendHttpSettingsCollection")].isNull() && m_backend_http_settings_collection_isValid;

    m_custom_error_configurations_isValid = ::OpenAPI::fromJsonValue(m_custom_error_configurations, json[QString("customErrorConfigurations")]);
    m_custom_error_configurations_isSet = !json[QString("customErrorConfigurations")].isNull() && m_custom_error_configurations_isValid;

    m_enable_fips_isValid = ::OpenAPI::fromJsonValue(m_enable_fips, json[QString("enableFips")]);
    m_enable_fips_isSet = !json[QString("enableFips")].isNull() && m_enable_fips_isValid;

    m_enable_http2_isValid = ::OpenAPI::fromJsonValue(m_enable_http2, json[QString("enableHttp2")]);
    m_enable_http2_isSet = !json[QString("enableHttp2")].isNull() && m_enable_http2_isValid;

    m_firewall_policy_isValid = ::OpenAPI::fromJsonValue(m_firewall_policy, json[QString("firewallPolicy")]);
    m_firewall_policy_isSet = !json[QString("firewallPolicy")].isNull() && m_firewall_policy_isValid;

    m_frontend_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_frontend_ip_configurations, json[QString("frontendIPConfigurations")]);
    m_frontend_ip_configurations_isSet = !json[QString("frontendIPConfigurations")].isNull() && m_frontend_ip_configurations_isValid;

    m_frontend_ports_isValid = ::OpenAPI::fromJsonValue(m_frontend_ports, json[QString("frontendPorts")]);
    m_frontend_ports_isSet = !json[QString("frontendPorts")].isNull() && m_frontend_ports_isValid;

    m_gateway_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_gateway_ip_configurations, json[QString("gatewayIPConfigurations")]);
    m_gateway_ip_configurations_isSet = !json[QString("gatewayIPConfigurations")].isNull() && m_gateway_ip_configurations_isValid;

    m_http_listeners_isValid = ::OpenAPI::fromJsonValue(m_http_listeners, json[QString("httpListeners")]);
    m_http_listeners_isSet = !json[QString("httpListeners")].isNull() && m_http_listeners_isValid;

    m_operational_state_isValid = ::OpenAPI::fromJsonValue(m_operational_state, json[QString("operationalState")]);
    m_operational_state_isSet = !json[QString("operationalState")].isNull() && m_operational_state_isValid;

    m_probes_isValid = ::OpenAPI::fromJsonValue(m_probes, json[QString("probes")]);
    m_probes_isSet = !json[QString("probes")].isNull() && m_probes_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_redirect_configurations_isValid = ::OpenAPI::fromJsonValue(m_redirect_configurations, json[QString("redirectConfigurations")]);
    m_redirect_configurations_isSet = !json[QString("redirectConfigurations")].isNull() && m_redirect_configurations_isValid;

    m_request_routing_rules_isValid = ::OpenAPI::fromJsonValue(m_request_routing_rules, json[QString("requestRoutingRules")]);
    m_request_routing_rules_isSet = !json[QString("requestRoutingRules")].isNull() && m_request_routing_rules_isValid;

    m_resource_guid_isValid = ::OpenAPI::fromJsonValue(m_resource_guid, json[QString("resourceGuid")]);
    m_resource_guid_isSet = !json[QString("resourceGuid")].isNull() && m_resource_guid_isValid;

    m_rewrite_rule_sets_isValid = ::OpenAPI::fromJsonValue(m_rewrite_rule_sets, json[QString("rewriteRuleSets")]);
    m_rewrite_rule_sets_isSet = !json[QString("rewriteRuleSets")].isNull() && m_rewrite_rule_sets_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_ssl_certificates_isValid = ::OpenAPI::fromJsonValue(m_ssl_certificates, json[QString("sslCertificates")]);
    m_ssl_certificates_isSet = !json[QString("sslCertificates")].isNull() && m_ssl_certificates_isValid;

    m_ssl_policy_isValid = ::OpenAPI::fromJsonValue(m_ssl_policy, json[QString("sslPolicy")]);
    m_ssl_policy_isSet = !json[QString("sslPolicy")].isNull() && m_ssl_policy_isValid;

    m_trusted_root_certificates_isValid = ::OpenAPI::fromJsonValue(m_trusted_root_certificates, json[QString("trustedRootCertificates")]);
    m_trusted_root_certificates_isSet = !json[QString("trustedRootCertificates")].isNull() && m_trusted_root_certificates_isValid;

    m_url_path_maps_isValid = ::OpenAPI::fromJsonValue(m_url_path_maps, json[QString("urlPathMaps")]);
    m_url_path_maps_isSet = !json[QString("urlPathMaps")].isNull() && m_url_path_maps_isValid;

    m_web_application_firewall_configuration_isValid = ::OpenAPI::fromJsonValue(m_web_application_firewall_configuration, json[QString("webApplicationFirewallConfiguration")]);
    m_web_application_firewall_configuration_isSet = !json[QString("webApplicationFirewallConfiguration")].isNull() && m_web_application_firewall_configuration_isValid;
}

QString OAIApplicationGatewayPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_certificates.size() > 0) {
        obj.insert(QString("authenticationCertificates"), ::OpenAPI::toJsonValue(m_authentication_certificates));
    }
    if (m_autoscale_configuration.isSet()) {
        obj.insert(QString("autoscaleConfiguration"), ::OpenAPI::toJsonValue(m_autoscale_configuration));
    }
    if (m_backend_address_pools.size() > 0) {
        obj.insert(QString("backendAddressPools"), ::OpenAPI::toJsonValue(m_backend_address_pools));
    }
    if (m_backend_http_settings_collection.size() > 0) {
        obj.insert(QString("backendHttpSettingsCollection"), ::OpenAPI::toJsonValue(m_backend_http_settings_collection));
    }
    if (m_custom_error_configurations.size() > 0) {
        obj.insert(QString("customErrorConfigurations"), ::OpenAPI::toJsonValue(m_custom_error_configurations));
    }
    if (m_enable_fips_isSet) {
        obj.insert(QString("enableFips"), ::OpenAPI::toJsonValue(m_enable_fips));
    }
    if (m_enable_http2_isSet) {
        obj.insert(QString("enableHttp2"), ::OpenAPI::toJsonValue(m_enable_http2));
    }
    if (m_firewall_policy.isSet()) {
        obj.insert(QString("firewallPolicy"), ::OpenAPI::toJsonValue(m_firewall_policy));
    }
    if (m_frontend_ip_configurations.size() > 0) {
        obj.insert(QString("frontendIPConfigurations"), ::OpenAPI::toJsonValue(m_frontend_ip_configurations));
    }
    if (m_frontend_ports.size() > 0) {
        obj.insert(QString("frontendPorts"), ::OpenAPI::toJsonValue(m_frontend_ports));
    }
    if (m_gateway_ip_configurations.size() > 0) {
        obj.insert(QString("gatewayIPConfigurations"), ::OpenAPI::toJsonValue(m_gateway_ip_configurations));
    }
    if (m_http_listeners.size() > 0) {
        obj.insert(QString("httpListeners"), ::OpenAPI::toJsonValue(m_http_listeners));
    }
    if (m_operational_state_isSet) {
        obj.insert(QString("operationalState"), ::OpenAPI::toJsonValue(m_operational_state));
    }
    if (m_probes.size() > 0) {
        obj.insert(QString("probes"), ::OpenAPI::toJsonValue(m_probes));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_redirect_configurations.size() > 0) {
        obj.insert(QString("redirectConfigurations"), ::OpenAPI::toJsonValue(m_redirect_configurations));
    }
    if (m_request_routing_rules.size() > 0) {
        obj.insert(QString("requestRoutingRules"), ::OpenAPI::toJsonValue(m_request_routing_rules));
    }
    if (m_resource_guid_isSet) {
        obj.insert(QString("resourceGuid"), ::OpenAPI::toJsonValue(m_resource_guid));
    }
    if (m_rewrite_rule_sets.size() > 0) {
        obj.insert(QString("rewriteRuleSets"), ::OpenAPI::toJsonValue(m_rewrite_rule_sets));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_ssl_certificates.size() > 0) {
        obj.insert(QString("sslCertificates"), ::OpenAPI::toJsonValue(m_ssl_certificates));
    }
    if (m_ssl_policy.isSet()) {
        obj.insert(QString("sslPolicy"), ::OpenAPI::toJsonValue(m_ssl_policy));
    }
    if (m_trusted_root_certificates.size() > 0) {
        obj.insert(QString("trustedRootCertificates"), ::OpenAPI::toJsonValue(m_trusted_root_certificates));
    }
    if (m_url_path_maps.size() > 0) {
        obj.insert(QString("urlPathMaps"), ::OpenAPI::toJsonValue(m_url_path_maps));
    }
    if (m_web_application_firewall_configuration.isSet()) {
        obj.insert(QString("webApplicationFirewallConfiguration"), ::OpenAPI::toJsonValue(m_web_application_firewall_configuration));
    }
    return obj;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getAuthenticationCertificates() const {
    return m_authentication_certificates;
}
void OAIApplicationGatewayPropertiesFormat::setAuthenticationCertificates(const QList<OAIObject> &authentication_certificates) {
    m_authentication_certificates = authentication_certificates;
    m_authentication_certificates_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_authentication_certificates_Set() const{
    return m_authentication_certificates_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_authentication_certificates_Valid() const{
    return m_authentication_certificates_isValid;
}

OAIApplicationGatewayAutoscaleConfiguration OAIApplicationGatewayPropertiesFormat::getAutoscaleConfiguration() const {
    return m_autoscale_configuration;
}
void OAIApplicationGatewayPropertiesFormat::setAutoscaleConfiguration(const OAIApplicationGatewayAutoscaleConfiguration &autoscale_configuration) {
    m_autoscale_configuration = autoscale_configuration;
    m_autoscale_configuration_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_autoscale_configuration_Set() const{
    return m_autoscale_configuration_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_autoscale_configuration_Valid() const{
    return m_autoscale_configuration_isValid;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getBackendAddressPools() const {
    return m_backend_address_pools;
}
void OAIApplicationGatewayPropertiesFormat::setBackendAddressPools(const QList<OAIObject> &backend_address_pools) {
    m_backend_address_pools = backend_address_pools;
    m_backend_address_pools_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_backend_address_pools_Set() const{
    return m_backend_address_pools_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_backend_address_pools_Valid() const{
    return m_backend_address_pools_isValid;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getBackendHttpSettingsCollection() const {
    return m_backend_http_settings_collection;
}
void OAIApplicationGatewayPropertiesFormat::setBackendHttpSettingsCollection(const QList<OAIObject> &backend_http_settings_collection) {
    m_backend_http_settings_collection = backend_http_settings_collection;
    m_backend_http_settings_collection_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_backend_http_settings_collection_Set() const{
    return m_backend_http_settings_collection_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_backend_http_settings_collection_Valid() const{
    return m_backend_http_settings_collection_isValid;
}

QList<OAIApplicationGatewayCustomError> OAIApplicationGatewayPropertiesFormat::getCustomErrorConfigurations() const {
    return m_custom_error_configurations;
}
void OAIApplicationGatewayPropertiesFormat::setCustomErrorConfigurations(const QList<OAIApplicationGatewayCustomError> &custom_error_configurations) {
    m_custom_error_configurations = custom_error_configurations;
    m_custom_error_configurations_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_custom_error_configurations_Set() const{
    return m_custom_error_configurations_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_custom_error_configurations_Valid() const{
    return m_custom_error_configurations_isValid;
}

bool OAIApplicationGatewayPropertiesFormat::isEnableFips() const {
    return m_enable_fips;
}
void OAIApplicationGatewayPropertiesFormat::setEnableFips(const bool &enable_fips) {
    m_enable_fips = enable_fips;
    m_enable_fips_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_enable_fips_Set() const{
    return m_enable_fips_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_enable_fips_Valid() const{
    return m_enable_fips_isValid;
}

bool OAIApplicationGatewayPropertiesFormat::isEnableHttp2() const {
    return m_enable_http2;
}
void OAIApplicationGatewayPropertiesFormat::setEnableHttp2(const bool &enable_http2) {
    m_enable_http2 = enable_http2;
    m_enable_http2_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_enable_http2_Set() const{
    return m_enable_http2_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_enable_http2_Valid() const{
    return m_enable_http2_isValid;
}

OAIApplicationGatewayPathRulePropertiesFormat_rewriteRuleSet OAIApplicationGatewayPropertiesFormat::getFirewallPolicy() const {
    return m_firewall_policy;
}
void OAIApplicationGatewayPropertiesFormat::setFirewallPolicy(const OAIApplicationGatewayPathRulePropertiesFormat_rewriteRuleSet &firewall_policy) {
    m_firewall_policy = firewall_policy;
    m_firewall_policy_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_firewall_policy_Set() const{
    return m_firewall_policy_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_firewall_policy_Valid() const{
    return m_firewall_policy_isValid;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getFrontendIpConfigurations() const {
    return m_frontend_ip_configurations;
}
void OAIApplicationGatewayPropertiesFormat::setFrontendIpConfigurations(const QList<OAIObject> &frontend_ip_configurations) {
    m_frontend_ip_configurations = frontend_ip_configurations;
    m_frontend_ip_configurations_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_frontend_ip_configurations_Set() const{
    return m_frontend_ip_configurations_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_frontend_ip_configurations_Valid() const{
    return m_frontend_ip_configurations_isValid;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getFrontendPorts() const {
    return m_frontend_ports;
}
void OAIApplicationGatewayPropertiesFormat::setFrontendPorts(const QList<OAIObject> &frontend_ports) {
    m_frontend_ports = frontend_ports;
    m_frontend_ports_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_frontend_ports_Set() const{
    return m_frontend_ports_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_frontend_ports_Valid() const{
    return m_frontend_ports_isValid;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getGatewayIpConfigurations() const {
    return m_gateway_ip_configurations;
}
void OAIApplicationGatewayPropertiesFormat::setGatewayIpConfigurations(const QList<OAIObject> &gateway_ip_configurations) {
    m_gateway_ip_configurations = gateway_ip_configurations;
    m_gateway_ip_configurations_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_gateway_ip_configurations_Set() const{
    return m_gateway_ip_configurations_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_gateway_ip_configurations_Valid() const{
    return m_gateway_ip_configurations_isValid;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getHttpListeners() const {
    return m_http_listeners;
}
void OAIApplicationGatewayPropertiesFormat::setHttpListeners(const QList<OAIObject> &http_listeners) {
    m_http_listeners = http_listeners;
    m_http_listeners_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_http_listeners_Set() const{
    return m_http_listeners_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_http_listeners_Valid() const{
    return m_http_listeners_isValid;
}

QString OAIApplicationGatewayPropertiesFormat::getOperationalState() const {
    return m_operational_state;
}
void OAIApplicationGatewayPropertiesFormat::setOperationalState(const QString &operational_state) {
    m_operational_state = operational_state;
    m_operational_state_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_operational_state_Set() const{
    return m_operational_state_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_operational_state_Valid() const{
    return m_operational_state_isValid;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getProbes() const {
    return m_probes;
}
void OAIApplicationGatewayPropertiesFormat::setProbes(const QList<OAIObject> &probes) {
    m_probes = probes;
    m_probes_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_probes_Set() const{
    return m_probes_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_probes_Valid() const{
    return m_probes_isValid;
}

QString OAIApplicationGatewayPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationGatewayPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getRedirectConfigurations() const {
    return m_redirect_configurations;
}
void OAIApplicationGatewayPropertiesFormat::setRedirectConfigurations(const QList<OAIObject> &redirect_configurations) {
    m_redirect_configurations = redirect_configurations;
    m_redirect_configurations_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_redirect_configurations_Set() const{
    return m_redirect_configurations_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_redirect_configurations_Valid() const{
    return m_redirect_configurations_isValid;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getRequestRoutingRules() const {
    return m_request_routing_rules;
}
void OAIApplicationGatewayPropertiesFormat::setRequestRoutingRules(const QList<OAIObject> &request_routing_rules) {
    m_request_routing_rules = request_routing_rules;
    m_request_routing_rules_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_request_routing_rules_Set() const{
    return m_request_routing_rules_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_request_routing_rules_Valid() const{
    return m_request_routing_rules_isValid;
}

QString OAIApplicationGatewayPropertiesFormat::getResourceGuid() const {
    return m_resource_guid;
}
void OAIApplicationGatewayPropertiesFormat::setResourceGuid(const QString &resource_guid) {
    m_resource_guid = resource_guid;
    m_resource_guid_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_resource_guid_Set() const{
    return m_resource_guid_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_resource_guid_Valid() const{
    return m_resource_guid_isValid;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getRewriteRuleSets() const {
    return m_rewrite_rule_sets;
}
void OAIApplicationGatewayPropertiesFormat::setRewriteRuleSets(const QList<OAIObject> &rewrite_rule_sets) {
    m_rewrite_rule_sets = rewrite_rule_sets;
    m_rewrite_rule_sets_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_rewrite_rule_sets_Set() const{
    return m_rewrite_rule_sets_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_rewrite_rule_sets_Valid() const{
    return m_rewrite_rule_sets_isValid;
}

OAIApplicationGatewaySku OAIApplicationGatewayPropertiesFormat::getSku() const {
    return m_sku;
}
void OAIApplicationGatewayPropertiesFormat::setSku(const OAIApplicationGatewaySku &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_sku_Valid() const{
    return m_sku_isValid;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getSslCertificates() const {
    return m_ssl_certificates;
}
void OAIApplicationGatewayPropertiesFormat::setSslCertificates(const QList<OAIObject> &ssl_certificates) {
    m_ssl_certificates = ssl_certificates;
    m_ssl_certificates_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_ssl_certificates_Set() const{
    return m_ssl_certificates_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_ssl_certificates_Valid() const{
    return m_ssl_certificates_isValid;
}

OAIApplicationGatewaySslPolicy OAIApplicationGatewayPropertiesFormat::getSslPolicy() const {
    return m_ssl_policy;
}
void OAIApplicationGatewayPropertiesFormat::setSslPolicy(const OAIApplicationGatewaySslPolicy &ssl_policy) {
    m_ssl_policy = ssl_policy;
    m_ssl_policy_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_ssl_policy_Set() const{
    return m_ssl_policy_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_ssl_policy_Valid() const{
    return m_ssl_policy_isValid;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getTrustedRootCertificates() const {
    return m_trusted_root_certificates;
}
void OAIApplicationGatewayPropertiesFormat::setTrustedRootCertificates(const QList<OAIObject> &trusted_root_certificates) {
    m_trusted_root_certificates = trusted_root_certificates;
    m_trusted_root_certificates_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_trusted_root_certificates_Set() const{
    return m_trusted_root_certificates_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_trusted_root_certificates_Valid() const{
    return m_trusted_root_certificates_isValid;
}

QList<OAIObject> OAIApplicationGatewayPropertiesFormat::getUrlPathMaps() const {
    return m_url_path_maps;
}
void OAIApplicationGatewayPropertiesFormat::setUrlPathMaps(const QList<OAIObject> &url_path_maps) {
    m_url_path_maps = url_path_maps;
    m_url_path_maps_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_url_path_maps_Set() const{
    return m_url_path_maps_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_url_path_maps_Valid() const{
    return m_url_path_maps_isValid;
}

OAIApplicationGatewayWebApplicationFirewallConfiguration OAIApplicationGatewayPropertiesFormat::getWebApplicationFirewallConfiguration() const {
    return m_web_application_firewall_configuration;
}
void OAIApplicationGatewayPropertiesFormat::setWebApplicationFirewallConfiguration(const OAIApplicationGatewayWebApplicationFirewallConfiguration &web_application_firewall_configuration) {
    m_web_application_firewall_configuration = web_application_firewall_configuration;
    m_web_application_firewall_configuration_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_web_application_firewall_configuration_Set() const{
    return m_web_application_firewall_configuration_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_web_application_firewall_configuration_Valid() const{
    return m_web_application_firewall_configuration_isValid;
}

bool OAIApplicationGatewayPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_autoscale_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_address_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_http_settings_collection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_error_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_fips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_http2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firewall_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_listeners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operational_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_routing_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rewrite_rule_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_root_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_path_maps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_application_firewall_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
