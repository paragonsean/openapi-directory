/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Items;
import org.openapitools.client.model.PublicIPAddress;
import org.openapitools.client.model.Subnet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of IP configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:18.972106-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties {
  public static final String SERIALIZED_NAME_LOAD_BALANCER_BACKEND_ADDRESS_POOLS = "loadBalancerBackendAddressPools";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_BACKEND_ADDRESS_POOLS)
  private List<Items> loadBalancerBackendAddressPools = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOAD_BALANCER_INBOUND_NAT_RULES = "loadBalancerInboundNatRules";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_INBOUND_NAT_RULES)
  private List<Items> loadBalancerInboundNatRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private Boolean primary;

  public static final String SERIALIZED_NAME_PRIVATE_I_P_ADDRESS = "privateIPAddress";
  @SerializedName(SERIALIZED_NAME_PRIVATE_I_P_ADDRESS)
  private String privateIPAddress;

  /**
   * Defines how a private IP address is assigned. Possible values are: &#39;Static&#39; and &#39;Dynamic&#39;.
   */
  @JsonAdapter(PrivateIPAllocationMethodEnum.Adapter.class)
  public enum PrivateIPAllocationMethodEnum {
    STATIC("Static"),
    
    DYNAMIC("Dynamic");

    private String value;

    PrivateIPAllocationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivateIPAllocationMethodEnum fromValue(String value) {
      for (PrivateIPAllocationMethodEnum b : PrivateIPAllocationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivateIPAllocationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivateIPAllocationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivateIPAllocationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivateIPAllocationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrivateIPAllocationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIVATE_I_P_ALLOCATION_METHOD = "privateIPAllocationMethod";
  @SerializedName(SERIALIZED_NAME_PRIVATE_I_P_ALLOCATION_METHOD)
  private PrivateIPAllocationMethodEnum privateIPAllocationMethod;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_PUBLIC_I_P_ADDRESS = "publicIPAddress";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P_ADDRESS)
  private PublicIPAddress publicIPAddress = null;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private Subnet subnet = null;

  public ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties() {
  }

  public ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties loadBalancerBackendAddressPools(List<Items> loadBalancerBackendAddressPools) {
    this.loadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
    return this;
  }

  public ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties addLoadBalancerBackendAddressPoolsItem(Items loadBalancerBackendAddressPoolsItem) {
    if (this.loadBalancerBackendAddressPools == null) {
      this.loadBalancerBackendAddressPools = new ArrayList<>();
    }
    this.loadBalancerBackendAddressPools.add(loadBalancerBackendAddressPoolsItem);
    return this;
  }

  /**
   * The reference of LoadBalancerBackendAddressPool resource.
   * @return loadBalancerBackendAddressPools
   */
  @javax.annotation.Nullable
  public List<Items> getLoadBalancerBackendAddressPools() {
    return loadBalancerBackendAddressPools;
  }

  public void setLoadBalancerBackendAddressPools(List<Items> loadBalancerBackendAddressPools) {
    this.loadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
  }


  public ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties loadBalancerInboundNatRules(List<Items> loadBalancerInboundNatRules) {
    this.loadBalancerInboundNatRules = loadBalancerInboundNatRules;
    return this;
  }

  public ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties addLoadBalancerInboundNatRulesItem(Items loadBalancerInboundNatRulesItem) {
    if (this.loadBalancerInboundNatRules == null) {
      this.loadBalancerInboundNatRules = new ArrayList<>();
    }
    this.loadBalancerInboundNatRules.add(loadBalancerInboundNatRulesItem);
    return this;
  }

  /**
   * A list of references of LoadBalancerInboundNatRules.
   * @return loadBalancerInboundNatRules
   */
  @javax.annotation.Nullable
  public List<Items> getLoadBalancerInboundNatRules() {
    return loadBalancerInboundNatRules;
  }

  public void setLoadBalancerInboundNatRules(List<Items> loadBalancerInboundNatRules) {
    this.loadBalancerInboundNatRules = loadBalancerInboundNatRules;
  }


  public ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties primary(Boolean primary) {
    this.primary = primary;
    return this;
  }

  /**
   * Gets whether this is a primary customer address on the network interface.
   * @return primary
   */
  @javax.annotation.Nullable
  public Boolean getPrimary() {
    return primary;
  }

  public void setPrimary(Boolean primary) {
    this.primary = primary;
  }


  public ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties privateIPAddress(String privateIPAddress) {
    this.privateIPAddress = privateIPAddress;
    return this;
  }

  /**
   * Get privateIPAddress
   * @return privateIPAddress
   */
  @javax.annotation.Nullable
  public String getPrivateIPAddress() {
    return privateIPAddress;
  }

  public void setPrivateIPAddress(String privateIPAddress) {
    this.privateIPAddress = privateIPAddress;
  }


  public ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties privateIPAllocationMethod(PrivateIPAllocationMethodEnum privateIPAllocationMethod) {
    this.privateIPAllocationMethod = privateIPAllocationMethod;
    return this;
  }

  /**
   * Defines how a private IP address is assigned. Possible values are: &#39;Static&#39; and &#39;Dynamic&#39;.
   * @return privateIPAllocationMethod
   */
  @javax.annotation.Nullable
  public PrivateIPAllocationMethodEnum getPrivateIPAllocationMethod() {
    return privateIPAllocationMethod;
  }

  public void setPrivateIPAllocationMethod(PrivateIPAllocationMethodEnum privateIPAllocationMethod) {
    this.privateIPAllocationMethod = privateIPAllocationMethod;
  }


  public ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties publicIPAddress(PublicIPAddress publicIPAddress) {
    this.publicIPAddress = publicIPAddress;
    return this;
  }

  /**
   * Get publicIPAddress
   * @return publicIPAddress
   */
  @javax.annotation.Nullable
  public PublicIPAddress getPublicIPAddress() {
    return publicIPAddress;
  }

  public void setPublicIPAddress(PublicIPAddress publicIPAddress) {
    this.publicIPAddress = publicIPAddress;
  }


  public ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties subnet(Subnet subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * Get subnet
   * @return subnet
   */
  @javax.annotation.Nullable
  public Subnet getSubnet() {
    return subnet;
  }

  public void setSubnet(Subnet subnet) {
    this.subnet = subnet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties applicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties = (ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties) o;
    return Objects.equals(this.loadBalancerBackendAddressPools, applicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.loadBalancerBackendAddressPools) &&
        Objects.equals(this.loadBalancerInboundNatRules, applicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.loadBalancerInboundNatRules) &&
        Objects.equals(this.primary, applicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.primary) &&
        Objects.equals(this.privateIPAddress, applicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.privateIPAddress) &&
        Objects.equals(this.privateIPAllocationMethod, applicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.privateIPAllocationMethod) &&
        Objects.equals(this.provisioningState, applicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.provisioningState) &&
        Objects.equals(this.publicIPAddress, applicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.publicIPAddress) &&
        Objects.equals(this.subnet, applicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.subnet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loadBalancerBackendAddressPools, loadBalancerInboundNatRules, primary, privateIPAddress, privateIPAllocationMethod, provisioningState, publicIPAddress, subnet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties {\n");
    sb.append("    loadBalancerBackendAddressPools: ").append(toIndentedString(loadBalancerBackendAddressPools)).append("\n");
    sb.append("    loadBalancerInboundNatRules: ").append(toIndentedString(loadBalancerInboundNatRules)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    privateIPAddress: ").append(toIndentedString(privateIPAddress)).append("\n");
    sb.append("    privateIPAllocationMethod: ").append(toIndentedString(privateIPAllocationMethod)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publicIPAddress: ").append(toIndentedString(publicIPAddress)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("loadBalancerBackendAddressPools");
    openapiFields.add("loadBalancerInboundNatRules");
    openapiFields.add("primary");
    openapiFields.add("privateIPAddress");
    openapiFields.add("privateIPAllocationMethod");
    openapiFields.add("provisioningState");
    openapiFields.add("publicIPAddress");
    openapiFields.add("subnet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties is not found in the empty JSON string", ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("loadBalancerBackendAddressPools") != null && !jsonObj.get("loadBalancerBackendAddressPools").isJsonNull() && !jsonObj.get("loadBalancerBackendAddressPools").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadBalancerBackendAddressPools` to be an array in the JSON string but got `%s`", jsonObj.get("loadBalancerBackendAddressPools").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("loadBalancerInboundNatRules") != null && !jsonObj.get("loadBalancerInboundNatRules").isJsonNull() && !jsonObj.get("loadBalancerInboundNatRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadBalancerInboundNatRules` to be an array in the JSON string but got `%s`", jsonObj.get("loadBalancerInboundNatRules").toString()));
      }
      if ((jsonObj.get("privateIPAddress") != null && !jsonObj.get("privateIPAddress").isJsonNull()) && !jsonObj.get("privateIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateIPAddress").toString()));
      }
      if ((jsonObj.get("privateIPAllocationMethod") != null && !jsonObj.get("privateIPAllocationMethod").isJsonNull()) && !jsonObj.get("privateIPAllocationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateIPAllocationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateIPAllocationMethod").toString()));
      }
      // validate the optional field `privateIPAllocationMethod`
      if (jsonObj.get("privateIPAllocationMethod") != null && !jsonObj.get("privateIPAllocationMethod").isJsonNull()) {
        PrivateIPAllocationMethodEnum.validateJsonElement(jsonObj.get("privateIPAllocationMethod"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties
   */
  public static ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties.class);
  }

  /**
   * Convert an instance of ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesLoadBalancerBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

