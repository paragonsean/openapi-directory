/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties() {
    this->initializeModel();
}

OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::~OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties() {}

void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::initializeModel() {

    m_inbound_nat_pools_isSet = false;
    m_inbound_nat_pools_isValid = false;

    m_inbound_nat_rules_isSet = false;
    m_inbound_nat_rules_isValid = false;

    m_load_balancing_rules_isSet = false;
    m_load_balancing_rules_isValid = false;

    m_outbound_rules_isSet = false;
    m_outbound_rules_isValid = false;

    m_private_ip_address_isSet = false;
    m_private_ip_address_isValid = false;

    m_private_ip_address_version_isSet = false;
    m_private_ip_address_version_isValid = false;

    m_private_ip_allocation_method_isSet = false;
    m_private_ip_allocation_method_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_ip_address_isSet = false;
    m_public_ip_address_isValid = false;

    m_public_ip_prefix_isSet = false;
    m_public_ip_prefix_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;
}

void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::fromJsonObject(QJsonObject json) {

    m_inbound_nat_pools_isValid = ::OpenAPI::fromJsonValue(m_inbound_nat_pools, json[QString("inboundNatPools")]);
    m_inbound_nat_pools_isSet = !json[QString("inboundNatPools")].isNull() && m_inbound_nat_pools_isValid;

    m_inbound_nat_rules_isValid = ::OpenAPI::fromJsonValue(m_inbound_nat_rules, json[QString("inboundNatRules")]);
    m_inbound_nat_rules_isSet = !json[QString("inboundNatRules")].isNull() && m_inbound_nat_rules_isValid;

    m_load_balancing_rules_isValid = ::OpenAPI::fromJsonValue(m_load_balancing_rules, json[QString("loadBalancingRules")]);
    m_load_balancing_rules_isSet = !json[QString("loadBalancingRules")].isNull() && m_load_balancing_rules_isValid;

    m_outbound_rules_isValid = ::OpenAPI::fromJsonValue(m_outbound_rules, json[QString("outboundRules")]);
    m_outbound_rules_isSet = !json[QString("outboundRules")].isNull() && m_outbound_rules_isValid;

    m_private_ip_address_isValid = ::OpenAPI::fromJsonValue(m_private_ip_address, json[QString("privateIPAddress")]);
    m_private_ip_address_isSet = !json[QString("privateIPAddress")].isNull() && m_private_ip_address_isValid;

    m_private_ip_address_version_isValid = ::OpenAPI::fromJsonValue(m_private_ip_address_version, json[QString("privateIPAddressVersion")]);
    m_private_ip_address_version_isSet = !json[QString("privateIPAddressVersion")].isNull() && m_private_ip_address_version_isValid;

    m_private_ip_allocation_method_isValid = ::OpenAPI::fromJsonValue(m_private_ip_allocation_method, json[QString("privateIPAllocationMethod")]);
    m_private_ip_allocation_method_isSet = !json[QString("privateIPAllocationMethod")].isNull() && m_private_ip_allocation_method_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_public_ip_address, json[QString("publicIPAddress")]);
    m_public_ip_address_isSet = !json[QString("publicIPAddress")].isNull() && m_public_ip_address_isValid;

    m_public_ip_prefix_isValid = ::OpenAPI::fromJsonValue(m_public_ip_prefix, json[QString("publicIPPrefix")]);
    m_public_ip_prefix_isSet = !json[QString("publicIPPrefix")].isNull() && m_public_ip_prefix_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;
}

QString OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_inbound_nat_pools.size() > 0) {
        obj.insert(QString("inboundNatPools"), ::OpenAPI::toJsonValue(m_inbound_nat_pools));
    }
    if (m_inbound_nat_rules.size() > 0) {
        obj.insert(QString("inboundNatRules"), ::OpenAPI::toJsonValue(m_inbound_nat_rules));
    }
    if (m_load_balancing_rules.size() > 0) {
        obj.insert(QString("loadBalancingRules"), ::OpenAPI::toJsonValue(m_load_balancing_rules));
    }
    if (m_outbound_rules.size() > 0) {
        obj.insert(QString("outboundRules"), ::OpenAPI::toJsonValue(m_outbound_rules));
    }
    if (m_private_ip_address_isSet) {
        obj.insert(QString("privateIPAddress"), ::OpenAPI::toJsonValue(m_private_ip_address));
    }
    if (m_private_ip_address_version.isSet()) {
        obj.insert(QString("privateIPAddressVersion"), ::OpenAPI::toJsonValue(m_private_ip_address_version));
    }
    if (m_private_ip_allocation_method.isSet()) {
        obj.insert(QString("privateIPAllocationMethod"), ::OpenAPI::toJsonValue(m_private_ip_allocation_method));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_ip_address.isSet()) {
        obj.insert(QString("publicIPAddress"), ::OpenAPI::toJsonValue(m_public_ip_address));
    }
    if (m_public_ip_prefix.isSet()) {
        obj.insert(QString("publicIPPrefix"), ::OpenAPI::toJsonValue(m_public_ip_prefix));
    }
    if (m_subnet.isSet()) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    return obj;
}

QList<OAI0> OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::getInboundNatPools() const {
    return m_inbound_nat_pools;
}
void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::setInboundNatPools(const QList<OAI0> &inbound_nat_pools) {
    m_inbound_nat_pools = inbound_nat_pools;
    m_inbound_nat_pools_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_inbound_nat_pools_Set() const{
    return m_inbound_nat_pools_isSet;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_inbound_nat_pools_Valid() const{
    return m_inbound_nat_pools_isValid;
}

QList<OAI0> OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::getInboundNatRules() const {
    return m_inbound_nat_rules;
}
void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::setInboundNatRules(const QList<OAI0> &inbound_nat_rules) {
    m_inbound_nat_rules = inbound_nat_rules;
    m_inbound_nat_rules_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_inbound_nat_rules_Set() const{
    return m_inbound_nat_rules_isSet;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_inbound_nat_rules_Valid() const{
    return m_inbound_nat_rules_isValid;
}

QList<OAI0> OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::getLoadBalancingRules() const {
    return m_load_balancing_rules;
}
void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::setLoadBalancingRules(const QList<OAI0> &load_balancing_rules) {
    m_load_balancing_rules = load_balancing_rules;
    m_load_balancing_rules_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_load_balancing_rules_Set() const{
    return m_load_balancing_rules_isSet;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_load_balancing_rules_Valid() const{
    return m_load_balancing_rules_isValid;
}

QList<OAI0> OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::getOutboundRules() const {
    return m_outbound_rules;
}
void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::setOutboundRules(const QList<OAI0> &outbound_rules) {
    m_outbound_rules = outbound_rules;
    m_outbound_rules_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_outbound_rules_Set() const{
    return m_outbound_rules_isSet;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_outbound_rules_Valid() const{
    return m_outbound_rules_isValid;
}

QString OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::getPrivateIpAddress() const {
    return m_private_ip_address;
}
void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::setPrivateIpAddress(const QString &private_ip_address) {
    m_private_ip_address = private_ip_address;
    m_private_ip_address_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_private_ip_address_Set() const{
    return m_private_ip_address_isSet;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_private_ip_address_Valid() const{
    return m_private_ip_address_isValid;
}

OAIPrivateIPAddressVersion OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::getPrivateIpAddressVersion() const {
    return m_private_ip_address_version;
}
void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::setPrivateIpAddressVersion(const OAIPrivateIPAddressVersion &private_ip_address_version) {
    m_private_ip_address_version = private_ip_address_version;
    m_private_ip_address_version_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_private_ip_address_version_Set() const{
    return m_private_ip_address_version_isSet;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_private_ip_address_version_Valid() const{
    return m_private_ip_address_version_isValid;
}

OAIPrivateIPAllocationMethod OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::getPrivateIpAllocationMethod() const {
    return m_private_ip_allocation_method;
}
void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::setPrivateIpAllocationMethod(const OAIPrivateIPAllocationMethod &private_ip_allocation_method) {
    m_private_ip_allocation_method = private_ip_allocation_method;
    m_private_ip_allocation_method_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_private_ip_allocation_method_Set() const{
    return m_private_ip_allocation_method_isSet;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_private_ip_allocation_method_Valid() const{
    return m_private_ip_allocation_method_isValid;
}

QString OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIPublicIPAddress OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::getPublicIpAddress() const {
    return m_public_ip_address;
}
void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::setPublicIpAddress(const OAIPublicIPAddress &public_ip_address) {
    m_public_ip_address = public_ip_address;
    m_public_ip_address_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_public_ip_address_Set() const{
    return m_public_ip_address_isSet;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_public_ip_address_Valid() const{
    return m_public_ip_address_isValid;
}

OAI0 OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::getPublicIpPrefix() const {
    return m_public_ip_prefix;
}
void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::setPublicIpPrefix(const OAI0 &public_ip_prefix) {
    m_public_ip_prefix = public_ip_prefix;
    m_public_ip_prefix_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_public_ip_prefix_Set() const{
    return m_public_ip_prefix_isSet;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_public_ip_prefix_Valid() const{
    return m_public_ip_prefix_isValid;
}

OAISubnet OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::getSubnet() const {
    return m_subnet;
}
void OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::setSubnet(const OAISubnet &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::is_subnet_Valid() const{
    return m_subnet_isValid;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inbound_nat_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_nat_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancing_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_address_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_allocation_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_prefix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayBackendHealthServer_ipConfiguration_properties_virtualNetworkTaps_inner_properties_destinationLoadBalancerFrontEndIPConfiguration_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
