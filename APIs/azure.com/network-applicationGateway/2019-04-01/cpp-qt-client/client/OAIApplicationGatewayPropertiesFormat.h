/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApplicationGatewayPropertiesFormat.h
 *
 * Properties of the application gateway.
 */

#ifndef OAIApplicationGatewayPropertiesFormat_H
#define OAIApplicationGatewayPropertiesFormat_H

#include <QJsonObject>

#include "OAIApplicationGatewayAutoscaleConfiguration.h"
#include "OAIApplicationGatewayCustomError.h"
#include "OAIApplicationGatewayPathRulePropertiesFormat_rewriteRuleSet.h"
#include "OAIApplicationGatewaySku.h"
#include "OAIApplicationGatewaySslPolicy.h"
#include "OAIApplicationGatewayWebApplicationFirewallConfiguration.h"
#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApplicationGatewayAutoscaleConfiguration;
class OAIApplicationGatewayCustomError;
class OAIApplicationGatewayPathRulePropertiesFormat_rewriteRuleSet;
class OAIApplicationGatewaySku;
class OAIApplicationGatewaySslPolicy;
class OAIApplicationGatewayWebApplicationFirewallConfiguration;

class OAIApplicationGatewayPropertiesFormat : public OAIObject {
public:
    OAIApplicationGatewayPropertiesFormat();
    OAIApplicationGatewayPropertiesFormat(QString json);
    ~OAIApplicationGatewayPropertiesFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIObject> getAuthenticationCertificates() const;
    void setAuthenticationCertificates(const QList<OAIObject> &authentication_certificates);
    bool is_authentication_certificates_Set() const;
    bool is_authentication_certificates_Valid() const;

    OAIApplicationGatewayAutoscaleConfiguration getAutoscaleConfiguration() const;
    void setAutoscaleConfiguration(const OAIApplicationGatewayAutoscaleConfiguration &autoscale_configuration);
    bool is_autoscale_configuration_Set() const;
    bool is_autoscale_configuration_Valid() const;

    QList<OAIObject> getBackendAddressPools() const;
    void setBackendAddressPools(const QList<OAIObject> &backend_address_pools);
    bool is_backend_address_pools_Set() const;
    bool is_backend_address_pools_Valid() const;

    QList<OAIObject> getBackendHttpSettingsCollection() const;
    void setBackendHttpSettingsCollection(const QList<OAIObject> &backend_http_settings_collection);
    bool is_backend_http_settings_collection_Set() const;
    bool is_backend_http_settings_collection_Valid() const;

    QList<OAIApplicationGatewayCustomError> getCustomErrorConfigurations() const;
    void setCustomErrorConfigurations(const QList<OAIApplicationGatewayCustomError> &custom_error_configurations);
    bool is_custom_error_configurations_Set() const;
    bool is_custom_error_configurations_Valid() const;

    bool isEnableFips() const;
    void setEnableFips(const bool &enable_fips);
    bool is_enable_fips_Set() const;
    bool is_enable_fips_Valid() const;

    bool isEnableHttp2() const;
    void setEnableHttp2(const bool &enable_http2);
    bool is_enable_http2_Set() const;
    bool is_enable_http2_Valid() const;

    OAIApplicationGatewayPathRulePropertiesFormat_rewriteRuleSet getFirewallPolicy() const;
    void setFirewallPolicy(const OAIApplicationGatewayPathRulePropertiesFormat_rewriteRuleSet &firewall_policy);
    bool is_firewall_policy_Set() const;
    bool is_firewall_policy_Valid() const;

    QList<OAIObject> getFrontendIpConfigurations() const;
    void setFrontendIpConfigurations(const QList<OAIObject> &frontend_ip_configurations);
    bool is_frontend_ip_configurations_Set() const;
    bool is_frontend_ip_configurations_Valid() const;

    QList<OAIObject> getFrontendPorts() const;
    void setFrontendPorts(const QList<OAIObject> &frontend_ports);
    bool is_frontend_ports_Set() const;
    bool is_frontend_ports_Valid() const;

    QList<OAIObject> getGatewayIpConfigurations() const;
    void setGatewayIpConfigurations(const QList<OAIObject> &gateway_ip_configurations);
    bool is_gateway_ip_configurations_Set() const;
    bool is_gateway_ip_configurations_Valid() const;

    QList<OAIObject> getHttpListeners() const;
    void setHttpListeners(const QList<OAIObject> &http_listeners);
    bool is_http_listeners_Set() const;
    bool is_http_listeners_Valid() const;

    QString getOperationalState() const;
    void setOperationalState(const QString &operational_state);
    bool is_operational_state_Set() const;
    bool is_operational_state_Valid() const;

    QList<OAIObject> getProbes() const;
    void setProbes(const QList<OAIObject> &probes);
    bool is_probes_Set() const;
    bool is_probes_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QList<OAIObject> getRedirectConfigurations() const;
    void setRedirectConfigurations(const QList<OAIObject> &redirect_configurations);
    bool is_redirect_configurations_Set() const;
    bool is_redirect_configurations_Valid() const;

    QList<OAIObject> getRequestRoutingRules() const;
    void setRequestRoutingRules(const QList<OAIObject> &request_routing_rules);
    bool is_request_routing_rules_Set() const;
    bool is_request_routing_rules_Valid() const;

    QString getResourceGuid() const;
    void setResourceGuid(const QString &resource_guid);
    bool is_resource_guid_Set() const;
    bool is_resource_guid_Valid() const;

    QList<OAIObject> getRewriteRuleSets() const;
    void setRewriteRuleSets(const QList<OAIObject> &rewrite_rule_sets);
    bool is_rewrite_rule_sets_Set() const;
    bool is_rewrite_rule_sets_Valid() const;

    OAIApplicationGatewaySku getSku() const;
    void setSku(const OAIApplicationGatewaySku &sku);
    bool is_sku_Set() const;
    bool is_sku_Valid() const;

    QList<OAIObject> getSslCertificates() const;
    void setSslCertificates(const QList<OAIObject> &ssl_certificates);
    bool is_ssl_certificates_Set() const;
    bool is_ssl_certificates_Valid() const;

    OAIApplicationGatewaySslPolicy getSslPolicy() const;
    void setSslPolicy(const OAIApplicationGatewaySslPolicy &ssl_policy);
    bool is_ssl_policy_Set() const;
    bool is_ssl_policy_Valid() const;

    QList<OAIObject> getTrustedRootCertificates() const;
    void setTrustedRootCertificates(const QList<OAIObject> &trusted_root_certificates);
    bool is_trusted_root_certificates_Set() const;
    bool is_trusted_root_certificates_Valid() const;

    QList<OAIObject> getUrlPathMaps() const;
    void setUrlPathMaps(const QList<OAIObject> &url_path_maps);
    bool is_url_path_maps_Set() const;
    bool is_url_path_maps_Valid() const;

    OAIApplicationGatewayWebApplicationFirewallConfiguration getWebApplicationFirewallConfiguration() const;
    void setWebApplicationFirewallConfiguration(const OAIApplicationGatewayWebApplicationFirewallConfiguration &web_application_firewall_configuration);
    bool is_web_application_firewall_configuration_Set() const;
    bool is_web_application_firewall_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIObject> m_authentication_certificates;
    bool m_authentication_certificates_isSet;
    bool m_authentication_certificates_isValid;

    OAIApplicationGatewayAutoscaleConfiguration m_autoscale_configuration;
    bool m_autoscale_configuration_isSet;
    bool m_autoscale_configuration_isValid;

    QList<OAIObject> m_backend_address_pools;
    bool m_backend_address_pools_isSet;
    bool m_backend_address_pools_isValid;

    QList<OAIObject> m_backend_http_settings_collection;
    bool m_backend_http_settings_collection_isSet;
    bool m_backend_http_settings_collection_isValid;

    QList<OAIApplicationGatewayCustomError> m_custom_error_configurations;
    bool m_custom_error_configurations_isSet;
    bool m_custom_error_configurations_isValid;

    bool m_enable_fips;
    bool m_enable_fips_isSet;
    bool m_enable_fips_isValid;

    bool m_enable_http2;
    bool m_enable_http2_isSet;
    bool m_enable_http2_isValid;

    OAIApplicationGatewayPathRulePropertiesFormat_rewriteRuleSet m_firewall_policy;
    bool m_firewall_policy_isSet;
    bool m_firewall_policy_isValid;

    QList<OAIObject> m_frontend_ip_configurations;
    bool m_frontend_ip_configurations_isSet;
    bool m_frontend_ip_configurations_isValid;

    QList<OAIObject> m_frontend_ports;
    bool m_frontend_ports_isSet;
    bool m_frontend_ports_isValid;

    QList<OAIObject> m_gateway_ip_configurations;
    bool m_gateway_ip_configurations_isSet;
    bool m_gateway_ip_configurations_isValid;

    QList<OAIObject> m_http_listeners;
    bool m_http_listeners_isSet;
    bool m_http_listeners_isValid;

    QString m_operational_state;
    bool m_operational_state_isSet;
    bool m_operational_state_isValid;

    QList<OAIObject> m_probes;
    bool m_probes_isSet;
    bool m_probes_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QList<OAIObject> m_redirect_configurations;
    bool m_redirect_configurations_isSet;
    bool m_redirect_configurations_isValid;

    QList<OAIObject> m_request_routing_rules;
    bool m_request_routing_rules_isSet;
    bool m_request_routing_rules_isValid;

    QString m_resource_guid;
    bool m_resource_guid_isSet;
    bool m_resource_guid_isValid;

    QList<OAIObject> m_rewrite_rule_sets;
    bool m_rewrite_rule_sets_isSet;
    bool m_rewrite_rule_sets_isValid;

    OAIApplicationGatewaySku m_sku;
    bool m_sku_isSet;
    bool m_sku_isValid;

    QList<OAIObject> m_ssl_certificates;
    bool m_ssl_certificates_isSet;
    bool m_ssl_certificates_isValid;

    OAIApplicationGatewaySslPolicy m_ssl_policy;
    bool m_ssl_policy_isSet;
    bool m_ssl_policy_isValid;

    QList<OAIObject> m_trusted_root_certificates;
    bool m_trusted_root_certificates_isSet;
    bool m_trusted_root_certificates_isValid;

    QList<OAIObject> m_url_path_maps;
    bool m_url_path_maps_isSet;
    bool m_url_path_maps_isValid;

    OAIApplicationGatewayWebApplicationFirewallConfiguration m_web_application_firewall_configuration;
    bool m_web_application_firewall_configuration_isSet;
    bool m_web_application_firewall_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApplicationGatewayPropertiesFormat)

#endif // OAIApplicationGatewayPropertiesFormat_H
