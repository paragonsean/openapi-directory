/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayRewriteRuleCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayRewriteRuleCondition::OAIApplicationGatewayRewriteRuleCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayRewriteRuleCondition::OAIApplicationGatewayRewriteRuleCondition() {
    this->initializeModel();
}

OAIApplicationGatewayRewriteRuleCondition::~OAIApplicationGatewayRewriteRuleCondition() {}

void OAIApplicationGatewayRewriteRuleCondition::initializeModel() {

    m_ignore_case_isSet = false;
    m_ignore_case_isValid = false;

    m_negate_isSet = false;
    m_negate_isValid = false;

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_variable_isSet = false;
    m_variable_isValid = false;
}

void OAIApplicationGatewayRewriteRuleCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayRewriteRuleCondition::fromJsonObject(QJsonObject json) {

    m_ignore_case_isValid = ::OpenAPI::fromJsonValue(m_ignore_case, json[QString("ignoreCase")]);
    m_ignore_case_isSet = !json[QString("ignoreCase")].isNull() && m_ignore_case_isValid;

    m_negate_isValid = ::OpenAPI::fromJsonValue(m_negate, json[QString("negate")]);
    m_negate_isSet = !json[QString("negate")].isNull() && m_negate_isValid;

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;

    m_variable_isValid = ::OpenAPI::fromJsonValue(m_variable, json[QString("variable")]);
    m_variable_isSet = !json[QString("variable")].isNull() && m_variable_isValid;
}

QString OAIApplicationGatewayRewriteRuleCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayRewriteRuleCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_case_isSet) {
        obj.insert(QString("ignoreCase"), ::OpenAPI::toJsonValue(m_ignore_case));
    }
    if (m_negate_isSet) {
        obj.insert(QString("negate"), ::OpenAPI::toJsonValue(m_negate));
    }
    if (m_pattern_isSet) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_variable_isSet) {
        obj.insert(QString("variable"), ::OpenAPI::toJsonValue(m_variable));
    }
    return obj;
}

bool OAIApplicationGatewayRewriteRuleCondition::isIgnoreCase() const {
    return m_ignore_case;
}
void OAIApplicationGatewayRewriteRuleCondition::setIgnoreCase(const bool &ignore_case) {
    m_ignore_case = ignore_case;
    m_ignore_case_isSet = true;
}

bool OAIApplicationGatewayRewriteRuleCondition::is_ignore_case_Set() const{
    return m_ignore_case_isSet;
}

bool OAIApplicationGatewayRewriteRuleCondition::is_ignore_case_Valid() const{
    return m_ignore_case_isValid;
}

bool OAIApplicationGatewayRewriteRuleCondition::isNegate() const {
    return m_negate;
}
void OAIApplicationGatewayRewriteRuleCondition::setNegate(const bool &negate) {
    m_negate = negate;
    m_negate_isSet = true;
}

bool OAIApplicationGatewayRewriteRuleCondition::is_negate_Set() const{
    return m_negate_isSet;
}

bool OAIApplicationGatewayRewriteRuleCondition::is_negate_Valid() const{
    return m_negate_isValid;
}

QString OAIApplicationGatewayRewriteRuleCondition::getPattern() const {
    return m_pattern;
}
void OAIApplicationGatewayRewriteRuleCondition::setPattern(const QString &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAIApplicationGatewayRewriteRuleCondition::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAIApplicationGatewayRewriteRuleCondition::is_pattern_Valid() const{
    return m_pattern_isValid;
}

QString OAIApplicationGatewayRewriteRuleCondition::getVariable() const {
    return m_variable;
}
void OAIApplicationGatewayRewriteRuleCondition::setVariable(const QString &variable) {
    m_variable = variable;
    m_variable_isSet = true;
}

bool OAIApplicationGatewayRewriteRuleCondition::is_variable_Set() const{
    return m_variable_isSet;
}

bool OAIApplicationGatewayRewriteRuleCondition::is_variable_Valid() const{
    return m_variable_isValid;
}

bool OAIApplicationGatewayRewriteRuleCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_case_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayRewriteRuleCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
