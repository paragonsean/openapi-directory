/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Model0;
import org.openapitools.client.model.PrivateIPAddressVersion;
import org.openapitools.client.model.PrivateIPAllocationMethod;
import org.openapitools.client.model.PublicIPAddress;
import org.openapitools.client.model.Subnet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of Frontend IP Configuration of the load balancer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:02.807717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties {
  public static final String SERIALIZED_NAME_INBOUND_NAT_POOLS = "inboundNatPools";
  @SerializedName(SERIALIZED_NAME_INBOUND_NAT_POOLS)
  private List<Model0> inboundNatPools = new ArrayList<>();

  public static final String SERIALIZED_NAME_INBOUND_NAT_RULES = "inboundNatRules";
  @SerializedName(SERIALIZED_NAME_INBOUND_NAT_RULES)
  private List<Model0> inboundNatRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOAD_BALANCING_RULES = "loadBalancingRules";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCING_RULES)
  private List<Model0> loadBalancingRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTBOUND_RULES = "outboundRules";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_RULES)
  private List<Model0> outboundRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIVATE_I_P_ADDRESS = "privateIPAddress";
  @SerializedName(SERIALIZED_NAME_PRIVATE_I_P_ADDRESS)
  private String privateIPAddress;

  public static final String SERIALIZED_NAME_PRIVATE_I_P_ADDRESS_VERSION = "privateIPAddressVersion";
  @SerializedName(SERIALIZED_NAME_PRIVATE_I_P_ADDRESS_VERSION)
  private PrivateIPAddressVersion privateIPAddressVersion = null;

  public static final String SERIALIZED_NAME_PRIVATE_I_P_ALLOCATION_METHOD = "privateIPAllocationMethod";
  @SerializedName(SERIALIZED_NAME_PRIVATE_I_P_ALLOCATION_METHOD)
  private PrivateIPAllocationMethod privateIPAllocationMethod = null;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_PUBLIC_I_P_ADDRESS = "publicIPAddress";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P_ADDRESS)
  private PublicIPAddress publicIPAddress = null;

  public static final String SERIALIZED_NAME_PUBLIC_I_P_PREFIX = "publicIPPrefix";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P_PREFIX)
  private Model0 publicIPPrefix = null;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private Subnet subnet = null;

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties() {
  }

  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties(
     List<Model0> inboundNatPools, 
     List<Model0> inboundNatRules, 
     List<Model0> loadBalancingRules, 
     List<Model0> outboundRules
  ) {
    this();
    this.inboundNatPools = inboundNatPools;
    this.inboundNatRules = inboundNatRules;
    this.loadBalancingRules = loadBalancingRules;
    this.outboundRules = outboundRules;
  }

  /**
   * Read only. Inbound pools URIs that use this frontend IP.
   * @return inboundNatPools
   */
  @javax.annotation.Nullable
  public List<Model0> getInboundNatPools() {
    return inboundNatPools;
  }



  /**
   * Read only. Inbound rules URIs that use this frontend IP.
   * @return inboundNatRules
   */
  @javax.annotation.Nullable
  public List<Model0> getInboundNatRules() {
    return inboundNatRules;
  }



  /**
   * Gets load balancing rules URIs that use this frontend IP.
   * @return loadBalancingRules
   */
  @javax.annotation.Nullable
  public List<Model0> getLoadBalancingRules() {
    return loadBalancingRules;
  }



  /**
   * Read only. Outbound rules URIs that use this frontend IP.
   * @return outboundRules
   */
  @javax.annotation.Nullable
  public List<Model0> getOutboundRules() {
    return outboundRules;
  }



  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties privateIPAddress(String privateIPAddress) {
    this.privateIPAddress = privateIPAddress;
    return this;
  }

  /**
   * The private IP address of the IP configuration.
   * @return privateIPAddress
   */
  @javax.annotation.Nullable
  public String getPrivateIPAddress() {
    return privateIPAddress;
  }

  public void setPrivateIPAddress(String privateIPAddress) {
    this.privateIPAddress = privateIPAddress;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties privateIPAddressVersion(PrivateIPAddressVersion privateIPAddressVersion) {
    this.privateIPAddressVersion = privateIPAddressVersion;
    return this;
  }

  /**
   * Get privateIPAddressVersion
   * @return privateIPAddressVersion
   */
  @javax.annotation.Nullable
  public PrivateIPAddressVersion getPrivateIPAddressVersion() {
    return privateIPAddressVersion;
  }

  public void setPrivateIPAddressVersion(PrivateIPAddressVersion privateIPAddressVersion) {
    this.privateIPAddressVersion = privateIPAddressVersion;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties privateIPAllocationMethod(PrivateIPAllocationMethod privateIPAllocationMethod) {
    this.privateIPAllocationMethod = privateIPAllocationMethod;
    return this;
  }

  /**
   * Get privateIPAllocationMethod
   * @return privateIPAllocationMethod
   */
  @javax.annotation.Nullable
  public PrivateIPAllocationMethod getPrivateIPAllocationMethod() {
    return privateIPAllocationMethod;
  }

  public void setPrivateIPAllocationMethod(PrivateIPAllocationMethod privateIPAllocationMethod) {
    this.privateIPAllocationMethod = privateIPAllocationMethod;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets the provisioning state of the public IP resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties publicIPAddress(PublicIPAddress publicIPAddress) {
    this.publicIPAddress = publicIPAddress;
    return this;
  }

  /**
   * Get publicIPAddress
   * @return publicIPAddress
   */
  @javax.annotation.Nullable
  public PublicIPAddress getPublicIPAddress() {
    return publicIPAddress;
  }

  public void setPublicIPAddress(PublicIPAddress publicIPAddress) {
    this.publicIPAddress = publicIPAddress;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties publicIPPrefix(Model0 publicIPPrefix) {
    this.publicIPPrefix = publicIPPrefix;
    return this;
  }

  /**
   * Get publicIPPrefix
   * @return publicIPPrefix
   */
  @javax.annotation.Nullable
  public Model0 getPublicIPPrefix() {
    return publicIPPrefix;
  }

  public void setPublicIPPrefix(Model0 publicIPPrefix) {
    this.publicIPPrefix = publicIPPrefix;
  }


  public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties subnet(Subnet subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * Get subnet
   * @return subnet
   */
  @javax.annotation.Nullable
  public Subnet getSubnet() {
    return subnet;
  }

  public void setSubnet(Subnet subnet) {
    this.subnet = subnet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties = (ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties) o;
    return Objects.equals(this.inboundNatPools, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.inboundNatPools) &&
        Objects.equals(this.inboundNatRules, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.inboundNatRules) &&
        Objects.equals(this.loadBalancingRules, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.loadBalancingRules) &&
        Objects.equals(this.outboundRules, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.outboundRules) &&
        Objects.equals(this.privateIPAddress, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.privateIPAddress) &&
        Objects.equals(this.privateIPAddressVersion, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.privateIPAddressVersion) &&
        Objects.equals(this.privateIPAllocationMethod, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.privateIPAllocationMethod) &&
        Objects.equals(this.provisioningState, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.provisioningState) &&
        Objects.equals(this.publicIPAddress, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.publicIPAddress) &&
        Objects.equals(this.publicIPPrefix, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.publicIPPrefix) &&
        Objects.equals(this.subnet, applicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.subnet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inboundNatPools, inboundNatRules, loadBalancingRules, outboundRules, privateIPAddress, privateIPAddressVersion, privateIPAllocationMethod, provisioningState, publicIPAddress, publicIPPrefix, subnet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties {\n");
    sb.append("    inboundNatPools: ").append(toIndentedString(inboundNatPools)).append("\n");
    sb.append("    inboundNatRules: ").append(toIndentedString(inboundNatRules)).append("\n");
    sb.append("    loadBalancingRules: ").append(toIndentedString(loadBalancingRules)).append("\n");
    sb.append("    outboundRules: ").append(toIndentedString(outboundRules)).append("\n");
    sb.append("    privateIPAddress: ").append(toIndentedString(privateIPAddress)).append("\n");
    sb.append("    privateIPAddressVersion: ").append(toIndentedString(privateIPAddressVersion)).append("\n");
    sb.append("    privateIPAllocationMethod: ").append(toIndentedString(privateIPAllocationMethod)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publicIPAddress: ").append(toIndentedString(publicIPAddress)).append("\n");
    sb.append("    publicIPPrefix: ").append(toIndentedString(publicIPPrefix)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inboundNatPools");
    openapiFields.add("inboundNatRules");
    openapiFields.add("loadBalancingRules");
    openapiFields.add("outboundRules");
    openapiFields.add("privateIPAddress");
    openapiFields.add("privateIPAddressVersion");
    openapiFields.add("privateIPAllocationMethod");
    openapiFields.add("provisioningState");
    openapiFields.add("publicIPAddress");
    openapiFields.add("publicIPPrefix");
    openapiFields.add("subnet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties is not found in the empty JSON string", ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("inboundNatPools") != null && !jsonObj.get("inboundNatPools").isJsonNull() && !jsonObj.get("inboundNatPools").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboundNatPools` to be an array in the JSON string but got `%s`", jsonObj.get("inboundNatPools").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inboundNatRules") != null && !jsonObj.get("inboundNatRules").isJsonNull() && !jsonObj.get("inboundNatRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboundNatRules` to be an array in the JSON string but got `%s`", jsonObj.get("inboundNatRules").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("loadBalancingRules") != null && !jsonObj.get("loadBalancingRules").isJsonNull() && !jsonObj.get("loadBalancingRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadBalancingRules` to be an array in the JSON string but got `%s`", jsonObj.get("loadBalancingRules").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outboundRules") != null && !jsonObj.get("outboundRules").isJsonNull() && !jsonObj.get("outboundRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outboundRules` to be an array in the JSON string but got `%s`", jsonObj.get("outboundRules").toString()));
      }
      if ((jsonObj.get("privateIPAddress") != null && !jsonObj.get("privateIPAddress").isJsonNull()) && !jsonObj.get("privateIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateIPAddress").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties
   */
  public static ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties.class);
  }

  /**
   * Convert an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

