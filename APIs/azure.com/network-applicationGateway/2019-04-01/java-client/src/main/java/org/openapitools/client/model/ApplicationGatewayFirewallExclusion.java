/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Allow to exclude some variable satisfy the condition for the WAF check.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:02.807717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayFirewallExclusion {
  public static final String SERIALIZED_NAME_MATCH_VARIABLE = "matchVariable";
  @SerializedName(SERIALIZED_NAME_MATCH_VARIABLE)
  private String matchVariable;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private String selector;

  public static final String SERIALIZED_NAME_SELECTOR_MATCH_OPERATOR = "selectorMatchOperator";
  @SerializedName(SERIALIZED_NAME_SELECTOR_MATCH_OPERATOR)
  private String selectorMatchOperator;

  public ApplicationGatewayFirewallExclusion() {
  }

  public ApplicationGatewayFirewallExclusion matchVariable(String matchVariable) {
    this.matchVariable = matchVariable;
    return this;
  }

  /**
   * The variable to be excluded.
   * @return matchVariable
   */
  @javax.annotation.Nonnull
  public String getMatchVariable() {
    return matchVariable;
  }

  public void setMatchVariable(String matchVariable) {
    this.matchVariable = matchVariable;
  }


  public ApplicationGatewayFirewallExclusion selector(String selector) {
    this.selector = selector;
    return this;
  }

  /**
   * When matchVariable is a collection, operator used to specify which elements in the collection this exclusion applies to.
   * @return selector
   */
  @javax.annotation.Nonnull
  public String getSelector() {
    return selector;
  }

  public void setSelector(String selector) {
    this.selector = selector;
  }


  public ApplicationGatewayFirewallExclusion selectorMatchOperator(String selectorMatchOperator) {
    this.selectorMatchOperator = selectorMatchOperator;
    return this;
  }

  /**
   * When matchVariable is a collection, operate on the selector to specify which elements in the collection this exclusion applies to.
   * @return selectorMatchOperator
   */
  @javax.annotation.Nonnull
  public String getSelectorMatchOperator() {
    return selectorMatchOperator;
  }

  public void setSelectorMatchOperator(String selectorMatchOperator) {
    this.selectorMatchOperator = selectorMatchOperator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayFirewallExclusion applicationGatewayFirewallExclusion = (ApplicationGatewayFirewallExclusion) o;
    return Objects.equals(this.matchVariable, applicationGatewayFirewallExclusion.matchVariable) &&
        Objects.equals(this.selector, applicationGatewayFirewallExclusion.selector) &&
        Objects.equals(this.selectorMatchOperator, applicationGatewayFirewallExclusion.selectorMatchOperator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchVariable, selector, selectorMatchOperator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayFirewallExclusion {\n");
    sb.append("    matchVariable: ").append(toIndentedString(matchVariable)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    selectorMatchOperator: ").append(toIndentedString(selectorMatchOperator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("matchVariable");
    openapiFields.add("selector");
    openapiFields.add("selectorMatchOperator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("matchVariable");
    openapiRequiredFields.add("selector");
    openapiRequiredFields.add("selectorMatchOperator");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayFirewallExclusion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayFirewallExclusion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayFirewallExclusion is not found in the empty JSON string", ApplicationGatewayFirewallExclusion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayFirewallExclusion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayFirewallExclusion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationGatewayFirewallExclusion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("matchVariable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchVariable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchVariable").toString()));
      }
      if (!jsonObj.get("selector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selector").toString()));
      }
      if (!jsonObj.get("selectorMatchOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectorMatchOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectorMatchOperator").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayFirewallExclusion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayFirewallExclusion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayFirewallExclusion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayFirewallExclusion.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayFirewallExclusion>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayFirewallExclusion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayFirewallExclusion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayFirewallExclusion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayFirewallExclusion
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayFirewallExclusion
   */
  public static ApplicationGatewayFirewallExclusion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayFirewallExclusion.class);
  }

  /**
   * Convert an instance of ApplicationGatewayFirewallExclusion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

