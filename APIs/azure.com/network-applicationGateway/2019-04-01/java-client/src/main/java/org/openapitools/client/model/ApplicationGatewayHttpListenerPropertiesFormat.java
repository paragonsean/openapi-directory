/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationGatewayCustomError;
import org.openapitools.client.model.ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet;
import org.openapitools.client.model.ApplicationGatewayProtocol;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of HTTP listener of an application gateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:02.807717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayHttpListenerPropertiesFormat {
  public static final String SERIALIZED_NAME_CUSTOM_ERROR_CONFIGURATIONS = "customErrorConfigurations";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ERROR_CONFIGURATIONS)
  private List<ApplicationGatewayCustomError> customErrorConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATION = "frontendIPConfiguration";
  @SerializedName(SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATION)
  private ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet frontendIPConfiguration;

  public static final String SERIALIZED_NAME_FRONTEND_PORT = "frontendPort";
  @SerializedName(SERIALIZED_NAME_FRONTEND_PORT)
  private ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet frontendPort;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ApplicationGatewayProtocol protocol;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_REQUIRE_SERVER_NAME_INDICATION = "requireServerNameIndication";
  @SerializedName(SERIALIZED_NAME_REQUIRE_SERVER_NAME_INDICATION)
  private Boolean requireServerNameIndication;

  public static final String SERIALIZED_NAME_SSL_CERTIFICATE = "sslCertificate";
  @SerializedName(SERIALIZED_NAME_SSL_CERTIFICATE)
  private ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet sslCertificate;

  public ApplicationGatewayHttpListenerPropertiesFormat() {
  }

  public ApplicationGatewayHttpListenerPropertiesFormat customErrorConfigurations(List<ApplicationGatewayCustomError> customErrorConfigurations) {
    this.customErrorConfigurations = customErrorConfigurations;
    return this;
  }

  public ApplicationGatewayHttpListenerPropertiesFormat addCustomErrorConfigurationsItem(ApplicationGatewayCustomError customErrorConfigurationsItem) {
    if (this.customErrorConfigurations == null) {
      this.customErrorConfigurations = new ArrayList<>();
    }
    this.customErrorConfigurations.add(customErrorConfigurationsItem);
    return this;
  }

  /**
   * Custom error configurations of the HTTP listener.
   * @return customErrorConfigurations
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayCustomError> getCustomErrorConfigurations() {
    return customErrorConfigurations;
  }

  public void setCustomErrorConfigurations(List<ApplicationGatewayCustomError> customErrorConfigurations) {
    this.customErrorConfigurations = customErrorConfigurations;
  }


  public ApplicationGatewayHttpListenerPropertiesFormat frontendIPConfiguration(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet frontendIPConfiguration) {
    this.frontendIPConfiguration = frontendIPConfiguration;
    return this;
  }

  /**
   * Get frontendIPConfiguration
   * @return frontendIPConfiguration
   */
  @javax.annotation.Nullable
  public ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet getFrontendIPConfiguration() {
    return frontendIPConfiguration;
  }

  public void setFrontendIPConfiguration(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet frontendIPConfiguration) {
    this.frontendIPConfiguration = frontendIPConfiguration;
  }


  public ApplicationGatewayHttpListenerPropertiesFormat frontendPort(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet frontendPort) {
    this.frontendPort = frontendPort;
    return this;
  }

  /**
   * Get frontendPort
   * @return frontendPort
   */
  @javax.annotation.Nullable
  public ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet getFrontendPort() {
    return frontendPort;
  }

  public void setFrontendPort(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet frontendPort) {
    this.frontendPort = frontendPort;
  }


  public ApplicationGatewayHttpListenerPropertiesFormat hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * Host name of HTTP listener.
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public ApplicationGatewayHttpListenerPropertiesFormat protocol(ApplicationGatewayProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public ApplicationGatewayProtocol getProtocol() {
    return protocol;
  }

  public void setProtocol(ApplicationGatewayProtocol protocol) {
    this.protocol = protocol;
  }


  public ApplicationGatewayHttpListenerPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Provisioning state of the HTTP listener resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ApplicationGatewayHttpListenerPropertiesFormat requireServerNameIndication(Boolean requireServerNameIndication) {
    this.requireServerNameIndication = requireServerNameIndication;
    return this;
  }

  /**
   * Applicable only if protocol is https. Enables SNI for multi-hosting.
   * @return requireServerNameIndication
   */
  @javax.annotation.Nullable
  public Boolean getRequireServerNameIndication() {
    return requireServerNameIndication;
  }

  public void setRequireServerNameIndication(Boolean requireServerNameIndication) {
    this.requireServerNameIndication = requireServerNameIndication;
  }


  public ApplicationGatewayHttpListenerPropertiesFormat sslCertificate(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet sslCertificate) {
    this.sslCertificate = sslCertificate;
    return this;
  }

  /**
   * Get sslCertificate
   * @return sslCertificate
   */
  @javax.annotation.Nullable
  public ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet getSslCertificate() {
    return sslCertificate;
  }

  public void setSslCertificate(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet sslCertificate) {
    this.sslCertificate = sslCertificate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayHttpListenerPropertiesFormat applicationGatewayHttpListenerPropertiesFormat = (ApplicationGatewayHttpListenerPropertiesFormat) o;
    return Objects.equals(this.customErrorConfigurations, applicationGatewayHttpListenerPropertiesFormat.customErrorConfigurations) &&
        Objects.equals(this.frontendIPConfiguration, applicationGatewayHttpListenerPropertiesFormat.frontendIPConfiguration) &&
        Objects.equals(this.frontendPort, applicationGatewayHttpListenerPropertiesFormat.frontendPort) &&
        Objects.equals(this.hostName, applicationGatewayHttpListenerPropertiesFormat.hostName) &&
        Objects.equals(this.protocol, applicationGatewayHttpListenerPropertiesFormat.protocol) &&
        Objects.equals(this.provisioningState, applicationGatewayHttpListenerPropertiesFormat.provisioningState) &&
        Objects.equals(this.requireServerNameIndication, applicationGatewayHttpListenerPropertiesFormat.requireServerNameIndication) &&
        Objects.equals(this.sslCertificate, applicationGatewayHttpListenerPropertiesFormat.sslCertificate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customErrorConfigurations, frontendIPConfiguration, frontendPort, hostName, protocol, provisioningState, requireServerNameIndication, sslCertificate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayHttpListenerPropertiesFormat {\n");
    sb.append("    customErrorConfigurations: ").append(toIndentedString(customErrorConfigurations)).append("\n");
    sb.append("    frontendIPConfiguration: ").append(toIndentedString(frontendIPConfiguration)).append("\n");
    sb.append("    frontendPort: ").append(toIndentedString(frontendPort)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    requireServerNameIndication: ").append(toIndentedString(requireServerNameIndication)).append("\n");
    sb.append("    sslCertificate: ").append(toIndentedString(sslCertificate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customErrorConfigurations");
    openapiFields.add("frontendIPConfiguration");
    openapiFields.add("frontendPort");
    openapiFields.add("hostName");
    openapiFields.add("protocol");
    openapiFields.add("provisioningState");
    openapiFields.add("requireServerNameIndication");
    openapiFields.add("sslCertificate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayHttpListenerPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayHttpListenerPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayHttpListenerPropertiesFormat is not found in the empty JSON string", ApplicationGatewayHttpListenerPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayHttpListenerPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayHttpListenerPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customErrorConfigurations") != null && !jsonObj.get("customErrorConfigurations").isJsonNull()) {
        JsonArray jsonArraycustomErrorConfigurations = jsonObj.getAsJsonArray("customErrorConfigurations");
        if (jsonArraycustomErrorConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customErrorConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customErrorConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("customErrorConfigurations").toString()));
          }

          // validate the optional field `customErrorConfigurations` (array)
          for (int i = 0; i < jsonArraycustomErrorConfigurations.size(); i++) {
            ApplicationGatewayCustomError.validateJsonElement(jsonArraycustomErrorConfigurations.get(i));
          };
        }
      }
      // validate the optional field `frontendIPConfiguration`
      if (jsonObj.get("frontendIPConfiguration") != null && !jsonObj.get("frontendIPConfiguration").isJsonNull()) {
        ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonObj.get("frontendIPConfiguration"));
      }
      // validate the optional field `frontendPort`
      if (jsonObj.get("frontendPort") != null && !jsonObj.get("frontendPort").isJsonNull()) {
        ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonObj.get("frontendPort"));
      }
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ApplicationGatewayProtocol.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `sslCertificate`
      if (jsonObj.get("sslCertificate") != null && !jsonObj.get("sslCertificate").isJsonNull()) {
        ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonObj.get("sslCertificate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayHttpListenerPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayHttpListenerPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayHttpListenerPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayHttpListenerPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayHttpListenerPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayHttpListenerPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayHttpListenerPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayHttpListenerPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayHttpListenerPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayHttpListenerPropertiesFormat
   */
  public static ApplicationGatewayHttpListenerPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayHttpListenerPropertiesFormat.class);
  }

  /**
   * Convert an instance of ApplicationGatewayHttpListenerPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

