/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationGatewayRewriteRuleActionSet;
import org.openapitools.client.model.ApplicationGatewayRewriteRuleCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Rewrite rule of an application gateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:02.807717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayRewriteRule {
  public static final String SERIALIZED_NAME_ACTION_SET = "actionSet";
  @SerializedName(SERIALIZED_NAME_ACTION_SET)
  private ApplicationGatewayRewriteRuleActionSet actionSet;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<ApplicationGatewayRewriteRuleCondition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RULE_SEQUENCE = "ruleSequence";
  @SerializedName(SERIALIZED_NAME_RULE_SEQUENCE)
  private Integer ruleSequence;

  public ApplicationGatewayRewriteRule() {
  }

  public ApplicationGatewayRewriteRule actionSet(ApplicationGatewayRewriteRuleActionSet actionSet) {
    this.actionSet = actionSet;
    return this;
  }

  /**
   * Get actionSet
   * @return actionSet
   */
  @javax.annotation.Nullable
  public ApplicationGatewayRewriteRuleActionSet getActionSet() {
    return actionSet;
  }

  public void setActionSet(ApplicationGatewayRewriteRuleActionSet actionSet) {
    this.actionSet = actionSet;
  }


  public ApplicationGatewayRewriteRule conditions(List<ApplicationGatewayRewriteRuleCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public ApplicationGatewayRewriteRule addConditionsItem(ApplicationGatewayRewriteRuleCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Conditions based on which the action set execution will be evaluated.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayRewriteRuleCondition> getConditions() {
    return conditions;
  }

  public void setConditions(List<ApplicationGatewayRewriteRuleCondition> conditions) {
    this.conditions = conditions;
  }


  public ApplicationGatewayRewriteRule name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the rewrite rule that is unique within an Application Gateway.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationGatewayRewriteRule ruleSequence(Integer ruleSequence) {
    this.ruleSequence = ruleSequence;
    return this;
  }

  /**
   * Rule Sequence of the rewrite rule that determines the order of execution of a particular rule in a RewriteRuleSet.
   * @return ruleSequence
   */
  @javax.annotation.Nullable
  public Integer getRuleSequence() {
    return ruleSequence;
  }

  public void setRuleSequence(Integer ruleSequence) {
    this.ruleSequence = ruleSequence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayRewriteRule applicationGatewayRewriteRule = (ApplicationGatewayRewriteRule) o;
    return Objects.equals(this.actionSet, applicationGatewayRewriteRule.actionSet) &&
        Objects.equals(this.conditions, applicationGatewayRewriteRule.conditions) &&
        Objects.equals(this.name, applicationGatewayRewriteRule.name) &&
        Objects.equals(this.ruleSequence, applicationGatewayRewriteRule.ruleSequence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionSet, conditions, name, ruleSequence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayRewriteRule {\n");
    sb.append("    actionSet: ").append(toIndentedString(actionSet)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ruleSequence: ").append(toIndentedString(ruleSequence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionSet");
    openapiFields.add("conditions");
    openapiFields.add("name");
    openapiFields.add("ruleSequence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayRewriteRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayRewriteRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayRewriteRule is not found in the empty JSON string", ApplicationGatewayRewriteRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayRewriteRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayRewriteRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `actionSet`
      if (jsonObj.get("actionSet") != null && !jsonObj.get("actionSet").isJsonNull()) {
        ApplicationGatewayRewriteRuleActionSet.validateJsonElement(jsonObj.get("actionSet"));
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            ApplicationGatewayRewriteRuleCondition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayRewriteRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayRewriteRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayRewriteRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayRewriteRule.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayRewriteRule>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayRewriteRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayRewriteRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayRewriteRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayRewriteRule
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayRewriteRule
   */
  public static ApplicationGatewayRewriteRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayRewriteRule.class);
  }

  /**
   * Convert an instance of ApplicationGatewayRewriteRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

