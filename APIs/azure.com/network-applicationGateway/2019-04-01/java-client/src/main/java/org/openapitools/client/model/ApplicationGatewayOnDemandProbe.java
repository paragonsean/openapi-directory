/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet;
import org.openapitools.client.model.ApplicationGatewayProbeHealthResponseMatch;
import org.openapitools.client.model.ApplicationGatewayProtocol;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of on demand test probe request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:02.807717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayOnDemandProbe {
  public static final String SERIALIZED_NAME_BACKEND_ADDRESS_POOL = "backendAddressPool";
  @SerializedName(SERIALIZED_NAME_BACKEND_ADDRESS_POOL)
  private ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet backendAddressPool;

  public static final String SERIALIZED_NAME_BACKEND_HTTP_SETTINGS = "backendHttpSettings";
  @SerializedName(SERIALIZED_NAME_BACKEND_HTTP_SETTINGS)
  private ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet backendHttpSettings;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_MATCH = "match";
  @SerializedName(SERIALIZED_NAME_MATCH)
  private ApplicationGatewayProbeHealthResponseMatch match;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PICK_HOST_NAME_FROM_BACKEND_HTTP_SETTINGS = "pickHostNameFromBackendHttpSettings";
  @SerializedName(SERIALIZED_NAME_PICK_HOST_NAME_FROM_BACKEND_HTTP_SETTINGS)
  private Boolean pickHostNameFromBackendHttpSettings;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ApplicationGatewayProtocol protocol;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public ApplicationGatewayOnDemandProbe() {
  }

  public ApplicationGatewayOnDemandProbe backendAddressPool(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
    return this;
  }

  /**
   * Get backendAddressPool
   * @return backendAddressPool
   */
  @javax.annotation.Nullable
  public ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet getBackendAddressPool() {
    return backendAddressPool;
  }

  public void setBackendAddressPool(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
  }


  public ApplicationGatewayOnDemandProbe backendHttpSettings(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet backendHttpSettings) {
    this.backendHttpSettings = backendHttpSettings;
    return this;
  }

  /**
   * Get backendHttpSettings
   * @return backendHttpSettings
   */
  @javax.annotation.Nullable
  public ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet getBackendHttpSettings() {
    return backendHttpSettings;
  }

  public void setBackendHttpSettings(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet backendHttpSettings) {
    this.backendHttpSettings = backendHttpSettings;
  }


  public ApplicationGatewayOnDemandProbe host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Host name to send the probe to.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public ApplicationGatewayOnDemandProbe match(ApplicationGatewayProbeHealthResponseMatch match) {
    this.match = match;
    return this;
  }

  /**
   * Get match
   * @return match
   */
  @javax.annotation.Nullable
  public ApplicationGatewayProbeHealthResponseMatch getMatch() {
    return match;
  }

  public void setMatch(ApplicationGatewayProbeHealthResponseMatch match) {
    this.match = match;
  }


  public ApplicationGatewayOnDemandProbe path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Relative path of probe. Valid path starts from &#39;/&#39;. Probe is sent to &lt;Protocol&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ApplicationGatewayOnDemandProbe pickHostNameFromBackendHttpSettings(Boolean pickHostNameFromBackendHttpSettings) {
    this.pickHostNameFromBackendHttpSettings = pickHostNameFromBackendHttpSettings;
    return this;
  }

  /**
   * Whether the host header should be picked from the backend http settings. Default value is false.
   * @return pickHostNameFromBackendHttpSettings
   */
  @javax.annotation.Nullable
  public Boolean getPickHostNameFromBackendHttpSettings() {
    return pickHostNameFromBackendHttpSettings;
  }

  public void setPickHostNameFromBackendHttpSettings(Boolean pickHostNameFromBackendHttpSettings) {
    this.pickHostNameFromBackendHttpSettings = pickHostNameFromBackendHttpSettings;
  }


  public ApplicationGatewayOnDemandProbe protocol(ApplicationGatewayProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public ApplicationGatewayProtocol getProtocol() {
    return protocol;
  }

  public void setProtocol(ApplicationGatewayProtocol protocol) {
    this.protocol = protocol;
  }


  public ApplicationGatewayOnDemandProbe timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayOnDemandProbe applicationGatewayOnDemandProbe = (ApplicationGatewayOnDemandProbe) o;
    return Objects.equals(this.backendAddressPool, applicationGatewayOnDemandProbe.backendAddressPool) &&
        Objects.equals(this.backendHttpSettings, applicationGatewayOnDemandProbe.backendHttpSettings) &&
        Objects.equals(this.host, applicationGatewayOnDemandProbe.host) &&
        Objects.equals(this.match, applicationGatewayOnDemandProbe.match) &&
        Objects.equals(this.path, applicationGatewayOnDemandProbe.path) &&
        Objects.equals(this.pickHostNameFromBackendHttpSettings, applicationGatewayOnDemandProbe.pickHostNameFromBackendHttpSettings) &&
        Objects.equals(this.protocol, applicationGatewayOnDemandProbe.protocol) &&
        Objects.equals(this.timeout, applicationGatewayOnDemandProbe.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendAddressPool, backendHttpSettings, host, match, path, pickHostNameFromBackendHttpSettings, protocol, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayOnDemandProbe {\n");
    sb.append("    backendAddressPool: ").append(toIndentedString(backendAddressPool)).append("\n");
    sb.append("    backendHttpSettings: ").append(toIndentedString(backendHttpSettings)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pickHostNameFromBackendHttpSettings: ").append(toIndentedString(pickHostNameFromBackendHttpSettings)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendAddressPool");
    openapiFields.add("backendHttpSettings");
    openapiFields.add("host");
    openapiFields.add("match");
    openapiFields.add("path");
    openapiFields.add("pickHostNameFromBackendHttpSettings");
    openapiFields.add("protocol");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayOnDemandProbe
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayOnDemandProbe.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayOnDemandProbe is not found in the empty JSON string", ApplicationGatewayOnDemandProbe.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayOnDemandProbe.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayOnDemandProbe` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backendAddressPool`
      if (jsonObj.get("backendAddressPool") != null && !jsonObj.get("backendAddressPool").isJsonNull()) {
        ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonObj.get("backendAddressPool"));
      }
      // validate the optional field `backendHttpSettings`
      if (jsonObj.get("backendHttpSettings") != null && !jsonObj.get("backendHttpSettings").isJsonNull()) {
        ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonObj.get("backendHttpSettings"));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      // validate the optional field `match`
      if (jsonObj.get("match") != null && !jsonObj.get("match").isJsonNull()) {
        ApplicationGatewayProbeHealthResponseMatch.validateJsonElement(jsonObj.get("match"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ApplicationGatewayProtocol.validateJsonElement(jsonObj.get("protocol"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayOnDemandProbe.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayOnDemandProbe' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayOnDemandProbe> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayOnDemandProbe.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayOnDemandProbe>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayOnDemandProbe value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayOnDemandProbe read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayOnDemandProbe given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayOnDemandProbe
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayOnDemandProbe
   */
  public static ApplicationGatewayOnDemandProbe fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayOnDemandProbe.class);
  }

  /**
   * Convert an instance of ApplicationGatewayOnDemandProbe to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

