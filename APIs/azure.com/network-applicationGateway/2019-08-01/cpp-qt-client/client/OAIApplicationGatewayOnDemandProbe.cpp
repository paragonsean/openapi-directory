/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayOnDemandProbe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayOnDemandProbe::OAIApplicationGatewayOnDemandProbe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayOnDemandProbe::OAIApplicationGatewayOnDemandProbe() {
    this->initializeModel();
}

OAIApplicationGatewayOnDemandProbe::~OAIApplicationGatewayOnDemandProbe() {}

void OAIApplicationGatewayOnDemandProbe::initializeModel() {

    m_backend_address_pool_isSet = false;
    m_backend_address_pool_isValid = false;

    m_backend_http_settings_isSet = false;
    m_backend_http_settings_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_pick_host_name_from_backend_http_settings_isSet = false;
    m_pick_host_name_from_backend_http_settings_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIApplicationGatewayOnDemandProbe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayOnDemandProbe::fromJsonObject(QJsonObject json) {

    m_backend_address_pool_isValid = ::OpenAPI::fromJsonValue(m_backend_address_pool, json[QString("backendAddressPool")]);
    m_backend_address_pool_isSet = !json[QString("backendAddressPool")].isNull() && m_backend_address_pool_isValid;

    m_backend_http_settings_isValid = ::OpenAPI::fromJsonValue(m_backend_http_settings, json[QString("backendHttpSettings")]);
    m_backend_http_settings_isSet = !json[QString("backendHttpSettings")].isNull() && m_backend_http_settings_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_pick_host_name_from_backend_http_settings_isValid = ::OpenAPI::fromJsonValue(m_pick_host_name_from_backend_http_settings, json[QString("pickHostNameFromBackendHttpSettings")]);
    m_pick_host_name_from_backend_http_settings_isSet = !json[QString("pickHostNameFromBackendHttpSettings")].isNull() && m_pick_host_name_from_backend_http_settings_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIApplicationGatewayOnDemandProbe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayOnDemandProbe::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_address_pool.isSet()) {
        obj.insert(QString("backendAddressPool"), ::OpenAPI::toJsonValue(m_backend_address_pool));
    }
    if (m_backend_http_settings.isSet()) {
        obj.insert(QString("backendHttpSettings"), ::OpenAPI::toJsonValue(m_backend_http_settings));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_pick_host_name_from_backend_http_settings_isSet) {
        obj.insert(QString("pickHostNameFromBackendHttpSettings"), ::OpenAPI::toJsonValue(m_pick_host_name_from_backend_http_settings));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

OAIApplicationGatewayPathRulePropertiesFormat_rewriteRuleSet OAIApplicationGatewayOnDemandProbe::getBackendAddressPool() const {
    return m_backend_address_pool;
}
void OAIApplicationGatewayOnDemandProbe::setBackendAddressPool(const OAIApplicationGatewayPathRulePropertiesFormat_rewriteRuleSet &backend_address_pool) {
    m_backend_address_pool = backend_address_pool;
    m_backend_address_pool_isSet = true;
}

bool OAIApplicationGatewayOnDemandProbe::is_backend_address_pool_Set() const{
    return m_backend_address_pool_isSet;
}

bool OAIApplicationGatewayOnDemandProbe::is_backend_address_pool_Valid() const{
    return m_backend_address_pool_isValid;
}

OAIApplicationGatewayPathRulePropertiesFormat_rewriteRuleSet OAIApplicationGatewayOnDemandProbe::getBackendHttpSettings() const {
    return m_backend_http_settings;
}
void OAIApplicationGatewayOnDemandProbe::setBackendHttpSettings(const OAIApplicationGatewayPathRulePropertiesFormat_rewriteRuleSet &backend_http_settings) {
    m_backend_http_settings = backend_http_settings;
    m_backend_http_settings_isSet = true;
}

bool OAIApplicationGatewayOnDemandProbe::is_backend_http_settings_Set() const{
    return m_backend_http_settings_isSet;
}

bool OAIApplicationGatewayOnDemandProbe::is_backend_http_settings_Valid() const{
    return m_backend_http_settings_isValid;
}

QString OAIApplicationGatewayOnDemandProbe::getHost() const {
    return m_host;
}
void OAIApplicationGatewayOnDemandProbe::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIApplicationGatewayOnDemandProbe::is_host_Set() const{
    return m_host_isSet;
}

bool OAIApplicationGatewayOnDemandProbe::is_host_Valid() const{
    return m_host_isValid;
}

OAIApplicationGatewayProbeHealthResponseMatch OAIApplicationGatewayOnDemandProbe::getMatch() const {
    return m_match;
}
void OAIApplicationGatewayOnDemandProbe::setMatch(const OAIApplicationGatewayProbeHealthResponseMatch &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIApplicationGatewayOnDemandProbe::is_match_Set() const{
    return m_match_isSet;
}

bool OAIApplicationGatewayOnDemandProbe::is_match_Valid() const{
    return m_match_isValid;
}

QString OAIApplicationGatewayOnDemandProbe::getPath() const {
    return m_path;
}
void OAIApplicationGatewayOnDemandProbe::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIApplicationGatewayOnDemandProbe::is_path_Set() const{
    return m_path_isSet;
}

bool OAIApplicationGatewayOnDemandProbe::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIApplicationGatewayOnDemandProbe::isPickHostNameFromBackendHttpSettings() const {
    return m_pick_host_name_from_backend_http_settings;
}
void OAIApplicationGatewayOnDemandProbe::setPickHostNameFromBackendHttpSettings(const bool &pick_host_name_from_backend_http_settings) {
    m_pick_host_name_from_backend_http_settings = pick_host_name_from_backend_http_settings;
    m_pick_host_name_from_backend_http_settings_isSet = true;
}

bool OAIApplicationGatewayOnDemandProbe::is_pick_host_name_from_backend_http_settings_Set() const{
    return m_pick_host_name_from_backend_http_settings_isSet;
}

bool OAIApplicationGatewayOnDemandProbe::is_pick_host_name_from_backend_http_settings_Valid() const{
    return m_pick_host_name_from_backend_http_settings_isValid;
}

OAIApplicationGatewayProtocol OAIApplicationGatewayOnDemandProbe::getProtocol() const {
    return m_protocol;
}
void OAIApplicationGatewayOnDemandProbe::setProtocol(const OAIApplicationGatewayProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIApplicationGatewayOnDemandProbe::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIApplicationGatewayOnDemandProbe::is_protocol_Valid() const{
    return m_protocol_isValid;
}

qint32 OAIApplicationGatewayOnDemandProbe::getTimeout() const {
    return m_timeout;
}
void OAIApplicationGatewayOnDemandProbe::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIApplicationGatewayOnDemandProbe::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIApplicationGatewayOnDemandProbe::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIApplicationGatewayOnDemandProbe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_address_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_http_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pick_host_name_from_backend_http_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayOnDemandProbe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
