/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayBackendHealthServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayBackendHealthServer::OAIApplicationGatewayBackendHealthServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayBackendHealthServer::OAIApplicationGatewayBackendHealthServer() {
    this->initializeModel();
}

OAIApplicationGatewayBackendHealthServer::~OAIApplicationGatewayBackendHealthServer() {}

void OAIApplicationGatewayBackendHealthServer::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_health_isSet = false;
    m_health_isValid = false;

    m_health_probe_log_isSet = false;
    m_health_probe_log_isValid = false;

    m_ip_configuration_isSet = false;
    m_ip_configuration_isValid = false;
}

void OAIApplicationGatewayBackendHealthServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayBackendHealthServer::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_health_isValid = ::OpenAPI::fromJsonValue(m_health, json[QString("health")]);
    m_health_isSet = !json[QString("health")].isNull() && m_health_isValid;

    m_health_probe_log_isValid = ::OpenAPI::fromJsonValue(m_health_probe_log, json[QString("healthProbeLog")]);
    m_health_probe_log_isSet = !json[QString("healthProbeLog")].isNull() && m_health_probe_log_isValid;

    m_ip_configuration_isValid = ::OpenAPI::fromJsonValue(m_ip_configuration, json[QString("ipConfiguration")]);
    m_ip_configuration_isSet = !json[QString("ipConfiguration")].isNull() && m_ip_configuration_isValid;
}

QString OAIApplicationGatewayBackendHealthServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayBackendHealthServer::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_health_isSet) {
        obj.insert(QString("health"), ::OpenAPI::toJsonValue(m_health));
    }
    if (m_health_probe_log_isSet) {
        obj.insert(QString("healthProbeLog"), ::OpenAPI::toJsonValue(m_health_probe_log));
    }
    if (m_ip_configuration.isSet()) {
        obj.insert(QString("ipConfiguration"), ::OpenAPI::toJsonValue(m_ip_configuration));
    }
    return obj;
}

QString OAIApplicationGatewayBackendHealthServer::getAddress() const {
    return m_address;
}
void OAIApplicationGatewayBackendHealthServer::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer::is_address_Set() const{
    return m_address_isSet;
}

bool OAIApplicationGatewayBackendHealthServer::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIApplicationGatewayBackendHealthServer::getHealth() const {
    return m_health;
}
void OAIApplicationGatewayBackendHealthServer::setHealth(const QString &health) {
    m_health = health;
    m_health_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer::is_health_Set() const{
    return m_health_isSet;
}

bool OAIApplicationGatewayBackendHealthServer::is_health_Valid() const{
    return m_health_isValid;
}

QString OAIApplicationGatewayBackendHealthServer::getHealthProbeLog() const {
    return m_health_probe_log;
}
void OAIApplicationGatewayBackendHealthServer::setHealthProbeLog(const QString &health_probe_log) {
    m_health_probe_log = health_probe_log;
    m_health_probe_log_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer::is_health_probe_log_Set() const{
    return m_health_probe_log_isSet;
}

bool OAIApplicationGatewayBackendHealthServer::is_health_probe_log_Valid() const{
    return m_health_probe_log_isValid;
}

OAIApplicationGatewayBackendHealthServer_ipConfiguration OAIApplicationGatewayBackendHealthServer::getIpConfiguration() const {
    return m_ip_configuration;
}
void OAIApplicationGatewayBackendHealthServer::setIpConfiguration(const OAIApplicationGatewayBackendHealthServer_ipConfiguration &ip_configuration) {
    m_ip_configuration = ip_configuration;
    m_ip_configuration_isSet = true;
}

bool OAIApplicationGatewayBackendHealthServer::is_ip_configuration_Set() const{
    return m_ip_configuration_isSet;
}

bool OAIApplicationGatewayBackendHealthServer::is_ip_configuration_Valid() const{
    return m_ip_configuration_isValid;
}

bool OAIApplicationGatewayBackendHealthServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_probe_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayBackendHealthServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
