/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplicationGatewaysApi_H
#define OAI_OAIApplicationGatewaysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationGateway.h"
#include "OAIApplicationGatewayAvailableSslPredefinedPolicies.h"
#include "OAIApplicationGatewayAvailableWafRuleSetsResult.h"
#include "OAIApplicationGatewayBackendHealth.h"
#include "OAIApplicationGatewayBackendHealthOnDemand.h"
#include "OAIApplicationGatewayListResult.h"
#include "OAIApplicationGatewayOnDemandProbe.h"
#include "OAIApplicationGateways_ListAvailableServerVariables_default_response.h"
#include "OAIApplicationGateways_UpdateTags_request.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplicationGatewaysApi : public QObject {
    Q_OBJECT

public:
    OAIApplicationGatewaysApi(const int timeOut = 0);
    ~OAIApplicationGatewaysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void applicationGatewaysBackendHealth(const QString &resource_group_name, const QString &application_gateway_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_gateway_name QString [required]
    * @param[in]  probe_request OAIApplicationGatewayOnDemandProbe [required]
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void applicationGatewaysBackendHealthOnDemand(const QString &resource_group_name, const QString &application_gateway_name, const OAIApplicationGatewayOnDemandProbe &probe_request, const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_gateway_name QString [required]
    * @param[in]  parameters OAIApplicationGateway [required]
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysCreateOrUpdate(const QString &resource_group_name, const QString &application_gateway_name, const OAIApplicationGateway &parameters, const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_gateway_name QString [required]
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysDelete(const QString &resource_group_name, const QString &application_gateway_name, const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_gateway_name QString [required]
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysGet(const QString &resource_group_name, const QString &application_gateway_name, const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  predefined_policy_name QString [required]
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysGetSslPredefinedPolicy(const QString &predefined_policy_name, const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysList(const QString &resource_group_name, const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysListAll(const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysListAvailableRequestHeaders(const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysListAvailableResponseHeaders(const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysListAvailableServerVariables(const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysListAvailableSslOptions(const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysListAvailableSslPredefinedPolicies(const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysListAvailableWafRuleSets(const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_gateway_name QString [required]
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysStart(const QString &resource_group_name, const QString &application_gateway_name, const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_gateway_name QString [required]
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysStop(const QString &resource_group_name, const QString &application_gateway_name, const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_gateway_name QString [required]
    * @param[in]  parameters OAIApplicationGateways_UpdateTags_request [required]
    * @param[in]  UNKNOWN_PARAMETER_NAME  [optional]
    * @param[in]  UNKNOWN_PARAMETER_NAME2  [optional]
    */
    virtual void applicationGatewaysUpdateTags(const QString &resource_group_name, const QString &application_gateway_name, const OAIApplicationGateways_UpdateTags_request &parameters, const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME = ::OpenAPI::OptionalParam<>(), const ::OpenAPI::OptionalParam<> &UNKNOWN_PARAMETER_NAME2 = ::OpenAPI::OptionalParam<>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void applicationGatewaysBackendHealthCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysBackendHealthOnDemandCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysDeleteCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysGetCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysGetSslPredefinedPolicyCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysListCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysListAllCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysListAvailableRequestHeadersCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysListAvailableResponseHeadersCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysListAvailableServerVariablesCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysListAvailableSslOptionsCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysListAvailableSslPredefinedPoliciesCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysListAvailableWafRuleSetsCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysStartCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysStopCallback(OAIHttpRequestWorker *worker);
    void applicationGatewaysUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void applicationGatewaysBackendHealthSignal(OAIApplicationGatewayBackendHealth summary);
    void applicationGatewaysBackendHealthOnDemandSignal(OAIApplicationGatewayBackendHealthOnDemand summary);
    void applicationGatewaysCreateOrUpdateSignal(OAIApplicationGateway summary);
    void applicationGatewaysDeleteSignal();
    void applicationGatewaysGetSignal(OAIApplicationGateway summary);
    void applicationGatewaysGetSslPredefinedPolicySignal(OAIObject summary);
    void applicationGatewaysListSignal(OAIApplicationGatewayListResult summary);
    void applicationGatewaysListAllSignal(OAIApplicationGatewayListResult summary);
    void applicationGatewaysListAvailableRequestHeadersSignal(QList<QString> summary);
    void applicationGatewaysListAvailableResponseHeadersSignal(QList<QString> summary);
    void applicationGatewaysListAvailableServerVariablesSignal(QList<QString> summary);
    void applicationGatewaysListAvailableSslOptionsSignal(OAIObject summary);
    void applicationGatewaysListAvailableSslPredefinedPoliciesSignal(OAIApplicationGatewayAvailableSslPredefinedPolicies summary);
    void applicationGatewaysListAvailableWafRuleSetsSignal(OAIApplicationGatewayAvailableWafRuleSetsResult summary);
    void applicationGatewaysStartSignal();
    void applicationGatewaysStopSignal();
    void applicationGatewaysUpdateTagsSignal(OAIApplicationGateway summary);


    void applicationGatewaysBackendHealthSignalFull(OAIHttpRequestWorker *worker, OAIApplicationGatewayBackendHealth summary);
    void applicationGatewaysBackendHealthOnDemandSignalFull(OAIHttpRequestWorker *worker, OAIApplicationGatewayBackendHealthOnDemand summary);
    void applicationGatewaysCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApplicationGateway summary);
    void applicationGatewaysDeleteSignalFull(OAIHttpRequestWorker *worker);
    void applicationGatewaysGetSignalFull(OAIHttpRequestWorker *worker, OAIApplicationGateway summary);
    void applicationGatewaysGetSslPredefinedPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void applicationGatewaysListSignalFull(OAIHttpRequestWorker *worker, OAIApplicationGatewayListResult summary);
    void applicationGatewaysListAllSignalFull(OAIHttpRequestWorker *worker, OAIApplicationGatewayListResult summary);
    void applicationGatewaysListAvailableRequestHeadersSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void applicationGatewaysListAvailableResponseHeadersSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void applicationGatewaysListAvailableServerVariablesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void applicationGatewaysListAvailableSslOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void applicationGatewaysListAvailableSslPredefinedPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIApplicationGatewayAvailableSslPredefinedPolicies summary);
    void applicationGatewaysListAvailableWafRuleSetsSignalFull(OAIHttpRequestWorker *worker, OAIApplicationGatewayAvailableWafRuleSetsResult summary);
    void applicationGatewaysStartSignalFull(OAIHttpRequestWorker *worker);
    void applicationGatewaysStopSignalFull(OAIHttpRequestWorker *worker);
    void applicationGatewaysUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIApplicationGateway summary);

    Q_DECL_DEPRECATED_X("Use applicationGatewaysBackendHealthSignalError() instead")
    void applicationGatewaysBackendHealthSignalE(OAIApplicationGatewayBackendHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysBackendHealthSignalError(OAIApplicationGatewayBackendHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysBackendHealthOnDemandSignalError() instead")
    void applicationGatewaysBackendHealthOnDemandSignalE(OAIApplicationGatewayBackendHealthOnDemand summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysBackendHealthOnDemandSignalError(OAIApplicationGatewayBackendHealthOnDemand summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysCreateOrUpdateSignalError() instead")
    void applicationGatewaysCreateOrUpdateSignalE(OAIApplicationGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysCreateOrUpdateSignalError(OAIApplicationGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysDeleteSignalError() instead")
    void applicationGatewaysDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysGetSignalError() instead")
    void applicationGatewaysGetSignalE(OAIApplicationGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysGetSignalError(OAIApplicationGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysGetSslPredefinedPolicySignalError() instead")
    void applicationGatewaysGetSslPredefinedPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysGetSslPredefinedPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListSignalError() instead")
    void applicationGatewaysListSignalE(OAIApplicationGatewayListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListSignalError(OAIApplicationGatewayListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAllSignalError() instead")
    void applicationGatewaysListAllSignalE(OAIApplicationGatewayListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAllSignalError(OAIApplicationGatewayListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAvailableRequestHeadersSignalError() instead")
    void applicationGatewaysListAvailableRequestHeadersSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAvailableRequestHeadersSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAvailableResponseHeadersSignalError() instead")
    void applicationGatewaysListAvailableResponseHeadersSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAvailableResponseHeadersSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAvailableServerVariablesSignalError() instead")
    void applicationGatewaysListAvailableServerVariablesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAvailableServerVariablesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAvailableSslOptionsSignalError() instead")
    void applicationGatewaysListAvailableSslOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAvailableSslOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAvailableSslPredefinedPoliciesSignalError() instead")
    void applicationGatewaysListAvailableSslPredefinedPoliciesSignalE(OAIApplicationGatewayAvailableSslPredefinedPolicies summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAvailableSslPredefinedPoliciesSignalError(OAIApplicationGatewayAvailableSslPredefinedPolicies summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAvailableWafRuleSetsSignalError() instead")
    void applicationGatewaysListAvailableWafRuleSetsSignalE(OAIApplicationGatewayAvailableWafRuleSetsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAvailableWafRuleSetsSignalError(OAIApplicationGatewayAvailableWafRuleSetsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysStartSignalError() instead")
    void applicationGatewaysStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysStopSignalError() instead")
    void applicationGatewaysStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysUpdateTagsSignalError() instead")
    void applicationGatewaysUpdateTagsSignalE(OAIApplicationGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysUpdateTagsSignalError(OAIApplicationGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use applicationGatewaysBackendHealthSignalErrorFull() instead")
    void applicationGatewaysBackendHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysBackendHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysBackendHealthOnDemandSignalErrorFull() instead")
    void applicationGatewaysBackendHealthOnDemandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysBackendHealthOnDemandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysCreateOrUpdateSignalErrorFull() instead")
    void applicationGatewaysCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysDeleteSignalErrorFull() instead")
    void applicationGatewaysDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysGetSignalErrorFull() instead")
    void applicationGatewaysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysGetSslPredefinedPolicySignalErrorFull() instead")
    void applicationGatewaysGetSslPredefinedPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysGetSslPredefinedPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListSignalErrorFull() instead")
    void applicationGatewaysListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAllSignalErrorFull() instead")
    void applicationGatewaysListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAvailableRequestHeadersSignalErrorFull() instead")
    void applicationGatewaysListAvailableRequestHeadersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAvailableRequestHeadersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAvailableResponseHeadersSignalErrorFull() instead")
    void applicationGatewaysListAvailableResponseHeadersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAvailableResponseHeadersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAvailableServerVariablesSignalErrorFull() instead")
    void applicationGatewaysListAvailableServerVariablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAvailableServerVariablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAvailableSslOptionsSignalErrorFull() instead")
    void applicationGatewaysListAvailableSslOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAvailableSslOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAvailableSslPredefinedPoliciesSignalErrorFull() instead")
    void applicationGatewaysListAvailableSslPredefinedPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAvailableSslPredefinedPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysListAvailableWafRuleSetsSignalErrorFull() instead")
    void applicationGatewaysListAvailableWafRuleSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysListAvailableWafRuleSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysStartSignalErrorFull() instead")
    void applicationGatewaysStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysStopSignalErrorFull() instead")
    void applicationGatewaysStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGatewaysUpdateTagsSignalErrorFull() instead")
    void applicationGatewaysUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGatewaysUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
