/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of path rule of an application gateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:38.642621-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayPathRulePropertiesFormat {
  public static final String SERIALIZED_NAME_BACKEND_ADDRESS_POOL = "backendAddressPool";
  @SerializedName(SERIALIZED_NAME_BACKEND_ADDRESS_POOL)
  private ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet backendAddressPool;

  public static final String SERIALIZED_NAME_BACKEND_HTTP_SETTINGS = "backendHttpSettings";
  @SerializedName(SERIALIZED_NAME_BACKEND_HTTP_SETTINGS)
  private ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet backendHttpSettings;

  public static final String SERIALIZED_NAME_PATHS = "paths";
  @SerializedName(SERIALIZED_NAME_PATHS)
  private List<String> paths = new ArrayList<>();

  /**
   * The current provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_REDIRECT_CONFIGURATION = "redirectConfiguration";
  @SerializedName(SERIALIZED_NAME_REDIRECT_CONFIGURATION)
  private ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet redirectConfiguration;

  public static final String SERIALIZED_NAME_REWRITE_RULE_SET = "rewriteRuleSet";
  @SerializedName(SERIALIZED_NAME_REWRITE_RULE_SET)
  private ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet rewriteRuleSet;

  public ApplicationGatewayPathRulePropertiesFormat() {
  }

  public ApplicationGatewayPathRulePropertiesFormat(
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public ApplicationGatewayPathRulePropertiesFormat backendAddressPool(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
    return this;
  }

  /**
   * Get backendAddressPool
   * @return backendAddressPool
   */
  @javax.annotation.Nullable
  public ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet getBackendAddressPool() {
    return backendAddressPool;
  }

  public void setBackendAddressPool(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
  }


  public ApplicationGatewayPathRulePropertiesFormat backendHttpSettings(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet backendHttpSettings) {
    this.backendHttpSettings = backendHttpSettings;
    return this;
  }

  /**
   * Get backendHttpSettings
   * @return backendHttpSettings
   */
  @javax.annotation.Nullable
  public ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet getBackendHttpSettings() {
    return backendHttpSettings;
  }

  public void setBackendHttpSettings(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet backendHttpSettings) {
    this.backendHttpSettings = backendHttpSettings;
  }


  public ApplicationGatewayPathRulePropertiesFormat paths(List<String> paths) {
    this.paths = paths;
    return this;
  }

  public ApplicationGatewayPathRulePropertiesFormat addPathsItem(String pathsItem) {
    if (this.paths == null) {
      this.paths = new ArrayList<>();
    }
    this.paths.add(pathsItem);
    return this;
  }

  /**
   * Path rules of URL path map.
   * @return paths
   */
  @javax.annotation.Nullable
  public List<String> getPaths() {
    return paths;
  }

  public void setPaths(List<String> paths) {
    this.paths = paths;
  }


  /**
   * The current provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public ApplicationGatewayPathRulePropertiesFormat redirectConfiguration(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet redirectConfiguration) {
    this.redirectConfiguration = redirectConfiguration;
    return this;
  }

  /**
   * Get redirectConfiguration
   * @return redirectConfiguration
   */
  @javax.annotation.Nullable
  public ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet getRedirectConfiguration() {
    return redirectConfiguration;
  }

  public void setRedirectConfiguration(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet redirectConfiguration) {
    this.redirectConfiguration = redirectConfiguration;
  }


  public ApplicationGatewayPathRulePropertiesFormat rewriteRuleSet(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet rewriteRuleSet) {
    this.rewriteRuleSet = rewriteRuleSet;
    return this;
  }

  /**
   * Get rewriteRuleSet
   * @return rewriteRuleSet
   */
  @javax.annotation.Nullable
  public ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet getRewriteRuleSet() {
    return rewriteRuleSet;
  }

  public void setRewriteRuleSet(ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet rewriteRuleSet) {
    this.rewriteRuleSet = rewriteRuleSet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayPathRulePropertiesFormat applicationGatewayPathRulePropertiesFormat = (ApplicationGatewayPathRulePropertiesFormat) o;
    return Objects.equals(this.backendAddressPool, applicationGatewayPathRulePropertiesFormat.backendAddressPool) &&
        Objects.equals(this.backendHttpSettings, applicationGatewayPathRulePropertiesFormat.backendHttpSettings) &&
        Objects.equals(this.paths, applicationGatewayPathRulePropertiesFormat.paths) &&
        Objects.equals(this.provisioningState, applicationGatewayPathRulePropertiesFormat.provisioningState) &&
        Objects.equals(this.redirectConfiguration, applicationGatewayPathRulePropertiesFormat.redirectConfiguration) &&
        Objects.equals(this.rewriteRuleSet, applicationGatewayPathRulePropertiesFormat.rewriteRuleSet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendAddressPool, backendHttpSettings, paths, provisioningState, redirectConfiguration, rewriteRuleSet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayPathRulePropertiesFormat {\n");
    sb.append("    backendAddressPool: ").append(toIndentedString(backendAddressPool)).append("\n");
    sb.append("    backendHttpSettings: ").append(toIndentedString(backendHttpSettings)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    redirectConfiguration: ").append(toIndentedString(redirectConfiguration)).append("\n");
    sb.append("    rewriteRuleSet: ").append(toIndentedString(rewriteRuleSet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendAddressPool");
    openapiFields.add("backendHttpSettings");
    openapiFields.add("paths");
    openapiFields.add("provisioningState");
    openapiFields.add("redirectConfiguration");
    openapiFields.add("rewriteRuleSet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayPathRulePropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayPathRulePropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayPathRulePropertiesFormat is not found in the empty JSON string", ApplicationGatewayPathRulePropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayPathRulePropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayPathRulePropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backendAddressPool`
      if (jsonObj.get("backendAddressPool") != null && !jsonObj.get("backendAddressPool").isJsonNull()) {
        ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonObj.get("backendAddressPool"));
      }
      // validate the optional field `backendHttpSettings`
      if (jsonObj.get("backendHttpSettings") != null && !jsonObj.get("backendHttpSettings").isJsonNull()) {
        ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonObj.get("backendHttpSettings"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("paths") != null && !jsonObj.get("paths").isJsonNull() && !jsonObj.get("paths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `paths` to be an array in the JSON string but got `%s`", jsonObj.get("paths").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `redirectConfiguration`
      if (jsonObj.get("redirectConfiguration") != null && !jsonObj.get("redirectConfiguration").isJsonNull()) {
        ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonObj.get("redirectConfiguration"));
      }
      // validate the optional field `rewriteRuleSet`
      if (jsonObj.get("rewriteRuleSet") != null && !jsonObj.get("rewriteRuleSet").isJsonNull()) {
        ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.validateJsonElement(jsonObj.get("rewriteRuleSet"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayPathRulePropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayPathRulePropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayPathRulePropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayPathRulePropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayPathRulePropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayPathRulePropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayPathRulePropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayPathRulePropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayPathRulePropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayPathRulePropertiesFormat
   */
  public static ApplicationGatewayPathRulePropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayPathRulePropertiesFormat.class);
  }

  /**
   * Convert an instance of ApplicationGatewayPathRulePropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

