/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationGatewayProbeHealthResponseMatch;
import org.openapitools.client.model.ApplicationGatewayProtocol;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of probe of an application gateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:38.642621-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayProbePropertiesFormat {
  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Integer interval;

  public static final String SERIALIZED_NAME_MATCH = "match";
  @SerializedName(SERIALIZED_NAME_MATCH)
  private ApplicationGatewayProbeHealthResponseMatch match;

  public static final String SERIALIZED_NAME_MIN_SERVERS = "minServers";
  @SerializedName(SERIALIZED_NAME_MIN_SERVERS)
  private Integer minServers;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PICK_HOST_NAME_FROM_BACKEND_HTTP_SETTINGS = "pickHostNameFromBackendHttpSettings";
  @SerializedName(SERIALIZED_NAME_PICK_HOST_NAME_FROM_BACKEND_HTTP_SETTINGS)
  private Boolean pickHostNameFromBackendHttpSettings;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ApplicationGatewayProtocol protocol;

  /**
   * The current provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public static final String SERIALIZED_NAME_UNHEALTHY_THRESHOLD = "unhealthyThreshold";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_THRESHOLD)
  private Integer unhealthyThreshold;

  public ApplicationGatewayProbePropertiesFormat() {
  }

  public ApplicationGatewayProbePropertiesFormat(
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public ApplicationGatewayProbePropertiesFormat host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Host name to send the probe to.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public ApplicationGatewayProbePropertiesFormat interval(Integer interval) {
    this.interval = interval;
    return this;
  }

  /**
   * The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1 second to 86400 seconds.
   * @return interval
   */
  @javax.annotation.Nullable
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(Integer interval) {
    this.interval = interval;
  }


  public ApplicationGatewayProbePropertiesFormat match(ApplicationGatewayProbeHealthResponseMatch match) {
    this.match = match;
    return this;
  }

  /**
   * Get match
   * @return match
   */
  @javax.annotation.Nullable
  public ApplicationGatewayProbeHealthResponseMatch getMatch() {
    return match;
  }

  public void setMatch(ApplicationGatewayProbeHealthResponseMatch match) {
    this.match = match;
  }


  public ApplicationGatewayProbePropertiesFormat minServers(Integer minServers) {
    this.minServers = minServers;
    return this;
  }

  /**
   * Minimum number of servers that are always marked healthy. Default value is 0.
   * @return minServers
   */
  @javax.annotation.Nullable
  public Integer getMinServers() {
    return minServers;
  }

  public void setMinServers(Integer minServers) {
    this.minServers = minServers;
  }


  public ApplicationGatewayProbePropertiesFormat path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Relative path of probe. Valid path starts from &#39;/&#39;. Probe is sent to &lt;Protocol&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ApplicationGatewayProbePropertiesFormat pickHostNameFromBackendHttpSettings(Boolean pickHostNameFromBackendHttpSettings) {
    this.pickHostNameFromBackendHttpSettings = pickHostNameFromBackendHttpSettings;
    return this;
  }

  /**
   * Whether the host header should be picked from the backend http settings. Default value is false.
   * @return pickHostNameFromBackendHttpSettings
   */
  @javax.annotation.Nullable
  public Boolean getPickHostNameFromBackendHttpSettings() {
    return pickHostNameFromBackendHttpSettings;
  }

  public void setPickHostNameFromBackendHttpSettings(Boolean pickHostNameFromBackendHttpSettings) {
    this.pickHostNameFromBackendHttpSettings = pickHostNameFromBackendHttpSettings;
  }


  public ApplicationGatewayProbePropertiesFormat port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Custom port which will be used for probing the backend servers. The valid value ranges from 1 to 65535. In case not set, port from http settings will be used. This property is valid for Standard_v2 and WAF_v2 only.
   * minimum: 1
   * maximum: 65535
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public ApplicationGatewayProbePropertiesFormat protocol(ApplicationGatewayProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public ApplicationGatewayProtocol getProtocol() {
    return protocol;
  }

  public void setProtocol(ApplicationGatewayProtocol protocol) {
    this.protocol = protocol;
  }


  /**
   * The current provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public ApplicationGatewayProbePropertiesFormat timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public ApplicationGatewayProbePropertiesFormat unhealthyThreshold(Integer unhealthyThreshold) {
    this.unhealthyThreshold = unhealthyThreshold;
    return this;
  }

  /**
   * The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second to 20.
   * @return unhealthyThreshold
   */
  @javax.annotation.Nullable
  public Integer getUnhealthyThreshold() {
    return unhealthyThreshold;
  }

  public void setUnhealthyThreshold(Integer unhealthyThreshold) {
    this.unhealthyThreshold = unhealthyThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayProbePropertiesFormat applicationGatewayProbePropertiesFormat = (ApplicationGatewayProbePropertiesFormat) o;
    return Objects.equals(this.host, applicationGatewayProbePropertiesFormat.host) &&
        Objects.equals(this.interval, applicationGatewayProbePropertiesFormat.interval) &&
        Objects.equals(this.match, applicationGatewayProbePropertiesFormat.match) &&
        Objects.equals(this.minServers, applicationGatewayProbePropertiesFormat.minServers) &&
        Objects.equals(this.path, applicationGatewayProbePropertiesFormat.path) &&
        Objects.equals(this.pickHostNameFromBackendHttpSettings, applicationGatewayProbePropertiesFormat.pickHostNameFromBackendHttpSettings) &&
        Objects.equals(this.port, applicationGatewayProbePropertiesFormat.port) &&
        Objects.equals(this.protocol, applicationGatewayProbePropertiesFormat.protocol) &&
        Objects.equals(this.provisioningState, applicationGatewayProbePropertiesFormat.provisioningState) &&
        Objects.equals(this.timeout, applicationGatewayProbePropertiesFormat.timeout) &&
        Objects.equals(this.unhealthyThreshold, applicationGatewayProbePropertiesFormat.unhealthyThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, interval, match, minServers, path, pickHostNameFromBackendHttpSettings, port, protocol, provisioningState, timeout, unhealthyThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayProbePropertiesFormat {\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    minServers: ").append(toIndentedString(minServers)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pickHostNameFromBackendHttpSettings: ").append(toIndentedString(pickHostNameFromBackendHttpSettings)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    unhealthyThreshold: ").append(toIndentedString(unhealthyThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("host");
    openapiFields.add("interval");
    openapiFields.add("match");
    openapiFields.add("minServers");
    openapiFields.add("path");
    openapiFields.add("pickHostNameFromBackendHttpSettings");
    openapiFields.add("port");
    openapiFields.add("protocol");
    openapiFields.add("provisioningState");
    openapiFields.add("timeout");
    openapiFields.add("unhealthyThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayProbePropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayProbePropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayProbePropertiesFormat is not found in the empty JSON string", ApplicationGatewayProbePropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayProbePropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayProbePropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      // validate the optional field `match`
      if (jsonObj.get("match") != null && !jsonObj.get("match").isJsonNull()) {
        ApplicationGatewayProbeHealthResponseMatch.validateJsonElement(jsonObj.get("match"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ApplicationGatewayProtocol.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayProbePropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayProbePropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayProbePropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayProbePropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayProbePropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayProbePropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayProbePropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayProbePropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayProbePropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayProbePropertiesFormat
   */
  public static ApplicationGatewayProbePropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayProbePropertiesFormat.class);
  }

  /**
   * Convert an instance of ApplicationGatewayProbePropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

