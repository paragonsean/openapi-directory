/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayBackendAddressPoolPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayBackendAddressPoolPropertiesFormat::OAIApplicationGatewayBackendAddressPoolPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayBackendAddressPoolPropertiesFormat::OAIApplicationGatewayBackendAddressPoolPropertiesFormat() {
    this->initializeModel();
}

OAIApplicationGatewayBackendAddressPoolPropertiesFormat::~OAIApplicationGatewayBackendAddressPoolPropertiesFormat() {}

void OAIApplicationGatewayBackendAddressPoolPropertiesFormat::initializeModel() {

    m_backend_addresses_isSet = false;
    m_backend_addresses_isValid = false;

    m_backend_ip_configurations_isSet = false;
    m_backend_ip_configurations_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIApplicationGatewayBackendAddressPoolPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayBackendAddressPoolPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_backend_addresses_isValid = ::OpenAPI::fromJsonValue(m_backend_addresses, json[QString("backendAddresses")]);
    m_backend_addresses_isSet = !json[QString("backendAddresses")].isNull() && m_backend_addresses_isValid;

    m_backend_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_backend_ip_configurations, json[QString("backendIPConfigurations")]);
    m_backend_ip_configurations_isSet = !json[QString("backendIPConfigurations")].isNull() && m_backend_ip_configurations_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIApplicationGatewayBackendAddressPoolPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayBackendAddressPoolPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_addresses.size() > 0) {
        obj.insert(QString("backendAddresses"), ::OpenAPI::toJsonValue(m_backend_addresses));
    }
    if (m_backend_ip_configurations.size() > 0) {
        obj.insert(QString("backendIPConfigurations"), ::OpenAPI::toJsonValue(m_backend_ip_configurations));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QList<OAIApplicationGatewayBackendAddress> OAIApplicationGatewayBackendAddressPoolPropertiesFormat::getBackendAddresses() const {
    return m_backend_addresses;
}
void OAIApplicationGatewayBackendAddressPoolPropertiesFormat::setBackendAddresses(const QList<OAIApplicationGatewayBackendAddress> &backend_addresses) {
    m_backend_addresses = backend_addresses;
    m_backend_addresses_isSet = true;
}

bool OAIApplicationGatewayBackendAddressPoolPropertiesFormat::is_backend_addresses_Set() const{
    return m_backend_addresses_isSet;
}

bool OAIApplicationGatewayBackendAddressPoolPropertiesFormat::is_backend_addresses_Valid() const{
    return m_backend_addresses_isValid;
}

QList<OAIApplicationGatewayBackendHealthServer_ipConfiguration> OAIApplicationGatewayBackendAddressPoolPropertiesFormat::getBackendIpConfigurations() const {
    return m_backend_ip_configurations;
}
void OAIApplicationGatewayBackendAddressPoolPropertiesFormat::setBackendIpConfigurations(const QList<OAIApplicationGatewayBackendHealthServer_ipConfiguration> &backend_ip_configurations) {
    m_backend_ip_configurations = backend_ip_configurations;
    m_backend_ip_configurations_isSet = true;
}

bool OAIApplicationGatewayBackendAddressPoolPropertiesFormat::is_backend_ip_configurations_Set() const{
    return m_backend_ip_configurations_isSet;
}

bool OAIApplicationGatewayBackendAddressPoolPropertiesFormat::is_backend_ip_configurations_Valid() const{
    return m_backend_ip_configurations_isValid;
}

QString OAIApplicationGatewayBackendAddressPoolPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationGatewayBackendAddressPoolPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationGatewayBackendAddressPoolPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationGatewayBackendAddressPoolPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIApplicationGatewayBackendAddressPoolPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayBackendAddressPoolPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
