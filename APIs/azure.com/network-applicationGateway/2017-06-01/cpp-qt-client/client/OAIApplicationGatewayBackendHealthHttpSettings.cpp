/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayBackendHealthHttpSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayBackendHealthHttpSettings::OAIApplicationGatewayBackendHealthHttpSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayBackendHealthHttpSettings::OAIApplicationGatewayBackendHealthHttpSettings() {
    this->initializeModel();
}

OAIApplicationGatewayBackendHealthHttpSettings::~OAIApplicationGatewayBackendHealthHttpSettings() {}

void OAIApplicationGatewayBackendHealthHttpSettings::initializeModel() {

    m_backend_http_settings_isSet = false;
    m_backend_http_settings_isValid = false;

    m_servers_isSet = false;
    m_servers_isValid = false;
}

void OAIApplicationGatewayBackendHealthHttpSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayBackendHealthHttpSettings::fromJsonObject(QJsonObject json) {

    m_backend_http_settings_isValid = ::OpenAPI::fromJsonValue(m_backend_http_settings, json[QString("backendHttpSettings")]);
    m_backend_http_settings_isSet = !json[QString("backendHttpSettings")].isNull() && m_backend_http_settings_isValid;

    m_servers_isValid = ::OpenAPI::fromJsonValue(m_servers, json[QString("servers")]);
    m_servers_isSet = !json[QString("servers")].isNull() && m_servers_isValid;
}

QString OAIApplicationGatewayBackendHealthHttpSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayBackendHealthHttpSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_http_settings.isSet()) {
        obj.insert(QString("backendHttpSettings"), ::OpenAPI::toJsonValue(m_backend_http_settings));
    }
    if (m_servers.size() > 0) {
        obj.insert(QString("servers"), ::OpenAPI::toJsonValue(m_servers));
    }
    return obj;
}

OAIObject OAIApplicationGatewayBackendHealthHttpSettings::getBackendHttpSettings() const {
    return m_backend_http_settings;
}
void OAIApplicationGatewayBackendHealthHttpSettings::setBackendHttpSettings(const OAIObject &backend_http_settings) {
    m_backend_http_settings = backend_http_settings;
    m_backend_http_settings_isSet = true;
}

bool OAIApplicationGatewayBackendHealthHttpSettings::is_backend_http_settings_Set() const{
    return m_backend_http_settings_isSet;
}

bool OAIApplicationGatewayBackendHealthHttpSettings::is_backend_http_settings_Valid() const{
    return m_backend_http_settings_isValid;
}

QList<OAIApplicationGatewayBackendHealthServer> OAIApplicationGatewayBackendHealthHttpSettings::getServers() const {
    return m_servers;
}
void OAIApplicationGatewayBackendHealthHttpSettings::setServers(const QList<OAIApplicationGatewayBackendHealthServer> &servers) {
    m_servers = servers;
    m_servers_isSet = true;
}

bool OAIApplicationGatewayBackendHealthHttpSettings::is_servers_Set() const{
    return m_servers_isSet;
}

bool OAIApplicationGatewayBackendHealthHttpSettings::is_servers_Valid() const{
    return m_servers_isValid;
}

bool OAIApplicationGatewayBackendHealthHttpSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_http_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayBackendHealthHttpSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
