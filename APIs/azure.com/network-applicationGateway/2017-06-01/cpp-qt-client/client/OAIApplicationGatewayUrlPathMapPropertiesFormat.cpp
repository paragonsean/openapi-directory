/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayUrlPathMapPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayUrlPathMapPropertiesFormat::OAIApplicationGatewayUrlPathMapPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayUrlPathMapPropertiesFormat::OAIApplicationGatewayUrlPathMapPropertiesFormat() {
    this->initializeModel();
}

OAIApplicationGatewayUrlPathMapPropertiesFormat::~OAIApplicationGatewayUrlPathMapPropertiesFormat() {}

void OAIApplicationGatewayUrlPathMapPropertiesFormat::initializeModel() {

    m_default_backend_address_pool_isSet = false;
    m_default_backend_address_pool_isValid = false;

    m_default_backend_http_settings_isSet = false;
    m_default_backend_http_settings_isValid = false;

    m_default_redirect_configuration_isSet = false;
    m_default_redirect_configuration_isValid = false;

    m_path_rules_isSet = false;
    m_path_rules_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIApplicationGatewayUrlPathMapPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayUrlPathMapPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_default_backend_address_pool_isValid = ::OpenAPI::fromJsonValue(m_default_backend_address_pool, json[QString("defaultBackendAddressPool")]);
    m_default_backend_address_pool_isSet = !json[QString("defaultBackendAddressPool")].isNull() && m_default_backend_address_pool_isValid;

    m_default_backend_http_settings_isValid = ::OpenAPI::fromJsonValue(m_default_backend_http_settings, json[QString("defaultBackendHttpSettings")]);
    m_default_backend_http_settings_isSet = !json[QString("defaultBackendHttpSettings")].isNull() && m_default_backend_http_settings_isValid;

    m_default_redirect_configuration_isValid = ::OpenAPI::fromJsonValue(m_default_redirect_configuration, json[QString("defaultRedirectConfiguration")]);
    m_default_redirect_configuration_isSet = !json[QString("defaultRedirectConfiguration")].isNull() && m_default_redirect_configuration_isValid;

    m_path_rules_isValid = ::OpenAPI::fromJsonValue(m_path_rules, json[QString("pathRules")]);
    m_path_rules_isSet = !json[QString("pathRules")].isNull() && m_path_rules_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIApplicationGatewayUrlPathMapPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayUrlPathMapPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_default_backend_address_pool.isSet()) {
        obj.insert(QString("defaultBackendAddressPool"), ::OpenAPI::toJsonValue(m_default_backend_address_pool));
    }
    if (m_default_backend_http_settings.isSet()) {
        obj.insert(QString("defaultBackendHttpSettings"), ::OpenAPI::toJsonValue(m_default_backend_http_settings));
    }
    if (m_default_redirect_configuration.isSet()) {
        obj.insert(QString("defaultRedirectConfiguration"), ::OpenAPI::toJsonValue(m_default_redirect_configuration));
    }
    if (m_path_rules.size() > 0) {
        obj.insert(QString("pathRules"), ::OpenAPI::toJsonValue(m_path_rules));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

OAI0 OAIApplicationGatewayUrlPathMapPropertiesFormat::getDefaultBackendAddressPool() const {
    return m_default_backend_address_pool;
}
void OAIApplicationGatewayUrlPathMapPropertiesFormat::setDefaultBackendAddressPool(const OAI0 &default_backend_address_pool) {
    m_default_backend_address_pool = default_backend_address_pool;
    m_default_backend_address_pool_isSet = true;
}

bool OAIApplicationGatewayUrlPathMapPropertiesFormat::is_default_backend_address_pool_Set() const{
    return m_default_backend_address_pool_isSet;
}

bool OAIApplicationGatewayUrlPathMapPropertiesFormat::is_default_backend_address_pool_Valid() const{
    return m_default_backend_address_pool_isValid;
}

OAI0 OAIApplicationGatewayUrlPathMapPropertiesFormat::getDefaultBackendHttpSettings() const {
    return m_default_backend_http_settings;
}
void OAIApplicationGatewayUrlPathMapPropertiesFormat::setDefaultBackendHttpSettings(const OAI0 &default_backend_http_settings) {
    m_default_backend_http_settings = default_backend_http_settings;
    m_default_backend_http_settings_isSet = true;
}

bool OAIApplicationGatewayUrlPathMapPropertiesFormat::is_default_backend_http_settings_Set() const{
    return m_default_backend_http_settings_isSet;
}

bool OAIApplicationGatewayUrlPathMapPropertiesFormat::is_default_backend_http_settings_Valid() const{
    return m_default_backend_http_settings_isValid;
}

OAI0 OAIApplicationGatewayUrlPathMapPropertiesFormat::getDefaultRedirectConfiguration() const {
    return m_default_redirect_configuration;
}
void OAIApplicationGatewayUrlPathMapPropertiesFormat::setDefaultRedirectConfiguration(const OAI0 &default_redirect_configuration) {
    m_default_redirect_configuration = default_redirect_configuration;
    m_default_redirect_configuration_isSet = true;
}

bool OAIApplicationGatewayUrlPathMapPropertiesFormat::is_default_redirect_configuration_Set() const{
    return m_default_redirect_configuration_isSet;
}

bool OAIApplicationGatewayUrlPathMapPropertiesFormat::is_default_redirect_configuration_Valid() const{
    return m_default_redirect_configuration_isValid;
}

QList<OAIApplicationGatewayPathRule> OAIApplicationGatewayUrlPathMapPropertiesFormat::getPathRules() const {
    return m_path_rules;
}
void OAIApplicationGatewayUrlPathMapPropertiesFormat::setPathRules(const QList<OAIApplicationGatewayPathRule> &path_rules) {
    m_path_rules = path_rules;
    m_path_rules_isSet = true;
}

bool OAIApplicationGatewayUrlPathMapPropertiesFormat::is_path_rules_Set() const{
    return m_path_rules_isSet;
}

bool OAIApplicationGatewayUrlPathMapPropertiesFormat::is_path_rules_Valid() const{
    return m_path_rules_isValid;
}

QString OAIApplicationGatewayUrlPathMapPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationGatewayUrlPathMapPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationGatewayUrlPathMapPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationGatewayUrlPathMapPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIApplicationGatewayUrlPathMapPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_backend_address_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_backend_http_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_redirect_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayUrlPathMapPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
