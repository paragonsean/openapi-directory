/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CipherSuitesEnum;
import org.openapitools.client.model.PolicyNameEnum;
import org.openapitools.client.model.ProtocolsEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Application Gateway Ssl policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:30.379498-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewaySslPolicy {
  public static final String SERIALIZED_NAME_CIPHER_SUITES = "cipherSuites";
  @SerializedName(SERIALIZED_NAME_CIPHER_SUITES)
  private List<CipherSuitesEnum> cipherSuites = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLED_SSL_PROTOCOLS = "disabledSslProtocols";
  @SerializedName(SERIALIZED_NAME_DISABLED_SSL_PROTOCOLS)
  private List<ProtocolsEnum> disabledSslProtocols = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIN_PROTOCOL_VERSION = "minProtocolVersion";
  @SerializedName(SERIALIZED_NAME_MIN_PROTOCOL_VERSION)
  private ProtocolsEnum minProtocolVersion;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private PolicyNameEnum policyName;

  /**
   * Type of Ssl Policy
   */
  @JsonAdapter(PolicyTypeEnum.Adapter.class)
  public enum PolicyTypeEnum {
    PREDEFINED("Predefined"),
    
    CUSTOM("Custom");

    private String value;

    PolicyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyTypeEnum fromValue(String value) {
      for (PolicyTypeEnum b : PolicyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PolicyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POLICY_TYPE = "policyType";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE)
  private PolicyTypeEnum policyType;

  public ApplicationGatewaySslPolicy() {
  }

  public ApplicationGatewaySslPolicy cipherSuites(List<CipherSuitesEnum> cipherSuites) {
    this.cipherSuites = cipherSuites;
    return this;
  }

  public ApplicationGatewaySslPolicy addCipherSuitesItem(CipherSuitesEnum cipherSuitesItem) {
    if (this.cipherSuites == null) {
      this.cipherSuites = new ArrayList<>();
    }
    this.cipherSuites.add(cipherSuitesItem);
    return this;
  }

  /**
   * Ssl cipher suites to be enabled in the specified order to application gateway.
   * @return cipherSuites
   */
  @javax.annotation.Nullable
  public List<CipherSuitesEnum> getCipherSuites() {
    return cipherSuites;
  }

  public void setCipherSuites(List<CipherSuitesEnum> cipherSuites) {
    this.cipherSuites = cipherSuites;
  }


  public ApplicationGatewaySslPolicy disabledSslProtocols(List<ProtocolsEnum> disabledSslProtocols) {
    this.disabledSslProtocols = disabledSslProtocols;
    return this;
  }

  public ApplicationGatewaySslPolicy addDisabledSslProtocolsItem(ProtocolsEnum disabledSslProtocolsItem) {
    if (this.disabledSslProtocols == null) {
      this.disabledSslProtocols = new ArrayList<>();
    }
    this.disabledSslProtocols.add(disabledSslProtocolsItem);
    return this;
  }

  /**
   * Ssl protocols to be disabled on application gateway.
   * @return disabledSslProtocols
   */
  @javax.annotation.Nullable
  public List<ProtocolsEnum> getDisabledSslProtocols() {
    return disabledSslProtocols;
  }

  public void setDisabledSslProtocols(List<ProtocolsEnum> disabledSslProtocols) {
    this.disabledSslProtocols = disabledSslProtocols;
  }


  public ApplicationGatewaySslPolicy minProtocolVersion(ProtocolsEnum minProtocolVersion) {
    this.minProtocolVersion = minProtocolVersion;
    return this;
  }

  /**
   * Get minProtocolVersion
   * @return minProtocolVersion
   */
  @javax.annotation.Nullable
  public ProtocolsEnum getMinProtocolVersion() {
    return minProtocolVersion;
  }

  public void setMinProtocolVersion(ProtocolsEnum minProtocolVersion) {
    this.minProtocolVersion = minProtocolVersion;
  }


  public ApplicationGatewaySslPolicy policyName(PolicyNameEnum policyName) {
    this.policyName = policyName;
    return this;
  }

  /**
   * Get policyName
   * @return policyName
   */
  @javax.annotation.Nullable
  public PolicyNameEnum getPolicyName() {
    return policyName;
  }

  public void setPolicyName(PolicyNameEnum policyName) {
    this.policyName = policyName;
  }


  public ApplicationGatewaySslPolicy policyType(PolicyTypeEnum policyType) {
    this.policyType = policyType;
    return this;
  }

  /**
   * Type of Ssl Policy
   * @return policyType
   */
  @javax.annotation.Nullable
  public PolicyTypeEnum getPolicyType() {
    return policyType;
  }

  public void setPolicyType(PolicyTypeEnum policyType) {
    this.policyType = policyType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewaySslPolicy applicationGatewaySslPolicy = (ApplicationGatewaySslPolicy) o;
    return Objects.equals(this.cipherSuites, applicationGatewaySslPolicy.cipherSuites) &&
        Objects.equals(this.disabledSslProtocols, applicationGatewaySslPolicy.disabledSslProtocols) &&
        Objects.equals(this.minProtocolVersion, applicationGatewaySslPolicy.minProtocolVersion) &&
        Objects.equals(this.policyName, applicationGatewaySslPolicy.policyName) &&
        Objects.equals(this.policyType, applicationGatewaySslPolicy.policyType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cipherSuites, disabledSslProtocols, minProtocolVersion, policyName, policyType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewaySslPolicy {\n");
    sb.append("    cipherSuites: ").append(toIndentedString(cipherSuites)).append("\n");
    sb.append("    disabledSslProtocols: ").append(toIndentedString(disabledSslProtocols)).append("\n");
    sb.append("    minProtocolVersion: ").append(toIndentedString(minProtocolVersion)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cipherSuites");
    openapiFields.add("disabledSslProtocols");
    openapiFields.add("minProtocolVersion");
    openapiFields.add("policyName");
    openapiFields.add("policyType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewaySslPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewaySslPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewaySslPolicy is not found in the empty JSON string", ApplicationGatewaySslPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewaySslPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewaySslPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("cipherSuites") != null && !jsonObj.get("cipherSuites").isJsonNull() && !jsonObj.get("cipherSuites").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cipherSuites` to be an array in the JSON string but got `%s`", jsonObj.get("cipherSuites").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("disabledSslProtocols") != null && !jsonObj.get("disabledSslProtocols").isJsonNull() && !jsonObj.get("disabledSslProtocols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `disabledSslProtocols` to be an array in the JSON string but got `%s`", jsonObj.get("disabledSslProtocols").toString()));
      }
      // validate the optional field `minProtocolVersion`
      if (jsonObj.get("minProtocolVersion") != null && !jsonObj.get("minProtocolVersion").isJsonNull()) {
        ProtocolsEnum.validateJsonElement(jsonObj.get("minProtocolVersion"));
      }
      // validate the optional field `policyName`
      if (jsonObj.get("policyName") != null && !jsonObj.get("policyName").isJsonNull()) {
        PolicyNameEnum.validateJsonElement(jsonObj.get("policyName"));
      }
      if ((jsonObj.get("policyType") != null && !jsonObj.get("policyType").isJsonNull()) && !jsonObj.get("policyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyType").toString()));
      }
      // validate the optional field `policyType`
      if (jsonObj.get("policyType") != null && !jsonObj.get("policyType").isJsonNull()) {
        PolicyTypeEnum.validateJsonElement(jsonObj.get("policyType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewaySslPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewaySslPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewaySslPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewaySslPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewaySslPolicy>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewaySslPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewaySslPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewaySslPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewaySslPolicy
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewaySslPolicy
   */
  public static ApplicationGatewaySslPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewaySslPolicy.class);
  }

  /**
   * Convert an instance of ApplicationGatewaySslPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

