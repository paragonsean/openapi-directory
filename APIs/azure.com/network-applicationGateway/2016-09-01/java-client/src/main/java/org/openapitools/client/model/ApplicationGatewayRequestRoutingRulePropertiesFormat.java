/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationGatewayHttpListenerPropertiesFormatFrontendPort;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of request routing rule of the application gateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:26.594280-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayRequestRoutingRulePropertiesFormat {
  public static final String SERIALIZED_NAME_BACKEND_ADDRESS_POOL = "backendAddressPool";
  @SerializedName(SERIALIZED_NAME_BACKEND_ADDRESS_POOL)
  private ApplicationGatewayHttpListenerPropertiesFormatFrontendPort backendAddressPool;

  public static final String SERIALIZED_NAME_BACKEND_HTTP_SETTINGS = "backendHttpSettings";
  @SerializedName(SERIALIZED_NAME_BACKEND_HTTP_SETTINGS)
  private ApplicationGatewayHttpListenerPropertiesFormatFrontendPort backendHttpSettings;

  public static final String SERIALIZED_NAME_HTTP_LISTENER = "httpListener";
  @SerializedName(SERIALIZED_NAME_HTTP_LISTENER)
  private ApplicationGatewayHttpListenerPropertiesFormatFrontendPort httpListener;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  /**
   * Rule type. Possible values are: &#39;Basic&#39; and &#39;PathBasedRouting&#39;.
   */
  @JsonAdapter(RuleTypeEnum.Adapter.class)
  public enum RuleTypeEnum {
    BASIC("Basic"),
    
    PATH_BASED_ROUTING("PathBasedRouting");

    private String value;

    RuleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuleTypeEnum fromValue(String value) {
      for (RuleTypeEnum b : RuleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RuleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULE_TYPE = "ruleType";
  @SerializedName(SERIALIZED_NAME_RULE_TYPE)
  private RuleTypeEnum ruleType;

  public static final String SERIALIZED_NAME_URL_PATH_MAP = "urlPathMap";
  @SerializedName(SERIALIZED_NAME_URL_PATH_MAP)
  private ApplicationGatewayHttpListenerPropertiesFormatFrontendPort urlPathMap;

  public ApplicationGatewayRequestRoutingRulePropertiesFormat() {
  }

  public ApplicationGatewayRequestRoutingRulePropertiesFormat backendAddressPool(ApplicationGatewayHttpListenerPropertiesFormatFrontendPort backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
    return this;
  }

  /**
   * Get backendAddressPool
   * @return backendAddressPool
   */
  @javax.annotation.Nullable
  public ApplicationGatewayHttpListenerPropertiesFormatFrontendPort getBackendAddressPool() {
    return backendAddressPool;
  }

  public void setBackendAddressPool(ApplicationGatewayHttpListenerPropertiesFormatFrontendPort backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
  }


  public ApplicationGatewayRequestRoutingRulePropertiesFormat backendHttpSettings(ApplicationGatewayHttpListenerPropertiesFormatFrontendPort backendHttpSettings) {
    this.backendHttpSettings = backendHttpSettings;
    return this;
  }

  /**
   * Get backendHttpSettings
   * @return backendHttpSettings
   */
  @javax.annotation.Nullable
  public ApplicationGatewayHttpListenerPropertiesFormatFrontendPort getBackendHttpSettings() {
    return backendHttpSettings;
  }

  public void setBackendHttpSettings(ApplicationGatewayHttpListenerPropertiesFormatFrontendPort backendHttpSettings) {
    this.backendHttpSettings = backendHttpSettings;
  }


  public ApplicationGatewayRequestRoutingRulePropertiesFormat httpListener(ApplicationGatewayHttpListenerPropertiesFormatFrontendPort httpListener) {
    this.httpListener = httpListener;
    return this;
  }

  /**
   * Get httpListener
   * @return httpListener
   */
  @javax.annotation.Nullable
  public ApplicationGatewayHttpListenerPropertiesFormatFrontendPort getHttpListener() {
    return httpListener;
  }

  public void setHttpListener(ApplicationGatewayHttpListenerPropertiesFormatFrontendPort httpListener) {
    this.httpListener = httpListener;
  }


  public ApplicationGatewayRequestRoutingRulePropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Provisioning state of the request routing rule resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ApplicationGatewayRequestRoutingRulePropertiesFormat ruleType(RuleTypeEnum ruleType) {
    this.ruleType = ruleType;
    return this;
  }

  /**
   * Rule type. Possible values are: &#39;Basic&#39; and &#39;PathBasedRouting&#39;.
   * @return ruleType
   */
  @javax.annotation.Nullable
  public RuleTypeEnum getRuleType() {
    return ruleType;
  }

  public void setRuleType(RuleTypeEnum ruleType) {
    this.ruleType = ruleType;
  }


  public ApplicationGatewayRequestRoutingRulePropertiesFormat urlPathMap(ApplicationGatewayHttpListenerPropertiesFormatFrontendPort urlPathMap) {
    this.urlPathMap = urlPathMap;
    return this;
  }

  /**
   * Get urlPathMap
   * @return urlPathMap
   */
  @javax.annotation.Nullable
  public ApplicationGatewayHttpListenerPropertiesFormatFrontendPort getUrlPathMap() {
    return urlPathMap;
  }

  public void setUrlPathMap(ApplicationGatewayHttpListenerPropertiesFormatFrontendPort urlPathMap) {
    this.urlPathMap = urlPathMap;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayRequestRoutingRulePropertiesFormat applicationGatewayRequestRoutingRulePropertiesFormat = (ApplicationGatewayRequestRoutingRulePropertiesFormat) o;
    return Objects.equals(this.backendAddressPool, applicationGatewayRequestRoutingRulePropertiesFormat.backendAddressPool) &&
        Objects.equals(this.backendHttpSettings, applicationGatewayRequestRoutingRulePropertiesFormat.backendHttpSettings) &&
        Objects.equals(this.httpListener, applicationGatewayRequestRoutingRulePropertiesFormat.httpListener) &&
        Objects.equals(this.provisioningState, applicationGatewayRequestRoutingRulePropertiesFormat.provisioningState) &&
        Objects.equals(this.ruleType, applicationGatewayRequestRoutingRulePropertiesFormat.ruleType) &&
        Objects.equals(this.urlPathMap, applicationGatewayRequestRoutingRulePropertiesFormat.urlPathMap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendAddressPool, backendHttpSettings, httpListener, provisioningState, ruleType, urlPathMap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayRequestRoutingRulePropertiesFormat {\n");
    sb.append("    backendAddressPool: ").append(toIndentedString(backendAddressPool)).append("\n");
    sb.append("    backendHttpSettings: ").append(toIndentedString(backendHttpSettings)).append("\n");
    sb.append("    httpListener: ").append(toIndentedString(httpListener)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    ruleType: ").append(toIndentedString(ruleType)).append("\n");
    sb.append("    urlPathMap: ").append(toIndentedString(urlPathMap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendAddressPool");
    openapiFields.add("backendHttpSettings");
    openapiFields.add("httpListener");
    openapiFields.add("provisioningState");
    openapiFields.add("ruleType");
    openapiFields.add("urlPathMap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayRequestRoutingRulePropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayRequestRoutingRulePropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayRequestRoutingRulePropertiesFormat is not found in the empty JSON string", ApplicationGatewayRequestRoutingRulePropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayRequestRoutingRulePropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayRequestRoutingRulePropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backendAddressPool`
      if (jsonObj.get("backendAddressPool") != null && !jsonObj.get("backendAddressPool").isJsonNull()) {
        ApplicationGatewayHttpListenerPropertiesFormatFrontendPort.validateJsonElement(jsonObj.get("backendAddressPool"));
      }
      // validate the optional field `backendHttpSettings`
      if (jsonObj.get("backendHttpSettings") != null && !jsonObj.get("backendHttpSettings").isJsonNull()) {
        ApplicationGatewayHttpListenerPropertiesFormatFrontendPort.validateJsonElement(jsonObj.get("backendHttpSettings"));
      }
      // validate the optional field `httpListener`
      if (jsonObj.get("httpListener") != null && !jsonObj.get("httpListener").isJsonNull()) {
        ApplicationGatewayHttpListenerPropertiesFormatFrontendPort.validateJsonElement(jsonObj.get("httpListener"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("ruleType") != null && !jsonObj.get("ruleType").isJsonNull()) && !jsonObj.get("ruleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleType").toString()));
      }
      // validate the optional field `ruleType`
      if (jsonObj.get("ruleType") != null && !jsonObj.get("ruleType").isJsonNull()) {
        RuleTypeEnum.validateJsonElement(jsonObj.get("ruleType"));
      }
      // validate the optional field `urlPathMap`
      if (jsonObj.get("urlPathMap") != null && !jsonObj.get("urlPathMap").isJsonNull()) {
        ApplicationGatewayHttpListenerPropertiesFormatFrontendPort.validateJsonElement(jsonObj.get("urlPathMap"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayRequestRoutingRulePropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayRequestRoutingRulePropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayRequestRoutingRulePropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayRequestRoutingRulePropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayRequestRoutingRulePropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayRequestRoutingRulePropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayRequestRoutingRulePropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayRequestRoutingRulePropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayRequestRoutingRulePropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayRequestRoutingRulePropertiesFormat
   */
  public static ApplicationGatewayRequestRoutingRulePropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayRequestRoutingRulePropertiesFormat.class);
  }

  /**
   * Convert an instance of ApplicationGatewayRequestRoutingRulePropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

