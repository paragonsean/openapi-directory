# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, description: str=None, destination_address_prefix: str=None, destination_port_range: str=None, direction: str=None, priority: int=None, protocol: str=None, provisioning_state: str=None, source_address_prefix: str=None, source_port_range: str=None):
        """ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties - a model defined in OpenAPI

        :param access: The access of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :param description: The description of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :param destination_address_prefix: The destination_address_prefix of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :param destination_port_range: The destination_port_range of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :param direction: The direction of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :param priority: The priority of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :param protocol: The protocol of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :param source_address_prefix: The source_address_prefix of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :param source_port_range: The source_port_range of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        """
        self.openapi_types = {
            'access': str,
            'description': str,
            'destination_address_prefix': str,
            'destination_port_range': str,
            'direction': str,
            'priority': int,
            'protocol': str,
            'provisioning_state': str,
            'source_address_prefix': str,
            'source_port_range': str
        }

        self.attribute_map = {
            'access': 'access',
            'description': 'description',
            'destination_address_prefix': 'destinationAddressPrefix',
            'destination_port_range': 'destinationPortRange',
            'direction': 'direction',
            'priority': 'priority',
            'protocol': 'protocol',
            'provisioning_state': 'provisioningState',
            'source_address_prefix': 'sourceAddressPrefix',
            'source_port_range': 'sourcePortRange'
        }

        self._access = access
        self._description = description
        self._destination_address_prefix = destination_address_prefix
        self._destination_port_range = destination_port_range
        self._direction = direction
        self._priority = priority
        self._protocol = protocol
        self._provisioning_state = provisioning_state
        self._source_address_prefix = source_address_prefix
        self._source_port_range = source_port_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayBackendAddressPoolPropertiesFormat_backendIPConfigurations_inner_properties_subnet_properties_networkSecurityGroup_properties_securityRules_inner_properties of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.

        :return: The access of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.

        :param access: The access of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :type access: str
        """
        allowed_values = ["Allow", "Deny"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def description(self):
        """Gets the description of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        A description for this rule. Restricted to 140 chars.

        :return: The description of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        A description for this rule. Restricted to 140 chars.

        :param description: The description of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :type description: str
        """

        self._description = description

    @property
    def destination_address_prefix(self):
        """Gets the destination_address_prefix of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The destination address prefix. CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.

        :return: The destination_address_prefix of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :rtype: str
        """
        return self._destination_address_prefix

    @destination_address_prefix.setter
    def destination_address_prefix(self, destination_address_prefix):
        """Sets the destination_address_prefix of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The destination address prefix. CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.

        :param destination_address_prefix: The destination_address_prefix of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :type destination_address_prefix: str
        """
        if destination_address_prefix is None:
            raise ValueError("Invalid value for `destination_address_prefix`, must not be `None`")

        self._destination_address_prefix = destination_address_prefix

    @property
    def destination_port_range(self):
        """Gets the destination_port_range of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.

        :return: The destination_port_range of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :rtype: str
        """
        return self._destination_port_range

    @destination_port_range.setter
    def destination_port_range(self, destination_port_range):
        """Sets the destination_port_range of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.

        :param destination_port_range: The destination_port_range of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :type destination_port_range: str
        """

        self._destination_port_range = destination_port_range

    @property
    def direction(self):
        """Gets the direction of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.

        :return: The direction of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.

        :param direction: The direction of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :type direction: str
        """
        allowed_values = ["Inbound", "Outbound"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def priority(self):
        """Gets the priority of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.

        :return: The priority of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.

        :param priority: The priority of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :type priority: int
        """

        self._priority = priority

    @property
    def protocol(self):
        """Gets the protocol of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.

        :return: The protocol of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.

        :param protocol: The protocol of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :type protocol: str
        """
        allowed_values = ["Tcp", "Udp", "*"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :return: The provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :param provisioning_state: The provisioning_state of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def source_address_prefix(self):
        """Gets the source_address_prefix of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. 

        :return: The source_address_prefix of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :rtype: str
        """
        return self._source_address_prefix

    @source_address_prefix.setter
    def source_address_prefix(self, source_address_prefix):
        """Sets the source_address_prefix of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. 

        :param source_address_prefix: The source_address_prefix of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :type source_address_prefix: str
        """
        if source_address_prefix is None:
            raise ValueError("Invalid value for `source_address_prefix`, must not be `None`")

        self._source_address_prefix = source_address_prefix

    @property
    def source_port_range(self):
        """Gets the source_port_range of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.

        :return: The source_port_range of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :rtype: str
        """
        return self._source_port_range

    @source_port_range.setter
    def source_port_range(self, source_port_range):
        """Sets the source_port_range of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.

        The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.

        :param source_port_range: The source_port_range of this ApplicationGatewayBackendAddressPoolPropertiesFormatBackendIPConfigurationsInnerPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesSecurityRulesInnerProperties.
        :type source_port_range: str
        """

        self._source_port_range = source_port_range
