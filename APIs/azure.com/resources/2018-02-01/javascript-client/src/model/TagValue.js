/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TagCount from './TagCount';

/**
 * The TagValue model module.
 * @module model/TagValue
 * @version 2018-02-01
 */
class TagValue {
    /**
     * Constructs a new <code>TagValue</code>.
     * Tag information.
     * @alias module:model/TagValue
     */
    constructor() { 
        
        TagValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TagValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagValue} obj Optional instance to populate.
     * @return {module:model/TagValue} The populated <code>TagValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagValue();

            if (data.hasOwnProperty('count')) {
                obj['count'] = TagCount.constructFromObject(data['count']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('tagValue')) {
                obj['tagValue'] = ApiClient.convertToType(data['tagValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagValue</code>.
     */
    static validateJSON(data) {
        // validate the optional field `count`
        if (data['count']) { // data not null
          TagCount.validateJSON(data['count']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['tagValue'] && !(typeof data['tagValue'] === 'string' || data['tagValue'] instanceof String)) {
            throw new Error("Expected the field `tagValue` to be a primitive type in the JSON string but got " + data['tagValue']);
        }

        return true;
    }


}



/**
 * @member {module:model/TagCount} count
 */
TagValue.prototype['count'] = undefined;

/**
 * The tag ID.
 * @member {String} id
 */
TagValue.prototype['id'] = undefined;

/**
 * The tag value.
 * @member {String} tagValue
 */
TagValue.prototype['tagValue'] = undefined;






export default TagValue;

