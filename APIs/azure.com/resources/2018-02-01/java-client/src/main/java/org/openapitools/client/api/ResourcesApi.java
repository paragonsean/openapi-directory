/*
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GenericResource;
import org.openapitools.client.model.ResourceListResult;
import org.openapitools.client.model.ResourcesMoveInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for resourcesCheckExistence
     * @param resourceGroupName The name of the resource group containing the resource to check. The name is case insensitive. (required)
     * @param resourceProviderNamespace The resource provider of the resource to check. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type. (required)
     * @param resourceName The name of the resource to check whether it exists. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesCheckExistenceCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderNamespace" + "}", localVarApiClient.escapeString(resourceProviderNamespace.toString()))
            .replace("{" + "parentResourcePath" + "}", localVarApiClient.escapeString(parentResourcePath.toString()))
            .replace("{" + "resourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesCheckExistenceValidateBeforeCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling resourcesCheckExistence(Async)");
        }

        // verify the required parameter 'resourceProviderNamespace' is set
        if (resourceProviderNamespace == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderNamespace' when calling resourcesCheckExistence(Async)");
        }

        // verify the required parameter 'parentResourcePath' is set
        if (parentResourcePath == null) {
            throw new ApiException("Missing the required parameter 'parentResourcePath' when calling resourcesCheckExistence(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling resourcesCheckExistence(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling resourcesCheckExistence(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourcesCheckExistence(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling resourcesCheckExistence(Async)");
        }

        return resourcesCheckExistenceCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Checks whether a resource exists.
     * @param resourceGroupName The name of the resource group containing the resource to check. The name is case insensitive. (required)
     * @param resourceProviderNamespace The resource provider of the resource to check. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type. (required)
     * @param resourceName The name of the resource to check whether it exists. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void resourcesCheckExistence(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        resourcesCheckExistenceWithHttpInfo(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Checks whether a resource exists.
     * @param resourceGroupName The name of the resource group containing the resource to check. The name is case insensitive. (required)
     * @param resourceProviderNamespace The resource provider of the resource to check. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type. (required)
     * @param resourceName The name of the resource to check whether it exists. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resourcesCheckExistenceWithHttpInfo(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = resourcesCheckExistenceValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks whether a resource exists.
     * @param resourceGroupName The name of the resource group containing the resource to check. The name is case insensitive. (required)
     * @param resourceProviderNamespace The resource provider of the resource to check. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type. (required)
     * @param resourceName The name of the resource to check whether it exists. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesCheckExistenceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesCheckExistenceValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesCheckExistenceById
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesCheckExistenceByIdCall(String resourceId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceId}"
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesCheckExistenceByIdValidateBeforeCall(String resourceId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling resourcesCheckExistenceById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourcesCheckExistenceById(Async)");
        }

        return resourcesCheckExistenceByIdCall(resourceId, apiVersion, _callback);

    }

    /**
     * 
     * Checks by ID whether a resource exists.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void resourcesCheckExistenceById(String resourceId, String apiVersion) throws ApiException {
        resourcesCheckExistenceByIdWithHttpInfo(resourceId, apiVersion);
    }

    /**
     * 
     * Checks by ID whether a resource exists.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resourcesCheckExistenceByIdWithHttpInfo(String resourceId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = resourcesCheckExistenceByIdValidateBeforeCall(resourceId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks by ID whether a resource exists.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesCheckExistenceByIdAsync(String resourceId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesCheckExistenceByIdValidateBeforeCall(resourceId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesCreateOrUpdate
     * @param resourceGroupName The name of the resource group for the resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource to create. (required)
     * @param resourceName The name of the resource to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for creating or updating the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesCreateOrUpdateCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, GenericResource parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderNamespace" + "}", localVarApiClient.escapeString(resourceProviderNamespace.toString()))
            .replace("{" + "parentResourcePath" + "}", localVarApiClient.escapeString(parentResourcePath.toString()))
            .replace("{" + "resourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, GenericResource parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling resourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceProviderNamespace' is set
        if (resourceProviderNamespace == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderNamespace' when calling resourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parentResourcePath' is set
        if (parentResourcePath == null) {
            throw new ApiException("Missing the required parameter 'parentResourcePath' when calling resourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling resourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling resourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling resourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling resourcesCreateOrUpdate(Async)");
        }

        return resourcesCreateOrUpdateCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates a resource.
     * @param resourceGroupName The name of the resource group for the resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource to create. (required)
     * @param resourceName The name of the resource to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for creating or updating the resource. (required)
     * @return GenericResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public GenericResource resourcesCreateOrUpdate(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, GenericResource parameters) throws ApiException {
        ApiResponse<GenericResource> localVarResp = resourcesCreateOrUpdateWithHttpInfo(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a resource.
     * @param resourceGroupName The name of the resource group for the resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource to create. (required)
     * @param resourceName The name of the resource to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for creating or updating the resource. (required)
     * @return ApiResponse&lt;GenericResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResource> resourcesCreateOrUpdateWithHttpInfo(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, GenericResource parameters) throws ApiException {
        okhttp3.Call localVarCall = resourcesCreateOrUpdateValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<GenericResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a resource.
     * @param resourceGroupName The name of the resource group for the resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource to create. (required)
     * @param resourceName The name of the resource to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for creating or updating the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesCreateOrUpdateAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, GenericResource parameters, final ApiCallback<GenericResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesCreateOrUpdateValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<GenericResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesCreateOrUpdateById
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Create or update resource parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesCreateOrUpdateByIdCall(String resourceId, String apiVersion, GenericResource parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/{resourceId}"
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesCreateOrUpdateByIdValidateBeforeCall(String resourceId, String apiVersion, GenericResource parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling resourcesCreateOrUpdateById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourcesCreateOrUpdateById(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling resourcesCreateOrUpdateById(Async)");
        }

        return resourcesCreateOrUpdateByIdCall(resourceId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Create a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Create or update resource parameters. (required)
     * @return GenericResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public GenericResource resourcesCreateOrUpdateById(String resourceId, String apiVersion, GenericResource parameters) throws ApiException {
        ApiResponse<GenericResource> localVarResp = resourcesCreateOrUpdateByIdWithHttpInfo(resourceId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Create or update resource parameters. (required)
     * @return ApiResponse&lt;GenericResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResource> resourcesCreateOrUpdateByIdWithHttpInfo(String resourceId, String apiVersion, GenericResource parameters) throws ApiException {
        okhttp3.Call localVarCall = resourcesCreateOrUpdateByIdValidateBeforeCall(resourceId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<GenericResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Create or update resource parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesCreateOrUpdateByIdAsync(String resourceId, String apiVersion, GenericResource parameters, final ApiCallback<GenericResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesCreateOrUpdateByIdValidateBeforeCall(resourceId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<GenericResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesDelete
     * @param resourceGroupName The name of the resource group that contains the resource to delete. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type. (required)
     * @param resourceName The name of the resource to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesDeleteCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderNamespace" + "}", localVarApiClient.escapeString(resourceProviderNamespace.toString()))
            .replace("{" + "parentResourcePath" + "}", localVarApiClient.escapeString(parentResourcePath.toString()))
            .replace("{" + "resourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesDeleteValidateBeforeCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling resourcesDelete(Async)");
        }

        // verify the required parameter 'resourceProviderNamespace' is set
        if (resourceProviderNamespace == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderNamespace' when calling resourcesDelete(Async)");
        }

        // verify the required parameter 'parentResourcePath' is set
        if (parentResourcePath == null) {
            throw new ApiException("Missing the required parameter 'parentResourcePath' when calling resourcesDelete(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling resourcesDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling resourcesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourcesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling resourcesDelete(Async)");
        }

        return resourcesDeleteCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a resource.
     * @param resourceGroupName The name of the resource group that contains the resource to delete. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type. (required)
     * @param resourceName The name of the resource to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void resourcesDelete(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        resourcesDeleteWithHttpInfo(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a resource.
     * @param resourceGroupName The name of the resource group that contains the resource to delete. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type. (required)
     * @param resourceName The name of the resource to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resourcesDeleteWithHttpInfo(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = resourcesDeleteValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a resource.
     * @param resourceGroupName The name of the resource group that contains the resource to delete. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type. (required)
     * @param resourceName The name of the resource to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesDeleteAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesDeleteValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesDeleteById
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesDeleteByIdCall(String resourceId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceId}"
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesDeleteByIdValidateBeforeCall(String resourceId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling resourcesDeleteById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourcesDeleteById(Async)");
        }

        return resourcesDeleteByIdCall(resourceId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void resourcesDeleteById(String resourceId, String apiVersion) throws ApiException {
        resourcesDeleteByIdWithHttpInfo(resourceId, apiVersion);
    }

    /**
     * 
     * Deletes a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resourcesDeleteByIdWithHttpInfo(String resourceId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = resourcesDeleteByIdValidateBeforeCall(resourceId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesDeleteByIdAsync(String resourceId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesDeleteByIdValidateBeforeCall(resourceId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesGet
     * @param resourceGroupName The name of the resource group containing the resource to get. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource. (required)
     * @param resourceName The name of the resource to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesGetCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderNamespace" + "}", localVarApiClient.escapeString(resourceProviderNamespace.toString()))
            .replace("{" + "parentResourcePath" + "}", localVarApiClient.escapeString(parentResourcePath.toString()))
            .replace("{" + "resourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesGetValidateBeforeCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling resourcesGet(Async)");
        }

        // verify the required parameter 'resourceProviderNamespace' is set
        if (resourceProviderNamespace == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderNamespace' when calling resourcesGet(Async)");
        }

        // verify the required parameter 'parentResourcePath' is set
        if (parentResourcePath == null) {
            throw new ApiException("Missing the required parameter 'parentResourcePath' when calling resourcesGet(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling resourcesGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling resourcesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourcesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling resourcesGet(Async)");
        }

        return resourcesGetCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a resource.
     * @param resourceGroupName The name of the resource group containing the resource to get. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource. (required)
     * @param resourceName The name of the resource to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return GenericResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
     </table>
     */
    public GenericResource resourcesGet(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<GenericResource> localVarResp = resourcesGetWithHttpInfo(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a resource.
     * @param resourceGroupName The name of the resource group containing the resource to get. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource. (required)
     * @param resourceName The name of the resource to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;GenericResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResource> resourcesGetWithHttpInfo(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = resourcesGetValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<GenericResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a resource.
     * @param resourceGroupName The name of the resource group containing the resource to get. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource. (required)
     * @param resourceName The name of the resource to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesGetAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, final ApiCallback<GenericResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesGetValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<GenericResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesGetById
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesGetByIdCall(String resourceId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceId}"
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesGetByIdValidateBeforeCall(String resourceId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling resourcesGetById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourcesGetById(Async)");
        }

        return resourcesGetByIdCall(resourceId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return GenericResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
     </table>
     */
    public GenericResource resourcesGetById(String resourceId, String apiVersion) throws ApiException {
        ApiResponse<GenericResource> localVarResp = resourcesGetByIdWithHttpInfo(resourceId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return ApiResponse&lt;GenericResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResource> resourcesGetByIdWithHttpInfo(String resourceId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = resourcesGetByIdValidateBeforeCall(resourceId, apiVersion, null);
        Type localVarReturnType = new TypeToken<GenericResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesGetByIdAsync(String resourceId, String apiVersion, final ApiCallback<GenericResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesGetByIdValidateBeforeCall(resourceId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GenericResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesList
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $expand The $expand query parameter. (optional)
     * @param $top The number of results to return. If null is passed, returns all resource groups. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesListCall(String apiVersion, String subscriptionId, String $filter, String $expand, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resources"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesListValidateBeforeCall(String apiVersion, String subscriptionId, String $filter, String $expand, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourcesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling resourcesList(Async)");
        }

        return resourcesListCall(apiVersion, subscriptionId, $filter, $expand, $top, _callback);

    }

    /**
     * 
     * Get all the resources in a subscription.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $expand The $expand query parameter. (optional)
     * @param $top The number of results to return. If null is passed, returns all resource groups. (optional)
     * @return ResourceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resources. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListResult resourcesList(String apiVersion, String subscriptionId, String $filter, String $expand, Integer $top) throws ApiException {
        ApiResponse<ResourceListResult> localVarResp = resourcesListWithHttpInfo(apiVersion, subscriptionId, $filter, $expand, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all the resources in a subscription.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $expand The $expand query parameter. (optional)
     * @param $top The number of results to return. If null is passed, returns all resource groups. (optional)
     * @return ApiResponse&lt;ResourceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListResult> resourcesListWithHttpInfo(String apiVersion, String subscriptionId, String $filter, String $expand, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = resourcesListValidateBeforeCall(apiVersion, subscriptionId, $filter, $expand, $top, null);
        Type localVarReturnType = new TypeToken<ResourceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all the resources in a subscription.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $expand The $expand query parameter. (optional)
     * @param $top The number of results to return. If null is passed, returns all resource groups. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesListAsync(String apiVersion, String subscriptionId, String $filter, String $expand, Integer $top, final ApiCallback<ResourceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesListValidateBeforeCall(apiVersion, subscriptionId, $filter, $expand, $top, _callback);
        Type localVarReturnType = new TypeToken<ResourceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesMoveResources
     * @param sourceResourceGroupName The name of the resource group containing the resources to move. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for moving resources. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMoveResourcesCall(String sourceResourceGroupName, String apiVersion, String subscriptionId, ResourcesMoveInfo parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources"
            .replace("{" + "sourceResourceGroupName" + "}", localVarApiClient.escapeString(sourceResourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesMoveResourcesValidateBeforeCall(String sourceResourceGroupName, String apiVersion, String subscriptionId, ResourcesMoveInfo parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceResourceGroupName' is set
        if (sourceResourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'sourceResourceGroupName' when calling resourcesMoveResources(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourcesMoveResources(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling resourcesMoveResources(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling resourcesMoveResources(Async)");
        }

        return resourcesMoveResourcesCall(sourceResourceGroupName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * Moves resources from one resource group to another resource group.
     * The resources to move must be in the same source resource group. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. 
     * @param sourceResourceGroupName The name of the resource group containing the resources to move. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for moving resources. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void resourcesMoveResources(String sourceResourceGroupName, String apiVersion, String subscriptionId, ResourcesMoveInfo parameters) throws ApiException {
        resourcesMoveResourcesWithHttpInfo(sourceResourceGroupName, apiVersion, subscriptionId, parameters);
    }

    /**
     * Moves resources from one resource group to another resource group.
     * The resources to move must be in the same source resource group. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. 
     * @param sourceResourceGroupName The name of the resource group containing the resources to move. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for moving resources. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resourcesMoveResourcesWithHttpInfo(String sourceResourceGroupName, String apiVersion, String subscriptionId, ResourcesMoveInfo parameters) throws ApiException {
        okhttp3.Call localVarCall = resourcesMoveResourcesValidateBeforeCall(sourceResourceGroupName, apiVersion, subscriptionId, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Moves resources from one resource group to another resource group. (asynchronously)
     * The resources to move must be in the same source resource group. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. 
     * @param sourceResourceGroupName The name of the resource group containing the resources to move. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for moving resources. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMoveResourcesAsync(String sourceResourceGroupName, String apiVersion, String subscriptionId, ResourcesMoveInfo parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesMoveResourcesValidateBeforeCall(sourceResourceGroupName, apiVersion, subscriptionId, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesUpdate
     * @param resourceGroupName The name of the resource group for the resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource to update. (required)
     * @param resourceName The name of the resource to update. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for updating the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesUpdateCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, GenericResource parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderNamespace" + "}", localVarApiClient.escapeString(resourceProviderNamespace.toString()))
            .replace("{" + "parentResourcePath" + "}", localVarApiClient.escapeString(parentResourcePath.toString()))
            .replace("{" + "resourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesUpdateValidateBeforeCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, GenericResource parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling resourcesUpdate(Async)");
        }

        // verify the required parameter 'resourceProviderNamespace' is set
        if (resourceProviderNamespace == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderNamespace' when calling resourcesUpdate(Async)");
        }

        // verify the required parameter 'parentResourcePath' is set
        if (parentResourcePath == null) {
            throw new ApiException("Missing the required parameter 'parentResourcePath' when calling resourcesUpdate(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling resourcesUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling resourcesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourcesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling resourcesUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling resourcesUpdate(Async)");
        }

        return resourcesUpdateCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Updates a resource.
     * @param resourceGroupName The name of the resource group for the resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource to update. (required)
     * @param resourceName The name of the resource to update. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for updating the resource. (required)
     * @return GenericResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public GenericResource resourcesUpdate(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, GenericResource parameters) throws ApiException {
        ApiResponse<GenericResource> localVarResp = resourcesUpdateWithHttpInfo(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a resource.
     * @param resourceGroupName The name of the resource group for the resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource to update. (required)
     * @param resourceName The name of the resource to update. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for updating the resource. (required)
     * @return ApiResponse&lt;GenericResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResource> resourcesUpdateWithHttpInfo(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, GenericResource parameters) throws ApiException {
        okhttp3.Call localVarCall = resourcesUpdateValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<GenericResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a resource.
     * @param resourceGroupName The name of the resource group for the resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource to update. (required)
     * @param resourceName The name of the resource to update. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for updating the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesUpdateAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, GenericResource parameters, final ApiCallback<GenericResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesUpdateValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<GenericResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesUpdateById
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Update resource parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesUpdateByIdCall(String resourceId, String apiVersion, GenericResource parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/{resourceId}"
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesUpdateByIdValidateBeforeCall(String resourceId, String apiVersion, GenericResource parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling resourcesUpdateById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourcesUpdateById(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling resourcesUpdateById(Async)");
        }

        return resourcesUpdateByIdCall(resourceId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Updates a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Update resource parameters. (required)
     * @return GenericResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public GenericResource resourcesUpdateById(String resourceId, String apiVersion, GenericResource parameters) throws ApiException {
        ApiResponse<GenericResource> localVarResp = resourcesUpdateByIdWithHttpInfo(resourceId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Update resource parameters. (required)
     * @return ApiResponse&lt;GenericResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResource> resourcesUpdateByIdWithHttpInfo(String resourceId, String apiVersion, GenericResource parameters) throws ApiException {
        okhttp3.Call localVarCall = resourcesUpdateByIdValidateBeforeCall(resourceId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<GenericResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name} (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Update resource parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesUpdateByIdAsync(String resourceId, String apiVersion, GenericResource parameters, final ApiCallback<GenericResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesUpdateByIdValidateBeforeCall(resourceId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<GenericResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesValidateMoveResources
     * @param sourceResourceGroupName The name of the resource group containing the resources to validate for move. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for moving resources. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesValidateMoveResourcesCall(String sourceResourceGroupName, String apiVersion, String subscriptionId, ResourcesMoveInfo parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources"
            .replace("{" + "sourceResourceGroupName" + "}", localVarApiClient.escapeString(sourceResourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesValidateMoveResourcesValidateBeforeCall(String sourceResourceGroupName, String apiVersion, String subscriptionId, ResourcesMoveInfo parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceResourceGroupName' is set
        if (sourceResourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'sourceResourceGroupName' when calling resourcesValidateMoveResources(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourcesValidateMoveResources(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling resourcesValidateMoveResources(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling resourcesValidateMoveResources(Async)");
        }

        return resourcesValidateMoveResourcesCall(sourceResourceGroupName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * Validates whether resources can be moved from one resource group to another resource group.
     * This operation checks whether the specified resources can be moved to the target. The resources to move must be in the same source resource group. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation.
     * @param sourceResourceGroupName The name of the resource group containing the resources to validate for move. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for moving resources. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void resourcesValidateMoveResources(String sourceResourceGroupName, String apiVersion, String subscriptionId, ResourcesMoveInfo parameters) throws ApiException {
        resourcesValidateMoveResourcesWithHttpInfo(sourceResourceGroupName, apiVersion, subscriptionId, parameters);
    }

    /**
     * Validates whether resources can be moved from one resource group to another resource group.
     * This operation checks whether the specified resources can be moved to the target. The resources to move must be in the same source resource group. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation.
     * @param sourceResourceGroupName The name of the resource group containing the resources to validate for move. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for moving resources. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resourcesValidateMoveResourcesWithHttpInfo(String sourceResourceGroupName, String apiVersion, String subscriptionId, ResourcesMoveInfo parameters) throws ApiException {
        okhttp3.Call localVarCall = resourcesValidateMoveResourcesValidateBeforeCall(sourceResourceGroupName, apiVersion, subscriptionId, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validates whether resources can be moved from one resource group to another resource group. (asynchronously)
     * This operation checks whether the specified resources can be moved to the target. The resources to move must be in the same source resource group. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation.
     * @param sourceResourceGroupName The name of the resource group containing the resources to validate for move. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for moving resources. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesValidateMoveResourcesAsync(String sourceResourceGroupName, String apiVersion, String subscriptionId, ResourcesMoveInfo parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesValidateMoveResourcesValidateBeforeCall(sourceResourceGroupName, apiVersion, subscriptionId, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
