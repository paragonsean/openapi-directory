/*
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.HttpMessage;
import org.openapitools.client.model.TargetResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Deployment operation properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:52.826351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeploymentOperationProperties {
  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private HttpMessage request;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private HttpMessage response;

  public static final String SERIALIZED_NAME_SERVICE_REQUEST_ID = "serviceRequestId";
  @SerializedName(SERIALIZED_NAME_SERVICE_REQUEST_ID)
  private String serviceRequestId;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private String statusCode;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private Object statusMessage;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE = "targetResource";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE)
  private TargetResource targetResource;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public DeploymentOperationProperties() {
  }

  public DeploymentOperationProperties(
     String provisioningState, 
     String serviceRequestId, 
     String statusCode, 
     Object statusMessage, 
     OffsetDateTime timestamp
  ) {
    this();
    this.provisioningState = provisioningState;
    this.serviceRequestId = serviceRequestId;
    this.statusCode = statusCode;
    this.statusMessage = statusMessage;
    this.timestamp = timestamp;
  }

  /**
   * The state of the provisioning.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public DeploymentOperationProperties request(HttpMessage request) {
    this.request = request;
    return this;
  }

  /**
   * Get request
   * @return request
   */
  @javax.annotation.Nullable
  public HttpMessage getRequest() {
    return request;
  }

  public void setRequest(HttpMessage request) {
    this.request = request;
  }


  public DeploymentOperationProperties response(HttpMessage response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nullable
  public HttpMessage getResponse() {
    return response;
  }

  public void setResponse(HttpMessage response) {
    this.response = response;
  }


  /**
   * Deployment operation service request id.
   * @return serviceRequestId
   */
  @javax.annotation.Nullable
  public String getServiceRequestId() {
    return serviceRequestId;
  }



  /**
   * Operation status code.
   * @return statusCode
   */
  @javax.annotation.Nullable
  public String getStatusCode() {
    return statusCode;
  }



  /**
   * Operation status message.
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public Object getStatusMessage() {
    return statusMessage;
  }



  public DeploymentOperationProperties targetResource(TargetResource targetResource) {
    this.targetResource = targetResource;
    return this;
  }

  /**
   * Get targetResource
   * @return targetResource
   */
  @javax.annotation.Nullable
  public TargetResource getTargetResource() {
    return targetResource;
  }

  public void setTargetResource(TargetResource targetResource) {
    this.targetResource = targetResource;
  }


  /**
   * The date and time of the operation.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentOperationProperties deploymentOperationProperties = (DeploymentOperationProperties) o;
    return Objects.equals(this.provisioningState, deploymentOperationProperties.provisioningState) &&
        Objects.equals(this.request, deploymentOperationProperties.request) &&
        Objects.equals(this.response, deploymentOperationProperties.response) &&
        Objects.equals(this.serviceRequestId, deploymentOperationProperties.serviceRequestId) &&
        Objects.equals(this.statusCode, deploymentOperationProperties.statusCode) &&
        Objects.equals(this.statusMessage, deploymentOperationProperties.statusMessage) &&
        Objects.equals(this.targetResource, deploymentOperationProperties.targetResource) &&
        Objects.equals(this.timestamp, deploymentOperationProperties.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provisioningState, request, response, serviceRequestId, statusCode, statusMessage, targetResource, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentOperationProperties {\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    serviceRequestId: ").append(toIndentedString(serviceRequestId)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    targetResource: ").append(toIndentedString(targetResource)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("provisioningState");
    openapiFields.add("request");
    openapiFields.add("response");
    openapiFields.add("serviceRequestId");
    openapiFields.add("statusCode");
    openapiFields.add("statusMessage");
    openapiFields.add("targetResource");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeploymentOperationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeploymentOperationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeploymentOperationProperties is not found in the empty JSON string", DeploymentOperationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeploymentOperationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeploymentOperationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        HttpMessage.validateJsonElement(jsonObj.get("request"));
      }
      // validate the optional field `response`
      if (jsonObj.get("response") != null && !jsonObj.get("response").isJsonNull()) {
        HttpMessage.validateJsonElement(jsonObj.get("response"));
      }
      if ((jsonObj.get("serviceRequestId") != null && !jsonObj.get("serviceRequestId").isJsonNull()) && !jsonObj.get("serviceRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceRequestId").toString()));
      }
      if ((jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) && !jsonObj.get("statusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusCode").toString()));
      }
      // validate the optional field `targetResource`
      if (jsonObj.get("targetResource") != null && !jsonObj.get("targetResource").isJsonNull()) {
        TargetResource.validateJsonElement(jsonObj.get("targetResource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeploymentOperationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeploymentOperationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeploymentOperationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeploymentOperationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DeploymentOperationProperties>() {
           @Override
           public void write(JsonWriter out, DeploymentOperationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeploymentOperationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeploymentOperationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeploymentOperationProperties
   * @throws IOException if the JSON string is invalid with respect to DeploymentOperationProperties
   */
  public static DeploymentOperationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeploymentOperationProperties.class);
  }

  /**
   * Convert an instance of DeploymentOperationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

