/*
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GenericResource;
import org.openapitools.client.model.ResourceListResult;
import org.openapitools.client.model.ResourcesMoveInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResourcesApi
 */
@Disabled
public class ResourcesApiTest {

    private final ResourcesApi api = new ResourcesApi();

    /**
     * Checks whether a resource exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesCheckExistenceTest() throws ApiException {
        String resourceGroupName = null;
        String resourceProviderNamespace = null;
        String parentResourcePath = null;
        String resourceType = null;
        String resourceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.resourcesCheckExistence(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Checks by ID whether a resource exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesCheckExistenceByIdTest() throws ApiException {
        String resourceId = null;
        String apiVersion = null;
        api.resourcesCheckExistenceById(resourceId, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String resourceProviderNamespace = null;
        String parentResourcePath = null;
        String resourceType = null;
        String resourceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        GenericResource parameters = null;
        GenericResource response = api.resourcesCreateOrUpdate(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Create a resource by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesCreateOrUpdateByIdTest() throws ApiException {
        String resourceId = null;
        String apiVersion = null;
        GenericResource parameters = null;
        GenericResource response = api.resourcesCreateOrUpdateById(resourceId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String resourceProviderNamespace = null;
        String parentResourcePath = null;
        String resourceType = null;
        String resourceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.resourcesDelete(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes a resource by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesDeleteByIdTest() throws ApiException {
        String resourceId = null;
        String apiVersion = null;
        api.resourcesDeleteById(resourceId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesGetTest() throws ApiException {
        String resourceGroupName = null;
        String resourceProviderNamespace = null;
        String parentResourcePath = null;
        String resourceType = null;
        String resourceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        GenericResource response = api.resourcesGet(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a resource by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesGetByIdTest() throws ApiException {
        String resourceId = null;
        String apiVersion = null;
        GenericResource response = api.resourcesGetById(resourceId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all the resources in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        String $expand = null;
        Integer $top = null;
        ResourceListResult response = api.resourcesList(apiVersion, subscriptionId, $filter, $expand, $top);
        // TODO: test validations
    }

    /**
     * Moves resources from one resource group to another resource group.
     *
     * The resources to move must be in the same source resource group. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMoveResourcesTest() throws ApiException {
        String sourceResourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ResourcesMoveInfo parameters = null;
        api.resourcesMoveResources(sourceResourceGroupName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Updates a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String resourceProviderNamespace = null;
        String parentResourcePath = null;
        String resourceType = null;
        String resourceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        GenericResource parameters = null;
        GenericResource response = api.resourcesUpdate(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Updates a resource by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesUpdateByIdTest() throws ApiException {
        String resourceId = null;
        String apiVersion = null;
        GenericResource parameters = null;
        GenericResource response = api.resourcesUpdateById(resourceId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Validates whether resources can be moved from one resource group to another resource group.
     *
     * This operation checks whether the specified resources can be moved to the target. The resources to move must be in the same source resource group. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesValidateMoveResourcesTest() throws ApiException {
        String sourceResourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ResourcesMoveInfo parameters = null;
        api.resourcesValidateMoveResources(sourceResourceGroupName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
