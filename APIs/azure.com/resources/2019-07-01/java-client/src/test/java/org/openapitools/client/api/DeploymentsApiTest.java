/*
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentExportResult;
import org.openapitools.client.model.DeploymentExtended;
import org.openapitools.client.model.DeploymentListResult;
import org.openapitools.client.model.DeploymentValidateResult;
import org.openapitools.client.model.DeploymentWhatIf;
import org.openapitools.client.model.TemplateHashResult;
import org.openapitools.client.model.WhatIfOperationResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeploymentsApi
 */
@Disabled
public class DeploymentsApiTest {

    private final DeploymentsApi api = new DeploymentsApi();

    /**
     * Calculate the hash of the given template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCalculateTemplateHashTest() throws ApiException {
        String apiVersion = null;
        Object template = null;
        TemplateHashResult response = api.deploymentsCalculateTemplateHash(apiVersion, template);
        // TODO: test validations
    }

    /**
     * Cancels a currently running template deployment.
     *
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resource group partially deployed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCancelTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.deploymentsCancel(resourceGroupName, deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Cancels a currently running template deployment.
     *
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCancelAtManagementGroupScopeTest() throws ApiException {
        String groupId = null;
        String deploymentName = null;
        String apiVersion = null;
        api.deploymentsCancelAtManagementGroupScope(groupId, deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Cancels a currently running template deployment.
     *
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCancelAtScopeTest() throws ApiException {
        String scope = null;
        String deploymentName = null;
        String apiVersion = null;
        api.deploymentsCancelAtScope(scope, deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Cancels a currently running template deployment.
     *
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCancelAtSubscriptionScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.deploymentsCancelAtSubscriptionScope(deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Cancels a currently running template deployment.
     *
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCancelAtTenantScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        api.deploymentsCancelAtTenantScope(deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Checks whether the deployment exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCheckExistenceTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.deploymentsCheckExistence(resourceGroupName, deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Checks whether the deployment exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCheckExistenceAtManagementGroupScopeTest() throws ApiException {
        String groupId = null;
        String deploymentName = null;
        String apiVersion = null;
        api.deploymentsCheckExistenceAtManagementGroupScope(groupId, deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Checks whether the deployment exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCheckExistenceAtScopeTest() throws ApiException {
        String scope = null;
        String deploymentName = null;
        String apiVersion = null;
        api.deploymentsCheckExistenceAtScope(scope, deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Checks whether the deployment exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCheckExistenceAtSubscriptionScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.deploymentsCheckExistenceAtSubscriptionScope(deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Checks whether the deployment exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCheckExistenceAtTenantScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        api.deploymentsCheckExistenceAtTenantScope(deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deploys resources to a resource group.
     *
     * You can provide the template and parameters directly in the request or link to JSON files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Deployment parameters = null;
        DeploymentExtended response = api.deploymentsCreateOrUpdate(resourceGroupName, deploymentName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deploys resources at management group scope.
     *
     * You can provide the template and parameters directly in the request or link to JSON files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCreateOrUpdateAtManagementGroupScopeTest() throws ApiException {
        String groupId = null;
        String deploymentName = null;
        String apiVersion = null;
        Deployment parameters = null;
        DeploymentExtended response = api.deploymentsCreateOrUpdateAtManagementGroupScope(groupId, deploymentName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deploys resources at a given scope.
     *
     * You can provide the template and parameters directly in the request or link to JSON files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCreateOrUpdateAtScopeTest() throws ApiException {
        String scope = null;
        String deploymentName = null;
        String apiVersion = null;
        Deployment parameters = null;
        DeploymentExtended response = api.deploymentsCreateOrUpdateAtScope(scope, deploymentName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deploys resources at subscription scope.
     *
     * You can provide the template and parameters directly in the request or link to JSON files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCreateOrUpdateAtSubscriptionScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Deployment parameters = null;
        DeploymentExtended response = api.deploymentsCreateOrUpdateAtSubscriptionScope(deploymentName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deploys resources at tenant scope.
     *
     * You can provide the template and parameters directly in the request or link to JSON files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCreateOrUpdateAtTenantScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        Deployment parameters = null;
        DeploymentExtended response = api.deploymentsCreateOrUpdateAtTenantScope(deploymentName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. Deleting a template deployment does not affect the state of the resource group. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.deploymentsDelete(resourceGroupName, deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsDeleteAtManagementGroupScopeTest() throws ApiException {
        String groupId = null;
        String deploymentName = null;
        String apiVersion = null;
        api.deploymentsDeleteAtManagementGroupScope(groupId, deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsDeleteAtScopeTest() throws ApiException {
        String scope = null;
        String deploymentName = null;
        String apiVersion = null;
        api.deploymentsDeleteAtScope(scope, deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsDeleteAtSubscriptionScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.deploymentsDeleteAtSubscriptionScope(deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsDeleteAtTenantScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        api.deploymentsDeleteAtTenantScope(deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Exports the template used for specified deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsExportTemplateTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        DeploymentExportResult response = api.deploymentsExportTemplate(resourceGroupName, deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Exports the template used for specified deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsExportTemplateAtManagementGroupScopeTest() throws ApiException {
        String groupId = null;
        String deploymentName = null;
        String apiVersion = null;
        DeploymentExportResult response = api.deploymentsExportTemplateAtManagementGroupScope(groupId, deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Exports the template used for specified deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsExportTemplateAtScopeTest() throws ApiException {
        String scope = null;
        String deploymentName = null;
        String apiVersion = null;
        DeploymentExportResult response = api.deploymentsExportTemplateAtScope(scope, deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Exports the template used for specified deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsExportTemplateAtSubscriptionScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        DeploymentExportResult response = api.deploymentsExportTemplateAtSubscriptionScope(deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Exports the template used for specified deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsExportTemplateAtTenantScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        DeploymentExportResult response = api.deploymentsExportTemplateAtTenantScope(deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsGetTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        DeploymentExtended response = api.deploymentsGet(resourceGroupName, deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsGetAtManagementGroupScopeTest() throws ApiException {
        String groupId = null;
        String deploymentName = null;
        String apiVersion = null;
        DeploymentExtended response = api.deploymentsGetAtManagementGroupScope(groupId, deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsGetAtScopeTest() throws ApiException {
        String scope = null;
        String deploymentName = null;
        String apiVersion = null;
        DeploymentExtended response = api.deploymentsGetAtScope(scope, deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsGetAtSubscriptionScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        DeploymentExtended response = api.deploymentsGetAtSubscriptionScope(deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsGetAtTenantScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        DeploymentExtended response = api.deploymentsGetAtTenantScope(deploymentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all the deployments for a management group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsListAtManagementGroupScopeTest() throws ApiException {
        String groupId = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        DeploymentListResult response = api.deploymentsListAtManagementGroupScope(groupId, apiVersion, $filter, $top);
        // TODO: test validations
    }

    /**
     * Get all the deployments at the given scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsListAtScopeTest() throws ApiException {
        String scope = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        DeploymentListResult response = api.deploymentsListAtScope(scope, apiVersion, $filter, $top);
        // TODO: test validations
    }

    /**
     * Get all the deployments for a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsListAtSubscriptionScopeTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        DeploymentListResult response = api.deploymentsListAtSubscriptionScope(apiVersion, subscriptionId, $filter, $top);
        // TODO: test validations
    }

    /**
     * Get all the deployments at the tenant scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsListAtTenantScopeTest() throws ApiException {
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        DeploymentListResult response = api.deploymentsListAtTenantScope(apiVersion, $filter, $top);
        // TODO: test validations
    }

    /**
     * Get all the deployments for a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        DeploymentListResult response = api.deploymentsListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, $filter, $top);
        // TODO: test validations
    }

    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsValidateTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Deployment parameters = null;
        DeploymentValidateResult response = api.deploymentsValidate(resourceGroupName, deploymentName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsValidateAtManagementGroupScopeTest() throws ApiException {
        String groupId = null;
        String deploymentName = null;
        String apiVersion = null;
        Deployment parameters = null;
        DeploymentValidateResult response = api.deploymentsValidateAtManagementGroupScope(groupId, deploymentName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsValidateAtScopeTest() throws ApiException {
        String scope = null;
        String deploymentName = null;
        String apiVersion = null;
        Deployment parameters = null;
        DeploymentValidateResult response = api.deploymentsValidateAtScope(scope, deploymentName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsValidateAtSubscriptionScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Deployment parameters = null;
        DeploymentValidateResult response = api.deploymentsValidateAtSubscriptionScope(deploymentName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsValidateAtTenantScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        Deployment parameters = null;
        DeploymentValidateResult response = api.deploymentsValidateAtTenantScope(deploymentName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Returns changes that will be made by the deployment if executed at the scope of the resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsWhatIfTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        DeploymentWhatIf parameters = null;
        WhatIfOperationResult response = api.deploymentsWhatIf(resourceGroupName, deploymentName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Returns changes that will be made by the deployment if executed at the scope of the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsWhatIfAtSubscriptionScopeTest() throws ApiException {
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        DeploymentWhatIf parameters = null;
        WhatIfOperationResult response = api.deploymentsWhatIfAtSubscriptionScope(deploymentName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
