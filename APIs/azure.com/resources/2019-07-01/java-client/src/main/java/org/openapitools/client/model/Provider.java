/*
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProviderResourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resource provider information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:58.685582-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Provider {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_REGISTRATION_POLICY = "registrationPolicy";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_POLICY)
  private String registrationPolicy;

  public static final String SERIALIZED_NAME_REGISTRATION_STATE = "registrationState";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_STATE)
  private String registrationState;

  public static final String SERIALIZED_NAME_RESOURCE_TYPES = "resourceTypes";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPES)
  private List<ProviderResourceType> resourceTypes = new ArrayList<>();

  public Provider() {
  }

  public Provider(
     String id, 
     String registrationPolicy, 
     String registrationState, 
     List<ProviderResourceType> resourceTypes
  ) {
    this();
    this.id = id;
    this.registrationPolicy = registrationPolicy;
    this.registrationState = registrationState;
    this.resourceTypes = resourceTypes;
  }

  /**
   * The provider ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public Provider namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * The namespace of the resource provider.
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  /**
   * The registration policy of the resource provider.
   * @return registrationPolicy
   */
  @javax.annotation.Nullable
  public String getRegistrationPolicy() {
    return registrationPolicy;
  }



  /**
   * The registration state of the resource provider.
   * @return registrationState
   */
  @javax.annotation.Nullable
  public String getRegistrationState() {
    return registrationState;
  }



  /**
   * The collection of provider resource types.
   * @return resourceTypes
   */
  @javax.annotation.Nullable
  public List<ProviderResourceType> getResourceTypes() {
    return resourceTypes;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Provider provider = (Provider) o;
    return Objects.equals(this.id, provider.id) &&
        Objects.equals(this.namespace, provider.namespace) &&
        Objects.equals(this.registrationPolicy, provider.registrationPolicy) &&
        Objects.equals(this.registrationState, provider.registrationState) &&
        Objects.equals(this.resourceTypes, provider.resourceTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, namespace, registrationPolicy, registrationState, resourceTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Provider {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    registrationPolicy: ").append(toIndentedString(registrationPolicy)).append("\n");
    sb.append("    registrationState: ").append(toIndentedString(registrationState)).append("\n");
    sb.append("    resourceTypes: ").append(toIndentedString(resourceTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("namespace");
    openapiFields.add("registrationPolicy");
    openapiFields.add("registrationState");
    openapiFields.add("resourceTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Provider
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Provider.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Provider is not found in the empty JSON string", Provider.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Provider.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Provider` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("registrationPolicy") != null && !jsonObj.get("registrationPolicy").isJsonNull()) && !jsonObj.get("registrationPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationPolicy").toString()));
      }
      if ((jsonObj.get("registrationState") != null && !jsonObj.get("registrationState").isJsonNull()) && !jsonObj.get("registrationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationState").toString()));
      }
      if (jsonObj.get("resourceTypes") != null && !jsonObj.get("resourceTypes").isJsonNull()) {
        JsonArray jsonArrayresourceTypes = jsonObj.getAsJsonArray("resourceTypes");
        if (jsonArrayresourceTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceTypes` to be an array in the JSON string but got `%s`", jsonObj.get("resourceTypes").toString()));
          }

          // validate the optional field `resourceTypes` (array)
          for (int i = 0; i < jsonArrayresourceTypes.size(); i++) {
            ProviderResourceType.validateJsonElement(jsonArrayresourceTypes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Provider.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Provider' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Provider> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Provider.class));

       return (TypeAdapter<T>) new TypeAdapter<Provider>() {
           @Override
           public void write(JsonWriter out, Provider value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Provider read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Provider given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Provider
   * @throws IOException if the JSON string is invalid with respect to Provider
   */
  public static Provider fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Provider.class);
  }

  /**
   * Convert an instance of Provider to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

