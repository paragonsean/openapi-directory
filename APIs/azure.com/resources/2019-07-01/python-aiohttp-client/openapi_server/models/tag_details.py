# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag_count import TagCount
from openapi_server.models.tag_value import TagValue
from openapi_server import util


class TagDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: TagCount=None, id: str=None, tag_name: str=None, values: List[TagValue]=None):
        """TagDetails - a model defined in OpenAPI

        :param count: The count of this TagDetails.
        :param id: The id of this TagDetails.
        :param tag_name: The tag_name of this TagDetails.
        :param values: The values of this TagDetails.
        """
        self.openapi_types = {
            'count': TagCount,
            'id': str,
            'tag_name': str,
            'values': List[TagValue]
        }

        self.attribute_map = {
            'count': 'count',
            'id': 'id',
            'tag_name': 'tagName',
            'values': 'values'
        }

        self._count = count
        self._id = id
        self._tag_name = tag_name
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagDetails of this TagDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this TagDetails.


        :return: The count of this TagDetails.
        :rtype: TagCount
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TagDetails.


        :param count: The count of this TagDetails.
        :type count: TagCount
        """

        self._count = count

    @property
    def id(self):
        """Gets the id of this TagDetails.

        The tag ID.

        :return: The id of this TagDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TagDetails.

        The tag ID.

        :param id: The id of this TagDetails.
        :type id: str
        """

        self._id = id

    @property
    def tag_name(self):
        """Gets the tag_name of this TagDetails.

        The tag name.

        :return: The tag_name of this TagDetails.
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this TagDetails.

        The tag name.

        :param tag_name: The tag_name of this TagDetails.
        :type tag_name: str
        """

        self._tag_name = tag_name

    @property
    def values(self):
        """Gets the values of this TagDetails.

        The list of tag values.

        :return: The values of this TagDetails.
        :rtype: List[TagValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this TagDetails.

        The list of tag values.

        :param values: The values of this TagDetails.
        :type values: List[TagValue]
        """

        self._values = values
