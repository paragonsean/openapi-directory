/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WhatIfPropertyChange model module.
 * @module model/WhatIfPropertyChange
 * @version 2019-07-01
 */
class WhatIfPropertyChange {
    /**
     * Constructs a new <code>WhatIfPropertyChange</code>.
     * The predicted change to the resource property.
     * @alias module:model/WhatIfPropertyChange
     * @param path {String} The path of the property.
     * @param propertyChangeType {module:model/WhatIfPropertyChange.PropertyChangeTypeEnum} The type of property change.
     */
    constructor(path, propertyChangeType) { 
        
        WhatIfPropertyChange.initialize(this, path, propertyChangeType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, path, propertyChangeType) { 
        obj['path'] = path;
        obj['propertyChangeType'] = propertyChangeType;
    }

    /**
     * Constructs a <code>WhatIfPropertyChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WhatIfPropertyChange} obj Optional instance to populate.
     * @return {module:model/WhatIfPropertyChange} The populated <code>WhatIfPropertyChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WhatIfPropertyChange();

            if (data.hasOwnProperty('after')) {
                obj['after'] = ApiClient.convertToType(data['after'], Object);
            }
            if (data.hasOwnProperty('before')) {
                obj['before'] = ApiClient.convertToType(data['before'], Object);
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [WhatIfPropertyChange]);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('propertyChangeType')) {
                obj['propertyChangeType'] = ApiClient.convertToType(data['propertyChangeType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WhatIfPropertyChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WhatIfPropertyChange</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WhatIfPropertyChange.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                WhatIfPropertyChange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['propertyChangeType'] && !(typeof data['propertyChangeType'] === 'string' || data['propertyChangeType'] instanceof String)) {
            throw new Error("Expected the field `propertyChangeType` to be a primitive type in the JSON string but got " + data['propertyChangeType']);
        }

        return true;
    }


}

WhatIfPropertyChange.RequiredProperties = ["path", "propertyChangeType"];

/**
 * The value of the property after the deployment is executed.
 * @member {Object} after
 */
WhatIfPropertyChange.prototype['after'] = undefined;

/**
 * The value of the property before the deployment is executed.
 * @member {Object} before
 */
WhatIfPropertyChange.prototype['before'] = undefined;

/**
 * Nested property changes.
 * @member {Array.<module:model/WhatIfPropertyChange>} children
 */
WhatIfPropertyChange.prototype['children'] = undefined;

/**
 * The path of the property.
 * @member {String} path
 */
WhatIfPropertyChange.prototype['path'] = undefined;

/**
 * The type of property change.
 * @member {module:model/WhatIfPropertyChange.PropertyChangeTypeEnum} propertyChangeType
 */
WhatIfPropertyChange.prototype['propertyChangeType'] = undefined;





/**
 * Allowed values for the <code>propertyChangeType</code> property.
 * @enum {String}
 * @readonly
 */
WhatIfPropertyChange['PropertyChangeTypeEnum'] = {

    /**
     * value: "Create"
     * @const
     */
    "Create": "Create",

    /**
     * value: "Delete"
     * @const
     */
    "Delete": "Delete",

    /**
     * value: "Modify"
     * @const
     */
    "Modify": "Modify",

    /**
     * value: "Array"
     * @const
     */
    "Array": "Array"
};



export default WhatIfPropertyChange;

