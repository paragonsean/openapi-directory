/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WhatIfPropertyChange from './WhatIfPropertyChange';

/**
 * The WhatIfChange model module.
 * @module model/WhatIfChange
 * @version 2019-07-01
 */
class WhatIfChange {
    /**
     * Constructs a new <code>WhatIfChange</code>.
     * Information about a single resource change predicted by What-If operation.
     * @alias module:model/WhatIfChange
     * @param changeType {module:model/WhatIfChange.ChangeTypeEnum} Type of change that will be made to the resource when the deployment is executed.
     * @param resourceId {String} Resource ID
     */
    constructor(changeType, resourceId) { 
        
        WhatIfChange.initialize(this, changeType, resourceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, changeType, resourceId) { 
        obj['changeType'] = changeType;
        obj['resourceId'] = resourceId;
    }

    /**
     * Constructs a <code>WhatIfChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WhatIfChange} obj Optional instance to populate.
     * @return {module:model/WhatIfChange} The populated <code>WhatIfChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WhatIfChange();

            if (data.hasOwnProperty('after')) {
                obj['after'] = ApiClient.convertToType(data['after'], Object);
            }
            if (data.hasOwnProperty('before')) {
                obj['before'] = ApiClient.convertToType(data['before'], Object);
            }
            if (data.hasOwnProperty('changeType')) {
                obj['changeType'] = ApiClient.convertToType(data['changeType'], 'String');
            }
            if (data.hasOwnProperty('delta')) {
                obj['delta'] = ApiClient.convertToType(data['delta'], [WhatIfPropertyChange]);
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WhatIfChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WhatIfChange</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WhatIfChange.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['changeType'] && !(typeof data['changeType'] === 'string' || data['changeType'] instanceof String)) {
            throw new Error("Expected the field `changeType` to be a primitive type in the JSON string but got " + data['changeType']);
        }
        if (data['delta']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['delta'])) {
                throw new Error("Expected the field `delta` to be an array in the JSON data but got " + data['delta']);
            }
            // validate the optional field `delta` (array)
            for (const item of data['delta']) {
                WhatIfPropertyChange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }

        return true;
    }


}

WhatIfChange.RequiredProperties = ["changeType", "resourceId"];

/**
 * The predicted snapshot of the resource after the deployment is executed.
 * @member {Object} after
 */
WhatIfChange.prototype['after'] = undefined;

/**
 * The snapshot of the resource before the deployment is executed.
 * @member {Object} before
 */
WhatIfChange.prototype['before'] = undefined;

/**
 * Type of change that will be made to the resource when the deployment is executed.
 * @member {module:model/WhatIfChange.ChangeTypeEnum} changeType
 */
WhatIfChange.prototype['changeType'] = undefined;

/**
 * The predicted changes to resource properties.
 * @member {Array.<module:model/WhatIfPropertyChange>} delta
 */
WhatIfChange.prototype['delta'] = undefined;

/**
 * Resource ID
 * @member {String} resourceId
 */
WhatIfChange.prototype['resourceId'] = undefined;





/**
 * Allowed values for the <code>changeType</code> property.
 * @enum {String}
 * @readonly
 */
WhatIfChange['ChangeTypeEnum'] = {

    /**
     * value: "Create"
     * @const
     */
    "Create": "Create",

    /**
     * value: "Delete"
     * @const
     */
    "Delete": "Delete",

    /**
     * value: "Ignore"
     * @const
     */
    "Ignore": "Ignore",

    /**
     * value: "Deploy"
     * @const
     */
    "Deploy": "Deploy",

    /**
     * value: "NoChange"
     * @const
     */
    "NoChange": "NoChange",

    /**
     * value: "Modify"
     * @const
     */
    "Modify": "Modify"
};



export default WhatIfChange;

