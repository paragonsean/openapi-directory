/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2017-05-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProviderResourceType from './ProviderResourceType';

/**
 * The Provider model module.
 * @module model/Provider
 * @version 2017-05-10
 */
class Provider {
    /**
     * Constructs a new <code>Provider</code>.
     * Resource provider information.
     * @alias module:model/Provider
     */
    constructor() { 
        
        Provider.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Provider</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Provider} obj Optional instance to populate.
     * @return {module:model/Provider} The populated <code>Provider</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Provider();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('registrationState')) {
                obj['registrationState'] = ApiClient.convertToType(data['registrationState'], 'String');
            }
            if (data.hasOwnProperty('resourceTypes')) {
                obj['resourceTypes'] = ApiClient.convertToType(data['resourceTypes'], [ProviderResourceType]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Provider</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Provider</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['registrationState'] && !(typeof data['registrationState'] === 'string' || data['registrationState'] instanceof String)) {
            throw new Error("Expected the field `registrationState` to be a primitive type in the JSON string but got " + data['registrationState']);
        }
        if (data['resourceTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceTypes'])) {
                throw new Error("Expected the field `resourceTypes` to be an array in the JSON data but got " + data['resourceTypes']);
            }
            // validate the optional field `resourceTypes` (array)
            for (const item of data['resourceTypes']) {
                ProviderResourceType.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The provider ID.
 * @member {String} id
 */
Provider.prototype['id'] = undefined;

/**
 * The namespace of the resource provider.
 * @member {String} namespace
 */
Provider.prototype['namespace'] = undefined;

/**
 * The registration state of the provider.
 * @member {String} registrationState
 */
Provider.prototype['registrationState'] = undefined;

/**
 * The collection of provider resource types.
 * @member {Array.<module:model/ProviderResourceType>} resourceTypes
 */
Provider.prototype['resourceTypes'] = undefined;






export default Provider;

