/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2017-05-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvider::OAIProvider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvider::OAIProvider() {
    this->initializeModel();
}

OAIProvider::~OAIProvider() {}

void OAIProvider::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_registration_state_isSet = false;
    m_registration_state_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;
}

void OAIProvider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvider::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_registration_state_isValid = ::OpenAPI::fromJsonValue(m_registration_state, json[QString("registrationState")]);
    m_registration_state_isSet = !json[QString("registrationState")].isNull() && m_registration_state_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("resourceTypes")]);
    m_resource_types_isSet = !json[QString("resourceTypes")].isNull() && m_resource_types_isValid;
}

QString OAIProvider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvider::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_registration_state_isSet) {
        obj.insert(QString("registrationState"), ::OpenAPI::toJsonValue(m_registration_state));
    }
    if (m_resource_types.size() > 0) {
        obj.insert(QString("resourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    return obj;
}

QString OAIProvider::getId() const {
    return m_id;
}
void OAIProvider::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProvider::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProvider::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProvider::getRNamespace() const {
    return m_r_namespace;
}
void OAIProvider::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIProvider::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIProvider::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIProvider::getRegistrationState() const {
    return m_registration_state;
}
void OAIProvider::setRegistrationState(const QString &registration_state) {
    m_registration_state = registration_state;
    m_registration_state_isSet = true;
}

bool OAIProvider::is_registration_state_Set() const{
    return m_registration_state_isSet;
}

bool OAIProvider::is_registration_state_Valid() const{
    return m_registration_state_isValid;
}

QList<OAIProviderResourceType> OAIProvider::getResourceTypes() const {
    return m_resource_types;
}
void OAIProvider::setResourceTypes(const QList<OAIProviderResourceType> &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAIProvider::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAIProvider::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

bool OAIProvider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvider::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
