/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWhatIfChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWhatIfChange::OAIWhatIfChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWhatIfChange::OAIWhatIfChange() {
    this->initializeModel();
}

OAIWhatIfChange::~OAIWhatIfChange() {}

void OAIWhatIfChange::initializeModel() {

    m_after_isSet = false;
    m_after_isValid = false;

    m_before_isSet = false;
    m_before_isValid = false;

    m_change_type_isSet = false;
    m_change_type_isValid = false;

    m_delta_isSet = false;
    m_delta_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;
}

void OAIWhatIfChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWhatIfChange::fromJsonObject(QJsonObject json) {

    m_after_isValid = ::OpenAPI::fromJsonValue(m_after, json[QString("after")]);
    m_after_isSet = !json[QString("after")].isNull() && m_after_isValid;

    m_before_isValid = ::OpenAPI::fromJsonValue(m_before, json[QString("before")]);
    m_before_isSet = !json[QString("before")].isNull() && m_before_isValid;

    m_change_type_isValid = ::OpenAPI::fromJsonValue(m_change_type, json[QString("changeType")]);
    m_change_type_isSet = !json[QString("changeType")].isNull() && m_change_type_isValid;

    m_delta_isValid = ::OpenAPI::fromJsonValue(m_delta, json[QString("delta")]);
    m_delta_isSet = !json[QString("delta")].isNull() && m_delta_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;
}

QString OAIWhatIfChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWhatIfChange::asJsonObject() const {
    QJsonObject obj;
    if (m_after_isSet) {
        obj.insert(QString("after"), ::OpenAPI::toJsonValue(m_after));
    }
    if (m_before_isSet) {
        obj.insert(QString("before"), ::OpenAPI::toJsonValue(m_before));
    }
    if (m_change_type_isSet) {
        obj.insert(QString("changeType"), ::OpenAPI::toJsonValue(m_change_type));
    }
    if (m_delta.size() > 0) {
        obj.insert(QString("delta"), ::OpenAPI::toJsonValue(m_delta));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    return obj;
}

OAIObject OAIWhatIfChange::getAfter() const {
    return m_after;
}
void OAIWhatIfChange::setAfter(const OAIObject &after) {
    m_after = after;
    m_after_isSet = true;
}

bool OAIWhatIfChange::is_after_Set() const{
    return m_after_isSet;
}

bool OAIWhatIfChange::is_after_Valid() const{
    return m_after_isValid;
}

OAIObject OAIWhatIfChange::getBefore() const {
    return m_before;
}
void OAIWhatIfChange::setBefore(const OAIObject &before) {
    m_before = before;
    m_before_isSet = true;
}

bool OAIWhatIfChange::is_before_Set() const{
    return m_before_isSet;
}

bool OAIWhatIfChange::is_before_Valid() const{
    return m_before_isValid;
}

QString OAIWhatIfChange::getChangeType() const {
    return m_change_type;
}
void OAIWhatIfChange::setChangeType(const QString &change_type) {
    m_change_type = change_type;
    m_change_type_isSet = true;
}

bool OAIWhatIfChange::is_change_type_Set() const{
    return m_change_type_isSet;
}

bool OAIWhatIfChange::is_change_type_Valid() const{
    return m_change_type_isValid;
}

QList<OAIWhatIfPropertyChange> OAIWhatIfChange::getDelta() const {
    return m_delta;
}
void OAIWhatIfChange::setDelta(const QList<OAIWhatIfPropertyChange> &delta) {
    m_delta = delta;
    m_delta_isSet = true;
}

bool OAIWhatIfChange::is_delta_Set() const{
    return m_delta_isSet;
}

bool OAIWhatIfChange::is_delta_Valid() const{
    return m_delta_isValid;
}

QString OAIWhatIfChange::getResourceId() const {
    return m_resource_id;
}
void OAIWhatIfChange::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIWhatIfChange::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIWhatIfChange::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

bool OAIWhatIfChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delta.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWhatIfChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_change_type_isValid && m_resource_id_isValid && true;
}

} // namespace OpenAPI
