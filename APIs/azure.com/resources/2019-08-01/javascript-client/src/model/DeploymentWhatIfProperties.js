/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DebugSetting from './DebugSetting';
import DeploymentProperties from './DeploymentProperties';
import DeploymentWhatIfSettings from './DeploymentWhatIfSettings';
import OnErrorDeployment from './OnErrorDeployment';
import ParametersLink from './ParametersLink';
import TemplateLink from './TemplateLink';

/**
 * The DeploymentWhatIfProperties model module.
 * @module model/DeploymentWhatIfProperties
 * @version 2019-08-01
 */
class DeploymentWhatIfProperties {
    /**
     * Constructs a new <code>DeploymentWhatIfProperties</code>.
     * Deployment What-if properties.
     * @alias module:model/DeploymentWhatIfProperties
     * @implements module:model/DeploymentProperties
     * @param mode {module:model/DeploymentWhatIfProperties.ModeEnum} The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.
     */
    constructor(mode) { 
        DeploymentProperties.initialize(this, mode);
        DeploymentWhatIfProperties.initialize(this, mode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mode) { 
        obj['mode'] = mode;
    }

    /**
     * Constructs a <code>DeploymentWhatIfProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeploymentWhatIfProperties} obj Optional instance to populate.
     * @return {module:model/DeploymentWhatIfProperties} The populated <code>DeploymentWhatIfProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeploymentWhatIfProperties();
            DeploymentProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('whatIfSettings')) {
                obj['whatIfSettings'] = DeploymentWhatIfSettings.constructFromObject(data['whatIfSettings']);
            }
            if (data.hasOwnProperty('debugSetting')) {
                obj['debugSetting'] = DebugSetting.constructFromObject(data['debugSetting']);
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('onErrorDeployment')) {
                obj['onErrorDeployment'] = OnErrorDeployment.constructFromObject(data['onErrorDeployment']);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('parametersLink')) {
                obj['parametersLink'] = ParametersLink.constructFromObject(data['parametersLink']);
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], Object);
            }
            if (data.hasOwnProperty('templateLink')) {
                obj['templateLink'] = TemplateLink.constructFromObject(data['templateLink']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeploymentWhatIfProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeploymentWhatIfProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeploymentWhatIfProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `whatIfSettings`
        if (data['whatIfSettings']) { // data not null
          DeploymentWhatIfSettings.validateJSON(data['whatIfSettings']);
        }
        // validate the optional field `debugSetting`
        if (data['debugSetting']) { // data not null
          DebugSetting.validateJSON(data['debugSetting']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // validate the optional field `onErrorDeployment`
        if (data['onErrorDeployment']) { // data not null
          OnErrorDeployment.validateJSON(data['onErrorDeployment']);
        }
        // validate the optional field `parametersLink`
        if (data['parametersLink']) { // data not null
          ParametersLink.validateJSON(data['parametersLink']);
        }
        // validate the optional field `templateLink`
        if (data['templateLink']) { // data not null
          TemplateLink.validateJSON(data['templateLink']);
        }

        return true;
    }


}

DeploymentWhatIfProperties.RequiredProperties = ["mode"];

/**
 * @member {module:model/DeploymentWhatIfSettings} whatIfSettings
 */
DeploymentWhatIfProperties.prototype['whatIfSettings'] = undefined;

/**
 * @member {module:model/DebugSetting} debugSetting
 */
DeploymentWhatIfProperties.prototype['debugSetting'] = undefined;

/**
 * The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.
 * @member {module:model/DeploymentWhatIfProperties.ModeEnum} mode
 */
DeploymentWhatIfProperties.prototype['mode'] = undefined;

/**
 * @member {module:model/OnErrorDeployment} onErrorDeployment
 */
DeploymentWhatIfProperties.prototype['onErrorDeployment'] = undefined;

/**
 * Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.
 * @member {Object} parameters
 */
DeploymentWhatIfProperties.prototype['parameters'] = undefined;

/**
 * @member {module:model/ParametersLink} parametersLink
 */
DeploymentWhatIfProperties.prototype['parametersLink'] = undefined;

/**
 * The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.
 * @member {Object} template
 */
DeploymentWhatIfProperties.prototype['template'] = undefined;

/**
 * @member {module:model/TemplateLink} templateLink
 */
DeploymentWhatIfProperties.prototype['templateLink'] = undefined;


// Implement DeploymentProperties interface:
/**
 * @member {module:model/DebugSetting} debugSetting
 */
DeploymentProperties.prototype['debugSetting'] = undefined;
/**
 * The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.
 * @member {module:model/DeploymentProperties.ModeEnum} mode
 */
DeploymentProperties.prototype['mode'] = undefined;
/**
 * @member {module:model/OnErrorDeployment} onErrorDeployment
 */
DeploymentProperties.prototype['onErrorDeployment'] = undefined;
/**
 * Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.
 * @member {Object} parameters
 */
DeploymentProperties.prototype['parameters'] = undefined;
/**
 * @member {module:model/ParametersLink} parametersLink
 */
DeploymentProperties.prototype['parametersLink'] = undefined;
/**
 * The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.
 * @member {Object} template
 */
DeploymentProperties.prototype['template'] = undefined;
/**
 * @member {module:model/TemplateLink} templateLink
 */
DeploymentProperties.prototype['templateLink'] = undefined;



/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
DeploymentWhatIfProperties['ModeEnum'] = {

    /**
     * value: "Incremental"
     * @const
     */
    "Incremental": "Incremental",

    /**
     * value: "Complete"
     * @const
     */
    "Complete": "Complete"
};



export default DeploymentWhatIfProperties;

