/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OnErrorDeploymentExtended model module.
 * @module model/OnErrorDeploymentExtended
 * @version 2019-08-01
 */
class OnErrorDeploymentExtended {
    /**
     * Constructs a new <code>OnErrorDeploymentExtended</code>.
     * Deployment on error behavior with additional details.
     * @alias module:model/OnErrorDeploymentExtended
     */
    constructor() { 
        
        OnErrorDeploymentExtended.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OnErrorDeploymentExtended</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OnErrorDeploymentExtended} obj Optional instance to populate.
     * @return {module:model/OnErrorDeploymentExtended} The populated <code>OnErrorDeploymentExtended</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OnErrorDeploymentExtended();

            if (data.hasOwnProperty('deploymentName')) {
                obj['deploymentName'] = ApiClient.convertToType(data['deploymentName'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OnErrorDeploymentExtended</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OnErrorDeploymentExtended</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deploymentName'] && !(typeof data['deploymentName'] === 'string' || data['deploymentName'] instanceof String)) {
            throw new Error("Expected the field `deploymentName` to be a primitive type in the JSON string but got " + data['deploymentName']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The deployment to be used on error case.
 * @member {String} deploymentName
 */
OnErrorDeploymentExtended.prototype['deploymentName'] = undefined;

/**
 * The state of the provisioning for the on error deployment.
 * @member {String} provisioningState
 */
OnErrorDeploymentExtended.prototype['provisioningState'] = undefined;

/**
 * The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
 * @member {module:model/OnErrorDeploymentExtended.TypeEnum} type
 */
OnErrorDeploymentExtended.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
OnErrorDeploymentExtended['TypeEnum'] = {

    /**
     * value: "LastSuccessful"
     * @const
     */
    "LastSuccessful": "LastSuccessful",

    /**
     * value: "SpecificDeployment"
     * @const
     */
    "SpecificDeployment": "SpecificDeployment"
};



export default OnErrorDeploymentExtended;

