# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.what_if_property_change import WhatIfPropertyChange
from openapi_server import util


class WhatIfChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after: object=None, before: object=None, change_type: str=None, delta: List[WhatIfPropertyChange]=None, resource_id: str=None):
        """WhatIfChange - a model defined in OpenAPI

        :param after: The after of this WhatIfChange.
        :param before: The before of this WhatIfChange.
        :param change_type: The change_type of this WhatIfChange.
        :param delta: The delta of this WhatIfChange.
        :param resource_id: The resource_id of this WhatIfChange.
        """
        self.openapi_types = {
            'after': object,
            'before': object,
            'change_type': str,
            'delta': List[WhatIfPropertyChange],
            'resource_id': str
        }

        self.attribute_map = {
            'after': 'after',
            'before': 'before',
            'change_type': 'changeType',
            'delta': 'delta',
            'resource_id': 'resourceId'
        }

        self._after = after
        self._before = before
        self._change_type = change_type
        self._delta = delta
        self._resource_id = resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WhatIfChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WhatIfChange of this WhatIfChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after(self):
        """Gets the after of this WhatIfChange.

        The predicted snapshot of the resource after the deployment is executed.

        :return: The after of this WhatIfChange.
        :rtype: object
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this WhatIfChange.

        The predicted snapshot of the resource after the deployment is executed.

        :param after: The after of this WhatIfChange.
        :type after: object
        """

        self._after = after

    @property
    def before(self):
        """Gets the before of this WhatIfChange.

        The snapshot of the resource before the deployment is executed.

        :return: The before of this WhatIfChange.
        :rtype: object
        """
        return self._before

    @before.setter
    def before(self, before):
        """Sets the before of this WhatIfChange.

        The snapshot of the resource before the deployment is executed.

        :param before: The before of this WhatIfChange.
        :type before: object
        """

        self._before = before

    @property
    def change_type(self):
        """Gets the change_type of this WhatIfChange.

        Type of change that will be made to the resource when the deployment is executed.

        :return: The change_type of this WhatIfChange.
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this WhatIfChange.

        Type of change that will be made to the resource when the deployment is executed.

        :param change_type: The change_type of this WhatIfChange.
        :type change_type: str
        """
        allowed_values = ["Create", "Delete", "Ignore", "Deploy", "NoChange", "Modify"]  # noqa: E501
        if change_type not in allowed_values:
            raise ValueError(
                "Invalid value for `change_type` ({0}), must be one of {1}"
                .format(change_type, allowed_values)
            )

        self._change_type = change_type

    @property
    def delta(self):
        """Gets the delta of this WhatIfChange.

        The predicted changes to resource properties.

        :return: The delta of this WhatIfChange.
        :rtype: List[WhatIfPropertyChange]
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this WhatIfChange.

        The predicted changes to resource properties.

        :param delta: The delta of this WhatIfChange.
        :type delta: List[WhatIfPropertyChange]
        """

        self._delta = delta

    @property
    def resource_id(self):
        """Gets the resource_id of this WhatIfChange.

        Resource ID

        :return: The resource_id of this WhatIfChange.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this WhatIfChange.

        Resource ID

        :param resource_id: The resource_id of this WhatIfChange.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id
