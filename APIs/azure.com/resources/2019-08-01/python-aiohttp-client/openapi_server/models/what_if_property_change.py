# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WhatIfPropertyChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after: object=None, before: object=None, children: List[WhatIfPropertyChange]=None, path: str=None, property_change_type: str=None):
        """WhatIfPropertyChange - a model defined in OpenAPI

        :param after: The after of this WhatIfPropertyChange.
        :param before: The before of this WhatIfPropertyChange.
        :param children: The children of this WhatIfPropertyChange.
        :param path: The path of this WhatIfPropertyChange.
        :param property_change_type: The property_change_type of this WhatIfPropertyChange.
        """
        self.openapi_types = {
            'after': object,
            'before': object,
            'children': List[WhatIfPropertyChange],
            'path': str,
            'property_change_type': str
        }

        self.attribute_map = {
            'after': 'after',
            'before': 'before',
            'children': 'children',
            'path': 'path',
            'property_change_type': 'propertyChangeType'
        }

        self._after = after
        self._before = before
        self._children = children
        self._path = path
        self._property_change_type = property_change_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WhatIfPropertyChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WhatIfPropertyChange of this WhatIfPropertyChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after(self):
        """Gets the after of this WhatIfPropertyChange.

        The value of the property after the deployment is executed.

        :return: The after of this WhatIfPropertyChange.
        :rtype: object
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this WhatIfPropertyChange.

        The value of the property after the deployment is executed.

        :param after: The after of this WhatIfPropertyChange.
        :type after: object
        """

        self._after = after

    @property
    def before(self):
        """Gets the before of this WhatIfPropertyChange.

        The value of the property before the deployment is executed.

        :return: The before of this WhatIfPropertyChange.
        :rtype: object
        """
        return self._before

    @before.setter
    def before(self, before):
        """Sets the before of this WhatIfPropertyChange.

        The value of the property before the deployment is executed.

        :param before: The before of this WhatIfPropertyChange.
        :type before: object
        """

        self._before = before

    @property
    def children(self):
        """Gets the children of this WhatIfPropertyChange.

        Nested property changes.

        :return: The children of this WhatIfPropertyChange.
        :rtype: List[WhatIfPropertyChange]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this WhatIfPropertyChange.

        Nested property changes.

        :param children: The children of this WhatIfPropertyChange.
        :type children: List[WhatIfPropertyChange]
        """

        self._children = children

    @property
    def path(self):
        """Gets the path of this WhatIfPropertyChange.

        The path of the property.

        :return: The path of this WhatIfPropertyChange.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this WhatIfPropertyChange.

        The path of the property.

        :param path: The path of this WhatIfPropertyChange.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def property_change_type(self):
        """Gets the property_change_type of this WhatIfPropertyChange.

        The type of property change.

        :return: The property_change_type of this WhatIfPropertyChange.
        :rtype: str
        """
        return self._property_change_type

    @property_change_type.setter
    def property_change_type(self, property_change_type):
        """Sets the property_change_type of this WhatIfPropertyChange.

        The type of property change.

        :param property_change_type: The property_change_type of this WhatIfPropertyChange.
        :type property_change_type: str
        """
        allowed_values = ["Create", "Delete", "Modify", "Array"]  # noqa: E501
        if property_change_type not in allowed_values:
            raise ValueError(
                "Invalid value for `property_change_type` ({0}), must be one of {1}"
                .format(property_change_type, allowed_values)
            )

        self._property_change_type = property_change_type
