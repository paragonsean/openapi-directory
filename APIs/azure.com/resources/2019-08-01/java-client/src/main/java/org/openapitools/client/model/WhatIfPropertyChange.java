/*
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The predicted change to the resource property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:22.301400-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WhatIfPropertyChange {
  public static final String SERIALIZED_NAME_AFTER = "after";
  @SerializedName(SERIALIZED_NAME_AFTER)
  private Object after;

  public static final String SERIALIZED_NAME_BEFORE = "before";
  @SerializedName(SERIALIZED_NAME_BEFORE)
  private Object before;

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<WhatIfPropertyChange> children = new ArrayList<>();

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  /**
   * The type of property change.
   */
  @JsonAdapter(PropertyChangeTypeEnum.Adapter.class)
  public enum PropertyChangeTypeEnum {
    CREATE("Create"),
    
    DELETE("Delete"),
    
    MODIFY("Modify"),
    
    ARRAY("Array");

    private String value;

    PropertyChangeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyChangeTypeEnum fromValue(String value) {
      for (PropertyChangeTypeEnum b : PropertyChangeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PropertyChangeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyChangeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyChangeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PropertyChangeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PropertyChangeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROPERTY_CHANGE_TYPE = "propertyChangeType";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CHANGE_TYPE)
  private PropertyChangeTypeEnum propertyChangeType;

  public WhatIfPropertyChange() {
  }

  public WhatIfPropertyChange after(Object after) {
    this.after = after;
    return this;
  }

  /**
   * The value of the property after the deployment is executed.
   * @return after
   */
  @javax.annotation.Nullable
  public Object getAfter() {
    return after;
  }

  public void setAfter(Object after) {
    this.after = after;
  }


  public WhatIfPropertyChange before(Object before) {
    this.before = before;
    return this;
  }

  /**
   * The value of the property before the deployment is executed.
   * @return before
   */
  @javax.annotation.Nullable
  public Object getBefore() {
    return before;
  }

  public void setBefore(Object before) {
    this.before = before;
  }


  public WhatIfPropertyChange children(List<WhatIfPropertyChange> children) {
    this.children = children;
    return this;
  }

  public WhatIfPropertyChange addChildrenItem(WhatIfPropertyChange childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

  /**
   * Nested property changes.
   * @return children
   */
  @javax.annotation.Nullable
  public List<WhatIfPropertyChange> getChildren() {
    return children;
  }

  public void setChildren(List<WhatIfPropertyChange> children) {
    this.children = children;
  }


  public WhatIfPropertyChange path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The path of the property.
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public WhatIfPropertyChange propertyChangeType(PropertyChangeTypeEnum propertyChangeType) {
    this.propertyChangeType = propertyChangeType;
    return this;
  }

  /**
   * The type of property change.
   * @return propertyChangeType
   */
  @javax.annotation.Nonnull
  public PropertyChangeTypeEnum getPropertyChangeType() {
    return propertyChangeType;
  }

  public void setPropertyChangeType(PropertyChangeTypeEnum propertyChangeType) {
    this.propertyChangeType = propertyChangeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WhatIfPropertyChange whatIfPropertyChange = (WhatIfPropertyChange) o;
    return Objects.equals(this.after, whatIfPropertyChange.after) &&
        Objects.equals(this.before, whatIfPropertyChange.before) &&
        Objects.equals(this.children, whatIfPropertyChange.children) &&
        Objects.equals(this.path, whatIfPropertyChange.path) &&
        Objects.equals(this.propertyChangeType, whatIfPropertyChange.propertyChangeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(after, before, children, path, propertyChangeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WhatIfPropertyChange {\n");
    sb.append("    after: ").append(toIndentedString(after)).append("\n");
    sb.append("    before: ").append(toIndentedString(before)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    propertyChangeType: ").append(toIndentedString(propertyChangeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("after");
    openapiFields.add("before");
    openapiFields.add("children");
    openapiFields.add("path");
    openapiFields.add("propertyChangeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("propertyChangeType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WhatIfPropertyChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WhatIfPropertyChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WhatIfPropertyChange is not found in the empty JSON string", WhatIfPropertyChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WhatIfPropertyChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WhatIfPropertyChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WhatIfPropertyChange.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) {
        JsonArray jsonArraychildren = jsonObj.getAsJsonArray("children");
        if (jsonArraychildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `children` to be an array in the JSON string but got `%s`", jsonObj.get("children").toString()));
          }

          // validate the optional field `children` (array)
          for (int i = 0; i < jsonArraychildren.size(); i++) {
            WhatIfPropertyChange.validateJsonElement(jsonArraychildren.get(i));
          };
        }
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("propertyChangeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyChangeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyChangeType").toString()));
      }
      // validate the required field `propertyChangeType`
      PropertyChangeTypeEnum.validateJsonElement(jsonObj.get("propertyChangeType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WhatIfPropertyChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WhatIfPropertyChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WhatIfPropertyChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WhatIfPropertyChange.class));

       return (TypeAdapter<T>) new TypeAdapter<WhatIfPropertyChange>() {
           @Override
           public void write(JsonWriter out, WhatIfPropertyChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WhatIfPropertyChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WhatIfPropertyChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WhatIfPropertyChange
   * @throws IOException if the JSON string is invalid with respect to WhatIfPropertyChange
   */
  public static WhatIfPropertyChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WhatIfPropertyChange.class);
  }

  /**
   * Convert an instance of WhatIfPropertyChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

