/*
 * ResourceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentExportResult;
import org.openapitools.client.model.DeploymentExtended;
import org.openapitools.client.model.DeploymentListResult;
import org.openapitools.client.model.DeploymentValidateResult;
import org.openapitools.client.model.TemplateHashResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeploymentsApi
 */
@Disabled
public class DeploymentsApiTest {

    private final DeploymentsApi api = new DeploymentsApi();

    /**
     * Calculate the hash of the given template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCalculateTemplateHashTest() throws ApiException {
        String apiVersion = null;
        Object template = null;
        TemplateHashResult response = api.deploymentsCalculateTemplateHash(apiVersion, template);
        // TODO: test validations
    }

    /**
     * Cancel a currently running template deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCancelTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.deploymentsCancel(resourceGroupName, deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Checks whether deployment exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCheckExistenceTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.deploymentsCheckExistence(resourceGroupName, deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Create a named template deployment using a template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Deployment parameters = null;
        DeploymentExtended response = api.deploymentsCreateOrUpdate(resourceGroupName, deploymentName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Delete deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.deploymentsDelete(resourceGroupName, deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Exports a deployment template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsExportTemplateTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        DeploymentExportResult response = api.deploymentsExportTemplate(resourceGroupName, deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Get a deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsGetTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        DeploymentExtended response = api.deploymentsGet(resourceGroupName, deploymentName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Get a list of deployments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsListTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        DeploymentListResult response = api.deploymentsList(resourceGroupName, apiVersion, subscriptionId, $filter, $top);
        // TODO: test validations
    }

    /**
     * Validate a deployment template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentsValidateTest() throws ApiException {
        String resourceGroupName = null;
        String deploymentName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Deployment parameters = null;
        DeploymentValidateResult response = api.deploymentsValidate(resourceGroupName, deploymentName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
