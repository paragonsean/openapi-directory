/*
 * ResourceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GenericResource;
import org.openapitools.client.model.ResourceListResult;
import org.openapitools.client.model.ResourcesMoveInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResourcesApi
 */
@Disabled
public class ResourcesApiTest {

    private final ResourcesApi api = new ResourcesApi();

    /**
     * Checks whether resource exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesCheckExistenceTest() throws ApiException {
        String resourceGroupName = null;
        String resourceProviderNamespace = null;
        String parentResourcePath = null;
        String resourceType = null;
        String resourceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.resourcesCheckExistence(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Create a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String resourceProviderNamespace = null;
        String parentResourcePath = null;
        String resourceType = null;
        String resourceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        GenericResource parameters = null;
        GenericResource response = api.resourcesCreateOrUpdate(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Delete resource and all of its resources. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String resourceProviderNamespace = null;
        String parentResourcePath = null;
        String resourceType = null;
        String resourceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.resourcesDelete(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns a resource belonging to a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesGetTest() throws ApiException {
        String resourceGroupName = null;
        String resourceProviderNamespace = null;
        String parentResourcePath = null;
        String resourceType = null;
        String resourceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        GenericResource response = api.resourcesGet(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Get all of the resources under a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        String $expand = null;
        Integer $top = null;
        ResourceListResult response = api.resourcesList(apiVersion, subscriptionId, $filter, $expand, $top);
        // TODO: test validations
    }

    /**
     * Move resources from one resource group to another. The resources being moved should all be in the same resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMoveResourcesTest() throws ApiException {
        String sourceResourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ResourcesMoveInfo parameters = null;
        api.resourcesMoveResources(sourceResourceGroupName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Updates a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String resourceProviderNamespace = null;
        String parentResourcePath = null;
        String resourceType = null;
        String resourceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        GenericResource parameters = null;
        GenericResource response = api.resourcesUpdate(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
