/**
 * ResourceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeploymentsApi_H
#define OAI_OAIDeploymentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIDeployment.h"
#include "OAIDeploymentExportResult.h"
#include "OAIDeploymentExtended.h"
#include "OAIDeploymentListResult.h"
#include "OAIDeploymentValidateResult.h"
#include "OAIObject.h"
#include "OAITemplateHashResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeploymentsApi : public QObject {
    Q_OBJECT

public:
    OAIDeploymentsApi(const int timeOut = 0);
    ~OAIDeploymentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  r_template OAIObject [required]
    */
    virtual void deploymentsCalculateTemplateHash(const QString &api_version, const OAIObject &r_template);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void deploymentsCancel(const QString &resource_group_name, const QString &deployment_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void deploymentsCheckExistence(const QString &resource_group_name, const QString &deployment_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIDeployment [required]
    */
    virtual void deploymentsCreateOrUpdate(const QString &resource_group_name, const QString &deployment_name, const QString &api_version, const QString &subscription_id, const OAIDeployment &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void deploymentsDelete(const QString &resource_group_name, const QString &deployment_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void deploymentsExportTemplate(const QString &resource_group_name, const QString &deployment_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void deploymentsGet(const QString &resource_group_name, const QString &deployment_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void deploymentsList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIDeployment [required]
    */
    virtual void deploymentsValidate(const QString &resource_group_name, const QString &deployment_name, const QString &api_version, const QString &subscription_id, const OAIDeployment &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deploymentsCalculateTemplateHashCallback(OAIHttpRequestWorker *worker);
    void deploymentsCancelCallback(OAIHttpRequestWorker *worker);
    void deploymentsCheckExistenceCallback(OAIHttpRequestWorker *worker);
    void deploymentsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void deploymentsDeleteCallback(OAIHttpRequestWorker *worker);
    void deploymentsExportTemplateCallback(OAIHttpRequestWorker *worker);
    void deploymentsGetCallback(OAIHttpRequestWorker *worker);
    void deploymentsListCallback(OAIHttpRequestWorker *worker);
    void deploymentsValidateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deploymentsCalculateTemplateHashSignal(OAITemplateHashResult summary);
    void deploymentsCancelSignal();
    void deploymentsCheckExistenceSignal();
    void deploymentsCreateOrUpdateSignal(OAIDeploymentExtended summary);
    void deploymentsDeleteSignal();
    void deploymentsExportTemplateSignal(OAIDeploymentExportResult summary);
    void deploymentsGetSignal(OAIDeploymentExtended summary);
    void deploymentsListSignal(OAIDeploymentListResult summary);
    void deploymentsValidateSignal(OAIDeploymentValidateResult summary);


    void deploymentsCalculateTemplateHashSignalFull(OAIHttpRequestWorker *worker, OAITemplateHashResult summary);
    void deploymentsCancelSignalFull(OAIHttpRequestWorker *worker);
    void deploymentsCheckExistenceSignalFull(OAIHttpRequestWorker *worker);
    void deploymentsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentExtended summary);
    void deploymentsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void deploymentsExportTemplateSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentExportResult summary);
    void deploymentsGetSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentExtended summary);
    void deploymentsListSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentListResult summary);
    void deploymentsValidateSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentValidateResult summary);

    Q_DECL_DEPRECATED_X("Use deploymentsCalculateTemplateHashSignalError() instead")
    void deploymentsCalculateTemplateHashSignalE(OAITemplateHashResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsCalculateTemplateHashSignalError(OAITemplateHashResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsCancelSignalError() instead")
    void deploymentsCancelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsCancelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsCheckExistenceSignalError() instead")
    void deploymentsCheckExistenceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsCheckExistenceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsCreateOrUpdateSignalError() instead")
    void deploymentsCreateOrUpdateSignalE(OAIDeploymentExtended summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsCreateOrUpdateSignalError(OAIDeploymentExtended summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsDeleteSignalError() instead")
    void deploymentsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsExportTemplateSignalError() instead")
    void deploymentsExportTemplateSignalE(OAIDeploymentExportResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsExportTemplateSignalError(OAIDeploymentExportResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsGetSignalError() instead")
    void deploymentsGetSignalE(OAIDeploymentExtended summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsGetSignalError(OAIDeploymentExtended summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsListSignalError() instead")
    void deploymentsListSignalE(OAIDeploymentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsListSignalError(OAIDeploymentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsValidateSignalError() instead")
    void deploymentsValidateSignalE(OAIDeploymentValidateResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsValidateSignalError(OAIDeploymentValidateResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deploymentsCalculateTemplateHashSignalErrorFull() instead")
    void deploymentsCalculateTemplateHashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsCalculateTemplateHashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsCancelSignalErrorFull() instead")
    void deploymentsCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsCheckExistenceSignalErrorFull() instead")
    void deploymentsCheckExistenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsCheckExistenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsCreateOrUpdateSignalErrorFull() instead")
    void deploymentsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsDeleteSignalErrorFull() instead")
    void deploymentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsExportTemplateSignalErrorFull() instead")
    void deploymentsExportTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsExportTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsGetSignalErrorFull() instead")
    void deploymentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsListSignalErrorFull() instead")
    void deploymentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsValidateSignalErrorFull() instead")
    void deploymentsValidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsValidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
