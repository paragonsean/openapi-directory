/**
 * ResourceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GenericResource from '../model/GenericResource';
import ResourceListResult from '../model/ResourceListResult';
import ResourcesMoveInfo from '../model/ResourcesMoveInfo';

/**
* Resources service.
* @module api/ResourcesApi
* @version 2016-02-01
*/
export default class ResourcesApi {

    /**
    * Constructs a new ResourcesApi. 
    * @alias module:api/ResourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the resourcesCheckExistence operation.
     * @callback module:api/ResourcesApi~resourcesCheckExistenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks whether resource exists.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} resourceProviderNamespace Resource identity.
     * @param {String} parentResourcePath Resource identity.
     * @param {String} resourceType Resource identity.
     * @param {String} resourceName Resource identity.
     * @param {String} apiVersion 
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ResourcesApi~resourcesCheckExistenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resourcesCheckExistence(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling resourcesCheckExistence");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling resourcesCheckExistence");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling resourcesCheckExistence");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling resourcesCheckExistence");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling resourcesCheckExistence");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resourcesCheckExistence");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling resourcesCheckExistence");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesCreateOrUpdate operation.
     * @callback module:api/ResourcesApi~resourcesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a resource.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} resourceProviderNamespace Resource identity.
     * @param {String} parentResourcePath Resource identity.
     * @param {String} resourceType Resource identity.
     * @param {String} resourceName Resource identity.
     * @param {String} apiVersion 
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/GenericResource} parameters Create or update resource parameters.
     * @param {module:api/ResourcesApi~resourcesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResource}
     */
    resourcesCreateOrUpdate(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling resourcesCreateOrUpdate");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling resourcesCreateOrUpdate");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling resourcesCreateOrUpdate");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling resourcesCreateOrUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling resourcesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resourcesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling resourcesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling resourcesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesDelete operation.
     * @callback module:api/ResourcesApi~resourcesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete resource and all of its resources. 
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} resourceProviderNamespace Resource identity.
     * @param {String} parentResourcePath Resource identity.
     * @param {String} resourceType Resource identity.
     * @param {String} resourceName Resource identity.
     * @param {String} apiVersion 
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ResourcesApi~resourcesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resourcesDelete(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling resourcesDelete");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling resourcesDelete");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling resourcesDelete");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling resourcesDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling resourcesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resourcesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling resourcesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesGet operation.
     * @callback module:api/ResourcesApi~resourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a resource belonging to a resource group.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} resourceProviderNamespace Resource identity.
     * @param {String} parentResourcePath Resource identity.
     * @param {String} resourceType Resource identity.
     * @param {String} resourceName Resource identity.
     * @param {String} apiVersion 
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ResourcesApi~resourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResource}
     */
    resourcesGet(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling resourcesGet");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling resourcesGet");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling resourcesGet");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling resourcesGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling resourcesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resourcesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling resourcesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GenericResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesList operation.
     * @callback module:api/ResourcesApi~resourcesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all of the resources under a subscription.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {String} [expand] The $expand query parameter.
     * @param {Number} [top] Query parameters. If null is passed returns all resource groups.
     * @param {module:api/ResourcesApi~resourcesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceListResult}
     */
    resourcesList(apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resourcesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling resourcesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$expand': opts['expand'],
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesMoveResources operation.
     * @callback module:api/ResourcesApi~resourcesMoveResourcesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move resources from one resource group to another. The resources being moved should all be in the same resource group.
     * @param {String} sourceResourceGroupName Source resource group name.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/ResourcesMoveInfo} parameters move resources' parameters.
     * @param {module:api/ResourcesApi~resourcesMoveResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resourcesMoveResources(sourceResourceGroupName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'sourceResourceGroupName' is set
      if (sourceResourceGroupName === undefined || sourceResourceGroupName === null) {
        throw new Error("Missing the required parameter 'sourceResourceGroupName' when calling resourcesMoveResources");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resourcesMoveResources");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling resourcesMoveResources");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling resourcesMoveResources");
      }

      let pathParams = {
        'sourceResourceGroupName': sourceResourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesUpdate operation.
     * @callback module:api/ResourcesApi~resourcesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a resource.
     * @param {String} resourceGroupName The name of the resource group for the resource. The name is case insensitive.
     * @param {String} resourceProviderNamespace The namespace of the resource provider.
     * @param {String} parentResourcePath The parent resource identity.
     * @param {String} resourceType The resource type of the resource to update.
     * @param {String} resourceName The name of the resource to update.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/GenericResource} parameters Parameters for updating the resource.
     * @param {module:api/ResourcesApi~resourcesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResource}
     */
    resourcesUpdate(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling resourcesUpdate");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling resourcesUpdate");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling resourcesUpdate");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling resourcesUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling resourcesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resourcesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling resourcesUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling resourcesUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
