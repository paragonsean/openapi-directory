/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProviderResourceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProviderResourceType::OAIProviderResourceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProviderResourceType::OAIProviderResourceType() {
    this->initializeModel();
}

OAIProviderResourceType::~OAIProviderResourceType() {}

void OAIProviderResourceType::initializeModel() {

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_api_versions_isSet = false;
    m_api_versions_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;
}

void OAIProviderResourceType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProviderResourceType::fromJsonObject(QJsonObject json) {

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("aliases")]);
    m_aliases_isSet = !json[QString("aliases")].isNull() && m_aliases_isValid;

    m_api_versions_isValid = ::OpenAPI::fromJsonValue(m_api_versions, json[QString("apiVersions")]);
    m_api_versions_isSet = !json[QString("apiVersions")].isNull() && m_api_versions_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;
}

QString OAIProviderResourceType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProviderResourceType::asJsonObject() const {
    QJsonObject obj;
    if (m_aliases.size() > 0) {
        obj.insert(QString("aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_api_versions.size() > 0) {
        obj.insert(QString("apiVersions"), ::OpenAPI::toJsonValue(m_api_versions));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    return obj;
}

QList<OAIAliasType> OAIProviderResourceType::getAliases() const {
    return m_aliases;
}
void OAIProviderResourceType::setAliases(const QList<OAIAliasType> &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAIProviderResourceType::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAIProviderResourceType::is_aliases_Valid() const{
    return m_aliases_isValid;
}

QList<QString> OAIProviderResourceType::getApiVersions() const {
    return m_api_versions;
}
void OAIProviderResourceType::setApiVersions(const QList<QString> &api_versions) {
    m_api_versions = api_versions;
    m_api_versions_isSet = true;
}

bool OAIProviderResourceType::is_api_versions_Set() const{
    return m_api_versions_isSet;
}

bool OAIProviderResourceType::is_api_versions_Valid() const{
    return m_api_versions_isValid;
}

QList<QString> OAIProviderResourceType::getLocations() const {
    return m_locations;
}
void OAIProviderResourceType::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIProviderResourceType::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIProviderResourceType::is_locations_Valid() const{
    return m_locations_isValid;
}

QMap<QString, QString> OAIProviderResourceType::getProperties() const {
    return m_properties;
}
void OAIProviderResourceType::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIProviderResourceType::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIProviderResourceType::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIProviderResourceType::getResourceType() const {
    return m_resource_type;
}
void OAIProviderResourceType::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIProviderResourceType::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIProviderResourceType::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

bool OAIProviderResourceType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aliases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProviderResourceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
