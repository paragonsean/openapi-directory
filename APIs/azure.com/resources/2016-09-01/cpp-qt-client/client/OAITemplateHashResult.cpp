/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateHashResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateHashResult::OAITemplateHashResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateHashResult::OAITemplateHashResult() {
    this->initializeModel();
}

OAITemplateHashResult::~OAITemplateHashResult() {}

void OAITemplateHashResult::initializeModel() {

    m_minified_template_isSet = false;
    m_minified_template_isValid = false;

    m_template_hash_isSet = false;
    m_template_hash_isValid = false;
}

void OAITemplateHashResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateHashResult::fromJsonObject(QJsonObject json) {

    m_minified_template_isValid = ::OpenAPI::fromJsonValue(m_minified_template, json[QString("minifiedTemplate")]);
    m_minified_template_isSet = !json[QString("minifiedTemplate")].isNull() && m_minified_template_isValid;

    m_template_hash_isValid = ::OpenAPI::fromJsonValue(m_template_hash, json[QString("templateHash")]);
    m_template_hash_isSet = !json[QString("templateHash")].isNull() && m_template_hash_isValid;
}

QString OAITemplateHashResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateHashResult::asJsonObject() const {
    QJsonObject obj;
    if (m_minified_template_isSet) {
        obj.insert(QString("minifiedTemplate"), ::OpenAPI::toJsonValue(m_minified_template));
    }
    if (m_template_hash_isSet) {
        obj.insert(QString("templateHash"), ::OpenAPI::toJsonValue(m_template_hash));
    }
    return obj;
}

QString OAITemplateHashResult::getMinifiedTemplate() const {
    return m_minified_template;
}
void OAITemplateHashResult::setMinifiedTemplate(const QString &minified_template) {
    m_minified_template = minified_template;
    m_minified_template_isSet = true;
}

bool OAITemplateHashResult::is_minified_template_Set() const{
    return m_minified_template_isSet;
}

bool OAITemplateHashResult::is_minified_template_Valid() const{
    return m_minified_template_isValid;
}

QString OAITemplateHashResult::getTemplateHash() const {
    return m_template_hash;
}
void OAITemplateHashResult::setTemplateHash(const QString &template_hash) {
    m_template_hash = template_hash;
    m_template_hash_isSet = true;
}

bool OAITemplateHashResult::is_template_hash_Set() const{
    return m_template_hash_isSet;
}

bool OAITemplateHashResult::is_template_hash_Valid() const{
    return m_template_hash_isValid;
}

bool OAITemplateHashResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_minified_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateHashResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
