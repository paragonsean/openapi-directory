# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_group_properties import ResourceGroupProperties
from openapi_server import util


class ResourceGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, location: str=None, managed_by: str=None, name: str=None, properties: ResourceGroupProperties=None, tags: Dict[str, str]=None):
        """ResourceGroup - a model defined in OpenAPI

        :param id: The id of this ResourceGroup.
        :param location: The location of this ResourceGroup.
        :param managed_by: The managed_by of this ResourceGroup.
        :param name: The name of this ResourceGroup.
        :param properties: The properties of this ResourceGroup.
        :param tags: The tags of this ResourceGroup.
        """
        self.openapi_types = {
            'id': str,
            'location': str,
            'managed_by': str,
            'name': str,
            'properties': ResourceGroupProperties,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'id': 'id',
            'location': 'location',
            'managed_by': 'managedBy',
            'name': 'name',
            'properties': 'properties',
            'tags': 'tags'
        }

        self._id = id
        self._location = location
        self._managed_by = managed_by
        self._name = name
        self._properties = properties
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceGroup of this ResourceGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ResourceGroup.

        The ID of the resource group.

        :return: The id of this ResourceGroup.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceGroup.

        The ID of the resource group.

        :param id: The id of this ResourceGroup.
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this ResourceGroup.

        The location of the resource group. It cannot be changed after the resource group has been created. It must be one of the supported Azure locations.

        :return: The location of this ResourceGroup.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ResourceGroup.

        The location of the resource group. It cannot be changed after the resource group has been created. It must be one of the supported Azure locations.

        :param location: The location of this ResourceGroup.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def managed_by(self):
        """Gets the managed_by of this ResourceGroup.

        The ID of the resource that manages this resource group.

        :return: The managed_by of this ResourceGroup.
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this ResourceGroup.

        The ID of the resource that manages this resource group.

        :param managed_by: The managed_by of this ResourceGroup.
        :type managed_by: str
        """

        self._managed_by = managed_by

    @property
    def name(self):
        """Gets the name of this ResourceGroup.

        The name of the resource group.

        :return: The name of this ResourceGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceGroup.

        The name of the resource group.

        :param name: The name of this ResourceGroup.
        :type name: str
        """

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this ResourceGroup.


        :return: The properties of this ResourceGroup.
        :rtype: ResourceGroupProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ResourceGroup.


        :param properties: The properties of this ResourceGroup.
        :type properties: ResourceGroupProperties
        """

        self._properties = properties

    @property
    def tags(self):
        """Gets the tags of this ResourceGroup.

        The tags attached to the resource group.

        :return: The tags of this ResourceGroup.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ResourceGroup.

        The tags attached to the resource group.

        :param tags: The tags of this ResourceGroup.
        :type tags: Dict[str, str]
        """

        self._tags = tags
