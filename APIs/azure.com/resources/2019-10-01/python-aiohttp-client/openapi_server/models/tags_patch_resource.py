# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tags import Tags
from openapi_server import util


class TagsPatchResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation: str=None, properties: Tags=None):
        """TagsPatchResource - a model defined in OpenAPI

        :param operation: The operation of this TagsPatchResource.
        :param properties: The properties of this TagsPatchResource.
        """
        self.openapi_types = {
            'operation': str,
            'properties': Tags
        }

        self.attribute_map = {
            'operation': 'operation',
            'properties': 'properties'
        }

        self._operation = operation
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagsPatchResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagsPatchResource of this TagsPatchResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation(self):
        """Gets the operation of this TagsPatchResource.

        The operation type for the patch API.

        :return: The operation of this TagsPatchResource.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this TagsPatchResource.

        The operation type for the patch API.

        :param operation: The operation of this TagsPatchResource.
        :type operation: str
        """
        allowed_values = ["Replace", "Merge", "Delete"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def properties(self):
        """Gets the properties of this TagsPatchResource.


        :return: The properties of this TagsPatchResource.
        :rtype: Tags
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TagsPatchResource.


        :param properties: The properties of this TagsPatchResource.
        :type properties: Tags
        """

        self._properties = properties
