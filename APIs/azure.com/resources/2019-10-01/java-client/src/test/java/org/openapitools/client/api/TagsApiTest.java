/*
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.TagDetails;
import org.openapitools.client.model.TagValue;
import org.openapitools.client.model.TagsListResult;
import org.openapitools.client.model.TagsPatchResource;
import org.openapitools.client.model.TagsResource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
@Disabled
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    /**
     * Creates a predefined tag name.
     *
     * This operation allows adding a name to the list of predefined tag names for the given subscription. A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the following prefixes which are reserved for Azure use: &#39;microsoft&#39;, &#39;azure&#39;, &#39;windows&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsCreateOrUpdateTest() throws ApiException {
        String tagName = null;
        String apiVersion = null;
        String subscriptionId = null;
        TagDetails response = api.tagsCreateOrUpdate(tagName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Creates or updates the entire set of tags on a resource or subscription.
     *
     * This operation allows adding or replacing the entire set of tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsCreateOrUpdateAtScopeTest() throws ApiException {
        String scope = null;
        String apiVersion = null;
        TagsResource parameters = null;
        TagsResource response = api.tagsCreateOrUpdateAtScope(scope, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Creates a predefined value for a predefined tag name.
     *
     * This operation allows adding a value to the list of predefined values for an existing predefined tag name. A tag value can have a maximum of 256 characters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsCreateOrUpdateValueTest() throws ApiException {
        String tagName = null;
        String tagValue = null;
        String apiVersion = null;
        String subscriptionId = null;
        TagValue response = api.tagsCreateOrUpdateValue(tagName, tagValue, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes a predefined tag name.
     *
     * This operation allows deleting a name from the list of predefined tag names for the given subscription. The name being deleted must not be in use as a tag name for any resource. All predefined values for the given name must have already been deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsDeleteTest() throws ApiException {
        String tagName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.tagsDelete(tagName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes the entire set of tags on a resource or subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsDeleteAtScopeTest() throws ApiException {
        String scope = null;
        String apiVersion = null;
        api.tagsDeleteAtScope(scope, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a predefined tag value for a predefined tag name.
     *
     * This operation allows deleting a value from the list of predefined values for an existing predefined tag name. The value being deleted must not be in use as a tag value for the given tag name for any resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsDeleteValueTest() throws ApiException {
        String tagName = null;
        String tagValue = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.tagsDeleteValue(tagName, tagValue, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entire set of tags on a resource or subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsGetAtScopeTest() throws ApiException {
        String scope = null;
        String apiVersion = null;
        TagsResource response = api.tagsGetAtScope(scope, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a summary of tag usage under the subscription.
     *
     * This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        TagsListResult response = api.tagsList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Selectively updates the set of tags on a resource or subscription.
     *
     * This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The &#39;replace&#39; option replaces the entire set of existing tags with a new set. The &#39;merge&#39; option allows adding tags with new names and updating the values of tags with existing names. The &#39;delete&#39; option allows selectively deleting tags based on given names or name/value pairs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsUpdateAtScopeTest() throws ApiException {
        String scope = null;
        String apiVersion = null;
        TagsPatchResource parameters = null;
        TagsResource response = api.tagsUpdateAtScope(scope, apiVersion, parameters);
        // TODO: test validations
    }

}
