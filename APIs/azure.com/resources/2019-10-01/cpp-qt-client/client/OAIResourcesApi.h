/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResourcesApi_H
#define OAI_OAIResourcesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIGenericResource.h"
#include "OAIResourceListResult.h"
#include "OAIResourcesMoveInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResourcesApi : public QObject {
    Q_OBJECT

public:
    OAIResourcesApi(const int timeOut = 0);
    ~OAIResourcesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  parent_resource_path QString [required]
    * @param[in]  resource_type QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void resourcesCheckExistence(const QString &resource_group_name, const QString &resource_provider_namespace, const QString &parent_resource_path, const QString &resource_type, const QString &resource_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void resourcesCheckExistenceById(const QString &resource_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  parent_resource_path QString [required]
    * @param[in]  resource_type QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIGenericResource [required]
    */
    virtual void resourcesCreateOrUpdate(const QString &resource_group_name, const QString &resource_provider_namespace, const QString &parent_resource_path, const QString &resource_type, const QString &resource_name, const QString &api_version, const QString &subscription_id, const OAIGenericResource &parameters);

    /**
    * @param[in]  resource_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIGenericResource [required]
    */
    virtual void resourcesCreateOrUpdateById(const QString &resource_id, const QString &api_version, const OAIGenericResource &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  parent_resource_path QString [required]
    * @param[in]  resource_type QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void resourcesDelete(const QString &resource_group_name, const QString &resource_provider_namespace, const QString &parent_resource_path, const QString &resource_type, const QString &resource_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void resourcesDeleteById(const QString &resource_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  parent_resource_path QString [required]
    * @param[in]  resource_type QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void resourcesGet(const QString &resource_group_name, const QString &resource_provider_namespace, const QString &parent_resource_path, const QString &resource_type, const QString &resource_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void resourcesGetById(const QString &resource_id, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void resourcesList(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  source_resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIResourcesMoveInfo [required]
    */
    virtual void resourcesMoveResources(const QString &source_resource_group_name, const QString &api_version, const QString &subscription_id, const OAIResourcesMoveInfo &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  parent_resource_path QString [required]
    * @param[in]  resource_type QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIGenericResource [required]
    */
    virtual void resourcesUpdate(const QString &resource_group_name, const QString &resource_provider_namespace, const QString &parent_resource_path, const QString &resource_type, const QString &resource_name, const QString &api_version, const QString &subscription_id, const OAIGenericResource &parameters);

    /**
    * @param[in]  resource_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIGenericResource [required]
    */
    virtual void resourcesUpdateById(const QString &resource_id, const QString &api_version, const OAIGenericResource &parameters);

    /**
    * @param[in]  source_resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIResourcesMoveInfo [required]
    */
    virtual void resourcesValidateMoveResources(const QString &source_resource_group_name, const QString &api_version, const QString &subscription_id, const OAIResourcesMoveInfo &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void resourcesCheckExistenceCallback(OAIHttpRequestWorker *worker);
    void resourcesCheckExistenceByIdCallback(OAIHttpRequestWorker *worker);
    void resourcesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void resourcesCreateOrUpdateByIdCallback(OAIHttpRequestWorker *worker);
    void resourcesDeleteCallback(OAIHttpRequestWorker *worker);
    void resourcesDeleteByIdCallback(OAIHttpRequestWorker *worker);
    void resourcesGetCallback(OAIHttpRequestWorker *worker);
    void resourcesGetByIdCallback(OAIHttpRequestWorker *worker);
    void resourcesListCallback(OAIHttpRequestWorker *worker);
    void resourcesMoveResourcesCallback(OAIHttpRequestWorker *worker);
    void resourcesUpdateCallback(OAIHttpRequestWorker *worker);
    void resourcesUpdateByIdCallback(OAIHttpRequestWorker *worker);
    void resourcesValidateMoveResourcesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void resourcesCheckExistenceSignal();
    void resourcesCheckExistenceByIdSignal();
    void resourcesCreateOrUpdateSignal(OAIGenericResource summary);
    void resourcesCreateOrUpdateByIdSignal(OAIGenericResource summary);
    void resourcesDeleteSignal();
    void resourcesDeleteByIdSignal();
    void resourcesGetSignal(OAIGenericResource summary);
    void resourcesGetByIdSignal(OAIGenericResource summary);
    void resourcesListSignal(OAIResourceListResult summary);
    void resourcesMoveResourcesSignal();
    void resourcesUpdateSignal(OAIGenericResource summary);
    void resourcesUpdateByIdSignal(OAIGenericResource summary);
    void resourcesValidateMoveResourcesSignal();


    void resourcesCheckExistenceSignalFull(OAIHttpRequestWorker *worker);
    void resourcesCheckExistenceByIdSignalFull(OAIHttpRequestWorker *worker);
    void resourcesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGenericResource summary);
    void resourcesCreateOrUpdateByIdSignalFull(OAIHttpRequestWorker *worker, OAIGenericResource summary);
    void resourcesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void resourcesDeleteByIdSignalFull(OAIHttpRequestWorker *worker);
    void resourcesGetSignalFull(OAIHttpRequestWorker *worker, OAIGenericResource summary);
    void resourcesGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIGenericResource summary);
    void resourcesListSignalFull(OAIHttpRequestWorker *worker, OAIResourceListResult summary);
    void resourcesMoveResourcesSignalFull(OAIHttpRequestWorker *worker);
    void resourcesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGenericResource summary);
    void resourcesUpdateByIdSignalFull(OAIHttpRequestWorker *worker, OAIGenericResource summary);
    void resourcesValidateMoveResourcesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use resourcesCheckExistenceSignalError() instead")
    void resourcesCheckExistenceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesCheckExistenceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesCheckExistenceByIdSignalError() instead")
    void resourcesCheckExistenceByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesCheckExistenceByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesCreateOrUpdateSignalError() instead")
    void resourcesCreateOrUpdateSignalE(OAIGenericResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesCreateOrUpdateSignalError(OAIGenericResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesCreateOrUpdateByIdSignalError() instead")
    void resourcesCreateOrUpdateByIdSignalE(OAIGenericResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesCreateOrUpdateByIdSignalError(OAIGenericResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesDeleteSignalError() instead")
    void resourcesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesDeleteByIdSignalError() instead")
    void resourcesDeleteByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesDeleteByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesGetSignalError() instead")
    void resourcesGetSignalE(OAIGenericResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesGetSignalError(OAIGenericResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesGetByIdSignalError() instead")
    void resourcesGetByIdSignalE(OAIGenericResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesGetByIdSignalError(OAIGenericResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesListSignalError() instead")
    void resourcesListSignalE(OAIResourceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesListSignalError(OAIResourceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMoveResourcesSignalError() instead")
    void resourcesMoveResourcesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMoveResourcesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesUpdateSignalError() instead")
    void resourcesUpdateSignalE(OAIGenericResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesUpdateSignalError(OAIGenericResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesUpdateByIdSignalError() instead")
    void resourcesUpdateByIdSignalE(OAIGenericResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesUpdateByIdSignalError(OAIGenericResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesValidateMoveResourcesSignalError() instead")
    void resourcesValidateMoveResourcesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesValidateMoveResourcesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use resourcesCheckExistenceSignalErrorFull() instead")
    void resourcesCheckExistenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesCheckExistenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesCheckExistenceByIdSignalErrorFull() instead")
    void resourcesCheckExistenceByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesCheckExistenceByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesCreateOrUpdateSignalErrorFull() instead")
    void resourcesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesCreateOrUpdateByIdSignalErrorFull() instead")
    void resourcesCreateOrUpdateByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesCreateOrUpdateByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesDeleteSignalErrorFull() instead")
    void resourcesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesDeleteByIdSignalErrorFull() instead")
    void resourcesDeleteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesDeleteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesGetSignalErrorFull() instead")
    void resourcesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesGetByIdSignalErrorFull() instead")
    void resourcesGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesListSignalErrorFull() instead")
    void resourcesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMoveResourcesSignalErrorFull() instead")
    void resourcesMoveResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMoveResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesUpdateSignalErrorFull() instead")
    void resourcesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesUpdateByIdSignalErrorFull() instead")
    void resourcesUpdateByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesUpdateByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesValidateMoveResourcesSignalErrorFull() instead")
    void resourcesValidateMoveResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesValidateMoveResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
