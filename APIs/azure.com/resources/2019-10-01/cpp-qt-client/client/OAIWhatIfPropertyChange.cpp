/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWhatIfPropertyChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWhatIfPropertyChange::OAIWhatIfPropertyChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWhatIfPropertyChange::OAIWhatIfPropertyChange() {
    this->initializeModel();
}

OAIWhatIfPropertyChange::~OAIWhatIfPropertyChange() {}

void OAIWhatIfPropertyChange::initializeModel() {

    m_after_isSet = false;
    m_after_isValid = false;

    m_before_isSet = false;
    m_before_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_property_change_type_isSet = false;
    m_property_change_type_isValid = false;
}

void OAIWhatIfPropertyChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWhatIfPropertyChange::fromJsonObject(QJsonObject json) {

    m_after_isValid = ::OpenAPI::fromJsonValue(m_after, json[QString("after")]);
    m_after_isSet = !json[QString("after")].isNull() && m_after_isValid;

    m_before_isValid = ::OpenAPI::fromJsonValue(m_before, json[QString("before")]);
    m_before_isSet = !json[QString("before")].isNull() && m_before_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_property_change_type_isValid = ::OpenAPI::fromJsonValue(m_property_change_type, json[QString("propertyChangeType")]);
    m_property_change_type_isSet = !json[QString("propertyChangeType")].isNull() && m_property_change_type_isValid;
}

QString OAIWhatIfPropertyChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWhatIfPropertyChange::asJsonObject() const {
    QJsonObject obj;
    if (m_after_isSet) {
        obj.insert(QString("after"), ::OpenAPI::toJsonValue(m_after));
    }
    if (m_before_isSet) {
        obj.insert(QString("before"), ::OpenAPI::toJsonValue(m_before));
    }
    if (m_children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_property_change_type_isSet) {
        obj.insert(QString("propertyChangeType"), ::OpenAPI::toJsonValue(m_property_change_type));
    }
    return obj;
}

OAIObject OAIWhatIfPropertyChange::getAfter() const {
    return m_after;
}
void OAIWhatIfPropertyChange::setAfter(const OAIObject &after) {
    m_after = after;
    m_after_isSet = true;
}

bool OAIWhatIfPropertyChange::is_after_Set() const{
    return m_after_isSet;
}

bool OAIWhatIfPropertyChange::is_after_Valid() const{
    return m_after_isValid;
}

OAIObject OAIWhatIfPropertyChange::getBefore() const {
    return m_before;
}
void OAIWhatIfPropertyChange::setBefore(const OAIObject &before) {
    m_before = before;
    m_before_isSet = true;
}

bool OAIWhatIfPropertyChange::is_before_Set() const{
    return m_before_isSet;
}

bool OAIWhatIfPropertyChange::is_before_Valid() const{
    return m_before_isValid;
}

QList<OAIWhatIfPropertyChange> OAIWhatIfPropertyChange::getChildren() const {
    return m_children;
}
void OAIWhatIfPropertyChange::setChildren(const QList<OAIWhatIfPropertyChange> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIWhatIfPropertyChange::is_children_Set() const{
    return m_children_isSet;
}

bool OAIWhatIfPropertyChange::is_children_Valid() const{
    return m_children_isValid;
}

QString OAIWhatIfPropertyChange::getPath() const {
    return m_path;
}
void OAIWhatIfPropertyChange::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIWhatIfPropertyChange::is_path_Set() const{
    return m_path_isSet;
}

bool OAIWhatIfPropertyChange::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIWhatIfPropertyChange::getPropertyChangeType() const {
    return m_property_change_type;
}
void OAIWhatIfPropertyChange::setPropertyChangeType(const QString &property_change_type) {
    m_property_change_type = property_change_type;
    m_property_change_type_isSet = true;
}

bool OAIWhatIfPropertyChange::is_property_change_type_Set() const{
    return m_property_change_type_isSet;
}

bool OAIWhatIfPropertyChange::is_property_change_type_Valid() const{
    return m_property_change_type_isValid;
}

bool OAIWhatIfPropertyChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_change_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWhatIfPropertyChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_path_isValid && m_property_change_type_isValid && true;
}

} // namespace OpenAPI
