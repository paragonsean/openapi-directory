/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentWhatIfProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentWhatIfProperties::OAIDeploymentWhatIfProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentWhatIfProperties::OAIDeploymentWhatIfProperties() {
    this->initializeModel();
}

OAIDeploymentWhatIfProperties::~OAIDeploymentWhatIfProperties() {}

void OAIDeploymentWhatIfProperties::initializeModel() {

    m_what_if_settings_isSet = false;
    m_what_if_settings_isValid = false;

    m_debug_setting_isSet = false;
    m_debug_setting_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_on_error_deployment_isSet = false;
    m_on_error_deployment_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_parameters_link_isSet = false;
    m_parameters_link_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_template_link_isSet = false;
    m_template_link_isValid = false;
}

void OAIDeploymentWhatIfProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentWhatIfProperties::fromJsonObject(QJsonObject json) {

    m_what_if_settings_isValid = ::OpenAPI::fromJsonValue(m_what_if_settings, json[QString("whatIfSettings")]);
    m_what_if_settings_isSet = !json[QString("whatIfSettings")].isNull() && m_what_if_settings_isValid;

    m_debug_setting_isValid = ::OpenAPI::fromJsonValue(m_debug_setting, json[QString("debugSetting")]);
    m_debug_setting_isSet = !json[QString("debugSetting")].isNull() && m_debug_setting_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_on_error_deployment_isValid = ::OpenAPI::fromJsonValue(m_on_error_deployment, json[QString("onErrorDeployment")]);
    m_on_error_deployment_isSet = !json[QString("onErrorDeployment")].isNull() && m_on_error_deployment_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_parameters_link_isValid = ::OpenAPI::fromJsonValue(m_parameters_link, json[QString("parametersLink")]);
    m_parameters_link_isSet = !json[QString("parametersLink")].isNull() && m_parameters_link_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_template_link_isValid = ::OpenAPI::fromJsonValue(m_template_link, json[QString("templateLink")]);
    m_template_link_isSet = !json[QString("templateLink")].isNull() && m_template_link_isValid;
}

QString OAIDeploymentWhatIfProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentWhatIfProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_what_if_settings.isSet()) {
        obj.insert(QString("whatIfSettings"), ::OpenAPI::toJsonValue(m_what_if_settings));
    }
    if (m_debug_setting.isSet()) {
        obj.insert(QString("debugSetting"), ::OpenAPI::toJsonValue(m_debug_setting));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_on_error_deployment.isSet()) {
        obj.insert(QString("onErrorDeployment"), ::OpenAPI::toJsonValue(m_on_error_deployment));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_parameters_link.isSet()) {
        obj.insert(QString("parametersLink"), ::OpenAPI::toJsonValue(m_parameters_link));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_template_link.isSet()) {
        obj.insert(QString("templateLink"), ::OpenAPI::toJsonValue(m_template_link));
    }
    return obj;
}

OAIDeploymentWhatIfSettings OAIDeploymentWhatIfProperties::getWhatIfSettings() const {
    return m_what_if_settings;
}
void OAIDeploymentWhatIfProperties::setWhatIfSettings(const OAIDeploymentWhatIfSettings &what_if_settings) {
    m_what_if_settings = what_if_settings;
    m_what_if_settings_isSet = true;
}

bool OAIDeploymentWhatIfProperties::is_what_if_settings_Set() const{
    return m_what_if_settings_isSet;
}

bool OAIDeploymentWhatIfProperties::is_what_if_settings_Valid() const{
    return m_what_if_settings_isValid;
}

OAIDebugSetting OAIDeploymentWhatIfProperties::getDebugSetting() const {
    return m_debug_setting;
}
void OAIDeploymentWhatIfProperties::setDebugSetting(const OAIDebugSetting &debug_setting) {
    m_debug_setting = debug_setting;
    m_debug_setting_isSet = true;
}

bool OAIDeploymentWhatIfProperties::is_debug_setting_Set() const{
    return m_debug_setting_isSet;
}

bool OAIDeploymentWhatIfProperties::is_debug_setting_Valid() const{
    return m_debug_setting_isValid;
}

QString OAIDeploymentWhatIfProperties::getMode() const {
    return m_mode;
}
void OAIDeploymentWhatIfProperties::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIDeploymentWhatIfProperties::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIDeploymentWhatIfProperties::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIOnErrorDeployment OAIDeploymentWhatIfProperties::getOnErrorDeployment() const {
    return m_on_error_deployment;
}
void OAIDeploymentWhatIfProperties::setOnErrorDeployment(const OAIOnErrorDeployment &on_error_deployment) {
    m_on_error_deployment = on_error_deployment;
    m_on_error_deployment_isSet = true;
}

bool OAIDeploymentWhatIfProperties::is_on_error_deployment_Set() const{
    return m_on_error_deployment_isSet;
}

bool OAIDeploymentWhatIfProperties::is_on_error_deployment_Valid() const{
    return m_on_error_deployment_isValid;
}

OAIObject OAIDeploymentWhatIfProperties::getParameters() const {
    return m_parameters;
}
void OAIDeploymentWhatIfProperties::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDeploymentWhatIfProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDeploymentWhatIfProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIParametersLink OAIDeploymentWhatIfProperties::getParametersLink() const {
    return m_parameters_link;
}
void OAIDeploymentWhatIfProperties::setParametersLink(const OAIParametersLink &parameters_link) {
    m_parameters_link = parameters_link;
    m_parameters_link_isSet = true;
}

bool OAIDeploymentWhatIfProperties::is_parameters_link_Set() const{
    return m_parameters_link_isSet;
}

bool OAIDeploymentWhatIfProperties::is_parameters_link_Valid() const{
    return m_parameters_link_isValid;
}

OAIObject OAIDeploymentWhatIfProperties::getRTemplate() const {
    return m_r_template;
}
void OAIDeploymentWhatIfProperties::setRTemplate(const OAIObject &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIDeploymentWhatIfProperties::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIDeploymentWhatIfProperties::is_r_template_Valid() const{
    return m_r_template_isValid;
}

OAITemplateLink OAIDeploymentWhatIfProperties::getTemplateLink() const {
    return m_template_link;
}
void OAIDeploymentWhatIfProperties::setTemplateLink(const OAITemplateLink &template_link) {
    m_template_link = template_link;
    m_template_link_isSet = true;
}

bool OAIDeploymentWhatIfProperties::is_template_link_Set() const{
    return m_template_link_isSet;
}

bool OAIDeploymentWhatIfProperties::is_template_link_Valid() const{
    return m_template_link_isValid;
}

bool OAIDeploymentWhatIfProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_what_if_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_error_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_link.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentWhatIfProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mode_isValid && true;
}

} // namespace OpenAPI
