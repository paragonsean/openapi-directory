/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import Deployment from '../model/Deployment';
import DeploymentExportResult from '../model/DeploymentExportResult';
import DeploymentExtended from '../model/DeploymentExtended';
import DeploymentListResult from '../model/DeploymentListResult';
import DeploymentValidateResult from '../model/DeploymentValidateResult';
import DeploymentWhatIf from '../model/DeploymentWhatIf';
import ScopedDeployment from '../model/ScopedDeployment';
import TemplateHashResult from '../model/TemplateHashResult';
import WhatIfOperationResult from '../model/WhatIfOperationResult';

/**
* Deployments service.
* @module api/DeploymentsApi
* @version 2019-10-01
*/
export default class DeploymentsApi {

    /**
    * Constructs a new DeploymentsApi. 
    * @alias module:api/DeploymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deploymentsCalculateTemplateHash operation.
     * @callback module:api/DeploymentsApi~deploymentsCalculateTemplateHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateHashResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate the hash of the given template.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {Object.<String, Object>} template The template provided to calculate hash.
     * @param {module:api/DeploymentsApi~deploymentsCalculateTemplateHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateHashResult}
     */
    deploymentsCalculateTemplateHash(apiVersion, template, callback) {
      let postBody = template;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCalculateTemplateHash");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling deploymentsCalculateTemplateHash");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateHashResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Resources/calculateTemplateHash', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCancel operation.
     * @callback module:api/DeploymentsApi~deploymentsCancelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a currently running template deployment.
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resource group partially deployed.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DeploymentsApi~deploymentsCancelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsCancel(resourceGroupName, deploymentName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentsCancel");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCancel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCancel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsCancel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCancelAtManagementGroupScope operation.
     * @callback module:api/DeploymentsApi~deploymentsCancelAtManagementGroupScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a currently running template deployment.
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
     * @param {String} groupId The management group ID.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsCancelAtManagementGroupScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsCancelAtManagementGroupScope(groupId, deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deploymentsCancelAtManagementGroupScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCancelAtManagementGroupScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCancelAtManagementGroupScope");
      }

      let pathParams = {
        'groupId': groupId,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCancelAtScope operation.
     * @callback module:api/DeploymentsApi~deploymentsCancelAtScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a currently running template deployment.
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
     * @param {String} scope The resource scope.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsCancelAtScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsCancelAtScope(scope, deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling deploymentsCancelAtScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCancelAtScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCancelAtScope");
      }

      let pathParams = {
        'scope': scope,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCancelAtSubscriptionScope operation.
     * @callback module:api/DeploymentsApi~deploymentsCancelAtSubscriptionScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a currently running template deployment.
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DeploymentsApi~deploymentsCancelAtSubscriptionScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsCancelAtSubscriptionScope(deploymentName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCancelAtSubscriptionScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCancelAtSubscriptionScope");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsCancelAtSubscriptionScope");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCancelAtTenantScope operation.
     * @callback module:api/DeploymentsApi~deploymentsCancelAtTenantScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a currently running template deployment.
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsCancelAtTenantScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsCancelAtTenantScope(deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCancelAtTenantScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCancelAtTenantScope");
      }

      let pathParams = {
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Resources/deployments/{deploymentName}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCheckExistence operation.
     * @callback module:api/DeploymentsApi~deploymentsCheckExistenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks whether the deployment exists.
     * @param {String} resourceGroupName The name of the resource group with the deployment to check. The name is case insensitive.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DeploymentsApi~deploymentsCheckExistenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsCheckExistence(resourceGroupName, deploymentName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentsCheckExistence");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCheckExistence");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCheckExistence");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsCheckExistence");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCheckExistenceAtManagementGroupScope operation.
     * @callback module:api/DeploymentsApi~deploymentsCheckExistenceAtManagementGroupScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks whether the deployment exists.
     * @param {String} groupId The management group ID.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsCheckExistenceAtManagementGroupScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsCheckExistenceAtManagementGroupScope(groupId, deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deploymentsCheckExistenceAtManagementGroupScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCheckExistenceAtManagementGroupScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCheckExistenceAtManagementGroupScope");
      }

      let pathParams = {
        'groupId': groupId,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCheckExistenceAtScope operation.
     * @callback module:api/DeploymentsApi~deploymentsCheckExistenceAtScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks whether the deployment exists.
     * @param {String} scope The resource scope.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsCheckExistenceAtScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsCheckExistenceAtScope(scope, deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling deploymentsCheckExistenceAtScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCheckExistenceAtScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCheckExistenceAtScope");
      }

      let pathParams = {
        'scope': scope,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCheckExistenceAtSubscriptionScope operation.
     * @callback module:api/DeploymentsApi~deploymentsCheckExistenceAtSubscriptionScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks whether the deployment exists.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DeploymentsApi~deploymentsCheckExistenceAtSubscriptionScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsCheckExistenceAtSubscriptionScope(deploymentName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCheckExistenceAtSubscriptionScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCheckExistenceAtSubscriptionScope");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsCheckExistenceAtSubscriptionScope");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCheckExistenceAtTenantScope operation.
     * @callback module:api/DeploymentsApi~deploymentsCheckExistenceAtTenantScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks whether the deployment exists.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsCheckExistenceAtTenantScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsCheckExistenceAtTenantScope(deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCheckExistenceAtTenantScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCheckExistenceAtTenantScope");
      }

      let pathParams = {
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Resources/deployments/{deploymentName}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCreateOrUpdate operation.
     * @callback module:api/DeploymentsApi~deploymentsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExtended} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploys resources to a resource group.
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @param {String} resourceGroupName The name of the resource group to deploy the resources to. The name is case insensitive. The resource group must already exist.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/Deployment} parameters Additional parameters supplied to the operation.
     * @param {module:api/DeploymentsApi~deploymentsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExtended}
     */
    deploymentsCreateOrUpdate(resourceGroupName, deploymentName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentsCreateOrUpdate");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling deploymentsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentExtended;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCreateOrUpdateAtManagementGroupScope operation.
     * @callback module:api/DeploymentsApi~deploymentsCreateOrUpdateAtManagementGroupScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExtended} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploys resources at management group scope.
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @param {String} groupId The management group ID.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/ScopedDeployment} parameters Additional parameters supplied to the operation.
     * @param {module:api/DeploymentsApi~deploymentsCreateOrUpdateAtManagementGroupScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExtended}
     */
    deploymentsCreateOrUpdateAtManagementGroupScope(groupId, deploymentName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deploymentsCreateOrUpdateAtManagementGroupScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCreateOrUpdateAtManagementGroupScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCreateOrUpdateAtManagementGroupScope");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling deploymentsCreateOrUpdateAtManagementGroupScope");
      }

      let pathParams = {
        'groupId': groupId,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentExtended;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCreateOrUpdateAtScope operation.
     * @callback module:api/DeploymentsApi~deploymentsCreateOrUpdateAtScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExtended} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploys resources at a given scope.
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @param {String} scope The resource scope.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/Deployment} parameters Additional parameters supplied to the operation.
     * @param {module:api/DeploymentsApi~deploymentsCreateOrUpdateAtScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExtended}
     */
    deploymentsCreateOrUpdateAtScope(scope, deploymentName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling deploymentsCreateOrUpdateAtScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCreateOrUpdateAtScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCreateOrUpdateAtScope");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling deploymentsCreateOrUpdateAtScope");
      }

      let pathParams = {
        'scope': scope,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentExtended;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCreateOrUpdateAtSubscriptionScope operation.
     * @callback module:api/DeploymentsApi~deploymentsCreateOrUpdateAtSubscriptionScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExtended} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploys resources at subscription scope.
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/Deployment} parameters Additional parameters supplied to the operation.
     * @param {module:api/DeploymentsApi~deploymentsCreateOrUpdateAtSubscriptionScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExtended}
     */
    deploymentsCreateOrUpdateAtSubscriptionScope(deploymentName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCreateOrUpdateAtSubscriptionScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCreateOrUpdateAtSubscriptionScope");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsCreateOrUpdateAtSubscriptionScope");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling deploymentsCreateOrUpdateAtSubscriptionScope");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentExtended;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCreateOrUpdateAtTenantScope operation.
     * @callback module:api/DeploymentsApi~deploymentsCreateOrUpdateAtTenantScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExtended} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploys resources at tenant scope.
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/ScopedDeployment} parameters Additional parameters supplied to the operation.
     * @param {module:api/DeploymentsApi~deploymentsCreateOrUpdateAtTenantScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExtended}
     */
    deploymentsCreateOrUpdateAtTenantScope(deploymentName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsCreateOrUpdateAtTenantScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsCreateOrUpdateAtTenantScope");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling deploymentsCreateOrUpdateAtTenantScope");
      }

      let pathParams = {
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentExtended;
      return this.apiClient.callApi(
        '/providers/Microsoft.Resources/deployments/{deploymentName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsDelete operation.
     * @callback module:api/DeploymentsApi~deploymentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a deployment from the deployment history.
     * A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. Deleting a template deployment does not affect the state of the resource group. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @param {String} resourceGroupName The name of the resource group with the deployment to delete. The name is case insensitive.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DeploymentsApi~deploymentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsDelete(resourceGroupName, deploymentName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentsDelete");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsDeleteAtManagementGroupScope operation.
     * @callback module:api/DeploymentsApi~deploymentsDeleteAtManagementGroupScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a deployment from the deployment history.
     * A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @param {String} groupId The management group ID.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsDeleteAtManagementGroupScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsDeleteAtManagementGroupScope(groupId, deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deploymentsDeleteAtManagementGroupScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsDeleteAtManagementGroupScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsDeleteAtManagementGroupScope");
      }

      let pathParams = {
        'groupId': groupId,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsDeleteAtScope operation.
     * @callback module:api/DeploymentsApi~deploymentsDeleteAtScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a deployment from the deployment history.
     * A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @param {String} scope The resource scope.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsDeleteAtScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsDeleteAtScope(scope, deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling deploymentsDeleteAtScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsDeleteAtScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsDeleteAtScope");
      }

      let pathParams = {
        'scope': scope,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsDeleteAtSubscriptionScope operation.
     * @callback module:api/DeploymentsApi~deploymentsDeleteAtSubscriptionScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a deployment from the deployment history.
     * A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DeploymentsApi~deploymentsDeleteAtSubscriptionScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsDeleteAtSubscriptionScope(deploymentName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsDeleteAtSubscriptionScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsDeleteAtSubscriptionScope");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsDeleteAtSubscriptionScope");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsDeleteAtTenantScope operation.
     * @callback module:api/DeploymentsApi~deploymentsDeleteAtTenantScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a deployment from the deployment history.
     * A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsDeleteAtTenantScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentsDeleteAtTenantScope(deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsDeleteAtTenantScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsDeleteAtTenantScope");
      }

      let pathParams = {
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Resources/deployments/{deploymentName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsExportTemplate operation.
     * @callback module:api/DeploymentsApi~deploymentsExportTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExportResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports the template used for specified deployment.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DeploymentsApi~deploymentsExportTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExportResult}
     */
    deploymentsExportTemplate(resourceGroupName, deploymentName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentsExportTemplate");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsExportTemplate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsExportTemplate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsExportTemplate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentExportResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsExportTemplateAtManagementGroupScope operation.
     * @callback module:api/DeploymentsApi~deploymentsExportTemplateAtManagementGroupScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExportResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports the template used for specified deployment.
     * @param {String} groupId The management group ID.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsExportTemplateAtManagementGroupScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExportResult}
     */
    deploymentsExportTemplateAtManagementGroupScope(groupId, deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deploymentsExportTemplateAtManagementGroupScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsExportTemplateAtManagementGroupScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsExportTemplateAtManagementGroupScope");
      }

      let pathParams = {
        'groupId': groupId,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentExportResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsExportTemplateAtScope operation.
     * @callback module:api/DeploymentsApi~deploymentsExportTemplateAtScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExportResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports the template used for specified deployment.
     * @param {String} scope The resource scope.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsExportTemplateAtScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExportResult}
     */
    deploymentsExportTemplateAtScope(scope, deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling deploymentsExportTemplateAtScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsExportTemplateAtScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsExportTemplateAtScope");
      }

      let pathParams = {
        'scope': scope,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentExportResult;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsExportTemplateAtSubscriptionScope operation.
     * @callback module:api/DeploymentsApi~deploymentsExportTemplateAtSubscriptionScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExportResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports the template used for specified deployment.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DeploymentsApi~deploymentsExportTemplateAtSubscriptionScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExportResult}
     */
    deploymentsExportTemplateAtSubscriptionScope(deploymentName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsExportTemplateAtSubscriptionScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsExportTemplateAtSubscriptionScope");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsExportTemplateAtSubscriptionScope");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentExportResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsExportTemplateAtTenantScope operation.
     * @callback module:api/DeploymentsApi~deploymentsExportTemplateAtTenantScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExportResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports the template used for specified deployment.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsExportTemplateAtTenantScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExportResult}
     */
    deploymentsExportTemplateAtTenantScope(deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsExportTemplateAtTenantScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsExportTemplateAtTenantScope");
      }

      let pathParams = {
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentExportResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsGet operation.
     * @callback module:api/DeploymentsApi~deploymentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExtended} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a deployment.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DeploymentsApi~deploymentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExtended}
     */
    deploymentsGet(resourceGroupName, deploymentName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentsGet");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentExtended;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsGetAtManagementGroupScope operation.
     * @callback module:api/DeploymentsApi~deploymentsGetAtManagementGroupScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExtended} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a deployment.
     * @param {String} groupId The management group ID.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsGetAtManagementGroupScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExtended}
     */
    deploymentsGetAtManagementGroupScope(groupId, deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deploymentsGetAtManagementGroupScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsGetAtManagementGroupScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsGetAtManagementGroupScope");
      }

      let pathParams = {
        'groupId': groupId,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentExtended;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsGetAtScope operation.
     * @callback module:api/DeploymentsApi~deploymentsGetAtScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExtended} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a deployment.
     * @param {String} scope The resource scope.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsGetAtScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExtended}
     */
    deploymentsGetAtScope(scope, deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling deploymentsGetAtScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsGetAtScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsGetAtScope");
      }

      let pathParams = {
        'scope': scope,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentExtended;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsGetAtSubscriptionScope operation.
     * @callback module:api/DeploymentsApi~deploymentsGetAtSubscriptionScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExtended} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a deployment.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DeploymentsApi~deploymentsGetAtSubscriptionScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExtended}
     */
    deploymentsGetAtSubscriptionScope(deploymentName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsGetAtSubscriptionScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsGetAtSubscriptionScope");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsGetAtSubscriptionScope");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentExtended;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsGetAtTenantScope operation.
     * @callback module:api/DeploymentsApi~deploymentsGetAtTenantScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentExtended} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a deployment.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DeploymentsApi~deploymentsGetAtTenantScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentExtended}
     */
    deploymentsGetAtTenantScope(deploymentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsGetAtTenantScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsGetAtTenantScope");
      }

      let pathParams = {
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentExtended;
      return this.apiClient.callApi(
        '/providers/Microsoft.Resources/deployments/{deploymentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsListAtManagementGroupScope operation.
     * @callback module:api/DeploymentsApi~deploymentsListAtManagementGroupScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the deployments for a management group.
     * @param {String} groupId The management group ID.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.
     * @param {Number} [top] The number of results to get. If null is passed, returns all deployments.
     * @param {module:api/DeploymentsApi~deploymentsListAtManagementGroupScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentListResult}
     */
    deploymentsListAtManagementGroupScope(groupId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deploymentsListAtManagementGroupScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsListAtManagementGroupScope");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsListAtScope operation.
     * @callback module:api/DeploymentsApi~deploymentsListAtScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the deployments at the given scope.
     * @param {String} scope The resource scope.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.
     * @param {Number} [top] The number of results to get. If null is passed, returns all deployments.
     * @param {module:api/DeploymentsApi~deploymentsListAtScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentListResult}
     */
    deploymentsListAtScope(scope, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling deploymentsListAtScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsListAtScope");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentListResult;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Resources/deployments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsListAtSubscriptionScope operation.
     * @callback module:api/DeploymentsApi~deploymentsListAtSubscriptionScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the deployments for a subscription.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.
     * @param {Number} [top] The number of results to get. If null is passed, returns all deployments.
     * @param {module:api/DeploymentsApi~deploymentsListAtSubscriptionScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentListResult}
     */
    deploymentsListAtSubscriptionScope(apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsListAtSubscriptionScope");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsListAtSubscriptionScope");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsListAtTenantScope operation.
     * @callback module:api/DeploymentsApi~deploymentsListAtTenantScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the deployments at the tenant scope.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.
     * @param {Number} [top] The number of results to get. If null is passed, returns all deployments.
     * @param {module:api/DeploymentsApi~deploymentsListAtTenantScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentListResult}
     */
    deploymentsListAtTenantScope(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsListAtTenantScope");
      }

      let pathParams = {
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Resources/deployments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsListByResourceGroup operation.
     * @callback module:api/DeploymentsApi~deploymentsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the deployments for a resource group.
     * @param {String} resourceGroupName The name of the resource group with the deployments to get. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.
     * @param {Number} [top] The number of results to get. If null is passed, returns all deployments.
     * @param {module:api/DeploymentsApi~deploymentsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentListResult}
     */
    deploymentsListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsValidate operation.
     * @callback module:api/DeploymentsApi~deploymentsValidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
     * @param {String} resourceGroupName The name of the resource group the template will be deployed to. The name is case insensitive.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/Deployment} parameters Parameters to validate.
     * @param {module:api/DeploymentsApi~deploymentsValidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentValidateResult}
     */
    deploymentsValidate(resourceGroupName, deploymentName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentsValidate");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsValidate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsValidate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsValidate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling deploymentsValidate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentValidateResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsValidateAtManagementGroupScope operation.
     * @callback module:api/DeploymentsApi~deploymentsValidateAtManagementGroupScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
     * @param {String} groupId The management group ID.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/ScopedDeployment} parameters Parameters to validate.
     * @param {module:api/DeploymentsApi~deploymentsValidateAtManagementGroupScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentValidateResult}
     */
    deploymentsValidateAtManagementGroupScope(groupId, deploymentName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deploymentsValidateAtManagementGroupScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsValidateAtManagementGroupScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsValidateAtManagementGroupScope");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling deploymentsValidateAtManagementGroupScope");
      }

      let pathParams = {
        'groupId': groupId,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentValidateResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsValidateAtScope operation.
     * @callback module:api/DeploymentsApi~deploymentsValidateAtScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
     * @param {String} scope The resource scope.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/Deployment} parameters Parameters to validate.
     * @param {module:api/DeploymentsApi~deploymentsValidateAtScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentValidateResult}
     */
    deploymentsValidateAtScope(scope, deploymentName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling deploymentsValidateAtScope");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsValidateAtScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsValidateAtScope");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling deploymentsValidateAtScope");
      }

      let pathParams = {
        'scope': scope,
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentValidateResult;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsValidateAtSubscriptionScope operation.
     * @callback module:api/DeploymentsApi~deploymentsValidateAtSubscriptionScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/Deployment} parameters Parameters to validate.
     * @param {module:api/DeploymentsApi~deploymentsValidateAtSubscriptionScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentValidateResult}
     */
    deploymentsValidateAtSubscriptionScope(deploymentName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsValidateAtSubscriptionScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsValidateAtSubscriptionScope");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsValidateAtSubscriptionScope");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling deploymentsValidateAtSubscriptionScope");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentValidateResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsValidateAtTenantScope operation.
     * @callback module:api/DeploymentsApi~deploymentsValidateAtTenantScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/ScopedDeployment} parameters Parameters to validate.
     * @param {module:api/DeploymentsApi~deploymentsValidateAtTenantScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentValidateResult}
     */
    deploymentsValidateAtTenantScope(deploymentName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsValidateAtTenantScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsValidateAtTenantScope");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling deploymentsValidateAtTenantScope");
      }

      let pathParams = {
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentValidateResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Resources/deployments/{deploymentName}/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsWhatIf operation.
     * @callback module:api/DeploymentsApi~deploymentsWhatIfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhatIfOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns changes that will be made by the deployment if executed at the scope of the resource group.
     * @param {String} resourceGroupName The name of the resource group the template will be deployed to. The name is case insensitive.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/DeploymentWhatIf} parameters Parameters to validate.
     * @param {module:api/DeploymentsApi~deploymentsWhatIfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhatIfOperationResult}
     */
    deploymentsWhatIf(resourceGroupName, deploymentName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentsWhatIf");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsWhatIf");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsWhatIf");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsWhatIf");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling deploymentsWhatIf");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WhatIfOperationResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsWhatIfAtSubscriptionScope operation.
     * @callback module:api/DeploymentsApi~deploymentsWhatIfAtSubscriptionScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhatIfOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns changes that will be made by the deployment if executed at the scope of the subscription.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/DeploymentWhatIf} parameters Parameters to What If.
     * @param {module:api/DeploymentsApi~deploymentsWhatIfAtSubscriptionScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhatIfOperationResult}
     */
    deploymentsWhatIfAtSubscriptionScope(deploymentName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentsWhatIfAtSubscriptionScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentsWhatIfAtSubscriptionScope");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentsWhatIfAtSubscriptionScope");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling deploymentsWhatIfAtSubscriptionScope");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WhatIfOperationResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
