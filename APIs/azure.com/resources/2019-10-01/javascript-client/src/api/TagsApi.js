/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import TagDetails from '../model/TagDetails';
import TagValue from '../model/TagValue';
import TagsListResult from '../model/TagsListResult';
import TagsPatchResource from '../model/TagsPatchResource';
import TagsResource from '../model/TagsResource';

/**
* Tags service.
* @module api/TagsApi
* @version 2019-10-01
*/
export default class TagsApi {

    /**
    * Constructs a new TagsApi. 
    * @alias module:api/TagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tagsCreateOrUpdate operation.
     * @callback module:api/TagsApi~tagsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a predefined tag name.
     * This operation allows adding a name to the list of predefined tag names for the given subscription. A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the following prefixes which are reserved for Azure use: 'microsoft', 'azure', 'windows'.
     * @param {String} tagName The name of the tag to create.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/TagsApi~tagsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagDetails}
     */
    tagsCreateOrUpdate(tagName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling tagsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tagsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tagsCreateOrUpdate");
      }

      let pathParams = {
        'tagName': tagName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagDetails;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/tagNames/{tagName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsCreateOrUpdateAtScope operation.
     * @callback module:api/TagsApi~tagsCreateOrUpdateAtScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagsResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the entire set of tags on a resource or subscription.
     * This operation allows adding or replacing the entire set of tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags.
     * @param {String} scope The resource scope.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/TagsResource} parameters 
     * @param {module:api/TagsApi~tagsCreateOrUpdateAtScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagsResource}
     */
    tagsCreateOrUpdateAtScope(scope, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling tagsCreateOrUpdateAtScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tagsCreateOrUpdateAtScope");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling tagsCreateOrUpdateAtScope");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TagsResource;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Resources/tags/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsCreateOrUpdateValue operation.
     * @callback module:api/TagsApi~tagsCreateOrUpdateValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a predefined value for a predefined tag name.
     * This operation allows adding a value to the list of predefined values for an existing predefined tag name. A tag value can have a maximum of 256 characters.
     * @param {String} tagName The name of the tag.
     * @param {String} tagValue The value of the tag to create.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/TagsApi~tagsCreateOrUpdateValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagValue}
     */
    tagsCreateOrUpdateValue(tagName, tagValue, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling tagsCreateOrUpdateValue");
      }
      // verify the required parameter 'tagValue' is set
      if (tagValue === undefined || tagValue === null) {
        throw new Error("Missing the required parameter 'tagValue' when calling tagsCreateOrUpdateValue");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tagsCreateOrUpdateValue");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tagsCreateOrUpdateValue");
      }

      let pathParams = {
        'tagName': tagName,
        'tagValue': tagValue,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagValue;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsDelete operation.
     * @callback module:api/TagsApi~tagsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a predefined tag name.
     * This operation allows deleting a name from the list of predefined tag names for the given subscription. The name being deleted must not be in use as a tag name for any resource. All predefined values for the given name must have already been deleted.
     * @param {String} tagName The name of the tag.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/TagsApi~tagsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagsDelete(tagName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling tagsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tagsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tagsDelete");
      }

      let pathParams = {
        'tagName': tagName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/tagNames/{tagName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsDeleteAtScope operation.
     * @callback module:api/TagsApi~tagsDeleteAtScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the entire set of tags on a resource or subscription.
     * @param {String} scope The resource scope.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/TagsApi~tagsDeleteAtScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagsDeleteAtScope(scope, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling tagsDeleteAtScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tagsDeleteAtScope");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Resources/tags/default', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsDeleteValue operation.
     * @callback module:api/TagsApi~tagsDeleteValueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a predefined tag value for a predefined tag name.
     * This operation allows deleting a value from the list of predefined values for an existing predefined tag name. The value being deleted must not be in use as a tag value for the given tag name for any resource.
     * @param {String} tagName The name of the tag.
     * @param {String} tagValue The value of the tag to delete.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/TagsApi~tagsDeleteValueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagsDeleteValue(tagName, tagValue, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling tagsDeleteValue");
      }
      // verify the required parameter 'tagValue' is set
      if (tagValue === undefined || tagValue === null) {
        throw new Error("Missing the required parameter 'tagValue' when calling tagsDeleteValue");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tagsDeleteValue");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tagsDeleteValue");
      }

      let pathParams = {
        'tagName': tagName,
        'tagValue': tagValue,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsGetAtScope operation.
     * @callback module:api/TagsApi~tagsGetAtScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagsResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the entire set of tags on a resource or subscription.
     * @param {String} scope The resource scope.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/TagsApi~tagsGetAtScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagsResource}
     */
    tagsGetAtScope(scope, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling tagsGetAtScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tagsGetAtScope");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagsResource;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Resources/tags/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsList operation.
     * @callback module:api/TagsApi~tagsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a summary of tag usage under the subscription.
     * This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/TagsApi~tagsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagsListResult}
     */
    tagsList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tagsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tagsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/tagNames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsUpdateAtScope operation.
     * @callback module:api/TagsApi~tagsUpdateAtScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagsResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Selectively updates the set of tags on a resource or subscription.
     * This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows adding tags with new names and updating the values of tags with existing names. The 'delete' option allows selectively deleting tags based on given names or name/value pairs.
     * @param {String} scope The resource scope.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/TagsPatchResource} parameters 
     * @param {module:api/TagsApi~tagsUpdateAtScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagsResource}
     */
    tagsUpdateAtScope(scope, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling tagsUpdateAtScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tagsUpdateAtScope");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling tagsUpdateAtScope");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TagsResource;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Resources/tags/default', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
