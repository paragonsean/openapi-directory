/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AliasType from './AliasType';

/**
 * The ProviderResourceType model module.
 * @module model/ProviderResourceType
 * @version 2019-10-01
 */
class ProviderResourceType {
    /**
     * Constructs a new <code>ProviderResourceType</code>.
     * Resource type managed by the resource provider.
     * @alias module:model/ProviderResourceType
     */
    constructor() { 
        
        ProviderResourceType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProviderResourceType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProviderResourceType} obj Optional instance to populate.
     * @return {module:model/ProviderResourceType} The populated <code>ProviderResourceType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProviderResourceType();

            if (data.hasOwnProperty('aliases')) {
                obj['aliases'] = ApiClient.convertToType(data['aliases'], [AliasType]);
            }
            if (data.hasOwnProperty('apiVersions')) {
                obj['apiVersions'] = ApiClient.convertToType(data['apiVersions'], ['String']);
            }
            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], 'String');
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], ['String']);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProviderResourceType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProviderResourceType</code>.
     */
    static validateJSON(data) {
        if (data['aliases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aliases'])) {
                throw new Error("Expected the field `aliases` to be an array in the JSON data but got " + data['aliases']);
            }
            // validate the optional field `aliases` (array)
            for (const item of data['aliases']) {
                AliasType.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['apiVersions'])) {
            throw new Error("Expected the field `apiVersions` to be an array in the JSON data but got " + data['apiVersions']);
        }
        // ensure the json data is a string
        if (data['capabilities'] && !(typeof data['capabilities'] === 'string' || data['capabilities'] instanceof String)) {
            throw new Error("Expected the field `capabilities` to be a primitive type in the JSON string but got " + data['capabilities']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locations'])) {
            throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }

        return true;
    }


}



/**
 * The aliases that are supported by this resource type.
 * @member {Array.<module:model/AliasType>} aliases
 */
ProviderResourceType.prototype['aliases'] = undefined;

/**
 * The API version.
 * @member {Array.<String>} apiVersions
 */
ProviderResourceType.prototype['apiVersions'] = undefined;

/**
 * The additional capabilities offered by this resource type.
 * @member {String} capabilities
 */
ProviderResourceType.prototype['capabilities'] = undefined;

/**
 * The collection of locations where this resource type can be created.
 * @member {Array.<String>} locations
 */
ProviderResourceType.prototype['locations'] = undefined;

/**
 * The properties.
 * @member {Object.<String, String>} properties
 */
ProviderResourceType.prototype['properties'] = undefined;

/**
 * The resource type.
 * @member {String} resourceType
 */
ProviderResourceType.prototype['resourceType'] = undefined;






export default ProviderResourceType;

