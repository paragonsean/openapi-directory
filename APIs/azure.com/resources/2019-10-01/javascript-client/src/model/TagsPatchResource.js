/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tags from './Tags';

/**
 * The TagsPatchResource model module.
 * @module model/TagsPatchResource
 * @version 2019-10-01
 */
class TagsPatchResource {
    /**
     * Constructs a new <code>TagsPatchResource</code>.
     * Wrapper resource for tags patch API request only.
     * @alias module:model/TagsPatchResource
     */
    constructor() { 
        
        TagsPatchResource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TagsPatchResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagsPatchResource} obj Optional instance to populate.
     * @return {module:model/TagsPatchResource} The populated <code>TagsPatchResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagsPatchResource();

            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = Tags.constructFromObject(data['properties']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagsPatchResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagsPatchResource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          Tags.validateJSON(data['properties']);
        }

        return true;
    }


}



/**
 * The operation type for the patch API.
 * @member {module:model/TagsPatchResource.OperationEnum} operation
 */
TagsPatchResource.prototype['operation'] = undefined;

/**
 * @member {module:model/Tags} properties
 */
TagsPatchResource.prototype['properties'] = undefined;





/**
 * Allowed values for the <code>operation</code> property.
 * @enum {String}
 * @readonly
 */
TagsPatchResource['OperationEnum'] = {

    /**
     * value: "Replace"
     * @const
     */
    "Replace": "Replace",

    /**
     * value: "Merge"
     * @const
     */
    "Merge": "Merge",

    /**
     * value: "Delete"
     * @const
     */
    "Delete": "Delete"
};



export default TagsPatchResource;

