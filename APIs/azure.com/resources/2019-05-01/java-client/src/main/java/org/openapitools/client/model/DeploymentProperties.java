/*
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DebugSetting;
import org.openapitools.client.model.OnErrorDeployment;
import org.openapitools.client.model.ParametersLink;
import org.openapitools.client.model.TemplateLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Deployment properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:56.845280-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeploymentProperties {
  public static final String SERIALIZED_NAME_DEBUG_SETTING = "debugSetting";
  @SerializedName(SERIALIZED_NAME_DEBUG_SETTING)
  private DebugSetting debugSetting;

  /**
   * The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    INCREMENTAL("Incremental"),
    
    COMPLETE("Complete");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_ON_ERROR_DEPLOYMENT = "onErrorDeployment";
  @SerializedName(SERIALIZED_NAME_ON_ERROR_DEPLOYMENT)
  private OnErrorDeployment onErrorDeployment;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Object parameters;

  public static final String SERIALIZED_NAME_PARAMETERS_LINK = "parametersLink";
  @SerializedName(SERIALIZED_NAME_PARAMETERS_LINK)
  private ParametersLink parametersLink;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private Object template;

  public static final String SERIALIZED_NAME_TEMPLATE_LINK = "templateLink";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_LINK)
  private TemplateLink templateLink;

  public DeploymentProperties() {
  }

  public DeploymentProperties debugSetting(DebugSetting debugSetting) {
    this.debugSetting = debugSetting;
    return this;
  }

  /**
   * Get debugSetting
   * @return debugSetting
   */
  @javax.annotation.Nullable
  public DebugSetting getDebugSetting() {
    return debugSetting;
  }

  public void setDebugSetting(DebugSetting debugSetting) {
    this.debugSetting = debugSetting;
  }


  public DeploymentProperties mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.
   * @return mode
   */
  @javax.annotation.Nonnull
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public DeploymentProperties onErrorDeployment(OnErrorDeployment onErrorDeployment) {
    this.onErrorDeployment = onErrorDeployment;
    return this;
  }

  /**
   * Get onErrorDeployment
   * @return onErrorDeployment
   */
  @javax.annotation.Nullable
  public OnErrorDeployment getOnErrorDeployment() {
    return onErrorDeployment;
  }

  public void setOnErrorDeployment(OnErrorDeployment onErrorDeployment) {
    this.onErrorDeployment = onErrorDeployment;
  }


  public DeploymentProperties parameters(Object parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Object getParameters() {
    return parameters;
  }

  public void setParameters(Object parameters) {
    this.parameters = parameters;
  }


  public DeploymentProperties parametersLink(ParametersLink parametersLink) {
    this.parametersLink = parametersLink;
    return this;
  }

  /**
   * Get parametersLink
   * @return parametersLink
   */
  @javax.annotation.Nullable
  public ParametersLink getParametersLink() {
    return parametersLink;
  }

  public void setParametersLink(ParametersLink parametersLink) {
    this.parametersLink = parametersLink;
  }


  public DeploymentProperties template(Object template) {
    this.template = template;
    return this;
  }

  /**
   * The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.
   * @return template
   */
  @javax.annotation.Nullable
  public Object getTemplate() {
    return template;
  }

  public void setTemplate(Object template) {
    this.template = template;
  }


  public DeploymentProperties templateLink(TemplateLink templateLink) {
    this.templateLink = templateLink;
    return this;
  }

  /**
   * Get templateLink
   * @return templateLink
   */
  @javax.annotation.Nullable
  public TemplateLink getTemplateLink() {
    return templateLink;
  }

  public void setTemplateLink(TemplateLink templateLink) {
    this.templateLink = templateLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentProperties deploymentProperties = (DeploymentProperties) o;
    return Objects.equals(this.debugSetting, deploymentProperties.debugSetting) &&
        Objects.equals(this.mode, deploymentProperties.mode) &&
        Objects.equals(this.onErrorDeployment, deploymentProperties.onErrorDeployment) &&
        Objects.equals(this.parameters, deploymentProperties.parameters) &&
        Objects.equals(this.parametersLink, deploymentProperties.parametersLink) &&
        Objects.equals(this.template, deploymentProperties.template) &&
        Objects.equals(this.templateLink, deploymentProperties.templateLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(debugSetting, mode, onErrorDeployment, parameters, parametersLink, template, templateLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentProperties {\n");
    sb.append("    debugSetting: ").append(toIndentedString(debugSetting)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    onErrorDeployment: ").append(toIndentedString(onErrorDeployment)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    parametersLink: ").append(toIndentedString(parametersLink)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    templateLink: ").append(toIndentedString(templateLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("debugSetting");
    openapiFields.add("mode");
    openapiFields.add("onErrorDeployment");
    openapiFields.add("parameters");
    openapiFields.add("parametersLink");
    openapiFields.add("template");
    openapiFields.add("templateLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeploymentProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeploymentProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeploymentProperties is not found in the empty JSON string", DeploymentProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeploymentProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeploymentProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeploymentProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `debugSetting`
      if (jsonObj.get("debugSetting") != null && !jsonObj.get("debugSetting").isJsonNull()) {
        DebugSetting.validateJsonElement(jsonObj.get("debugSetting"));
      }
      if (!jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the required field `mode`
      ModeEnum.validateJsonElement(jsonObj.get("mode"));
      // validate the optional field `onErrorDeployment`
      if (jsonObj.get("onErrorDeployment") != null && !jsonObj.get("onErrorDeployment").isJsonNull()) {
        OnErrorDeployment.validateJsonElement(jsonObj.get("onErrorDeployment"));
      }
      // validate the optional field `parametersLink`
      if (jsonObj.get("parametersLink") != null && !jsonObj.get("parametersLink").isJsonNull()) {
        ParametersLink.validateJsonElement(jsonObj.get("parametersLink"));
      }
      // validate the optional field `templateLink`
      if (jsonObj.get("templateLink") != null && !jsonObj.get("templateLink").isJsonNull()) {
        TemplateLink.validateJsonElement(jsonObj.get("templateLink"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeploymentProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeploymentProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeploymentProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeploymentProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DeploymentProperties>() {
           @Override
           public void write(JsonWriter out, DeploymentProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeploymentProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeploymentProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeploymentProperties
   * @throws IOException if the JSON string is invalid with respect to DeploymentProperties
   */
  public static DeploymentProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeploymentProperties.class);
  }

  /**
   * Convert an instance of DeploymentProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

