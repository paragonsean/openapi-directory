/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeploymentOperationsApi_H
#define OAI_OAIDeploymentOperationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeploymentOperation.h"
#include "OAIDeploymentOperationsListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeploymentOperationsApi : public QObject {
    Q_OBJECT

public:
    OAIDeploymentOperationsApi(const int timeOut = 0);
    ~OAIDeploymentOperationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void deploymentOperationsGet(const QString &resource_group_name, const QString &deployment_name, const QString &operation_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deploymentOperationsGetAtManagementGroupScope(const QString &group_id, const QString &deployment_name, const QString &operation_id, const QString &api_version);

    /**
    * @param[in]  deployment_name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void deploymentOperationsGetAtSubscriptionScope(const QString &deployment_name, const QString &operation_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void deploymentOperationsList(const QString &resource_group_name, const QString &deployment_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void deploymentOperationsListAtManagementGroupScope(const QString &group_id, const QString &deployment_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  deployment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void deploymentOperationsListAtSubscriptionScope(const QString &deployment_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deploymentOperationsGetCallback(OAIHttpRequestWorker *worker);
    void deploymentOperationsGetAtManagementGroupScopeCallback(OAIHttpRequestWorker *worker);
    void deploymentOperationsGetAtSubscriptionScopeCallback(OAIHttpRequestWorker *worker);
    void deploymentOperationsListCallback(OAIHttpRequestWorker *worker);
    void deploymentOperationsListAtManagementGroupScopeCallback(OAIHttpRequestWorker *worker);
    void deploymentOperationsListAtSubscriptionScopeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deploymentOperationsGetSignal(OAIDeploymentOperation summary);
    void deploymentOperationsGetAtManagementGroupScopeSignal(OAIDeploymentOperation summary);
    void deploymentOperationsGetAtSubscriptionScopeSignal(OAIDeploymentOperation summary);
    void deploymentOperationsListSignal(OAIDeploymentOperationsListResult summary);
    void deploymentOperationsListAtManagementGroupScopeSignal(OAIDeploymentOperationsListResult summary);
    void deploymentOperationsListAtSubscriptionScopeSignal(OAIDeploymentOperationsListResult summary);


    void deploymentOperationsGetSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentOperation summary);
    void deploymentOperationsGetAtManagementGroupScopeSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentOperation summary);
    void deploymentOperationsGetAtSubscriptionScopeSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentOperation summary);
    void deploymentOperationsListSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentOperationsListResult summary);
    void deploymentOperationsListAtManagementGroupScopeSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentOperationsListResult summary);
    void deploymentOperationsListAtSubscriptionScopeSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentOperationsListResult summary);

    Q_DECL_DEPRECATED_X("Use deploymentOperationsGetSignalError() instead")
    void deploymentOperationsGetSignalE(OAIDeploymentOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentOperationsGetSignalError(OAIDeploymentOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentOperationsGetAtManagementGroupScopeSignalError() instead")
    void deploymentOperationsGetAtManagementGroupScopeSignalE(OAIDeploymentOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentOperationsGetAtManagementGroupScopeSignalError(OAIDeploymentOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentOperationsGetAtSubscriptionScopeSignalError() instead")
    void deploymentOperationsGetAtSubscriptionScopeSignalE(OAIDeploymentOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentOperationsGetAtSubscriptionScopeSignalError(OAIDeploymentOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentOperationsListSignalError() instead")
    void deploymentOperationsListSignalE(OAIDeploymentOperationsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentOperationsListSignalError(OAIDeploymentOperationsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentOperationsListAtManagementGroupScopeSignalError() instead")
    void deploymentOperationsListAtManagementGroupScopeSignalE(OAIDeploymentOperationsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentOperationsListAtManagementGroupScopeSignalError(OAIDeploymentOperationsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentOperationsListAtSubscriptionScopeSignalError() instead")
    void deploymentOperationsListAtSubscriptionScopeSignalE(OAIDeploymentOperationsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentOperationsListAtSubscriptionScopeSignalError(OAIDeploymentOperationsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deploymentOperationsGetSignalErrorFull() instead")
    void deploymentOperationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentOperationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentOperationsGetAtManagementGroupScopeSignalErrorFull() instead")
    void deploymentOperationsGetAtManagementGroupScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentOperationsGetAtManagementGroupScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentOperationsGetAtSubscriptionScopeSignalErrorFull() instead")
    void deploymentOperationsGetAtSubscriptionScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentOperationsGetAtSubscriptionScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentOperationsListSignalErrorFull() instead")
    void deploymentOperationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentOperationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentOperationsListAtManagementGroupScopeSignalErrorFull() instead")
    void deploymentOperationsListAtManagementGroupScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentOperationsListAtManagementGroupScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentOperationsListAtSubscriptionScopeSignalErrorFull() instead")
    void deploymentOperationsListAtSubscriptionScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentOperationsListAtSubscriptionScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
