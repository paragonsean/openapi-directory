/**
 * ResourceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PolicyAssignment from '../model/PolicyAssignment';
import PolicyAssignmentListResult from '../model/PolicyAssignmentListResult';

/**
* PolicyAssignments service.
* @module api/PolicyAssignmentsApi
* @version 2015-11-01
*/
export default class PolicyAssignmentsApi {

    /**
    * Constructs a new PolicyAssignmentsApi. 
    * @alias module:api/PolicyAssignmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the policyAssignmentsCreate operation.
     * @callback module:api/PolicyAssignmentsApi~policyAssignmentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create policy assignment.
     * @param {String} scope Scope.
     * @param {String} policyAssignmentName Policy assignment name.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/PolicyAssignment} parameters Policy assignment.
     * @param {module:api/PolicyAssignmentsApi~policyAssignmentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyAssignment}
     */
    policyAssignmentsCreate(scope, policyAssignmentName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling policyAssignmentsCreate");
      }
      // verify the required parameter 'policyAssignmentName' is set
      if (policyAssignmentName === undefined || policyAssignmentName === null) {
        throw new Error("Missing the required parameter 'policyAssignmentName' when calling policyAssignmentsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyAssignmentsCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling policyAssignmentsCreate");
      }

      let pathParams = {
        'scope': scope,
        'policyAssignmentName': policyAssignmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PolicyAssignment;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyAssignmentsCreateById operation.
     * @callback module:api/PolicyAssignmentsApi~policyAssignmentsCreateByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create policy assignment by Id.
     * @param {String} policyAssignmentId Policy assignment Id
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/PolicyAssignment} parameters Policy assignment.
     * @param {module:api/PolicyAssignmentsApi~policyAssignmentsCreateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyAssignment}
     */
    policyAssignmentsCreateById(policyAssignmentId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'policyAssignmentId' is set
      if (policyAssignmentId === undefined || policyAssignmentId === null) {
        throw new Error("Missing the required parameter 'policyAssignmentId' when calling policyAssignmentsCreateById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyAssignmentsCreateById");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling policyAssignmentsCreateById");
      }

      let pathParams = {
        'policyAssignmentId': policyAssignmentId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PolicyAssignment;
      return this.apiClient.callApi(
        '/{policyAssignmentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyAssignmentsDelete operation.
     * @callback module:api/PolicyAssignmentsApi~policyAssignmentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete policy assignment.
     * @param {String} scope Scope.
     * @param {String} policyAssignmentName Policy assignment name.
     * @param {module:api/PolicyAssignmentsApi~policyAssignmentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyAssignment}
     */
    policyAssignmentsDelete(scope, policyAssignmentName, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling policyAssignmentsDelete");
      }
      // verify the required parameter 'policyAssignmentName' is set
      if (policyAssignmentName === undefined || policyAssignmentName === null) {
        throw new Error("Missing the required parameter 'policyAssignmentName' when calling policyAssignmentsDelete");
      }

      let pathParams = {
        'scope': scope,
        'policyAssignmentName': policyAssignmentName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyAssignment;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyAssignmentsDeleteById operation.
     * @callback module:api/PolicyAssignmentsApi~policyAssignmentsDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete policy assignment.
     * @param {String} policyAssignmentId Policy assignment Id
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/PolicyAssignmentsApi~policyAssignmentsDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyAssignment}
     */
    policyAssignmentsDeleteById(policyAssignmentId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'policyAssignmentId' is set
      if (policyAssignmentId === undefined || policyAssignmentId === null) {
        throw new Error("Missing the required parameter 'policyAssignmentId' when calling policyAssignmentsDeleteById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyAssignmentsDeleteById");
      }

      let pathParams = {
        'policyAssignmentId': policyAssignmentId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyAssignment;
      return this.apiClient.callApi(
        '/{policyAssignmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyAssignmentsGet operation.
     * @callback module:api/PolicyAssignmentsApi~policyAssignmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get single policy assignment.
     * @param {String} scope Scope.
     * @param {String} policyAssignmentName Policy assignment name.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/PolicyAssignmentsApi~policyAssignmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyAssignment}
     */
    policyAssignmentsGet(scope, policyAssignmentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling policyAssignmentsGet");
      }
      // verify the required parameter 'policyAssignmentName' is set
      if (policyAssignmentName === undefined || policyAssignmentName === null) {
        throw new Error("Missing the required parameter 'policyAssignmentName' when calling policyAssignmentsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyAssignmentsGet");
      }

      let pathParams = {
        'scope': scope,
        'policyAssignmentName': policyAssignmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyAssignment;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyAssignmentsGetById operation.
     * @callback module:api/PolicyAssignmentsApi~policyAssignmentsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get single policy assignment.
     * @param {String} policyAssignmentId Policy assignment Id
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/PolicyAssignmentsApi~policyAssignmentsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyAssignment}
     */
    policyAssignmentsGetById(policyAssignmentId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'policyAssignmentId' is set
      if (policyAssignmentId === undefined || policyAssignmentId === null) {
        throw new Error("Missing the required parameter 'policyAssignmentId' when calling policyAssignmentsGetById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyAssignmentsGetById");
      }

      let pathParams = {
        'policyAssignmentId': policyAssignmentId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyAssignment;
      return this.apiClient.callApi(
        '/{policyAssignmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyAssignmentsList operation.
     * @callback module:api/PolicyAssignmentsApi~policyAssignmentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyAssignmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets policy assignments of the subscription.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {module:api/PolicyAssignmentsApi~policyAssignmentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyAssignmentListResult}
     */
    policyAssignmentsList(apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyAssignmentsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyAssignmentsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyAssignmentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyAssignmentsListForResource operation.
     * @callback module:api/PolicyAssignmentsApi~policyAssignmentsListForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyAssignmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets policy assignments of the resource.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} resourceProviderNamespace The name of the resource provider.
     * @param {String} parentResourcePath The parent resource path.
     * @param {String} resourceType The resource type.
     * @param {String} resourceName The resource name.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {module:api/PolicyAssignmentsApi~policyAssignmentsListForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyAssignmentListResult}
     */
    policyAssignmentsListForResource(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling policyAssignmentsListForResource");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling policyAssignmentsListForResource");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling policyAssignmentsListForResource");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling policyAssignmentsListForResource");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling policyAssignmentsListForResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyAssignmentsListForResource");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyAssignmentsListForResource");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyAssignmentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}providers/Microsoft.Authorization/policyAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyAssignmentsListForResourceGroup operation.
     * @callback module:api/PolicyAssignmentsApi~policyAssignmentsListForResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyAssignmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets policy assignments of the resource group.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {module:api/PolicyAssignmentsApi~policyAssignmentsListForResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyAssignmentListResult}
     */
    policyAssignmentsListForResourceGroup(resourceGroupName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling policyAssignmentsListForResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyAssignmentsListForResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyAssignmentsListForResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyAssignmentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyAssignmentsListForScope operation.
     * @callback module:api/PolicyAssignmentsApi~policyAssignmentsListForScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyAssignmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets policy assignments of the scope.
     * @param {String} scope Scope.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {module:api/PolicyAssignmentsApi~policyAssignmentsListForScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyAssignmentListResult}
     */
    policyAssignmentsListForScope(scope, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling policyAssignmentsListForScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyAssignmentsListForScope");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyAssignmentListResult;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/policyAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
