/**
 * ResourceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentOperationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentOperationProperties::OAIDeploymentOperationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentOperationProperties::OAIDeploymentOperationProperties() {
    this->initializeModel();
}

OAIDeploymentOperationProperties::~OAIDeploymentOperationProperties() {}

void OAIDeploymentOperationProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_target_resource_isSet = false;
    m_target_resource_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIDeploymentOperationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentOperationProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_target_resource_isValid = ::OpenAPI::fromJsonValue(m_target_resource, json[QString("targetResource")]);
    m_target_resource_isSet = !json[QString("targetResource")].isNull() && m_target_resource_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIDeploymentOperationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentOperationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_target_resource.isSet()) {
        obj.insert(QString("targetResource"), ::OpenAPI::toJsonValue(m_target_resource));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIDeploymentOperationProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDeploymentOperationProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDeploymentOperationProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDeploymentOperationProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIDeploymentOperationProperties::getStatusCode() const {
    return m_status_code;
}
void OAIDeploymentOperationProperties::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIDeploymentOperationProperties::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIDeploymentOperationProperties::is_status_code_Valid() const{
    return m_status_code_isValid;
}

OAIObject OAIDeploymentOperationProperties::getStatusMessage() const {
    return m_status_message;
}
void OAIDeploymentOperationProperties::setStatusMessage(const OAIObject &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIDeploymentOperationProperties::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIDeploymentOperationProperties::is_status_message_Valid() const{
    return m_status_message_isValid;
}

OAITargetResource OAIDeploymentOperationProperties::getTargetResource() const {
    return m_target_resource;
}
void OAIDeploymentOperationProperties::setTargetResource(const OAITargetResource &target_resource) {
    m_target_resource = target_resource;
    m_target_resource_isSet = true;
}

bool OAIDeploymentOperationProperties::is_target_resource_Set() const{
    return m_target_resource_isSet;
}

bool OAIDeploymentOperationProperties::is_target_resource_Valid() const{
    return m_target_resource_isValid;
}

QDateTime OAIDeploymentOperationProperties::getTimestamp() const {
    return m_timestamp;
}
void OAIDeploymentOperationProperties::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIDeploymentOperationProperties::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDeploymentOperationProperties::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIDeploymentOperationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentOperationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
