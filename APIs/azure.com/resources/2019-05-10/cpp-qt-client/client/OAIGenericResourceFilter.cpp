/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-05-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenericResourceFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenericResourceFilter::OAIGenericResourceFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenericResourceFilter::OAIGenericResourceFilter() {
    this->initializeModel();
}

OAIGenericResourceFilter::~OAIGenericResourceFilter() {}

void OAIGenericResourceFilter::initializeModel() {

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_tagname_isSet = false;
    m_tagname_isValid = false;

    m_tagvalue_isSet = false;
    m_tagvalue_isValid = false;
}

void OAIGenericResourceFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenericResourceFilter::fromJsonObject(QJsonObject json) {

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_tagname_isValid = ::OpenAPI::fromJsonValue(m_tagname, json[QString("tagname")]);
    m_tagname_isSet = !json[QString("tagname")].isNull() && m_tagname_isValid;

    m_tagvalue_isValid = ::OpenAPI::fromJsonValue(m_tagvalue, json[QString("tagvalue")]);
    m_tagvalue_isSet = !json[QString("tagvalue")].isNull() && m_tagvalue_isValid;
}

QString OAIGenericResourceFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenericResourceFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_tagname_isSet) {
        obj.insert(QString("tagname"), ::OpenAPI::toJsonValue(m_tagname));
    }
    if (m_tagvalue_isSet) {
        obj.insert(QString("tagvalue"), ::OpenAPI::toJsonValue(m_tagvalue));
    }
    return obj;
}

QString OAIGenericResourceFilter::getResourceType() const {
    return m_resource_type;
}
void OAIGenericResourceFilter::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIGenericResourceFilter::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIGenericResourceFilter::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIGenericResourceFilter::getTagname() const {
    return m_tagname;
}
void OAIGenericResourceFilter::setTagname(const QString &tagname) {
    m_tagname = tagname;
    m_tagname_isSet = true;
}

bool OAIGenericResourceFilter::is_tagname_Set() const{
    return m_tagname_isSet;
}

bool OAIGenericResourceFilter::is_tagname_Valid() const{
    return m_tagname_isValid;
}

QString OAIGenericResourceFilter::getTagvalue() const {
    return m_tagvalue;
}
void OAIGenericResourceFilter::setTagvalue(const QString &tagvalue) {
    m_tagvalue = tagvalue;
    m_tagvalue_isSet = true;
}

bool OAIGenericResourceFilter::is_tagvalue_Set() const{
    return m_tagvalue_isSet;
}

bool OAIGenericResourceFilter::is_tagvalue_Valid() const{
    return m_tagvalue_isValid;
}

bool OAIGenericResourceFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagvalue_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenericResourceFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
