/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeploymentOperation from '../model/DeploymentOperation';
import DeploymentOperationsListResult from '../model/DeploymentOperationsListResult';

/**
* DeploymentOperations service.
* @module api/DeploymentOperationsApi
* @version 2019-03-01
*/
export default class DeploymentOperationsApi {

    /**
    * Constructs a new DeploymentOperationsApi. 
    * @alias module:api/DeploymentOperationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deploymentOperationsGet operation.
     * @callback module:api/DeploymentOperationsApi~deploymentOperationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentOperation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a deployments operation.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} operationId The ID of the operation to get.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DeploymentOperationsApi~deploymentOperationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentOperation}
     */
    deploymentOperationsGet(resourceGroupName, deploymentName, operationId, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentOperationsGet");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentOperationsGet");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling deploymentOperationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentOperationsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentOperationsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'deploymentName': deploymentName,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentOperation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentOperationsGetAtSubscriptionScope operation.
     * @callback module:api/DeploymentOperationsApi~deploymentOperationsGetAtSubscriptionScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentOperation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a deployments operation.
     * @param {String} deploymentName The name of the deployment.
     * @param {String} operationId The ID of the operation to get.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DeploymentOperationsApi~deploymentOperationsGetAtSubscriptionScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentOperation}
     */
    deploymentOperationsGetAtSubscriptionScope(deploymentName, operationId, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentOperationsGetAtSubscriptionScope");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling deploymentOperationsGetAtSubscriptionScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentOperationsGetAtSubscriptionScope");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentOperationsGetAtSubscriptionScope");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentOperation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentOperationsList operation.
     * @callback module:api/DeploymentOperationsApi~deploymentOperationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentOperationsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all deployments operations for a deployment.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} deploymentName The name of the deployment with the operation to get.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of results to return.
     * @param {module:api/DeploymentOperationsApi~deploymentOperationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentOperationsListResult}
     */
    deploymentOperationsList(resourceGroupName, deploymentName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentOperationsList");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentOperationsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentOperationsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentOperationsList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentOperationsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentOperationsListAtSubscriptionScope operation.
     * @callback module:api/DeploymentOperationsApi~deploymentOperationsListAtSubscriptionScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentOperationsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all deployments operations for a deployment.
     * @param {String} deploymentName The name of the deployment with the operation to get.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of results to return.
     * @param {module:api/DeploymentOperationsApi~deploymentOperationsListAtSubscriptionScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentOperationsListResult}
     */
    deploymentOperationsListAtSubscriptionScope(deploymentName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentOperationsListAtSubscriptionScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentOperationsListAtSubscriptionScope");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentOperationsListAtSubscriptionScope");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentOperationsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
