/*
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DebugSetting;
import org.openapitools.client.model.Dependency;
import org.openapitools.client.model.OnErrorDeploymentExtended;
import org.openapitools.client.model.ParametersLink;
import org.openapitools.client.model.Provider;
import org.openapitools.client.model.TemplateLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Deployment properties with additional details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:50.765597-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeploymentPropertiesExtended {
  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlationId";
  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  private String correlationId;

  public static final String SERIALIZED_NAME_DEBUG_SETTING = "debugSetting";
  @SerializedName(SERIALIZED_NAME_DEBUG_SETTING)
  private DebugSetting debugSetting;

  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  private List<Dependency> dependencies = new ArrayList<>();

  /**
   * The deployment mode. Possible values are Incremental and Complete.
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    INCREMENTAL("Incremental"),
    
    COMPLETE("Complete");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_ON_ERROR_DEPLOYMENT = "onErrorDeployment";
  @SerializedName(SERIALIZED_NAME_ON_ERROR_DEPLOYMENT)
  private OnErrorDeploymentExtended onErrorDeployment;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private Object outputs;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Object parameters;

  public static final String SERIALIZED_NAME_PARAMETERS_LINK = "parametersLink";
  @SerializedName(SERIALIZED_NAME_PARAMETERS_LINK)
  private ParametersLink parametersLink;

  public static final String SERIALIZED_NAME_PROVIDERS = "providers";
  @SerializedName(SERIALIZED_NAME_PROVIDERS)
  private List<Provider> providers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private Object template;

  public static final String SERIALIZED_NAME_TEMPLATE_LINK = "templateLink";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_LINK)
  private TemplateLink templateLink;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public DeploymentPropertiesExtended() {
  }

  public DeploymentPropertiesExtended(
     String correlationId, 
     String provisioningState, 
     OffsetDateTime timestamp
  ) {
    this();
    this.correlationId = correlationId;
    this.provisioningState = provisioningState;
    this.timestamp = timestamp;
  }

  /**
   * The correlation ID of the deployment.
   * @return correlationId
   */
  @javax.annotation.Nullable
  public String getCorrelationId() {
    return correlationId;
  }



  public DeploymentPropertiesExtended debugSetting(DebugSetting debugSetting) {
    this.debugSetting = debugSetting;
    return this;
  }

  /**
   * Get debugSetting
   * @return debugSetting
   */
  @javax.annotation.Nullable
  public DebugSetting getDebugSetting() {
    return debugSetting;
  }

  public void setDebugSetting(DebugSetting debugSetting) {
    this.debugSetting = debugSetting;
  }


  public DeploymentPropertiesExtended dependencies(List<Dependency> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public DeploymentPropertiesExtended addDependenciesItem(Dependency dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }

  /**
   * The list of deployment dependencies.
   * @return dependencies
   */
  @javax.annotation.Nullable
  public List<Dependency> getDependencies() {
    return dependencies;
  }

  public void setDependencies(List<Dependency> dependencies) {
    this.dependencies = dependencies;
  }


  public DeploymentPropertiesExtended mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * The deployment mode. Possible values are Incremental and Complete.
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public DeploymentPropertiesExtended onErrorDeployment(OnErrorDeploymentExtended onErrorDeployment) {
    this.onErrorDeployment = onErrorDeployment;
    return this;
  }

  /**
   * Get onErrorDeployment
   * @return onErrorDeployment
   */
  @javax.annotation.Nullable
  public OnErrorDeploymentExtended getOnErrorDeployment() {
    return onErrorDeployment;
  }

  public void setOnErrorDeployment(OnErrorDeploymentExtended onErrorDeployment) {
    this.onErrorDeployment = onErrorDeployment;
  }


  public DeploymentPropertiesExtended outputs(Object outputs) {
    this.outputs = outputs;
    return this;
  }

  /**
   * Key/value pairs that represent deployment output.
   * @return outputs
   */
  @javax.annotation.Nullable
  public Object getOutputs() {
    return outputs;
  }

  public void setOutputs(Object outputs) {
    this.outputs = outputs;
  }


  public DeploymentPropertiesExtended parameters(Object parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Deployment parameters. Use only one of Parameters or ParametersLink.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Object getParameters() {
    return parameters;
  }

  public void setParameters(Object parameters) {
    this.parameters = parameters;
  }


  public DeploymentPropertiesExtended parametersLink(ParametersLink parametersLink) {
    this.parametersLink = parametersLink;
    return this;
  }

  /**
   * Get parametersLink
   * @return parametersLink
   */
  @javax.annotation.Nullable
  public ParametersLink getParametersLink() {
    return parametersLink;
  }

  public void setParametersLink(ParametersLink parametersLink) {
    this.parametersLink = parametersLink;
  }


  public DeploymentPropertiesExtended providers(List<Provider> providers) {
    this.providers = providers;
    return this;
  }

  public DeploymentPropertiesExtended addProvidersItem(Provider providersItem) {
    if (this.providers == null) {
      this.providers = new ArrayList<>();
    }
    this.providers.add(providersItem);
    return this;
  }

  /**
   * The list of resource providers needed for the deployment.
   * @return providers
   */
  @javax.annotation.Nullable
  public List<Provider> getProviders() {
    return providers;
  }

  public void setProviders(List<Provider> providers) {
    this.providers = providers;
  }


  /**
   * The state of the provisioning.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public DeploymentPropertiesExtended template(Object template) {
    this.template = template;
    return this;
  }

  /**
   * The template content. Use only one of Template or TemplateLink.
   * @return template
   */
  @javax.annotation.Nullable
  public Object getTemplate() {
    return template;
  }

  public void setTemplate(Object template) {
    this.template = template;
  }


  public DeploymentPropertiesExtended templateLink(TemplateLink templateLink) {
    this.templateLink = templateLink;
    return this;
  }

  /**
   * Get templateLink
   * @return templateLink
   */
  @javax.annotation.Nullable
  public TemplateLink getTemplateLink() {
    return templateLink;
  }

  public void setTemplateLink(TemplateLink templateLink) {
    this.templateLink = templateLink;
  }


  /**
   * The timestamp of the template deployment.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentPropertiesExtended deploymentPropertiesExtended = (DeploymentPropertiesExtended) o;
    return Objects.equals(this.correlationId, deploymentPropertiesExtended.correlationId) &&
        Objects.equals(this.debugSetting, deploymentPropertiesExtended.debugSetting) &&
        Objects.equals(this.dependencies, deploymentPropertiesExtended.dependencies) &&
        Objects.equals(this.mode, deploymentPropertiesExtended.mode) &&
        Objects.equals(this.onErrorDeployment, deploymentPropertiesExtended.onErrorDeployment) &&
        Objects.equals(this.outputs, deploymentPropertiesExtended.outputs) &&
        Objects.equals(this.parameters, deploymentPropertiesExtended.parameters) &&
        Objects.equals(this.parametersLink, deploymentPropertiesExtended.parametersLink) &&
        Objects.equals(this.providers, deploymentPropertiesExtended.providers) &&
        Objects.equals(this.provisioningState, deploymentPropertiesExtended.provisioningState) &&
        Objects.equals(this.template, deploymentPropertiesExtended.template) &&
        Objects.equals(this.templateLink, deploymentPropertiesExtended.templateLink) &&
        Objects.equals(this.timestamp, deploymentPropertiesExtended.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correlationId, debugSetting, dependencies, mode, onErrorDeployment, outputs, parameters, parametersLink, providers, provisioningState, template, templateLink, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentPropertiesExtended {\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    debugSetting: ").append(toIndentedString(debugSetting)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    onErrorDeployment: ").append(toIndentedString(onErrorDeployment)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    parametersLink: ").append(toIndentedString(parametersLink)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    templateLink: ").append(toIndentedString(templateLink)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("correlationId");
    openapiFields.add("debugSetting");
    openapiFields.add("dependencies");
    openapiFields.add("mode");
    openapiFields.add("onErrorDeployment");
    openapiFields.add("outputs");
    openapiFields.add("parameters");
    openapiFields.add("parametersLink");
    openapiFields.add("providers");
    openapiFields.add("provisioningState");
    openapiFields.add("template");
    openapiFields.add("templateLink");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeploymentPropertiesExtended
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeploymentPropertiesExtended.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeploymentPropertiesExtended is not found in the empty JSON string", DeploymentPropertiesExtended.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeploymentPropertiesExtended.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeploymentPropertiesExtended` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("correlationId") != null && !jsonObj.get("correlationId").isJsonNull()) && !jsonObj.get("correlationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationId").toString()));
      }
      // validate the optional field `debugSetting`
      if (jsonObj.get("debugSetting") != null && !jsonObj.get("debugSetting").isJsonNull()) {
        DebugSetting.validateJsonElement(jsonObj.get("debugSetting"));
      }
      if (jsonObj.get("dependencies") != null && !jsonObj.get("dependencies").isJsonNull()) {
        JsonArray jsonArraydependencies = jsonObj.getAsJsonArray("dependencies");
        if (jsonArraydependencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be an array in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
          }

          // validate the optional field `dependencies` (array)
          for (int i = 0; i < jsonArraydependencies.size(); i++) {
            Dependency.validateJsonElement(jsonArraydependencies.get(i));
          };
        }
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      // validate the optional field `onErrorDeployment`
      if (jsonObj.get("onErrorDeployment") != null && !jsonObj.get("onErrorDeployment").isJsonNull()) {
        OnErrorDeploymentExtended.validateJsonElement(jsonObj.get("onErrorDeployment"));
      }
      // validate the optional field `parametersLink`
      if (jsonObj.get("parametersLink") != null && !jsonObj.get("parametersLink").isJsonNull()) {
        ParametersLink.validateJsonElement(jsonObj.get("parametersLink"));
      }
      if (jsonObj.get("providers") != null && !jsonObj.get("providers").isJsonNull()) {
        JsonArray jsonArrayproviders = jsonObj.getAsJsonArray("providers");
        if (jsonArrayproviders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("providers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `providers` to be an array in the JSON string but got `%s`", jsonObj.get("providers").toString()));
          }

          // validate the optional field `providers` (array)
          for (int i = 0; i < jsonArrayproviders.size(); i++) {
            Provider.validateJsonElement(jsonArrayproviders.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `templateLink`
      if (jsonObj.get("templateLink") != null && !jsonObj.get("templateLink").isJsonNull()) {
        TemplateLink.validateJsonElement(jsonObj.get("templateLink"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeploymentPropertiesExtended.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeploymentPropertiesExtended' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeploymentPropertiesExtended> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeploymentPropertiesExtended.class));

       return (TypeAdapter<T>) new TypeAdapter<DeploymentPropertiesExtended>() {
           @Override
           public void write(JsonWriter out, DeploymentPropertiesExtended value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeploymentPropertiesExtended read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeploymentPropertiesExtended given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeploymentPropertiesExtended
   * @throws IOException if the JSON string is invalid with respect to DeploymentPropertiesExtended
   */
  public static DeploymentPropertiesExtended fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeploymentPropertiesExtended.class);
  }

  /**
   * Convert an instance of DeploymentPropertiesExtended to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

