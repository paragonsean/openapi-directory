# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.debug_setting import DebugSetting
from openapi_server.models.on_error_deployment import OnErrorDeployment
from openapi_server.models.parameters_link import ParametersLink
from openapi_server.models.template_link import TemplateLink
from openapi_server import util


class DeploymentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, debug_setting: DebugSetting=None, mode: str=None, on_error_deployment: OnErrorDeployment=None, parameters: object=None, parameters_link: ParametersLink=None, template: object=None, template_link: TemplateLink=None):
        """DeploymentProperties - a model defined in OpenAPI

        :param debug_setting: The debug_setting of this DeploymentProperties.
        :param mode: The mode of this DeploymentProperties.
        :param on_error_deployment: The on_error_deployment of this DeploymentProperties.
        :param parameters: The parameters of this DeploymentProperties.
        :param parameters_link: The parameters_link of this DeploymentProperties.
        :param template: The template of this DeploymentProperties.
        :param template_link: The template_link of this DeploymentProperties.
        """
        self.openapi_types = {
            'debug_setting': DebugSetting,
            'mode': str,
            'on_error_deployment': OnErrorDeployment,
            'parameters': object,
            'parameters_link': ParametersLink,
            'template': object,
            'template_link': TemplateLink
        }

        self.attribute_map = {
            'debug_setting': 'debugSetting',
            'mode': 'mode',
            'on_error_deployment': 'onErrorDeployment',
            'parameters': 'parameters',
            'parameters_link': 'parametersLink',
            'template': 'template',
            'template_link': 'templateLink'
        }

        self._debug_setting = debug_setting
        self._mode = mode
        self._on_error_deployment = on_error_deployment
        self._parameters = parameters
        self._parameters_link = parameters_link
        self._template = template
        self._template_link = template_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentProperties of this DeploymentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def debug_setting(self):
        """Gets the debug_setting of this DeploymentProperties.


        :return: The debug_setting of this DeploymentProperties.
        :rtype: DebugSetting
        """
        return self._debug_setting

    @debug_setting.setter
    def debug_setting(self, debug_setting):
        """Sets the debug_setting of this DeploymentProperties.


        :param debug_setting: The debug_setting of this DeploymentProperties.
        :type debug_setting: DebugSetting
        """

        self._debug_setting = debug_setting

    @property
    def mode(self):
        """Gets the mode of this DeploymentProperties.

        The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.

        :return: The mode of this DeploymentProperties.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this DeploymentProperties.

        The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.

        :param mode: The mode of this DeploymentProperties.
        :type mode: str
        """
        allowed_values = ["Incremental", "Complete"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def on_error_deployment(self):
        """Gets the on_error_deployment of this DeploymentProperties.


        :return: The on_error_deployment of this DeploymentProperties.
        :rtype: OnErrorDeployment
        """
        return self._on_error_deployment

    @on_error_deployment.setter
    def on_error_deployment(self, on_error_deployment):
        """Sets the on_error_deployment of this DeploymentProperties.


        :param on_error_deployment: The on_error_deployment of this DeploymentProperties.
        :type on_error_deployment: OnErrorDeployment
        """

        self._on_error_deployment = on_error_deployment

    @property
    def parameters(self):
        """Gets the parameters of this DeploymentProperties.

        Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.

        :return: The parameters of this DeploymentProperties.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DeploymentProperties.

        Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.

        :param parameters: The parameters of this DeploymentProperties.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def parameters_link(self):
        """Gets the parameters_link of this DeploymentProperties.


        :return: The parameters_link of this DeploymentProperties.
        :rtype: ParametersLink
        """
        return self._parameters_link

    @parameters_link.setter
    def parameters_link(self, parameters_link):
        """Sets the parameters_link of this DeploymentProperties.


        :param parameters_link: The parameters_link of this DeploymentProperties.
        :type parameters_link: ParametersLink
        """

        self._parameters_link = parameters_link

    @property
    def template(self):
        """Gets the template of this DeploymentProperties.

        The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.

        :return: The template of this DeploymentProperties.
        :rtype: object
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this DeploymentProperties.

        The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.

        :param template: The template of this DeploymentProperties.
        :type template: object
        """

        self._template = template

    @property
    def template_link(self):
        """Gets the template_link of this DeploymentProperties.


        :return: The template_link of this DeploymentProperties.
        :rtype: TemplateLink
        """
        return self._template_link

    @template_link.setter
    def template_link(self, template_link):
        """Sets the template_link of this DeploymentProperties.


        :param template_link: The template_link of this DeploymentProperties.
        :type template_link: TemplateLink
        """

        self._template_link = template_link
