/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2018-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Provider from '../model/Provider';
import ProviderListResult from '../model/ProviderListResult';

/**
* Providers service.
* @module api/ProvidersApi
* @version 2018-05-01
*/
export default class ProvidersApi {

    /**
    * Constructs a new ProvidersApi. 
    * @alias module:api/ProvidersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the providersGet operation.
     * @callback module:api/ProvidersApi~providersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified resource provider.
     * @param {String} resourceProviderNamespace The namespace of the resource provider.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases.
     * @param {module:api/ProvidersApi~providersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    providersGet(resourceProviderNamespace, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling providersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling providersGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling providersGet");
      }

      let pathParams = {
        'resourceProviderNamespace': resourceProviderNamespace,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$expand': opts['expand'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the providersList operation.
     * @callback module:api/ProvidersApi~providersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all resource providers for a subscription.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of results to return. If null is passed returns all deployments.
     * @param {String} [expand] The properties to include in the results. For example, use &$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases.
     * @param {module:api/ProvidersApi~providersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderListResult}
     */
    providersList(apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling providersList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling providersList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$top': opts['top'],
        '$expand': opts['expand'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProviderListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the providersRegister operation.
     * @callback module:api/ProvidersApi~providersRegisterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a subscription with a resource provider.
     * @param {String} resourceProviderNamespace The namespace of the resource provider to register.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ProvidersApi~providersRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    providersRegister(resourceProviderNamespace, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling providersRegister");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling providersRegister");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling providersRegister");
      }

      let pathParams = {
        'resourceProviderNamespace': resourceProviderNamespace,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the providersUnregister operation.
     * @callback module:api/ProvidersApi~providersUnregisterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregisters a subscription from a resource provider.
     * @param {String} resourceProviderNamespace The namespace of the resource provider to unregister.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ProvidersApi~providersUnregisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    providersUnregister(resourceProviderNamespace, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling providersUnregister");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling providersUnregister");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling providersUnregister");
      }

      let pathParams = {
        'resourceProviderNamespace': resourceProviderNamespace,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
