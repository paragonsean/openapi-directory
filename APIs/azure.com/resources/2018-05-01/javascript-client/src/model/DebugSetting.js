/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2018-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DebugSetting model module.
 * @module model/DebugSetting
 * @version 2018-05-01
 */
class DebugSetting {
    /**
     * Constructs a new <code>DebugSetting</code>.
     * @alias module:model/DebugSetting
     */
    constructor() { 
        
        DebugSetting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DebugSetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DebugSetting} obj Optional instance to populate.
     * @return {module:model/DebugSetting} The populated <code>DebugSetting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DebugSetting();

            if (data.hasOwnProperty('detailLevel')) {
                obj['detailLevel'] = ApiClient.convertToType(data['detailLevel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DebugSetting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DebugSetting</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['detailLevel'] && !(typeof data['detailLevel'] === 'string' || data['detailLevel'] instanceof String)) {
            throw new Error("Expected the field `detailLevel` to be a primitive type in the JSON string but got " + data['detailLevel']);
        }

        return true;
    }


}



/**
 * Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations.
 * @member {String} detailLevel
 */
DebugSetting.prototype['detailLevel'] = undefined;






export default DebugSetting;

