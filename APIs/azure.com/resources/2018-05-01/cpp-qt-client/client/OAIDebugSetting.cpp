/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2018-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDebugSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDebugSetting::OAIDebugSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDebugSetting::OAIDebugSetting() {
    this->initializeModel();
}

OAIDebugSetting::~OAIDebugSetting() {}

void OAIDebugSetting::initializeModel() {

    m_detail_level_isSet = false;
    m_detail_level_isValid = false;
}

void OAIDebugSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDebugSetting::fromJsonObject(QJsonObject json) {

    m_detail_level_isValid = ::OpenAPI::fromJsonValue(m_detail_level, json[QString("detailLevel")]);
    m_detail_level_isSet = !json[QString("detailLevel")].isNull() && m_detail_level_isValid;
}

QString OAIDebugSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDebugSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_level_isSet) {
        obj.insert(QString("detailLevel"), ::OpenAPI::toJsonValue(m_detail_level));
    }
    return obj;
}

QString OAIDebugSetting::getDetailLevel() const {
    return m_detail_level;
}
void OAIDebugSetting::setDetailLevel(const QString &detail_level) {
    m_detail_level = detail_level;
    m_detail_level_isSet = true;
}

bool OAIDebugSetting::is_detail_level_Set() const{
    return m_detail_level_isSet;
}

bool OAIDebugSetting::is_detail_level_Valid() const{
    return m_detail_level_isValid;
}

bool OAIDebugSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDebugSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
