/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2018-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResourceGroupsApi_H
#define OAI_OAIResourceGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExportTemplateRequest.h"
#include "OAIResourceGroup.h"
#include "OAIResourceGroupExportResult.h"
#include "OAIResourceGroupListResult.h"
#include "OAIResourceGroupPatchable.h"
#include "OAIResourceListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResourceGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIResourceGroupsApi(const int timeOut = 0);
    ~OAIResourceGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void resourceGroupsCheckExistence(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIResourceGroup [required]
    */
    virtual void resourceGroupsCreateOrUpdate(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const OAIResourceGroup &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void resourceGroupsDelete(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIExportTemplateRequest [required]
    */
    virtual void resourceGroupsExportTemplate(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const OAIExportTemplateRequest &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void resourceGroupsGet(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void resourceGroupsList(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIResourceGroupPatchable [required]
    */
    virtual void resourceGroupsUpdate(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const OAIResourceGroupPatchable &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void resourcesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void resourceGroupsCheckExistenceCallback(OAIHttpRequestWorker *worker);
    void resourceGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void resourceGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void resourceGroupsExportTemplateCallback(OAIHttpRequestWorker *worker);
    void resourceGroupsGetCallback(OAIHttpRequestWorker *worker);
    void resourceGroupsListCallback(OAIHttpRequestWorker *worker);
    void resourceGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void resourcesListByResourceGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void resourceGroupsCheckExistenceSignal();
    void resourceGroupsCreateOrUpdateSignal(OAIResourceGroup summary);
    void resourceGroupsDeleteSignal();
    void resourceGroupsExportTemplateSignal(OAIResourceGroupExportResult summary);
    void resourceGroupsGetSignal(OAIResourceGroup summary);
    void resourceGroupsListSignal(OAIResourceGroupListResult summary);
    void resourceGroupsUpdateSignal(OAIResourceGroup summary);
    void resourcesListByResourceGroupSignal(OAIResourceListResult summary);


    void resourceGroupsCheckExistenceSignalFull(OAIHttpRequestWorker *worker);
    void resourceGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIResourceGroup summary);
    void resourceGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void resourceGroupsExportTemplateSignalFull(OAIHttpRequestWorker *worker, OAIResourceGroupExportResult summary);
    void resourceGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIResourceGroup summary);
    void resourceGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIResourceGroupListResult summary);
    void resourceGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIResourceGroup summary);
    void resourcesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIResourceListResult summary);

    Q_DECL_DEPRECATED_X("Use resourceGroupsCheckExistenceSignalError() instead")
    void resourceGroupsCheckExistenceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsCheckExistenceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceGroupsCreateOrUpdateSignalError() instead")
    void resourceGroupsCreateOrUpdateSignalE(OAIResourceGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsCreateOrUpdateSignalError(OAIResourceGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceGroupsDeleteSignalError() instead")
    void resourceGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceGroupsExportTemplateSignalError() instead")
    void resourceGroupsExportTemplateSignalE(OAIResourceGroupExportResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsExportTemplateSignalError(OAIResourceGroupExportResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceGroupsGetSignalError() instead")
    void resourceGroupsGetSignalE(OAIResourceGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsGetSignalError(OAIResourceGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceGroupsListSignalError() instead")
    void resourceGroupsListSignalE(OAIResourceGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsListSignalError(OAIResourceGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceGroupsUpdateSignalError() instead")
    void resourceGroupsUpdateSignalE(OAIResourceGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsUpdateSignalError(OAIResourceGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesListByResourceGroupSignalError() instead")
    void resourcesListByResourceGroupSignalE(OAIResourceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesListByResourceGroupSignalError(OAIResourceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use resourceGroupsCheckExistenceSignalErrorFull() instead")
    void resourceGroupsCheckExistenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsCheckExistenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceGroupsCreateOrUpdateSignalErrorFull() instead")
    void resourceGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceGroupsDeleteSignalErrorFull() instead")
    void resourceGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceGroupsExportTemplateSignalErrorFull() instead")
    void resourceGroupsExportTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsExportTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceGroupsGetSignalErrorFull() instead")
    void resourceGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceGroupsListSignalErrorFull() instead")
    void resourceGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceGroupsUpdateSignalErrorFull() instead")
    void resourceGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesListByResourceGroupSignalErrorFull() instead")
    void resourcesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
