# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plans_list_metrics200_response_value_inner_metric_values_inner import PlansListMetrics200ResponseValueInnerMetricValuesInner
from openapi_server import util


class PlansListMetrics200ResponseValueInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, metric_unit: str=None, metric_values: List[PlansListMetrics200ResponseValueInnerMetricValuesInner]=None, start_time: datetime=None, time_grain: str=None):
        """PlansListMetrics200ResponseValueInner - a model defined in OpenAPI

        :param end_time: The end_time of this PlansListMetrics200ResponseValueInner.
        :param metric_unit: The metric_unit of this PlansListMetrics200ResponseValueInner.
        :param metric_values: The metric_values of this PlansListMetrics200ResponseValueInner.
        :param start_time: The start_time of this PlansListMetrics200ResponseValueInner.
        :param time_grain: The time_grain of this PlansListMetrics200ResponseValueInner.
        """
        self.openapi_types = {
            'end_time': datetime,
            'metric_unit': str,
            'metric_values': List[PlansListMetrics200ResponseValueInnerMetricValuesInner],
            'start_time': datetime,
            'time_grain': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'metric_unit': 'metricUnit',
            'metric_values': 'metricValues',
            'start_time': 'startTime',
            'time_grain': 'timeGrain'
        }

        self._end_time = end_time
        self._metric_unit = metric_unit
        self._metric_values = metric_values
        self._start_time = start_time
        self._time_grain = time_grain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlansListMetrics200ResponseValueInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Plans_ListMetrics_200_response_value_inner of this PlansListMetrics200ResponseValueInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this PlansListMetrics200ResponseValueInner.

        End time of the metric.

        :return: The end_time of this PlansListMetrics200ResponseValueInner.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this PlansListMetrics200ResponseValueInner.

        End time of the metric.

        :param end_time: The end_time of this PlansListMetrics200ResponseValueInner.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def metric_unit(self):
        """Gets the metric_unit of this PlansListMetrics200ResponseValueInner.

        The resource metric unit.

        :return: The metric_unit of this PlansListMetrics200ResponseValueInner.
        :rtype: str
        """
        return self._metric_unit

    @metric_unit.setter
    def metric_unit(self, metric_unit):
        """Sets the metric_unit of this PlansListMetrics200ResponseValueInner.

        The resource metric unit.

        :param metric_unit: The metric_unit of this PlansListMetrics200ResponseValueInner.
        :type metric_unit: str
        """
        allowed_values = ["Count", "Bytes", "Seconds", "CountPerSecond", "BytesPerSecond"]  # noqa: E501
        if metric_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `metric_unit` ({0}), must be one of {1}"
                .format(metric_unit, allowed_values)
            )

        self._metric_unit = metric_unit

    @property
    def metric_values(self):
        """Gets the metric_values of this PlansListMetrics200ResponseValueInner.

        List of metric values.

        :return: The metric_values of this PlansListMetrics200ResponseValueInner.
        :rtype: List[PlansListMetrics200ResponseValueInnerMetricValuesInner]
        """
        return self._metric_values

    @metric_values.setter
    def metric_values(self, metric_values):
        """Sets the metric_values of this PlansListMetrics200ResponseValueInner.

        List of metric values.

        :param metric_values: The metric_values of this PlansListMetrics200ResponseValueInner.
        :type metric_values: List[PlansListMetrics200ResponseValueInnerMetricValuesInner]
        """

        self._metric_values = metric_values

    @property
    def start_time(self):
        """Gets the start_time of this PlansListMetrics200ResponseValueInner.

        Start time of the metric.

        :return: The start_time of this PlansListMetrics200ResponseValueInner.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PlansListMetrics200ResponseValueInner.

        Start time of the metric.

        :param start_time: The start_time of this PlansListMetrics200ResponseValueInner.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def time_grain(self):
        """Gets the time_grain of this PlansListMetrics200ResponseValueInner.

        Timespan of the metric.

        :return: The time_grain of this PlansListMetrics200ResponseValueInner.
        :rtype: str
        """
        return self._time_grain

    @time_grain.setter
    def time_grain(self, time_grain):
        """Sets the time_grain of this PlansListMetrics200ResponseValueInner.

        Timespan of the metric.

        :param time_grain: The time_grain of this PlansListMetrics200ResponseValueInner.
        :type time_grain: str
        """

        self._time_grain = time_grain
