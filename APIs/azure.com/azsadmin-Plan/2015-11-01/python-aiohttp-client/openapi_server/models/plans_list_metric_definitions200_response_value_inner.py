# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plans_list_metric_definitions200_response_value_inner_metric_availabilities_inner import PlansListMetricDefinitions200ResponseValueInnerMetricAvailabilitiesInner
from openapi_server import util


class PlansListMetricDefinitions200ResponseValueInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_availabilities: List[PlansListMetricDefinitions200ResponseValueInnerMetricAvailabilitiesInner]=None, name: str=None, primary_aggregation_type: str=None, unit: str=None):
        """PlansListMetricDefinitions200ResponseValueInner - a model defined in OpenAPI

        :param metric_availabilities: The metric_availabilities of this PlansListMetricDefinitions200ResponseValueInner.
        :param name: The name of this PlansListMetricDefinitions200ResponseValueInner.
        :param primary_aggregation_type: The primary_aggregation_type of this PlansListMetricDefinitions200ResponseValueInner.
        :param unit: The unit of this PlansListMetricDefinitions200ResponseValueInner.
        """
        self.openapi_types = {
            'metric_availabilities': List[PlansListMetricDefinitions200ResponseValueInnerMetricAvailabilitiesInner],
            'name': str,
            'primary_aggregation_type': str,
            'unit': str
        }

        self.attribute_map = {
            'metric_availabilities': 'metricAvailabilities',
            'name': 'name',
            'primary_aggregation_type': 'primaryAggregationType',
            'unit': 'unit'
        }

        self._metric_availabilities = metric_availabilities
        self._name = name
        self._primary_aggregation_type = primary_aggregation_type
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlansListMetricDefinitions200ResponseValueInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Plans_ListMetricDefinitions_200_response_value_inner of this PlansListMetricDefinitions200ResponseValueInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_availabilities(self):
        """Gets the metric_availabilities of this PlansListMetricDefinitions200ResponseValueInner.

        List of metric definitions.

        :return: The metric_availabilities of this PlansListMetricDefinitions200ResponseValueInner.
        :rtype: List[PlansListMetricDefinitions200ResponseValueInnerMetricAvailabilitiesInner]
        """
        return self._metric_availabilities

    @metric_availabilities.setter
    def metric_availabilities(self, metric_availabilities):
        """Sets the metric_availabilities of this PlansListMetricDefinitions200ResponseValueInner.

        List of metric definitions.

        :param metric_availabilities: The metric_availabilities of this PlansListMetricDefinitions200ResponseValueInner.
        :type metric_availabilities: List[PlansListMetricDefinitions200ResponseValueInnerMetricAvailabilitiesInner]
        """

        self._metric_availabilities = metric_availabilities

    @property
    def name(self):
        """Gets the name of this PlansListMetricDefinitions200ResponseValueInner.

        Metric definition name.

        :return: The name of this PlansListMetricDefinitions200ResponseValueInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlansListMetricDefinitions200ResponseValueInner.

        Metric definition name.

        :param name: The name of this PlansListMetricDefinitions200ResponseValueInner.
        :type name: str
        """

        self._name = name

    @property
    def primary_aggregation_type(self):
        """Gets the primary_aggregation_type of this PlansListMetricDefinitions200ResponseValueInner.

        The primary aggregation type for resource metric.

        :return: The primary_aggregation_type of this PlansListMetricDefinitions200ResponseValueInner.
        :rtype: str
        """
        return self._primary_aggregation_type

    @primary_aggregation_type.setter
    def primary_aggregation_type(self, primary_aggregation_type):
        """Sets the primary_aggregation_type of this PlansListMetricDefinitions200ResponseValueInner.

        The primary aggregation type for resource metric.

        :param primary_aggregation_type: The primary_aggregation_type of this PlansListMetricDefinitions200ResponseValueInner.
        :type primary_aggregation_type: str
        """
        allowed_values = ["None", "Average", "Total", "Minimum", "Maximum", "Last"]  # noqa: E501
        if primary_aggregation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `primary_aggregation_type` ({0}), must be one of {1}"
                .format(primary_aggregation_type, allowed_values)
            )

        self._primary_aggregation_type = primary_aggregation_type

    @property
    def unit(self):
        """Gets the unit of this PlansListMetricDefinitions200ResponseValueInner.

        The resource metric unit.

        :return: The unit of this PlansListMetricDefinitions200ResponseValueInner.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this PlansListMetricDefinitions200ResponseValueInner.

        The resource metric unit.

        :param unit: The unit of this PlansListMetricDefinitions200ResponseValueInner.
        :type unit: str
        """
        allowed_values = ["Count", "Bytes", "Seconds", "CountPerSecond", "BytesPerSecond"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit
