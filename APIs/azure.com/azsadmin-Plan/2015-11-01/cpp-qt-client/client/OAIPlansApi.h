/**
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPlansApi_H
#define OAI_OAIPlansApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPlan.h"
#include "OAIPlanList.h"
#include "OAIPlans_ListMetricDefinitions_200_response.h"
#include "OAIPlans_ListMetrics_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPlansApi : public QObject {
    Q_OBJECT

public:
    OAIPlansApi(const int timeOut = 0);
    ~OAIPlansApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  plan QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  new_plan OAIPlan [required]
    */
    virtual void plansCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &plan, const QString &api_version, const OAIPlan &new_plan);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  plan QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void plansDelete(const QString &subscription_id, const QString &resource_group_name, const QString &plan, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  plan QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void plansGet(const QString &subscription_id, const QString &resource_group_name, const QString &plan, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void plansList(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void plansListAll(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  plan QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void plansListMetricDefinitions(const QString &subscription_id, const QString &resource_group_name, const QString &plan, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  plan QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void plansListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &plan, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void plansCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void plansDeleteCallback(OAIHttpRequestWorker *worker);
    void plansGetCallback(OAIHttpRequestWorker *worker);
    void plansListCallback(OAIHttpRequestWorker *worker);
    void plansListAllCallback(OAIHttpRequestWorker *worker);
    void plansListMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void plansListMetricsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void plansCreateOrUpdateSignal(OAIPlan summary);
    void plansDeleteSignal();
    void plansGetSignal(OAIPlan summary);
    void plansListSignal(OAIPlanList summary);
    void plansListAllSignal(OAIPlanList summary);
    void plansListMetricDefinitionsSignal(OAIPlans_ListMetricDefinitions_200_response summary);
    void plansListMetricsSignal(OAIPlans_ListMetrics_200_response summary);


    void plansCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPlan summary);
    void plansDeleteSignalFull(OAIHttpRequestWorker *worker);
    void plansGetSignalFull(OAIHttpRequestWorker *worker, OAIPlan summary);
    void plansListSignalFull(OAIHttpRequestWorker *worker, OAIPlanList summary);
    void plansListAllSignalFull(OAIHttpRequestWorker *worker, OAIPlanList summary);
    void plansListMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIPlans_ListMetricDefinitions_200_response summary);
    void plansListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPlans_ListMetrics_200_response summary);

    Q_DECL_DEPRECATED_X("Use plansCreateOrUpdateSignalError() instead")
    void plansCreateOrUpdateSignalE(OAIPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void plansCreateOrUpdateSignalError(OAIPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansDeleteSignalError() instead")
    void plansDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void plansDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansGetSignalError() instead")
    void plansGetSignalE(OAIPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void plansGetSignalError(OAIPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansListSignalError() instead")
    void plansListSignalE(OAIPlanList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void plansListSignalError(OAIPlanList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansListAllSignalError() instead")
    void plansListAllSignalE(OAIPlanList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void plansListAllSignalError(OAIPlanList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansListMetricDefinitionsSignalError() instead")
    void plansListMetricDefinitionsSignalE(OAIPlans_ListMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void plansListMetricDefinitionsSignalError(OAIPlans_ListMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansListMetricsSignalError() instead")
    void plansListMetricsSignalE(OAIPlans_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void plansListMetricsSignalError(OAIPlans_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use plansCreateOrUpdateSignalErrorFull() instead")
    void plansCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void plansCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansDeleteSignalErrorFull() instead")
    void plansDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void plansDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansGetSignalErrorFull() instead")
    void plansGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void plansGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansListSignalErrorFull() instead")
    void plansListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void plansListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansListAllSignalErrorFull() instead")
    void plansListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void plansListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansListMetricDefinitionsSignalErrorFull() instead")
    void plansListMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void plansListMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansListMetricsSignalErrorFull() instead")
    void plansListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void plansListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
