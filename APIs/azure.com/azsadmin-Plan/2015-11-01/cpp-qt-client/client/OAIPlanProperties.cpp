/**
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlanProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlanProperties::OAIPlanProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlanProperties::OAIPlanProperties() {
    this->initializeModel();
}

OAIPlanProperties::~OAIPlanProperties() {}

void OAIPlanProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_external_reference_id_isSet = false;
    m_external_reference_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_quota_ids_isSet = false;
    m_quota_ids_isValid = false;

    m_sku_ids_isSet = false;
    m_sku_ids_isValid = false;

    m_subscription_count_isSet = false;
    m_subscription_count_isValid = false;
}

void OAIPlanProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlanProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_external_reference_id_isValid = ::OpenAPI::fromJsonValue(m_external_reference_id, json[QString("externalReferenceId")]);
    m_external_reference_id_isSet = !json[QString("externalReferenceId")].isNull() && m_external_reference_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_quota_ids_isValid = ::OpenAPI::fromJsonValue(m_quota_ids, json[QString("quotaIds")]);
    m_quota_ids_isSet = !json[QString("quotaIds")].isNull() && m_quota_ids_isValid;

    m_sku_ids_isValid = ::OpenAPI::fromJsonValue(m_sku_ids, json[QString("skuIds")]);
    m_sku_ids_isSet = !json[QString("skuIds")].isNull() && m_sku_ids_isValid;

    m_subscription_count_isValid = ::OpenAPI::fromJsonValue(m_subscription_count, json[QString("subscriptionCount")]);
    m_subscription_count_isSet = !json[QString("subscriptionCount")].isNull() && m_subscription_count_isValid;
}

QString OAIPlanProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlanProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_external_reference_id_isSet) {
        obj.insert(QString("externalReferenceId"), ::OpenAPI::toJsonValue(m_external_reference_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_quota_ids.size() > 0) {
        obj.insert(QString("quotaIds"), ::OpenAPI::toJsonValue(m_quota_ids));
    }
    if (m_sku_ids.size() > 0) {
        obj.insert(QString("skuIds"), ::OpenAPI::toJsonValue(m_sku_ids));
    }
    if (m_subscription_count_isSet) {
        obj.insert(QString("subscriptionCount"), ::OpenAPI::toJsonValue(m_subscription_count));
    }
    return obj;
}

QString OAIPlanProperties::getDescription() const {
    return m_description;
}
void OAIPlanProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPlanProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPlanProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPlanProperties::getDisplayName() const {
    return m_display_name;
}
void OAIPlanProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPlanProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPlanProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIPlanProperties::getExternalReferenceId() const {
    return m_external_reference_id;
}
void OAIPlanProperties::setExternalReferenceId(const QString &external_reference_id) {
    m_external_reference_id = external_reference_id;
    m_external_reference_id_isSet = true;
}

bool OAIPlanProperties::is_external_reference_id_Set() const{
    return m_external_reference_id_isSet;
}

bool OAIPlanProperties::is_external_reference_id_Valid() const{
    return m_external_reference_id_isValid;
}

QString OAIPlanProperties::getName() const {
    return m_name;
}
void OAIPlanProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlanProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlanProperties::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIPlanProperties::getQuotaIds() const {
    return m_quota_ids;
}
void OAIPlanProperties::setQuotaIds(const QList<QString> &quota_ids) {
    m_quota_ids = quota_ids;
    m_quota_ids_isSet = true;
}

bool OAIPlanProperties::is_quota_ids_Set() const{
    return m_quota_ids_isSet;
}

bool OAIPlanProperties::is_quota_ids_Valid() const{
    return m_quota_ids_isValid;
}

QList<QString> OAIPlanProperties::getSkuIds() const {
    return m_sku_ids;
}
void OAIPlanProperties::setSkuIds(const QList<QString> &sku_ids) {
    m_sku_ids = sku_ids;
    m_sku_ids_isSet = true;
}

bool OAIPlanProperties::is_sku_ids_Set() const{
    return m_sku_ids_isSet;
}

bool OAIPlanProperties::is_sku_ids_Valid() const{
    return m_sku_ids_isValid;
}

qint32 OAIPlanProperties::getSubscriptionCount() const {
    return m_subscription_count;
}
void OAIPlanProperties::setSubscriptionCount(const qint32 &subscription_count) {
    m_subscription_count = subscription_count;
    m_subscription_count_isSet = true;
}

bool OAIPlanProperties::is_subscription_count_Set() const{
    return m_subscription_count_isSet;
}

bool OAIPlanProperties::is_subscription_count_Valid() const{
    return m_subscription_count_isValid;
}

bool OAIPlanProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlanProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
