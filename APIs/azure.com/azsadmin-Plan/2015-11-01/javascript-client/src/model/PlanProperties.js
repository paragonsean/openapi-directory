/**
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlanProperties model module.
 * @module model/PlanProperties
 * @version 2015-11-01
 */
class PlanProperties {
    /**
     * Constructs a new <code>PlanProperties</code>.
     * Properties of a plan.
     * @alias module:model/PlanProperties
     */
    constructor() { 
        
        PlanProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlanProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlanProperties} obj Optional instance to populate.
     * @return {module:model/PlanProperties} The populated <code>PlanProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlanProperties();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('externalReferenceId')) {
                obj['externalReferenceId'] = ApiClient.convertToType(data['externalReferenceId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('quotaIds')) {
                obj['quotaIds'] = ApiClient.convertToType(data['quotaIds'], ['String']);
            }
            if (data.hasOwnProperty('skuIds')) {
                obj['skuIds'] = ApiClient.convertToType(data['skuIds'], ['String']);
            }
            if (data.hasOwnProperty('subscriptionCount')) {
                obj['subscriptionCount'] = ApiClient.convertToType(data['subscriptionCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlanProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlanProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['externalReferenceId'] && !(typeof data['externalReferenceId'] === 'string' || data['externalReferenceId'] instanceof String)) {
            throw new Error("Expected the field `externalReferenceId` to be a primitive type in the JSON string but got " + data['externalReferenceId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['quotaIds'])) {
            throw new Error("Expected the field `quotaIds` to be an array in the JSON data but got " + data['quotaIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['skuIds'])) {
            throw new Error("Expected the field `skuIds` to be an array in the JSON data but got " + data['skuIds']);
        }

        return true;
    }


}



/**
 * Description of the plan.
 * @member {String} description
 */
PlanProperties.prototype['description'] = undefined;

/**
 * Display name.
 * @member {String} displayName
 */
PlanProperties.prototype['displayName'] = undefined;

/**
 * External reference identifier.
 * @member {String} externalReferenceId
 */
PlanProperties.prototype['externalReferenceId'] = undefined;

/**
 * Name of the plan.
 * @member {String} name
 */
PlanProperties.prototype['name'] = undefined;

/**
 * Quota identifiers under the plan.
 * @member {Array.<String>} quotaIds
 */
PlanProperties.prototype['quotaIds'] = undefined;

/**
 * SKU identifiers.
 * @member {Array.<String>} skuIds
 */
PlanProperties.prototype['skuIds'] = undefined;

/**
 * Subscription count.
 * @member {Number} subscriptionCount
 */
PlanProperties.prototype['subscriptionCount'] = undefined;






export default PlanProperties;

