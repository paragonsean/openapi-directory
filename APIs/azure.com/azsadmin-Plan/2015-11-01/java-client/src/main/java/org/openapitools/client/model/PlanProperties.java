/*
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a plan.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:52:12.159644-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlanProperties {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXTERNAL_REFERENCE_ID = "externalReferenceId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REFERENCE_ID)
  private String externalReferenceId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUOTA_IDS = "quotaIds";
  @SerializedName(SERIALIZED_NAME_QUOTA_IDS)
  private List<String> quotaIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKU_IDS = "skuIds";
  @SerializedName(SERIALIZED_NAME_SKU_IDS)
  private List<String> skuIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBSCRIPTION_COUNT = "subscriptionCount";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_COUNT)
  private Integer subscriptionCount;

  public PlanProperties() {
  }

  public PlanProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the plan.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PlanProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public PlanProperties externalReferenceId(String externalReferenceId) {
    this.externalReferenceId = externalReferenceId;
    return this;
  }

  /**
   * External reference identifier.
   * @return externalReferenceId
   */
  @javax.annotation.Nullable
  public String getExternalReferenceId() {
    return externalReferenceId;
  }

  public void setExternalReferenceId(String externalReferenceId) {
    this.externalReferenceId = externalReferenceId;
  }


  public PlanProperties name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the plan.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlanProperties quotaIds(List<String> quotaIds) {
    this.quotaIds = quotaIds;
    return this;
  }

  public PlanProperties addQuotaIdsItem(String quotaIdsItem) {
    if (this.quotaIds == null) {
      this.quotaIds = new ArrayList<>();
    }
    this.quotaIds.add(quotaIdsItem);
    return this;
  }

  /**
   * Quota identifiers under the plan.
   * @return quotaIds
   */
  @javax.annotation.Nullable
  public List<String> getQuotaIds() {
    return quotaIds;
  }

  public void setQuotaIds(List<String> quotaIds) {
    this.quotaIds = quotaIds;
  }


  public PlanProperties skuIds(List<String> skuIds) {
    this.skuIds = skuIds;
    return this;
  }

  public PlanProperties addSkuIdsItem(String skuIdsItem) {
    if (this.skuIds == null) {
      this.skuIds = new ArrayList<>();
    }
    this.skuIds.add(skuIdsItem);
    return this;
  }

  /**
   * SKU identifiers.
   * @return skuIds
   */
  @javax.annotation.Nullable
  public List<String> getSkuIds() {
    return skuIds;
  }

  public void setSkuIds(List<String> skuIds) {
    this.skuIds = skuIds;
  }


  public PlanProperties subscriptionCount(Integer subscriptionCount) {
    this.subscriptionCount = subscriptionCount;
    return this;
  }

  /**
   * Subscription count.
   * @return subscriptionCount
   */
  @javax.annotation.Nullable
  public Integer getSubscriptionCount() {
    return subscriptionCount;
  }

  public void setSubscriptionCount(Integer subscriptionCount) {
    this.subscriptionCount = subscriptionCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlanProperties planProperties = (PlanProperties) o;
    return Objects.equals(this.description, planProperties.description) &&
        Objects.equals(this.displayName, planProperties.displayName) &&
        Objects.equals(this.externalReferenceId, planProperties.externalReferenceId) &&
        Objects.equals(this.name, planProperties.name) &&
        Objects.equals(this.quotaIds, planProperties.quotaIds) &&
        Objects.equals(this.skuIds, planProperties.skuIds) &&
        Objects.equals(this.subscriptionCount, planProperties.subscriptionCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, externalReferenceId, name, quotaIds, skuIds, subscriptionCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlanProperties {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    externalReferenceId: ").append(toIndentedString(externalReferenceId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    quotaIds: ").append(toIndentedString(quotaIds)).append("\n");
    sb.append("    skuIds: ").append(toIndentedString(skuIds)).append("\n");
    sb.append("    subscriptionCount: ").append(toIndentedString(subscriptionCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("externalReferenceId");
    openapiFields.add("name");
    openapiFields.add("quotaIds");
    openapiFields.add("skuIds");
    openapiFields.add("subscriptionCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlanProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlanProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlanProperties is not found in the empty JSON string", PlanProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlanProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlanProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("externalReferenceId") != null && !jsonObj.get("externalReferenceId").isJsonNull()) && !jsonObj.get("externalReferenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalReferenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalReferenceId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("quotaIds") != null && !jsonObj.get("quotaIds").isJsonNull() && !jsonObj.get("quotaIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `quotaIds` to be an array in the JSON string but got `%s`", jsonObj.get("quotaIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("skuIds") != null && !jsonObj.get("skuIds").isJsonNull() && !jsonObj.get("skuIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuIds` to be an array in the JSON string but got `%s`", jsonObj.get("skuIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlanProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlanProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlanProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlanProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<PlanProperties>() {
           @Override
           public void write(JsonWriter out, PlanProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlanProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlanProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlanProperties
   * @throws IOException if the JSON string is invalid with respect to PlanProperties
   */
  public static PlanProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlanProperties.class);
  }

  /**
   * Convert an instance of PlanProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

