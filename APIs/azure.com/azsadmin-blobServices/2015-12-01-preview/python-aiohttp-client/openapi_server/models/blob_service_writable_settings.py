# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BlobServiceWritableSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blob_svc_container_gc_interval: int=None, blob_svc_shallow_gc_interval: int=None, blob_svc_stream_map_min_container_occupancy_percent: int=None, front_end_http_listen_port: int=None, front_end_https_listen_port: int=None, front_end_callback_threads_count: int=None, front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds: int=None, front_end_cpu_based_keep_alive_throttling_enabled: bool=None, front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold: float=None, front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle: float=None, front_end_max_milliseconds_between_memory_samples: int=None, front_end_memory_throttle_threshold_settings: str=None, front_end_memory_throttling_enabled: bool=None, front_end_min_thread_pool_threads: int=None, front_end_thread_pool_based_keep_alive_io_completion_threshold: int=None, front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds: int=None, front_end_thread_pool_based_keep_alive_percentage: float=None, front_end_thread_pool_based_keep_alive_worker_thread_threshold: int=None, front_end_use_sla_time_in_availability: bool=None):
        """BlobServiceWritableSettings - a model defined in OpenAPI

        :param blob_svc_container_gc_interval: The blob_svc_container_gc_interval of this BlobServiceWritableSettings.
        :param blob_svc_shallow_gc_interval: The blob_svc_shallow_gc_interval of this BlobServiceWritableSettings.
        :param blob_svc_stream_map_min_container_occupancy_percent: The blob_svc_stream_map_min_container_occupancy_percent of this BlobServiceWritableSettings.
        :param front_end_http_listen_port: The front_end_http_listen_port of this BlobServiceWritableSettings.
        :param front_end_https_listen_port: The front_end_https_listen_port of this BlobServiceWritableSettings.
        :param front_end_callback_threads_count: The front_end_callback_threads_count of this BlobServiceWritableSettings.
        :param front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds: The front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds of this BlobServiceWritableSettings.
        :param front_end_cpu_based_keep_alive_throttling_enabled: The front_end_cpu_based_keep_alive_throttling_enabled of this BlobServiceWritableSettings.
        :param front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold: The front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold of this BlobServiceWritableSettings.
        :param front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle: The front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle of this BlobServiceWritableSettings.
        :param front_end_max_milliseconds_between_memory_samples: The front_end_max_milliseconds_between_memory_samples of this BlobServiceWritableSettings.
        :param front_end_memory_throttle_threshold_settings: The front_end_memory_throttle_threshold_settings of this BlobServiceWritableSettings.
        :param front_end_memory_throttling_enabled: The front_end_memory_throttling_enabled of this BlobServiceWritableSettings.
        :param front_end_min_thread_pool_threads: The front_end_min_thread_pool_threads of this BlobServiceWritableSettings.
        :param front_end_thread_pool_based_keep_alive_io_completion_threshold: The front_end_thread_pool_based_keep_alive_io_completion_threshold of this BlobServiceWritableSettings.
        :param front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds: The front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds of this BlobServiceWritableSettings.
        :param front_end_thread_pool_based_keep_alive_percentage: The front_end_thread_pool_based_keep_alive_percentage of this BlobServiceWritableSettings.
        :param front_end_thread_pool_based_keep_alive_worker_thread_threshold: The front_end_thread_pool_based_keep_alive_worker_thread_threshold of this BlobServiceWritableSettings.
        :param front_end_use_sla_time_in_availability: The front_end_use_sla_time_in_availability of this BlobServiceWritableSettings.
        """
        self.openapi_types = {
            'blob_svc_container_gc_interval': int,
            'blob_svc_shallow_gc_interval': int,
            'blob_svc_stream_map_min_container_occupancy_percent': int,
            'front_end_http_listen_port': int,
            'front_end_https_listen_port': int,
            'front_end_callback_threads_count': int,
            'front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds': int,
            'front_end_cpu_based_keep_alive_throttling_enabled': bool,
            'front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold': float,
            'front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle': float,
            'front_end_max_milliseconds_between_memory_samples': int,
            'front_end_memory_throttle_threshold_settings': str,
            'front_end_memory_throttling_enabled': bool,
            'front_end_min_thread_pool_threads': int,
            'front_end_thread_pool_based_keep_alive_io_completion_threshold': int,
            'front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds': int,
            'front_end_thread_pool_based_keep_alive_percentage': float,
            'front_end_thread_pool_based_keep_alive_worker_thread_threshold': int,
            'front_end_use_sla_time_in_availability': bool
        }

        self.attribute_map = {
            'blob_svc_container_gc_interval': 'blobSvcContainerGcInterval',
            'blob_svc_shallow_gc_interval': 'blobSvcShallowGcInterval',
            'blob_svc_stream_map_min_container_occupancy_percent': 'blobSvcStreamMapMinContainerOccupancyPercent',
            'front_end_http_listen_port': 'frontEndHttpListenPort',
            'front_end_https_listen_port': 'frontEndHttpsListenPort',
            'front_end_callback_threads_count': 'frontEndCallbackThreadsCount',
            'front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds': 'frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds',
            'front_end_cpu_based_keep_alive_throttling_enabled': 'frontEndCpuBasedKeepAliveThrottlingEnabled',
            'front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold': 'frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold',
            'front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle': 'frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle',
            'front_end_max_milliseconds_between_memory_samples': 'frontEndMaxMillisecondsBetweenMemorySamples',
            'front_end_memory_throttle_threshold_settings': 'frontEndMemoryThrottleThresholdSettings',
            'front_end_memory_throttling_enabled': 'frontEndMemoryThrottlingEnabled',
            'front_end_min_thread_pool_threads': 'frontEndMinThreadPoolThreads',
            'front_end_thread_pool_based_keep_alive_io_completion_threshold': 'frontEndThreadPoolBasedKeepAliveIOCompletionThreshold',
            'front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds': 'frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds',
            'front_end_thread_pool_based_keep_alive_percentage': 'frontEndThreadPoolBasedKeepAlivePercentage',
            'front_end_thread_pool_based_keep_alive_worker_thread_threshold': 'frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold',
            'front_end_use_sla_time_in_availability': 'frontEndUseSlaTimeInAvailability'
        }

        self._blob_svc_container_gc_interval = blob_svc_container_gc_interval
        self._blob_svc_shallow_gc_interval = blob_svc_shallow_gc_interval
        self._blob_svc_stream_map_min_container_occupancy_percent = blob_svc_stream_map_min_container_occupancy_percent
        self._front_end_http_listen_port = front_end_http_listen_port
        self._front_end_https_listen_port = front_end_https_listen_port
        self._front_end_callback_threads_count = front_end_callback_threads_count
        self._front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds = front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds
        self._front_end_cpu_based_keep_alive_throttling_enabled = front_end_cpu_based_keep_alive_throttling_enabled
        self._front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold = front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold
        self._front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle = front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle
        self._front_end_max_milliseconds_between_memory_samples = front_end_max_milliseconds_between_memory_samples
        self._front_end_memory_throttle_threshold_settings = front_end_memory_throttle_threshold_settings
        self._front_end_memory_throttling_enabled = front_end_memory_throttling_enabled
        self._front_end_min_thread_pool_threads = front_end_min_thread_pool_threads
        self._front_end_thread_pool_based_keep_alive_io_completion_threshold = front_end_thread_pool_based_keep_alive_io_completion_threshold
        self._front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds = front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds
        self._front_end_thread_pool_based_keep_alive_percentage = front_end_thread_pool_based_keep_alive_percentage
        self._front_end_thread_pool_based_keep_alive_worker_thread_threshold = front_end_thread_pool_based_keep_alive_worker_thread_threshold
        self._front_end_use_sla_time_in_availability = front_end_use_sla_time_in_availability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlobServiceWritableSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlobServiceWritableSettings of this BlobServiceWritableSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blob_svc_container_gc_interval(self):
        """Gets the blob_svc_container_gc_interval of this BlobServiceWritableSettings.

        The interval, in seconds, of container garbage collection.

        :return: The blob_svc_container_gc_interval of this BlobServiceWritableSettings.
        :rtype: int
        """
        return self._blob_svc_container_gc_interval

    @blob_svc_container_gc_interval.setter
    def blob_svc_container_gc_interval(self, blob_svc_container_gc_interval):
        """Sets the blob_svc_container_gc_interval of this BlobServiceWritableSettings.

        The interval, in seconds, of container garbage collection.

        :param blob_svc_container_gc_interval: The blob_svc_container_gc_interval of this BlobServiceWritableSettings.
        :type blob_svc_container_gc_interval: int
        """

        self._blob_svc_container_gc_interval = blob_svc_container_gc_interval

    @property
    def blob_svc_shallow_gc_interval(self):
        """Gets the blob_svc_shallow_gc_interval of this BlobServiceWritableSettings.

        The interval ,in seconds, of shallow garbage collection.

        :return: The blob_svc_shallow_gc_interval of this BlobServiceWritableSettings.
        :rtype: int
        """
        return self._blob_svc_shallow_gc_interval

    @blob_svc_shallow_gc_interval.setter
    def blob_svc_shallow_gc_interval(self, blob_svc_shallow_gc_interval):
        """Sets the blob_svc_shallow_gc_interval of this BlobServiceWritableSettings.

        The interval ,in seconds, of shallow garbage collection.

        :param blob_svc_shallow_gc_interval: The blob_svc_shallow_gc_interval of this BlobServiceWritableSettings.
        :type blob_svc_shallow_gc_interval: int
        """

        self._blob_svc_shallow_gc_interval = blob_svc_shallow_gc_interval

    @property
    def blob_svc_stream_map_min_container_occupancy_percent(self):
        """Gets the blob_svc_stream_map_min_container_occupancy_percent of this BlobServiceWritableSettings.

        The minimal container occupancy percent for stream mapping.

        :return: The blob_svc_stream_map_min_container_occupancy_percent of this BlobServiceWritableSettings.
        :rtype: int
        """
        return self._blob_svc_stream_map_min_container_occupancy_percent

    @blob_svc_stream_map_min_container_occupancy_percent.setter
    def blob_svc_stream_map_min_container_occupancy_percent(self, blob_svc_stream_map_min_container_occupancy_percent):
        """Sets the blob_svc_stream_map_min_container_occupancy_percent of this BlobServiceWritableSettings.

        The minimal container occupancy percent for stream mapping.

        :param blob_svc_stream_map_min_container_occupancy_percent: The blob_svc_stream_map_min_container_occupancy_percent of this BlobServiceWritableSettings.
        :type blob_svc_stream_map_min_container_occupancy_percent: int
        """

        self._blob_svc_stream_map_min_container_occupancy_percent = blob_svc_stream_map_min_container_occupancy_percent

    @property
    def front_end_http_listen_port(self):
        """Gets the front_end_http_listen_port of this BlobServiceWritableSettings.

        The HTTP port of the storage service front end.

        :return: The front_end_http_listen_port of this BlobServiceWritableSettings.
        :rtype: int
        """
        return self._front_end_http_listen_port

    @front_end_http_listen_port.setter
    def front_end_http_listen_port(self, front_end_http_listen_port):
        """Sets the front_end_http_listen_port of this BlobServiceWritableSettings.

        The HTTP port of the storage service front end.

        :param front_end_http_listen_port: The front_end_http_listen_port of this BlobServiceWritableSettings.
        :type front_end_http_listen_port: int
        """

        self._front_end_http_listen_port = front_end_http_listen_port

    @property
    def front_end_https_listen_port(self):
        """Gets the front_end_https_listen_port of this BlobServiceWritableSettings.

        The HTTPs port of the storage service front end.

        :return: The front_end_https_listen_port of this BlobServiceWritableSettings.
        :rtype: int
        """
        return self._front_end_https_listen_port

    @front_end_https_listen_port.setter
    def front_end_https_listen_port(self, front_end_https_listen_port):
        """Sets the front_end_https_listen_port of this BlobServiceWritableSettings.

        The HTTPs port of the storage service front end.

        :param front_end_https_listen_port: The front_end_https_listen_port of this BlobServiceWritableSettings.
        :type front_end_https_listen_port: int
        """

        self._front_end_https_listen_port = front_end_https_listen_port

    @property
    def front_end_callback_threads_count(self):
        """Gets the front_end_callback_threads_count of this BlobServiceWritableSettings.

        Front end callback threads count.

        :return: The front_end_callback_threads_count of this BlobServiceWritableSettings.
        :rtype: int
        """
        return self._front_end_callback_threads_count

    @front_end_callback_threads_count.setter
    def front_end_callback_threads_count(self, front_end_callback_threads_count):
        """Sets the front_end_callback_threads_count of this BlobServiceWritableSettings.

        Front end callback threads count.

        :param front_end_callback_threads_count: The front_end_callback_threads_count of this BlobServiceWritableSettings.
        :type front_end_callback_threads_count: int
        """

        self._front_end_callback_threads_count = front_end_callback_threads_count

    @property
    def front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds(self):
        """Gets the front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds of this BlobServiceWritableSettings.

        Interval (in second) of CPU monitor for front end CPU based keep-alive throttling.

        :return: The front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds of this BlobServiceWritableSettings.
        :rtype: int
        """
        return self._front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds

    @front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds.setter
    def front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds(self, front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds):
        """Sets the front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds of this BlobServiceWritableSettings.

        Interval (in second) of CPU monitor for front end CPU based keep-alive throttling.

        :param front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds: The front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds of this BlobServiceWritableSettings.
        :type front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds: int
        """

        self._front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds = front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds

    @property
    def front_end_cpu_based_keep_alive_throttling_enabled(self):
        """Gets the front_end_cpu_based_keep_alive_throttling_enabled of this BlobServiceWritableSettings.

        Switch of front end CPU based keep-alive throttling.

        :return: The front_end_cpu_based_keep_alive_throttling_enabled of this BlobServiceWritableSettings.
        :rtype: bool
        """
        return self._front_end_cpu_based_keep_alive_throttling_enabled

    @front_end_cpu_based_keep_alive_throttling_enabled.setter
    def front_end_cpu_based_keep_alive_throttling_enabled(self, front_end_cpu_based_keep_alive_throttling_enabled):
        """Sets the front_end_cpu_based_keep_alive_throttling_enabled of this BlobServiceWritableSettings.

        Switch of front end CPU based keep-alive throttling.

        :param front_end_cpu_based_keep_alive_throttling_enabled: The front_end_cpu_based_keep_alive_throttling_enabled of this BlobServiceWritableSettings.
        :type front_end_cpu_based_keep_alive_throttling_enabled: bool
        """

        self._front_end_cpu_based_keep_alive_throttling_enabled = front_end_cpu_based_keep_alive_throttling_enabled

    @property
    def front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold(self):
        """Gets the front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold of this BlobServiceWritableSettings.

        Threshold (% percentage) of front end CPU based keep-alive throttling.

        :return: The front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold of this BlobServiceWritableSettings.
        :rtype: float
        """
        return self._front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold

    @front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold.setter
    def front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold(self, front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold):
        """Sets the front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold of this BlobServiceWritableSettings.

        Threshold (% percentage) of front end CPU based keep-alive throttling.

        :param front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold: The front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold of this BlobServiceWritableSettings.
        :type front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold: float
        """

        self._front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold = front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold

    @property
    def front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle(self):
        """Gets the front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle of this BlobServiceWritableSettings.

        Threshold (% percentage) of requests to throttle in front end CPU based keep-alive throttling.

        :return: The front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle of this BlobServiceWritableSettings.
        :rtype: float
        """
        return self._front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle

    @front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle.setter
    def front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle(self, front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle):
        """Sets the front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle of this BlobServiceWritableSettings.

        Threshold (% percentage) of requests to throttle in front end CPU based keep-alive throttling.

        :param front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle: The front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle of this BlobServiceWritableSettings.
        :type front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle: float
        """

        self._front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle = front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle

    @property
    def front_end_max_milliseconds_between_memory_samples(self):
        """Gets the front_end_max_milliseconds_between_memory_samples of this BlobServiceWritableSettings.

        Maximum interval (in millisecond) between memory samples of front end.

        :return: The front_end_max_milliseconds_between_memory_samples of this BlobServiceWritableSettings.
        :rtype: int
        """
        return self._front_end_max_milliseconds_between_memory_samples

    @front_end_max_milliseconds_between_memory_samples.setter
    def front_end_max_milliseconds_between_memory_samples(self, front_end_max_milliseconds_between_memory_samples):
        """Sets the front_end_max_milliseconds_between_memory_samples of this BlobServiceWritableSettings.

        Maximum interval (in millisecond) between memory samples of front end.

        :param front_end_max_milliseconds_between_memory_samples: The front_end_max_milliseconds_between_memory_samples of this BlobServiceWritableSettings.
        :type front_end_max_milliseconds_between_memory_samples: int
        """

        self._front_end_max_milliseconds_between_memory_samples = front_end_max_milliseconds_between_memory_samples

    @property
    def front_end_memory_throttle_threshold_settings(self):
        """Gets the front_end_memory_throttle_threshold_settings of this BlobServiceWritableSettings.

        Front end memory throttle threshold settings.

        :return: The front_end_memory_throttle_threshold_settings of this BlobServiceWritableSettings.
        :rtype: str
        """
        return self._front_end_memory_throttle_threshold_settings

    @front_end_memory_throttle_threshold_settings.setter
    def front_end_memory_throttle_threshold_settings(self, front_end_memory_throttle_threshold_settings):
        """Sets the front_end_memory_throttle_threshold_settings of this BlobServiceWritableSettings.

        Front end memory throttle threshold settings.

        :param front_end_memory_throttle_threshold_settings: The front_end_memory_throttle_threshold_settings of this BlobServiceWritableSettings.
        :type front_end_memory_throttle_threshold_settings: str
        """

        self._front_end_memory_throttle_threshold_settings = front_end_memory_throttle_threshold_settings

    @property
    def front_end_memory_throttling_enabled(self):
        """Gets the front_end_memory_throttling_enabled of this BlobServiceWritableSettings.

        Switch of front end memory throttling.

        :return: The front_end_memory_throttling_enabled of this BlobServiceWritableSettings.
        :rtype: bool
        """
        return self._front_end_memory_throttling_enabled

    @front_end_memory_throttling_enabled.setter
    def front_end_memory_throttling_enabled(self, front_end_memory_throttling_enabled):
        """Sets the front_end_memory_throttling_enabled of this BlobServiceWritableSettings.

        Switch of front end memory throttling.

        :param front_end_memory_throttling_enabled: The front_end_memory_throttling_enabled of this BlobServiceWritableSettings.
        :type front_end_memory_throttling_enabled: bool
        """

        self._front_end_memory_throttling_enabled = front_end_memory_throttling_enabled

    @property
    def front_end_min_thread_pool_threads(self):
        """Gets the front_end_min_thread_pool_threads of this BlobServiceWritableSettings.

        Front end minimum number of threads in thread pool.

        :return: The front_end_min_thread_pool_threads of this BlobServiceWritableSettings.
        :rtype: int
        """
        return self._front_end_min_thread_pool_threads

    @front_end_min_thread_pool_threads.setter
    def front_end_min_thread_pool_threads(self, front_end_min_thread_pool_threads):
        """Sets the front_end_min_thread_pool_threads of this BlobServiceWritableSettings.

        Front end minimum number of threads in thread pool.

        :param front_end_min_thread_pool_threads: The front_end_min_thread_pool_threads of this BlobServiceWritableSettings.
        :type front_end_min_thread_pool_threads: int
        """

        self._front_end_min_thread_pool_threads = front_end_min_thread_pool_threads

    @property
    def front_end_thread_pool_based_keep_alive_io_completion_threshold(self):
        """Gets the front_end_thread_pool_based_keep_alive_io_completion_threshold of this BlobServiceWritableSettings.

        Threshold of front end thread pool based keep-alive IO completion.

        :return: The front_end_thread_pool_based_keep_alive_io_completion_threshold of this BlobServiceWritableSettings.
        :rtype: int
        """
        return self._front_end_thread_pool_based_keep_alive_io_completion_threshold

    @front_end_thread_pool_based_keep_alive_io_completion_threshold.setter
    def front_end_thread_pool_based_keep_alive_io_completion_threshold(self, front_end_thread_pool_based_keep_alive_io_completion_threshold):
        """Sets the front_end_thread_pool_based_keep_alive_io_completion_threshold of this BlobServiceWritableSettings.

        Threshold of front end thread pool based keep-alive IO completion.

        :param front_end_thread_pool_based_keep_alive_io_completion_threshold: The front_end_thread_pool_based_keep_alive_io_completion_threshold of this BlobServiceWritableSettings.
        :type front_end_thread_pool_based_keep_alive_io_completion_threshold: int
        """

        self._front_end_thread_pool_based_keep_alive_io_completion_threshold = front_end_thread_pool_based_keep_alive_io_completion_threshold

    @property
    def front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds(self):
        """Gets the front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds of this BlobServiceWritableSettings.

        Monitor interval (in seconds) of front end thread pool based keep-alive monitor.

        :return: The front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds of this BlobServiceWritableSettings.
        :rtype: int
        """
        return self._front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds

    @front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds.setter
    def front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds(self, front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds):
        """Sets the front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds of this BlobServiceWritableSettings.

        Monitor interval (in seconds) of front end thread pool based keep-alive monitor.

        :param front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds: The front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds of this BlobServiceWritableSettings.
        :type front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds: int
        """

        self._front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds = front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds

    @property
    def front_end_thread_pool_based_keep_alive_percentage(self):
        """Gets the front_end_thread_pool_based_keep_alive_percentage of this BlobServiceWritableSettings.

        Percentage (%) of front end thread pool based keep-alive.

        :return: The front_end_thread_pool_based_keep_alive_percentage of this BlobServiceWritableSettings.
        :rtype: float
        """
        return self._front_end_thread_pool_based_keep_alive_percentage

    @front_end_thread_pool_based_keep_alive_percentage.setter
    def front_end_thread_pool_based_keep_alive_percentage(self, front_end_thread_pool_based_keep_alive_percentage):
        """Sets the front_end_thread_pool_based_keep_alive_percentage of this BlobServiceWritableSettings.

        Percentage (%) of front end thread pool based keep-alive.

        :param front_end_thread_pool_based_keep_alive_percentage: The front_end_thread_pool_based_keep_alive_percentage of this BlobServiceWritableSettings.
        :type front_end_thread_pool_based_keep_alive_percentage: float
        """

        self._front_end_thread_pool_based_keep_alive_percentage = front_end_thread_pool_based_keep_alive_percentage

    @property
    def front_end_thread_pool_based_keep_alive_worker_thread_threshold(self):
        """Gets the front_end_thread_pool_based_keep_alive_worker_thread_threshold of this BlobServiceWritableSettings.

        Threshold of front end thread pool based keep-alive worker thread.

        :return: The front_end_thread_pool_based_keep_alive_worker_thread_threshold of this BlobServiceWritableSettings.
        :rtype: int
        """
        return self._front_end_thread_pool_based_keep_alive_worker_thread_threshold

    @front_end_thread_pool_based_keep_alive_worker_thread_threshold.setter
    def front_end_thread_pool_based_keep_alive_worker_thread_threshold(self, front_end_thread_pool_based_keep_alive_worker_thread_threshold):
        """Sets the front_end_thread_pool_based_keep_alive_worker_thread_threshold of this BlobServiceWritableSettings.

        Threshold of front end thread pool based keep-alive worker thread.

        :param front_end_thread_pool_based_keep_alive_worker_thread_threshold: The front_end_thread_pool_based_keep_alive_worker_thread_threshold of this BlobServiceWritableSettings.
        :type front_end_thread_pool_based_keep_alive_worker_thread_threshold: int
        """

        self._front_end_thread_pool_based_keep_alive_worker_thread_threshold = front_end_thread_pool_based_keep_alive_worker_thread_threshold

    @property
    def front_end_use_sla_time_in_availability(self):
        """Gets the front_end_use_sla_time_in_availability of this BlobServiceWritableSettings.

        Switch of whether front end uses SLA time in availability.

        :return: The front_end_use_sla_time_in_availability of this BlobServiceWritableSettings.
        :rtype: bool
        """
        return self._front_end_use_sla_time_in_availability

    @front_end_use_sla_time_in_availability.setter
    def front_end_use_sla_time_in_availability(self, front_end_use_sla_time_in_availability):
        """Sets the front_end_use_sla_time_in_availability of this BlobServiceWritableSettings.

        Switch of whether front end uses SLA time in availability.

        :param front_end_use_sla_time_in_availability: The front_end_use_sla_time_in_availability of this BlobServiceWritableSettings.
        :type front_end_use_sla_time_in_availability: bool
        """

        self._front_end_use_sla_time_in_availability = front_end_use_sla_time_in_availability
