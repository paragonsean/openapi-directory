/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StorageManagementClient);
  }
}(this, function(expect, StorageManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StorageManagementClient.BlobServiceWritableSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BlobServiceWritableSettings', function() {
    it('should create an instance of BlobServiceWritableSettings', function() {
      // uncomment below and update the code to test BlobServiceWritableSettings
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be.a(StorageManagementClient.BlobServiceWritableSettings);
    });

    it('should have the property blobSvcContainerGcInterval (base name: "blobSvcContainerGcInterval")', function() {
      // uncomment below and update the code to test the property blobSvcContainerGcInterval
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property blobSvcShallowGcInterval (base name: "blobSvcShallowGcInterval")', function() {
      // uncomment below and update the code to test the property blobSvcShallowGcInterval
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property blobSvcStreamMapMinContainerOccupancyPercent (base name: "blobSvcStreamMapMinContainerOccupancyPercent")', function() {
      // uncomment below and update the code to test the property blobSvcStreamMapMinContainerOccupancyPercent
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndHttpListenPort (base name: "frontEndHttpListenPort")', function() {
      // uncomment below and update the code to test the property frontEndHttpListenPort
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndHttpsListenPort (base name: "frontEndHttpsListenPort")', function() {
      // uncomment below and update the code to test the property frontEndHttpsListenPort
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndCallbackThreadsCount (base name: "frontEndCallbackThreadsCount")', function() {
      // uncomment below and update the code to test the property frontEndCallbackThreadsCount
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds (base name: "frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds")', function() {
      // uncomment below and update the code to test the property frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndCpuBasedKeepAliveThrottlingEnabled (base name: "frontEndCpuBasedKeepAliveThrottlingEnabled")', function() {
      // uncomment below and update the code to test the property frontEndCpuBasedKeepAliveThrottlingEnabled
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold (base name: "frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold")', function() {
      // uncomment below and update the code to test the property frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle (base name: "frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle")', function() {
      // uncomment below and update the code to test the property frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndMaxMillisecondsBetweenMemorySamples (base name: "frontEndMaxMillisecondsBetweenMemorySamples")', function() {
      // uncomment below and update the code to test the property frontEndMaxMillisecondsBetweenMemorySamples
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndMemoryThrottleThresholdSettings (base name: "frontEndMemoryThrottleThresholdSettings")', function() {
      // uncomment below and update the code to test the property frontEndMemoryThrottleThresholdSettings
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndMemoryThrottlingEnabled (base name: "frontEndMemoryThrottlingEnabled")', function() {
      // uncomment below and update the code to test the property frontEndMemoryThrottlingEnabled
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndMinThreadPoolThreads (base name: "frontEndMinThreadPoolThreads")', function() {
      // uncomment below and update the code to test the property frontEndMinThreadPoolThreads
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndThreadPoolBasedKeepAliveIOCompletionThreshold (base name: "frontEndThreadPoolBasedKeepAliveIOCompletionThreshold")', function() {
      // uncomment below and update the code to test the property frontEndThreadPoolBasedKeepAliveIOCompletionThreshold
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds (base name: "frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds")', function() {
      // uncomment below and update the code to test the property frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndThreadPoolBasedKeepAlivePercentage (base name: "frontEndThreadPoolBasedKeepAlivePercentage")', function() {
      // uncomment below and update the code to test the property frontEndThreadPoolBasedKeepAlivePercentage
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold (base name: "frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold")', function() {
      // uncomment below and update the code to test the property frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

    it('should have the property frontEndUseSlaTimeInAvailability (base name: "frontEndUseSlaTimeInAvailability")', function() {
      // uncomment below and update the code to test the property frontEndUseSlaTimeInAvailability
      //var instance = new StorageManagementClient.BlobServiceWritableSettings();
      //expect(instance).to.be();
    });

  });

}));
