/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlobServiceWritableSettings from './BlobServiceWritableSettings';

/**
 * The BlobServiceSettings model module.
 * @module model/BlobServiceSettings
 * @version 2015-12-01-preview
 */
class BlobServiceSettings {
    /**
     * Constructs a new <code>BlobServiceSettings</code>.
     * Blob service settings.
     * @alias module:model/BlobServiceSettings
     * @implements module:model/BlobServiceWritableSettings
     */
    constructor() { 
        BlobServiceWritableSettings.initialize(this);
        BlobServiceSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BlobServiceSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlobServiceSettings} obj Optional instance to populate.
     * @return {module:model/BlobServiceSettings} The populated <code>BlobServiceSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlobServiceSettings();
            BlobServiceWritableSettings.constructFromObject(data, obj);

            if (data.hasOwnProperty('blobSvcContainerGcInterval')) {
                obj['blobSvcContainerGcInterval'] = ApiClient.convertToType(data['blobSvcContainerGcInterval'], 'Number');
            }
            if (data.hasOwnProperty('blobSvcShallowGcInterval')) {
                obj['blobSvcShallowGcInterval'] = ApiClient.convertToType(data['blobSvcShallowGcInterval'], 'Number');
            }
            if (data.hasOwnProperty('blobSvcStreamMapMinContainerOccupancyPercent')) {
                obj['blobSvcStreamMapMinContainerOccupancyPercent'] = ApiClient.convertToType(data['blobSvcStreamMapMinContainerOccupancyPercent'], 'Number');
            }
            if (data.hasOwnProperty('frontEndHttpListenPort')) {
                obj['frontEndHttpListenPort'] = ApiClient.convertToType(data['frontEndHttpListenPort'], 'Number');
            }
            if (data.hasOwnProperty('frontEndHttpsListenPort')) {
                obj['frontEndHttpsListenPort'] = ApiClient.convertToType(data['frontEndHttpsListenPort'], 'Number');
            }
            if (data.hasOwnProperty('frontEndCallbackThreadsCount')) {
                obj['frontEndCallbackThreadsCount'] = ApiClient.convertToType(data['frontEndCallbackThreadsCount'], 'Number');
            }
            if (data.hasOwnProperty('frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds')) {
                obj['frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds'] = ApiClient.convertToType(data['frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('frontEndCpuBasedKeepAliveThrottlingEnabled')) {
                obj['frontEndCpuBasedKeepAliveThrottlingEnabled'] = ApiClient.convertToType(data['frontEndCpuBasedKeepAliveThrottlingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold')) {
                obj['frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold'] = ApiClient.convertToType(data['frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold'], 'Number');
            }
            if (data.hasOwnProperty('frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle')) {
                obj['frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle'] = ApiClient.convertToType(data['frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle'], 'Number');
            }
            if (data.hasOwnProperty('frontEndMaxMillisecondsBetweenMemorySamples')) {
                obj['frontEndMaxMillisecondsBetweenMemorySamples'] = ApiClient.convertToType(data['frontEndMaxMillisecondsBetweenMemorySamples'], 'Number');
            }
            if (data.hasOwnProperty('frontEndMemoryThrottleThresholdSettings')) {
                obj['frontEndMemoryThrottleThresholdSettings'] = ApiClient.convertToType(data['frontEndMemoryThrottleThresholdSettings'], 'String');
            }
            if (data.hasOwnProperty('frontEndMemoryThrottlingEnabled')) {
                obj['frontEndMemoryThrottlingEnabled'] = ApiClient.convertToType(data['frontEndMemoryThrottlingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('frontEndMinThreadPoolThreads')) {
                obj['frontEndMinThreadPoolThreads'] = ApiClient.convertToType(data['frontEndMinThreadPoolThreads'], 'Number');
            }
            if (data.hasOwnProperty('frontEndThreadPoolBasedKeepAliveIOCompletionThreshold')) {
                obj['frontEndThreadPoolBasedKeepAliveIOCompletionThreshold'] = ApiClient.convertToType(data['frontEndThreadPoolBasedKeepAliveIOCompletionThreshold'], 'Number');
            }
            if (data.hasOwnProperty('frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds')) {
                obj['frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds'] = ApiClient.convertToType(data['frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('frontEndThreadPoolBasedKeepAlivePercentage')) {
                obj['frontEndThreadPoolBasedKeepAlivePercentage'] = ApiClient.convertToType(data['frontEndThreadPoolBasedKeepAlivePercentage'], 'Number');
            }
            if (data.hasOwnProperty('frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold')) {
                obj['frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold'] = ApiClient.convertToType(data['frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold'], 'Number');
            }
            if (data.hasOwnProperty('frontEndUseSlaTimeInAvailability')) {
                obj['frontEndUseSlaTimeInAvailability'] = ApiClient.convertToType(data['frontEndUseSlaTimeInAvailability'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlobServiceSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlobServiceSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['frontEndMemoryThrottleThresholdSettings'] && !(typeof data['frontEndMemoryThrottleThresholdSettings'] === 'string' || data['frontEndMemoryThrottleThresholdSettings'] instanceof String)) {
            throw new Error("Expected the field `frontEndMemoryThrottleThresholdSettings` to be a primitive type in the JSON string but got " + data['frontEndMemoryThrottleThresholdSettings']);
        }

        return true;
    }


}



/**
 * The interval, in seconds, of container garbage collection.
 * @member {Number} blobSvcContainerGcInterval
 */
BlobServiceSettings.prototype['blobSvcContainerGcInterval'] = undefined;

/**
 * The interval ,in seconds, of shallow garbage collection.
 * @member {Number} blobSvcShallowGcInterval
 */
BlobServiceSettings.prototype['blobSvcShallowGcInterval'] = undefined;

/**
 * The minimal container occupancy percent for stream mapping.
 * @member {Number} blobSvcStreamMapMinContainerOccupancyPercent
 */
BlobServiceSettings.prototype['blobSvcStreamMapMinContainerOccupancyPercent'] = undefined;

/**
 * The HTTP port of the storage service front end.
 * @member {Number} frontEndHttpListenPort
 */
BlobServiceSettings.prototype['frontEndHttpListenPort'] = undefined;

/**
 * The HTTPs port of the storage service front end.
 * @member {Number} frontEndHttpsListenPort
 */
BlobServiceSettings.prototype['frontEndHttpsListenPort'] = undefined;

/**
 * Front end callback threads count.
 * @member {Number} frontEndCallbackThreadsCount
 */
BlobServiceSettings.prototype['frontEndCallbackThreadsCount'] = undefined;

/**
 * Interval (in second) of CPU monitor for front end CPU based keep-alive throttling.
 * @member {Number} frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds
 */
BlobServiceSettings.prototype['frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds'] = undefined;

/**
 * Switch of front end CPU based keep-alive throttling.
 * @member {Boolean} frontEndCpuBasedKeepAliveThrottlingEnabled
 */
BlobServiceSettings.prototype['frontEndCpuBasedKeepAliveThrottlingEnabled'] = undefined;

/**
 * Threshold (% percentage) of front end CPU based keep-alive throttling.
 * @member {Number} frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold
 */
BlobServiceSettings.prototype['frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold'] = undefined;

/**
 * Threshold (% percentage) of requests to throttle in front end CPU based keep-alive throttling.
 * @member {Number} frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle
 */
BlobServiceSettings.prototype['frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle'] = undefined;

/**
 * Maximum interval (in millisecond) between memory samples of front end.
 * @member {Number} frontEndMaxMillisecondsBetweenMemorySamples
 */
BlobServiceSettings.prototype['frontEndMaxMillisecondsBetweenMemorySamples'] = undefined;

/**
 * Front end memory throttle threshold settings.
 * @member {String} frontEndMemoryThrottleThresholdSettings
 */
BlobServiceSettings.prototype['frontEndMemoryThrottleThresholdSettings'] = undefined;

/**
 * Switch of front end memory throttling.
 * @member {Boolean} frontEndMemoryThrottlingEnabled
 */
BlobServiceSettings.prototype['frontEndMemoryThrottlingEnabled'] = undefined;

/**
 * Front end minimum number of threads in thread pool.
 * @member {Number} frontEndMinThreadPoolThreads
 */
BlobServiceSettings.prototype['frontEndMinThreadPoolThreads'] = undefined;

/**
 * Threshold of front end thread pool based keep-alive IO completion.
 * @member {Number} frontEndThreadPoolBasedKeepAliveIOCompletionThreshold
 */
BlobServiceSettings.prototype['frontEndThreadPoolBasedKeepAliveIOCompletionThreshold'] = undefined;

/**
 * Monitor interval (in seconds) of front end thread pool based keep-alive monitor.
 * @member {Number} frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds
 */
BlobServiceSettings.prototype['frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds'] = undefined;

/**
 * Percentage (%) of front end thread pool based keep-alive.
 * @member {Number} frontEndThreadPoolBasedKeepAlivePercentage
 */
BlobServiceSettings.prototype['frontEndThreadPoolBasedKeepAlivePercentage'] = undefined;

/**
 * Threshold of front end thread pool based keep-alive worker thread.
 * @member {Number} frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold
 */
BlobServiceSettings.prototype['frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold'] = undefined;

/**
 * Switch of whether front end uses SLA time in availability.
 * @member {Boolean} frontEndUseSlaTimeInAvailability
 */
BlobServiceSettings.prototype['frontEndUseSlaTimeInAvailability'] = undefined;


// Implement BlobServiceWritableSettings interface:
/**
 * The HTTP port of the storage service front end.
 * @member {Number} frontEndHttpListenPort
 */
BlobServiceWritableSettings.prototype['frontEndHttpListenPort'] = undefined;
/**
 * The HTTPs port of the storage service front end.
 * @member {Number} frontEndHttpsListenPort
 */
BlobServiceWritableSettings.prototype['frontEndHttpsListenPort'] = undefined;
/**
 * Front end callback threads count.
 * @member {Number} frontEndCallbackThreadsCount
 */
BlobServiceWritableSettings.prototype['frontEndCallbackThreadsCount'] = undefined;
/**
 * Interval (in second) of CPU monitor for front end CPU based keep-alive throttling.
 * @member {Number} frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds
 */
BlobServiceWritableSettings.prototype['frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds'] = undefined;
/**
 * Switch of front end CPU based keep-alive throttling.
 * @member {Boolean} frontEndCpuBasedKeepAliveThrottlingEnabled
 */
BlobServiceWritableSettings.prototype['frontEndCpuBasedKeepAliveThrottlingEnabled'] = undefined;
/**
 * Threshold (% percentage) of front end CPU based keep-alive throttling.
 * @member {Number} frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold
 */
BlobServiceWritableSettings.prototype['frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold'] = undefined;
/**
 * Threshold (% percentage) of requests to throttle in front end CPU based keep-alive throttling.
 * @member {Number} frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle
 */
BlobServiceWritableSettings.prototype['frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle'] = undefined;
/**
 * Maximum interval (in millisecond) between memory samples of front end.
 * @member {Number} frontEndMaxMillisecondsBetweenMemorySamples
 */
BlobServiceWritableSettings.prototype['frontEndMaxMillisecondsBetweenMemorySamples'] = undefined;
/**
 * Front end memory throttle threshold settings.
 * @member {String} frontEndMemoryThrottleThresholdSettings
 */
BlobServiceWritableSettings.prototype['frontEndMemoryThrottleThresholdSettings'] = undefined;
/**
 * Switch of front end memory throttling.
 * @member {Boolean} frontEndMemoryThrottlingEnabled
 */
BlobServiceWritableSettings.prototype['frontEndMemoryThrottlingEnabled'] = undefined;
/**
 * Front end minimum number of threads in thread pool.
 * @member {Number} frontEndMinThreadPoolThreads
 */
BlobServiceWritableSettings.prototype['frontEndMinThreadPoolThreads'] = undefined;
/**
 * Threshold of front end thread pool based keep-alive IO completion.
 * @member {Number} frontEndThreadPoolBasedKeepAliveIOCompletionThreshold
 */
BlobServiceWritableSettings.prototype['frontEndThreadPoolBasedKeepAliveIOCompletionThreshold'] = undefined;
/**
 * Monitor interval (in seconds) of front end thread pool based keep-alive monitor.
 * @member {Number} frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds
 */
BlobServiceWritableSettings.prototype['frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds'] = undefined;
/**
 * Percentage (%) of front end thread pool based keep-alive.
 * @member {Number} frontEndThreadPoolBasedKeepAlivePercentage
 */
BlobServiceWritableSettings.prototype['frontEndThreadPoolBasedKeepAlivePercentage'] = undefined;
/**
 * Threshold of front end thread pool based keep-alive worker thread.
 * @member {Number} frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold
 */
BlobServiceWritableSettings.prototype['frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold'] = undefined;
/**
 * Switch of whether front end uses SLA time in availability.
 * @member {Boolean} frontEndUseSlaTimeInAvailability
 */
BlobServiceWritableSettings.prototype['frontEndUseSlaTimeInAvailability'] = undefined;




export default BlobServiceSettings;

