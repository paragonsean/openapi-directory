/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BlobService from '../model/BlobService';
import BlobServicesListMetricDefinitions200Response from '../model/BlobServicesListMetricDefinitions200Response';
import BlobServicesListMetrics200Response from '../model/BlobServicesListMetrics200Response';

/**
* BlobServices service.
* @module api/BlobServicesApi
* @version 2015-12-01-preview
*/
export default class BlobServicesApi {

    /**
    * Constructs a new BlobServicesApi. 
    * @alias module:api/BlobServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the blobServicesGet operation.
     * @callback module:api/BlobServicesApi~blobServicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlobService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the BLOB service.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {module:model/String} serviceType The service type.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/BlobServicesApi~blobServicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlobService}
     */
    blobServicesGet(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobServicesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobServicesGet");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling blobServicesGet");
      }
      // verify the required parameter 'serviceType' is set
      if (serviceType === undefined || serviceType === null) {
        throw new Error("Missing the required parameter 'serviceType' when calling blobServicesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobServicesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId,
        'serviceType': serviceType
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlobService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/blobservices/{serviceType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobServicesListMetricDefinitions operation.
     * @callback module:api/BlobServicesApi~blobServicesListMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlobServicesListMetricDefinitions200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of metric definitions for BLOB service.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {module:model/String} serviceType The service type.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/BlobServicesApi~blobServicesListMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlobServicesListMetricDefinitions200Response}
     */
    blobServicesListMetricDefinitions(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobServicesListMetricDefinitions");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobServicesListMetricDefinitions");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling blobServicesListMetricDefinitions");
      }
      // verify the required parameter 'serviceType' is set
      if (serviceType === undefined || serviceType === null) {
        throw new Error("Missing the required parameter 'serviceType' when calling blobServicesListMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobServicesListMetricDefinitions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId,
        'serviceType': serviceType
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlobServicesListMetricDefinitions200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/blobservices/{serviceType}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobServicesListMetrics operation.
     * @callback module:api/BlobServicesApi~blobServicesListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlobServicesListMetrics200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of metrics for BLOB service.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {module:model/String} serviceType The service type.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/BlobServicesApi~blobServicesListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlobServicesListMetrics200Response}
     */
    blobServicesListMetrics(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobServicesListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobServicesListMetrics");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling blobServicesListMetrics");
      }
      // verify the required parameter 'serviceType' is set
      if (serviceType === undefined || serviceType === null) {
        throw new Error("Missing the required parameter 'serviceType' when calling blobServicesListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobServicesListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId,
        'serviceType': serviceType
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlobServicesListMetrics200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/blobservices/{serviceType}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
