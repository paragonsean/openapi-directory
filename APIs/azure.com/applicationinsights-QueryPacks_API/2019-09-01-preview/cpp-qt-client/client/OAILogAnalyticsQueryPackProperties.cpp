/**
 * Azure Log Analytics Query Packs
 * Azure Log Analytics API reference for Query Packs management.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogAnalyticsQueryPackProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogAnalyticsQueryPackProperties::OAILogAnalyticsQueryPackProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogAnalyticsQueryPackProperties::OAILogAnalyticsQueryPackProperties() {
    this->initializeModel();
}

OAILogAnalyticsQueryPackProperties::~OAILogAnalyticsQueryPackProperties() {}

void OAILogAnalyticsQueryPackProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_query_pack_id_isSet = false;
    m_query_pack_id_isValid = false;

    m_time_created_isSet = false;
    m_time_created_isValid = false;

    m_time_modified_isSet = false;
    m_time_modified_isValid = false;
}

void OAILogAnalyticsQueryPackProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogAnalyticsQueryPackProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_query_pack_id_isValid = ::OpenAPI::fromJsonValue(m_query_pack_id, json[QString("queryPackId")]);
    m_query_pack_id_isSet = !json[QString("queryPackId")].isNull() && m_query_pack_id_isValid;

    m_time_created_isValid = ::OpenAPI::fromJsonValue(m_time_created, json[QString("timeCreated")]);
    m_time_created_isSet = !json[QString("timeCreated")].isNull() && m_time_created_isValid;

    m_time_modified_isValid = ::OpenAPI::fromJsonValue(m_time_modified, json[QString("timeModified")]);
    m_time_modified_isSet = !json[QString("timeModified")].isNull() && m_time_modified_isValid;
}

QString OAILogAnalyticsQueryPackProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogAnalyticsQueryPackProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_query_pack_id_isSet) {
        obj.insert(QString("queryPackId"), ::OpenAPI::toJsonValue(m_query_pack_id));
    }
    if (m_time_created_isSet) {
        obj.insert(QString("timeCreated"), ::OpenAPI::toJsonValue(m_time_created));
    }
    if (m_time_modified_isSet) {
        obj.insert(QString("timeModified"), ::OpenAPI::toJsonValue(m_time_modified));
    }
    return obj;
}

QString OAILogAnalyticsQueryPackProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAILogAnalyticsQueryPackProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAILogAnalyticsQueryPackProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAILogAnalyticsQueryPackProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAILogAnalyticsQueryPackProperties::getQueryPackId() const {
    return m_query_pack_id;
}
void OAILogAnalyticsQueryPackProperties::setQueryPackId(const QString &query_pack_id) {
    m_query_pack_id = query_pack_id;
    m_query_pack_id_isSet = true;
}

bool OAILogAnalyticsQueryPackProperties::is_query_pack_id_Set() const{
    return m_query_pack_id_isSet;
}

bool OAILogAnalyticsQueryPackProperties::is_query_pack_id_Valid() const{
    return m_query_pack_id_isValid;
}

QDateTime OAILogAnalyticsQueryPackProperties::getTimeCreated() const {
    return m_time_created;
}
void OAILogAnalyticsQueryPackProperties::setTimeCreated(const QDateTime &time_created) {
    m_time_created = time_created;
    m_time_created_isSet = true;
}

bool OAILogAnalyticsQueryPackProperties::is_time_created_Set() const{
    return m_time_created_isSet;
}

bool OAILogAnalyticsQueryPackProperties::is_time_created_Valid() const{
    return m_time_created_isValid;
}

QDateTime OAILogAnalyticsQueryPackProperties::getTimeModified() const {
    return m_time_modified;
}
void OAILogAnalyticsQueryPackProperties::setTimeModified(const QDateTime &time_modified) {
    m_time_modified = time_modified;
    m_time_modified_isSet = true;
}

bool OAILogAnalyticsQueryPackProperties::is_time_modified_Set() const{
    return m_time_modified_isSet;
}

bool OAILogAnalyticsQueryPackProperties::is_time_modified_Valid() const{
    return m_time_modified_isValid;
}

bool OAILogAnalyticsQueryPackProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_pack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogAnalyticsQueryPackProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
