/**
 * Azure Log Analytics Query Packs
 * Azure Log Analytics API reference for Query Packs management.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAILogAnalyticsQueryPack.h"
#include "OAILogAnalyticsQueryPackListResult.h"
#include "OAITagsResource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  query_pack_name QString [required]
    * @param[in]  log_analytics_query_pack_payload OAILogAnalyticsQueryPack [required]
    */
    virtual void queryPacksCreateOrUpdate(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &query_pack_name, const OAILogAnalyticsQueryPack &log_analytics_query_pack_payload);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  query_pack_name QString [required]
    */
    virtual void queryPacksDelete(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &query_pack_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  query_pack_name QString [required]
    */
    virtual void queryPacksGet(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &query_pack_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void queryPacksList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void queryPacksListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  query_pack_name QString [required]
    * @param[in]  query_pack_tags OAITagsResource [required]
    */
    virtual void queryPacksUpdateTags(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &query_pack_name, const OAITagsResource &query_pack_tags);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void queryPacksCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void queryPacksDeleteCallback(OAIHttpRequestWorker *worker);
    void queryPacksGetCallback(OAIHttpRequestWorker *worker);
    void queryPacksListCallback(OAIHttpRequestWorker *worker);
    void queryPacksListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void queryPacksUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void queryPacksCreateOrUpdateSignal(OAILogAnalyticsQueryPack summary);
    void queryPacksDeleteSignal();
    void queryPacksGetSignal(OAILogAnalyticsQueryPack summary);
    void queryPacksListSignal(OAILogAnalyticsQueryPackListResult summary);
    void queryPacksListByResourceGroupSignal(OAILogAnalyticsQueryPackListResult summary);
    void queryPacksUpdateTagsSignal(OAILogAnalyticsQueryPack summary);


    void queryPacksCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAILogAnalyticsQueryPack summary);
    void queryPacksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void queryPacksGetSignalFull(OAIHttpRequestWorker *worker, OAILogAnalyticsQueryPack summary);
    void queryPacksListSignalFull(OAIHttpRequestWorker *worker, OAILogAnalyticsQueryPackListResult summary);
    void queryPacksListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAILogAnalyticsQueryPackListResult summary);
    void queryPacksUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAILogAnalyticsQueryPack summary);

    Q_DECL_DEPRECATED_X("Use queryPacksCreateOrUpdateSignalError() instead")
    void queryPacksCreateOrUpdateSignalE(OAILogAnalyticsQueryPack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPacksCreateOrUpdateSignalError(OAILogAnalyticsQueryPack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPacksDeleteSignalError() instead")
    void queryPacksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void queryPacksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPacksGetSignalError() instead")
    void queryPacksGetSignalE(OAILogAnalyticsQueryPack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPacksGetSignalError(OAILogAnalyticsQueryPack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPacksListSignalError() instead")
    void queryPacksListSignalE(OAILogAnalyticsQueryPackListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPacksListSignalError(OAILogAnalyticsQueryPackListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPacksListByResourceGroupSignalError() instead")
    void queryPacksListByResourceGroupSignalE(OAILogAnalyticsQueryPackListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPacksListByResourceGroupSignalError(OAILogAnalyticsQueryPackListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPacksUpdateTagsSignalError() instead")
    void queryPacksUpdateTagsSignalE(OAILogAnalyticsQueryPack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPacksUpdateTagsSignalError(OAILogAnalyticsQueryPack summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use queryPacksCreateOrUpdateSignalErrorFull() instead")
    void queryPacksCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPacksCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPacksDeleteSignalErrorFull() instead")
    void queryPacksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPacksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPacksGetSignalErrorFull() instead")
    void queryPacksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPacksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPacksListSignalErrorFull() instead")
    void queryPacksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPacksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPacksListByResourceGroupSignalErrorFull() instead")
    void queryPacksListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPacksListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPacksUpdateTagsSignalErrorFull() instead")
    void queryPacksUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPacksUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
