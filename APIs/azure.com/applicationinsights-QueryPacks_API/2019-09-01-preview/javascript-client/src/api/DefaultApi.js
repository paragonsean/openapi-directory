/**
 * Azure Log Analytics Query Packs
 * Azure Log Analytics API reference for Query Packs management.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import LogAnalyticsQueryPack from '../model/LogAnalyticsQueryPack';
import LogAnalyticsQueryPackListResult from '../model/LogAnalyticsQueryPackListResult';
import TagsResource from '../model/TagsResource';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-09-01-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queryPacksCreateOrUpdate operation.
     * @callback module:api/DefaultApi~queryPacksCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogAnalyticsQueryPack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates (or updates) a Log Analytics QueryPack. Note: You cannot specify a different value for InstrumentationKey nor AppId in the Put operation.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} queryPackName The name of the Log Analytics QueryPack resource.
     * @param {module:model/LogAnalyticsQueryPack} logAnalyticsQueryPackPayload Properties that need to be specified to create or update a Log Analytics QueryPack.
     * @param {module:api/DefaultApi~queryPacksCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogAnalyticsQueryPack}
     */
    queryPacksCreateOrUpdate(resourceGroupName, apiVersion, subscriptionId, queryPackName, logAnalyticsQueryPackPayload, callback) {
      let postBody = logAnalyticsQueryPackPayload;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queryPacksCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queryPacksCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queryPacksCreateOrUpdate");
      }
      // verify the required parameter 'queryPackName' is set
      if (queryPackName === undefined || queryPackName === null) {
        throw new Error("Missing the required parameter 'queryPackName' when calling queryPacksCreateOrUpdate");
      }
      // verify the required parameter 'logAnalyticsQueryPackPayload' is set
      if (logAnalyticsQueryPackPayload === undefined || logAnalyticsQueryPackPayload === null) {
        throw new Error("Missing the required parameter 'logAnalyticsQueryPackPayload' when calling queryPacksCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'queryPackName': queryPackName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogAnalyticsQueryPack;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryPacksDelete operation.
     * @callback module:api/DefaultApi~queryPacksDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Log Analytics QueryPack.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} queryPackName The name of the Log Analytics QueryPack resource.
     * @param {module:api/DefaultApi~queryPacksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    queryPacksDelete(resourceGroupName, apiVersion, subscriptionId, queryPackName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queryPacksDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queryPacksDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queryPacksDelete");
      }
      // verify the required parameter 'queryPackName' is set
      if (queryPackName === undefined || queryPackName === null) {
        throw new Error("Missing the required parameter 'queryPackName' when calling queryPacksDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'queryPackName': queryPackName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryPacksGet operation.
     * @callback module:api/DefaultApi~queryPacksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogAnalyticsQueryPack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a Log Analytics QueryPack.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} queryPackName The name of the Log Analytics QueryPack resource.
     * @param {module:api/DefaultApi~queryPacksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogAnalyticsQueryPack}
     */
    queryPacksGet(resourceGroupName, apiVersion, subscriptionId, queryPackName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queryPacksGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queryPacksGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queryPacksGet");
      }
      // verify the required parameter 'queryPackName' is set
      if (queryPackName === undefined || queryPackName === null) {
        throw new Error("Missing the required parameter 'queryPackName' when calling queryPacksGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'queryPackName': queryPackName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogAnalyticsQueryPack;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryPacksList operation.
     * @callback module:api/DefaultApi~queryPacksListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogAnalyticsQueryPackListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all Log Analytics QueryPacks within a subscription.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DefaultApi~queryPacksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogAnalyticsQueryPackListResult}
     */
    queryPacksList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queryPacksList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queryPacksList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogAnalyticsQueryPackListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/microsoft.insights/queryPacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryPacksListByResourceGroup operation.
     * @callback module:api/DefaultApi~queryPacksListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogAnalyticsQueryPackListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of Log Analytics QueryPacks within a resource group.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/DefaultApi~queryPacksListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogAnalyticsQueryPackListResult}
     */
    queryPacksListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queryPacksListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queryPacksListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queryPacksListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogAnalyticsQueryPackListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryPacksUpdateTags operation.
     * @callback module:api/DefaultApi~queryPacksUpdateTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogAnalyticsQueryPack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing QueryPack's tags. To update other fields use the CreateOrUpdate method.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} queryPackName The name of the Log Analytics QueryPack resource.
     * @param {module:model/TagsResource} queryPackTags Updated tag information to set into the QueryPack instance.
     * @param {module:api/DefaultApi~queryPacksUpdateTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogAnalyticsQueryPack}
     */
    queryPacksUpdateTags(resourceGroupName, apiVersion, subscriptionId, queryPackName, queryPackTags, callback) {
      let postBody = queryPackTags;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queryPacksUpdateTags");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queryPacksUpdateTags");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queryPacksUpdateTags");
      }
      // verify the required parameter 'queryPackName' is set
      if (queryPackName === undefined || queryPackName === null) {
        throw new Error("Missing the required parameter 'queryPackName' when calling queryPacksUpdateTags");
      }
      // verify the required parameter 'queryPackTags' is set
      if (queryPackTags === undefined || queryPackTags === null) {
        throw new Error("Missing the required parameter 'queryPackTags' when calling queryPacksUpdateTags");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'queryPackName': queryPackName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogAnalyticsQueryPack;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
