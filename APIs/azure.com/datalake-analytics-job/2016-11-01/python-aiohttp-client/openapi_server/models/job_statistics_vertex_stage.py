# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobStatisticsVertexStage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_read: int=None, data_read_cross_pod: int=None, data_read_intra_pod: int=None, data_to_read: int=None, data_written: int=None, duplicate_discard_count: int=None, failed_count: int=None, max_vertex_data_read: int=None, min_vertex_data_read: int=None, read_failure_count: int=None, revocation_count: int=None, running_count: int=None, scheduled_count: int=None, stage_name: str=None, succeeded_count: int=None, temp_data_written: int=None, total_count: int=None, total_failed_time: str=None, total_progress: int=None, total_succeeded_time: str=None):
        """JobStatisticsVertexStage - a model defined in OpenAPI

        :param data_read: The data_read of this JobStatisticsVertexStage.
        :param data_read_cross_pod: The data_read_cross_pod of this JobStatisticsVertexStage.
        :param data_read_intra_pod: The data_read_intra_pod of this JobStatisticsVertexStage.
        :param data_to_read: The data_to_read of this JobStatisticsVertexStage.
        :param data_written: The data_written of this JobStatisticsVertexStage.
        :param duplicate_discard_count: The duplicate_discard_count of this JobStatisticsVertexStage.
        :param failed_count: The failed_count of this JobStatisticsVertexStage.
        :param max_vertex_data_read: The max_vertex_data_read of this JobStatisticsVertexStage.
        :param min_vertex_data_read: The min_vertex_data_read of this JobStatisticsVertexStage.
        :param read_failure_count: The read_failure_count of this JobStatisticsVertexStage.
        :param revocation_count: The revocation_count of this JobStatisticsVertexStage.
        :param running_count: The running_count of this JobStatisticsVertexStage.
        :param scheduled_count: The scheduled_count of this JobStatisticsVertexStage.
        :param stage_name: The stage_name of this JobStatisticsVertexStage.
        :param succeeded_count: The succeeded_count of this JobStatisticsVertexStage.
        :param temp_data_written: The temp_data_written of this JobStatisticsVertexStage.
        :param total_count: The total_count of this JobStatisticsVertexStage.
        :param total_failed_time: The total_failed_time of this JobStatisticsVertexStage.
        :param total_progress: The total_progress of this JobStatisticsVertexStage.
        :param total_succeeded_time: The total_succeeded_time of this JobStatisticsVertexStage.
        """
        self.openapi_types = {
            'data_read': int,
            'data_read_cross_pod': int,
            'data_read_intra_pod': int,
            'data_to_read': int,
            'data_written': int,
            'duplicate_discard_count': int,
            'failed_count': int,
            'max_vertex_data_read': int,
            'min_vertex_data_read': int,
            'read_failure_count': int,
            'revocation_count': int,
            'running_count': int,
            'scheduled_count': int,
            'stage_name': str,
            'succeeded_count': int,
            'temp_data_written': int,
            'total_count': int,
            'total_failed_time': str,
            'total_progress': int,
            'total_succeeded_time': str
        }

        self.attribute_map = {
            'data_read': 'dataRead',
            'data_read_cross_pod': 'dataReadCrossPod',
            'data_read_intra_pod': 'dataReadIntraPod',
            'data_to_read': 'dataToRead',
            'data_written': 'dataWritten',
            'duplicate_discard_count': 'duplicateDiscardCount',
            'failed_count': 'failedCount',
            'max_vertex_data_read': 'maxVertexDataRead',
            'min_vertex_data_read': 'minVertexDataRead',
            'read_failure_count': 'readFailureCount',
            'revocation_count': 'revocationCount',
            'running_count': 'runningCount',
            'scheduled_count': 'scheduledCount',
            'stage_name': 'stageName',
            'succeeded_count': 'succeededCount',
            'temp_data_written': 'tempDataWritten',
            'total_count': 'totalCount',
            'total_failed_time': 'totalFailedTime',
            'total_progress': 'totalProgress',
            'total_succeeded_time': 'totalSucceededTime'
        }

        self._data_read = data_read
        self._data_read_cross_pod = data_read_cross_pod
        self._data_read_intra_pod = data_read_intra_pod
        self._data_to_read = data_to_read
        self._data_written = data_written
        self._duplicate_discard_count = duplicate_discard_count
        self._failed_count = failed_count
        self._max_vertex_data_read = max_vertex_data_read
        self._min_vertex_data_read = min_vertex_data_read
        self._read_failure_count = read_failure_count
        self._revocation_count = revocation_count
        self._running_count = running_count
        self._scheduled_count = scheduled_count
        self._stage_name = stage_name
        self._succeeded_count = succeeded_count
        self._temp_data_written = temp_data_written
        self._total_count = total_count
        self._total_failed_time = total_failed_time
        self._total_progress = total_progress
        self._total_succeeded_time = total_succeeded_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStatisticsVertexStage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobStatisticsVertexStage of this JobStatisticsVertexStage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_read(self):
        """Gets the data_read of this JobStatisticsVertexStage.

        the amount of data read, in bytes.

        :return: The data_read of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._data_read

    @data_read.setter
    def data_read(self, data_read):
        """Sets the data_read of this JobStatisticsVertexStage.

        the amount of data read, in bytes.

        :param data_read: The data_read of this JobStatisticsVertexStage.
        :type data_read: int
        """

        self._data_read = data_read

    @property
    def data_read_cross_pod(self):
        """Gets the data_read_cross_pod of this JobStatisticsVertexStage.

        the amount of data read across multiple pods, in bytes.

        :return: The data_read_cross_pod of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._data_read_cross_pod

    @data_read_cross_pod.setter
    def data_read_cross_pod(self, data_read_cross_pod):
        """Sets the data_read_cross_pod of this JobStatisticsVertexStage.

        the amount of data read across multiple pods, in bytes.

        :param data_read_cross_pod: The data_read_cross_pod of this JobStatisticsVertexStage.
        :type data_read_cross_pod: int
        """

        self._data_read_cross_pod = data_read_cross_pod

    @property
    def data_read_intra_pod(self):
        """Gets the data_read_intra_pod of this JobStatisticsVertexStage.

        the amount of data read in one pod, in bytes.

        :return: The data_read_intra_pod of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._data_read_intra_pod

    @data_read_intra_pod.setter
    def data_read_intra_pod(self, data_read_intra_pod):
        """Sets the data_read_intra_pod of this JobStatisticsVertexStage.

        the amount of data read in one pod, in bytes.

        :param data_read_intra_pod: The data_read_intra_pod of this JobStatisticsVertexStage.
        :type data_read_intra_pod: int
        """

        self._data_read_intra_pod = data_read_intra_pod

    @property
    def data_to_read(self):
        """Gets the data_to_read of this JobStatisticsVertexStage.

        the amount of data remaining to be read, in bytes.

        :return: The data_to_read of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._data_to_read

    @data_to_read.setter
    def data_to_read(self, data_to_read):
        """Sets the data_to_read of this JobStatisticsVertexStage.

        the amount of data remaining to be read, in bytes.

        :param data_to_read: The data_to_read of this JobStatisticsVertexStage.
        :type data_to_read: int
        """

        self._data_to_read = data_to_read

    @property
    def data_written(self):
        """Gets the data_written of this JobStatisticsVertexStage.

        the amount of data written, in bytes.

        :return: The data_written of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._data_written

    @data_written.setter
    def data_written(self, data_written):
        """Sets the data_written of this JobStatisticsVertexStage.

        the amount of data written, in bytes.

        :param data_written: The data_written of this JobStatisticsVertexStage.
        :type data_written: int
        """

        self._data_written = data_written

    @property
    def duplicate_discard_count(self):
        """Gets the duplicate_discard_count of this JobStatisticsVertexStage.

        the number of duplicates that were discarded.

        :return: The duplicate_discard_count of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._duplicate_discard_count

    @duplicate_discard_count.setter
    def duplicate_discard_count(self, duplicate_discard_count):
        """Sets the duplicate_discard_count of this JobStatisticsVertexStage.

        the number of duplicates that were discarded.

        :param duplicate_discard_count: The duplicate_discard_count of this JobStatisticsVertexStage.
        :type duplicate_discard_count: int
        """

        self._duplicate_discard_count = duplicate_discard_count

    @property
    def failed_count(self):
        """Gets the failed_count of this JobStatisticsVertexStage.

        the number of failures that occurred in this stage.

        :return: The failed_count of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this JobStatisticsVertexStage.

        the number of failures that occurred in this stage.

        :param failed_count: The failed_count of this JobStatisticsVertexStage.
        :type failed_count: int
        """

        self._failed_count = failed_count

    @property
    def max_vertex_data_read(self):
        """Gets the max_vertex_data_read of this JobStatisticsVertexStage.

        the maximum amount of data read in a single vertex, in bytes.

        :return: The max_vertex_data_read of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._max_vertex_data_read

    @max_vertex_data_read.setter
    def max_vertex_data_read(self, max_vertex_data_read):
        """Sets the max_vertex_data_read of this JobStatisticsVertexStage.

        the maximum amount of data read in a single vertex, in bytes.

        :param max_vertex_data_read: The max_vertex_data_read of this JobStatisticsVertexStage.
        :type max_vertex_data_read: int
        """

        self._max_vertex_data_read = max_vertex_data_read

    @property
    def min_vertex_data_read(self):
        """Gets the min_vertex_data_read of this JobStatisticsVertexStage.

        the minimum amount of data read in a single vertex, in bytes.

        :return: The min_vertex_data_read of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._min_vertex_data_read

    @min_vertex_data_read.setter
    def min_vertex_data_read(self, min_vertex_data_read):
        """Sets the min_vertex_data_read of this JobStatisticsVertexStage.

        the minimum amount of data read in a single vertex, in bytes.

        :param min_vertex_data_read: The min_vertex_data_read of this JobStatisticsVertexStage.
        :type min_vertex_data_read: int
        """

        self._min_vertex_data_read = min_vertex_data_read

    @property
    def read_failure_count(self):
        """Gets the read_failure_count of this JobStatisticsVertexStage.

        the number of read failures in this stage.

        :return: The read_failure_count of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._read_failure_count

    @read_failure_count.setter
    def read_failure_count(self, read_failure_count):
        """Sets the read_failure_count of this JobStatisticsVertexStage.

        the number of read failures in this stage.

        :param read_failure_count: The read_failure_count of this JobStatisticsVertexStage.
        :type read_failure_count: int
        """

        self._read_failure_count = read_failure_count

    @property
    def revocation_count(self):
        """Gets the revocation_count of this JobStatisticsVertexStage.

        the number of vertices that were revoked during this stage.

        :return: The revocation_count of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._revocation_count

    @revocation_count.setter
    def revocation_count(self, revocation_count):
        """Sets the revocation_count of this JobStatisticsVertexStage.

        the number of vertices that were revoked during this stage.

        :param revocation_count: The revocation_count of this JobStatisticsVertexStage.
        :type revocation_count: int
        """

        self._revocation_count = revocation_count

    @property
    def running_count(self):
        """Gets the running_count of this JobStatisticsVertexStage.

        the number of currently running vertices in this stage.

        :return: The running_count of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._running_count

    @running_count.setter
    def running_count(self, running_count):
        """Sets the running_count of this JobStatisticsVertexStage.

        the number of currently running vertices in this stage.

        :param running_count: The running_count of this JobStatisticsVertexStage.
        :type running_count: int
        """

        self._running_count = running_count

    @property
    def scheduled_count(self):
        """Gets the scheduled_count of this JobStatisticsVertexStage.

        the number of currently scheduled vertices in this stage

        :return: The scheduled_count of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._scheduled_count

    @scheduled_count.setter
    def scheduled_count(self, scheduled_count):
        """Sets the scheduled_count of this JobStatisticsVertexStage.

        the number of currently scheduled vertices in this stage

        :param scheduled_count: The scheduled_count of this JobStatisticsVertexStage.
        :type scheduled_count: int
        """

        self._scheduled_count = scheduled_count

    @property
    def stage_name(self):
        """Gets the stage_name of this JobStatisticsVertexStage.

        the name of this stage in job execution.

        :return: The stage_name of this JobStatisticsVertexStage.
        :rtype: str
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name):
        """Sets the stage_name of this JobStatisticsVertexStage.

        the name of this stage in job execution.

        :param stage_name: The stage_name of this JobStatisticsVertexStage.
        :type stage_name: str
        """

        self._stage_name = stage_name

    @property
    def succeeded_count(self):
        """Gets the succeeded_count of this JobStatisticsVertexStage.

        the number of vertices that succeeded in this stage.

        :return: The succeeded_count of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._succeeded_count

    @succeeded_count.setter
    def succeeded_count(self, succeeded_count):
        """Sets the succeeded_count of this JobStatisticsVertexStage.

        the number of vertices that succeeded in this stage.

        :param succeeded_count: The succeeded_count of this JobStatisticsVertexStage.
        :type succeeded_count: int
        """

        self._succeeded_count = succeeded_count

    @property
    def temp_data_written(self):
        """Gets the temp_data_written of this JobStatisticsVertexStage.

        the amount of temporary data written, in bytes.

        :return: The temp_data_written of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._temp_data_written

    @temp_data_written.setter
    def temp_data_written(self, temp_data_written):
        """Sets the temp_data_written of this JobStatisticsVertexStage.

        the amount of temporary data written, in bytes.

        :param temp_data_written: The temp_data_written of this JobStatisticsVertexStage.
        :type temp_data_written: int
        """

        self._temp_data_written = temp_data_written

    @property
    def total_count(self):
        """Gets the total_count of this JobStatisticsVertexStage.

        the total vertex count for this stage.

        :return: The total_count of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this JobStatisticsVertexStage.

        the total vertex count for this stage.

        :param total_count: The total_count of this JobStatisticsVertexStage.
        :type total_count: int
        """

        self._total_count = total_count

    @property
    def total_failed_time(self):
        """Gets the total_failed_time of this JobStatisticsVertexStage.

        the amount of time that failed vertices took up in this stage.

        :return: The total_failed_time of this JobStatisticsVertexStage.
        :rtype: str
        """
        return self._total_failed_time

    @total_failed_time.setter
    def total_failed_time(self, total_failed_time):
        """Sets the total_failed_time of this JobStatisticsVertexStage.

        the amount of time that failed vertices took up in this stage.

        :param total_failed_time: The total_failed_time of this JobStatisticsVertexStage.
        :type total_failed_time: str
        """

        self._total_failed_time = total_failed_time

    @property
    def total_progress(self):
        """Gets the total_progress of this JobStatisticsVertexStage.

        the current progress of this stage, as a percentage.

        :return: The total_progress of this JobStatisticsVertexStage.
        :rtype: int
        """
        return self._total_progress

    @total_progress.setter
    def total_progress(self, total_progress):
        """Sets the total_progress of this JobStatisticsVertexStage.

        the current progress of this stage, as a percentage.

        :param total_progress: The total_progress of this JobStatisticsVertexStage.
        :type total_progress: int
        """

        self._total_progress = total_progress

    @property
    def total_succeeded_time(self):
        """Gets the total_succeeded_time of this JobStatisticsVertexStage.

        the amount of time all successful vertices took in this stage.

        :return: The total_succeeded_time of this JobStatisticsVertexStage.
        :rtype: str
        """
        return self._total_succeeded_time

    @total_succeeded_time.setter
    def total_succeeded_time(self, total_succeeded_time):
        """Sets the total_succeeded_time of this JobStatisticsVertexStage.

        the amount of time all successful vertices took in this stage.

        :param total_succeeded_time: The total_succeeded_time of this JobStatisticsVertexStage.
        :type total_succeeded_time: str
        """

        self._total_succeeded_time = total_succeeded_time
