# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.diagnostics import Diagnostics
from openapi_server.models.job_data_path import JobDataPath
from openapi_server.models.job_properties import JobProperties
from openapi_server.models.job_resource import JobResource
from openapi_server.models.job_statistics import JobStatistics
from openapi_server import util


class USqlJobProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algebra_file_path: str=None, compile_mode: str=None, debug_data: JobDataPath=None, diagnostics: List[Diagnostics]=None, resources: List[JobResource]=None, root_process_node_id: str=None, statistics: JobStatistics=None, total_compilation_time: str=None, total_pause_time: str=None, total_queued_time: str=None, total_running_time: str=None, yarn_application_id: str=None, yarn_application_time_stamp: int=None, runtime_version: str=None, script: str=None, type: str=None):
        """USqlJobProperties - a model defined in OpenAPI

        :param algebra_file_path: The algebra_file_path of this USqlJobProperties.
        :param compile_mode: The compile_mode of this USqlJobProperties.
        :param debug_data: The debug_data of this USqlJobProperties.
        :param diagnostics: The diagnostics of this USqlJobProperties.
        :param resources: The resources of this USqlJobProperties.
        :param root_process_node_id: The root_process_node_id of this USqlJobProperties.
        :param statistics: The statistics of this USqlJobProperties.
        :param total_compilation_time: The total_compilation_time of this USqlJobProperties.
        :param total_pause_time: The total_pause_time of this USqlJobProperties.
        :param total_queued_time: The total_queued_time of this USqlJobProperties.
        :param total_running_time: The total_running_time of this USqlJobProperties.
        :param yarn_application_id: The yarn_application_id of this USqlJobProperties.
        :param yarn_application_time_stamp: The yarn_application_time_stamp of this USqlJobProperties.
        :param runtime_version: The runtime_version of this USqlJobProperties.
        :param script: The script of this USqlJobProperties.
        :param type: The type of this USqlJobProperties.
        """
        self.openapi_types = {
            'algebra_file_path': str,
            'compile_mode': str,
            'debug_data': JobDataPath,
            'diagnostics': List[Diagnostics],
            'resources': List[JobResource],
            'root_process_node_id': str,
            'statistics': JobStatistics,
            'total_compilation_time': str,
            'total_pause_time': str,
            'total_queued_time': str,
            'total_running_time': str,
            'yarn_application_id': str,
            'yarn_application_time_stamp': int,
            'runtime_version': str,
            'script': str,
            'type': str
        }

        self.attribute_map = {
            'algebra_file_path': 'algebraFilePath',
            'compile_mode': 'compileMode',
            'debug_data': 'debugData',
            'diagnostics': 'diagnostics',
            'resources': 'resources',
            'root_process_node_id': 'rootProcessNodeId',
            'statistics': 'statistics',
            'total_compilation_time': 'totalCompilationTime',
            'total_pause_time': 'totalPauseTime',
            'total_queued_time': 'totalQueuedTime',
            'total_running_time': 'totalRunningTime',
            'yarn_application_id': 'yarnApplicationId',
            'yarn_application_time_stamp': 'yarnApplicationTimeStamp',
            'runtime_version': 'runtimeVersion',
            'script': 'script',
            'type': 'type'
        }

        self._algebra_file_path = algebra_file_path
        self._compile_mode = compile_mode
        self._debug_data = debug_data
        self._diagnostics = diagnostics
        self._resources = resources
        self._root_process_node_id = root_process_node_id
        self._statistics = statistics
        self._total_compilation_time = total_compilation_time
        self._total_pause_time = total_pause_time
        self._total_queued_time = total_queued_time
        self._total_running_time = total_running_time
        self._yarn_application_id = yarn_application_id
        self._yarn_application_time_stamp = yarn_application_time_stamp
        self._runtime_version = runtime_version
        self._script = script
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'USqlJobProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The USqlJobProperties of this USqlJobProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algebra_file_path(self):
        """Gets the algebra_file_path of this USqlJobProperties.

        the algebra file path after the job has completed

        :return: The algebra_file_path of this USqlJobProperties.
        :rtype: str
        """
        return self._algebra_file_path

    @algebra_file_path.setter
    def algebra_file_path(self, algebra_file_path):
        """Sets the algebra_file_path of this USqlJobProperties.

        the algebra file path after the job has completed

        :param algebra_file_path: The algebra_file_path of this USqlJobProperties.
        :type algebra_file_path: str
        """

        self._algebra_file_path = algebra_file_path

    @property
    def compile_mode(self):
        """Gets the compile_mode of this USqlJobProperties.

        the specific compilation mode for the job used during execution. If this is not specified during submission, the server will determine the optimal compilation mode.

        :return: The compile_mode of this USqlJobProperties.
        :rtype: str
        """
        return self._compile_mode

    @compile_mode.setter
    def compile_mode(self, compile_mode):
        """Sets the compile_mode of this USqlJobProperties.

        the specific compilation mode for the job used during execution. If this is not specified during submission, the server will determine the optimal compilation mode.

        :param compile_mode: The compile_mode of this USqlJobProperties.
        :type compile_mode: str
        """
        allowed_values = ["Semantic", "Full", "SingleBox"]  # noqa: E501
        if compile_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `compile_mode` ({0}), must be one of {1}"
                .format(compile_mode, allowed_values)
            )

        self._compile_mode = compile_mode

    @property
    def debug_data(self):
        """Gets the debug_data of this USqlJobProperties.


        :return: The debug_data of this USqlJobProperties.
        :rtype: JobDataPath
        """
        return self._debug_data

    @debug_data.setter
    def debug_data(self, debug_data):
        """Sets the debug_data of this USqlJobProperties.


        :param debug_data: The debug_data of this USqlJobProperties.
        :type debug_data: JobDataPath
        """

        self._debug_data = debug_data

    @property
    def diagnostics(self):
        """Gets the diagnostics of this USqlJobProperties.

        the diagnostics for the job.

        :return: The diagnostics of this USqlJobProperties.
        :rtype: List[Diagnostics]
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this USqlJobProperties.

        the diagnostics for the job.

        :param diagnostics: The diagnostics of this USqlJobProperties.
        :type diagnostics: List[Diagnostics]
        """

        self._diagnostics = diagnostics

    @property
    def resources(self):
        """Gets the resources of this USqlJobProperties.

        the list of resources that are required by the job

        :return: The resources of this USqlJobProperties.
        :rtype: List[JobResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this USqlJobProperties.

        the list of resources that are required by the job

        :param resources: The resources of this USqlJobProperties.
        :type resources: List[JobResource]
        """

        self._resources = resources

    @property
    def root_process_node_id(self):
        """Gets the root_process_node_id of this USqlJobProperties.

        the ID used to identify the job manager coordinating job execution. This value should not be set by the user and will be ignored if it is.

        :return: The root_process_node_id of this USqlJobProperties.
        :rtype: str
        """
        return self._root_process_node_id

    @root_process_node_id.setter
    def root_process_node_id(self, root_process_node_id):
        """Sets the root_process_node_id of this USqlJobProperties.

        the ID used to identify the job manager coordinating job execution. This value should not be set by the user and will be ignored if it is.

        :param root_process_node_id: The root_process_node_id of this USqlJobProperties.
        :type root_process_node_id: str
        """

        self._root_process_node_id = root_process_node_id

    @property
    def statistics(self):
        """Gets the statistics of this USqlJobProperties.


        :return: The statistics of this USqlJobProperties.
        :rtype: JobStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this USqlJobProperties.


        :param statistics: The statistics of this USqlJobProperties.
        :type statistics: JobStatistics
        """

        self._statistics = statistics

    @property
    def total_compilation_time(self):
        """Gets the total_compilation_time of this USqlJobProperties.

        the total time this job spent compiling. This value should not be set by the user and will be ignored if it is.

        :return: The total_compilation_time of this USqlJobProperties.
        :rtype: str
        """
        return self._total_compilation_time

    @total_compilation_time.setter
    def total_compilation_time(self, total_compilation_time):
        """Sets the total_compilation_time of this USqlJobProperties.

        the total time this job spent compiling. This value should not be set by the user and will be ignored if it is.

        :param total_compilation_time: The total_compilation_time of this USqlJobProperties.
        :type total_compilation_time: str
        """

        self._total_compilation_time = total_compilation_time

    @property
    def total_pause_time(self):
        """Gets the total_pause_time of this USqlJobProperties.

        the total time this job spent paused. This value should not be set by the user and will be ignored if it is.

        :return: The total_pause_time of this USqlJobProperties.
        :rtype: str
        """
        return self._total_pause_time

    @total_pause_time.setter
    def total_pause_time(self, total_pause_time):
        """Sets the total_pause_time of this USqlJobProperties.

        the total time this job spent paused. This value should not be set by the user and will be ignored if it is.

        :param total_pause_time: The total_pause_time of this USqlJobProperties.
        :type total_pause_time: str
        """

        self._total_pause_time = total_pause_time

    @property
    def total_queued_time(self):
        """Gets the total_queued_time of this USqlJobProperties.

        the total time this job spent queued. This value should not be set by the user and will be ignored if it is.

        :return: The total_queued_time of this USqlJobProperties.
        :rtype: str
        """
        return self._total_queued_time

    @total_queued_time.setter
    def total_queued_time(self, total_queued_time):
        """Sets the total_queued_time of this USqlJobProperties.

        the total time this job spent queued. This value should not be set by the user and will be ignored if it is.

        :param total_queued_time: The total_queued_time of this USqlJobProperties.
        :type total_queued_time: str
        """

        self._total_queued_time = total_queued_time

    @property
    def total_running_time(self):
        """Gets the total_running_time of this USqlJobProperties.

        the total time this job spent executing. This value should not be set by the user and will be ignored if it is.

        :return: The total_running_time of this USqlJobProperties.
        :rtype: str
        """
        return self._total_running_time

    @total_running_time.setter
    def total_running_time(self, total_running_time):
        """Sets the total_running_time of this USqlJobProperties.

        the total time this job spent executing. This value should not be set by the user and will be ignored if it is.

        :param total_running_time: The total_running_time of this USqlJobProperties.
        :type total_running_time: str
        """

        self._total_running_time = total_running_time

    @property
    def yarn_application_id(self):
        """Gets the yarn_application_id of this USqlJobProperties.

        the ID used to identify the yarn application executing the job. This value should not be set by the user and will be ignored if it is.

        :return: The yarn_application_id of this USqlJobProperties.
        :rtype: str
        """
        return self._yarn_application_id

    @yarn_application_id.setter
    def yarn_application_id(self, yarn_application_id):
        """Sets the yarn_application_id of this USqlJobProperties.

        the ID used to identify the yarn application executing the job. This value should not be set by the user and will be ignored if it is.

        :param yarn_application_id: The yarn_application_id of this USqlJobProperties.
        :type yarn_application_id: str
        """

        self._yarn_application_id = yarn_application_id

    @property
    def yarn_application_time_stamp(self):
        """Gets the yarn_application_time_stamp of this USqlJobProperties.

        the timestamp (in ticks) for the yarn application executing the job. This value should not be set by the user and will be ignored if it is.

        :return: The yarn_application_time_stamp of this USqlJobProperties.
        :rtype: int
        """
        return self._yarn_application_time_stamp

    @yarn_application_time_stamp.setter
    def yarn_application_time_stamp(self, yarn_application_time_stamp):
        """Sets the yarn_application_time_stamp of this USqlJobProperties.

        the timestamp (in ticks) for the yarn application executing the job. This value should not be set by the user and will be ignored if it is.

        :param yarn_application_time_stamp: The yarn_application_time_stamp of this USqlJobProperties.
        :type yarn_application_time_stamp: int
        """

        self._yarn_application_time_stamp = yarn_application_time_stamp

    @property
    def runtime_version(self):
        """Gets the runtime_version of this USqlJobProperties.

        the runtime version of the Data Lake Analytics engine to use for the specific type of job being run.

        :return: The runtime_version of this USqlJobProperties.
        :rtype: str
        """
        return self._runtime_version

    @runtime_version.setter
    def runtime_version(self, runtime_version):
        """Sets the runtime_version of this USqlJobProperties.

        the runtime version of the Data Lake Analytics engine to use for the specific type of job being run.

        :param runtime_version: The runtime_version of this USqlJobProperties.
        :type runtime_version: str
        """

        self._runtime_version = runtime_version

    @property
    def script(self):
        """Gets the script of this USqlJobProperties.

        the script to run. Please note that the maximum script size is 3 MB.

        :return: The script of this USqlJobProperties.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this USqlJobProperties.

        the script to run. Please note that the maximum script size is 3 MB.

        :param script: The script of this USqlJobProperties.
        :type script: str
        """
        if script is None:
            raise ValueError("Invalid value for `script`, must not be `None`")

        self._script = script

    @property
    def type(self):
        """Gets the type of this USqlJobProperties.

        the job type of the current job (i.e. Hive or USql).

        :return: The type of this USqlJobProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this USqlJobProperties.

        the job type of the current job (i.e. Hive or USql).

        :param type: The type of this USqlJobProperties.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
