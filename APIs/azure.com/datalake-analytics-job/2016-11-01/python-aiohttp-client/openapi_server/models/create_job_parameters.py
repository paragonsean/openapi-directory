# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_job_properties import CreateJobProperties
from openapi_server.models.job_relationship_properties import JobRelationshipProperties
from openapi_server import util


class CreateJobParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, degree_of_parallelism: int=1, degree_of_parallelism_percent: float=None, log_file_patterns: List[str]=None, name: str=None, priority: int=None, related: JobRelationshipProperties=None, properties: CreateJobProperties=None, type: str=None):
        """CreateJobParameters - a model defined in OpenAPI

        :param degree_of_parallelism: The degree_of_parallelism of this CreateJobParameters.
        :param degree_of_parallelism_percent: The degree_of_parallelism_percent of this CreateJobParameters.
        :param log_file_patterns: The log_file_patterns of this CreateJobParameters.
        :param name: The name of this CreateJobParameters.
        :param priority: The priority of this CreateJobParameters.
        :param related: The related of this CreateJobParameters.
        :param properties: The properties of this CreateJobParameters.
        :param type: The type of this CreateJobParameters.
        """
        self.openapi_types = {
            'degree_of_parallelism': int,
            'degree_of_parallelism_percent': float,
            'log_file_patterns': List[str],
            'name': str,
            'priority': int,
            'related': JobRelationshipProperties,
            'properties': CreateJobProperties,
            'type': str
        }

        self.attribute_map = {
            'degree_of_parallelism': 'degreeOfParallelism',
            'degree_of_parallelism_percent': 'degreeOfParallelismPercent',
            'log_file_patterns': 'logFilePatterns',
            'name': 'name',
            'priority': 'priority',
            'related': 'related',
            'properties': 'properties',
            'type': 'type'
        }

        self._degree_of_parallelism = degree_of_parallelism
        self._degree_of_parallelism_percent = degree_of_parallelism_percent
        self._log_file_patterns = log_file_patterns
        self._name = name
        self._priority = priority
        self._related = related
        self._properties = properties
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateJobParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateJobParameters of this CreateJobParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def degree_of_parallelism(self):
        """Gets the degree_of_parallelism of this CreateJobParameters.

        the degree of parallelism used for this job. At most one of degreeOfParallelism and degreeOfParallelismPercent should be specified. If none, a default value of 1 will be used.

        :return: The degree_of_parallelism of this CreateJobParameters.
        :rtype: int
        """
        return self._degree_of_parallelism

    @degree_of_parallelism.setter
    def degree_of_parallelism(self, degree_of_parallelism):
        """Sets the degree_of_parallelism of this CreateJobParameters.

        the degree of parallelism used for this job. At most one of degreeOfParallelism and degreeOfParallelismPercent should be specified. If none, a default value of 1 will be used.

        :param degree_of_parallelism: The degree_of_parallelism of this CreateJobParameters.
        :type degree_of_parallelism: int
        """

        self._degree_of_parallelism = degree_of_parallelism

    @property
    def degree_of_parallelism_percent(self):
        """Gets the degree_of_parallelism_percent of this CreateJobParameters.

        the degree of parallelism in percentage used for this job. At most one of degreeOfParallelism and degreeOfParallelismPercent should be specified. If none, a default value of 1 will be used for degreeOfParallelism.

        :return: The degree_of_parallelism_percent of this CreateJobParameters.
        :rtype: float
        """
        return self._degree_of_parallelism_percent

    @degree_of_parallelism_percent.setter
    def degree_of_parallelism_percent(self, degree_of_parallelism_percent):
        """Sets the degree_of_parallelism_percent of this CreateJobParameters.

        the degree of parallelism in percentage used for this job. At most one of degreeOfParallelism and degreeOfParallelismPercent should be specified. If none, a default value of 1 will be used for degreeOfParallelism.

        :param degree_of_parallelism_percent: The degree_of_parallelism_percent of this CreateJobParameters.
        :type degree_of_parallelism_percent: float
        """

        self._degree_of_parallelism_percent = degree_of_parallelism_percent

    @property
    def log_file_patterns(self):
        """Gets the log_file_patterns of this CreateJobParameters.

        the list of log file name patterns to find in the logFolder. '*' is the only matching character allowed. Example format: jobExecution*.log or *mylog*.txt

        :return: The log_file_patterns of this CreateJobParameters.
        :rtype: List[str]
        """
        return self._log_file_patterns

    @log_file_patterns.setter
    def log_file_patterns(self, log_file_patterns):
        """Sets the log_file_patterns of this CreateJobParameters.

        the list of log file name patterns to find in the logFolder. '*' is the only matching character allowed. Example format: jobExecution*.log or *mylog*.txt

        :param log_file_patterns: The log_file_patterns of this CreateJobParameters.
        :type log_file_patterns: List[str]
        """

        self._log_file_patterns = log_file_patterns

    @property
    def name(self):
        """Gets the name of this CreateJobParameters.

        the friendly name of the job to submit.

        :return: The name of this CreateJobParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateJobParameters.

        the friendly name of the job to submit.

        :param name: The name of this CreateJobParameters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this CreateJobParameters.

        the priority value to use for the current job. Lower numbers have a higher priority. By default, a job has a priority of 1000. This must be greater than 0.

        :return: The priority of this CreateJobParameters.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CreateJobParameters.

        the priority value to use for the current job. Lower numbers have a higher priority. By default, a job has a priority of 1000. This must be greater than 0.

        :param priority: The priority of this CreateJobParameters.
        :type priority: int
        """

        self._priority = priority

    @property
    def related(self):
        """Gets the related of this CreateJobParameters.


        :return: The related of this CreateJobParameters.
        :rtype: JobRelationshipProperties
        """
        return self._related

    @related.setter
    def related(self, related):
        """Sets the related of this CreateJobParameters.


        :param related: The related of this CreateJobParameters.
        :type related: JobRelationshipProperties
        """

        self._related = related

    @property
    def properties(self):
        """Gets the properties of this CreateJobParameters.


        :return: The properties of this CreateJobParameters.
        :rtype: CreateJobProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CreateJobParameters.


        :param properties: The properties of this CreateJobParameters.
        :type properties: CreateJobProperties
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def type(self):
        """Gets the type of this CreateJobParameters.

        the job type of the current job (Hive or USql).

        :return: The type of this CreateJobParameters.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateJobParameters.

        the job type of the current job (Hive or USql).

        :param type: The type of this CreateJobParameters.
        :type type: str
        """
        allowed_values = ["USql", "Hive"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
