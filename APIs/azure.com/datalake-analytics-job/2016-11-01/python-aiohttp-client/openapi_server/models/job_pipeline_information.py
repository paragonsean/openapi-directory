# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_pipeline_run_information import JobPipelineRunInformation
from openapi_server import util


class JobPipelineInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, au_hours_canceled: float=None, au_hours_failed: float=None, au_hours_succeeded: float=None, last_submit_time: datetime=None, num_jobs_canceled: int=None, num_jobs_failed: int=None, num_jobs_succeeded: int=None, pipeline_id: str=None, pipeline_name: str=None, pipeline_uri: str=None, recurrences: List[str]=None, runs: List[JobPipelineRunInformation]=None):
        """JobPipelineInformation - a model defined in OpenAPI

        :param au_hours_canceled: The au_hours_canceled of this JobPipelineInformation.
        :param au_hours_failed: The au_hours_failed of this JobPipelineInformation.
        :param au_hours_succeeded: The au_hours_succeeded of this JobPipelineInformation.
        :param last_submit_time: The last_submit_time of this JobPipelineInformation.
        :param num_jobs_canceled: The num_jobs_canceled of this JobPipelineInformation.
        :param num_jobs_failed: The num_jobs_failed of this JobPipelineInformation.
        :param num_jobs_succeeded: The num_jobs_succeeded of this JobPipelineInformation.
        :param pipeline_id: The pipeline_id of this JobPipelineInformation.
        :param pipeline_name: The pipeline_name of this JobPipelineInformation.
        :param pipeline_uri: The pipeline_uri of this JobPipelineInformation.
        :param recurrences: The recurrences of this JobPipelineInformation.
        :param runs: The runs of this JobPipelineInformation.
        """
        self.openapi_types = {
            'au_hours_canceled': float,
            'au_hours_failed': float,
            'au_hours_succeeded': float,
            'last_submit_time': datetime,
            'num_jobs_canceled': int,
            'num_jobs_failed': int,
            'num_jobs_succeeded': int,
            'pipeline_id': str,
            'pipeline_name': str,
            'pipeline_uri': str,
            'recurrences': List[str],
            'runs': List[JobPipelineRunInformation]
        }

        self.attribute_map = {
            'au_hours_canceled': 'auHoursCanceled',
            'au_hours_failed': 'auHoursFailed',
            'au_hours_succeeded': 'auHoursSucceeded',
            'last_submit_time': 'lastSubmitTime',
            'num_jobs_canceled': 'numJobsCanceled',
            'num_jobs_failed': 'numJobsFailed',
            'num_jobs_succeeded': 'numJobsSucceeded',
            'pipeline_id': 'pipelineId',
            'pipeline_name': 'pipelineName',
            'pipeline_uri': 'pipelineUri',
            'recurrences': 'recurrences',
            'runs': 'runs'
        }

        self._au_hours_canceled = au_hours_canceled
        self._au_hours_failed = au_hours_failed
        self._au_hours_succeeded = au_hours_succeeded
        self._last_submit_time = last_submit_time
        self._num_jobs_canceled = num_jobs_canceled
        self._num_jobs_failed = num_jobs_failed
        self._num_jobs_succeeded = num_jobs_succeeded
        self._pipeline_id = pipeline_id
        self._pipeline_name = pipeline_name
        self._pipeline_uri = pipeline_uri
        self._recurrences = recurrences
        self._runs = runs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobPipelineInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobPipelineInformation of this JobPipelineInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def au_hours_canceled(self):
        """Gets the au_hours_canceled of this JobPipelineInformation.

        the number of job execution hours that resulted in canceled jobs.

        :return: The au_hours_canceled of this JobPipelineInformation.
        :rtype: float
        """
        return self._au_hours_canceled

    @au_hours_canceled.setter
    def au_hours_canceled(self, au_hours_canceled):
        """Sets the au_hours_canceled of this JobPipelineInformation.

        the number of job execution hours that resulted in canceled jobs.

        :param au_hours_canceled: The au_hours_canceled of this JobPipelineInformation.
        :type au_hours_canceled: float
        """

        self._au_hours_canceled = au_hours_canceled

    @property
    def au_hours_failed(self):
        """Gets the au_hours_failed of this JobPipelineInformation.

        the number of job execution hours that resulted in failed jobs.

        :return: The au_hours_failed of this JobPipelineInformation.
        :rtype: float
        """
        return self._au_hours_failed

    @au_hours_failed.setter
    def au_hours_failed(self, au_hours_failed):
        """Sets the au_hours_failed of this JobPipelineInformation.

        the number of job execution hours that resulted in failed jobs.

        :param au_hours_failed: The au_hours_failed of this JobPipelineInformation.
        :type au_hours_failed: float
        """

        self._au_hours_failed = au_hours_failed

    @property
    def au_hours_succeeded(self):
        """Gets the au_hours_succeeded of this JobPipelineInformation.

        the number of job execution hours that resulted in successful jobs.

        :return: The au_hours_succeeded of this JobPipelineInformation.
        :rtype: float
        """
        return self._au_hours_succeeded

    @au_hours_succeeded.setter
    def au_hours_succeeded(self, au_hours_succeeded):
        """Sets the au_hours_succeeded of this JobPipelineInformation.

        the number of job execution hours that resulted in successful jobs.

        :param au_hours_succeeded: The au_hours_succeeded of this JobPipelineInformation.
        :type au_hours_succeeded: float
        """

        self._au_hours_succeeded = au_hours_succeeded

    @property
    def last_submit_time(self):
        """Gets the last_submit_time of this JobPipelineInformation.

        the last time a job in this pipeline was submitted.

        :return: The last_submit_time of this JobPipelineInformation.
        :rtype: datetime
        """
        return self._last_submit_time

    @last_submit_time.setter
    def last_submit_time(self, last_submit_time):
        """Sets the last_submit_time of this JobPipelineInformation.

        the last time a job in this pipeline was submitted.

        :param last_submit_time: The last_submit_time of this JobPipelineInformation.
        :type last_submit_time: datetime
        """

        self._last_submit_time = last_submit_time

    @property
    def num_jobs_canceled(self):
        """Gets the num_jobs_canceled of this JobPipelineInformation.

        the number of jobs in this pipeline that have been canceled.

        :return: The num_jobs_canceled of this JobPipelineInformation.
        :rtype: int
        """
        return self._num_jobs_canceled

    @num_jobs_canceled.setter
    def num_jobs_canceled(self, num_jobs_canceled):
        """Sets the num_jobs_canceled of this JobPipelineInformation.

        the number of jobs in this pipeline that have been canceled.

        :param num_jobs_canceled: The num_jobs_canceled of this JobPipelineInformation.
        :type num_jobs_canceled: int
        """

        self._num_jobs_canceled = num_jobs_canceled

    @property
    def num_jobs_failed(self):
        """Gets the num_jobs_failed of this JobPipelineInformation.

        the number of jobs in this pipeline that have failed.

        :return: The num_jobs_failed of this JobPipelineInformation.
        :rtype: int
        """
        return self._num_jobs_failed

    @num_jobs_failed.setter
    def num_jobs_failed(self, num_jobs_failed):
        """Sets the num_jobs_failed of this JobPipelineInformation.

        the number of jobs in this pipeline that have failed.

        :param num_jobs_failed: The num_jobs_failed of this JobPipelineInformation.
        :type num_jobs_failed: int
        """

        self._num_jobs_failed = num_jobs_failed

    @property
    def num_jobs_succeeded(self):
        """Gets the num_jobs_succeeded of this JobPipelineInformation.

        the number of jobs in this pipeline that have succeeded.

        :return: The num_jobs_succeeded of this JobPipelineInformation.
        :rtype: int
        """
        return self._num_jobs_succeeded

    @num_jobs_succeeded.setter
    def num_jobs_succeeded(self, num_jobs_succeeded):
        """Sets the num_jobs_succeeded of this JobPipelineInformation.

        the number of jobs in this pipeline that have succeeded.

        :param num_jobs_succeeded: The num_jobs_succeeded of this JobPipelineInformation.
        :type num_jobs_succeeded: int
        """

        self._num_jobs_succeeded = num_jobs_succeeded

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this JobPipelineInformation.

        the job relationship pipeline identifier (a GUID).

        :return: The pipeline_id of this JobPipelineInformation.
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this JobPipelineInformation.

        the job relationship pipeline identifier (a GUID).

        :param pipeline_id: The pipeline_id of this JobPipelineInformation.
        :type pipeline_id: str
        """

        self._pipeline_id = pipeline_id

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this JobPipelineInformation.

        the friendly name of the job relationship pipeline, which does not need to be unique.

        :return: The pipeline_name of this JobPipelineInformation.
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this JobPipelineInformation.

        the friendly name of the job relationship pipeline, which does not need to be unique.

        :param pipeline_name: The pipeline_name of this JobPipelineInformation.
        :type pipeline_name: str
        """
        if pipeline_name is not None and len(pipeline_name) > 260:
            raise ValueError("Invalid value for `pipeline_name`, length must be less than or equal to `260`")

        self._pipeline_name = pipeline_name

    @property
    def pipeline_uri(self):
        """Gets the pipeline_uri of this JobPipelineInformation.

        the pipeline uri, unique, links to the originating service for this pipeline.

        :return: The pipeline_uri of this JobPipelineInformation.
        :rtype: str
        """
        return self._pipeline_uri

    @pipeline_uri.setter
    def pipeline_uri(self, pipeline_uri):
        """Sets the pipeline_uri of this JobPipelineInformation.

        the pipeline uri, unique, links to the originating service for this pipeline.

        :param pipeline_uri: The pipeline_uri of this JobPipelineInformation.
        :type pipeline_uri: str
        """

        self._pipeline_uri = pipeline_uri

    @property
    def recurrences(self):
        """Gets the recurrences of this JobPipelineInformation.

        the list of recurrence identifiers representing each recurrence in this pipeline.

        :return: The recurrences of this JobPipelineInformation.
        :rtype: List[str]
        """
        return self._recurrences

    @recurrences.setter
    def recurrences(self, recurrences):
        """Sets the recurrences of this JobPipelineInformation.

        the list of recurrence identifiers representing each recurrence in this pipeline.

        :param recurrences: The recurrences of this JobPipelineInformation.
        :type recurrences: List[str]
        """

        self._recurrences = recurrences

    @property
    def runs(self):
        """Gets the runs of this JobPipelineInformation.

        the list of run identifiers representing each run of this pipeline.

        :return: The runs of this JobPipelineInformation.
        :rtype: List[JobPipelineRunInformation]
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this JobPipelineInformation.

        the list of run identifiers representing each run of this pipeline.

        :param runs: The runs of this JobPipelineInformation.
        :type runs: List[JobPipelineRunInformation]
        """

        self._runs = runs
