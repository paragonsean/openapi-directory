# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobRelationshipProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_id: str=None, pipeline_name: str=None, pipeline_uri: str=None, recurrence_id: str=None, recurrence_name: str=None, run_id: str=None):
        """JobRelationshipProperties - a model defined in OpenAPI

        :param pipeline_id: The pipeline_id of this JobRelationshipProperties.
        :param pipeline_name: The pipeline_name of this JobRelationshipProperties.
        :param pipeline_uri: The pipeline_uri of this JobRelationshipProperties.
        :param recurrence_id: The recurrence_id of this JobRelationshipProperties.
        :param recurrence_name: The recurrence_name of this JobRelationshipProperties.
        :param run_id: The run_id of this JobRelationshipProperties.
        """
        self.openapi_types = {
            'pipeline_id': str,
            'pipeline_name': str,
            'pipeline_uri': str,
            'recurrence_id': str,
            'recurrence_name': str,
            'run_id': str
        }

        self.attribute_map = {
            'pipeline_id': 'pipelineId',
            'pipeline_name': 'pipelineName',
            'pipeline_uri': 'pipelineUri',
            'recurrence_id': 'recurrenceId',
            'recurrence_name': 'recurrenceName',
            'run_id': 'runId'
        }

        self._pipeline_id = pipeline_id
        self._pipeline_name = pipeline_name
        self._pipeline_uri = pipeline_uri
        self._recurrence_id = recurrence_id
        self._recurrence_name = recurrence_name
        self._run_id = run_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobRelationshipProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobRelationshipProperties of this JobRelationshipProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this JobRelationshipProperties.

        the job relationship pipeline identifier (a GUID).

        :return: The pipeline_id of this JobRelationshipProperties.
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this JobRelationshipProperties.

        the job relationship pipeline identifier (a GUID).

        :param pipeline_id: The pipeline_id of this JobRelationshipProperties.
        :type pipeline_id: str
        """

        self._pipeline_id = pipeline_id

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this JobRelationshipProperties.

        the friendly name of the job relationship pipeline, which does not need to be unique.

        :return: The pipeline_name of this JobRelationshipProperties.
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this JobRelationshipProperties.

        the friendly name of the job relationship pipeline, which does not need to be unique.

        :param pipeline_name: The pipeline_name of this JobRelationshipProperties.
        :type pipeline_name: str
        """
        if pipeline_name is not None and len(pipeline_name) > 260:
            raise ValueError("Invalid value for `pipeline_name`, length must be less than or equal to `260`")

        self._pipeline_name = pipeline_name

    @property
    def pipeline_uri(self):
        """Gets the pipeline_uri of this JobRelationshipProperties.

        the pipeline uri, unique, links to the originating service for this pipeline.

        :return: The pipeline_uri of this JobRelationshipProperties.
        :rtype: str
        """
        return self._pipeline_uri

    @pipeline_uri.setter
    def pipeline_uri(self, pipeline_uri):
        """Sets the pipeline_uri of this JobRelationshipProperties.

        the pipeline uri, unique, links to the originating service for this pipeline.

        :param pipeline_uri: The pipeline_uri of this JobRelationshipProperties.
        :type pipeline_uri: str
        """

        self._pipeline_uri = pipeline_uri

    @property
    def recurrence_id(self):
        """Gets the recurrence_id of this JobRelationshipProperties.

        the recurrence identifier (a GUID), unique per activity/script, regardless of iterations. This is something to link different occurrences of the same job together.

        :return: The recurrence_id of this JobRelationshipProperties.
        :rtype: str
        """
        return self._recurrence_id

    @recurrence_id.setter
    def recurrence_id(self, recurrence_id):
        """Sets the recurrence_id of this JobRelationshipProperties.

        the recurrence identifier (a GUID), unique per activity/script, regardless of iterations. This is something to link different occurrences of the same job together.

        :param recurrence_id: The recurrence_id of this JobRelationshipProperties.
        :type recurrence_id: str
        """
        if recurrence_id is None:
            raise ValueError("Invalid value for `recurrence_id`, must not be `None`")

        self._recurrence_id = recurrence_id

    @property
    def recurrence_name(self):
        """Gets the recurrence_name of this JobRelationshipProperties.

        the recurrence name, user friendly name for the correlation between jobs.

        :return: The recurrence_name of this JobRelationshipProperties.
        :rtype: str
        """
        return self._recurrence_name

    @recurrence_name.setter
    def recurrence_name(self, recurrence_name):
        """Sets the recurrence_name of this JobRelationshipProperties.

        the recurrence name, user friendly name for the correlation between jobs.

        :param recurrence_name: The recurrence_name of this JobRelationshipProperties.
        :type recurrence_name: str
        """
        if recurrence_name is not None and len(recurrence_name) > 260:
            raise ValueError("Invalid value for `recurrence_name`, length must be less than or equal to `260`")

        self._recurrence_name = recurrence_name

    @property
    def run_id(self):
        """Gets the run_id of this JobRelationshipProperties.

        the run identifier (a GUID), unique identifier of the iteration of this pipeline.

        :return: The run_id of this JobRelationshipProperties.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this JobRelationshipProperties.

        the run identifier (a GUID), unique identifier of the iteration of this pipeline.

        :param run_id: The run_id of this JobRelationshipProperties.
        :type run_id: str
        """

        self._run_id = run_id
