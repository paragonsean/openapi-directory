# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobDataPath(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command: str=None, job_id: str=None, paths: List[str]=None):
        """JobDataPath - a model defined in OpenAPI

        :param command: The command of this JobDataPath.
        :param job_id: The job_id of this JobDataPath.
        :param paths: The paths of this JobDataPath.
        """
        self.openapi_types = {
            'command': str,
            'job_id': str,
            'paths': List[str]
        }

        self.attribute_map = {
            'command': 'command',
            'job_id': 'jobId',
            'paths': 'paths'
        }

        self._command = command
        self._job_id = job_id
        self._paths = paths

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobDataPath':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobDataPath of this JobDataPath.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self):
        """Gets the command of this JobDataPath.

        the command that this job data relates to.

        :return: The command of this JobDataPath.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this JobDataPath.

        the command that this job data relates to.

        :param command: The command of this JobDataPath.
        :type command: str
        """

        self._command = command

    @property
    def job_id(self):
        """Gets the job_id of this JobDataPath.

        the id of the job this data is for.

        :return: The job_id of this JobDataPath.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobDataPath.

        the id of the job this data is for.

        :param job_id: The job_id of this JobDataPath.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def paths(self):
        """Gets the paths of this JobDataPath.

        the list of paths to all of the job data.

        :return: The paths of this JobDataPath.
        :rtype: List[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this JobDataPath.

        the list of paths to all of the job data.

        :param paths: The paths of this JobDataPath.
        :type paths: List[str]
        """

        self._paths = paths
