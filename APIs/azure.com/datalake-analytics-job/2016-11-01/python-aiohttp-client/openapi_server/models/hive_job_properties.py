# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_properties import JobProperties
from openapi_server import util


class HiveJobProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, executed_statement_count: int=None, logs_location: str=None, output_location: str=None, statement_count: int=None, runtime_version: str=None, script: str=None, type: str=None):
        """HiveJobProperties - a model defined in OpenAPI

        :param executed_statement_count: The executed_statement_count of this HiveJobProperties.
        :param logs_location: The logs_location of this HiveJobProperties.
        :param output_location: The output_location of this HiveJobProperties.
        :param statement_count: The statement_count of this HiveJobProperties.
        :param runtime_version: The runtime_version of this HiveJobProperties.
        :param script: The script of this HiveJobProperties.
        :param type: The type of this HiveJobProperties.
        """
        self.openapi_types = {
            'executed_statement_count': int,
            'logs_location': str,
            'output_location': str,
            'statement_count': int,
            'runtime_version': str,
            'script': str,
            'type': str
        }

        self.attribute_map = {
            'executed_statement_count': 'executedStatementCount',
            'logs_location': 'logsLocation',
            'output_location': 'outputLocation',
            'statement_count': 'statementCount',
            'runtime_version': 'runtimeVersion',
            'script': 'script',
            'type': 'type'
        }

        self._executed_statement_count = executed_statement_count
        self._logs_location = logs_location
        self._output_location = output_location
        self._statement_count = statement_count
        self._runtime_version = runtime_version
        self._script = script
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HiveJobProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HiveJobProperties of this HiveJobProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def executed_statement_count(self):
        """Gets the executed_statement_count of this HiveJobProperties.

        the number of statements that have been run based on the script

        :return: The executed_statement_count of this HiveJobProperties.
        :rtype: int
        """
        return self._executed_statement_count

    @executed_statement_count.setter
    def executed_statement_count(self, executed_statement_count):
        """Sets the executed_statement_count of this HiveJobProperties.

        the number of statements that have been run based on the script

        :param executed_statement_count: The executed_statement_count of this HiveJobProperties.
        :type executed_statement_count: int
        """

        self._executed_statement_count = executed_statement_count

    @property
    def logs_location(self):
        """Gets the logs_location of this HiveJobProperties.

        the Hive logs location

        :return: The logs_location of this HiveJobProperties.
        :rtype: str
        """
        return self._logs_location

    @logs_location.setter
    def logs_location(self, logs_location):
        """Sets the logs_location of this HiveJobProperties.

        the Hive logs location

        :param logs_location: The logs_location of this HiveJobProperties.
        :type logs_location: str
        """

        self._logs_location = logs_location

    @property
    def output_location(self):
        """Gets the output_location of this HiveJobProperties.

        the location of Hive job output files (both execution output and results)

        :return: The output_location of this HiveJobProperties.
        :rtype: str
        """
        return self._output_location

    @output_location.setter
    def output_location(self, output_location):
        """Sets the output_location of this HiveJobProperties.

        the location of Hive job output files (both execution output and results)

        :param output_location: The output_location of this HiveJobProperties.
        :type output_location: str
        """

        self._output_location = output_location

    @property
    def statement_count(self):
        """Gets the statement_count of this HiveJobProperties.

        the number of statements that will be run based on the script

        :return: The statement_count of this HiveJobProperties.
        :rtype: int
        """
        return self._statement_count

    @statement_count.setter
    def statement_count(self, statement_count):
        """Sets the statement_count of this HiveJobProperties.

        the number of statements that will be run based on the script

        :param statement_count: The statement_count of this HiveJobProperties.
        :type statement_count: int
        """

        self._statement_count = statement_count

    @property
    def runtime_version(self):
        """Gets the runtime_version of this HiveJobProperties.

        the runtime version of the Data Lake Analytics engine to use for the specific type of job being run.

        :return: The runtime_version of this HiveJobProperties.
        :rtype: str
        """
        return self._runtime_version

    @runtime_version.setter
    def runtime_version(self, runtime_version):
        """Sets the runtime_version of this HiveJobProperties.

        the runtime version of the Data Lake Analytics engine to use for the specific type of job being run.

        :param runtime_version: The runtime_version of this HiveJobProperties.
        :type runtime_version: str
        """

        self._runtime_version = runtime_version

    @property
    def script(self):
        """Gets the script of this HiveJobProperties.

        the script to run. Please note that the maximum script size is 3 MB.

        :return: The script of this HiveJobProperties.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this HiveJobProperties.

        the script to run. Please note that the maximum script size is 3 MB.

        :param script: The script of this HiveJobProperties.
        :type script: str
        """
        if script is None:
            raise ValueError("Invalid value for `script`, must not be `None`")

        self._script = script

    @property
    def type(self):
        """Gets the type of this HiveJobProperties.

        the job type of the current job (i.e. Hive or USql).

        :return: The type of this HiveJobProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HiveJobProperties.

        the job type of the current job (i.e. Hive or USql).

        :param type: The type of this HiveJobProperties.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
