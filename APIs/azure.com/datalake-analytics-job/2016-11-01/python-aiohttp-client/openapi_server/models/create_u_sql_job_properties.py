# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_job_properties import CreateJobProperties
from openapi_server import util


class CreateUSqlJobProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compile_mode: str=None, runtime_version: str=None, script: str=None, type: str=None):
        """CreateUSqlJobProperties - a model defined in OpenAPI

        :param compile_mode: The compile_mode of this CreateUSqlJobProperties.
        :param runtime_version: The runtime_version of this CreateUSqlJobProperties.
        :param script: The script of this CreateUSqlJobProperties.
        :param type: The type of this CreateUSqlJobProperties.
        """
        self.openapi_types = {
            'compile_mode': str,
            'runtime_version': str,
            'script': str,
            'type': str
        }

        self.attribute_map = {
            'compile_mode': 'compileMode',
            'runtime_version': 'runtimeVersion',
            'script': 'script',
            'type': 'type'
        }

        self._compile_mode = compile_mode
        self._runtime_version = runtime_version
        self._script = script
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUSqlJobProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUSqlJobProperties of this CreateUSqlJobProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compile_mode(self):
        """Gets the compile_mode of this CreateUSqlJobProperties.

        the specific compilation mode for the job used during execution. If this is not specified during submission, the server will determine the optimal compilation mode.

        :return: The compile_mode of this CreateUSqlJobProperties.
        :rtype: str
        """
        return self._compile_mode

    @compile_mode.setter
    def compile_mode(self, compile_mode):
        """Sets the compile_mode of this CreateUSqlJobProperties.

        the specific compilation mode for the job used during execution. If this is not specified during submission, the server will determine the optimal compilation mode.

        :param compile_mode: The compile_mode of this CreateUSqlJobProperties.
        :type compile_mode: str
        """
        allowed_values = ["Semantic", "Full", "SingleBox"]  # noqa: E501
        if compile_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `compile_mode` ({0}), must be one of {1}"
                .format(compile_mode, allowed_values)
            )

        self._compile_mode = compile_mode

    @property
    def runtime_version(self):
        """Gets the runtime_version of this CreateUSqlJobProperties.

        the runtime version of the Data Lake Analytics engine to use for the specific type of job being run.

        :return: The runtime_version of this CreateUSqlJobProperties.
        :rtype: str
        """
        return self._runtime_version

    @runtime_version.setter
    def runtime_version(self, runtime_version):
        """Sets the runtime_version of this CreateUSqlJobProperties.

        the runtime version of the Data Lake Analytics engine to use for the specific type of job being run.

        :param runtime_version: The runtime_version of this CreateUSqlJobProperties.
        :type runtime_version: str
        """

        self._runtime_version = runtime_version

    @property
    def script(self):
        """Gets the script of this CreateUSqlJobProperties.

        the script to run. Please note that the maximum script size is 3 MB.

        :return: The script of this CreateUSqlJobProperties.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this CreateUSqlJobProperties.

        the script to run. Please note that the maximum script size is 3 MB.

        :param script: The script of this CreateUSqlJobProperties.
        :type script: str
        """
        if script is None:
            raise ValueError("Invalid value for `script`, must not be `None`")

        self._script = script

    @property
    def type(self):
        """Gets the type of this CreateUSqlJobProperties.

        the job type of the current job (i.e. USql).

        :return: The type of this CreateUSqlJobProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateUSqlJobProperties.

        the job type of the current job (i.e. USql).

        :param type: The type of this CreateUSqlJobProperties.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
