# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobInnerError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component: str=None, description: str=None, details: str=None, diagnostic_code: int=None, error_id: str=None, help_link: str=None, inner_error: JobInnerError=None, internal_diagnostics: str=None, message: str=None, resolution: str=None, severity: str=None, source: str=None):
        """JobInnerError - a model defined in OpenAPI

        :param component: The component of this JobInnerError.
        :param description: The description of this JobInnerError.
        :param details: The details of this JobInnerError.
        :param diagnostic_code: The diagnostic_code of this JobInnerError.
        :param error_id: The error_id of this JobInnerError.
        :param help_link: The help_link of this JobInnerError.
        :param inner_error: The inner_error of this JobInnerError.
        :param internal_diagnostics: The internal_diagnostics of this JobInnerError.
        :param message: The message of this JobInnerError.
        :param resolution: The resolution of this JobInnerError.
        :param severity: The severity of this JobInnerError.
        :param source: The source of this JobInnerError.
        """
        self.openapi_types = {
            'component': str,
            'description': str,
            'details': str,
            'diagnostic_code': int,
            'error_id': str,
            'help_link': str,
            'inner_error': JobInnerError,
            'internal_diagnostics': str,
            'message': str,
            'resolution': str,
            'severity': str,
            'source': str
        }

        self.attribute_map = {
            'component': 'component',
            'description': 'description',
            'details': 'details',
            'diagnostic_code': 'diagnosticCode',
            'error_id': 'errorId',
            'help_link': 'helpLink',
            'inner_error': 'innerError',
            'internal_diagnostics': 'internalDiagnostics',
            'message': 'message',
            'resolution': 'resolution',
            'severity': 'severity',
            'source': 'source'
        }

        self._component = component
        self._description = description
        self._details = details
        self._diagnostic_code = diagnostic_code
        self._error_id = error_id
        self._help_link = help_link
        self._inner_error = inner_error
        self._internal_diagnostics = internal_diagnostics
        self._message = message
        self._resolution = resolution
        self._severity = severity
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobInnerError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobInnerError of this JobInnerError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component(self):
        """Gets the component of this JobInnerError.

        the component that failed.

        :return: The component of this JobInnerError.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this JobInnerError.

        the component that failed.

        :param component: The component of this JobInnerError.
        :type component: str
        """

        self._component = component

    @property
    def description(self):
        """Gets the description of this JobInnerError.

        the error message description

        :return: The description of this JobInnerError.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JobInnerError.

        the error message description

        :param description: The description of this JobInnerError.
        :type description: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this JobInnerError.

        the details of the error message.

        :return: The details of this JobInnerError.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this JobInnerError.

        the details of the error message.

        :param details: The details of this JobInnerError.
        :type details: str
        """

        self._details = details

    @property
    def diagnostic_code(self):
        """Gets the diagnostic_code of this JobInnerError.

        the diagnostic error code.

        :return: The diagnostic_code of this JobInnerError.
        :rtype: int
        """
        return self._diagnostic_code

    @diagnostic_code.setter
    def diagnostic_code(self, diagnostic_code):
        """Sets the diagnostic_code of this JobInnerError.

        the diagnostic error code.

        :param diagnostic_code: The diagnostic_code of this JobInnerError.
        :type diagnostic_code: int
        """

        self._diagnostic_code = diagnostic_code

    @property
    def error_id(self):
        """Gets the error_id of this JobInnerError.

        the specific identifier for the type of error encountered in the job.

        :return: The error_id of this JobInnerError.
        :rtype: str
        """
        return self._error_id

    @error_id.setter
    def error_id(self, error_id):
        """Sets the error_id of this JobInnerError.

        the specific identifier for the type of error encountered in the job.

        :param error_id: The error_id of this JobInnerError.
        :type error_id: str
        """

        self._error_id = error_id

    @property
    def help_link(self):
        """Gets the help_link of this JobInnerError.

        the link to MSDN or Azure help for this type of error, if any.

        :return: The help_link of this JobInnerError.
        :rtype: str
        """
        return self._help_link

    @help_link.setter
    def help_link(self, help_link):
        """Sets the help_link of this JobInnerError.

        the link to MSDN or Azure help for this type of error, if any.

        :param help_link: The help_link of this JobInnerError.
        :type help_link: str
        """

        self._help_link = help_link

    @property
    def inner_error(self):
        """Gets the inner_error of this JobInnerError.


        :return: The inner_error of this JobInnerError.
        :rtype: JobInnerError
        """
        return self._inner_error

    @inner_error.setter
    def inner_error(self, inner_error):
        """Sets the inner_error of this JobInnerError.


        :param inner_error: The inner_error of this JobInnerError.
        :type inner_error: JobInnerError
        """

        self._inner_error = inner_error

    @property
    def internal_diagnostics(self):
        """Gets the internal_diagnostics of this JobInnerError.

        the internal diagnostic stack trace if the user requesting the job error details has sufficient permissions it will be retrieved, otherwise it will be empty.

        :return: The internal_diagnostics of this JobInnerError.
        :rtype: str
        """
        return self._internal_diagnostics

    @internal_diagnostics.setter
    def internal_diagnostics(self, internal_diagnostics):
        """Sets the internal_diagnostics of this JobInnerError.

        the internal diagnostic stack trace if the user requesting the job error details has sufficient permissions it will be retrieved, otherwise it will be empty.

        :param internal_diagnostics: The internal_diagnostics of this JobInnerError.
        :type internal_diagnostics: str
        """

        self._internal_diagnostics = internal_diagnostics

    @property
    def message(self):
        """Gets the message of this JobInnerError.

        the user friendly error message for the failure.

        :return: The message of this JobInnerError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this JobInnerError.

        the user friendly error message for the failure.

        :param message: The message of this JobInnerError.
        :type message: str
        """

        self._message = message

    @property
    def resolution(self):
        """Gets the resolution of this JobInnerError.

        the recommended resolution for the failure, if any.

        :return: The resolution of this JobInnerError.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this JobInnerError.

        the recommended resolution for the failure, if any.

        :param resolution: The resolution of this JobInnerError.
        :type resolution: str
        """

        self._resolution = resolution

    @property
    def severity(self):
        """Gets the severity of this JobInnerError.

        the severity level of the failure.

        :return: The severity of this JobInnerError.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this JobInnerError.

        the severity level of the failure.

        :param severity: The severity of this JobInnerError.
        :type severity: str
        """
        allowed_values = ["Warning", "Error", "Info", "SevereWarning", "Deprecated", "UserWarning"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def source(self):
        """Gets the source of this JobInnerError.

        the ultimate source of the failure (usually either SYSTEM or USER).

        :return: The source of this JobInnerError.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this JobInnerError.

        the ultimate source of the failure (usually either SYSTEM or USER).

        :param source: The source of this JobInnerError.
        :type source: str
        """

        self._source = source
