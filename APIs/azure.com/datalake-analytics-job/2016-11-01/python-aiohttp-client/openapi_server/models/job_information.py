# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_error_details import JobErrorDetails
from openapi_server.models.job_properties import JobProperties
from openapi_server.models.job_relationship_properties import JobRelationshipProperties
from openapi_server.models.job_state_audit_record import JobStateAuditRecord
from openapi_server import util


class JobInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: List[JobErrorDetails]=None, properties: JobProperties=None, state_audit_records: List[JobStateAuditRecord]=None, degree_of_parallelism: int=1, degree_of_parallelism_percent: float=None, end_time: datetime=None, hierarchy_queue_node: str=None, job_id: str=None, log_file_patterns: List[str]=None, log_folder: str=None, name: str=None, priority: int=None, related: JobRelationshipProperties=None, result: str=None, start_time: datetime=None, state: str=None, submit_time: datetime=None, submitter: str=None, type: str=None):
        """JobInformation - a model defined in OpenAPI

        :param error_message: The error_message of this JobInformation.
        :param properties: The properties of this JobInformation.
        :param state_audit_records: The state_audit_records of this JobInformation.
        :param degree_of_parallelism: The degree_of_parallelism of this JobInformation.
        :param degree_of_parallelism_percent: The degree_of_parallelism_percent of this JobInformation.
        :param end_time: The end_time of this JobInformation.
        :param hierarchy_queue_node: The hierarchy_queue_node of this JobInformation.
        :param job_id: The job_id of this JobInformation.
        :param log_file_patterns: The log_file_patterns of this JobInformation.
        :param log_folder: The log_folder of this JobInformation.
        :param name: The name of this JobInformation.
        :param priority: The priority of this JobInformation.
        :param related: The related of this JobInformation.
        :param result: The result of this JobInformation.
        :param start_time: The start_time of this JobInformation.
        :param state: The state of this JobInformation.
        :param submit_time: The submit_time of this JobInformation.
        :param submitter: The submitter of this JobInformation.
        :param type: The type of this JobInformation.
        """
        self.openapi_types = {
            'error_message': List[JobErrorDetails],
            'properties': JobProperties,
            'state_audit_records': List[JobStateAuditRecord],
            'degree_of_parallelism': int,
            'degree_of_parallelism_percent': float,
            'end_time': datetime,
            'hierarchy_queue_node': str,
            'job_id': str,
            'log_file_patterns': List[str],
            'log_folder': str,
            'name': str,
            'priority': int,
            'related': JobRelationshipProperties,
            'result': str,
            'start_time': datetime,
            'state': str,
            'submit_time': datetime,
            'submitter': str,
            'type': str
        }

        self.attribute_map = {
            'error_message': 'errorMessage',
            'properties': 'properties',
            'state_audit_records': 'stateAuditRecords',
            'degree_of_parallelism': 'degreeOfParallelism',
            'degree_of_parallelism_percent': 'degreeOfParallelismPercent',
            'end_time': 'endTime',
            'hierarchy_queue_node': 'hierarchyQueueNode',
            'job_id': 'jobId',
            'log_file_patterns': 'logFilePatterns',
            'log_folder': 'logFolder',
            'name': 'name',
            'priority': 'priority',
            'related': 'related',
            'result': 'result',
            'start_time': 'startTime',
            'state': 'state',
            'submit_time': 'submitTime',
            'submitter': 'submitter',
            'type': 'type'
        }

        self._error_message = error_message
        self._properties = properties
        self._state_audit_records = state_audit_records
        self._degree_of_parallelism = degree_of_parallelism
        self._degree_of_parallelism_percent = degree_of_parallelism_percent
        self._end_time = end_time
        self._hierarchy_queue_node = hierarchy_queue_node
        self._job_id = job_id
        self._log_file_patterns = log_file_patterns
        self._log_folder = log_folder
        self._name = name
        self._priority = priority
        self._related = related
        self._result = result
        self._start_time = start_time
        self._state = state
        self._submit_time = submit_time
        self._submitter = submitter
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobInformation of this JobInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this JobInformation.

        the error message details for the job, if the job failed.

        :return: The error_message of this JobInformation.
        :rtype: List[JobErrorDetails]
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this JobInformation.

        the error message details for the job, if the job failed.

        :param error_message: The error_message of this JobInformation.
        :type error_message: List[JobErrorDetails]
        """

        self._error_message = error_message

    @property
    def properties(self):
        """Gets the properties of this JobInformation.


        :return: The properties of this JobInformation.
        :rtype: JobProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this JobInformation.


        :param properties: The properties of this JobInformation.
        :type properties: JobProperties
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def state_audit_records(self):
        """Gets the state_audit_records of this JobInformation.

        the job state audit records, indicating when various operations have been performed on this job.

        :return: The state_audit_records of this JobInformation.
        :rtype: List[JobStateAuditRecord]
        """
        return self._state_audit_records

    @state_audit_records.setter
    def state_audit_records(self, state_audit_records):
        """Sets the state_audit_records of this JobInformation.

        the job state audit records, indicating when various operations have been performed on this job.

        :param state_audit_records: The state_audit_records of this JobInformation.
        :type state_audit_records: List[JobStateAuditRecord]
        """

        self._state_audit_records = state_audit_records

    @property
    def degree_of_parallelism(self):
        """Gets the degree_of_parallelism of this JobInformation.

        the degree of parallelism used for this job.

        :return: The degree_of_parallelism of this JobInformation.
        :rtype: int
        """
        return self._degree_of_parallelism

    @degree_of_parallelism.setter
    def degree_of_parallelism(self, degree_of_parallelism):
        """Sets the degree_of_parallelism of this JobInformation.

        the degree of parallelism used for this job.

        :param degree_of_parallelism: The degree_of_parallelism of this JobInformation.
        :type degree_of_parallelism: int
        """

        self._degree_of_parallelism = degree_of_parallelism

    @property
    def degree_of_parallelism_percent(self):
        """Gets the degree_of_parallelism_percent of this JobInformation.

        the degree of parallelism in percentage used for this job.

        :return: The degree_of_parallelism_percent of this JobInformation.
        :rtype: float
        """
        return self._degree_of_parallelism_percent

    @degree_of_parallelism_percent.setter
    def degree_of_parallelism_percent(self, degree_of_parallelism_percent):
        """Sets the degree_of_parallelism_percent of this JobInformation.

        the degree of parallelism in percentage used for this job.

        :param degree_of_parallelism_percent: The degree_of_parallelism_percent of this JobInformation.
        :type degree_of_parallelism_percent: float
        """

        self._degree_of_parallelism_percent = degree_of_parallelism_percent

    @property
    def end_time(self):
        """Gets the end_time of this JobInformation.

        the completion time of the job.

        :return: The end_time of this JobInformation.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobInformation.

        the completion time of the job.

        :param end_time: The end_time of this JobInformation.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def hierarchy_queue_node(self):
        """Gets the hierarchy_queue_node of this JobInformation.

        the name of hierarchy queue node this job is assigned to, null if job has not been assigned yet or the account doesn't have hierarchy queue.

        :return: The hierarchy_queue_node of this JobInformation.
        :rtype: str
        """
        return self._hierarchy_queue_node

    @hierarchy_queue_node.setter
    def hierarchy_queue_node(self, hierarchy_queue_node):
        """Sets the hierarchy_queue_node of this JobInformation.

        the name of hierarchy queue node this job is assigned to, null if job has not been assigned yet or the account doesn't have hierarchy queue.

        :param hierarchy_queue_node: The hierarchy_queue_node of this JobInformation.
        :type hierarchy_queue_node: str
        """

        self._hierarchy_queue_node = hierarchy_queue_node

    @property
    def job_id(self):
        """Gets the job_id of this JobInformation.

        the job's unique identifier (a GUID).

        :return: The job_id of this JobInformation.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobInformation.

        the job's unique identifier (a GUID).

        :param job_id: The job_id of this JobInformation.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def log_file_patterns(self):
        """Gets the log_file_patterns of this JobInformation.

        the list of log file name patterns to find in the logFolder. '*' is the only matching character allowed. Example format: jobExecution*.log or *mylog*.txt

        :return: The log_file_patterns of this JobInformation.
        :rtype: List[str]
        """
        return self._log_file_patterns

    @log_file_patterns.setter
    def log_file_patterns(self, log_file_patterns):
        """Sets the log_file_patterns of this JobInformation.

        the list of log file name patterns to find in the logFolder. '*' is the only matching character allowed. Example format: jobExecution*.log or *mylog*.txt

        :param log_file_patterns: The log_file_patterns of this JobInformation.
        :type log_file_patterns: List[str]
        """

        self._log_file_patterns = log_file_patterns

    @property
    def log_folder(self):
        """Gets the log_folder of this JobInformation.

        the log folder path to use in the following format: adl://<accountName>.azuredatalakestore.net/system/jobservice/jobs/Usql/2016/03/13/17/18/5fe51957-93bc-4de0-8ddc-c5a4753b068b/logs/.

        :return: The log_folder of this JobInformation.
        :rtype: str
        """
        return self._log_folder

    @log_folder.setter
    def log_folder(self, log_folder):
        """Sets the log_folder of this JobInformation.

        the log folder path to use in the following format: adl://<accountName>.azuredatalakestore.net/system/jobservice/jobs/Usql/2016/03/13/17/18/5fe51957-93bc-4de0-8ddc-c5a4753b068b/logs/.

        :param log_folder: The log_folder of this JobInformation.
        :type log_folder: str
        """

        self._log_folder = log_folder

    @property
    def name(self):
        """Gets the name of this JobInformation.

        the friendly name of the job.

        :return: The name of this JobInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobInformation.

        the friendly name of the job.

        :param name: The name of this JobInformation.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this JobInformation.

        the priority value for the current job. Lower numbers have a higher priority. By default, a job has a priority of 1000. This must be greater than 0.

        :return: The priority of this JobInformation.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this JobInformation.

        the priority value for the current job. Lower numbers have a higher priority. By default, a job has a priority of 1000. This must be greater than 0.

        :param priority: The priority of this JobInformation.
        :type priority: int
        """

        self._priority = priority

    @property
    def related(self):
        """Gets the related of this JobInformation.


        :return: The related of this JobInformation.
        :rtype: JobRelationshipProperties
        """
        return self._related

    @related.setter
    def related(self, related):
        """Sets the related of this JobInformation.


        :param related: The related of this JobInformation.
        :type related: JobRelationshipProperties
        """

        self._related = related

    @property
    def result(self):
        """Gets the result of this JobInformation.

        the result of job execution or the current result of the running job.

        :return: The result of this JobInformation.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this JobInformation.

        the result of job execution or the current result of the running job.

        :param result: The result of this JobInformation.
        :type result: str
        """
        allowed_values = ["None", "Succeeded", "Cancelled", "Failed"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def start_time(self):
        """Gets the start_time of this JobInformation.

        the start time of the job.

        :return: The start_time of this JobInformation.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobInformation.

        the start time of the job.

        :param start_time: The start_time of this JobInformation.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this JobInformation.

        the job state. When the job is in the Ended state, refer to Result and ErrorMessage for details.

        :return: The state of this JobInformation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobInformation.

        the job state. When the job is in the Ended state, refer to Result and ErrorMessage for details.

        :param state: The state of this JobInformation.
        :type state: str
        """
        allowed_values = ["Accepted", "Compiling", "Ended", "New", "Queued", "Running", "Scheduling", "Starting", "Paused", "WaitingForCapacity"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def submit_time(self):
        """Gets the submit_time of this JobInformation.

        the time the job was submitted to the service.

        :return: The submit_time of this JobInformation.
        :rtype: datetime
        """
        return self._submit_time

    @submit_time.setter
    def submit_time(self, submit_time):
        """Sets the submit_time of this JobInformation.

        the time the job was submitted to the service.

        :param submit_time: The submit_time of this JobInformation.
        :type submit_time: datetime
        """

        self._submit_time = submit_time

    @property
    def submitter(self):
        """Gets the submitter of this JobInformation.

        the user or account that submitted the job.

        :return: The submitter of this JobInformation.
        :rtype: str
        """
        return self._submitter

    @submitter.setter
    def submitter(self, submitter):
        """Sets the submitter of this JobInformation.

        the user or account that submitted the job.

        :param submitter: The submitter of this JobInformation.
        :type submitter: str
        """

        self._submitter = submitter

    @property
    def type(self):
        """Gets the type of this JobInformation.

        the job type of the current job (Hive or USql).

        :return: The type of this JobInformation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobInformation.

        the job type of the current job (Hive or USql).

        :param type: The type of this JobInformation.
        :type type: str
        """
        allowed_values = ["USql", "Hive"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
