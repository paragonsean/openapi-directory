# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Diagnostics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_number: int=None, end: int=None, line_number: int=None, message: str=None, severity: str=None, start: int=None):
        """Diagnostics - a model defined in OpenAPI

        :param column_number: The column_number of this Diagnostics.
        :param end: The end of this Diagnostics.
        :param line_number: The line_number of this Diagnostics.
        :param message: The message of this Diagnostics.
        :param severity: The severity of this Diagnostics.
        :param start: The start of this Diagnostics.
        """
        self.openapi_types = {
            'column_number': int,
            'end': int,
            'line_number': int,
            'message': str,
            'severity': str,
            'start': int
        }

        self.attribute_map = {
            'column_number': 'columnNumber',
            'end': 'end',
            'line_number': 'lineNumber',
            'message': 'message',
            'severity': 'severity',
            'start': 'start'
        }

        self._column_number = column_number
        self._end = end
        self._line_number = line_number
        self._message = message
        self._severity = severity
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Diagnostics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Diagnostics of this Diagnostics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_number(self):
        """Gets the column_number of this Diagnostics.

        the column where the error occurred.

        :return: The column_number of this Diagnostics.
        :rtype: int
        """
        return self._column_number

    @column_number.setter
    def column_number(self, column_number):
        """Sets the column_number of this Diagnostics.

        the column where the error occurred.

        :param column_number: The column_number of this Diagnostics.
        :type column_number: int
        """

        self._column_number = column_number

    @property
    def end(self):
        """Gets the end of this Diagnostics.

        the ending index of the error.

        :return: The end of this Diagnostics.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Diagnostics.

        the ending index of the error.

        :param end: The end of this Diagnostics.
        :type end: int
        """

        self._end = end

    @property
    def line_number(self):
        """Gets the line_number of this Diagnostics.

        the line number the error occurred on.

        :return: The line_number of this Diagnostics.
        :rtype: int
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """Sets the line_number of this Diagnostics.

        the line number the error occurred on.

        :param line_number: The line_number of this Diagnostics.
        :type line_number: int
        """

        self._line_number = line_number

    @property
    def message(self):
        """Gets the message of this Diagnostics.

        the error message.

        :return: The message of this Diagnostics.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Diagnostics.

        the error message.

        :param message: The message of this Diagnostics.
        :type message: str
        """

        self._message = message

    @property
    def severity(self):
        """Gets the severity of this Diagnostics.

        the severity of the error.

        :return: The severity of this Diagnostics.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Diagnostics.

        the severity of the error.

        :param severity: The severity of this Diagnostics.
        :type severity: str
        """
        allowed_values = ["Warning", "Error", "Info", "SevereWarning", "Deprecated", "UserWarning"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def start(self):
        """Gets the start of this Diagnostics.

        the starting index of the error.

        :return: The start of this Diagnostics.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Diagnostics.

        the starting index of the error.

        :param start: The start of this Diagnostics.
        :type start: int
        """

        self._start = start
