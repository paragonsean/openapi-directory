# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.output_file_destination import OutputFileDestination
from openapi_server.models.output_file_upload_options import OutputFileUploadOptions
from openapi_server import util


class OutputFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: OutputFileDestination=None, file_pattern: str=None, upload_options: OutputFileUploadOptions=None):
        """OutputFile - a model defined in OpenAPI

        :param destination: The destination of this OutputFile.
        :param file_pattern: The file_pattern of this OutputFile.
        :param upload_options: The upload_options of this OutputFile.
        """
        self.openapi_types = {
            'destination': OutputFileDestination,
            'file_pattern': str,
            'upload_options': OutputFileUploadOptions
        }

        self.attribute_map = {
            'destination': 'destination',
            'file_pattern': 'filePattern',
            'upload_options': 'uploadOptions'
        }

        self._destination = destination
        self._file_pattern = file_pattern
        self._upload_options = upload_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputFile of this OutputFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this OutputFile.


        :return: The destination of this OutputFile.
        :rtype: OutputFileDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this OutputFile.


        :param destination: The destination of this OutputFile.
        :type destination: OutputFileDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def file_pattern(self):
        """Gets the file_pattern of this OutputFile.

        Both relative and absolute paths are supported. Relative paths are relative to the task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with \".\" it is ignored by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple example: **\\*.txt matches any file that does not start in '.' and ends with .txt in the task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*] would match a file named abc*). Note that both \\ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.

        :return: The file_pattern of this OutputFile.
        :rtype: str
        """
        return self._file_pattern

    @file_pattern.setter
    def file_pattern(self, file_pattern):
        """Sets the file_pattern of this OutputFile.

        Both relative and absolute paths are supported. Relative paths are relative to the task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with \".\" it is ignored by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple example: **\\*.txt matches any file that does not start in '.' and ends with .txt in the task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*] would match a file named abc*). Note that both \\ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.

        :param file_pattern: The file_pattern of this OutputFile.
        :type file_pattern: str
        """
        if file_pattern is None:
            raise ValueError("Invalid value for `file_pattern`, must not be `None`")

        self._file_pattern = file_pattern

    @property
    def upload_options(self):
        """Gets the upload_options of this OutputFile.


        :return: The upload_options of this OutputFile.
        :rtype: OutputFileUploadOptions
        """
        return self._upload_options

    @upload_options.setter
    def upload_options(self, upload_options):
        """Sets the upload_options of this OutputFile.


        :param upload_options: The upload_options of this OutputFile.
        :type upload_options: OutputFileUploadOptions
        """
        if upload_options is None:
            raise ValueError("Invalid value for `upload_options`, must not be `None`")

        self._upload_options = upload_options
