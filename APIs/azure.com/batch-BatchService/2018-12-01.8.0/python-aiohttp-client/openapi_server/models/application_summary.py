# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, id: str=None, versions: List[str]=None):
        """ApplicationSummary - a model defined in OpenAPI

        :param display_name: The display_name of this ApplicationSummary.
        :param id: The id of this ApplicationSummary.
        :param versions: The versions of this ApplicationSummary.
        """
        self.openapi_types = {
            'display_name': str,
            'id': str,
            'versions': List[str]
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'id': 'id',
            'versions': 'versions'
        }

        self._display_name = display_name
        self._id = id
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationSummary of this ApplicationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this ApplicationSummary.


        :return: The display_name of this ApplicationSummary.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApplicationSummary.


        :param display_name: The display_name of this ApplicationSummary.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this ApplicationSummary.


        :return: The id of this ApplicationSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationSummary.


        :param id: The id of this ApplicationSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def versions(self):
        """Gets the versions of this ApplicationSummary.


        :return: The versions of this ApplicationSummary.
        :rtype: List[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this ApplicationSummary.


        :param versions: The versions of this ApplicationSummary.
        :type versions: List[str]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")

        self._versions = versions
