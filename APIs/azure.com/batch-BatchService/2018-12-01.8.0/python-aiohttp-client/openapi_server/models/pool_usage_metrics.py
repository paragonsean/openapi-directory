# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PoolUsageMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, pool_id: str=None, start_time: datetime=None, total_core_hours: float=None, vm_size: str=None):
        """PoolUsageMetrics - a model defined in OpenAPI

        :param end_time: The end_time of this PoolUsageMetrics.
        :param pool_id: The pool_id of this PoolUsageMetrics.
        :param start_time: The start_time of this PoolUsageMetrics.
        :param total_core_hours: The total_core_hours of this PoolUsageMetrics.
        :param vm_size: The vm_size of this PoolUsageMetrics.
        """
        self.openapi_types = {
            'end_time': datetime,
            'pool_id': str,
            'start_time': datetime,
            'total_core_hours': float,
            'vm_size': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'pool_id': 'poolId',
            'start_time': 'startTime',
            'total_core_hours': 'totalCoreHours',
            'vm_size': 'vmSize'
        }

        self._end_time = end_time
        self._pool_id = pool_id
        self._start_time = start_time
        self._total_core_hours = total_core_hours
        self._vm_size = vm_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PoolUsageMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PoolUsageMetrics of this PoolUsageMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this PoolUsageMetrics.


        :return: The end_time of this PoolUsageMetrics.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this PoolUsageMetrics.


        :param end_time: The end_time of this PoolUsageMetrics.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def pool_id(self):
        """Gets the pool_id of this PoolUsageMetrics.


        :return: The pool_id of this PoolUsageMetrics.
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this PoolUsageMetrics.


        :param pool_id: The pool_id of this PoolUsageMetrics.
        :type pool_id: str
        """
        if pool_id is None:
            raise ValueError("Invalid value for `pool_id`, must not be `None`")

        self._pool_id = pool_id

    @property
    def start_time(self):
        """Gets the start_time of this PoolUsageMetrics.


        :return: The start_time of this PoolUsageMetrics.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PoolUsageMetrics.


        :param start_time: The start_time of this PoolUsageMetrics.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def total_core_hours(self):
        """Gets the total_core_hours of this PoolUsageMetrics.


        :return: The total_core_hours of this PoolUsageMetrics.
        :rtype: float
        """
        return self._total_core_hours

    @total_core_hours.setter
    def total_core_hours(self, total_core_hours):
        """Sets the total_core_hours of this PoolUsageMetrics.


        :param total_core_hours: The total_core_hours of this PoolUsageMetrics.
        :type total_core_hours: float
        """
        if total_core_hours is None:
            raise ValueError("Invalid value for `total_core_hours`, must not be `None`")

        self._total_core_hours = total_core_hours

    @property
    def vm_size(self):
        """Gets the vm_size of this PoolUsageMetrics.

        For information about available sizes of virtual machines in pools, see Choose a VM size for compute nodes in an Azure Batch pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).

        :return: The vm_size of this PoolUsageMetrics.
        :rtype: str
        """
        return self._vm_size

    @vm_size.setter
    def vm_size(self, vm_size):
        """Sets the vm_size of this PoolUsageMetrics.

        For information about available sizes of virtual machines in pools, see Choose a VM size for compute nodes in an Azure Batch pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).

        :param vm_size: The vm_size of this PoolUsageMetrics.
        :type vm_size: str
        """
        if vm_size is None:
            raise ValueError("Invalid value for `vm_size`, must not be `None`")

        self._vm_size = vm_size
