# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_error import BatchError
from openapi_server import util


class TaskAddResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, e_tag: str=None, error: BatchError=None, last_modified: datetime=None, location: str=None, status: str=None, task_id: str=None):
        """TaskAddResult - a model defined in OpenAPI

        :param e_tag: The e_tag of this TaskAddResult.
        :param error: The error of this TaskAddResult.
        :param last_modified: The last_modified of this TaskAddResult.
        :param location: The location of this TaskAddResult.
        :param status: The status of this TaskAddResult.
        :param task_id: The task_id of this TaskAddResult.
        """
        self.openapi_types = {
            'e_tag': str,
            'error': BatchError,
            'last_modified': datetime,
            'location': str,
            'status': str,
            'task_id': str
        }

        self.attribute_map = {
            'e_tag': 'eTag',
            'error': 'error',
            'last_modified': 'lastModified',
            'location': 'location',
            'status': 'status',
            'task_id': 'taskId'
        }

        self._e_tag = e_tag
        self._error = error
        self._last_modified = last_modified
        self._location = location
        self._status = status
        self._task_id = task_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskAddResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskAddResult of this TaskAddResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def e_tag(self):
        """Gets the e_tag of this TaskAddResult.

        You can use this to detect whether the task has changed between requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take effect only if nobody else has modified the job in the meantime.

        :return: The e_tag of this TaskAddResult.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this TaskAddResult.

        You can use this to detect whether the task has changed between requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take effect only if nobody else has modified the job in the meantime.

        :param e_tag: The e_tag of this TaskAddResult.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def error(self):
        """Gets the error of this TaskAddResult.


        :return: The error of this TaskAddResult.
        :rtype: BatchError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TaskAddResult.


        :param error: The error of this TaskAddResult.
        :type error: BatchError
        """

        self._error = error

    @property
    def last_modified(self):
        """Gets the last_modified of this TaskAddResult.


        :return: The last_modified of this TaskAddResult.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this TaskAddResult.


        :param last_modified: The last_modified of this TaskAddResult.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def location(self):
        """Gets the location of this TaskAddResult.


        :return: The location of this TaskAddResult.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this TaskAddResult.


        :param location: The location of this TaskAddResult.
        :type location: str
        """

        self._location = location

    @property
    def status(self):
        """Gets the status of this TaskAddResult.


        :return: The status of this TaskAddResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskAddResult.


        :param status: The status of this TaskAddResult.
        :type status: str
        """
        allowed_values = ["success", "clienterror", "servererror"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def task_id(self):
        """Gets the task_id of this TaskAddResult.


        :return: The task_id of this TaskAddResult.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskAddResult.


        :param task_id: The task_id of this TaskAddResult.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")

        self._task_id = task_id
