# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pool_endpoint_configuration import PoolEndpointConfiguration
from openapi_server import util


class NetworkConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dynamic_v_net_assignment_scope: str=None, endpoint_configuration: PoolEndpointConfiguration=None, subnet_id: str=None):
        """NetworkConfiguration - a model defined in OpenAPI

        :param dynamic_v_net_assignment_scope: The dynamic_v_net_assignment_scope of this NetworkConfiguration.
        :param endpoint_configuration: The endpoint_configuration of this NetworkConfiguration.
        :param subnet_id: The subnet_id of this NetworkConfiguration.
        """
        self.openapi_types = {
            'dynamic_v_net_assignment_scope': str,
            'endpoint_configuration': PoolEndpointConfiguration,
            'subnet_id': str
        }

        self.attribute_map = {
            'dynamic_v_net_assignment_scope': 'dynamicVNetAssignmentScope',
            'endpoint_configuration': 'endpointConfiguration',
            'subnet_id': 'subnetId'
        }

        self._dynamic_v_net_assignment_scope = dynamic_v_net_assignment_scope
        self._endpoint_configuration = endpoint_configuration
        self._subnet_id = subnet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkConfiguration of this NetworkConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dynamic_v_net_assignment_scope(self):
        """Gets the dynamic_v_net_assignment_scope of this NetworkConfiguration.


        :return: The dynamic_v_net_assignment_scope of this NetworkConfiguration.
        :rtype: str
        """
        return self._dynamic_v_net_assignment_scope

    @dynamic_v_net_assignment_scope.setter
    def dynamic_v_net_assignment_scope(self, dynamic_v_net_assignment_scope):
        """Sets the dynamic_v_net_assignment_scope of this NetworkConfiguration.


        :param dynamic_v_net_assignment_scope: The dynamic_v_net_assignment_scope of this NetworkConfiguration.
        :type dynamic_v_net_assignment_scope: str
        """
        allowed_values = ["none", "job"]  # noqa: E501
        if dynamic_v_net_assignment_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `dynamic_v_net_assignment_scope` ({0}), must be one of {1}"
                .format(dynamic_v_net_assignment_scope, allowed_values)
            )

        self._dynamic_v_net_assignment_scope = dynamic_v_net_assignment_scope

    @property
    def endpoint_configuration(self):
        """Gets the endpoint_configuration of this NetworkConfiguration.


        :return: The endpoint_configuration of this NetworkConfiguration.
        :rtype: PoolEndpointConfiguration
        """
        return self._endpoint_configuration

    @endpoint_configuration.setter
    def endpoint_configuration(self, endpoint_configuration):
        """Sets the endpoint_configuration of this NetworkConfiguration.


        :param endpoint_configuration: The endpoint_configuration of this NetworkConfiguration.
        :type endpoint_configuration: PoolEndpointConfiguration
        """

        self._endpoint_configuration = endpoint_configuration

    @property
    def subnet_id(self):
        """Gets the subnet_id of this NetworkConfiguration.

        This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}. The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. For pools created with virtualMachineConfiguration only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported, but for pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. For more details, see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration

        :return: The subnet_id of this NetworkConfiguration.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this NetworkConfiguration.

        This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}. The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. For pools created with virtualMachineConfiguration only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported, but for pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. For more details, see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration

        :param subnet_id: The subnet_id of this NetworkConfiguration.
        :type subnet_id: str
        """

        self._subnet_id = subnet_id
