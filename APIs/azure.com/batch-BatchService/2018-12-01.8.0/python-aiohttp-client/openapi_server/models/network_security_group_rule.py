# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkSecurityGroupRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, priority: int=None, source_address_prefix: str=None):
        """NetworkSecurityGroupRule - a model defined in OpenAPI

        :param access: The access of this NetworkSecurityGroupRule.
        :param priority: The priority of this NetworkSecurityGroupRule.
        :param source_address_prefix: The source_address_prefix of this NetworkSecurityGroupRule.
        """
        self.openapi_types = {
            'access': str,
            'priority': int,
            'source_address_prefix': str
        }

        self.attribute_map = {
            'access': 'access',
            'priority': 'priority',
            'source_address_prefix': 'sourceAddressPrefix'
        }

        self._access = access
        self._priority = priority
        self._source_address_prefix = source_address_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkSecurityGroupRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkSecurityGroupRule of this NetworkSecurityGroupRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this NetworkSecurityGroupRule.


        :return: The access of this NetworkSecurityGroupRule.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this NetworkSecurityGroupRule.


        :param access: The access of this NetworkSecurityGroupRule.
        :type access: str
        """
        allowed_values = ["allow", "deny"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def priority(self):
        """Gets the priority of this NetworkSecurityGroupRule.

        Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 3500. If any reserved or duplicate values are provided the request fails with HTTP status code 400.

        :return: The priority of this NetworkSecurityGroupRule.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this NetworkSecurityGroupRule.

        Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 3500. If any reserved or duplicate values are provided the request fails with HTTP status code 400.

        :param priority: The priority of this NetworkSecurityGroupRule.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def source_address_prefix(self):
        """Gets the source_address_prefix of this NetworkSecurityGroupRule.

        Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.

        :return: The source_address_prefix of this NetworkSecurityGroupRule.
        :rtype: str
        """
        return self._source_address_prefix

    @source_address_prefix.setter
    def source_address_prefix(self, source_address_prefix):
        """Sets the source_address_prefix of this NetworkSecurityGroupRule.

        Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.

        :param source_address_prefix: The source_address_prefix of this NetworkSecurityGroupRule.
        :type source_address_prefix: str
        """
        if source_address_prefix is None:
            raise ValueError("Invalid value for `source_address_prefix`, must not be `None`")

        self._source_address_prefix = source_address_prefix
