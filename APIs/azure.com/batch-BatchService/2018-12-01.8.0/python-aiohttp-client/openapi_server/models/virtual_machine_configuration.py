# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_configuration import ContainerConfiguration
from openapi_server.models.data_disk import DataDisk
from openapi_server.models.image_reference import ImageReference
from openapi_server.models.windows_configuration import WindowsConfiguration
from openapi_server import util


class VirtualMachineConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_configuration: ContainerConfiguration=None, data_disks: List[DataDisk]=None, image_reference: ImageReference=None, license_type: str=None, node_agent_skuid: str=None, windows_configuration: WindowsConfiguration=None):
        """VirtualMachineConfiguration - a model defined in OpenAPI

        :param container_configuration: The container_configuration of this VirtualMachineConfiguration.
        :param data_disks: The data_disks of this VirtualMachineConfiguration.
        :param image_reference: The image_reference of this VirtualMachineConfiguration.
        :param license_type: The license_type of this VirtualMachineConfiguration.
        :param node_agent_skuid: The node_agent_skuid of this VirtualMachineConfiguration.
        :param windows_configuration: The windows_configuration of this VirtualMachineConfiguration.
        """
        self.openapi_types = {
            'container_configuration': ContainerConfiguration,
            'data_disks': List[DataDisk],
            'image_reference': ImageReference,
            'license_type': str,
            'node_agent_skuid': str,
            'windows_configuration': WindowsConfiguration
        }

        self.attribute_map = {
            'container_configuration': 'containerConfiguration',
            'data_disks': 'dataDisks',
            'image_reference': 'imageReference',
            'license_type': 'licenseType',
            'node_agent_skuid': 'nodeAgentSKUId',
            'windows_configuration': 'windowsConfiguration'
        }

        self._container_configuration = container_configuration
        self._data_disks = data_disks
        self._image_reference = image_reference
        self._license_type = license_type
        self._node_agent_skuid = node_agent_skuid
        self._windows_configuration = windows_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineConfiguration of this VirtualMachineConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_configuration(self):
        """Gets the container_configuration of this VirtualMachineConfiguration.


        :return: The container_configuration of this VirtualMachineConfiguration.
        :rtype: ContainerConfiguration
        """
        return self._container_configuration

    @container_configuration.setter
    def container_configuration(self, container_configuration):
        """Sets the container_configuration of this VirtualMachineConfiguration.


        :param container_configuration: The container_configuration of this VirtualMachineConfiguration.
        :type container_configuration: ContainerConfiguration
        """

        self._container_configuration = container_configuration

    @property
    def data_disks(self):
        """Gets the data_disks of this VirtualMachineConfiguration.

        This property must be specified if the compute nodes in the pool need to have empty data disks attached to them. This cannot be updated. Each node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the node is removed from the pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.

        :return: The data_disks of this VirtualMachineConfiguration.
        :rtype: List[DataDisk]
        """
        return self._data_disks

    @data_disks.setter
    def data_disks(self, data_disks):
        """Sets the data_disks of this VirtualMachineConfiguration.

        This property must be specified if the compute nodes in the pool need to have empty data disks attached to them. This cannot be updated. Each node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the node is removed from the pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.

        :param data_disks: The data_disks of this VirtualMachineConfiguration.
        :type data_disks: List[DataDisk]
        """

        self._data_disks = data_disks

    @property
    def image_reference(self):
        """Gets the image_reference of this VirtualMachineConfiguration.


        :return: The image_reference of this VirtualMachineConfiguration.
        :rtype: ImageReference
        """
        return self._image_reference

    @image_reference.setter
    def image_reference(self, image_reference):
        """Sets the image_reference of this VirtualMachineConfiguration.


        :param image_reference: The image_reference of this VirtualMachineConfiguration.
        :type image_reference: ImageReference
        """
        if image_reference is None:
            raise ValueError("Invalid value for `image_reference`, must not be `None`")

        self._image_reference = image_reference

    @property
    def license_type(self):
        """Gets the license_type of this VirtualMachineConfiguration.

        This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:   Windows_Server - The on-premises license is for Windows Server.  Windows_Client - The on-premises license is for Windows Client. 

        :return: The license_type of this VirtualMachineConfiguration.
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this VirtualMachineConfiguration.

        This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:   Windows_Server - The on-premises license is for Windows Server.  Windows_Client - The on-premises license is for Windows Client. 

        :param license_type: The license_type of this VirtualMachineConfiguration.
        :type license_type: str
        """

        self._license_type = license_type

    @property
    def node_agent_skuid(self):
        """Gets the node_agent_skuid of this VirtualMachineConfiguration.

        The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.

        :return: The node_agent_skuid of this VirtualMachineConfiguration.
        :rtype: str
        """
        return self._node_agent_skuid

    @node_agent_skuid.setter
    def node_agent_skuid(self, node_agent_skuid):
        """Sets the node_agent_skuid of this VirtualMachineConfiguration.

        The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.

        :param node_agent_skuid: The node_agent_skuid of this VirtualMachineConfiguration.
        :type node_agent_skuid: str
        """
        if node_agent_skuid is None:
            raise ValueError("Invalid value for `node_agent_skuid`, must not be `None`")

        self._node_agent_skuid = node_agent_skuid

    @property
    def windows_configuration(self):
        """Gets the windows_configuration of this VirtualMachineConfiguration.


        :return: The windows_configuration of this VirtualMachineConfiguration.
        :rtype: WindowsConfiguration
        """
        return self._windows_configuration

    @windows_configuration.setter
    def windows_configuration(self, windows_configuration):
        """Sets the windows_configuration of this VirtualMachineConfiguration.


        :param windows_configuration: The windows_configuration of this VirtualMachineConfiguration.
        :type windows_configuration: WindowsConfiguration
        """

        self._windows_configuration = windows_configuration
