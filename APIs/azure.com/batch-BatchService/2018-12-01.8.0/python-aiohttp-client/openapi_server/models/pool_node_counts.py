# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_counts import NodeCounts
from openapi_server import util


class PoolNodeCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dedicated: NodeCounts=None, low_priority: NodeCounts=None, pool_id: str=None):
        """PoolNodeCounts - a model defined in OpenAPI

        :param dedicated: The dedicated of this PoolNodeCounts.
        :param low_priority: The low_priority of this PoolNodeCounts.
        :param pool_id: The pool_id of this PoolNodeCounts.
        """
        self.openapi_types = {
            'dedicated': NodeCounts,
            'low_priority': NodeCounts,
            'pool_id': str
        }

        self.attribute_map = {
            'dedicated': 'dedicated',
            'low_priority': 'lowPriority',
            'pool_id': 'poolId'
        }

        self._dedicated = dedicated
        self._low_priority = low_priority
        self._pool_id = pool_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PoolNodeCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PoolNodeCounts of this PoolNodeCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dedicated(self):
        """Gets the dedicated of this PoolNodeCounts.


        :return: The dedicated of this PoolNodeCounts.
        :rtype: NodeCounts
        """
        return self._dedicated

    @dedicated.setter
    def dedicated(self, dedicated):
        """Sets the dedicated of this PoolNodeCounts.


        :param dedicated: The dedicated of this PoolNodeCounts.
        :type dedicated: NodeCounts
        """

        self._dedicated = dedicated

    @property
    def low_priority(self):
        """Gets the low_priority of this PoolNodeCounts.


        :return: The low_priority of this PoolNodeCounts.
        :rtype: NodeCounts
        """
        return self._low_priority

    @low_priority.setter
    def low_priority(self, low_priority):
        """Sets the low_priority of this PoolNodeCounts.


        :param low_priority: The low_priority of this PoolNodeCounts.
        :type low_priority: NodeCounts
        """

        self._low_priority = low_priority

    @property
    def pool_id(self):
        """Gets the pool_id of this PoolNodeCounts.


        :return: The pool_id of this PoolNodeCounts.
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this PoolNodeCounts.


        :param pool_id: The pool_id of this PoolNodeCounts.
        :type pool_id: str
        """
        if pool_id is None:
            raise ValueError("Invalid value for `pool_id`, must not be `None`")

        self._pool_id = pool_id
