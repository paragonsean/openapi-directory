/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-12-01.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NodeCounts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:31.436898-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeCounts {
  public static final String SERIALIZED_NAME_CREATING = "creating";
  @SerializedName(SERIALIZED_NAME_CREATING)
  private Integer creating;

  public static final String SERIALIZED_NAME_IDLE = "idle";
  @SerializedName(SERIALIZED_NAME_IDLE)
  private Integer idle;

  public static final String SERIALIZED_NAME_LEAVING_POOL = "leavingPool";
  @SerializedName(SERIALIZED_NAME_LEAVING_POOL)
  private Integer leavingPool;

  public static final String SERIALIZED_NAME_OFFLINE = "offline";
  @SerializedName(SERIALIZED_NAME_OFFLINE)
  private Integer offline;

  public static final String SERIALIZED_NAME_PREEMPTED = "preempted";
  @SerializedName(SERIALIZED_NAME_PREEMPTED)
  private Integer preempted;

  public static final String SERIALIZED_NAME_REBOOTING = "rebooting";
  @SerializedName(SERIALIZED_NAME_REBOOTING)
  private Integer rebooting;

  public static final String SERIALIZED_NAME_REIMAGING = "reimaging";
  @SerializedName(SERIALIZED_NAME_REIMAGING)
  private Integer reimaging;

  public static final String SERIALIZED_NAME_RUNNING = "running";
  @SerializedName(SERIALIZED_NAME_RUNNING)
  private Integer running;

  public static final String SERIALIZED_NAME_START_TASK_FAILED = "startTaskFailed";
  @SerializedName(SERIALIZED_NAME_START_TASK_FAILED)
  private Integer startTaskFailed;

  public static final String SERIALIZED_NAME_STARTING = "starting";
  @SerializedName(SERIALIZED_NAME_STARTING)
  private Integer starting;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_UNKNOWN = "unknown";
  @SerializedName(SERIALIZED_NAME_UNKNOWN)
  private Integer unknown;

  public static final String SERIALIZED_NAME_UNUSABLE = "unusable";
  @SerializedName(SERIALIZED_NAME_UNUSABLE)
  private Integer unusable;

  public static final String SERIALIZED_NAME_WAITING_FOR_START_TASK = "waitingForStartTask";
  @SerializedName(SERIALIZED_NAME_WAITING_FOR_START_TASK)
  private Integer waitingForStartTask;

  public NodeCounts() {
  }

  public NodeCounts creating(Integer creating) {
    this.creating = creating;
    return this;
  }

  /**
   * Get creating
   * @return creating
   */
  @javax.annotation.Nonnull
  public Integer getCreating() {
    return creating;
  }

  public void setCreating(Integer creating) {
    this.creating = creating;
  }


  public NodeCounts idle(Integer idle) {
    this.idle = idle;
    return this;
  }

  /**
   * Get idle
   * @return idle
   */
  @javax.annotation.Nonnull
  public Integer getIdle() {
    return idle;
  }

  public void setIdle(Integer idle) {
    this.idle = idle;
  }


  public NodeCounts leavingPool(Integer leavingPool) {
    this.leavingPool = leavingPool;
    return this;
  }

  /**
   * Get leavingPool
   * @return leavingPool
   */
  @javax.annotation.Nonnull
  public Integer getLeavingPool() {
    return leavingPool;
  }

  public void setLeavingPool(Integer leavingPool) {
    this.leavingPool = leavingPool;
  }


  public NodeCounts offline(Integer offline) {
    this.offline = offline;
    return this;
  }

  /**
   * Get offline
   * @return offline
   */
  @javax.annotation.Nonnull
  public Integer getOffline() {
    return offline;
  }

  public void setOffline(Integer offline) {
    this.offline = offline;
  }


  public NodeCounts preempted(Integer preempted) {
    this.preempted = preempted;
    return this;
  }

  /**
   * Get preempted
   * @return preempted
   */
  @javax.annotation.Nonnull
  public Integer getPreempted() {
    return preempted;
  }

  public void setPreempted(Integer preempted) {
    this.preempted = preempted;
  }


  public NodeCounts rebooting(Integer rebooting) {
    this.rebooting = rebooting;
    return this;
  }

  /**
   * Get rebooting
   * @return rebooting
   */
  @javax.annotation.Nonnull
  public Integer getRebooting() {
    return rebooting;
  }

  public void setRebooting(Integer rebooting) {
    this.rebooting = rebooting;
  }


  public NodeCounts reimaging(Integer reimaging) {
    this.reimaging = reimaging;
    return this;
  }

  /**
   * Get reimaging
   * @return reimaging
   */
  @javax.annotation.Nonnull
  public Integer getReimaging() {
    return reimaging;
  }

  public void setReimaging(Integer reimaging) {
    this.reimaging = reimaging;
  }


  public NodeCounts running(Integer running) {
    this.running = running;
    return this;
  }

  /**
   * Get running
   * @return running
   */
  @javax.annotation.Nonnull
  public Integer getRunning() {
    return running;
  }

  public void setRunning(Integer running) {
    this.running = running;
  }


  public NodeCounts startTaskFailed(Integer startTaskFailed) {
    this.startTaskFailed = startTaskFailed;
    return this;
  }

  /**
   * Get startTaskFailed
   * @return startTaskFailed
   */
  @javax.annotation.Nonnull
  public Integer getStartTaskFailed() {
    return startTaskFailed;
  }

  public void setStartTaskFailed(Integer startTaskFailed) {
    this.startTaskFailed = startTaskFailed;
  }


  public NodeCounts starting(Integer starting) {
    this.starting = starting;
    return this;
  }

  /**
   * Get starting
   * @return starting
   */
  @javax.annotation.Nonnull
  public Integer getStarting() {
    return starting;
  }

  public void setStarting(Integer starting) {
    this.starting = starting;
  }


  public NodeCounts total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nonnull
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }


  public NodeCounts unknown(Integer unknown) {
    this.unknown = unknown;
    return this;
  }

  /**
   * Get unknown
   * @return unknown
   */
  @javax.annotation.Nonnull
  public Integer getUnknown() {
    return unknown;
  }

  public void setUnknown(Integer unknown) {
    this.unknown = unknown;
  }


  public NodeCounts unusable(Integer unusable) {
    this.unusable = unusable;
    return this;
  }

  /**
   * Get unusable
   * @return unusable
   */
  @javax.annotation.Nonnull
  public Integer getUnusable() {
    return unusable;
  }

  public void setUnusable(Integer unusable) {
    this.unusable = unusable;
  }


  public NodeCounts waitingForStartTask(Integer waitingForStartTask) {
    this.waitingForStartTask = waitingForStartTask;
    return this;
  }

  /**
   * Get waitingForStartTask
   * @return waitingForStartTask
   */
  @javax.annotation.Nonnull
  public Integer getWaitingForStartTask() {
    return waitingForStartTask;
  }

  public void setWaitingForStartTask(Integer waitingForStartTask) {
    this.waitingForStartTask = waitingForStartTask;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeCounts nodeCounts = (NodeCounts) o;
    return Objects.equals(this.creating, nodeCounts.creating) &&
        Objects.equals(this.idle, nodeCounts.idle) &&
        Objects.equals(this.leavingPool, nodeCounts.leavingPool) &&
        Objects.equals(this.offline, nodeCounts.offline) &&
        Objects.equals(this.preempted, nodeCounts.preempted) &&
        Objects.equals(this.rebooting, nodeCounts.rebooting) &&
        Objects.equals(this.reimaging, nodeCounts.reimaging) &&
        Objects.equals(this.running, nodeCounts.running) &&
        Objects.equals(this.startTaskFailed, nodeCounts.startTaskFailed) &&
        Objects.equals(this.starting, nodeCounts.starting) &&
        Objects.equals(this.total, nodeCounts.total) &&
        Objects.equals(this.unknown, nodeCounts.unknown) &&
        Objects.equals(this.unusable, nodeCounts.unusable) &&
        Objects.equals(this.waitingForStartTask, nodeCounts.waitingForStartTask);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creating, idle, leavingPool, offline, preempted, rebooting, reimaging, running, startTaskFailed, starting, total, unknown, unusable, waitingForStartTask);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeCounts {\n");
    sb.append("    creating: ").append(toIndentedString(creating)).append("\n");
    sb.append("    idle: ").append(toIndentedString(idle)).append("\n");
    sb.append("    leavingPool: ").append(toIndentedString(leavingPool)).append("\n");
    sb.append("    offline: ").append(toIndentedString(offline)).append("\n");
    sb.append("    preempted: ").append(toIndentedString(preempted)).append("\n");
    sb.append("    rebooting: ").append(toIndentedString(rebooting)).append("\n");
    sb.append("    reimaging: ").append(toIndentedString(reimaging)).append("\n");
    sb.append("    running: ").append(toIndentedString(running)).append("\n");
    sb.append("    startTaskFailed: ").append(toIndentedString(startTaskFailed)).append("\n");
    sb.append("    starting: ").append(toIndentedString(starting)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    unknown: ").append(toIndentedString(unknown)).append("\n");
    sb.append("    unusable: ").append(toIndentedString(unusable)).append("\n");
    sb.append("    waitingForStartTask: ").append(toIndentedString(waitingForStartTask)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creating");
    openapiFields.add("idle");
    openapiFields.add("leavingPool");
    openapiFields.add("offline");
    openapiFields.add("preempted");
    openapiFields.add("rebooting");
    openapiFields.add("reimaging");
    openapiFields.add("running");
    openapiFields.add("startTaskFailed");
    openapiFields.add("starting");
    openapiFields.add("total");
    openapiFields.add("unknown");
    openapiFields.add("unusable");
    openapiFields.add("waitingForStartTask");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("creating");
    openapiRequiredFields.add("idle");
    openapiRequiredFields.add("leavingPool");
    openapiRequiredFields.add("offline");
    openapiRequiredFields.add("preempted");
    openapiRequiredFields.add("rebooting");
    openapiRequiredFields.add("reimaging");
    openapiRequiredFields.add("running");
    openapiRequiredFields.add("startTaskFailed");
    openapiRequiredFields.add("starting");
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("unknown");
    openapiRequiredFields.add("unusable");
    openapiRequiredFields.add("waitingForStartTask");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeCounts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeCounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeCounts is not found in the empty JSON string", NodeCounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeCounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeCounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NodeCounts.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeCounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeCounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeCounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeCounts.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeCounts>() {
           @Override
           public void write(JsonWriter out, NodeCounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeCounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeCounts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeCounts
   * @throws IOException if the JSON string is invalid with respect to NodeCounts
   */
  public static NodeCounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeCounts.class);
  }

  /**
   * Convert an instance of NodeCounts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

