/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-12-01.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CertificateAddParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:31.436898-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateAddParameter {
  /**
   * Gets or Sets certificateFormat
   */
  @JsonAdapter(CertificateFormatEnum.Adapter.class)
  public enum CertificateFormatEnum {
    PFX("pfx"),
    
    CER("cer");

    private String value;

    CertificateFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CertificateFormatEnum fromValue(String value) {
      for (CertificateFormatEnum b : CertificateFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CertificateFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CertificateFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CertificateFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CertificateFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CertificateFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CERTIFICATE_FORMAT = "certificateFormat";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_FORMAT)
  private CertificateFormatEnum certificateFormat;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_THUMBPRINT = "thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  public static final String SERIALIZED_NAME_THUMBPRINT_ALGORITHM = "thumbprintAlgorithm";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT_ALGORITHM)
  private String thumbprintAlgorithm;

  public CertificateAddParameter() {
  }

  public CertificateAddParameter certificateFormat(CertificateFormatEnum certificateFormat) {
    this.certificateFormat = certificateFormat;
    return this;
  }

  /**
   * Get certificateFormat
   * @return certificateFormat
   */
  @javax.annotation.Nullable
  public CertificateFormatEnum getCertificateFormat() {
    return certificateFormat;
  }

  public void setCertificateFormat(CertificateFormatEnum certificateFormat) {
    this.certificateFormat = certificateFormat;
  }


  public CertificateAddParameter data(String data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nonnull
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  public CertificateAddParameter password(String password) {
    this.password = password;
    return this;
  }

  /**
   * This is required if the certificate format is pfx. It should be omitted if the certificate format is cer.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public CertificateAddParameter thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * Get thumbprint
   * @return thumbprint
   */
  @javax.annotation.Nonnull
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public CertificateAddParameter thumbprintAlgorithm(String thumbprintAlgorithm) {
    this.thumbprintAlgorithm = thumbprintAlgorithm;
    return this;
  }

  /**
   * Get thumbprintAlgorithm
   * @return thumbprintAlgorithm
   */
  @javax.annotation.Nonnull
  public String getThumbprintAlgorithm() {
    return thumbprintAlgorithm;
  }

  public void setThumbprintAlgorithm(String thumbprintAlgorithm) {
    this.thumbprintAlgorithm = thumbprintAlgorithm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateAddParameter certificateAddParameter = (CertificateAddParameter) o;
    return Objects.equals(this.certificateFormat, certificateAddParameter.certificateFormat) &&
        Objects.equals(this.data, certificateAddParameter.data) &&
        Objects.equals(this.password, certificateAddParameter.password) &&
        Objects.equals(this.thumbprint, certificateAddParameter.thumbprint) &&
        Objects.equals(this.thumbprintAlgorithm, certificateAddParameter.thumbprintAlgorithm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateFormat, data, password, thumbprint, thumbprintAlgorithm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateAddParameter {\n");
    sb.append("    certificateFormat: ").append(toIndentedString(certificateFormat)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    thumbprintAlgorithm: ").append(toIndentedString(thumbprintAlgorithm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificateFormat");
    openapiFields.add("data");
    openapiFields.add("password");
    openapiFields.add("thumbprint");
    openapiFields.add("thumbprintAlgorithm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("thumbprint");
    openapiRequiredFields.add("thumbprintAlgorithm");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateAddParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateAddParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateAddParameter is not found in the empty JSON string", CertificateAddParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateAddParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateAddParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CertificateAddParameter.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certificateFormat") != null && !jsonObj.get("certificateFormat").isJsonNull()) && !jsonObj.get("certificateFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateFormat").toString()));
      }
      // validate the optional field `certificateFormat`
      if (jsonObj.get("certificateFormat") != null && !jsonObj.get("certificateFormat").isJsonNull()) {
        CertificateFormatEnum.validateJsonElement(jsonObj.get("certificateFormat"));
      }
      if (!jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("thumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprint").toString()));
      }
      if (!jsonObj.get("thumbprintAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprintAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprintAlgorithm").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateAddParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateAddParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateAddParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateAddParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateAddParameter>() {
           @Override
           public void write(JsonWriter out, CertificateAddParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateAddParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateAddParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateAddParameter
   * @throws IOException if the JSON string is invalid with respect to CertificateAddParameter
   */
  public static CertificateAddParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateAddParameter.class);
  }

  /**
   * Convert an instance of CertificateAddParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

