/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-12-01.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExitConditions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExitConditions::OAIExitConditions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExitConditions::OAIExitConditions() {
    this->initializeModel();
}

OAIExitConditions::~OAIExitConditions() {}

void OAIExitConditions::initializeModel() {

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_exit_code_ranges_isSet = false;
    m_exit_code_ranges_isValid = false;

    m_exit_codes_isSet = false;
    m_exit_codes_isValid = false;

    m_file_upload_error_isSet = false;
    m_file_upload_error_isValid = false;

    m_pre_processing_error_isSet = false;
    m_pre_processing_error_isValid = false;
}

void OAIExitConditions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExitConditions::fromJsonObject(QJsonObject json) {

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_exit_code_ranges_isValid = ::OpenAPI::fromJsonValue(m_exit_code_ranges, json[QString("exitCodeRanges")]);
    m_exit_code_ranges_isSet = !json[QString("exitCodeRanges")].isNull() && m_exit_code_ranges_isValid;

    m_exit_codes_isValid = ::OpenAPI::fromJsonValue(m_exit_codes, json[QString("exitCodes")]);
    m_exit_codes_isSet = !json[QString("exitCodes")].isNull() && m_exit_codes_isValid;

    m_file_upload_error_isValid = ::OpenAPI::fromJsonValue(m_file_upload_error, json[QString("fileUploadError")]);
    m_file_upload_error_isSet = !json[QString("fileUploadError")].isNull() && m_file_upload_error_isValid;

    m_pre_processing_error_isValid = ::OpenAPI::fromJsonValue(m_pre_processing_error, json[QString("preProcessingError")]);
    m_pre_processing_error_isSet = !json[QString("preProcessingError")].isNull() && m_pre_processing_error_isValid;
}

QString OAIExitConditions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExitConditions::asJsonObject() const {
    QJsonObject obj;
    if (m_r_default.isSet()) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_exit_code_ranges.size() > 0) {
        obj.insert(QString("exitCodeRanges"), ::OpenAPI::toJsonValue(m_exit_code_ranges));
    }
    if (m_exit_codes.size() > 0) {
        obj.insert(QString("exitCodes"), ::OpenAPI::toJsonValue(m_exit_codes));
    }
    if (m_file_upload_error.isSet()) {
        obj.insert(QString("fileUploadError"), ::OpenAPI::toJsonValue(m_file_upload_error));
    }
    if (m_pre_processing_error.isSet()) {
        obj.insert(QString("preProcessingError"), ::OpenAPI::toJsonValue(m_pre_processing_error));
    }
    return obj;
}

OAIExitOptions OAIExitConditions::getRDefault() const {
    return m_r_default;
}
void OAIExitConditions::setRDefault(const OAIExitOptions &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIExitConditions::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIExitConditions::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QList<OAIExitCodeRangeMapping> OAIExitConditions::getExitCodeRanges() const {
    return m_exit_code_ranges;
}
void OAIExitConditions::setExitCodeRanges(const QList<OAIExitCodeRangeMapping> &exit_code_ranges) {
    m_exit_code_ranges = exit_code_ranges;
    m_exit_code_ranges_isSet = true;
}

bool OAIExitConditions::is_exit_code_ranges_Set() const{
    return m_exit_code_ranges_isSet;
}

bool OAIExitConditions::is_exit_code_ranges_Valid() const{
    return m_exit_code_ranges_isValid;
}

QList<OAIExitCodeMapping> OAIExitConditions::getExitCodes() const {
    return m_exit_codes;
}
void OAIExitConditions::setExitCodes(const QList<OAIExitCodeMapping> &exit_codes) {
    m_exit_codes = exit_codes;
    m_exit_codes_isSet = true;
}

bool OAIExitConditions::is_exit_codes_Set() const{
    return m_exit_codes_isSet;
}

bool OAIExitConditions::is_exit_codes_Valid() const{
    return m_exit_codes_isValid;
}

OAIExitOptions OAIExitConditions::getFileUploadError() const {
    return m_file_upload_error;
}
void OAIExitConditions::setFileUploadError(const OAIExitOptions &file_upload_error) {
    m_file_upload_error = file_upload_error;
    m_file_upload_error_isSet = true;
}

bool OAIExitConditions::is_file_upload_error_Set() const{
    return m_file_upload_error_isSet;
}

bool OAIExitConditions::is_file_upload_error_Valid() const{
    return m_file_upload_error_isValid;
}

OAIExitOptions OAIExitConditions::getPreProcessingError() const {
    return m_pre_processing_error;
}
void OAIExitConditions::setPreProcessingError(const OAIExitOptions &pre_processing_error) {
    m_pre_processing_error = pre_processing_error;
    m_pre_processing_error_isSet = true;
}

bool OAIExitConditions::is_pre_processing_error_Set() const{
    return m_pre_processing_error_isSet;
}

bool OAIExitConditions::is_pre_processing_error_Valid() const{
    return m_pre_processing_error_isValid;
}

bool OAIExitConditions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_default.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_code_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_upload_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_processing_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExitConditions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
