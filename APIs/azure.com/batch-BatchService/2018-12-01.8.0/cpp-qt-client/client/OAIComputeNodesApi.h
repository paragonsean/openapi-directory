/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-12-01.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIComputeNodesApi_H
#define OAI_OAIComputeNodesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchError.h"
#include "OAIComputeNode.h"
#include "OAIComputeNodeGetRemoteLoginSettingsResult.h"
#include "OAIComputeNodeListResult.h"
#include "OAIComputeNodeUser.h"
#include "OAINodeDisableSchedulingParameter.h"
#include "OAINodeRebootParameter.h"
#include "OAINodeReimageParameter.h"
#include "OAINodeRemoveParameter.h"
#include "OAINodeUpdateUserParameter.h"
#include "OAIObject.h"
#include "OAIUploadBatchServiceLogsConfiguration.h"
#include "OAIUploadBatchServiceLogsResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIComputeNodesApi : public QObject {
    Q_OBJECT

public:
    OAIComputeNodesApi(const int timeOut = 0);
    ~OAIComputeNodesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  user OAIComputeNodeUser [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void computeNodeAddUser(const QString &pool_id, const QString &node_id, const QString &api_version, const OAIComputeNodeUser &user, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void computeNodeDeleteUser(const QString &pool_id, const QString &node_id, const QString &user_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  node_disable_scheduling_parameter OAINodeDisableSchedulingParameter [optional]
    */
    virtual void computeNodeDisableScheduling(const QString &pool_id, const QString &node_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINodeDisableSchedulingParameter> &node_disable_scheduling_parameter = ::OpenAPI::OptionalParam<OAINodeDisableSchedulingParameter>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void computeNodeEnableScheduling(const QString &pool_id, const QString &node_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void computeNodeGet(const QString &pool_id, const QString &node_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void computeNodeGetRemoteDesktop(const QString &pool_id, const QString &node_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void computeNodeGetRemoteLoginSettings(const QString &pool_id, const QString &node_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  maxresults qint32 [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void computeNodeList(const QString &pool_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  node_reboot_parameter OAINodeRebootParameter [optional]
    */
    virtual void computeNodeReboot(const QString &pool_id, const QString &node_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINodeRebootParameter> &node_reboot_parameter = ::OpenAPI::OptionalParam<OAINodeRebootParameter>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  node_reimage_parameter OAINodeReimageParameter [optional]
    */
    virtual void computeNodeReimage(const QString &pool_id, const QString &node_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINodeReimageParameter> &node_reimage_parameter = ::OpenAPI::OptionalParam<OAINodeReimageParameter>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  node_update_user_parameter OAINodeUpdateUserParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void computeNodeUpdateUser(const QString &pool_id, const QString &node_id, const QString &user_name, const QString &api_version, const OAINodeUpdateUserParameter &node_update_user_parameter, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  upload_batch_service_logs_configuration OAIUploadBatchServiceLogsConfiguration [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void computeNodeUploadBatchServiceLogs(const QString &pool_id, const QString &node_id, const QString &api_version, const OAIUploadBatchServiceLogsConfiguration &upload_batch_service_logs_configuration, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  node_remove_parameter OAINodeRemoveParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void poolRemoveNodes(const QString &pool_id, const QString &api_version, const OAINodeRemoveParameter &node_remove_parameter, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void computeNodeAddUserCallback(OAIHttpRequestWorker *worker);
    void computeNodeDeleteUserCallback(OAIHttpRequestWorker *worker);
    void computeNodeDisableSchedulingCallback(OAIHttpRequestWorker *worker);
    void computeNodeEnableSchedulingCallback(OAIHttpRequestWorker *worker);
    void computeNodeGetCallback(OAIHttpRequestWorker *worker);
    void computeNodeGetRemoteDesktopCallback(OAIHttpRequestWorker *worker);
    void computeNodeGetRemoteLoginSettingsCallback(OAIHttpRequestWorker *worker);
    void computeNodeListCallback(OAIHttpRequestWorker *worker);
    void computeNodeRebootCallback(OAIHttpRequestWorker *worker);
    void computeNodeReimageCallback(OAIHttpRequestWorker *worker);
    void computeNodeUpdateUserCallback(OAIHttpRequestWorker *worker);
    void computeNodeUploadBatchServiceLogsCallback(OAIHttpRequestWorker *worker);
    void poolRemoveNodesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void computeNodeAddUserSignal();
    void computeNodeDeleteUserSignal();
    void computeNodeDisableSchedulingSignal();
    void computeNodeEnableSchedulingSignal();
    void computeNodeGetSignal(OAIComputeNode summary);
    void computeNodeGetRemoteDesktopSignal(OAIObject summary);
    void computeNodeGetRemoteLoginSettingsSignal(OAIComputeNodeGetRemoteLoginSettingsResult summary);
    void computeNodeListSignal(OAIComputeNodeListResult summary);
    void computeNodeRebootSignal();
    void computeNodeReimageSignal();
    void computeNodeUpdateUserSignal();
    void computeNodeUploadBatchServiceLogsSignal(OAIUploadBatchServiceLogsResult summary);
    void poolRemoveNodesSignal();


    void computeNodeAddUserSignalFull(OAIHttpRequestWorker *worker);
    void computeNodeDeleteUserSignalFull(OAIHttpRequestWorker *worker);
    void computeNodeDisableSchedulingSignalFull(OAIHttpRequestWorker *worker);
    void computeNodeEnableSchedulingSignalFull(OAIHttpRequestWorker *worker);
    void computeNodeGetSignalFull(OAIHttpRequestWorker *worker, OAIComputeNode summary);
    void computeNodeGetRemoteDesktopSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void computeNodeGetRemoteLoginSettingsSignalFull(OAIHttpRequestWorker *worker, OAIComputeNodeGetRemoteLoginSettingsResult summary);
    void computeNodeListSignalFull(OAIHttpRequestWorker *worker, OAIComputeNodeListResult summary);
    void computeNodeRebootSignalFull(OAIHttpRequestWorker *worker);
    void computeNodeReimageSignalFull(OAIHttpRequestWorker *worker);
    void computeNodeUpdateUserSignalFull(OAIHttpRequestWorker *worker);
    void computeNodeUploadBatchServiceLogsSignalFull(OAIHttpRequestWorker *worker, OAIUploadBatchServiceLogsResult summary);
    void poolRemoveNodesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use computeNodeAddUserSignalError() instead")
    void computeNodeAddUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeAddUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeDeleteUserSignalError() instead")
    void computeNodeDeleteUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeDeleteUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeDisableSchedulingSignalError() instead")
    void computeNodeDisableSchedulingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeDisableSchedulingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeEnableSchedulingSignalError() instead")
    void computeNodeEnableSchedulingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeEnableSchedulingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeGetSignalError() instead")
    void computeNodeGetSignalE(OAIComputeNode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeGetSignalError(OAIComputeNode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeGetRemoteDesktopSignalError() instead")
    void computeNodeGetRemoteDesktopSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeGetRemoteDesktopSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeGetRemoteLoginSettingsSignalError() instead")
    void computeNodeGetRemoteLoginSettingsSignalE(OAIComputeNodeGetRemoteLoginSettingsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeGetRemoteLoginSettingsSignalError(OAIComputeNodeGetRemoteLoginSettingsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeListSignalError() instead")
    void computeNodeListSignalE(OAIComputeNodeListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeListSignalError(OAIComputeNodeListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeRebootSignalError() instead")
    void computeNodeRebootSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeRebootSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeReimageSignalError() instead")
    void computeNodeReimageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeReimageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeUpdateUserSignalError() instead")
    void computeNodeUpdateUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeUpdateUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeUploadBatchServiceLogsSignalError() instead")
    void computeNodeUploadBatchServiceLogsSignalE(OAIUploadBatchServiceLogsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeUploadBatchServiceLogsSignalError(OAIUploadBatchServiceLogsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolRemoveNodesSignalError() instead")
    void poolRemoveNodesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poolRemoveNodesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use computeNodeAddUserSignalErrorFull() instead")
    void computeNodeAddUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeAddUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeDeleteUserSignalErrorFull() instead")
    void computeNodeDeleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeDeleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeDisableSchedulingSignalErrorFull() instead")
    void computeNodeDisableSchedulingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeDisableSchedulingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeEnableSchedulingSignalErrorFull() instead")
    void computeNodeEnableSchedulingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeEnableSchedulingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeGetSignalErrorFull() instead")
    void computeNodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeGetRemoteDesktopSignalErrorFull() instead")
    void computeNodeGetRemoteDesktopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeGetRemoteDesktopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeGetRemoteLoginSettingsSignalErrorFull() instead")
    void computeNodeGetRemoteLoginSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeGetRemoteLoginSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeListSignalErrorFull() instead")
    void computeNodeListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeRebootSignalErrorFull() instead")
    void computeNodeRebootSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeRebootSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeReimageSignalErrorFull() instead")
    void computeNodeReimageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeReimageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeUpdateUserSignalErrorFull() instead")
    void computeNodeUpdateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeUpdateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeNodeUploadBatchServiceLogsSignalErrorFull() instead")
    void computeNodeUploadBatchServiceLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNodeUploadBatchServiceLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolRemoveNodesSignalErrorFull() instead")
    void poolRemoveNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolRemoveNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
