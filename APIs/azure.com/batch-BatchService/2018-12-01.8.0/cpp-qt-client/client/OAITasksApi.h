/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-12-01.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITasksApi_H
#define OAI_OAITasksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchError.h"
#include "OAICloudTask.h"
#include "OAICloudTaskListResult.h"
#include "OAICloudTaskListSubtasksResult.h"
#include "OAITaskAddCollectionParameter.h"
#include "OAITaskAddCollectionResult.h"
#include "OAITaskAddParameter.h"
#include "OAITaskUpdateParameter.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITasksApi : public QObject {
    Q_OBJECT

public:
    OAITasksApi(const int timeOut = 0);
    ~OAITasksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  task OAITaskAddParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void taskAdd(const QString &job_id, const QString &api_version, const OAITaskAddParameter &task, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  task_collection OAITaskAddCollectionParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void taskAddCollection(const QString &job_id, const QString &api_version, const OAITaskAddCollectionParameter &task_collection, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void taskDelete(const QString &job_id, const QString &task_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void taskGet(const QString &job_id, const QString &task_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  maxresults qint32 [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void taskList(const QString &job_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void taskListSubtasks(const QString &job_id, const QString &task_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void taskReactivate(const QString &job_id, const QString &task_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void taskTerminate(const QString &job_id, const QString &task_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  task_update_parameter OAITaskUpdateParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void taskUpdate(const QString &job_id, const QString &task_id, const QString &api_version, const OAITaskUpdateParameter &task_update_parameter, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void taskAddCallback(OAIHttpRequestWorker *worker);
    void taskAddCollectionCallback(OAIHttpRequestWorker *worker);
    void taskDeleteCallback(OAIHttpRequestWorker *worker);
    void taskGetCallback(OAIHttpRequestWorker *worker);
    void taskListCallback(OAIHttpRequestWorker *worker);
    void taskListSubtasksCallback(OAIHttpRequestWorker *worker);
    void taskReactivateCallback(OAIHttpRequestWorker *worker);
    void taskTerminateCallback(OAIHttpRequestWorker *worker);
    void taskUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void taskAddSignal();
    void taskAddCollectionSignal(OAITaskAddCollectionResult summary);
    void taskDeleteSignal();
    void taskGetSignal(OAICloudTask summary);
    void taskListSignal(OAICloudTaskListResult summary);
    void taskListSubtasksSignal(OAICloudTaskListSubtasksResult summary);
    void taskReactivateSignal();
    void taskTerminateSignal();
    void taskUpdateSignal();


    void taskAddSignalFull(OAIHttpRequestWorker *worker);
    void taskAddCollectionSignalFull(OAIHttpRequestWorker *worker, OAITaskAddCollectionResult summary);
    void taskDeleteSignalFull(OAIHttpRequestWorker *worker);
    void taskGetSignalFull(OAIHttpRequestWorker *worker, OAICloudTask summary);
    void taskListSignalFull(OAIHttpRequestWorker *worker, OAICloudTaskListResult summary);
    void taskListSubtasksSignalFull(OAIHttpRequestWorker *worker, OAICloudTaskListSubtasksResult summary);
    void taskReactivateSignalFull(OAIHttpRequestWorker *worker);
    void taskTerminateSignalFull(OAIHttpRequestWorker *worker);
    void taskUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use taskAddSignalError() instead")
    void taskAddSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void taskAddSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskAddCollectionSignalError() instead")
    void taskAddCollectionSignalE(OAITaskAddCollectionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskAddCollectionSignalError(OAITaskAddCollectionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskDeleteSignalError() instead")
    void taskDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void taskDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskGetSignalError() instead")
    void taskGetSignalE(OAICloudTask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskGetSignalError(OAICloudTask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskListSignalError() instead")
    void taskListSignalE(OAICloudTaskListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskListSignalError(OAICloudTaskListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskListSubtasksSignalError() instead")
    void taskListSubtasksSignalE(OAICloudTaskListSubtasksResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskListSubtasksSignalError(OAICloudTaskListSubtasksResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskReactivateSignalError() instead")
    void taskReactivateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void taskReactivateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskTerminateSignalError() instead")
    void taskTerminateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void taskTerminateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskUpdateSignalError() instead")
    void taskUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void taskUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use taskAddSignalErrorFull() instead")
    void taskAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskAddCollectionSignalErrorFull() instead")
    void taskAddCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskAddCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskDeleteSignalErrorFull() instead")
    void taskDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskGetSignalErrorFull() instead")
    void taskGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskListSignalErrorFull() instead")
    void taskListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskListSubtasksSignalErrorFull() instead")
    void taskListSubtasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskListSubtasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskReactivateSignalErrorFull() instead")
    void taskReactivateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskReactivateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskTerminateSignalErrorFull() instead")
    void taskTerminateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskTerminateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskUpdateSignalErrorFull() instead")
    void taskUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
