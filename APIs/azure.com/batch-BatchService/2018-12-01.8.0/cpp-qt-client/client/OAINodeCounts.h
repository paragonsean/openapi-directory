/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-12-01.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINodeCounts.h
 *
 * 
 */

#ifndef OAINodeCounts_H
#define OAINodeCounts_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINodeCounts : public OAIObject {
public:
    OAINodeCounts();
    OAINodeCounts(QString json);
    ~OAINodeCounts() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCreating() const;
    void setCreating(const qint32 &creating);
    bool is_creating_Set() const;
    bool is_creating_Valid() const;

    qint32 getIdle() const;
    void setIdle(const qint32 &idle);
    bool is_idle_Set() const;
    bool is_idle_Valid() const;

    qint32 getLeavingPool() const;
    void setLeavingPool(const qint32 &leaving_pool);
    bool is_leaving_pool_Set() const;
    bool is_leaving_pool_Valid() const;

    qint32 getOffline() const;
    void setOffline(const qint32 &offline);
    bool is_offline_Set() const;
    bool is_offline_Valid() const;

    qint32 getPreempted() const;
    void setPreempted(const qint32 &preempted);
    bool is_preempted_Set() const;
    bool is_preempted_Valid() const;

    qint32 getRebooting() const;
    void setRebooting(const qint32 &rebooting);
    bool is_rebooting_Set() const;
    bool is_rebooting_Valid() const;

    qint32 getReimaging() const;
    void setReimaging(const qint32 &reimaging);
    bool is_reimaging_Set() const;
    bool is_reimaging_Valid() const;

    qint32 getRunning() const;
    void setRunning(const qint32 &running);
    bool is_running_Set() const;
    bool is_running_Valid() const;

    qint32 getStartTaskFailed() const;
    void setStartTaskFailed(const qint32 &start_task_failed);
    bool is_start_task_failed_Set() const;
    bool is_start_task_failed_Valid() const;

    qint32 getStarting() const;
    void setStarting(const qint32 &starting);
    bool is_starting_Set() const;
    bool is_starting_Valid() const;

    qint32 getTotal() const;
    void setTotal(const qint32 &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    qint32 getUnknown() const;
    void setUnknown(const qint32 &unknown);
    bool is_unknown_Set() const;
    bool is_unknown_Valid() const;

    qint32 getUnusable() const;
    void setUnusable(const qint32 &unusable);
    bool is_unusable_Set() const;
    bool is_unusable_Valid() const;

    qint32 getWaitingForStartTask() const;
    void setWaitingForStartTask(const qint32 &waiting_for_start_task);
    bool is_waiting_for_start_task_Set() const;
    bool is_waiting_for_start_task_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_creating;
    bool m_creating_isSet;
    bool m_creating_isValid;

    qint32 m_idle;
    bool m_idle_isSet;
    bool m_idle_isValid;

    qint32 m_leaving_pool;
    bool m_leaving_pool_isSet;
    bool m_leaving_pool_isValid;

    qint32 m_offline;
    bool m_offline_isSet;
    bool m_offline_isValid;

    qint32 m_preempted;
    bool m_preempted_isSet;
    bool m_preempted_isValid;

    qint32 m_rebooting;
    bool m_rebooting_isSet;
    bool m_rebooting_isValid;

    qint32 m_reimaging;
    bool m_reimaging_isSet;
    bool m_reimaging_isValid;

    qint32 m_running;
    bool m_running_isSet;
    bool m_running_isValid;

    qint32 m_start_task_failed;
    bool m_start_task_failed_isSet;
    bool m_start_task_failed_isValid;

    qint32 m_starting;
    bool m_starting_isSet;
    bool m_starting_isValid;

    qint32 m_total;
    bool m_total_isSet;
    bool m_total_isValid;

    qint32 m_unknown;
    bool m_unknown_isSet;
    bool m_unknown_isValid;

    qint32 m_unusable;
    bool m_unusable_isSet;
    bool m_unusable_isValid;

    qint32 m_waiting_for_start_task;
    bool m_waiting_for_start_task_isSet;
    bool m_waiting_for_start_task_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINodeCounts)

#endif // OAINodeCounts_H
