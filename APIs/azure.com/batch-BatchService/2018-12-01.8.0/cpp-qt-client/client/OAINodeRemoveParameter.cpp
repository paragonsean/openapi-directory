/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-12-01.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeRemoveParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeRemoveParameter::OAINodeRemoveParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeRemoveParameter::OAINodeRemoveParameter() {
    this->initializeModel();
}

OAINodeRemoveParameter::~OAINodeRemoveParameter() {}

void OAINodeRemoveParameter::initializeModel() {

    m_node_deallocation_option_isSet = false;
    m_node_deallocation_option_isValid = false;

    m_node_list_isSet = false;
    m_node_list_isValid = false;

    m_resize_timeout_isSet = false;
    m_resize_timeout_isValid = false;
}

void OAINodeRemoveParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeRemoveParameter::fromJsonObject(QJsonObject json) {

    m_node_deallocation_option_isValid = ::OpenAPI::fromJsonValue(m_node_deallocation_option, json[QString("nodeDeallocationOption")]);
    m_node_deallocation_option_isSet = !json[QString("nodeDeallocationOption")].isNull() && m_node_deallocation_option_isValid;

    m_node_list_isValid = ::OpenAPI::fromJsonValue(m_node_list, json[QString("nodeList")]);
    m_node_list_isSet = !json[QString("nodeList")].isNull() && m_node_list_isValid;

    m_resize_timeout_isValid = ::OpenAPI::fromJsonValue(m_resize_timeout, json[QString("resizeTimeout")]);
    m_resize_timeout_isSet = !json[QString("resizeTimeout")].isNull() && m_resize_timeout_isValid;
}

QString OAINodeRemoveParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeRemoveParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_node_deallocation_option.isSet()) {
        obj.insert(QString("nodeDeallocationOption"), ::OpenAPI::toJsonValue(m_node_deallocation_option));
    }
    if (m_node_list.size() > 0) {
        obj.insert(QString("nodeList"), ::OpenAPI::toJsonValue(m_node_list));
    }
    if (m_resize_timeout_isSet) {
        obj.insert(QString("resizeTimeout"), ::OpenAPI::toJsonValue(m_resize_timeout));
    }
    return obj;
}

OAIComputeNodeDeallocationOption OAINodeRemoveParameter::getNodeDeallocationOption() const {
    return m_node_deallocation_option;
}
void OAINodeRemoveParameter::setNodeDeallocationOption(const OAIComputeNodeDeallocationOption &node_deallocation_option) {
    m_node_deallocation_option = node_deallocation_option;
    m_node_deallocation_option_isSet = true;
}

bool OAINodeRemoveParameter::is_node_deallocation_option_Set() const{
    return m_node_deallocation_option_isSet;
}

bool OAINodeRemoveParameter::is_node_deallocation_option_Valid() const{
    return m_node_deallocation_option_isValid;
}

QList<QString> OAINodeRemoveParameter::getNodeList() const {
    return m_node_list;
}
void OAINodeRemoveParameter::setNodeList(const QList<QString> &node_list) {
    m_node_list = node_list;
    m_node_list_isSet = true;
}

bool OAINodeRemoveParameter::is_node_list_Set() const{
    return m_node_list_isSet;
}

bool OAINodeRemoveParameter::is_node_list_Valid() const{
    return m_node_list_isValid;
}

QString OAINodeRemoveParameter::getResizeTimeout() const {
    return m_resize_timeout;
}
void OAINodeRemoveParameter::setResizeTimeout(const QString &resize_timeout) {
    m_resize_timeout = resize_timeout;
    m_resize_timeout_isSet = true;
}

bool OAINodeRemoveParameter::is_resize_timeout_Set() const{
    return m_resize_timeout_isSet;
}

bool OAINodeRemoveParameter::is_resize_timeout_Valid() const{
    return m_resize_timeout_isValid;
}

bool OAINodeRemoveParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_deallocation_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resize_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeRemoveParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_node_list_isValid && true;
}

} // namespace OpenAPI
