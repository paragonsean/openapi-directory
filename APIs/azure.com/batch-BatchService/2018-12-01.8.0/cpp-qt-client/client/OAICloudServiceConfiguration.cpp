/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-12-01.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudServiceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudServiceConfiguration::OAICloudServiceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudServiceConfiguration::OAICloudServiceConfiguration() {
    this->initializeModel();
}

OAICloudServiceConfiguration::~OAICloudServiceConfiguration() {}

void OAICloudServiceConfiguration::initializeModel() {

    m_os_family_isSet = false;
    m_os_family_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;
}

void OAICloudServiceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudServiceConfiguration::fromJsonObject(QJsonObject json) {

    m_os_family_isValid = ::OpenAPI::fromJsonValue(m_os_family, json[QString("osFamily")]);
    m_os_family_isSet = !json[QString("osFamily")].isNull() && m_os_family_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;
}

QString OAICloudServiceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudServiceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_os_family_isSet) {
        obj.insert(QString("osFamily"), ::OpenAPI::toJsonValue(m_os_family));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    return obj;
}

QString OAICloudServiceConfiguration::getOsFamily() const {
    return m_os_family;
}
void OAICloudServiceConfiguration::setOsFamily(const QString &os_family) {
    m_os_family = os_family;
    m_os_family_isSet = true;
}

bool OAICloudServiceConfiguration::is_os_family_Set() const{
    return m_os_family_isSet;
}

bool OAICloudServiceConfiguration::is_os_family_Valid() const{
    return m_os_family_isValid;
}

QString OAICloudServiceConfiguration::getOsVersion() const {
    return m_os_version;
}
void OAICloudServiceConfiguration::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAICloudServiceConfiguration::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAICloudServiceConfiguration::is_os_version_Valid() const{
    return m_os_version_isValid;
}

bool OAICloudServiceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_os_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudServiceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_os_family_isValid && true;
}

} // namespace OpenAPI
