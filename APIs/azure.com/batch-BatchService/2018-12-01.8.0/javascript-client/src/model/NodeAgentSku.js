/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-12-01.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageReference from './ImageReference';

/**
 * The NodeAgentSku model module.
 * @module model/NodeAgentSku
 * @version 2018-12-01.8.0
 */
class NodeAgentSku {
    /**
     * Constructs a new <code>NodeAgentSku</code>.
     * The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems.
     * @alias module:model/NodeAgentSku
     */
    constructor() { 
        
        NodeAgentSku.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeAgentSku</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeAgentSku} obj Optional instance to populate.
     * @return {module:model/NodeAgentSku} The populated <code>NodeAgentSku</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeAgentSku();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('verifiedImageReferences')) {
                obj['verifiedImageReferences'] = ApiClient.convertToType(data['verifiedImageReferences'], [ImageReference]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeAgentSku</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeAgentSku</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        if (data['verifiedImageReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['verifiedImageReferences'])) {
                throw new Error("Expected the field `verifiedImageReferences` to be an array in the JSON data but got " + data['verifiedImageReferences']);
            }
            // validate the optional field `verifiedImageReferences` (array)
            for (const item of data['verifiedImageReferences']) {
                ImageReference.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} id
 */
NodeAgentSku.prototype['id'] = undefined;

/**
 * @member {module:model/NodeAgentSku.OsTypeEnum} osType
 */
NodeAgentSku.prototype['osType'] = undefined;

/**
 * This collection is not exhaustive (the node agent may be compatible with other images).
 * @member {Array.<module:model/ImageReference>} verifiedImageReferences
 */
NodeAgentSku.prototype['verifiedImageReferences'] = undefined;





/**
 * Allowed values for the <code>osType</code> property.
 * @enum {String}
 * @readonly
 */
NodeAgentSku['OsTypeEnum'] = {

    /**
     * value: "linux"
     * @const
     */
    "linux": "linux",

    /**
     * value: "windows"
     * @const
     */
    "windows": "windows"
};



export default NodeAgentSku;

