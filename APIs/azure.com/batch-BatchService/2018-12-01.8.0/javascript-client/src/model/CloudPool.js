/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-12-01.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationPackageReference from './ApplicationPackageReference';
import AutoScaleRun from './AutoScaleRun';
import CertificateReference from './CertificateReference';
import CloudServiceConfiguration from './CloudServiceConfiguration';
import MetadataItem from './MetadataItem';
import NetworkConfiguration from './NetworkConfiguration';
import PoolStatistics from './PoolStatistics';
import ResizeError from './ResizeError';
import StartTask from './StartTask';
import TaskSchedulingPolicy from './TaskSchedulingPolicy';
import UserAccount from './UserAccount';
import VirtualMachineConfiguration from './VirtualMachineConfiguration';

/**
 * The CloudPool model module.
 * @module model/CloudPool
 * @version 2018-12-01.8.0
 */
class CloudPool {
    /**
     * Constructs a new <code>CloudPool</code>.
     * @alias module:model/CloudPool
     */
    constructor() { 
        
        CloudPool.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudPool</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudPool} obj Optional instance to populate.
     * @return {module:model/CloudPool} The populated <code>CloudPool</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudPool();

            if (data.hasOwnProperty('allocationState')) {
                obj['allocationState'] = ApiClient.convertToType(data['allocationState'], 'String');
            }
            if (data.hasOwnProperty('allocationStateTransitionTime')) {
                obj['allocationStateTransitionTime'] = ApiClient.convertToType(data['allocationStateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('applicationLicenses')) {
                obj['applicationLicenses'] = ApiClient.convertToType(data['applicationLicenses'], ['String']);
            }
            if (data.hasOwnProperty('applicationPackageReferences')) {
                obj['applicationPackageReferences'] = ApiClient.convertToType(data['applicationPackageReferences'], [ApplicationPackageReference]);
            }
            if (data.hasOwnProperty('autoScaleEvaluationInterval')) {
                obj['autoScaleEvaluationInterval'] = ApiClient.convertToType(data['autoScaleEvaluationInterval'], 'String');
            }
            if (data.hasOwnProperty('autoScaleFormula')) {
                obj['autoScaleFormula'] = ApiClient.convertToType(data['autoScaleFormula'], 'String');
            }
            if (data.hasOwnProperty('autoScaleRun')) {
                obj['autoScaleRun'] = AutoScaleRun.constructFromObject(data['autoScaleRun']);
            }
            if (data.hasOwnProperty('certificateReferences')) {
                obj['certificateReferences'] = ApiClient.convertToType(data['certificateReferences'], [CertificateReference]);
            }
            if (data.hasOwnProperty('cloudServiceConfiguration')) {
                obj['cloudServiceConfiguration'] = CloudServiceConfiguration.constructFromObject(data['cloudServiceConfiguration']);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('currentDedicatedNodes')) {
                obj['currentDedicatedNodes'] = ApiClient.convertToType(data['currentDedicatedNodes'], 'Number');
            }
            if (data.hasOwnProperty('currentLowPriorityNodes')) {
                obj['currentLowPriorityNodes'] = ApiClient.convertToType(data['currentLowPriorityNodes'], 'Number');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('eTag')) {
                obj['eTag'] = ApiClient.convertToType(data['eTag'], 'String');
            }
            if (data.hasOwnProperty('enableAutoScale')) {
                obj['enableAutoScale'] = ApiClient.convertToType(data['enableAutoScale'], 'Boolean');
            }
            if (data.hasOwnProperty('enableInterNodeCommunication')) {
                obj['enableInterNodeCommunication'] = ApiClient.convertToType(data['enableInterNodeCommunication'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('maxTasksPerNode')) {
                obj['maxTasksPerNode'] = ApiClient.convertToType(data['maxTasksPerNode'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [MetadataItem]);
            }
            if (data.hasOwnProperty('networkConfiguration')) {
                obj['networkConfiguration'] = NetworkConfiguration.constructFromObject(data['networkConfiguration']);
            }
            if (data.hasOwnProperty('resizeErrors')) {
                obj['resizeErrors'] = ApiClient.convertToType(data['resizeErrors'], [ResizeError]);
            }
            if (data.hasOwnProperty('resizeTimeout')) {
                obj['resizeTimeout'] = ApiClient.convertToType(data['resizeTimeout'], 'String');
            }
            if (data.hasOwnProperty('startTask')) {
                obj['startTask'] = StartTask.constructFromObject(data['startTask']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateTransitionTime')) {
                obj['stateTransitionTime'] = ApiClient.convertToType(data['stateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = PoolStatistics.constructFromObject(data['stats']);
            }
            if (data.hasOwnProperty('targetDedicatedNodes')) {
                obj['targetDedicatedNodes'] = ApiClient.convertToType(data['targetDedicatedNodes'], 'Number');
            }
            if (data.hasOwnProperty('targetLowPriorityNodes')) {
                obj['targetLowPriorityNodes'] = ApiClient.convertToType(data['targetLowPriorityNodes'], 'Number');
            }
            if (data.hasOwnProperty('taskSchedulingPolicy')) {
                obj['taskSchedulingPolicy'] = TaskSchedulingPolicy.constructFromObject(data['taskSchedulingPolicy']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('userAccounts')) {
                obj['userAccounts'] = ApiClient.convertToType(data['userAccounts'], [UserAccount]);
            }
            if (data.hasOwnProperty('virtualMachineConfiguration')) {
                obj['virtualMachineConfiguration'] = VirtualMachineConfiguration.constructFromObject(data['virtualMachineConfiguration']);
            }
            if (data.hasOwnProperty('vmSize')) {
                obj['vmSize'] = ApiClient.convertToType(data['vmSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudPool</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudPool</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allocationState'] && !(typeof data['allocationState'] === 'string' || data['allocationState'] instanceof String)) {
            throw new Error("Expected the field `allocationState` to be a primitive type in the JSON string but got " + data['allocationState']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['applicationLicenses'])) {
            throw new Error("Expected the field `applicationLicenses` to be an array in the JSON data but got " + data['applicationLicenses']);
        }
        if (data['applicationPackageReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applicationPackageReferences'])) {
                throw new Error("Expected the field `applicationPackageReferences` to be an array in the JSON data but got " + data['applicationPackageReferences']);
            }
            // validate the optional field `applicationPackageReferences` (array)
            for (const item of data['applicationPackageReferences']) {
                ApplicationPackageReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['autoScaleEvaluationInterval'] && !(typeof data['autoScaleEvaluationInterval'] === 'string' || data['autoScaleEvaluationInterval'] instanceof String)) {
            throw new Error("Expected the field `autoScaleEvaluationInterval` to be a primitive type in the JSON string but got " + data['autoScaleEvaluationInterval']);
        }
        // ensure the json data is a string
        if (data['autoScaleFormula'] && !(typeof data['autoScaleFormula'] === 'string' || data['autoScaleFormula'] instanceof String)) {
            throw new Error("Expected the field `autoScaleFormula` to be a primitive type in the JSON string but got " + data['autoScaleFormula']);
        }
        // validate the optional field `autoScaleRun`
        if (data['autoScaleRun']) { // data not null
          AutoScaleRun.validateJSON(data['autoScaleRun']);
        }
        if (data['certificateReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['certificateReferences'])) {
                throw new Error("Expected the field `certificateReferences` to be an array in the JSON data but got " + data['certificateReferences']);
            }
            // validate the optional field `certificateReferences` (array)
            for (const item of data['certificateReferences']) {
                CertificateReference.validateJSON(item);
            };
        }
        // validate the optional field `cloudServiceConfiguration`
        if (data['cloudServiceConfiguration']) { // data not null
          CloudServiceConfiguration.validateJSON(data['cloudServiceConfiguration']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['eTag'] && !(typeof data['eTag'] === 'string' || data['eTag'] instanceof String)) {
            throw new Error("Expected the field `eTag` to be a primitive type in the JSON string but got " + data['eTag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                MetadataItem.validateJSON(item);
            };
        }
        // validate the optional field `networkConfiguration`
        if (data['networkConfiguration']) { // data not null
          NetworkConfiguration.validateJSON(data['networkConfiguration']);
        }
        if (data['resizeErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resizeErrors'])) {
                throw new Error("Expected the field `resizeErrors` to be an array in the JSON data but got " + data['resizeErrors']);
            }
            // validate the optional field `resizeErrors` (array)
            for (const item of data['resizeErrors']) {
                ResizeError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['resizeTimeout'] && !(typeof data['resizeTimeout'] === 'string' || data['resizeTimeout'] instanceof String)) {
            throw new Error("Expected the field `resizeTimeout` to be a primitive type in the JSON string but got " + data['resizeTimeout']);
        }
        // validate the optional field `startTask`
        if (data['startTask']) { // data not null
          StartTask.validateJSON(data['startTask']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          PoolStatistics.validateJSON(data['stats']);
        }
        // validate the optional field `taskSchedulingPolicy`
        if (data['taskSchedulingPolicy']) { // data not null
          TaskSchedulingPolicy.validateJSON(data['taskSchedulingPolicy']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        if (data['userAccounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userAccounts'])) {
                throw new Error("Expected the field `userAccounts` to be an array in the JSON data but got " + data['userAccounts']);
            }
            // validate the optional field `userAccounts` (array)
            for (const item of data['userAccounts']) {
                UserAccount.validateJSON(item);
            };
        }
        // validate the optional field `virtualMachineConfiguration`
        if (data['virtualMachineConfiguration']) { // data not null
          VirtualMachineConfiguration.validateJSON(data['virtualMachineConfiguration']);
        }
        // ensure the json data is a string
        if (data['vmSize'] && !(typeof data['vmSize'] === 'string' || data['vmSize'] instanceof String)) {
            throw new Error("Expected the field `vmSize` to be a primitive type in the JSON string but got " + data['vmSize']);
        }

        return true;
    }


}



/**
 * @member {module:model/CloudPool.AllocationStateEnum} allocationState
 */
CloudPool.prototype['allocationState'] = undefined;

/**
 * @member {Date} allocationStateTransitionTime
 */
CloudPool.prototype['allocationStateTransitionTime'] = undefined;

/**
 * The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
 * @member {Array.<String>} applicationLicenses
 */
CloudPool.prototype['applicationLicenses'] = undefined;

/**
 * Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references on any given pool.
 * @member {Array.<module:model/ApplicationPackageReference>} applicationPackageReferences
 */
CloudPool.prototype['applicationPackageReferences'] = undefined;

/**
 * This property is set only if the pool automatically scales, i.e. enableAutoScale is true.
 * @member {String} autoScaleEvaluationInterval
 */
CloudPool.prototype['autoScaleEvaluationInterval'] = undefined;

/**
 * This property is set only if the pool automatically scales, i.e. enableAutoScale is true.
 * @member {String} autoScaleFormula
 */
CloudPool.prototype['autoScaleFormula'] = undefined;

/**
 * @member {module:model/AutoScaleRun} autoScaleRun
 */
CloudPool.prototype['autoScaleRun'] = undefined;

/**
 * For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
 * @member {Array.<module:model/CertificateReference>} certificateReferences
 */
CloudPool.prototype['certificateReferences'] = undefined;

/**
 * @member {module:model/CloudServiceConfiguration} cloudServiceConfiguration
 */
CloudPool.prototype['cloudServiceConfiguration'] = undefined;

/**
 * @member {Date} creationTime
 */
CloudPool.prototype['creationTime'] = undefined;

/**
 * @member {Number} currentDedicatedNodes
 */
CloudPool.prototype['currentDedicatedNodes'] = undefined;

/**
 * Low-priority compute nodes which have been preempted are included in this count.
 * @member {Number} currentLowPriorityNodes
 */
CloudPool.prototype['currentLowPriorityNodes'] = undefined;

/**
 * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
 * @member {String} displayName
 */
CloudPool.prototype['displayName'] = undefined;

/**
 * This is an opaque string. You can use it to detect whether the pool has changed between requests. In particular, you can be pass the ETag when updating a pool to specify that your changes should take effect only if nobody else has modified the pool in the meantime.
 * @member {String} eTag
 */
CloudPool.prototype['eTag'] = undefined;

/**
 * If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the pool automatically resizes according to the formula. The default value is false.
 * @member {Boolean} enableAutoScale
 */
CloudPool.prototype['enableAutoScale'] = undefined;

/**
 * This imposes restrictions on which nodes can be assigned to the pool. Specifying this value can reduce the chance of the requested number of nodes to be allocated in the pool.
 * @member {Boolean} enableInterNodeCommunication
 */
CloudPool.prototype['enableInterNodeCommunication'] = undefined;

/**
 * The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).
 * @member {String} id
 */
CloudPool.prototype['id'] = undefined;

/**
 * This is the last time at which the pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a compute node changing state.
 * @member {Date} lastModified
 */
CloudPool.prototype['lastModified'] = undefined;

/**
 * The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
 * @member {Number} maxTasksPerNode
 */
CloudPool.prototype['maxTasksPerNode'] = undefined;

/**
 * @member {Array.<module:model/MetadataItem>} metadata
 */
CloudPool.prototype['metadata'] = undefined;

/**
 * @member {module:model/NetworkConfiguration} networkConfiguration
 */
CloudPool.prototype['networkConfiguration'] = undefined;

/**
 * This property is set only if one or more errors occurred during the last pool resize, and only when the pool allocationState is Steady.
 * @member {Array.<module:model/ResizeError>} resizeErrors
 */
CloudPool.prototype['resizeErrors'] = undefined;

/**
 * This is the timeout for the most recent resize operation. (The initial sizing when the pool is created counts as a resize.) The default value is 15 minutes.
 * @member {String} resizeTimeout
 */
CloudPool.prototype['resizeTimeout'] = undefined;

/**
 * @member {module:model/StartTask} startTask
 */
CloudPool.prototype['startTask'] = undefined;

/**
 * @member {module:model/CloudPool.StateEnum} state
 */
CloudPool.prototype['state'] = undefined;

/**
 * @member {Date} stateTransitionTime
 */
CloudPool.prototype['stateTransitionTime'] = undefined;

/**
 * @member {module:model/PoolStatistics} stats
 */
CloudPool.prototype['stats'] = undefined;

/**
 * @member {Number} targetDedicatedNodes
 */
CloudPool.prototype['targetDedicatedNodes'] = undefined;

/**
 * @member {Number} targetLowPriorityNodes
 */
CloudPool.prototype['targetLowPriorityNodes'] = undefined;

/**
 * @member {module:model/TaskSchedulingPolicy} taskSchedulingPolicy
 */
CloudPool.prototype['taskSchedulingPolicy'] = undefined;

/**
 * @member {String} url
 */
CloudPool.prototype['url'] = undefined;

/**
 * @member {Array.<module:model/UserAccount>} userAccounts
 */
CloudPool.prototype['userAccounts'] = undefined;

/**
 * @member {module:model/VirtualMachineConfiguration} virtualMachineConfiguration
 */
CloudPool.prototype['virtualMachineConfiguration'] = undefined;

/**
 * For information about available sizes of virtual machines in pools, see Choose a VM size for compute nodes in an Azure Batch pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
 * @member {String} vmSize
 */
CloudPool.prototype['vmSize'] = undefined;





/**
 * Allowed values for the <code>allocationState</code> property.
 * @enum {String}
 * @readonly
 */
CloudPool['AllocationStateEnum'] = {

    /**
     * value: "steady"
     * @const
     */
    "steady": "steady",

    /**
     * value: "resizing"
     * @const
     */
    "resizing": "resizing",

    /**
     * value: "stopping"
     * @const
     */
    "stopping": "stopping"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CloudPool['StateEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "deleting"
     * @const
     */
    "deleting": "deleting"
};



export default CloudPool;

