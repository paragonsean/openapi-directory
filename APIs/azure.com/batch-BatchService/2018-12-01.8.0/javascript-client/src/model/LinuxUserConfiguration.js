/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-12-01.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LinuxUserConfiguration model module.
 * @module model/LinuxUserConfiguration
 * @version 2018-12-01.8.0
 */
class LinuxUserConfiguration {
    /**
     * Constructs a new <code>LinuxUserConfiguration</code>.
     * @alias module:model/LinuxUserConfiguration
     */
    constructor() { 
        
        LinuxUserConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinuxUserConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinuxUserConfiguration} obj Optional instance to populate.
     * @return {module:model/LinuxUserConfiguration} The populated <code>LinuxUserConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinuxUserConfiguration();

            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'Number');
            }
            if (data.hasOwnProperty('sshPrivateKey')) {
                obj['sshPrivateKey'] = ApiClient.convertToType(data['sshPrivateKey'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinuxUserConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinuxUserConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sshPrivateKey'] && !(typeof data['sshPrivateKey'] === 'string' || data['sshPrivateKey'] instanceof String)) {
            throw new Error("Expected the field `sshPrivateKey` to be a primitive type in the JSON string but got " + data['sshPrivateKey']);
        }

        return true;
    }


}



/**
 * The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
 * @member {Number} gid
 */
LinuxUserConfiguration.prototype['gid'] = undefined;

/**
 * The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
 * @member {String} sshPrivateKey
 */
LinuxUserConfiguration.prototype['sshPrivateKey'] = undefined;

/**
 * The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
 * @member {Number} uid
 */
LinuxUserConfiguration.prototype['uid'] = undefined;






export default LinuxUserConfiguration;

