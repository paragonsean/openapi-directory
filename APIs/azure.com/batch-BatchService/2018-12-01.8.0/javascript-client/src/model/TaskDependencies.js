/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-12-01.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaskIdRange from './TaskIdRange';

/**
 * The TaskDependencies model module.
 * @module model/TaskDependencies
 * @version 2018-12-01.8.0
 */
class TaskDependencies {
    /**
     * Constructs a new <code>TaskDependencies</code>.
     * @alias module:model/TaskDependencies
     */
    constructor() { 
        
        TaskDependencies.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskDependencies</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskDependencies} obj Optional instance to populate.
     * @return {module:model/TaskDependencies} The populated <code>TaskDependencies</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskDependencies();

            if (data.hasOwnProperty('taskIdRanges')) {
                obj['taskIdRanges'] = ApiClient.convertToType(data['taskIdRanges'], [TaskIdRange]);
            }
            if (data.hasOwnProperty('taskIds')) {
                obj['taskIds'] = ApiClient.convertToType(data['taskIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskDependencies</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskDependencies</code>.
     */
    static validateJSON(data) {
        if (data['taskIdRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taskIdRanges'])) {
                throw new Error("Expected the field `taskIdRanges` to be an array in the JSON data but got " + data['taskIdRanges']);
            }
            // validate the optional field `taskIdRanges` (array)
            for (const item of data['taskIdRanges']) {
                TaskIdRange.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['taskIds'])) {
            throw new Error("Expected the field `taskIds` to be an array in the JSON data but got " + data['taskIds']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/TaskIdRange>} taskIdRanges
 */
TaskDependencies.prototype['taskIdRanges'] = undefined;

/**
 * The taskIds collection is limited to 64000 characters total (i.e. the combined length of all task IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong. In this case consider using task ID ranges instead.
 * @member {Array.<String>} taskIds
 */
TaskDependencies.prototype['taskIds'] = undefined;






export default TaskDependencies;

