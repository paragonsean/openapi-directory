/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-12-01.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BatchService);
  }
}(this, function(expect, BatchService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BatchService.ComputeNodesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ComputeNodesApi', function() {
    describe('computeNodeAddUser', function() {
      it('should call computeNodeAddUser successfully', function(done) {
        //uncomment below and update the code to test computeNodeAddUser
        //instance.computeNodeAddUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('computeNodeDeleteUser', function() {
      it('should call computeNodeDeleteUser successfully', function(done) {
        //uncomment below and update the code to test computeNodeDeleteUser
        //instance.computeNodeDeleteUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('computeNodeDisableScheduling', function() {
      it('should call computeNodeDisableScheduling successfully', function(done) {
        //uncomment below and update the code to test computeNodeDisableScheduling
        //instance.computeNodeDisableScheduling(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('computeNodeEnableScheduling', function() {
      it('should call computeNodeEnableScheduling successfully', function(done) {
        //uncomment below and update the code to test computeNodeEnableScheduling
        //instance.computeNodeEnableScheduling(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('computeNodeGet', function() {
      it('should call computeNodeGet successfully', function(done) {
        //uncomment below and update the code to test computeNodeGet
        //instance.computeNodeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('computeNodeGetRemoteDesktop', function() {
      it('should call computeNodeGetRemoteDesktop successfully', function(done) {
        //uncomment below and update the code to test computeNodeGetRemoteDesktop
        //instance.computeNodeGetRemoteDesktop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('computeNodeGetRemoteLoginSettings', function() {
      it('should call computeNodeGetRemoteLoginSettings successfully', function(done) {
        //uncomment below and update the code to test computeNodeGetRemoteLoginSettings
        //instance.computeNodeGetRemoteLoginSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('computeNodeList', function() {
      it('should call computeNodeList successfully', function(done) {
        //uncomment below and update the code to test computeNodeList
        //instance.computeNodeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('computeNodeReboot', function() {
      it('should call computeNodeReboot successfully', function(done) {
        //uncomment below and update the code to test computeNodeReboot
        //instance.computeNodeReboot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('computeNodeReimage', function() {
      it('should call computeNodeReimage successfully', function(done) {
        //uncomment below and update the code to test computeNodeReimage
        //instance.computeNodeReimage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('computeNodeUpdateUser', function() {
      it('should call computeNodeUpdateUser successfully', function(done) {
        //uncomment below and update the code to test computeNodeUpdateUser
        //instance.computeNodeUpdateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('computeNodeUploadBatchServiceLogs', function() {
      it('should call computeNodeUploadBatchServiceLogs successfully', function(done) {
        //uncomment below and update the code to test computeNodeUploadBatchServiceLogs
        //instance.computeNodeUploadBatchServiceLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('poolRemoveNodes', function() {
      it('should call poolRemoveNodes successfully', function(done) {
        //uncomment below and update the code to test poolRemoveNodes
        //instance.poolRemoveNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
