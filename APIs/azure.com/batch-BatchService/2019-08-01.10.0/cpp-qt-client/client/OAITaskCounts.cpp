/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskCounts::OAITaskCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskCounts::OAITaskCounts() {
    this->initializeModel();
}

OAITaskCounts::~OAITaskCounts() {}

void OAITaskCounts::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_running_isSet = false;
    m_running_isValid = false;

    m_succeeded_isSet = false;
    m_succeeded_isValid = false;
}

void OAITaskCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskCounts::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_running_isValid = ::OpenAPI::fromJsonValue(m_running, json[QString("running")]);
    m_running_isSet = !json[QString("running")].isNull() && m_running_isValid;

    m_succeeded_isValid = ::OpenAPI::fromJsonValue(m_succeeded, json[QString("succeeded")]);
    m_succeeded_isSet = !json[QString("succeeded")].isNull() && m_succeeded_isValid;
}

QString OAITaskCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_completed_isSet) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_running_isSet) {
        obj.insert(QString("running"), ::OpenAPI::toJsonValue(m_running));
    }
    if (m_succeeded_isSet) {
        obj.insert(QString("succeeded"), ::OpenAPI::toJsonValue(m_succeeded));
    }
    return obj;
}

qint32 OAITaskCounts::getActive() const {
    return m_active;
}
void OAITaskCounts::setActive(const qint32 &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAITaskCounts::is_active_Set() const{
    return m_active_isSet;
}

bool OAITaskCounts::is_active_Valid() const{
    return m_active_isValid;
}

qint32 OAITaskCounts::getCompleted() const {
    return m_completed;
}
void OAITaskCounts::setCompleted(const qint32 &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAITaskCounts::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAITaskCounts::is_completed_Valid() const{
    return m_completed_isValid;
}

qint32 OAITaskCounts::getFailed() const {
    return m_failed;
}
void OAITaskCounts::setFailed(const qint32 &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAITaskCounts::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAITaskCounts::is_failed_Valid() const{
    return m_failed_isValid;
}

qint32 OAITaskCounts::getRunning() const {
    return m_running;
}
void OAITaskCounts::setRunning(const qint32 &running) {
    m_running = running;
    m_running_isSet = true;
}

bool OAITaskCounts::is_running_Set() const{
    return m_running_isSet;
}

bool OAITaskCounts::is_running_Valid() const{
    return m_running_isValid;
}

qint32 OAITaskCounts::getSucceeded() const {
    return m_succeeded;
}
void OAITaskCounts::setSucceeded(const qint32 &succeeded) {
    m_succeeded = succeeded;
    m_succeeded_isSet = true;
}

bool OAITaskCounts::is_succeeded_Set() const{
    return m_succeeded_isSet;
}

bool OAITaskCounts::is_succeeded_Valid() const{
    return m_succeeded_isValid;
}

bool OAITaskCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_completed_isValid && m_failed_isValid && m_running_isValid && m_succeeded_isValid && true;
}

} // namespace OpenAPI
