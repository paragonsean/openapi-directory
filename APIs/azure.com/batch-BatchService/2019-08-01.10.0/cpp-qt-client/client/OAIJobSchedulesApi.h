/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobSchedulesApi_H
#define OAI_OAIJobSchedulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchError.h"
#include "OAICloudJobSchedule.h"
#include "OAICloudJobScheduleListResult.h"
#include "OAIJobScheduleAddParameter.h"
#include "OAIJobSchedulePatchParameter.h"
#include "OAIJobScheduleUpdateParameter.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobSchedulesApi : public QObject {
    Q_OBJECT

public:
    OAIJobSchedulesApi(const int timeOut = 0);
    ~OAIJobSchedulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  cloud_job_schedule OAIJobScheduleAddParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void jobScheduleAdd(const QString &api_version, const OAIJobScheduleAddParameter &cloud_job_schedule, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_schedule_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void jobScheduleDelete(const QString &job_schedule_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_schedule_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void jobScheduleDisable(const QString &job_schedule_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_schedule_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void jobScheduleEnable(const QString &job_schedule_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_schedule_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void jobScheduleExists(const QString &job_schedule_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_schedule_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void jobScheduleGet(const QString &job_schedule_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  maxresults qint32 [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void jobScheduleList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_schedule_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  job_schedule_patch_parameter OAIJobSchedulePatchParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void jobSchedulePatch(const QString &job_schedule_id, const QString &api_version, const OAIJobSchedulePatchParameter &job_schedule_patch_parameter, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_schedule_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void jobScheduleTerminate(const QString &job_schedule_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_schedule_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  job_schedule_update_parameter OAIJobScheduleUpdateParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void jobScheduleUpdate(const QString &job_schedule_id, const QString &api_version, const OAIJobScheduleUpdateParameter &job_schedule_update_parameter, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobScheduleAddCallback(OAIHttpRequestWorker *worker);
    void jobScheduleDeleteCallback(OAIHttpRequestWorker *worker);
    void jobScheduleDisableCallback(OAIHttpRequestWorker *worker);
    void jobScheduleEnableCallback(OAIHttpRequestWorker *worker);
    void jobScheduleExistsCallback(OAIHttpRequestWorker *worker);
    void jobScheduleGetCallback(OAIHttpRequestWorker *worker);
    void jobScheduleListCallback(OAIHttpRequestWorker *worker);
    void jobSchedulePatchCallback(OAIHttpRequestWorker *worker);
    void jobScheduleTerminateCallback(OAIHttpRequestWorker *worker);
    void jobScheduleUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobScheduleAddSignal();
    void jobScheduleDeleteSignal();
    void jobScheduleDisableSignal();
    void jobScheduleEnableSignal();
    void jobScheduleExistsSignal();
    void jobScheduleGetSignal(OAICloudJobSchedule summary);
    void jobScheduleListSignal(OAICloudJobScheduleListResult summary);
    void jobSchedulePatchSignal();
    void jobScheduleTerminateSignal();
    void jobScheduleUpdateSignal();


    void jobScheduleAddSignalFull(OAIHttpRequestWorker *worker);
    void jobScheduleDeleteSignalFull(OAIHttpRequestWorker *worker);
    void jobScheduleDisableSignalFull(OAIHttpRequestWorker *worker);
    void jobScheduleEnableSignalFull(OAIHttpRequestWorker *worker);
    void jobScheduleExistsSignalFull(OAIHttpRequestWorker *worker);
    void jobScheduleGetSignalFull(OAIHttpRequestWorker *worker, OAICloudJobSchedule summary);
    void jobScheduleListSignalFull(OAIHttpRequestWorker *worker, OAICloudJobScheduleListResult summary);
    void jobSchedulePatchSignalFull(OAIHttpRequestWorker *worker);
    void jobScheduleTerminateSignalFull(OAIHttpRequestWorker *worker);
    void jobScheduleUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use jobScheduleAddSignalError() instead")
    void jobScheduleAddSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleAddSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleDeleteSignalError() instead")
    void jobScheduleDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleDisableSignalError() instead")
    void jobScheduleDisableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleDisableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleEnableSignalError() instead")
    void jobScheduleEnableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleEnableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleExistsSignalError() instead")
    void jobScheduleExistsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleExistsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleGetSignalError() instead")
    void jobScheduleGetSignalE(OAICloudJobSchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleGetSignalError(OAICloudJobSchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleListSignalError() instead")
    void jobScheduleListSignalE(OAICloudJobScheduleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleListSignalError(OAICloudJobScheduleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSchedulePatchSignalError() instead")
    void jobSchedulePatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobSchedulePatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleTerminateSignalError() instead")
    void jobScheduleTerminateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleTerminateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleUpdateSignalError() instead")
    void jobScheduleUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobScheduleAddSignalErrorFull() instead")
    void jobScheduleAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleDeleteSignalErrorFull() instead")
    void jobScheduleDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleDisableSignalErrorFull() instead")
    void jobScheduleDisableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleDisableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleEnableSignalErrorFull() instead")
    void jobScheduleEnableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleEnableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleExistsSignalErrorFull() instead")
    void jobScheduleExistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleExistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleGetSignalErrorFull() instead")
    void jobScheduleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleListSignalErrorFull() instead")
    void jobScheduleListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSchedulePatchSignalErrorFull() instead")
    void jobSchedulePatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSchedulePatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleTerminateSignalErrorFull() instead")
    void jobScheduleTerminateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleTerminateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobScheduleUpdateSignalErrorFull() instead")
    void jobScheduleUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobScheduleUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
