/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobSpecification::OAIJobSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobSpecification::OAIJobSpecification() {
    this->initializeModel();
}

OAIJobSpecification::~OAIJobSpecification() {}

void OAIJobSpecification::initializeModel() {

    m_common_environment_settings_isSet = false;
    m_common_environment_settings_isValid = false;

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_job_manager_task_isSet = false;
    m_job_manager_task_isValid = false;

    m_job_preparation_task_isSet = false;
    m_job_preparation_task_isValid = false;

    m_job_release_task_isSet = false;
    m_job_release_task_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_on_all_tasks_complete_isSet = false;
    m_on_all_tasks_complete_isValid = false;

    m_on_task_failure_isSet = false;
    m_on_task_failure_isValid = false;

    m_pool_info_isSet = false;
    m_pool_info_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_uses_task_dependencies_isSet = false;
    m_uses_task_dependencies_isValid = false;
}

void OAIJobSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobSpecification::fromJsonObject(QJsonObject json) {

    m_common_environment_settings_isValid = ::OpenAPI::fromJsonValue(m_common_environment_settings, json[QString("commonEnvironmentSettings")]);
    m_common_environment_settings_isSet = !json[QString("commonEnvironmentSettings")].isNull() && m_common_environment_settings_isValid;

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_job_manager_task_isValid = ::OpenAPI::fromJsonValue(m_job_manager_task, json[QString("jobManagerTask")]);
    m_job_manager_task_isSet = !json[QString("jobManagerTask")].isNull() && m_job_manager_task_isValid;

    m_job_preparation_task_isValid = ::OpenAPI::fromJsonValue(m_job_preparation_task, json[QString("jobPreparationTask")]);
    m_job_preparation_task_isSet = !json[QString("jobPreparationTask")].isNull() && m_job_preparation_task_isValid;

    m_job_release_task_isValid = ::OpenAPI::fromJsonValue(m_job_release_task, json[QString("jobReleaseTask")]);
    m_job_release_task_isSet = !json[QString("jobReleaseTask")].isNull() && m_job_release_task_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("networkConfiguration")]);
    m_network_configuration_isSet = !json[QString("networkConfiguration")].isNull() && m_network_configuration_isValid;

    m_on_all_tasks_complete_isValid = ::OpenAPI::fromJsonValue(m_on_all_tasks_complete, json[QString("onAllTasksComplete")]);
    m_on_all_tasks_complete_isSet = !json[QString("onAllTasksComplete")].isNull() && m_on_all_tasks_complete_isValid;

    m_on_task_failure_isValid = ::OpenAPI::fromJsonValue(m_on_task_failure, json[QString("onTaskFailure")]);
    m_on_task_failure_isSet = !json[QString("onTaskFailure")].isNull() && m_on_task_failure_isValid;

    m_pool_info_isValid = ::OpenAPI::fromJsonValue(m_pool_info, json[QString("poolInfo")]);
    m_pool_info_isSet = !json[QString("poolInfo")].isNull() && m_pool_info_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_uses_task_dependencies_isValid = ::OpenAPI::fromJsonValue(m_uses_task_dependencies, json[QString("usesTaskDependencies")]);
    m_uses_task_dependencies_isSet = !json[QString("usesTaskDependencies")].isNull() && m_uses_task_dependencies_isValid;
}

QString OAIJobSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_common_environment_settings.size() > 0) {
        obj.insert(QString("commonEnvironmentSettings"), ::OpenAPI::toJsonValue(m_common_environment_settings));
    }
    if (m_constraints.isSet()) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_job_manager_task.isSet()) {
        obj.insert(QString("jobManagerTask"), ::OpenAPI::toJsonValue(m_job_manager_task));
    }
    if (m_job_preparation_task.isSet()) {
        obj.insert(QString("jobPreparationTask"), ::OpenAPI::toJsonValue(m_job_preparation_task));
    }
    if (m_job_release_task.isSet()) {
        obj.insert(QString("jobReleaseTask"), ::OpenAPI::toJsonValue(m_job_release_task));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("networkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_on_all_tasks_complete.isSet()) {
        obj.insert(QString("onAllTasksComplete"), ::OpenAPI::toJsonValue(m_on_all_tasks_complete));
    }
    if (m_on_task_failure.isSet()) {
        obj.insert(QString("onTaskFailure"), ::OpenAPI::toJsonValue(m_on_task_failure));
    }
    if (m_pool_info.isSet()) {
        obj.insert(QString("poolInfo"), ::OpenAPI::toJsonValue(m_pool_info));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_uses_task_dependencies_isSet) {
        obj.insert(QString("usesTaskDependencies"), ::OpenAPI::toJsonValue(m_uses_task_dependencies));
    }
    return obj;
}

QList<OAIEnvironmentSetting> OAIJobSpecification::getCommonEnvironmentSettings() const {
    return m_common_environment_settings;
}
void OAIJobSpecification::setCommonEnvironmentSettings(const QList<OAIEnvironmentSetting> &common_environment_settings) {
    m_common_environment_settings = common_environment_settings;
    m_common_environment_settings_isSet = true;
}

bool OAIJobSpecification::is_common_environment_settings_Set() const{
    return m_common_environment_settings_isSet;
}

bool OAIJobSpecification::is_common_environment_settings_Valid() const{
    return m_common_environment_settings_isValid;
}

OAIJobConstraints OAIJobSpecification::getConstraints() const {
    return m_constraints;
}
void OAIJobSpecification::setConstraints(const OAIJobConstraints &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAIJobSpecification::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAIJobSpecification::is_constraints_Valid() const{
    return m_constraints_isValid;
}

QString OAIJobSpecification::getDisplayName() const {
    return m_display_name;
}
void OAIJobSpecification::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIJobSpecification::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIJobSpecification::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIJobManagerTask OAIJobSpecification::getJobManagerTask() const {
    return m_job_manager_task;
}
void OAIJobSpecification::setJobManagerTask(const OAIJobManagerTask &job_manager_task) {
    m_job_manager_task = job_manager_task;
    m_job_manager_task_isSet = true;
}

bool OAIJobSpecification::is_job_manager_task_Set() const{
    return m_job_manager_task_isSet;
}

bool OAIJobSpecification::is_job_manager_task_Valid() const{
    return m_job_manager_task_isValid;
}

OAIJobPreparationTask OAIJobSpecification::getJobPreparationTask() const {
    return m_job_preparation_task;
}
void OAIJobSpecification::setJobPreparationTask(const OAIJobPreparationTask &job_preparation_task) {
    m_job_preparation_task = job_preparation_task;
    m_job_preparation_task_isSet = true;
}

bool OAIJobSpecification::is_job_preparation_task_Set() const{
    return m_job_preparation_task_isSet;
}

bool OAIJobSpecification::is_job_preparation_task_Valid() const{
    return m_job_preparation_task_isValid;
}

OAIJobReleaseTask OAIJobSpecification::getJobReleaseTask() const {
    return m_job_release_task;
}
void OAIJobSpecification::setJobReleaseTask(const OAIJobReleaseTask &job_release_task) {
    m_job_release_task = job_release_task;
    m_job_release_task_isSet = true;
}

bool OAIJobSpecification::is_job_release_task_Set() const{
    return m_job_release_task_isSet;
}

bool OAIJobSpecification::is_job_release_task_Valid() const{
    return m_job_release_task_isValid;
}

QList<OAIMetadataItem> OAIJobSpecification::getMetadata() const {
    return m_metadata;
}
void OAIJobSpecification::setMetadata(const QList<OAIMetadataItem> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIJobSpecification::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIJobSpecification::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIJobNetworkConfiguration OAIJobSpecification::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIJobSpecification::setNetworkConfiguration(const OAIJobNetworkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIJobSpecification::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIJobSpecification::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

OAIOnAllTasksComplete OAIJobSpecification::getOnAllTasksComplete() const {
    return m_on_all_tasks_complete;
}
void OAIJobSpecification::setOnAllTasksComplete(const OAIOnAllTasksComplete &on_all_tasks_complete) {
    m_on_all_tasks_complete = on_all_tasks_complete;
    m_on_all_tasks_complete_isSet = true;
}

bool OAIJobSpecification::is_on_all_tasks_complete_Set() const{
    return m_on_all_tasks_complete_isSet;
}

bool OAIJobSpecification::is_on_all_tasks_complete_Valid() const{
    return m_on_all_tasks_complete_isValid;
}

OAIOnTaskFailure OAIJobSpecification::getOnTaskFailure() const {
    return m_on_task_failure;
}
void OAIJobSpecification::setOnTaskFailure(const OAIOnTaskFailure &on_task_failure) {
    m_on_task_failure = on_task_failure;
    m_on_task_failure_isSet = true;
}

bool OAIJobSpecification::is_on_task_failure_Set() const{
    return m_on_task_failure_isSet;
}

bool OAIJobSpecification::is_on_task_failure_Valid() const{
    return m_on_task_failure_isValid;
}

OAIPoolInformation OAIJobSpecification::getPoolInfo() const {
    return m_pool_info;
}
void OAIJobSpecification::setPoolInfo(const OAIPoolInformation &pool_info) {
    m_pool_info = pool_info;
    m_pool_info_isSet = true;
}

bool OAIJobSpecification::is_pool_info_Set() const{
    return m_pool_info_isSet;
}

bool OAIJobSpecification::is_pool_info_Valid() const{
    return m_pool_info_isValid;
}

qint32 OAIJobSpecification::getPriority() const {
    return m_priority;
}
void OAIJobSpecification::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIJobSpecification::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIJobSpecification::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAIJobSpecification::isUsesTaskDependencies() const {
    return m_uses_task_dependencies;
}
void OAIJobSpecification::setUsesTaskDependencies(const bool &uses_task_dependencies) {
    m_uses_task_dependencies = uses_task_dependencies;
    m_uses_task_dependencies_isSet = true;
}

bool OAIJobSpecification::is_uses_task_dependencies_Set() const{
    return m_uses_task_dependencies_isSet;
}

bool OAIJobSpecification::is_uses_task_dependencies_Valid() const{
    return m_uses_task_dependencies_isValid;
}

bool OAIJobSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_environment_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_manager_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_preparation_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_release_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_all_tasks_complete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_task_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_task_dependencies_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pool_info_isValid && true;
}

} // namespace OpenAPI
