/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINFSMountConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINFSMountConfiguration::OAINFSMountConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINFSMountConfiguration::OAINFSMountConfiguration() {
    this->initializeModel();
}

OAINFSMountConfiguration::~OAINFSMountConfiguration() {}

void OAINFSMountConfiguration::initializeModel() {

    m_mount_options_isSet = false;
    m_mount_options_isValid = false;

    m_relative_mount_path_isSet = false;
    m_relative_mount_path_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAINFSMountConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINFSMountConfiguration::fromJsonObject(QJsonObject json) {

    m_mount_options_isValid = ::OpenAPI::fromJsonValue(m_mount_options, json[QString("mountOptions")]);
    m_mount_options_isSet = !json[QString("mountOptions")].isNull() && m_mount_options_isValid;

    m_relative_mount_path_isValid = ::OpenAPI::fromJsonValue(m_relative_mount_path, json[QString("relativeMountPath")]);
    m_relative_mount_path_isSet = !json[QString("relativeMountPath")].isNull() && m_relative_mount_path_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAINFSMountConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINFSMountConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_mount_options_isSet) {
        obj.insert(QString("mountOptions"), ::OpenAPI::toJsonValue(m_mount_options));
    }
    if (m_relative_mount_path_isSet) {
        obj.insert(QString("relativeMountPath"), ::OpenAPI::toJsonValue(m_relative_mount_path));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAINFSMountConfiguration::getMountOptions() const {
    return m_mount_options;
}
void OAINFSMountConfiguration::setMountOptions(const QString &mount_options) {
    m_mount_options = mount_options;
    m_mount_options_isSet = true;
}

bool OAINFSMountConfiguration::is_mount_options_Set() const{
    return m_mount_options_isSet;
}

bool OAINFSMountConfiguration::is_mount_options_Valid() const{
    return m_mount_options_isValid;
}

QString OAINFSMountConfiguration::getRelativeMountPath() const {
    return m_relative_mount_path;
}
void OAINFSMountConfiguration::setRelativeMountPath(const QString &relative_mount_path) {
    m_relative_mount_path = relative_mount_path;
    m_relative_mount_path_isSet = true;
}

bool OAINFSMountConfiguration::is_relative_mount_path_Set() const{
    return m_relative_mount_path_isSet;
}

bool OAINFSMountConfiguration::is_relative_mount_path_Valid() const{
    return m_relative_mount_path_isValid;
}

QString OAINFSMountConfiguration::getSource() const {
    return m_source;
}
void OAINFSMountConfiguration::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAINFSMountConfiguration::is_source_Set() const{
    return m_source_isSet;
}

bool OAINFSMountConfiguration::is_source_Valid() const{
    return m_source_isValid;
}

bool OAINFSMountConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mount_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_mount_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINFSMountConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_relative_mount_path_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
