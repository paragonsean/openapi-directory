/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JobConstraints;
import org.openapitools.client.model.MetadataItem;
import org.openapitools.client.model.OnAllTasksComplete;
import org.openapitools.client.model.PoolInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobPatchParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:32.540737-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobPatchParameter {
  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private JobConstraints constraints;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<MetadataItem> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_ALL_TASKS_COMPLETE = "onAllTasksComplete";
  @SerializedName(SERIALIZED_NAME_ON_ALL_TASKS_COMPLETE)
  private OnAllTasksComplete onAllTasksComplete;

  public static final String SERIALIZED_NAME_POOL_INFO = "poolInfo";
  @SerializedName(SERIALIZED_NAME_POOL_INFO)
  private PoolInformation poolInfo;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public JobPatchParameter() {
  }

  public JobPatchParameter constraints(JobConstraints constraints) {
    this.constraints = constraints;
    return this;
  }

  /**
   * Get constraints
   * @return constraints
   */
  @javax.annotation.Nullable
  public JobConstraints getConstraints() {
    return constraints;
  }

  public void setConstraints(JobConstraints constraints) {
    this.constraints = constraints;
  }


  public JobPatchParameter metadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
    return this;
  }

  public JobPatchParameter addMetadataItem(MetadataItem metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * If omitted, the existing Job metadata is left unchanged.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<MetadataItem> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
  }


  public JobPatchParameter onAllTasksComplete(OnAllTasksComplete onAllTasksComplete) {
    this.onAllTasksComplete = onAllTasksComplete;
    return this;
  }

  /**
   * Get onAllTasksComplete
   * @return onAllTasksComplete
   */
  @javax.annotation.Nullable
  public OnAllTasksComplete getOnAllTasksComplete() {
    return onAllTasksComplete;
  }

  public void setOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete) {
    this.onAllTasksComplete = onAllTasksComplete;
  }


  public JobPatchParameter poolInfo(PoolInformation poolInfo) {
    this.poolInfo = poolInfo;
    return this;
  }

  /**
   * Get poolInfo
   * @return poolInfo
   */
  @javax.annotation.Nullable
  public PoolInformation getPoolInfo() {
    return poolInfo;
  }

  public void setPoolInfo(PoolInformation poolInfo) {
    this.poolInfo = poolInfo;
  }


  public JobPatchParameter priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, the priority of the Job is left unchanged.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobPatchParameter jobPatchParameter = (JobPatchParameter) o;
    return Objects.equals(this.constraints, jobPatchParameter.constraints) &&
        Objects.equals(this.metadata, jobPatchParameter.metadata) &&
        Objects.equals(this.onAllTasksComplete, jobPatchParameter.onAllTasksComplete) &&
        Objects.equals(this.poolInfo, jobPatchParameter.poolInfo) &&
        Objects.equals(this.priority, jobPatchParameter.priority);
  }

  @Override
  public int hashCode() {
    return Objects.hash(constraints, metadata, onAllTasksComplete, poolInfo, priority);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobPatchParameter {\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    onAllTasksComplete: ").append(toIndentedString(onAllTasksComplete)).append("\n");
    sb.append("    poolInfo: ").append(toIndentedString(poolInfo)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("constraints");
    openapiFields.add("metadata");
    openapiFields.add("onAllTasksComplete");
    openapiFields.add("poolInfo");
    openapiFields.add("priority");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobPatchParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobPatchParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobPatchParameter is not found in the empty JSON string", JobPatchParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobPatchParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobPatchParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `constraints`
      if (jsonObj.get("constraints") != null && !jsonObj.get("constraints").isJsonNull()) {
        JobConstraints.validateJsonElement(jsonObj.get("constraints"));
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            MetadataItem.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      // validate the optional field `onAllTasksComplete`
      if (jsonObj.get("onAllTasksComplete") != null && !jsonObj.get("onAllTasksComplete").isJsonNull()) {
        OnAllTasksComplete.validateJsonElement(jsonObj.get("onAllTasksComplete"));
      }
      // validate the optional field `poolInfo`
      if (jsonObj.get("poolInfo") != null && !jsonObj.get("poolInfo").isJsonNull()) {
        PoolInformation.validateJsonElement(jsonObj.get("poolInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobPatchParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobPatchParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobPatchParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobPatchParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<JobPatchParameter>() {
           @Override
           public void write(JsonWriter out, JobPatchParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobPatchParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobPatchParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobPatchParameter
   * @throws IOException if the JSON string is invalid with respect to JobPatchParameter
   */
  public static JobPatchParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobPatchParameter.class);
  }

  /**
   * Convert an instance of JobPatchParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

