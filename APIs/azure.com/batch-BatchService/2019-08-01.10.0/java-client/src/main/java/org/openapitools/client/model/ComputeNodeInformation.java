/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ComputeNodeInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:32.540737-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComputeNodeInformation {
  public static final String SERIALIZED_NAME_AFFINITY_ID = "affinityId";
  @SerializedName(SERIALIZED_NAME_AFFINITY_ID)
  private String affinityId;

  public static final String SERIALIZED_NAME_NODE_ID = "nodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NODE_URL = "nodeUrl";
  @SerializedName(SERIALIZED_NAME_NODE_URL)
  private String nodeUrl;

  public static final String SERIALIZED_NAME_POOL_ID = "poolId";
  @SerializedName(SERIALIZED_NAME_POOL_ID)
  private String poolId;

  public static final String SERIALIZED_NAME_TASK_ROOT_DIRECTORY = "taskRootDirectory";
  @SerializedName(SERIALIZED_NAME_TASK_ROOT_DIRECTORY)
  private String taskRootDirectory;

  public static final String SERIALIZED_NAME_TASK_ROOT_DIRECTORY_URL = "taskRootDirectoryUrl";
  @SerializedName(SERIALIZED_NAME_TASK_ROOT_DIRECTORY_URL)
  private String taskRootDirectoryUrl;

  public ComputeNodeInformation() {
  }

  public ComputeNodeInformation affinityId(String affinityId) {
    this.affinityId = affinityId;
    return this;
  }

  /**
   * Get affinityId
   * @return affinityId
   */
  @javax.annotation.Nullable
  public String getAffinityId() {
    return affinityId;
  }

  public void setAffinityId(String affinityId) {
    this.affinityId = affinityId;
  }


  public ComputeNodeInformation nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public ComputeNodeInformation nodeUrl(String nodeUrl) {
    this.nodeUrl = nodeUrl;
    return this;
  }

  /**
   * Get nodeUrl
   * @return nodeUrl
   */
  @javax.annotation.Nullable
  public String getNodeUrl() {
    return nodeUrl;
  }

  public void setNodeUrl(String nodeUrl) {
    this.nodeUrl = nodeUrl;
  }


  public ComputeNodeInformation poolId(String poolId) {
    this.poolId = poolId;
    return this;
  }

  /**
   * Get poolId
   * @return poolId
   */
  @javax.annotation.Nullable
  public String getPoolId() {
    return poolId;
  }

  public void setPoolId(String poolId) {
    this.poolId = poolId;
  }


  public ComputeNodeInformation taskRootDirectory(String taskRootDirectory) {
    this.taskRootDirectory = taskRootDirectory;
    return this;
  }

  /**
   * Get taskRootDirectory
   * @return taskRootDirectory
   */
  @javax.annotation.Nullable
  public String getTaskRootDirectory() {
    return taskRootDirectory;
  }

  public void setTaskRootDirectory(String taskRootDirectory) {
    this.taskRootDirectory = taskRootDirectory;
  }


  public ComputeNodeInformation taskRootDirectoryUrl(String taskRootDirectoryUrl) {
    this.taskRootDirectoryUrl = taskRootDirectoryUrl;
    return this;
  }

  /**
   * Get taskRootDirectoryUrl
   * @return taskRootDirectoryUrl
   */
  @javax.annotation.Nullable
  public String getTaskRootDirectoryUrl() {
    return taskRootDirectoryUrl;
  }

  public void setTaskRootDirectoryUrl(String taskRootDirectoryUrl) {
    this.taskRootDirectoryUrl = taskRootDirectoryUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComputeNodeInformation computeNodeInformation = (ComputeNodeInformation) o;
    return Objects.equals(this.affinityId, computeNodeInformation.affinityId) &&
        Objects.equals(this.nodeId, computeNodeInformation.nodeId) &&
        Objects.equals(this.nodeUrl, computeNodeInformation.nodeUrl) &&
        Objects.equals(this.poolId, computeNodeInformation.poolId) &&
        Objects.equals(this.taskRootDirectory, computeNodeInformation.taskRootDirectory) &&
        Objects.equals(this.taskRootDirectoryUrl, computeNodeInformation.taskRootDirectoryUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affinityId, nodeId, nodeUrl, poolId, taskRootDirectory, taskRootDirectoryUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComputeNodeInformation {\n");
    sb.append("    affinityId: ").append(toIndentedString(affinityId)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    nodeUrl: ").append(toIndentedString(nodeUrl)).append("\n");
    sb.append("    poolId: ").append(toIndentedString(poolId)).append("\n");
    sb.append("    taskRootDirectory: ").append(toIndentedString(taskRootDirectory)).append("\n");
    sb.append("    taskRootDirectoryUrl: ").append(toIndentedString(taskRootDirectoryUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affinityId");
    openapiFields.add("nodeId");
    openapiFields.add("nodeUrl");
    openapiFields.add("poolId");
    openapiFields.add("taskRootDirectory");
    openapiFields.add("taskRootDirectoryUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComputeNodeInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComputeNodeInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComputeNodeInformation is not found in the empty JSON string", ComputeNodeInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComputeNodeInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComputeNodeInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("affinityId") != null && !jsonObj.get("affinityId").isJsonNull()) && !jsonObj.get("affinityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affinityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affinityId").toString()));
      }
      if ((jsonObj.get("nodeId") != null && !jsonObj.get("nodeId").isJsonNull()) && !jsonObj.get("nodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeId").toString()));
      }
      if ((jsonObj.get("nodeUrl") != null && !jsonObj.get("nodeUrl").isJsonNull()) && !jsonObj.get("nodeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeUrl").toString()));
      }
      if ((jsonObj.get("poolId") != null && !jsonObj.get("poolId").isJsonNull()) && !jsonObj.get("poolId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poolId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poolId").toString()));
      }
      if ((jsonObj.get("taskRootDirectory") != null && !jsonObj.get("taskRootDirectory").isJsonNull()) && !jsonObj.get("taskRootDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskRootDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskRootDirectory").toString()));
      }
      if ((jsonObj.get("taskRootDirectoryUrl") != null && !jsonObj.get("taskRootDirectoryUrl").isJsonNull()) && !jsonObj.get("taskRootDirectoryUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskRootDirectoryUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskRootDirectoryUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComputeNodeInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComputeNodeInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComputeNodeInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComputeNodeInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<ComputeNodeInformation>() {
           @Override
           public void write(JsonWriter out, ComputeNodeInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComputeNodeInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComputeNodeInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComputeNodeInformation
   * @throws IOException if the JSON string is invalid with respect to ComputeNodeInformation
   */
  public static ComputeNodeInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComputeNodeInformation.class);
  }

  /**
   * Convert an instance of ComputeNodeInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

