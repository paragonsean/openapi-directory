/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AzureBlobFileSystemConfiguration;
import org.openapitools.client.model.AzureFileShareConfiguration;
import org.openapitools.client.model.CIFSMountConfiguration;
import org.openapitools.client.model.NFSMountConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MountConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:32.540737-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MountConfiguration {
  public static final String SERIALIZED_NAME_AZURE_BLOB_FILE_SYSTEM_CONFIGURATION = "azureBlobFileSystemConfiguration";
  @SerializedName(SERIALIZED_NAME_AZURE_BLOB_FILE_SYSTEM_CONFIGURATION)
  private AzureBlobFileSystemConfiguration azureBlobFileSystemConfiguration;

  public static final String SERIALIZED_NAME_AZURE_FILE_SHARE_CONFIGURATION = "azureFileShareConfiguration";
  @SerializedName(SERIALIZED_NAME_AZURE_FILE_SHARE_CONFIGURATION)
  private AzureFileShareConfiguration azureFileShareConfiguration;

  public static final String SERIALIZED_NAME_CIFS_MOUNT_CONFIGURATION = "cifsMountConfiguration";
  @SerializedName(SERIALIZED_NAME_CIFS_MOUNT_CONFIGURATION)
  private CIFSMountConfiguration cifsMountConfiguration;

  public static final String SERIALIZED_NAME_NFS_MOUNT_CONFIGURATION = "nfsMountConfiguration";
  @SerializedName(SERIALIZED_NAME_NFS_MOUNT_CONFIGURATION)
  private NFSMountConfiguration nfsMountConfiguration;

  public MountConfiguration() {
  }

  public MountConfiguration azureBlobFileSystemConfiguration(AzureBlobFileSystemConfiguration azureBlobFileSystemConfiguration) {
    this.azureBlobFileSystemConfiguration = azureBlobFileSystemConfiguration;
    return this;
  }

  /**
   * Get azureBlobFileSystemConfiguration
   * @return azureBlobFileSystemConfiguration
   */
  @javax.annotation.Nullable
  public AzureBlobFileSystemConfiguration getAzureBlobFileSystemConfiguration() {
    return azureBlobFileSystemConfiguration;
  }

  public void setAzureBlobFileSystemConfiguration(AzureBlobFileSystemConfiguration azureBlobFileSystemConfiguration) {
    this.azureBlobFileSystemConfiguration = azureBlobFileSystemConfiguration;
  }


  public MountConfiguration azureFileShareConfiguration(AzureFileShareConfiguration azureFileShareConfiguration) {
    this.azureFileShareConfiguration = azureFileShareConfiguration;
    return this;
  }

  /**
   * Get azureFileShareConfiguration
   * @return azureFileShareConfiguration
   */
  @javax.annotation.Nullable
  public AzureFileShareConfiguration getAzureFileShareConfiguration() {
    return azureFileShareConfiguration;
  }

  public void setAzureFileShareConfiguration(AzureFileShareConfiguration azureFileShareConfiguration) {
    this.azureFileShareConfiguration = azureFileShareConfiguration;
  }


  public MountConfiguration cifsMountConfiguration(CIFSMountConfiguration cifsMountConfiguration) {
    this.cifsMountConfiguration = cifsMountConfiguration;
    return this;
  }

  /**
   * Get cifsMountConfiguration
   * @return cifsMountConfiguration
   */
  @javax.annotation.Nullable
  public CIFSMountConfiguration getCifsMountConfiguration() {
    return cifsMountConfiguration;
  }

  public void setCifsMountConfiguration(CIFSMountConfiguration cifsMountConfiguration) {
    this.cifsMountConfiguration = cifsMountConfiguration;
  }


  public MountConfiguration nfsMountConfiguration(NFSMountConfiguration nfsMountConfiguration) {
    this.nfsMountConfiguration = nfsMountConfiguration;
    return this;
  }

  /**
   * Get nfsMountConfiguration
   * @return nfsMountConfiguration
   */
  @javax.annotation.Nullable
  public NFSMountConfiguration getNfsMountConfiguration() {
    return nfsMountConfiguration;
  }

  public void setNfsMountConfiguration(NFSMountConfiguration nfsMountConfiguration) {
    this.nfsMountConfiguration = nfsMountConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MountConfiguration mountConfiguration = (MountConfiguration) o;
    return Objects.equals(this.azureBlobFileSystemConfiguration, mountConfiguration.azureBlobFileSystemConfiguration) &&
        Objects.equals(this.azureFileShareConfiguration, mountConfiguration.azureFileShareConfiguration) &&
        Objects.equals(this.cifsMountConfiguration, mountConfiguration.cifsMountConfiguration) &&
        Objects.equals(this.nfsMountConfiguration, mountConfiguration.nfsMountConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureBlobFileSystemConfiguration, azureFileShareConfiguration, cifsMountConfiguration, nfsMountConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MountConfiguration {\n");
    sb.append("    azureBlobFileSystemConfiguration: ").append(toIndentedString(azureBlobFileSystemConfiguration)).append("\n");
    sb.append("    azureFileShareConfiguration: ").append(toIndentedString(azureFileShareConfiguration)).append("\n");
    sb.append("    cifsMountConfiguration: ").append(toIndentedString(cifsMountConfiguration)).append("\n");
    sb.append("    nfsMountConfiguration: ").append(toIndentedString(nfsMountConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureBlobFileSystemConfiguration");
    openapiFields.add("azureFileShareConfiguration");
    openapiFields.add("cifsMountConfiguration");
    openapiFields.add("nfsMountConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MountConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MountConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MountConfiguration is not found in the empty JSON string", MountConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MountConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MountConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `azureBlobFileSystemConfiguration`
      if (jsonObj.get("azureBlobFileSystemConfiguration") != null && !jsonObj.get("azureBlobFileSystemConfiguration").isJsonNull()) {
        AzureBlobFileSystemConfiguration.validateJsonElement(jsonObj.get("azureBlobFileSystemConfiguration"));
      }
      // validate the optional field `azureFileShareConfiguration`
      if (jsonObj.get("azureFileShareConfiguration") != null && !jsonObj.get("azureFileShareConfiguration").isJsonNull()) {
        AzureFileShareConfiguration.validateJsonElement(jsonObj.get("azureFileShareConfiguration"));
      }
      // validate the optional field `cifsMountConfiguration`
      if (jsonObj.get("cifsMountConfiguration") != null && !jsonObj.get("cifsMountConfiguration").isJsonNull()) {
        CIFSMountConfiguration.validateJsonElement(jsonObj.get("cifsMountConfiguration"));
      }
      // validate the optional field `nfsMountConfiguration`
      if (jsonObj.get("nfsMountConfiguration") != null && !jsonObj.get("nfsMountConfiguration").isJsonNull()) {
        NFSMountConfiguration.validateJsonElement(jsonObj.get("nfsMountConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MountConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MountConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MountConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MountConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<MountConfiguration>() {
           @Override
           public void write(JsonWriter out, MountConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MountConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MountConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MountConfiguration
   * @throws IOException if the JSON string is invalid with respect to MountConfiguration
   */
  public static MountConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MountConfiguration.class);
  }

  /**
   * Convert an instance of MountConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

