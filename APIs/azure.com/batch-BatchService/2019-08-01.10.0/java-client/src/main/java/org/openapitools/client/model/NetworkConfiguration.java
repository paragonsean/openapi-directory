/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PoolEndpointConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The network configuration for a Pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:32.540737-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkConfiguration {
  /**
   * Gets or Sets dynamicVNetAssignmentScope
   */
  @JsonAdapter(DynamicVNetAssignmentScopeEnum.Adapter.class)
  public enum DynamicVNetAssignmentScopeEnum {
    NONE("none"),
    
    JOB("job");

    private String value;

    DynamicVNetAssignmentScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DynamicVNetAssignmentScopeEnum fromValue(String value) {
      for (DynamicVNetAssignmentScopeEnum b : DynamicVNetAssignmentScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DynamicVNetAssignmentScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DynamicVNetAssignmentScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DynamicVNetAssignmentScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DynamicVNetAssignmentScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DynamicVNetAssignmentScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DYNAMIC_V_NET_ASSIGNMENT_SCOPE = "dynamicVNetAssignmentScope";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_V_NET_ASSIGNMENT_SCOPE)
  private DynamicVNetAssignmentScopeEnum dynamicVNetAssignmentScope;

  public static final String SERIALIZED_NAME_ENDPOINT_CONFIGURATION = "endpointConfiguration";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_CONFIGURATION)
  private PoolEndpointConfiguration endpointConfiguration;

  public static final String SERIALIZED_NAME_PUBLIC_I_PS = "publicIPs";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_PS)
  private List<String> publicIPs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBNET_ID = "subnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public NetworkConfiguration() {
  }

  public NetworkConfiguration dynamicVNetAssignmentScope(DynamicVNetAssignmentScopeEnum dynamicVNetAssignmentScope) {
    this.dynamicVNetAssignmentScope = dynamicVNetAssignmentScope;
    return this;
  }

  /**
   * Get dynamicVNetAssignmentScope
   * @return dynamicVNetAssignmentScope
   */
  @javax.annotation.Nullable
  public DynamicVNetAssignmentScopeEnum getDynamicVNetAssignmentScope() {
    return dynamicVNetAssignmentScope;
  }

  public void setDynamicVNetAssignmentScope(DynamicVNetAssignmentScopeEnum dynamicVNetAssignmentScope) {
    this.dynamicVNetAssignmentScope = dynamicVNetAssignmentScope;
  }


  public NetworkConfiguration endpointConfiguration(PoolEndpointConfiguration endpointConfiguration) {
    this.endpointConfiguration = endpointConfiguration;
    return this;
  }

  /**
   * Get endpointConfiguration
   * @return endpointConfiguration
   */
  @javax.annotation.Nullable
  public PoolEndpointConfiguration getEndpointConfiguration() {
    return endpointConfiguration;
  }

  public void setEndpointConfiguration(PoolEndpointConfiguration endpointConfiguration) {
    this.endpointConfiguration = endpointConfiguration;
  }


  public NetworkConfiguration publicIPs(List<String> publicIPs) {
    this.publicIPs = publicIPs;
    return this;
  }

  public NetworkConfiguration addPublicIPsItem(String publicIPsItem) {
    if (this.publicIPs == null) {
      this.publicIPs = new ArrayList<>();
    }
    this.publicIPs.add(publicIPsItem);
    return this;
  }

  /**
   * The number of IPs specified here limits the maximum size of the Pool - 50 dedicated nodes or 20 low-priority nodes can be allocated for each public IP. For example, a pool needing 150 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
   * @return publicIPs
   */
  @javax.annotation.Nullable
  public List<String> getPublicIPs() {
    return publicIPs;
  }

  public void setPublicIPs(List<String> publicIPs) {
    this.publicIPs = publicIPs;
  }


  public NetworkConfiguration subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn&#39;t have enough free IP addresses, the Pool will partially allocate Nodes, and a resize error will occur. The &#39;MicrosoftAzureBatch&#39; service principal must have the &#39;Classic Virtual Machine Contributor&#39; Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with virtualMachineConfiguration only ARM virtual networks (&#39;Microsoft.Network/virtualNetworks&#39;) are supported, but for Pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For Pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkConfiguration networkConfiguration = (NetworkConfiguration) o;
    return Objects.equals(this.dynamicVNetAssignmentScope, networkConfiguration.dynamicVNetAssignmentScope) &&
        Objects.equals(this.endpointConfiguration, networkConfiguration.endpointConfiguration) &&
        Objects.equals(this.publicIPs, networkConfiguration.publicIPs) &&
        Objects.equals(this.subnetId, networkConfiguration.subnetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dynamicVNetAssignmentScope, endpointConfiguration, publicIPs, subnetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkConfiguration {\n");
    sb.append("    dynamicVNetAssignmentScope: ").append(toIndentedString(dynamicVNetAssignmentScope)).append("\n");
    sb.append("    endpointConfiguration: ").append(toIndentedString(endpointConfiguration)).append("\n");
    sb.append("    publicIPs: ").append(toIndentedString(publicIPs)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dynamicVNetAssignmentScope");
    openapiFields.add("endpointConfiguration");
    openapiFields.add("publicIPs");
    openapiFields.add("subnetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkConfiguration is not found in the empty JSON string", NetworkConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dynamicVNetAssignmentScope") != null && !jsonObj.get("dynamicVNetAssignmentScope").isJsonNull()) && !jsonObj.get("dynamicVNetAssignmentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dynamicVNetAssignmentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dynamicVNetAssignmentScope").toString()));
      }
      // validate the optional field `dynamicVNetAssignmentScope`
      if (jsonObj.get("dynamicVNetAssignmentScope") != null && !jsonObj.get("dynamicVNetAssignmentScope").isJsonNull()) {
        DynamicVNetAssignmentScopeEnum.validateJsonElement(jsonObj.get("dynamicVNetAssignmentScope"));
      }
      // validate the optional field `endpointConfiguration`
      if (jsonObj.get("endpointConfiguration") != null && !jsonObj.get("endpointConfiguration").isJsonNull()) {
        PoolEndpointConfiguration.validateJsonElement(jsonObj.get("endpointConfiguration"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("publicIPs") != null && !jsonObj.get("publicIPs").isJsonNull() && !jsonObj.get("publicIPs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIPs` to be an array in the JSON string but got `%s`", jsonObj.get("publicIPs").toString()));
      }
      if ((jsonObj.get("subnetId") != null && !jsonObj.get("subnetId").isJsonNull()) && !jsonObj.get("subnetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnetId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkConfiguration>() {
           @Override
           public void write(JsonWriter out, NetworkConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkConfiguration
   * @throws IOException if the JSON string is invalid with respect to NetworkConfiguration
   */
  public static NetworkConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkConfiguration.class);
  }

  /**
   * Convert an instance of NetworkConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

