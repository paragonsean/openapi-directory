/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InboundEndpointProtocol;
import org.openapitools.client.model.NetworkSecurityGroupRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InboundNATPool
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:32.540737-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InboundNATPool {
  public static final String SERIALIZED_NAME_BACKEND_PORT = "backendPort";
  @SerializedName(SERIALIZED_NAME_BACKEND_PORT)
  private Integer backendPort;

  public static final String SERIALIZED_NAME_FRONTEND_PORT_RANGE_END = "frontendPortRangeEnd";
  @SerializedName(SERIALIZED_NAME_FRONTEND_PORT_RANGE_END)
  private Integer frontendPortRangeEnd;

  public static final String SERIALIZED_NAME_FRONTEND_PORT_RANGE_START = "frontendPortRangeStart";
  @SerializedName(SERIALIZED_NAME_FRONTEND_PORT_RANGE_START)
  private Integer frontendPortRangeStart;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_SECURITY_GROUP_RULES = "networkSecurityGroupRules";
  @SerializedName(SERIALIZED_NAME_NETWORK_SECURITY_GROUP_RULES)
  private List<NetworkSecurityGroupRule> networkSecurityGroupRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private InboundEndpointProtocol protocol;

  public InboundNATPool() {
  }

  public InboundNATPool backendPort(Integer backendPort) {
    this.backendPort = backendPort;
    return this;
  }

  /**
   * This must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
   * @return backendPort
   */
  @javax.annotation.Nonnull
  public Integer getBackendPort() {
    return backendPort;
  }

  public void setBackendPort(Integer backendPort) {
    this.backendPort = backendPort;
  }


  public InboundNATPool frontendPortRangeEnd(Integer frontendPortRangeEnd) {
    this.frontendPortRangeEnd = frontendPortRangeEnd;
    return this;
  }

  /**
   * Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
   * @return frontendPortRangeEnd
   */
  @javax.annotation.Nonnull
  public Integer getFrontendPortRangeEnd() {
    return frontendPortRangeEnd;
  }

  public void setFrontendPortRangeEnd(Integer frontendPortRangeEnd) {
    this.frontendPortRangeEnd = frontendPortRangeEnd;
  }


  public InboundNATPool frontendPortRangeStart(Integer frontendPortRangeStart) {
    this.frontendPortRangeStart = frontendPortRangeStart;
    return this;
  }

  /**
   * Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
   * @return frontendPortRangeStart
   */
  @javax.annotation.Nonnull
  public Integer getFrontendPortRangeStart() {
    return frontendPortRangeStart;
  }

  public void setFrontendPortRangeStart(Integer frontendPortRangeStart) {
    this.frontendPortRangeStart = frontendPortRangeStart;
  }


  public InboundNATPool name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InboundNATPool networkSecurityGroupRules(List<NetworkSecurityGroupRule> networkSecurityGroupRules) {
    this.networkSecurityGroupRules = networkSecurityGroupRules;
    return this;
  }

  public InboundNATPool addNetworkSecurityGroupRulesItem(NetworkSecurityGroupRule networkSecurityGroupRulesItem) {
    if (this.networkSecurityGroupRules == null) {
      this.networkSecurityGroupRules = new ArrayList<>();
    }
    this.networkSecurityGroupRules.add(networkSecurityGroupRulesItem);
    return this;
  }

  /**
   * The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
   * @return networkSecurityGroupRules
   */
  @javax.annotation.Nullable
  public List<NetworkSecurityGroupRule> getNetworkSecurityGroupRules() {
    return networkSecurityGroupRules;
  }

  public void setNetworkSecurityGroupRules(List<NetworkSecurityGroupRule> networkSecurityGroupRules) {
    this.networkSecurityGroupRules = networkSecurityGroupRules;
  }


  public InboundNATPool protocol(InboundEndpointProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nonnull
  public InboundEndpointProtocol getProtocol() {
    return protocol;
  }

  public void setProtocol(InboundEndpointProtocol protocol) {
    this.protocol = protocol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundNATPool inboundNATPool = (InboundNATPool) o;
    return Objects.equals(this.backendPort, inboundNATPool.backendPort) &&
        Objects.equals(this.frontendPortRangeEnd, inboundNATPool.frontendPortRangeEnd) &&
        Objects.equals(this.frontendPortRangeStart, inboundNATPool.frontendPortRangeStart) &&
        Objects.equals(this.name, inboundNATPool.name) &&
        Objects.equals(this.networkSecurityGroupRules, inboundNATPool.networkSecurityGroupRules) &&
        Objects.equals(this.protocol, inboundNATPool.protocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendPort, frontendPortRangeEnd, frontendPortRangeStart, name, networkSecurityGroupRules, protocol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundNATPool {\n");
    sb.append("    backendPort: ").append(toIndentedString(backendPort)).append("\n");
    sb.append("    frontendPortRangeEnd: ").append(toIndentedString(frontendPortRangeEnd)).append("\n");
    sb.append("    frontendPortRangeStart: ").append(toIndentedString(frontendPortRangeStart)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkSecurityGroupRules: ").append(toIndentedString(networkSecurityGroupRules)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendPort");
    openapiFields.add("frontendPortRangeEnd");
    openapiFields.add("frontendPortRangeStart");
    openapiFields.add("name");
    openapiFields.add("networkSecurityGroupRules");
    openapiFields.add("protocol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("backendPort");
    openapiRequiredFields.add("frontendPortRangeEnd");
    openapiRequiredFields.add("frontendPortRangeStart");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("protocol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InboundNATPool
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboundNATPool.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundNATPool is not found in the empty JSON string", InboundNATPool.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboundNATPool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboundNATPool` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InboundNATPool.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("networkSecurityGroupRules") != null && !jsonObj.get("networkSecurityGroupRules").isJsonNull()) {
        JsonArray jsonArraynetworkSecurityGroupRules = jsonObj.getAsJsonArray("networkSecurityGroupRules");
        if (jsonArraynetworkSecurityGroupRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkSecurityGroupRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkSecurityGroupRules` to be an array in the JSON string but got `%s`", jsonObj.get("networkSecurityGroupRules").toString()));
          }

          // validate the optional field `networkSecurityGroupRules` (array)
          for (int i = 0; i < jsonArraynetworkSecurityGroupRules.size(); i++) {
            NetworkSecurityGroupRule.validateJsonElement(jsonArraynetworkSecurityGroupRules.get(i));
          };
        }
      }
      // validate the required field `protocol`
      InboundEndpointProtocol.validateJsonElement(jsonObj.get("protocol"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundNATPool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundNATPool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundNATPool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundNATPool.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundNATPool>() {
           @Override
           public void write(JsonWriter out, InboundNATPool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundNATPool read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InboundNATPool given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InboundNATPool
   * @throws IOException if the JSON string is invalid with respect to InboundNATPool
   */
  public static InboundNATPool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundNATPool.class);
  }

  /**
   * Convert an instance of InboundNATPool to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

