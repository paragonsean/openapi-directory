/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImageInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:32.540737-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageInformation {
  public static final String SERIALIZED_NAME_BATCH_SUPPORT_END_OF_LIFE = "batchSupportEndOfLife";
  @SerializedName(SERIALIZED_NAME_BATCH_SUPPORT_END_OF_LIFE)
  private OffsetDateTime batchSupportEndOfLife;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List<String> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_REFERENCE = "imageReference";
  @SerializedName(SERIALIZED_NAME_IMAGE_REFERENCE)
  private ImageReference imageReference;

  public static final String SERIALIZED_NAME_NODE_AGENT_S_K_U_ID = "nodeAgentSKUId";
  @SerializedName(SERIALIZED_NAME_NODE_AGENT_S_K_U_ID)
  private String nodeAgentSKUId;

  /**
   * Gets or Sets osType
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    LINUX("linux"),
    
    WINDOWS("windows");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  /**
   * Gets or Sets verificationType
   */
  @JsonAdapter(VerificationTypeEnum.Adapter.class)
  public enum VerificationTypeEnum {
    VERIFIED("verified"),
    
    UNVERIFIED("unverified");

    private String value;

    VerificationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerificationTypeEnum fromValue(String value) {
      for (VerificationTypeEnum b : VerificationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerificationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerificationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerificationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerificationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VerificationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERIFICATION_TYPE = "verificationType";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TYPE)
  private VerificationTypeEnum verificationType;

  public ImageInformation() {
  }

  public ImageInformation batchSupportEndOfLife(OffsetDateTime batchSupportEndOfLife) {
    this.batchSupportEndOfLife = batchSupportEndOfLife;
    return this;
  }

  /**
   * Get batchSupportEndOfLife
   * @return batchSupportEndOfLife
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBatchSupportEndOfLife() {
    return batchSupportEndOfLife;
  }

  public void setBatchSupportEndOfLife(OffsetDateTime batchSupportEndOfLife) {
    this.batchSupportEndOfLife = batchSupportEndOfLife;
  }


  public ImageInformation capabilities(List<String> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public ImageInformation addCapabilitiesItem(String capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

  /**
   * Not every capability of the Image is listed. Capabilities in this list are considered of special interest and are generally related to integration with other features in the Azure Batch service.
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<String> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(List<String> capabilities) {
    this.capabilities = capabilities;
  }


  public ImageInformation imageReference(ImageReference imageReference) {
    this.imageReference = imageReference;
    return this;
  }

  /**
   * Get imageReference
   * @return imageReference
   */
  @javax.annotation.Nonnull
  public ImageReference getImageReference() {
    return imageReference;
  }

  public void setImageReference(ImageReference imageReference) {
    this.imageReference = imageReference;
  }


  public ImageInformation nodeAgentSKUId(String nodeAgentSKUId) {
    this.nodeAgentSKUId = nodeAgentSKUId;
    return this;
  }

  /**
   * Get nodeAgentSKUId
   * @return nodeAgentSKUId
   */
  @javax.annotation.Nonnull
  public String getNodeAgentSKUId() {
    return nodeAgentSKUId;
  }

  public void setNodeAgentSKUId(String nodeAgentSKUId) {
    this.nodeAgentSKUId = nodeAgentSKUId;
  }


  public ImageInformation osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * Get osType
   * @return osType
   */
  @javax.annotation.Nonnull
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  public ImageInformation verificationType(VerificationTypeEnum verificationType) {
    this.verificationType = verificationType;
    return this;
  }

  /**
   * Get verificationType
   * @return verificationType
   */
  @javax.annotation.Nonnull
  public VerificationTypeEnum getVerificationType() {
    return verificationType;
  }

  public void setVerificationType(VerificationTypeEnum verificationType) {
    this.verificationType = verificationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageInformation imageInformation = (ImageInformation) o;
    return Objects.equals(this.batchSupportEndOfLife, imageInformation.batchSupportEndOfLife) &&
        Objects.equals(this.capabilities, imageInformation.capabilities) &&
        Objects.equals(this.imageReference, imageInformation.imageReference) &&
        Objects.equals(this.nodeAgentSKUId, imageInformation.nodeAgentSKUId) &&
        Objects.equals(this.osType, imageInformation.osType) &&
        Objects.equals(this.verificationType, imageInformation.verificationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchSupportEndOfLife, capabilities, imageReference, nodeAgentSKUId, osType, verificationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageInformation {\n");
    sb.append("    batchSupportEndOfLife: ").append(toIndentedString(batchSupportEndOfLife)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    imageReference: ").append(toIndentedString(imageReference)).append("\n");
    sb.append("    nodeAgentSKUId: ").append(toIndentedString(nodeAgentSKUId)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    verificationType: ").append(toIndentedString(verificationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("batchSupportEndOfLife");
    openapiFields.add("capabilities");
    openapiFields.add("imageReference");
    openapiFields.add("nodeAgentSKUId");
    openapiFields.add("osType");
    openapiFields.add("verificationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("imageReference");
    openapiRequiredFields.add("nodeAgentSKUId");
    openapiRequiredFields.add("osType");
    openapiRequiredFields.add("verificationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageInformation is not found in the empty JSON string", ImageInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImageInformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull() && !jsonObj.get("capabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
      }
      // validate the required field `imageReference`
      ImageReference.validateJsonElement(jsonObj.get("imageReference"));
      if (!jsonObj.get("nodeAgentSKUId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeAgentSKUId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeAgentSKUId").toString()));
      }
      if (!jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the required field `osType`
      OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      if (!jsonObj.get("verificationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationType").toString()));
      }
      // validate the required field `verificationType`
      VerificationTypeEnum.validateJsonElement(jsonObj.get("verificationType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageInformation>() {
           @Override
           public void write(JsonWriter out, ImageInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageInformation
   * @throws IOException if the JSON string is invalid with respect to ImageInformation
   */
  public static ImageInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageInformation.class);
  }

  /**
   * Convert an instance of ImageInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

