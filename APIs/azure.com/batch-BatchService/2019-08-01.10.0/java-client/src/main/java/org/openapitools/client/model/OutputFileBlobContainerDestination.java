/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OutputFileBlobContainerDestination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:32.540737-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OutputFileBlobContainerDestination {
  public static final String SERIALIZED_NAME_CONTAINER_URL = "containerUrl";
  @SerializedName(SERIALIZED_NAME_CONTAINER_URL)
  private String containerUrl;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public OutputFileBlobContainerDestination() {
  }

  public OutputFileBlobContainerDestination containerUrl(String containerUrl) {
    this.containerUrl = containerUrl;
    return this;
  }

  /**
   * The URL must include a Shared Access Signature (SAS) granting write permissions to the container.
   * @return containerUrl
   */
  @javax.annotation.Nonnull
  public String getContainerUrl() {
    return containerUrl;
  }

  public void setContainerUrl(String containerUrl) {
    this.containerUrl = containerUrl;
  }


  public OutputFileBlobContainerDestination path(String path) {
    this.path = path;
    return this;
  }

  /**
   * If filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputFileBlobContainerDestination outputFileBlobContainerDestination = (OutputFileBlobContainerDestination) o;
    return Objects.equals(this.containerUrl, outputFileBlobContainerDestination.containerUrl) &&
        Objects.equals(this.path, outputFileBlobContainerDestination.path);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerUrl, path);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputFileBlobContainerDestination {\n");
    sb.append("    containerUrl: ").append(toIndentedString(containerUrl)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerUrl");
    openapiFields.add("path");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("containerUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutputFileBlobContainerDestination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutputFileBlobContainerDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutputFileBlobContainerDestination is not found in the empty JSON string", OutputFileBlobContainerDestination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutputFileBlobContainerDestination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutputFileBlobContainerDestination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OutputFileBlobContainerDestination.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("containerUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerUrl").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutputFileBlobContainerDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutputFileBlobContainerDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutputFileBlobContainerDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutputFileBlobContainerDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<OutputFileBlobContainerDestination>() {
           @Override
           public void write(JsonWriter out, OutputFileBlobContainerDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutputFileBlobContainerDestination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutputFileBlobContainerDestination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutputFileBlobContainerDestination
   * @throws IOException if the JSON string is invalid with respect to OutputFileBlobContainerDestination
   */
  public static OutputFileBlobContainerDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutputFileBlobContainerDestination.class);
  }

  /**
   * Convert an instance of OutputFileBlobContainerDestination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

