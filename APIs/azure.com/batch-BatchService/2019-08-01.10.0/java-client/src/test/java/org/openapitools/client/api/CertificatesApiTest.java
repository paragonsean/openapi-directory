/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchError;
import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.CertificateAddParameter;
import org.openapitools.client.model.CertificateListResult;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CertificatesApi
 */
@Disabled
public class CertificatesApiTest {

    private final CertificatesApi api = new CertificatesApi();

    /**
     * Adds a Certificate to the specified Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateAddTest() throws ApiException {
        String apiVersion = null;
        CertificateAddParameter certificate = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.certificateAdd(apiVersion, certificate, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Cancels a failed deletion of a Certificate from the specified Account.
     *
     * If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the Certificate changes to deleteFailed. If you decide that you want to continue using the Certificate, you can use this operation to set the status of the Certificate back to active. If you intend to delete the Certificate, you do not need to run this operation after the deletion failed. You must make sure that the Certificate is not being used by any resources, and then you can try again to delete the Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateCancelDeletionTest() throws ApiException {
        String thumbprintAlgorithm = null;
        String thumbprint = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.certificateCancelDeletion(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Deletes a Certificate from the specified Account.
     *
     * You cannot delete a Certificate if a resource (Pool or Compute Node) is using it. Before you can delete a Certificate, you must therefore make sure that the Certificate is not associated with any existing Pools, the Certificate is not installed on any Nodes (even if you remove a Certificate from a Pool, it is not removed from existing Compute Nodes in that Pool until they restart), and no running Tasks depend on the Certificate. If you try to delete a Certificate that is in use, the deletion fails. The Certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateDeleteTest() throws ApiException {
        String thumbprintAlgorithm = null;
        String thumbprint = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.certificateDelete(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Gets information about the specified Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateGetTest() throws ApiException {
        String thumbprintAlgorithm = null;
        String thumbprint = null;
        String apiVersion = null;
        String $select = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        Certificate response = api.certificateGet(thumbprintAlgorithm, thumbprint, apiVersion, $select, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Lists all of the Certificates that have been added to the specified Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateListTest() throws ApiException {
        String apiVersion = null;
        String $filter = null;
        String $select = null;
        Integer maxresults = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        CertificateListResult response = api.certificateList(apiVersion, $filter, $select, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

}
