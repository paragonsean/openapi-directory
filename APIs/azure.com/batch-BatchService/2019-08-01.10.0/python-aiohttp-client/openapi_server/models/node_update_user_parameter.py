# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeUpdateUserParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry_time: datetime=None, password: str=None, ssh_public_key: str=None):
        """NodeUpdateUserParameter - a model defined in OpenAPI

        :param expiry_time: The expiry_time of this NodeUpdateUserParameter.
        :param password: The password of this NodeUpdateUserParameter.
        :param ssh_public_key: The ssh_public_key of this NodeUpdateUserParameter.
        """
        self.openapi_types = {
            'expiry_time': datetime,
            'password': str,
            'ssh_public_key': str
        }

        self.attribute_map = {
            'expiry_time': 'expiryTime',
            'password': 'password',
            'ssh_public_key': 'sshPublicKey'
        }

        self._expiry_time = expiry_time
        self._password = password
        self._ssh_public_key = ssh_public_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeUpdateUserParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeUpdateUserParameter of this NodeUpdateUserParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry_time(self):
        """Gets the expiry_time of this NodeUpdateUserParameter.

        If omitted, the default is 1 day from the current time. For Linux Compute Nodes, the expiryTime has a precision up to a day.

        :return: The expiry_time of this NodeUpdateUserParameter.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this NodeUpdateUserParameter.

        If omitted, the default is 1 day from the current time. For Linux Compute Nodes, the expiryTime has a precision up to a day.

        :param expiry_time: The expiry_time of this NodeUpdateUserParameter.
        :type expiry_time: datetime
        """

        self._expiry_time = expiry_time

    @property
    def password(self):
        """Gets the password of this NodeUpdateUserParameter.

        The password is required for Windows Compute Nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows Image reference). For Linux Compute Nodes, the password can optionally be specified along with the sshPublicKey property. If omitted, any existing password is removed.

        :return: The password of this NodeUpdateUserParameter.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this NodeUpdateUserParameter.

        The password is required for Windows Compute Nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows Image reference). For Linux Compute Nodes, the password can optionally be specified along with the sshPublicKey property. If omitted, any existing password is removed.

        :param password: The password of this NodeUpdateUserParameter.
        :type password: str
        """

        self._password = password

    @property
    def ssh_public_key(self):
        """Gets the ssh_public_key of this NodeUpdateUserParameter.

        The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux Compute Nodes. If this is specified for a Windows Compute Node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If omitted, any existing SSH public key is removed.

        :return: The ssh_public_key of this NodeUpdateUserParameter.
        :rtype: str
        """
        return self._ssh_public_key

    @ssh_public_key.setter
    def ssh_public_key(self, ssh_public_key):
        """Sets the ssh_public_key of this NodeUpdateUserParameter.

        The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux Compute Nodes. If this is specified for a Windows Compute Node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If omitted, any existing SSH public key is removed.

        :param ssh_public_key: The ssh_public_key of this NodeUpdateUserParameter.
        :type ssh_public_key: str
        """

        self._ssh_public_key = ssh_public_key
