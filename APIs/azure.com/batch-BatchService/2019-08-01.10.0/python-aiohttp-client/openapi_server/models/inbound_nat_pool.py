# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inbound_endpoint_protocol import InboundEndpointProtocol
from openapi_server.models.network_security_group_rule import NetworkSecurityGroupRule
from openapi_server import util


class InboundNATPool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_port: int=None, frontend_port_range_end: int=None, frontend_port_range_start: int=None, name: str=None, network_security_group_rules: List[NetworkSecurityGroupRule]=None, protocol: InboundEndpointProtocol=None):
        """InboundNATPool - a model defined in OpenAPI

        :param backend_port: The backend_port of this InboundNATPool.
        :param frontend_port_range_end: The frontend_port_range_end of this InboundNATPool.
        :param frontend_port_range_start: The frontend_port_range_start of this InboundNATPool.
        :param name: The name of this InboundNATPool.
        :param network_security_group_rules: The network_security_group_rules of this InboundNATPool.
        :param protocol: The protocol of this InboundNATPool.
        """
        self.openapi_types = {
            'backend_port': int,
            'frontend_port_range_end': int,
            'frontend_port_range_start': int,
            'name': str,
            'network_security_group_rules': List[NetworkSecurityGroupRule],
            'protocol': InboundEndpointProtocol
        }

        self.attribute_map = {
            'backend_port': 'backendPort',
            'frontend_port_range_end': 'frontendPortRangeEnd',
            'frontend_port_range_start': 'frontendPortRangeStart',
            'name': 'name',
            'network_security_group_rules': 'networkSecurityGroupRules',
            'protocol': 'protocol'
        }

        self._backend_port = backend_port
        self._frontend_port_range_end = frontend_port_range_end
        self._frontend_port_range_start = frontend_port_range_start
        self._name = name
        self._network_security_group_rules = network_security_group_rules
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundNATPool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InboundNATPool of this InboundNATPool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_port(self):
        """Gets the backend_port of this InboundNATPool.

        This must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.

        :return: The backend_port of this InboundNATPool.
        :rtype: int
        """
        return self._backend_port

    @backend_port.setter
    def backend_port(self, backend_port):
        """Sets the backend_port of this InboundNATPool.

        This must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.

        :param backend_port: The backend_port of this InboundNATPool.
        :type backend_port: int
        """
        if backend_port is None:
            raise ValueError("Invalid value for `backend_port`, must not be `None`")

        self._backend_port = backend_port

    @property
    def frontend_port_range_end(self):
        """Gets the frontend_port_range_end of this InboundNATPool.

        Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.

        :return: The frontend_port_range_end of this InboundNATPool.
        :rtype: int
        """
        return self._frontend_port_range_end

    @frontend_port_range_end.setter
    def frontend_port_range_end(self, frontend_port_range_end):
        """Sets the frontend_port_range_end of this InboundNATPool.

        Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.

        :param frontend_port_range_end: The frontend_port_range_end of this InboundNATPool.
        :type frontend_port_range_end: int
        """
        if frontend_port_range_end is None:
            raise ValueError("Invalid value for `frontend_port_range_end`, must not be `None`")

        self._frontend_port_range_end = frontend_port_range_end

    @property
    def frontend_port_range_start(self):
        """Gets the frontend_port_range_start of this InboundNATPool.

        Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.

        :return: The frontend_port_range_start of this InboundNATPool.
        :rtype: int
        """
        return self._frontend_port_range_start

    @frontend_port_range_start.setter
    def frontend_port_range_start(self, frontend_port_range_start):
        """Sets the frontend_port_range_start of this InboundNATPool.

        Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.

        :param frontend_port_range_start: The frontend_port_range_start of this InboundNATPool.
        :type frontend_port_range_start: int
        """
        if frontend_port_range_start is None:
            raise ValueError("Invalid value for `frontend_port_range_start`, must not be `None`")

        self._frontend_port_range_start = frontend_port_range_start

    @property
    def name(self):
        """Gets the name of this InboundNATPool.

        The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.

        :return: The name of this InboundNATPool.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InboundNATPool.

        The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.

        :param name: The name of this InboundNATPool.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def network_security_group_rules(self):
        """Gets the network_security_group_rules of this InboundNATPool.

        The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.

        :return: The network_security_group_rules of this InboundNATPool.
        :rtype: List[NetworkSecurityGroupRule]
        """
        return self._network_security_group_rules

    @network_security_group_rules.setter
    def network_security_group_rules(self, network_security_group_rules):
        """Sets the network_security_group_rules of this InboundNATPool.

        The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.

        :param network_security_group_rules: The network_security_group_rules of this InboundNATPool.
        :type network_security_group_rules: List[NetworkSecurityGroupRule]
        """

        self._network_security_group_rules = network_security_group_rules

    @property
    def protocol(self):
        """Gets the protocol of this InboundNATPool.


        :return: The protocol of this InboundNATPool.
        :rtype: InboundEndpointProtocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this InboundNATPool.


        :param protocol: The protocol of this InboundNATPool.
        :type protocol: InboundEndpointProtocol
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol
