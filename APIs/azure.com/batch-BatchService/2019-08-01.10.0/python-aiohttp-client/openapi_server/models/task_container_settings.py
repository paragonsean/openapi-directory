# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_registry import ContainerRegistry
from openapi_server import util


class TaskContainerSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_run_options: str=None, image_name: str=None, registry: ContainerRegistry=None, working_directory: str=None):
        """TaskContainerSettings - a model defined in OpenAPI

        :param container_run_options: The container_run_options of this TaskContainerSettings.
        :param image_name: The image_name of this TaskContainerSettings.
        :param registry: The registry of this TaskContainerSettings.
        :param working_directory: The working_directory of this TaskContainerSettings.
        """
        self.openapi_types = {
            'container_run_options': str,
            'image_name': str,
            'registry': ContainerRegistry,
            'working_directory': str
        }

        self.attribute_map = {
            'container_run_options': 'containerRunOptions',
            'image_name': 'imageName',
            'registry': 'registry',
            'working_directory': 'workingDirectory'
        }

        self._container_run_options = container_run_options
        self._image_name = image_name
        self._registry = registry
        self._working_directory = working_directory

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskContainerSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskContainerSettings of this TaskContainerSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_run_options(self):
        """Gets the container_run_options of this TaskContainerSettings.

        These additional options are supplied as arguments to the \"docker create\" command, in addition to those controlled by the Batch Service.

        :return: The container_run_options of this TaskContainerSettings.
        :rtype: str
        """
        return self._container_run_options

    @container_run_options.setter
    def container_run_options(self, container_run_options):
        """Sets the container_run_options of this TaskContainerSettings.

        These additional options are supplied as arguments to the \"docker create\" command, in addition to those controlled by the Batch Service.

        :param container_run_options: The container_run_options of this TaskContainerSettings.
        :type container_run_options: str
        """

        self._container_run_options = container_run_options

    @property
    def image_name(self):
        """Gets the image_name of this TaskContainerSettings.

        This is the full Image reference, as would be specified to \"docker pull\". If no tag is provided as part of the Image name, the tag \":latest\" is used as a default.

        :return: The image_name of this TaskContainerSettings.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this TaskContainerSettings.

        This is the full Image reference, as would be specified to \"docker pull\". If no tag is provided as part of the Image name, the tag \":latest\" is used as a default.

        :param image_name: The image_name of this TaskContainerSettings.
        :type image_name: str
        """
        if image_name is None:
            raise ValueError("Invalid value for `image_name`, must not be `None`")

        self._image_name = image_name

    @property
    def registry(self):
        """Gets the registry of this TaskContainerSettings.


        :return: The registry of this TaskContainerSettings.
        :rtype: ContainerRegistry
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this TaskContainerSettings.


        :param registry: The registry of this TaskContainerSettings.
        :type registry: ContainerRegistry
        """

        self._registry = registry

    @property
    def working_directory(self):
        """Gets the working_directory of this TaskContainerSettings.

        The default is 'taskWorkingDirectory'.

        :return: The working_directory of this TaskContainerSettings.
        :rtype: str
        """
        return self._working_directory

    @working_directory.setter
    def working_directory(self, working_directory):
        """Sets the working_directory of this TaskContainerSettings.

        The default is 'taskWorkingDirectory'.

        :param working_directory: The working_directory of this TaskContainerSettings.
        :type working_directory: str
        """
        allowed_values = ["taskWorkingDirectory", "containerImageDefault"]  # noqa: E501
        if working_directory not in allowed_values:
            raise ValueError(
                "Invalid value for `working_directory` ({0}), must be one of {1}"
                .format(working_directory, allowed_values)
            )

        self._working_directory = working_directory
