# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.resource_file import ResourceFile
from openapi_server.models.task_container_settings import TaskContainerSettings
from openapi_server.models.user_identity import UserIdentity
from openapi_server import util


class JobReleaseTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command_line: str=None, container_settings: TaskContainerSettings=None, environment_settings: List[EnvironmentSetting]=None, id: str=None, max_wall_clock_time: str=None, resource_files: List[ResourceFile]=None, retention_time: str=None, user_identity: UserIdentity=None):
        """JobReleaseTask - a model defined in OpenAPI

        :param command_line: The command_line of this JobReleaseTask.
        :param container_settings: The container_settings of this JobReleaseTask.
        :param environment_settings: The environment_settings of this JobReleaseTask.
        :param id: The id of this JobReleaseTask.
        :param max_wall_clock_time: The max_wall_clock_time of this JobReleaseTask.
        :param resource_files: The resource_files of this JobReleaseTask.
        :param retention_time: The retention_time of this JobReleaseTask.
        :param user_identity: The user_identity of this JobReleaseTask.
        """
        self.openapi_types = {
            'command_line': str,
            'container_settings': TaskContainerSettings,
            'environment_settings': List[EnvironmentSetting],
            'id': str,
            'max_wall_clock_time': str,
            'resource_files': List[ResourceFile],
            'retention_time': str,
            'user_identity': UserIdentity
        }

        self.attribute_map = {
            'command_line': 'commandLine',
            'container_settings': 'containerSettings',
            'environment_settings': 'environmentSettings',
            'id': 'id',
            'max_wall_clock_time': 'maxWallClockTime',
            'resource_files': 'resourceFiles',
            'retention_time': 'retentionTime',
            'user_identity': 'userIdentity'
        }

        self._command_line = command_line
        self._container_settings = container_settings
        self._environment_settings = environment_settings
        self._id = id
        self._max_wall_clock_time = max_wall_clock_time
        self._resource_files = resource_files
        self._retention_time = retention_time
        self._user_identity = user_identity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobReleaseTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobReleaseTask of this JobReleaseTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command_line(self):
        """Gets the command_line of this JobReleaseTask.

        The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).

        :return: The command_line of this JobReleaseTask.
        :rtype: str
        """
        return self._command_line

    @command_line.setter
    def command_line(self, command_line):
        """Sets the command_line of this JobReleaseTask.

        The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).

        :param command_line: The command_line of this JobReleaseTask.
        :type command_line: str
        """
        if command_line is None:
            raise ValueError("Invalid value for `command_line`, must not be `None`")

        self._command_line = command_line

    @property
    def container_settings(self):
        """Gets the container_settings of this JobReleaseTask.


        :return: The container_settings of this JobReleaseTask.
        :rtype: TaskContainerSettings
        """
        return self._container_settings

    @container_settings.setter
    def container_settings(self, container_settings):
        """Sets the container_settings of this JobReleaseTask.


        :param container_settings: The container_settings of this JobReleaseTask.
        :type container_settings: TaskContainerSettings
        """

        self._container_settings = container_settings

    @property
    def environment_settings(self):
        """Gets the environment_settings of this JobReleaseTask.


        :return: The environment_settings of this JobReleaseTask.
        :rtype: List[EnvironmentSetting]
        """
        return self._environment_settings

    @environment_settings.setter
    def environment_settings(self, environment_settings):
        """Sets the environment_settings of this JobReleaseTask.


        :param environment_settings: The environment_settings of this JobReleaseTask.
        :type environment_settings: List[EnvironmentSetting]
        """

        self._environment_settings = environment_settings

    @property
    def id(self):
        """Gets the id of this JobReleaseTask.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).

        :return: The id of this JobReleaseTask.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobReleaseTask.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).

        :param id: The id of this JobReleaseTask.
        :type id: str
        """

        self._id = id

    @property
    def max_wall_clock_time(self):
        """Gets the max_wall_clock_time of this JobReleaseTask.


        :return: The max_wall_clock_time of this JobReleaseTask.
        :rtype: str
        """
        return self._max_wall_clock_time

    @max_wall_clock_time.setter
    def max_wall_clock_time(self, max_wall_clock_time):
        """Sets the max_wall_clock_time of this JobReleaseTask.


        :param max_wall_clock_time: The max_wall_clock_time of this JobReleaseTask.
        :type max_wall_clock_time: str
        """

        self._max_wall_clock_time = max_wall_clock_time

    @property
    def resource_files(self):
        """Gets the resource_files of this JobReleaseTask.

        Files listed under this element are located in the Task's working directory.

        :return: The resource_files of this JobReleaseTask.
        :rtype: List[ResourceFile]
        """
        return self._resource_files

    @resource_files.setter
    def resource_files(self, resource_files):
        """Sets the resource_files of this JobReleaseTask.

        Files listed under this element are located in the Task's working directory.

        :param resource_files: The resource_files of this JobReleaseTask.
        :type resource_files: List[ResourceFile]
        """

        self._resource_files = resource_files

    @property
    def retention_time(self):
        """Gets the retention_time of this JobReleaseTask.

        The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.

        :return: The retention_time of this JobReleaseTask.
        :rtype: str
        """
        return self._retention_time

    @retention_time.setter
    def retention_time(self, retention_time):
        """Sets the retention_time of this JobReleaseTask.

        The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.

        :param retention_time: The retention_time of this JobReleaseTask.
        :type retention_time: str
        """

        self._retention_time = retention_time

    @property
    def user_identity(self):
        """Gets the user_identity of this JobReleaseTask.


        :return: The user_identity of this JobReleaseTask.
        :rtype: UserIdentity
        """
        return self._user_identity

    @user_identity.setter
    def user_identity(self, user_identity):
        """Sets the user_identity of this JobReleaseTask.


        :param user_identity: The user_identity of this JobReleaseTask.
        :type user_identity: UserIdentity
        """

        self._user_identity = user_identity
