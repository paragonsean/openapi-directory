# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AzureBlobFileSystemConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_key: str=None, account_name: str=None, blobfuse_options: str=None, container_name: str=None, relative_mount_path: str=None, sas_key: str=None):
        """AzureBlobFileSystemConfiguration - a model defined in OpenAPI

        :param account_key: The account_key of this AzureBlobFileSystemConfiguration.
        :param account_name: The account_name of this AzureBlobFileSystemConfiguration.
        :param blobfuse_options: The blobfuse_options of this AzureBlobFileSystemConfiguration.
        :param container_name: The container_name of this AzureBlobFileSystemConfiguration.
        :param relative_mount_path: The relative_mount_path of this AzureBlobFileSystemConfiguration.
        :param sas_key: The sas_key of this AzureBlobFileSystemConfiguration.
        """
        self.openapi_types = {
            'account_key': str,
            'account_name': str,
            'blobfuse_options': str,
            'container_name': str,
            'relative_mount_path': str,
            'sas_key': str
        }

        self.attribute_map = {
            'account_key': 'accountKey',
            'account_name': 'accountName',
            'blobfuse_options': 'blobfuseOptions',
            'container_name': 'containerName',
            'relative_mount_path': 'relativeMountPath',
            'sas_key': 'sasKey'
        }

        self._account_key = account_key
        self._account_name = account_name
        self._blobfuse_options = blobfuse_options
        self._container_name = container_name
        self._relative_mount_path = relative_mount_path
        self._sas_key = sas_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureBlobFileSystemConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureBlobFileSystemConfiguration of this AzureBlobFileSystemConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_key(self):
        """Gets the account_key of this AzureBlobFileSystemConfiguration.

        This property is mutually exclusive with sasKey and one must be specified.

        :return: The account_key of this AzureBlobFileSystemConfiguration.
        :rtype: str
        """
        return self._account_key

    @account_key.setter
    def account_key(self, account_key):
        """Sets the account_key of this AzureBlobFileSystemConfiguration.

        This property is mutually exclusive with sasKey and one must be specified.

        :param account_key: The account_key of this AzureBlobFileSystemConfiguration.
        :type account_key: str
        """

        self._account_key = account_key

    @property
    def account_name(self):
        """Gets the account_name of this AzureBlobFileSystemConfiguration.


        :return: The account_name of this AzureBlobFileSystemConfiguration.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AzureBlobFileSystemConfiguration.


        :param account_name: The account_name of this AzureBlobFileSystemConfiguration.
        :type account_name: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")

        self._account_name = account_name

    @property
    def blobfuse_options(self):
        """Gets the blobfuse_options of this AzureBlobFileSystemConfiguration.

        These are 'net use' options in Windows and 'mount' options in Linux.

        :return: The blobfuse_options of this AzureBlobFileSystemConfiguration.
        :rtype: str
        """
        return self._blobfuse_options

    @blobfuse_options.setter
    def blobfuse_options(self, blobfuse_options):
        """Sets the blobfuse_options of this AzureBlobFileSystemConfiguration.

        These are 'net use' options in Windows and 'mount' options in Linux.

        :param blobfuse_options: The blobfuse_options of this AzureBlobFileSystemConfiguration.
        :type blobfuse_options: str
        """

        self._blobfuse_options = blobfuse_options

    @property
    def container_name(self):
        """Gets the container_name of this AzureBlobFileSystemConfiguration.


        :return: The container_name of this AzureBlobFileSystemConfiguration.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this AzureBlobFileSystemConfiguration.


        :param container_name: The container_name of this AzureBlobFileSystemConfiguration.
        :type container_name: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")

        self._container_name = container_name

    @property
    def relative_mount_path(self):
        """Gets the relative_mount_path of this AzureBlobFileSystemConfiguration.

        All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.

        :return: The relative_mount_path of this AzureBlobFileSystemConfiguration.
        :rtype: str
        """
        return self._relative_mount_path

    @relative_mount_path.setter
    def relative_mount_path(self, relative_mount_path):
        """Sets the relative_mount_path of this AzureBlobFileSystemConfiguration.

        All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.

        :param relative_mount_path: The relative_mount_path of this AzureBlobFileSystemConfiguration.
        :type relative_mount_path: str
        """
        if relative_mount_path is None:
            raise ValueError("Invalid value for `relative_mount_path`, must not be `None`")

        self._relative_mount_path = relative_mount_path

    @property
    def sas_key(self):
        """Gets the sas_key of this AzureBlobFileSystemConfiguration.

        This property is mutually exclusive with accountKey and one must be specified.

        :return: The sas_key of this AzureBlobFileSystemConfiguration.
        :rtype: str
        """
        return self._sas_key

    @sas_key.setter
    def sas_key(self, sas_key):
        """Sets the sas_key of this AzureBlobFileSystemConfiguration.

        This property is mutually exclusive with accountKey and one must be specified.

        :param sas_key: The sas_key of this AzureBlobFileSystemConfiguration.
        :type sas_key: str
        """

        self._sas_key = sas_key
