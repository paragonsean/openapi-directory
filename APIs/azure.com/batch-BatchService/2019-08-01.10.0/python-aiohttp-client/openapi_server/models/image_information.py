# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_reference import ImageReference
from openapi_server import util


class ImageInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_support_end_of_life: datetime=None, capabilities: List[str]=None, image_reference: ImageReference=None, node_agent_skuid: str=None, os_type: str=None, verification_type: str=None):
        """ImageInformation - a model defined in OpenAPI

        :param batch_support_end_of_life: The batch_support_end_of_life of this ImageInformation.
        :param capabilities: The capabilities of this ImageInformation.
        :param image_reference: The image_reference of this ImageInformation.
        :param node_agent_skuid: The node_agent_skuid of this ImageInformation.
        :param os_type: The os_type of this ImageInformation.
        :param verification_type: The verification_type of this ImageInformation.
        """
        self.openapi_types = {
            'batch_support_end_of_life': datetime,
            'capabilities': List[str],
            'image_reference': ImageReference,
            'node_agent_skuid': str,
            'os_type': str,
            'verification_type': str
        }

        self.attribute_map = {
            'batch_support_end_of_life': 'batchSupportEndOfLife',
            'capabilities': 'capabilities',
            'image_reference': 'imageReference',
            'node_agent_skuid': 'nodeAgentSKUId',
            'os_type': 'osType',
            'verification_type': 'verificationType'
        }

        self._batch_support_end_of_life = batch_support_end_of_life
        self._capabilities = capabilities
        self._image_reference = image_reference
        self._node_agent_skuid = node_agent_skuid
        self._os_type = os_type
        self._verification_type = verification_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageInformation of this ImageInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_support_end_of_life(self):
        """Gets the batch_support_end_of_life of this ImageInformation.


        :return: The batch_support_end_of_life of this ImageInformation.
        :rtype: datetime
        """
        return self._batch_support_end_of_life

    @batch_support_end_of_life.setter
    def batch_support_end_of_life(self, batch_support_end_of_life):
        """Sets the batch_support_end_of_life of this ImageInformation.


        :param batch_support_end_of_life: The batch_support_end_of_life of this ImageInformation.
        :type batch_support_end_of_life: datetime
        """

        self._batch_support_end_of_life = batch_support_end_of_life

    @property
    def capabilities(self):
        """Gets the capabilities of this ImageInformation.

        Not every capability of the Image is listed. Capabilities in this list are considered of special interest and are generally related to integration with other features in the Azure Batch service.

        :return: The capabilities of this ImageInformation.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this ImageInformation.

        Not every capability of the Image is listed. Capabilities in this list are considered of special interest and are generally related to integration with other features in the Azure Batch service.

        :param capabilities: The capabilities of this ImageInformation.
        :type capabilities: List[str]
        """

        self._capabilities = capabilities

    @property
    def image_reference(self):
        """Gets the image_reference of this ImageInformation.


        :return: The image_reference of this ImageInformation.
        :rtype: ImageReference
        """
        return self._image_reference

    @image_reference.setter
    def image_reference(self, image_reference):
        """Sets the image_reference of this ImageInformation.


        :param image_reference: The image_reference of this ImageInformation.
        :type image_reference: ImageReference
        """
        if image_reference is None:
            raise ValueError("Invalid value for `image_reference`, must not be `None`")

        self._image_reference = image_reference

    @property
    def node_agent_skuid(self):
        """Gets the node_agent_skuid of this ImageInformation.


        :return: The node_agent_skuid of this ImageInformation.
        :rtype: str
        """
        return self._node_agent_skuid

    @node_agent_skuid.setter
    def node_agent_skuid(self, node_agent_skuid):
        """Sets the node_agent_skuid of this ImageInformation.


        :param node_agent_skuid: The node_agent_skuid of this ImageInformation.
        :type node_agent_skuid: str
        """
        if node_agent_skuid is None:
            raise ValueError("Invalid value for `node_agent_skuid`, must not be `None`")

        self._node_agent_skuid = node_agent_skuid

    @property
    def os_type(self):
        """Gets the os_type of this ImageInformation.


        :return: The os_type of this ImageInformation.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this ImageInformation.


        :param os_type: The os_type of this ImageInformation.
        :type os_type: str
        """
        allowed_values = ["linux", "windows"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def verification_type(self):
        """Gets the verification_type of this ImageInformation.


        :return: The verification_type of this ImageInformation.
        :rtype: str
        """
        return self._verification_type

    @verification_type.setter
    def verification_type(self, verification_type):
        """Sets the verification_type of this ImageInformation.


        :param verification_type: The verification_type of this ImageInformation.
        :type verification_type: str
        """
        allowed_values = ["verified", "unverified"]  # noqa: E501
        if verification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_type` ({0}), must be one of {1}"
                .format(verification_type, allowed_values)
            )

        self._verification_type = verification_type
