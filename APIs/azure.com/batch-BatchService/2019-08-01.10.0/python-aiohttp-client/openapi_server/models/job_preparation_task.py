# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.resource_file import ResourceFile
from openapi_server.models.task_constraints import TaskConstraints
from openapi_server.models.task_container_settings import TaskContainerSettings
from openapi_server.models.user_identity import UserIdentity
from openapi_server import util


class JobPreparationTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command_line: str=None, constraints: TaskConstraints=None, container_settings: TaskContainerSettings=None, environment_settings: List[EnvironmentSetting]=None, id: str=None, rerun_on_node_reboot_after_success: bool=None, resource_files: List[ResourceFile]=None, user_identity: UserIdentity=None, wait_for_success: bool=None):
        """JobPreparationTask - a model defined in OpenAPI

        :param command_line: The command_line of this JobPreparationTask.
        :param constraints: The constraints of this JobPreparationTask.
        :param container_settings: The container_settings of this JobPreparationTask.
        :param environment_settings: The environment_settings of this JobPreparationTask.
        :param id: The id of this JobPreparationTask.
        :param rerun_on_node_reboot_after_success: The rerun_on_node_reboot_after_success of this JobPreparationTask.
        :param resource_files: The resource_files of this JobPreparationTask.
        :param user_identity: The user_identity of this JobPreparationTask.
        :param wait_for_success: The wait_for_success of this JobPreparationTask.
        """
        self.openapi_types = {
            'command_line': str,
            'constraints': TaskConstraints,
            'container_settings': TaskContainerSettings,
            'environment_settings': List[EnvironmentSetting],
            'id': str,
            'rerun_on_node_reboot_after_success': bool,
            'resource_files': List[ResourceFile],
            'user_identity': UserIdentity,
            'wait_for_success': bool
        }

        self.attribute_map = {
            'command_line': 'commandLine',
            'constraints': 'constraints',
            'container_settings': 'containerSettings',
            'environment_settings': 'environmentSettings',
            'id': 'id',
            'rerun_on_node_reboot_after_success': 'rerunOnNodeRebootAfterSuccess',
            'resource_files': 'resourceFiles',
            'user_identity': 'userIdentity',
            'wait_for_success': 'waitForSuccess'
        }

        self._command_line = command_line
        self._constraints = constraints
        self._container_settings = container_settings
        self._environment_settings = environment_settings
        self._id = id
        self._rerun_on_node_reboot_after_success = rerun_on_node_reboot_after_success
        self._resource_files = resource_files
        self._user_identity = user_identity
        self._wait_for_success = wait_for_success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobPreparationTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobPreparationTask of this JobPreparationTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command_line(self):
        """Gets the command_line of this JobPreparationTask.

        The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).

        :return: The command_line of this JobPreparationTask.
        :rtype: str
        """
        return self._command_line

    @command_line.setter
    def command_line(self, command_line):
        """Sets the command_line of this JobPreparationTask.

        The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).

        :param command_line: The command_line of this JobPreparationTask.
        :type command_line: str
        """
        if command_line is None:
            raise ValueError("Invalid value for `command_line`, must not be `None`")

        self._command_line = command_line

    @property
    def constraints(self):
        """Gets the constraints of this JobPreparationTask.


        :return: The constraints of this JobPreparationTask.
        :rtype: TaskConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this JobPreparationTask.


        :param constraints: The constraints of this JobPreparationTask.
        :type constraints: TaskConstraints
        """

        self._constraints = constraints

    @property
    def container_settings(self):
        """Gets the container_settings of this JobPreparationTask.


        :return: The container_settings of this JobPreparationTask.
        :rtype: TaskContainerSettings
        """
        return self._container_settings

    @container_settings.setter
    def container_settings(self, container_settings):
        """Sets the container_settings of this JobPreparationTask.


        :param container_settings: The container_settings of this JobPreparationTask.
        :type container_settings: TaskContainerSettings
        """

        self._container_settings = container_settings

    @property
    def environment_settings(self):
        """Gets the environment_settings of this JobPreparationTask.


        :return: The environment_settings of this JobPreparationTask.
        :rtype: List[EnvironmentSetting]
        """
        return self._environment_settings

    @environment_settings.setter
    def environment_settings(self, environment_settings):
        """Sets the environment_settings of this JobPreparationTask.


        :param environment_settings: The environment_settings of this JobPreparationTask.
        :type environment_settings: List[EnvironmentSetting]
        """

        self._environment_settings = environment_settings

    @property
    def id(self):
        """Gets the id of this JobPreparationTask.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other Task in the Job can have the same ID as the Job Preparation Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).

        :return: The id of this JobPreparationTask.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobPreparationTask.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other Task in the Job can have the same ID as the Job Preparation Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).

        :param id: The id of this JobPreparationTask.
        :type id: str
        """

        self._id = id

    @property
    def rerun_on_node_reboot_after_success(self):
        """Gets the rerun_on_node_reboot_after_success of this JobPreparationTask.

        The Job Preparation Task is always rerun if a Compute Node is reimaged, or if the Job Preparation Task did not complete (e.g. because the reboot occurred while the Task was running). Therefore, you should always write a Job Preparation Task to be idempotent and to behave correctly if run multiple times. The default value is true.

        :return: The rerun_on_node_reboot_after_success of this JobPreparationTask.
        :rtype: bool
        """
        return self._rerun_on_node_reboot_after_success

    @rerun_on_node_reboot_after_success.setter
    def rerun_on_node_reboot_after_success(self, rerun_on_node_reboot_after_success):
        """Sets the rerun_on_node_reboot_after_success of this JobPreparationTask.

        The Job Preparation Task is always rerun if a Compute Node is reimaged, or if the Job Preparation Task did not complete (e.g. because the reboot occurred while the Task was running). Therefore, you should always write a Job Preparation Task to be idempotent and to behave correctly if run multiple times. The default value is true.

        :param rerun_on_node_reboot_after_success: The rerun_on_node_reboot_after_success of this JobPreparationTask.
        :type rerun_on_node_reboot_after_success: bool
        """

        self._rerun_on_node_reboot_after_success = rerun_on_node_reboot_after_success

    @property
    def resource_files(self):
        """Gets the resource_files of this JobPreparationTask.

        Files listed under this element are located in the Task's working directory.  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.

        :return: The resource_files of this JobPreparationTask.
        :rtype: List[ResourceFile]
        """
        return self._resource_files

    @resource_files.setter
    def resource_files(self, resource_files):
        """Sets the resource_files of this JobPreparationTask.

        Files listed under this element are located in the Task's working directory.  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.

        :param resource_files: The resource_files of this JobPreparationTask.
        :type resource_files: List[ResourceFile]
        """

        self._resource_files = resource_files

    @property
    def user_identity(self):
        """Gets the user_identity of this JobPreparationTask.


        :return: The user_identity of this JobPreparationTask.
        :rtype: UserIdentity
        """
        return self._user_identity

    @user_identity.setter
    def user_identity(self, user_identity):
        """Sets the user_identity of this JobPreparationTask.


        :param user_identity: The user_identity of this JobPreparationTask.
        :type user_identity: UserIdentity
        """

        self._user_identity = user_identity

    @property
    def wait_for_success(self):
        """Gets the wait_for_success of this JobPreparationTask.

        If true and the Job Preparation Task fails on a Node, the Batch service retries the Job Preparation Task up to its maximum retry count (as specified in the constraints element). If the Task has still not completed successfully after all retries, then the Batch service will not schedule Tasks of the Job to the Node. The Node remains active and eligible to run Tasks of other Jobs. If false, the Batch service will not wait for the Job Preparation Task to complete. In this case, other Tasks of the Job can start executing on the Compute Node while the Job Preparation Task is still running; and even if the Job Preparation Task fails, new Tasks will continue to be scheduled on the Compute Node. The default value is true.

        :return: The wait_for_success of this JobPreparationTask.
        :rtype: bool
        """
        return self._wait_for_success

    @wait_for_success.setter
    def wait_for_success(self, wait_for_success):
        """Sets the wait_for_success of this JobPreparationTask.

        If true and the Job Preparation Task fails on a Node, the Batch service retries the Job Preparation Task up to its maximum retry count (as specified in the constraints element). If the Task has still not completed successfully after all retries, then the Batch service will not schedule Tasks of the Job to the Node. The Node remains active and eligible to run Tasks of other Jobs. If false, the Batch service will not wait for the Job Preparation Task to complete. In this case, other Tasks of the Job can start executing on the Compute Node while the Job Preparation Task is still running; and even if the Job Preparation Task fails, new Tasks will continue to be scheduled on the Compute Node. The default value is true.

        :param wait_for_success: The wait_for_success of this JobPreparationTask.
        :type wait_for_success: bool
        """

        self._wait_for_success = wait_for_success
