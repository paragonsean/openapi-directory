# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CIFSMountConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mount_options: str=None, password: str=None, relative_mount_path: str=None, source: str=None, username: str=None):
        """CIFSMountConfiguration - a model defined in OpenAPI

        :param mount_options: The mount_options of this CIFSMountConfiguration.
        :param password: The password of this CIFSMountConfiguration.
        :param relative_mount_path: The relative_mount_path of this CIFSMountConfiguration.
        :param source: The source of this CIFSMountConfiguration.
        :param username: The username of this CIFSMountConfiguration.
        """
        self.openapi_types = {
            'mount_options': str,
            'password': str,
            'relative_mount_path': str,
            'source': str,
            'username': str
        }

        self.attribute_map = {
            'mount_options': 'mountOptions',
            'password': 'password',
            'relative_mount_path': 'relativeMountPath',
            'source': 'source',
            'username': 'username'
        }

        self._mount_options = mount_options
        self._password = password
        self._relative_mount_path = relative_mount_path
        self._source = source
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CIFSMountConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CIFSMountConfiguration of this CIFSMountConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mount_options(self):
        """Gets the mount_options of this CIFSMountConfiguration.

        These are 'net use' options in Windows and 'mount' options in Linux.

        :return: The mount_options of this CIFSMountConfiguration.
        :rtype: str
        """
        return self._mount_options

    @mount_options.setter
    def mount_options(self, mount_options):
        """Sets the mount_options of this CIFSMountConfiguration.

        These are 'net use' options in Windows and 'mount' options in Linux.

        :param mount_options: The mount_options of this CIFSMountConfiguration.
        :type mount_options: str
        """

        self._mount_options = mount_options

    @property
    def password(self):
        """Gets the password of this CIFSMountConfiguration.


        :return: The password of this CIFSMountConfiguration.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CIFSMountConfiguration.


        :param password: The password of this CIFSMountConfiguration.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def relative_mount_path(self):
        """Gets the relative_mount_path of this CIFSMountConfiguration.

        All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.

        :return: The relative_mount_path of this CIFSMountConfiguration.
        :rtype: str
        """
        return self._relative_mount_path

    @relative_mount_path.setter
    def relative_mount_path(self, relative_mount_path):
        """Sets the relative_mount_path of this CIFSMountConfiguration.

        All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.

        :param relative_mount_path: The relative_mount_path of this CIFSMountConfiguration.
        :type relative_mount_path: str
        """
        if relative_mount_path is None:
            raise ValueError("Invalid value for `relative_mount_path`, must not be `None`")

        self._relative_mount_path = relative_mount_path

    @property
    def source(self):
        """Gets the source of this CIFSMountConfiguration.


        :return: The source of this CIFSMountConfiguration.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CIFSMountConfiguration.


        :param source: The source of this CIFSMountConfiguration.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def username(self):
        """Gets the username of this CIFSMountConfiguration.


        :return: The username of this CIFSMountConfiguration.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CIFSMountConfiguration.


        :param username: The username of this CIFSMountConfiguration.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
