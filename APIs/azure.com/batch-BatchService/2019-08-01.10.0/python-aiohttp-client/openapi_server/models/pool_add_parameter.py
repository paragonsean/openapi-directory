# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_package_reference import ApplicationPackageReference
from openapi_server.models.certificate_reference import CertificateReference
from openapi_server.models.cloud_service_configuration import CloudServiceConfiguration
from openapi_server.models.metadata_item import MetadataItem
from openapi_server.models.mount_configuration import MountConfiguration
from openapi_server.models.network_configuration import NetworkConfiguration
from openapi_server.models.start_task import StartTask
from openapi_server.models.task_scheduling_policy import TaskSchedulingPolicy
from openapi_server.models.user_account import UserAccount
from openapi_server.models.virtual_machine_configuration import VirtualMachineConfiguration
from openapi_server import util


class PoolAddParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_licenses: List[str]=None, application_package_references: List[ApplicationPackageReference]=None, auto_scale_evaluation_interval: str=None, auto_scale_formula: str=None, certificate_references: List[CertificateReference]=None, cloud_service_configuration: CloudServiceConfiguration=None, display_name: str=None, enable_auto_scale: bool=None, enable_inter_node_communication: bool=None, id: str=None, max_tasks_per_node: int=None, metadata: List[MetadataItem]=None, mount_configuration: List[MountConfiguration]=None, network_configuration: NetworkConfiguration=None, resize_timeout: str=None, start_task: StartTask=None, target_dedicated_nodes: int=None, target_low_priority_nodes: int=None, task_scheduling_policy: TaskSchedulingPolicy=None, user_accounts: List[UserAccount]=None, virtual_machine_configuration: VirtualMachineConfiguration=None, vm_size: str=None):
        """PoolAddParameter - a model defined in OpenAPI

        :param application_licenses: The application_licenses of this PoolAddParameter.
        :param application_package_references: The application_package_references of this PoolAddParameter.
        :param auto_scale_evaluation_interval: The auto_scale_evaluation_interval of this PoolAddParameter.
        :param auto_scale_formula: The auto_scale_formula of this PoolAddParameter.
        :param certificate_references: The certificate_references of this PoolAddParameter.
        :param cloud_service_configuration: The cloud_service_configuration of this PoolAddParameter.
        :param display_name: The display_name of this PoolAddParameter.
        :param enable_auto_scale: The enable_auto_scale of this PoolAddParameter.
        :param enable_inter_node_communication: The enable_inter_node_communication of this PoolAddParameter.
        :param id: The id of this PoolAddParameter.
        :param max_tasks_per_node: The max_tasks_per_node of this PoolAddParameter.
        :param metadata: The metadata of this PoolAddParameter.
        :param mount_configuration: The mount_configuration of this PoolAddParameter.
        :param network_configuration: The network_configuration of this PoolAddParameter.
        :param resize_timeout: The resize_timeout of this PoolAddParameter.
        :param start_task: The start_task of this PoolAddParameter.
        :param target_dedicated_nodes: The target_dedicated_nodes of this PoolAddParameter.
        :param target_low_priority_nodes: The target_low_priority_nodes of this PoolAddParameter.
        :param task_scheduling_policy: The task_scheduling_policy of this PoolAddParameter.
        :param user_accounts: The user_accounts of this PoolAddParameter.
        :param virtual_machine_configuration: The virtual_machine_configuration of this PoolAddParameter.
        :param vm_size: The vm_size of this PoolAddParameter.
        """
        self.openapi_types = {
            'application_licenses': List[str],
            'application_package_references': List[ApplicationPackageReference],
            'auto_scale_evaluation_interval': str,
            'auto_scale_formula': str,
            'certificate_references': List[CertificateReference],
            'cloud_service_configuration': CloudServiceConfiguration,
            'display_name': str,
            'enable_auto_scale': bool,
            'enable_inter_node_communication': bool,
            'id': str,
            'max_tasks_per_node': int,
            'metadata': List[MetadataItem],
            'mount_configuration': List[MountConfiguration],
            'network_configuration': NetworkConfiguration,
            'resize_timeout': str,
            'start_task': StartTask,
            'target_dedicated_nodes': int,
            'target_low_priority_nodes': int,
            'task_scheduling_policy': TaskSchedulingPolicy,
            'user_accounts': List[UserAccount],
            'virtual_machine_configuration': VirtualMachineConfiguration,
            'vm_size': str
        }

        self.attribute_map = {
            'application_licenses': 'applicationLicenses',
            'application_package_references': 'applicationPackageReferences',
            'auto_scale_evaluation_interval': 'autoScaleEvaluationInterval',
            'auto_scale_formula': 'autoScaleFormula',
            'certificate_references': 'certificateReferences',
            'cloud_service_configuration': 'cloudServiceConfiguration',
            'display_name': 'displayName',
            'enable_auto_scale': 'enableAutoScale',
            'enable_inter_node_communication': 'enableInterNodeCommunication',
            'id': 'id',
            'max_tasks_per_node': 'maxTasksPerNode',
            'metadata': 'metadata',
            'mount_configuration': 'mountConfiguration',
            'network_configuration': 'networkConfiguration',
            'resize_timeout': 'resizeTimeout',
            'start_task': 'startTask',
            'target_dedicated_nodes': 'targetDedicatedNodes',
            'target_low_priority_nodes': 'targetLowPriorityNodes',
            'task_scheduling_policy': 'taskSchedulingPolicy',
            'user_accounts': 'userAccounts',
            'virtual_machine_configuration': 'virtualMachineConfiguration',
            'vm_size': 'vmSize'
        }

        self._application_licenses = application_licenses
        self._application_package_references = application_package_references
        self._auto_scale_evaluation_interval = auto_scale_evaluation_interval
        self._auto_scale_formula = auto_scale_formula
        self._certificate_references = certificate_references
        self._cloud_service_configuration = cloud_service_configuration
        self._display_name = display_name
        self._enable_auto_scale = enable_auto_scale
        self._enable_inter_node_communication = enable_inter_node_communication
        self._id = id
        self._max_tasks_per_node = max_tasks_per_node
        self._metadata = metadata
        self._mount_configuration = mount_configuration
        self._network_configuration = network_configuration
        self._resize_timeout = resize_timeout
        self._start_task = start_task
        self._target_dedicated_nodes = target_dedicated_nodes
        self._target_low_priority_nodes = target_low_priority_nodes
        self._task_scheduling_policy = task_scheduling_policy
        self._user_accounts = user_accounts
        self._virtual_machine_configuration = virtual_machine_configuration
        self._vm_size = vm_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PoolAddParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PoolAddParameter of this PoolAddParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_licenses(self):
        """Gets the application_licenses of this PoolAddParameter.

        The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail.

        :return: The application_licenses of this PoolAddParameter.
        :rtype: List[str]
        """
        return self._application_licenses

    @application_licenses.setter
    def application_licenses(self, application_licenses):
        """Sets the application_licenses of this PoolAddParameter.

        The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail.

        :param application_licenses: The application_licenses of this PoolAddParameter.
        :type application_licenses: List[str]
        """

        self._application_licenses = application_licenses

    @property
    def application_package_references(self):
        """Gets the application_package_references of this PoolAddParameter.

        Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.

        :return: The application_package_references of this PoolAddParameter.
        :rtype: List[ApplicationPackageReference]
        """
        return self._application_package_references

    @application_package_references.setter
    def application_package_references(self, application_package_references):
        """Sets the application_package_references of this PoolAddParameter.

        Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.

        :param application_package_references: The application_package_references of this PoolAddParameter.
        :type application_package_references: List[ApplicationPackageReference]
        """

        self._application_package_references = application_package_references

    @property
    def auto_scale_evaluation_interval(self):
        """Gets the auto_scale_evaluation_interval of this PoolAddParameter.

        The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).

        :return: The auto_scale_evaluation_interval of this PoolAddParameter.
        :rtype: str
        """
        return self._auto_scale_evaluation_interval

    @auto_scale_evaluation_interval.setter
    def auto_scale_evaluation_interval(self, auto_scale_evaluation_interval):
        """Sets the auto_scale_evaluation_interval of this PoolAddParameter.

        The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).

        :param auto_scale_evaluation_interval: The auto_scale_evaluation_interval of this PoolAddParameter.
        :type auto_scale_evaluation_interval: str
        """

        self._auto_scale_evaluation_interval = auto_scale_evaluation_interval

    @property
    def auto_scale_formula(self):
        """Gets the auto_scale_formula of this PoolAddParameter.

        This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the Pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see 'Automatically scale Compute Nodes in an Azure Batch Pool' (https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/).

        :return: The auto_scale_formula of this PoolAddParameter.
        :rtype: str
        """
        return self._auto_scale_formula

    @auto_scale_formula.setter
    def auto_scale_formula(self, auto_scale_formula):
        """Sets the auto_scale_formula of this PoolAddParameter.

        This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the Pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see 'Automatically scale Compute Nodes in an Azure Batch Pool' (https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/).

        :param auto_scale_formula: The auto_scale_formula of this PoolAddParameter.
        :type auto_scale_formula: str
        """

        self._auto_scale_formula = auto_scale_formula

    @property
    def certificate_references(self):
        """Gets the certificate_references of this PoolAddParameter.

        For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.

        :return: The certificate_references of this PoolAddParameter.
        :rtype: List[CertificateReference]
        """
        return self._certificate_references

    @certificate_references.setter
    def certificate_references(self, certificate_references):
        """Sets the certificate_references of this PoolAddParameter.

        For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.

        :param certificate_references: The certificate_references of this PoolAddParameter.
        :type certificate_references: List[CertificateReference]
        """

        self._certificate_references = certificate_references

    @property
    def cloud_service_configuration(self):
        """Gets the cloud_service_configuration of this PoolAddParameter.


        :return: The cloud_service_configuration of this PoolAddParameter.
        :rtype: CloudServiceConfiguration
        """
        return self._cloud_service_configuration

    @cloud_service_configuration.setter
    def cloud_service_configuration(self, cloud_service_configuration):
        """Sets the cloud_service_configuration of this PoolAddParameter.


        :param cloud_service_configuration: The cloud_service_configuration of this PoolAddParameter.
        :type cloud_service_configuration: CloudServiceConfiguration
        """

        self._cloud_service_configuration = cloud_service_configuration

    @property
    def display_name(self):
        """Gets the display_name of this PoolAddParameter.

        The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :return: The display_name of this PoolAddParameter.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PoolAddParameter.

        The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :param display_name: The display_name of this PoolAddParameter.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enable_auto_scale(self):
        """Gets the enable_auto_scale of this PoolAddParameter.

        If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.

        :return: The enable_auto_scale of this PoolAddParameter.
        :rtype: bool
        """
        return self._enable_auto_scale

    @enable_auto_scale.setter
    def enable_auto_scale(self, enable_auto_scale):
        """Sets the enable_auto_scale of this PoolAddParameter.

        If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.

        :param enable_auto_scale: The enable_auto_scale of this PoolAddParameter.
        :type enable_auto_scale: bool
        """

        self._enable_auto_scale = enable_auto_scale

    @property
    def enable_inter_node_communication(self):
        """Gets the enable_inter_node_communication of this PoolAddParameter.

        Enabling inter-node communication limits the maximum size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching its desired size. The default value is false.

        :return: The enable_inter_node_communication of this PoolAddParameter.
        :rtype: bool
        """
        return self._enable_inter_node_communication

    @enable_inter_node_communication.setter
    def enable_inter_node_communication(self, enable_inter_node_communication):
        """Sets the enable_inter_node_communication of this PoolAddParameter.

        Enabling inter-node communication limits the maximum size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching its desired size. The default value is false.

        :param enable_inter_node_communication: The enable_inter_node_communication of this PoolAddParameter.
        :type enable_inter_node_communication: bool
        """

        self._enable_inter_node_communication = enable_inter_node_communication

    @property
    def id(self):
        """Gets the id of this PoolAddParameter.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two Pool IDs within an Account that differ only by case).

        :return: The id of this PoolAddParameter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PoolAddParameter.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two Pool IDs within an Account that differ only by case).

        :param id: The id of this PoolAddParameter.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def max_tasks_per_node(self):
        """Gets the max_tasks_per_node of this PoolAddParameter.

        The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the Pool or 256.

        :return: The max_tasks_per_node of this PoolAddParameter.
        :rtype: int
        """
        return self._max_tasks_per_node

    @max_tasks_per_node.setter
    def max_tasks_per_node(self, max_tasks_per_node):
        """Sets the max_tasks_per_node of this PoolAddParameter.

        The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the Pool or 256.

        :param max_tasks_per_node: The max_tasks_per_node of this PoolAddParameter.
        :type max_tasks_per_node: int
        """

        self._max_tasks_per_node = max_tasks_per_node

    @property
    def metadata(self):
        """Gets the metadata of this PoolAddParameter.

        The Batch service does not assign any meaning to metadata; it is solely for the use of user code.

        :return: The metadata of this PoolAddParameter.
        :rtype: List[MetadataItem]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PoolAddParameter.

        The Batch service does not assign any meaning to metadata; it is solely for the use of user code.

        :param metadata: The metadata of this PoolAddParameter.
        :type metadata: List[MetadataItem]
        """

        self._metadata = metadata

    @property
    def mount_configuration(self):
        """Gets the mount_configuration of this PoolAddParameter.

        Mount the storage using Azure fileshare, NFS, CIFS or Blobfuse based file system.

        :return: The mount_configuration of this PoolAddParameter.
        :rtype: List[MountConfiguration]
        """
        return self._mount_configuration

    @mount_configuration.setter
    def mount_configuration(self, mount_configuration):
        """Sets the mount_configuration of this PoolAddParameter.

        Mount the storage using Azure fileshare, NFS, CIFS or Blobfuse based file system.

        :param mount_configuration: The mount_configuration of this PoolAddParameter.
        :type mount_configuration: List[MountConfiguration]
        """

        self._mount_configuration = mount_configuration

    @property
    def network_configuration(self):
        """Gets the network_configuration of this PoolAddParameter.


        :return: The network_configuration of this PoolAddParameter.
        :rtype: NetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this PoolAddParameter.


        :param network_configuration: The network_configuration of this PoolAddParameter.
        :type network_configuration: NetworkConfiguration
        """

        self._network_configuration = network_configuration

    @property
    def resize_timeout(self):
        """Gets the resize_timeout of this PoolAddParameter.

        This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).

        :return: The resize_timeout of this PoolAddParameter.
        :rtype: str
        """
        return self._resize_timeout

    @resize_timeout.setter
    def resize_timeout(self, resize_timeout):
        """Sets the resize_timeout of this PoolAddParameter.

        This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).

        :param resize_timeout: The resize_timeout of this PoolAddParameter.
        :type resize_timeout: str
        """

        self._resize_timeout = resize_timeout

    @property
    def start_task(self):
        """Gets the start_task of this PoolAddParameter.


        :return: The start_task of this PoolAddParameter.
        :rtype: StartTask
        """
        return self._start_task

    @start_task.setter
    def start_task(self, start_task):
        """Sets the start_task of this PoolAddParameter.


        :param start_task: The start_task of this PoolAddParameter.
        :type start_task: StartTask
        """

        self._start_task = start_task

    @property
    def target_dedicated_nodes(self):
        """Gets the target_dedicated_nodes of this PoolAddParameter.

        This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.

        :return: The target_dedicated_nodes of this PoolAddParameter.
        :rtype: int
        """
        return self._target_dedicated_nodes

    @target_dedicated_nodes.setter
    def target_dedicated_nodes(self, target_dedicated_nodes):
        """Sets the target_dedicated_nodes of this PoolAddParameter.

        This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.

        :param target_dedicated_nodes: The target_dedicated_nodes of this PoolAddParameter.
        :type target_dedicated_nodes: int
        """

        self._target_dedicated_nodes = target_dedicated_nodes

    @property
    def target_low_priority_nodes(self):
        """Gets the target_low_priority_nodes of this PoolAddParameter.

        This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.

        :return: The target_low_priority_nodes of this PoolAddParameter.
        :rtype: int
        """
        return self._target_low_priority_nodes

    @target_low_priority_nodes.setter
    def target_low_priority_nodes(self, target_low_priority_nodes):
        """Sets the target_low_priority_nodes of this PoolAddParameter.

        This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.

        :param target_low_priority_nodes: The target_low_priority_nodes of this PoolAddParameter.
        :type target_low_priority_nodes: int
        """

        self._target_low_priority_nodes = target_low_priority_nodes

    @property
    def task_scheduling_policy(self):
        """Gets the task_scheduling_policy of this PoolAddParameter.


        :return: The task_scheduling_policy of this PoolAddParameter.
        :rtype: TaskSchedulingPolicy
        """
        return self._task_scheduling_policy

    @task_scheduling_policy.setter
    def task_scheduling_policy(self, task_scheduling_policy):
        """Sets the task_scheduling_policy of this PoolAddParameter.


        :param task_scheduling_policy: The task_scheduling_policy of this PoolAddParameter.
        :type task_scheduling_policy: TaskSchedulingPolicy
        """

        self._task_scheduling_policy = task_scheduling_policy

    @property
    def user_accounts(self):
        """Gets the user_accounts of this PoolAddParameter.


        :return: The user_accounts of this PoolAddParameter.
        :rtype: List[UserAccount]
        """
        return self._user_accounts

    @user_accounts.setter
    def user_accounts(self, user_accounts):
        """Sets the user_accounts of this PoolAddParameter.


        :param user_accounts: The user_accounts of this PoolAddParameter.
        :type user_accounts: List[UserAccount]
        """

        self._user_accounts = user_accounts

    @property
    def virtual_machine_configuration(self):
        """Gets the virtual_machine_configuration of this PoolAddParameter.


        :return: The virtual_machine_configuration of this PoolAddParameter.
        :rtype: VirtualMachineConfiguration
        """
        return self._virtual_machine_configuration

    @virtual_machine_configuration.setter
    def virtual_machine_configuration(self, virtual_machine_configuration):
        """Sets the virtual_machine_configuration of this PoolAddParameter.


        :param virtual_machine_configuration: The virtual_machine_configuration of this PoolAddParameter.
        :type virtual_machine_configuration: VirtualMachineConfiguration
        """

        self._virtual_machine_configuration = virtual_machine_configuration

    @property
    def vm_size(self):
        """Gets the vm_size of this PoolAddParameter.

        For information about available sizes of virtual machines for Cloud Services Pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for Pools using Images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).

        :return: The vm_size of this PoolAddParameter.
        :rtype: str
        """
        return self._vm_size

    @vm_size.setter
    def vm_size(self, vm_size):
        """Sets the vm_size of this PoolAddParameter.

        For information about available sizes of virtual machines for Cloud Services Pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for Pools using Images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).

        :param vm_size: The vm_size of this PoolAddParameter.
        :type vm_size: str
        """
        if vm_size is None:
            raise ValueError("Invalid value for `vm_size`, must not be `None`")

        self._vm_size = vm_size
