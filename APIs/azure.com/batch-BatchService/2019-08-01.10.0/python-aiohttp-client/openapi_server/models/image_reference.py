# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer: str=None, publisher: str=None, sku: str=None, version: str=None, virtual_machine_image_id: str=None):
        """ImageReference - a model defined in OpenAPI

        :param offer: The offer of this ImageReference.
        :param publisher: The publisher of this ImageReference.
        :param sku: The sku of this ImageReference.
        :param version: The version of this ImageReference.
        :param virtual_machine_image_id: The virtual_machine_image_id of this ImageReference.
        """
        self.openapi_types = {
            'offer': str,
            'publisher': str,
            'sku': str,
            'version': str,
            'virtual_machine_image_id': str
        }

        self.attribute_map = {
            'offer': 'offer',
            'publisher': 'publisher',
            'sku': 'sku',
            'version': 'version',
            'virtual_machine_image_id': 'virtualMachineImageId'
        }

        self._offer = offer
        self._publisher = publisher
        self._sku = sku
        self._version = version
        self._virtual_machine_image_id = virtual_machine_image_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageReference of this ImageReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer(self):
        """Gets the offer of this ImageReference.

        For example, UbuntuServer or WindowsServer.

        :return: The offer of this ImageReference.
        :rtype: str
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """Sets the offer of this ImageReference.

        For example, UbuntuServer or WindowsServer.

        :param offer: The offer of this ImageReference.
        :type offer: str
        """

        self._offer = offer

    @property
    def publisher(self):
        """Gets the publisher of this ImageReference.

        For example, Canonical or MicrosoftWindowsServer.

        :return: The publisher of this ImageReference.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this ImageReference.

        For example, Canonical or MicrosoftWindowsServer.

        :param publisher: The publisher of this ImageReference.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def sku(self):
        """Gets the sku of this ImageReference.

        For example, 18.04-LTS or 2019-Datacenter.

        :return: The sku of this ImageReference.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ImageReference.

        For example, 18.04-LTS or 2019-Datacenter.

        :param sku: The sku of this ImageReference.
        :type sku: str
        """

        self._sku = sku

    @property
    def version(self):
        """Gets the version of this ImageReference.

        A value of 'latest' can be specified to select the latest version of an Image. If omitted, the default is 'latest'.

        :return: The version of this ImageReference.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ImageReference.

        A value of 'latest' can be specified to select the latest version of an Image. If omitted, the default is 'latest'.

        :param version: The version of this ImageReference.
        :type version: str
        """

        self._version = version

    @property
    def virtual_machine_image_id(self):
        """Gets the virtual_machine_image_id of this ImageReference.

        This property is mutually exclusive with other ImageReference properties. For Virtual Machine Image it must be in the same region and subscription as the Azure Batch account. For SIG image it must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.

        :return: The virtual_machine_image_id of this ImageReference.
        :rtype: str
        """
        return self._virtual_machine_image_id

    @virtual_machine_image_id.setter
    def virtual_machine_image_id(self, virtual_machine_image_id):
        """Sets the virtual_machine_image_id of this ImageReference.

        This property is mutually exclusive with other ImageReference properties. For Virtual Machine Image it must be in the same region and subscription as the Azure Batch account. For SIG image it must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.

        :param virtual_machine_image_id: The virtual_machine_image_id of this ImageReference.
        :type virtual_machine_image_id: str
        """

        self._virtual_machine_image_id = virtual_machine_image_id
