# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthenticationTokenSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: List[str]=None):
        """AuthenticationTokenSettings - a model defined in OpenAPI

        :param access: The access of this AuthenticationTokenSettings.
        """
        self.openapi_types = {
            'access': List[str]
        }

        self.attribute_map = {
            'access': 'access'
        }

        self._access = access

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticationTokenSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticationTokenSettings of this AuthenticationTokenSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this AuthenticationTokenSettings.

        The authentication token grants access to a limited set of Batch service operations. Currently the only supported value for the access property is 'job', which grants access to all operations related to the Job which contains the Task.

        :return: The access of this AuthenticationTokenSettings.
        :rtype: List[str]
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this AuthenticationTokenSettings.

        The authentication token grants access to a limited set of Batch service operations. Currently the only supported value for the access property is 'job', which grants access to all operations related to the Job which contains the Task.

        :param access: The access of this AuthenticationTokenSettings.
        :type access: List[str]
        """
        allowed_values = ["job"]  # noqa: E501
        if not set(access).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `access` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(access) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._access = access
