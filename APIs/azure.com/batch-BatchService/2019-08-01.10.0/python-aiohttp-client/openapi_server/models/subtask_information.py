# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_node_information import ComputeNodeInformation
from openapi_server.models.subtask_state import SubtaskState
from openapi_server.models.task_container_execution_information import TaskContainerExecutionInformation
from openapi_server.models.task_execution_result import TaskExecutionResult
from openapi_server.models.task_failure_information import TaskFailureInformation
from openapi_server import util


class SubtaskInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_info: TaskContainerExecutionInformation=None, end_time: datetime=None, exit_code: int=None, failure_info: TaskFailureInformation=None, id: int=None, node_info: ComputeNodeInformation=None, previous_state: SubtaskState=None, previous_state_transition_time: datetime=None, result: TaskExecutionResult=None, start_time: datetime=None, state: SubtaskState=None, state_transition_time: datetime=None):
        """SubtaskInformation - a model defined in OpenAPI

        :param container_info: The container_info of this SubtaskInformation.
        :param end_time: The end_time of this SubtaskInformation.
        :param exit_code: The exit_code of this SubtaskInformation.
        :param failure_info: The failure_info of this SubtaskInformation.
        :param id: The id of this SubtaskInformation.
        :param node_info: The node_info of this SubtaskInformation.
        :param previous_state: The previous_state of this SubtaskInformation.
        :param previous_state_transition_time: The previous_state_transition_time of this SubtaskInformation.
        :param result: The result of this SubtaskInformation.
        :param start_time: The start_time of this SubtaskInformation.
        :param state: The state of this SubtaskInformation.
        :param state_transition_time: The state_transition_time of this SubtaskInformation.
        """
        self.openapi_types = {
            'container_info': TaskContainerExecutionInformation,
            'end_time': datetime,
            'exit_code': int,
            'failure_info': TaskFailureInformation,
            'id': int,
            'node_info': ComputeNodeInformation,
            'previous_state': SubtaskState,
            'previous_state_transition_time': datetime,
            'result': TaskExecutionResult,
            'start_time': datetime,
            'state': SubtaskState,
            'state_transition_time': datetime
        }

        self.attribute_map = {
            'container_info': 'containerInfo',
            'end_time': 'endTime',
            'exit_code': 'exitCode',
            'failure_info': 'failureInfo',
            'id': 'id',
            'node_info': 'nodeInfo',
            'previous_state': 'previousState',
            'previous_state_transition_time': 'previousStateTransitionTime',
            'result': 'result',
            'start_time': 'startTime',
            'state': 'state',
            'state_transition_time': 'stateTransitionTime'
        }

        self._container_info = container_info
        self._end_time = end_time
        self._exit_code = exit_code
        self._failure_info = failure_info
        self._id = id
        self._node_info = node_info
        self._previous_state = previous_state
        self._previous_state_transition_time = previous_state_transition_time
        self._result = result
        self._start_time = start_time
        self._state = state
        self._state_transition_time = state_transition_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubtaskInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubtaskInformation of this SubtaskInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_info(self):
        """Gets the container_info of this SubtaskInformation.


        :return: The container_info of this SubtaskInformation.
        :rtype: TaskContainerExecutionInformation
        """
        return self._container_info

    @container_info.setter
    def container_info(self, container_info):
        """Sets the container_info of this SubtaskInformation.


        :param container_info: The container_info of this SubtaskInformation.
        :type container_info: TaskContainerExecutionInformation
        """

        self._container_info = container_info

    @property
    def end_time(self):
        """Gets the end_time of this SubtaskInformation.

        This property is set only if the subtask is in the Completed state.

        :return: The end_time of this SubtaskInformation.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SubtaskInformation.

        This property is set only if the subtask is in the Completed state.

        :param end_time: The end_time of this SubtaskInformation.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def exit_code(self):
        """Gets the exit_code of this SubtaskInformation.

        This property is set only if the subtask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.

        :return: The exit_code of this SubtaskInformation.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this SubtaskInformation.

        This property is set only if the subtask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.

        :param exit_code: The exit_code of this SubtaskInformation.
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def failure_info(self):
        """Gets the failure_info of this SubtaskInformation.


        :return: The failure_info of this SubtaskInformation.
        :rtype: TaskFailureInformation
        """
        return self._failure_info

    @failure_info.setter
    def failure_info(self, failure_info):
        """Sets the failure_info of this SubtaskInformation.


        :param failure_info: The failure_info of this SubtaskInformation.
        :type failure_info: TaskFailureInformation
        """

        self._failure_info = failure_info

    @property
    def id(self):
        """Gets the id of this SubtaskInformation.


        :return: The id of this SubtaskInformation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubtaskInformation.


        :param id: The id of this SubtaskInformation.
        :type id: int
        """

        self._id = id

    @property
    def node_info(self):
        """Gets the node_info of this SubtaskInformation.


        :return: The node_info of this SubtaskInformation.
        :rtype: ComputeNodeInformation
        """
        return self._node_info

    @node_info.setter
    def node_info(self, node_info):
        """Sets the node_info of this SubtaskInformation.


        :param node_info: The node_info of this SubtaskInformation.
        :type node_info: ComputeNodeInformation
        """

        self._node_info = node_info

    @property
    def previous_state(self):
        """Gets the previous_state of this SubtaskInformation.


        :return: The previous_state of this SubtaskInformation.
        :rtype: SubtaskState
        """
        return self._previous_state

    @previous_state.setter
    def previous_state(self, previous_state):
        """Sets the previous_state of this SubtaskInformation.


        :param previous_state: The previous_state of this SubtaskInformation.
        :type previous_state: SubtaskState
        """

        self._previous_state = previous_state

    @property
    def previous_state_transition_time(self):
        """Gets the previous_state_transition_time of this SubtaskInformation.

        This property is not set if the subtask is in its initial running state.

        :return: The previous_state_transition_time of this SubtaskInformation.
        :rtype: datetime
        """
        return self._previous_state_transition_time

    @previous_state_transition_time.setter
    def previous_state_transition_time(self, previous_state_transition_time):
        """Sets the previous_state_transition_time of this SubtaskInformation.

        This property is not set if the subtask is in its initial running state.

        :param previous_state_transition_time: The previous_state_transition_time of this SubtaskInformation.
        :type previous_state_transition_time: datetime
        """

        self._previous_state_transition_time = previous_state_transition_time

    @property
    def result(self):
        """Gets the result of this SubtaskInformation.


        :return: The result of this SubtaskInformation.
        :rtype: TaskExecutionResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this SubtaskInformation.


        :param result: The result of this SubtaskInformation.
        :type result: TaskExecutionResult
        """

        self._result = result

    @property
    def start_time(self):
        """Gets the start_time of this SubtaskInformation.


        :return: The start_time of this SubtaskInformation.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SubtaskInformation.


        :param start_time: The start_time of this SubtaskInformation.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this SubtaskInformation.


        :return: The state of this SubtaskInformation.
        :rtype: SubtaskState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubtaskInformation.


        :param state: The state of this SubtaskInformation.
        :type state: SubtaskState
        """

        self._state = state

    @property
    def state_transition_time(self):
        """Gets the state_transition_time of this SubtaskInformation.


        :return: The state_transition_time of this SubtaskInformation.
        :rtype: datetime
        """
        return self._state_transition_time

    @state_transition_time.setter
    def state_transition_time(self, state_transition_time):
        """Sets the state_transition_time of this SubtaskInformation.


        :param state_transition_time: The state_transition_time of this SubtaskInformation.
        :type state_transition_time: datetime
        """

        self._state_transition_time = state_transition_time
