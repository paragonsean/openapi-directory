/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeCounts model module.
 * @module model/NodeCounts
 * @version 2019-08-01.10.0
 */
class NodeCounts {
    /**
     * Constructs a new <code>NodeCounts</code>.
     * @alias module:model/NodeCounts
     * @param creating {Number} 
     * @param idle {Number} 
     * @param leavingPool {Number} 
     * @param offline {Number} 
     * @param preempted {Number} 
     * @param rebooting {Number} 
     * @param reimaging {Number} 
     * @param running {Number} 
     * @param startTaskFailed {Number} 
     * @param starting {Number} 
     * @param total {Number} 
     * @param unknown {Number} 
     * @param unusable {Number} 
     * @param waitingForStartTask {Number} 
     */
    constructor(creating, idle, leavingPool, offline, preempted, rebooting, reimaging, running, startTaskFailed, starting, total, unknown, unusable, waitingForStartTask) { 
        
        NodeCounts.initialize(this, creating, idle, leavingPool, offline, preempted, rebooting, reimaging, running, startTaskFailed, starting, total, unknown, unusable, waitingForStartTask);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, creating, idle, leavingPool, offline, preempted, rebooting, reimaging, running, startTaskFailed, starting, total, unknown, unusable, waitingForStartTask) { 
        obj['creating'] = creating;
        obj['idle'] = idle;
        obj['leavingPool'] = leavingPool;
        obj['offline'] = offline;
        obj['preempted'] = preempted;
        obj['rebooting'] = rebooting;
        obj['reimaging'] = reimaging;
        obj['running'] = running;
        obj['startTaskFailed'] = startTaskFailed;
        obj['starting'] = starting;
        obj['total'] = total;
        obj['unknown'] = unknown;
        obj['unusable'] = unusable;
        obj['waitingForStartTask'] = waitingForStartTask;
    }

    /**
     * Constructs a <code>NodeCounts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeCounts} obj Optional instance to populate.
     * @return {module:model/NodeCounts} The populated <code>NodeCounts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeCounts();

            if (data.hasOwnProperty('creating')) {
                obj['creating'] = ApiClient.convertToType(data['creating'], 'Number');
            }
            if (data.hasOwnProperty('idle')) {
                obj['idle'] = ApiClient.convertToType(data['idle'], 'Number');
            }
            if (data.hasOwnProperty('leavingPool')) {
                obj['leavingPool'] = ApiClient.convertToType(data['leavingPool'], 'Number');
            }
            if (data.hasOwnProperty('offline')) {
                obj['offline'] = ApiClient.convertToType(data['offline'], 'Number');
            }
            if (data.hasOwnProperty('preempted')) {
                obj['preempted'] = ApiClient.convertToType(data['preempted'], 'Number');
            }
            if (data.hasOwnProperty('rebooting')) {
                obj['rebooting'] = ApiClient.convertToType(data['rebooting'], 'Number');
            }
            if (data.hasOwnProperty('reimaging')) {
                obj['reimaging'] = ApiClient.convertToType(data['reimaging'], 'Number');
            }
            if (data.hasOwnProperty('running')) {
                obj['running'] = ApiClient.convertToType(data['running'], 'Number');
            }
            if (data.hasOwnProperty('startTaskFailed')) {
                obj['startTaskFailed'] = ApiClient.convertToType(data['startTaskFailed'], 'Number');
            }
            if (data.hasOwnProperty('starting')) {
                obj['starting'] = ApiClient.convertToType(data['starting'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('unknown')) {
                obj['unknown'] = ApiClient.convertToType(data['unknown'], 'Number');
            }
            if (data.hasOwnProperty('unusable')) {
                obj['unusable'] = ApiClient.convertToType(data['unusable'], 'Number');
            }
            if (data.hasOwnProperty('waitingForStartTask')) {
                obj['waitingForStartTask'] = ApiClient.convertToType(data['waitingForStartTask'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeCounts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeCounts</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NodeCounts.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

NodeCounts.RequiredProperties = ["creating", "idle", "leavingPool", "offline", "preempted", "rebooting", "reimaging", "running", "startTaskFailed", "starting", "total", "unknown", "unusable", "waitingForStartTask"];

/**
 * @member {Number} creating
 */
NodeCounts.prototype['creating'] = undefined;

/**
 * @member {Number} idle
 */
NodeCounts.prototype['idle'] = undefined;

/**
 * @member {Number} leavingPool
 */
NodeCounts.prototype['leavingPool'] = undefined;

/**
 * @member {Number} offline
 */
NodeCounts.prototype['offline'] = undefined;

/**
 * @member {Number} preempted
 */
NodeCounts.prototype['preempted'] = undefined;

/**
 * @member {Number} rebooting
 */
NodeCounts.prototype['rebooting'] = undefined;

/**
 * @member {Number} reimaging
 */
NodeCounts.prototype['reimaging'] = undefined;

/**
 * @member {Number} running
 */
NodeCounts.prototype['running'] = undefined;

/**
 * @member {Number} startTaskFailed
 */
NodeCounts.prototype['startTaskFailed'] = undefined;

/**
 * @member {Number} starting
 */
NodeCounts.prototype['starting'] = undefined;

/**
 * @member {Number} total
 */
NodeCounts.prototype['total'] = undefined;

/**
 * @member {Number} unknown
 */
NodeCounts.prototype['unknown'] = undefined;

/**
 * @member {Number} unusable
 */
NodeCounts.prototype['unusable'] = undefined;

/**
 * @member {Number} waitingForStartTask
 */
NodeCounts.prototype['waitingForStartTask'] = undefined;






export default NodeCounts;

