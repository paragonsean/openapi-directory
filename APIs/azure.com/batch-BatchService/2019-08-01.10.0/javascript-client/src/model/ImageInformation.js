/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageReference from './ImageReference';

/**
 * The ImageInformation model module.
 * @module model/ImageInformation
 * @version 2019-08-01.10.0
 */
class ImageInformation {
    /**
     * Constructs a new <code>ImageInformation</code>.
     * @alias module:model/ImageInformation
     * @param imageReference {module:model/ImageReference} 
     * @param nodeAgentSKUId {String} 
     * @param osType {module:model/ImageInformation.OsTypeEnum} 
     * @param verificationType {module:model/ImageInformation.VerificationTypeEnum} 
     */
    constructor(imageReference, nodeAgentSKUId, osType, verificationType) { 
        
        ImageInformation.initialize(this, imageReference, nodeAgentSKUId, osType, verificationType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageReference, nodeAgentSKUId, osType, verificationType) { 
        obj['imageReference'] = imageReference;
        obj['nodeAgentSKUId'] = nodeAgentSKUId;
        obj['osType'] = osType;
        obj['verificationType'] = verificationType;
    }

    /**
     * Constructs a <code>ImageInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageInformation} obj Optional instance to populate.
     * @return {module:model/ImageInformation} The populated <code>ImageInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageInformation();

            if (data.hasOwnProperty('batchSupportEndOfLife')) {
                obj['batchSupportEndOfLife'] = ApiClient.convertToType(data['batchSupportEndOfLife'], 'Date');
            }
            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], ['String']);
            }
            if (data.hasOwnProperty('imageReference')) {
                obj['imageReference'] = ImageReference.constructFromObject(data['imageReference']);
            }
            if (data.hasOwnProperty('nodeAgentSKUId')) {
                obj['nodeAgentSKUId'] = ApiClient.convertToType(data['nodeAgentSKUId'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('verificationType')) {
                obj['verificationType'] = ApiClient.convertToType(data['verificationType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['capabilities'])) {
            throw new Error("Expected the field `capabilities` to be an array in the JSON data but got " + data['capabilities']);
        }
        // validate the optional field `imageReference`
        if (data['imageReference']) { // data not null
          ImageReference.validateJSON(data['imageReference']);
        }
        // ensure the json data is a string
        if (data['nodeAgentSKUId'] && !(typeof data['nodeAgentSKUId'] === 'string' || data['nodeAgentSKUId'] instanceof String)) {
            throw new Error("Expected the field `nodeAgentSKUId` to be a primitive type in the JSON string but got " + data['nodeAgentSKUId']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['verificationType'] && !(typeof data['verificationType'] === 'string' || data['verificationType'] instanceof String)) {
            throw new Error("Expected the field `verificationType` to be a primitive type in the JSON string but got " + data['verificationType']);
        }

        return true;
    }


}

ImageInformation.RequiredProperties = ["imageReference", "nodeAgentSKUId", "osType", "verificationType"];

/**
 * @member {Date} batchSupportEndOfLife
 */
ImageInformation.prototype['batchSupportEndOfLife'] = undefined;

/**
 * Not every capability of the Image is listed. Capabilities in this list are considered of special interest and are generally related to integration with other features in the Azure Batch service.
 * @member {Array.<String>} capabilities
 */
ImageInformation.prototype['capabilities'] = undefined;

/**
 * @member {module:model/ImageReference} imageReference
 */
ImageInformation.prototype['imageReference'] = undefined;

/**
 * @member {String} nodeAgentSKUId
 */
ImageInformation.prototype['nodeAgentSKUId'] = undefined;

/**
 * @member {module:model/ImageInformation.OsTypeEnum} osType
 */
ImageInformation.prototype['osType'] = undefined;

/**
 * @member {module:model/ImageInformation.VerificationTypeEnum} verificationType
 */
ImageInformation.prototype['verificationType'] = undefined;





/**
 * Allowed values for the <code>osType</code> property.
 * @enum {String}
 * @readonly
 */
ImageInformation['OsTypeEnum'] = {

    /**
     * value: "linux"
     * @const
     */
    "linux": "linux",

    /**
     * value: "windows"
     * @const
     */
    "windows": "windows"
};


/**
 * Allowed values for the <code>verificationType</code> property.
 * @enum {String}
 * @readonly
 */
ImageInformation['VerificationTypeEnum'] = {

    /**
     * value: "verified"
     * @const
     */
    "verified": "verified",

    /**
     * value: "unverified"
     * @const
     */
    "unverified": "unverified"
};



export default ImageInformation;

