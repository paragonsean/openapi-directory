/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Schedule model module.
 * @module model/Schedule
 * @version 2019-08-01.10.0
 */
class Schedule {
    /**
     * Constructs a new <code>Schedule</code>.
     * @alias module:model/Schedule
     */
    constructor() { 
        
        Schedule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Schedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Schedule} obj Optional instance to populate.
     * @return {module:model/Schedule} The populated <code>Schedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Schedule();

            if (data.hasOwnProperty('doNotRunAfter')) {
                obj['doNotRunAfter'] = ApiClient.convertToType(data['doNotRunAfter'], 'Date');
            }
            if (data.hasOwnProperty('doNotRunUntil')) {
                obj['doNotRunUntil'] = ApiClient.convertToType(data['doNotRunUntil'], 'Date');
            }
            if (data.hasOwnProperty('recurrenceInterval')) {
                obj['recurrenceInterval'] = ApiClient.convertToType(data['recurrenceInterval'], 'String');
            }
            if (data.hasOwnProperty('startWindow')) {
                obj['startWindow'] = ApiClient.convertToType(data['startWindow'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Schedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Schedule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['recurrenceInterval'] && !(typeof data['recurrenceInterval'] === 'string' || data['recurrenceInterval'] instanceof String)) {
            throw new Error("Expected the field `recurrenceInterval` to be a primitive type in the JSON string but got " + data['recurrenceInterval']);
        }
        // ensure the json data is a string
        if (data['startWindow'] && !(typeof data['startWindow'] === 'string' || data['startWindow'] instanceof String)) {
            throw new Error("Expected the field `startWindow` to be a primitive type in the JSON string but got " + data['startWindow']);
        }

        return true;
    }


}



/**
 * If you do not specify a doNotRunAfter time, and you are creating a recurring Job Schedule, the Job Schedule will remain active until you explicitly terminate it.
 * @member {Date} doNotRunAfter
 */
Schedule.prototype['doNotRunAfter'] = undefined;

/**
 * If you do not specify a doNotRunUntil time, the schedule becomes ready to create Jobs immediately.
 * @member {Date} doNotRunUntil
 */
Schedule.prototype['doNotRunUntil'] = undefined;

/**
 * Because a Job Schedule can have at most one active Job under it at any given time, if it is time to create a new Job under a Job Schedule, but the previous Job is still running, the Batch service will not create the new Job until the previous Job finishes. If the previous Job does not finish within the startWindow period of the new recurrenceInterval, then no new Job will be scheduled for that interval. For recurring Jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when Jobs are created, add Tasks to the Jobs and terminate the Jobs ready for the next recurrence. The default is that the schedule does not recur: one Job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that Job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
 * @member {String} recurrenceInterval
 */
Schedule.prototype['recurrenceInterval'] = undefined;

/**
 * If a Job is not created within the startWindow interval, then the 'opportunity' is lost; no Job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the Job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
 * @member {String} startWindow
 */
Schedule.prototype['startWindow'] = undefined;






export default Schedule;

