/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AzureBlobFileSystemConfiguration model module.
 * @module model/AzureBlobFileSystemConfiguration
 * @version 2019-08-01.10.0
 */
class AzureBlobFileSystemConfiguration {
    /**
     * Constructs a new <code>AzureBlobFileSystemConfiguration</code>.
     * @alias module:model/AzureBlobFileSystemConfiguration
     * @param accountName {String} 
     * @param containerName {String} 
     * @param relativeMountPath {String} All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
     */
    constructor(accountName, containerName, relativeMountPath) { 
        
        AzureBlobFileSystemConfiguration.initialize(this, accountName, containerName, relativeMountPath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountName, containerName, relativeMountPath) { 
        obj['accountName'] = accountName;
        obj['containerName'] = containerName;
        obj['relativeMountPath'] = relativeMountPath;
    }

    /**
     * Constructs a <code>AzureBlobFileSystemConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AzureBlobFileSystemConfiguration} obj Optional instance to populate.
     * @return {module:model/AzureBlobFileSystemConfiguration} The populated <code>AzureBlobFileSystemConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AzureBlobFileSystemConfiguration();

            if (data.hasOwnProperty('accountKey')) {
                obj['accountKey'] = ApiClient.convertToType(data['accountKey'], 'String');
            }
            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('blobfuseOptions')) {
                obj['blobfuseOptions'] = ApiClient.convertToType(data['blobfuseOptions'], 'String');
            }
            if (data.hasOwnProperty('containerName')) {
                obj['containerName'] = ApiClient.convertToType(data['containerName'], 'String');
            }
            if (data.hasOwnProperty('relativeMountPath')) {
                obj['relativeMountPath'] = ApiClient.convertToType(data['relativeMountPath'], 'String');
            }
            if (data.hasOwnProperty('sasKey')) {
                obj['sasKey'] = ApiClient.convertToType(data['sasKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AzureBlobFileSystemConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AzureBlobFileSystemConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AzureBlobFileSystemConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountKey'] && !(typeof data['accountKey'] === 'string' || data['accountKey'] instanceof String)) {
            throw new Error("Expected the field `accountKey` to be a primitive type in the JSON string but got " + data['accountKey']);
        }
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['blobfuseOptions'] && !(typeof data['blobfuseOptions'] === 'string' || data['blobfuseOptions'] instanceof String)) {
            throw new Error("Expected the field `blobfuseOptions` to be a primitive type in the JSON string but got " + data['blobfuseOptions']);
        }
        // ensure the json data is a string
        if (data['containerName'] && !(typeof data['containerName'] === 'string' || data['containerName'] instanceof String)) {
            throw new Error("Expected the field `containerName` to be a primitive type in the JSON string but got " + data['containerName']);
        }
        // ensure the json data is a string
        if (data['relativeMountPath'] && !(typeof data['relativeMountPath'] === 'string' || data['relativeMountPath'] instanceof String)) {
            throw new Error("Expected the field `relativeMountPath` to be a primitive type in the JSON string but got " + data['relativeMountPath']);
        }
        // ensure the json data is a string
        if (data['sasKey'] && !(typeof data['sasKey'] === 'string' || data['sasKey'] instanceof String)) {
            throw new Error("Expected the field `sasKey` to be a primitive type in the JSON string but got " + data['sasKey']);
        }

        return true;
    }


}

AzureBlobFileSystemConfiguration.RequiredProperties = ["accountName", "containerName", "relativeMountPath"];

/**
 * This property is mutually exclusive with sasKey and one must be specified.
 * @member {String} accountKey
 */
AzureBlobFileSystemConfiguration.prototype['accountKey'] = undefined;

/**
 * @member {String} accountName
 */
AzureBlobFileSystemConfiguration.prototype['accountName'] = undefined;

/**
 * These are 'net use' options in Windows and 'mount' options in Linux.
 * @member {String} blobfuseOptions
 */
AzureBlobFileSystemConfiguration.prototype['blobfuseOptions'] = undefined;

/**
 * @member {String} containerName
 */
AzureBlobFileSystemConfiguration.prototype['containerName'] = undefined;

/**
 * All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
 * @member {String} relativeMountPath
 */
AzureBlobFileSystemConfiguration.prototype['relativeMountPath'] = undefined;

/**
 * This property is mutually exclusive with accountKey and one must be specified.
 * @member {String} sasKey
 */
AzureBlobFileSystemConfiguration.prototype['sasKey'] = undefined;






export default AzureBlobFileSystemConfiguration;

