/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaskStatistics model module.
 * @module model/TaskStatistics
 * @version 2019-08-01.10.0
 */
class TaskStatistics {
    /**
     * Constructs a new <code>TaskStatistics</code>.
     * @alias module:model/TaskStatistics
     * @param kernelCPUTime {String} 
     * @param lastUpdateTime {Date} 
     * @param readIOGiB {Number} 
     * @param readIOps {Number} 
     * @param startTime {Date} 
     * @param url {String} 
     * @param userCPUTime {String} 
     * @param waitTime {String} 
     * @param wallClockTime {String} The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If the Task was retried, this includes the wall clock time of all the Task retries.
     * @param writeIOGiB {Number} 
     * @param writeIOps {Number} 
     */
    constructor(kernelCPUTime, lastUpdateTime, readIOGiB, readIOps, startTime, url, userCPUTime, waitTime, wallClockTime, writeIOGiB, writeIOps) { 
        
        TaskStatistics.initialize(this, kernelCPUTime, lastUpdateTime, readIOGiB, readIOps, startTime, url, userCPUTime, waitTime, wallClockTime, writeIOGiB, writeIOps);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kernelCPUTime, lastUpdateTime, readIOGiB, readIOps, startTime, url, userCPUTime, waitTime, wallClockTime, writeIOGiB, writeIOps) { 
        obj['kernelCPUTime'] = kernelCPUTime;
        obj['lastUpdateTime'] = lastUpdateTime;
        obj['readIOGiB'] = readIOGiB;
        obj['readIOps'] = readIOps;
        obj['startTime'] = startTime;
        obj['url'] = url;
        obj['userCPUTime'] = userCPUTime;
        obj['waitTime'] = waitTime;
        obj['wallClockTime'] = wallClockTime;
        obj['writeIOGiB'] = writeIOGiB;
        obj['writeIOps'] = writeIOps;
    }

    /**
     * Constructs a <code>TaskStatistics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskStatistics} obj Optional instance to populate.
     * @return {module:model/TaskStatistics} The populated <code>TaskStatistics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskStatistics();

            if (data.hasOwnProperty('kernelCPUTime')) {
                obj['kernelCPUTime'] = ApiClient.convertToType(data['kernelCPUTime'], 'String');
            }
            if (data.hasOwnProperty('lastUpdateTime')) {
                obj['lastUpdateTime'] = ApiClient.convertToType(data['lastUpdateTime'], 'Date');
            }
            if (data.hasOwnProperty('readIOGiB')) {
                obj['readIOGiB'] = ApiClient.convertToType(data['readIOGiB'], 'Number');
            }
            if (data.hasOwnProperty('readIOps')) {
                obj['readIOps'] = ApiClient.convertToType(data['readIOps'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('userCPUTime')) {
                obj['userCPUTime'] = ApiClient.convertToType(data['userCPUTime'], 'String');
            }
            if (data.hasOwnProperty('waitTime')) {
                obj['waitTime'] = ApiClient.convertToType(data['waitTime'], 'String');
            }
            if (data.hasOwnProperty('wallClockTime')) {
                obj['wallClockTime'] = ApiClient.convertToType(data['wallClockTime'], 'String');
            }
            if (data.hasOwnProperty('writeIOGiB')) {
                obj['writeIOGiB'] = ApiClient.convertToType(data['writeIOGiB'], 'Number');
            }
            if (data.hasOwnProperty('writeIOps')) {
                obj['writeIOps'] = ApiClient.convertToType(data['writeIOps'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskStatistics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskStatistics</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaskStatistics.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['kernelCPUTime'] && !(typeof data['kernelCPUTime'] === 'string' || data['kernelCPUTime'] instanceof String)) {
            throw new Error("Expected the field `kernelCPUTime` to be a primitive type in the JSON string but got " + data['kernelCPUTime']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['userCPUTime'] && !(typeof data['userCPUTime'] === 'string' || data['userCPUTime'] instanceof String)) {
            throw new Error("Expected the field `userCPUTime` to be a primitive type in the JSON string but got " + data['userCPUTime']);
        }
        // ensure the json data is a string
        if (data['waitTime'] && !(typeof data['waitTime'] === 'string' || data['waitTime'] instanceof String)) {
            throw new Error("Expected the field `waitTime` to be a primitive type in the JSON string but got " + data['waitTime']);
        }
        // ensure the json data is a string
        if (data['wallClockTime'] && !(typeof data['wallClockTime'] === 'string' || data['wallClockTime'] instanceof String)) {
            throw new Error("Expected the field `wallClockTime` to be a primitive type in the JSON string but got " + data['wallClockTime']);
        }

        return true;
    }


}

TaskStatistics.RequiredProperties = ["kernelCPUTime", "lastUpdateTime", "readIOGiB", "readIOps", "startTime", "url", "userCPUTime", "waitTime", "wallClockTime", "writeIOGiB", "writeIOps"];

/**
 * @member {String} kernelCPUTime
 */
TaskStatistics.prototype['kernelCPUTime'] = undefined;

/**
 * @member {Date} lastUpdateTime
 */
TaskStatistics.prototype['lastUpdateTime'] = undefined;

/**
 * @member {Number} readIOGiB
 */
TaskStatistics.prototype['readIOGiB'] = undefined;

/**
 * @member {Number} readIOps
 */
TaskStatistics.prototype['readIOps'] = undefined;

/**
 * @member {Date} startTime
 */
TaskStatistics.prototype['startTime'] = undefined;

/**
 * @member {String} url
 */
TaskStatistics.prototype['url'] = undefined;

/**
 * @member {String} userCPUTime
 */
TaskStatistics.prototype['userCPUTime'] = undefined;

/**
 * @member {String} waitTime
 */
TaskStatistics.prototype['waitTime'] = undefined;

/**
 * The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If the Task was retried, this includes the wall clock time of all the Task retries.
 * @member {String} wallClockTime
 */
TaskStatistics.prototype['wallClockTime'] = undefined;

/**
 * @member {Number} writeIOGiB
 */
TaskStatistics.prototype['writeIOGiB'] = undefined;

/**
 * @member {Number} writeIOps
 */
TaskStatistics.prototype['writeIOps'] = undefined;






export default TaskStatistics;

