/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OutputFileDestination from './OutputFileDestination';
import OutputFileUploadOptions from './OutputFileUploadOptions';

/**
 * The OutputFile model module.
 * @module model/OutputFile
 * @version 2019-08-01.10.0
 */
class OutputFile {
    /**
     * Constructs a new <code>OutputFile</code>.
     * @alias module:model/OutputFile
     * @param destination {module:model/OutputFileDestination} 
     * @param filePattern {String} Both relative and absolute paths are supported. Relative paths are relative to the Task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with \".\" it is ignored by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple example: **\\*.txt matches any file that does not start in '.' and ends with .txt in the Task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*] would match a file named abc*). Note that both \\ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.
     * @param uploadOptions {module:model/OutputFileUploadOptions} 
     */
    constructor(destination, filePattern, uploadOptions) { 
        
        OutputFile.initialize(this, destination, filePattern, uploadOptions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destination, filePattern, uploadOptions) { 
        obj['destination'] = destination;
        obj['filePattern'] = filePattern;
        obj['uploadOptions'] = uploadOptions;
    }

    /**
     * Constructs a <code>OutputFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutputFile} obj Optional instance to populate.
     * @return {module:model/OutputFile} The populated <code>OutputFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutputFile();

            if (data.hasOwnProperty('destination')) {
                obj['destination'] = OutputFileDestination.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('filePattern')) {
                obj['filePattern'] = ApiClient.convertToType(data['filePattern'], 'String');
            }
            if (data.hasOwnProperty('uploadOptions')) {
                obj['uploadOptions'] = OutputFileUploadOptions.constructFromObject(data['uploadOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutputFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutputFile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OutputFile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          OutputFileDestination.validateJSON(data['destination']);
        }
        // ensure the json data is a string
        if (data['filePattern'] && !(typeof data['filePattern'] === 'string' || data['filePattern'] instanceof String)) {
            throw new Error("Expected the field `filePattern` to be a primitive type in the JSON string but got " + data['filePattern']);
        }
        // validate the optional field `uploadOptions`
        if (data['uploadOptions']) { // data not null
          OutputFileUploadOptions.validateJSON(data['uploadOptions']);
        }

        return true;
    }


}

OutputFile.RequiredProperties = ["destination", "filePattern", "uploadOptions"];

/**
 * @member {module:model/OutputFileDestination} destination
 */
OutputFile.prototype['destination'] = undefined;

/**
 * Both relative and absolute paths are supported. Relative paths are relative to the Task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with \".\" it is ignored by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple example: **\\*.txt matches any file that does not start in '.' and ends with .txt in the Task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*] would match a file named abc*). Note that both \\ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.
 * @member {String} filePattern
 */
OutputFile.prototype['filePattern'] = undefined;

/**
 * @member {module:model/OutputFileUploadOptions} uploadOptions
 */
OutputFile.prototype['uploadOptions'] = undefined;






export default OutputFile;

