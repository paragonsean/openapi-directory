/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaskContainerExecutionInformation from './TaskContainerExecutionInformation';
import TaskExecutionResult from './TaskExecutionResult';
import TaskFailureInformation from './TaskFailureInformation';

/**
 * The StartTaskInformation model module.
 * @module model/StartTaskInformation
 * @version 2019-08-01.10.0
 */
class StartTaskInformation {
    /**
     * Constructs a new <code>StartTaskInformation</code>.
     * @alias module:model/StartTaskInformation
     * @param retryCount {Number} Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints.
     * @param startTime {Date} This value is reset every time the Task is restarted or retried (that is, this is the most recent time at which the StartTask started running).
     * @param state {module:model/StartTaskInformation.StateEnum} 
     */
    constructor(retryCount, startTime, state) { 
        
        StartTaskInformation.initialize(this, retryCount, startTime, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, retryCount, startTime, state) { 
        obj['retryCount'] = retryCount;
        obj['startTime'] = startTime;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>StartTaskInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartTaskInformation} obj Optional instance to populate.
     * @return {module:model/StartTaskInformation} The populated <code>StartTaskInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartTaskInformation();

            if (data.hasOwnProperty('containerInfo')) {
                obj['containerInfo'] = TaskContainerExecutionInformation.constructFromObject(data['containerInfo']);
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('exitCode')) {
                obj['exitCode'] = ApiClient.convertToType(data['exitCode'], 'Number');
            }
            if (data.hasOwnProperty('failureInfo')) {
                obj['failureInfo'] = TaskFailureInformation.constructFromObject(data['failureInfo']);
            }
            if (data.hasOwnProperty('lastRetryTime')) {
                obj['lastRetryTime'] = ApiClient.convertToType(data['lastRetryTime'], 'Date');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = TaskExecutionResult.constructFromObject(data['result']);
            }
            if (data.hasOwnProperty('retryCount')) {
                obj['retryCount'] = ApiClient.convertToType(data['retryCount'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartTaskInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartTaskInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartTaskInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `containerInfo`
        if (data['containerInfo']) { // data not null
          TaskContainerExecutionInformation.validateJSON(data['containerInfo']);
        }
        // validate the optional field `failureInfo`
        if (data['failureInfo']) { // data not null
          TaskFailureInformation.validateJSON(data['failureInfo']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

StartTaskInformation.RequiredProperties = ["retryCount", "startTime", "state"];

/**
 * @member {module:model/TaskContainerExecutionInformation} containerInfo
 */
StartTaskInformation.prototype['containerInfo'] = undefined;

/**
 * This is the end time of the most recent run of the StartTask, if that run has completed (even if that run failed and a retry is pending). This element is not present if the StartTask is currently running.
 * @member {Date} endTime
 */
StartTaskInformation.prototype['endTime'] = undefined;

/**
 * This property is set only if the StartTask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the StartTask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
 * @member {Number} exitCode
 */
StartTaskInformation.prototype['exitCode'] = undefined;

/**
 * @member {module:model/TaskFailureInformation} failureInfo
 */
StartTaskInformation.prototype['failureInfo'] = undefined;

/**
 * This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.
 * @member {Date} lastRetryTime
 */
StartTaskInformation.prototype['lastRetryTime'] = undefined;

/**
 * @member {module:model/TaskExecutionResult} result
 */
StartTaskInformation.prototype['result'] = undefined;

/**
 * Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints.
 * @member {Number} retryCount
 */
StartTaskInformation.prototype['retryCount'] = undefined;

/**
 * This value is reset every time the Task is restarted or retried (that is, this is the most recent time at which the StartTask started running).
 * @member {Date} startTime
 */
StartTaskInformation.prototype['startTime'] = undefined;

/**
 * @member {module:model/StartTaskInformation.StateEnum} state
 */
StartTaskInformation.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
StartTaskInformation['StateEnum'] = {

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed"
};



export default StartTaskInformation;

