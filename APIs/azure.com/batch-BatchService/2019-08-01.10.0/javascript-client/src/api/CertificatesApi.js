/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchError from '../model/BatchError';
import Certificate from '../model/Certificate';
import CertificateAddParameter from '../model/CertificateAddParameter';
import CertificateListResult from '../model/CertificateListResult';

/**
* Certificates service.
* @module api/CertificatesApi
* @version 2019-08-01.10.0
*/
export default class CertificatesApi {

    /**
    * Constructs a new CertificatesApi. 
    * @alias module:api/CertificatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the certificateAdd operation.
     * @callback module:api/CertificatesApi~certificateAddCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a Certificate to the specified Account.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/CertificateAddParameter} certificate The Certificate to be added.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/CertificatesApi~certificateAddCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificateAdd(apiVersion, certificate, opts, callback) {
      opts = opts || {};
      let postBody = certificate;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateAdd");
      }
      // verify the required parameter 'certificate' is set
      if (certificate === undefined || certificate === null) {
        throw new Error("Missing the required parameter 'certificate' when calling certificateAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/certificates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateCancelDeletion operation.
     * @callback module:api/CertificatesApi~certificateCancelDeletionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a failed deletion of a Certificate from the specified Account.
     * If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the Certificate changes to deleteFailed. If you decide that you want to continue using the Certificate, you can use this operation to set the status of the Certificate back to active. If you intend to delete the Certificate, you do not need to run this operation after the deletion failed. You must make sure that the Certificate is not being used by any resources, and then you can try again to delete the Certificate.
     * @param {String} thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param {String} thumbprint The thumbprint of the Certificate being deleted.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/CertificatesApi~certificateCancelDeletionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificateCancelDeletion(thumbprintAlgorithm, thumbprint, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'thumbprintAlgorithm' is set
      if (thumbprintAlgorithm === undefined || thumbprintAlgorithm === null) {
        throw new Error("Missing the required parameter 'thumbprintAlgorithm' when calling certificateCancelDeletion");
      }
      // verify the required parameter 'thumbprint' is set
      if (thumbprint === undefined || thumbprint === null) {
        throw new Error("Missing the required parameter 'thumbprint' when calling certificateCancelDeletion");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateCancelDeletion");
      }

      let pathParams = {
        'thumbprintAlgorithm': thumbprintAlgorithm,
        'thumbprint': thumbprint
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})/canceldelete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateDelete operation.
     * @callback module:api/CertificatesApi~certificateDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Certificate from the specified Account.
     * You cannot delete a Certificate if a resource (Pool or Compute Node) is using it. Before you can delete a Certificate, you must therefore make sure that the Certificate is not associated with any existing Pools, the Certificate is not installed on any Nodes (even if you remove a Certificate from a Pool, it is not removed from existing Compute Nodes in that Pool until they restart), and no running Tasks depend on the Certificate. If you try to delete a Certificate that is in use, the deletion fails. The Certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the Certificate.
     * @param {String} thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param {String} thumbprint The thumbprint of the Certificate to be deleted.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/CertificatesApi~certificateDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificateDelete(thumbprintAlgorithm, thumbprint, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'thumbprintAlgorithm' is set
      if (thumbprintAlgorithm === undefined || thumbprintAlgorithm === null) {
        throw new Error("Missing the required parameter 'thumbprintAlgorithm' when calling certificateDelete");
      }
      // verify the required parameter 'thumbprint' is set
      if (thumbprint === undefined || thumbprint === null) {
        throw new Error("Missing the required parameter 'thumbprint' when calling certificateDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateDelete");
      }

      let pathParams = {
        'thumbprintAlgorithm': thumbprintAlgorithm,
        'thumbprint': thumbprint
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateGet operation.
     * @callback module:api/CertificatesApi~certificateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Certificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified Certificate.
     * @param {String} thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param {String} thumbprint The thumbprint of the Certificate to get.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [select] An OData $select clause.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/CertificatesApi~certificateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Certificate}
     */
    certificateGet(thumbprintAlgorithm, thumbprint, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'thumbprintAlgorithm' is set
      if (thumbprintAlgorithm === undefined || thumbprintAlgorithm === null) {
        throw new Error("Missing the required parameter 'thumbprintAlgorithm' when calling certificateGet");
      }
      // verify the required parameter 'thumbprint' is set
      if (thumbprint === undefined || thumbprint === null) {
        throw new Error("Missing the required parameter 'thumbprint' when calling certificateGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateGet");
      }

      let pathParams = {
        'thumbprintAlgorithm': thumbprintAlgorithm,
        'thumbprint': thumbprint
      };
      let queryParams = {
        '$select': opts['select'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Certificate;
      return this.apiClient.callApi(
        '/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateList operation.
     * @callback module:api/CertificatesApi~certificateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the Certificates that have been added to the specified Account.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
     * @param {String} [select] An OData $select clause.
     * @param {Number} [maxresults = 1000)] The maximum number of items to return in the response. A maximum of 1000 Certificates can be returned.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/CertificatesApi~certificateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateListResult}
     */
    certificateList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateList");
      }

      let pathParams = {
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$select': opts['select'],
        'maxresults': opts['maxresults'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateListResult;
      return this.apiClient.callApi(
        '/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
