/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchError from '../model/BatchError';
import ComputeNode from '../model/ComputeNode';
import ComputeNodeGetRemoteLoginSettingsResult from '../model/ComputeNodeGetRemoteLoginSettingsResult';
import ComputeNodeListResult from '../model/ComputeNodeListResult';
import ComputeNodeUser from '../model/ComputeNodeUser';
import NodeDisableSchedulingParameter from '../model/NodeDisableSchedulingParameter';
import NodeRebootParameter from '../model/NodeRebootParameter';
import NodeReimageParameter from '../model/NodeReimageParameter';
import NodeRemoveParameter from '../model/NodeRemoveParameter';
import NodeUpdateUserParameter from '../model/NodeUpdateUserParameter';
import UploadBatchServiceLogsConfiguration from '../model/UploadBatchServiceLogsConfiguration';
import UploadBatchServiceLogsResult from '../model/UploadBatchServiceLogsResult';

/**
* ComputeNodes service.
* @module api/ComputeNodesApi
* @version 2019-08-01.10.0
*/
export default class ComputeNodesApi {

    /**
    * Constructs a new ComputeNodesApi. 
    * @alias module:api/ComputeNodesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the computeNodeAddUser operation.
     * @callback module:api/ComputeNodesApi~computeNodeAddUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a user Account to the specified Compute Node.
     * You can add a user Account to a Compute Node only when it is in the idle or running state.
     * @param {String} poolId The ID of the Pool that contains the Compute Node.
     * @param {String} nodeId The ID of the machine on which you want to create a user Account.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/ComputeNodeUser} user The user Account to be created.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/ComputeNodesApi~computeNodeAddUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computeNodeAddUser(poolId, nodeId, apiVersion, user, opts, callback) {
      opts = opts || {};
      let postBody = user;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling computeNodeAddUser");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling computeNodeAddUser");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling computeNodeAddUser");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling computeNodeAddUser");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computeNodeDeleteUser operation.
     * @callback module:api/ComputeNodesApi~computeNodeDeleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user Account from the specified Compute Node.
     * You can delete a user Account to a Compute Node only when it is in the idle or running state.
     * @param {String} poolId The ID of the Pool that contains the Compute Node.
     * @param {String} nodeId The ID of the machine on which you want to delete a user Account.
     * @param {String} userName The name of the user Account to delete.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/ComputeNodesApi~computeNodeDeleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computeNodeDeleteUser(poolId, nodeId, userName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling computeNodeDeleteUser");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling computeNodeDeleteUser");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling computeNodeDeleteUser");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling computeNodeDeleteUser");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId,
        'userName': userName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/users/{userName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computeNodeDisableScheduling operation.
     * @callback module:api/ComputeNodesApi~computeNodeDisableSchedulingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables Task scheduling on the specified Compute Node.
     * You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled.
     * @param {String} poolId The ID of the Pool that contains the Compute Node.
     * @param {String} nodeId The ID of the Compute Node on which you want to disable Task scheduling.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:model/NodeDisableSchedulingParameter} [nodeDisableSchedulingParameter] The parameters for the request.
     * @param {module:api/ComputeNodesApi~computeNodeDisableSchedulingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computeNodeDisableScheduling(poolId, nodeId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['nodeDisableSchedulingParameter'];
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling computeNodeDisableScheduling");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling computeNodeDisableScheduling");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling computeNodeDisableScheduling");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/disablescheduling', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computeNodeEnableScheduling operation.
     * @callback module:api/ComputeNodesApi~computeNodeEnableSchedulingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables Task scheduling on the specified Compute Node.
     * You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled
     * @param {String} poolId The ID of the Pool that contains the Compute Node.
     * @param {String} nodeId The ID of the Compute Node on which you want to enable Task scheduling.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/ComputeNodesApi~computeNodeEnableSchedulingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computeNodeEnableScheduling(poolId, nodeId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling computeNodeEnableScheduling");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling computeNodeEnableScheduling");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling computeNodeEnableScheduling");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/enablescheduling', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computeNodeGet operation.
     * @callback module:api/ComputeNodesApi~computeNodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputeNode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified Compute Node.
     * @param {String} poolId The ID of the Pool that contains the Compute Node.
     * @param {String} nodeId The ID of the Compute Node that you want to get information about.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [select] An OData $select clause.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/ComputeNodesApi~computeNodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputeNode}
     */
    computeNodeGet(poolId, nodeId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling computeNodeGet");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling computeNodeGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling computeNodeGet");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId
      };
      let queryParams = {
        '$select': opts['select'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComputeNode;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computeNodeGetRemoteDesktop operation.
     * @callback module:api/ComputeNodesApi~computeNodeGetRemoteDesktopCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Remote Desktop Protocol file for the specified Compute Node.
     * Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a virtual machine configuration, see the GetRemoteLoginSettings API.
     * @param {String} poolId The ID of the Pool that contains the Compute Node.
     * @param {String} nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/ComputeNodesApi~computeNodeGetRemoteDesktopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    computeNodeGetRemoteDesktop(poolId, nodeId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling computeNodeGetRemoteDesktop");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling computeNodeGetRemoteDesktop");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling computeNodeGetRemoteDesktop");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/rdp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computeNodeGetRemoteLoginSettings operation.
     * @callback module:api/ComputeNodesApi~computeNodeGetRemoteLoginSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputeNodeGetRemoteLoginSettingsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the settings required for remote login to a Compute Node.
     * Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API.
     * @param {String} poolId The ID of the Pool that contains the Compute Node.
     * @param {String} nodeId The ID of the Compute Node for which to obtain the remote login settings.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/ComputeNodesApi~computeNodeGetRemoteLoginSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputeNodeGetRemoteLoginSettingsResult}
     */
    computeNodeGetRemoteLoginSettings(poolId, nodeId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling computeNodeGetRemoteLoginSettings");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling computeNodeGetRemoteLoginSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling computeNodeGetRemoteLoginSettings");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComputeNodeGetRemoteLoginSettingsResult;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/remoteloginsettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computeNodeList operation.
     * @callback module:api/ComputeNodesApi~computeNodeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputeNodeListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Compute Nodes in the specified Pool.
     * @param {String} poolId The ID of the Pool from which you want to list Compute Nodes.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
     * @param {String} [select] An OData $select clause.
     * @param {Number} [maxresults = 1000)] The maximum number of items to return in the response. A maximum of 1000 Compute Nodes can be returned.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/ComputeNodesApi~computeNodeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputeNodeListResult}
     */
    computeNodeList(poolId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling computeNodeList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling computeNodeList");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$select': opts['select'],
        'maxresults': opts['maxresults'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComputeNodeListResult;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computeNodeReboot operation.
     * @callback module:api/ComputeNodesApi~computeNodeRebootCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restarts the specified Compute Node.
     * You can restart a Compute Node only if it is in an idle or running state.
     * @param {String} poolId The ID of the Pool that contains the Compute Node.
     * @param {String} nodeId The ID of the Compute Node that you want to restart.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:model/NodeRebootParameter} [nodeRebootParameter] The parameters for the request.
     * @param {module:api/ComputeNodesApi~computeNodeRebootCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computeNodeReboot(poolId, nodeId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['nodeRebootParameter'];
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling computeNodeReboot");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling computeNodeReboot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling computeNodeReboot");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/reboot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computeNodeReimage operation.
     * @callback module:api/ComputeNodesApi~computeNodeReimageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reinstalls the operating system on the specified Compute Node.
     * You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API can be invoked only on Pools created with the cloud service configuration property.
     * @param {String} poolId The ID of the Pool that contains the Compute Node.
     * @param {String} nodeId The ID of the Compute Node that you want to restart.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:model/NodeReimageParameter} [nodeReimageParameter] The parameters for the request.
     * @param {module:api/ComputeNodesApi~computeNodeReimageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computeNodeReimage(poolId, nodeId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['nodeReimageParameter'];
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling computeNodeReimage");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling computeNodeReimage");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling computeNodeReimage");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/reimage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computeNodeUpdateUser operation.
     * @callback module:api/ComputeNodesApi~computeNodeUpdateUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the password and expiration time of a user Account on the specified Compute Node.
     * This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state.
     * @param {String} poolId The ID of the Pool that contains the Compute Node.
     * @param {String} nodeId The ID of the machine on which you want to update a user Account.
     * @param {String} userName The name of the user Account to update.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/NodeUpdateUserParameter} nodeUpdateUserParameter The parameters for the request.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/ComputeNodesApi~computeNodeUpdateUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computeNodeUpdateUser(poolId, nodeId, userName, apiVersion, nodeUpdateUserParameter, opts, callback) {
      opts = opts || {};
      let postBody = nodeUpdateUserParameter;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling computeNodeUpdateUser");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling computeNodeUpdateUser");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling computeNodeUpdateUser");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling computeNodeUpdateUser");
      }
      // verify the required parameter 'nodeUpdateUserParameter' is set
      if (nodeUpdateUserParameter === undefined || nodeUpdateUserParameter === null) {
        throw new Error("Missing the required parameter 'nodeUpdateUserParameter' when calling computeNodeUpdateUser");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId,
        'userName': userName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/users/{userName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computeNodeUploadBatchServiceLogs operation.
     * @callback module:api/ComputeNodesApi~computeNodeUploadBatchServiceLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadBatchServiceLogsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage.
     * This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service.
     * @param {String} poolId The ID of the Pool that contains the Compute Node.
     * @param {String} nodeId The ID of the Compute Node from which you want to upload the Azure Batch service log files.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/UploadBatchServiceLogsConfiguration} uploadBatchServiceLogsConfiguration The Azure Batch service log files upload configuration.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/ComputeNodesApi~computeNodeUploadBatchServiceLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadBatchServiceLogsResult}
     */
    computeNodeUploadBatchServiceLogs(poolId, nodeId, apiVersion, uploadBatchServiceLogsConfiguration, opts, callback) {
      opts = opts || {};
      let postBody = uploadBatchServiceLogsConfiguration;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling computeNodeUploadBatchServiceLogs");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling computeNodeUploadBatchServiceLogs");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling computeNodeUploadBatchServiceLogs");
      }
      // verify the required parameter 'uploadBatchServiceLogsConfiguration' is set
      if (uploadBatchServiceLogsConfiguration === undefined || uploadBatchServiceLogsConfiguration === null) {
        throw new Error("Missing the required parameter 'uploadBatchServiceLogsConfiguration' when calling computeNodeUploadBatchServiceLogs");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = UploadBatchServiceLogsResult;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/uploadbatchservicelogs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolRemoveNodes operation.
     * @callback module:api/ComputeNodesApi~poolRemoveNodesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes Compute Nodes from the specified Pool.
     * This operation can only run when the allocation state of the Pool is steady. When this operation runs, the allocation state changes from steady to resizing.
     * @param {String} poolId The ID of the Pool from which you want to remove Compute Nodes.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/NodeRemoveParameter} nodeRemoveParameter The parameters for the request.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {String} [ifMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
     * @param {String} [ifNoneMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
     * @param {String} [ifModifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
     * @param {String} [ifUnmodifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
     * @param {module:api/ComputeNodesApi~poolRemoveNodesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poolRemoveNodes(poolId, apiVersion, nodeRemoveParameter, opts, callback) {
      opts = opts || {};
      let postBody = nodeRemoveParameter;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling poolRemoveNodes");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolRemoveNodes");
      }
      // verify the required parameter 'nodeRemoveParameter' is set
      if (nodeRemoveParameter === undefined || nodeRemoveParameter === null) {
        throw new Error("Missing the required parameter 'nodeRemoveParameter' when calling poolRemoveNodes");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/removenodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
