/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-08-01.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchError from '../model/BatchError';
import CloudTask from '../model/CloudTask';
import CloudTaskListResult from '../model/CloudTaskListResult';
import CloudTaskListSubtasksResult from '../model/CloudTaskListSubtasksResult';
import TaskAddCollectionParameter from '../model/TaskAddCollectionParameter';
import TaskAddCollectionResult from '../model/TaskAddCollectionResult';
import TaskAddParameter from '../model/TaskAddParameter';
import TaskUpdateParameter from '../model/TaskUpdateParameter';

/**
* Tasks service.
* @module api/TasksApi
* @version 2019-08-01.10.0
*/
export default class TasksApi {

    /**
    * Constructs a new TasksApi. 
    * @alias module:api/TasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the taskAdd operation.
     * @callback module:api/TasksApi~taskAddCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a Task to the specified Job.
     * The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
     * @param {String} jobId The ID of the Job to which the Task is to be added.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/TaskAddParameter} task The Task to be added.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/TasksApi~taskAddCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taskAdd(jobId, apiVersion, task, opts, callback) {
      opts = opts || {};
      let postBody = task;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskAdd");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskAdd");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling taskAdd");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskAddCollection operation.
     * @callback module:api/TasksApi~taskAddCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskAddCollectionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a collection of Tasks to the specified Job.
     * Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
     * @param {String} jobId The ID of the Job to which the Task collection is to be added.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/TaskAddCollectionParameter} taskCollection The Tasks to be added.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/TasksApi~taskAddCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskAddCollectionResult}
     */
    taskAddCollection(jobId, apiVersion, taskCollection, opts, callback) {
      opts = opts || {};
      let postBody = taskCollection;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskAddCollection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskAddCollection");
      }
      // verify the required parameter 'taskCollection' is set
      if (taskCollection === undefined || taskCollection === null) {
        throw new Error("Missing the required parameter 'taskCollection' when calling taskAddCollection");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = TaskAddCollectionResult;
      return this.apiClient.callApi(
        '/jobs/{jobId}/addtaskcollection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskDelete operation.
     * @callback module:api/TasksApi~taskDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Task from the specified Job.
     * When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.
     * @param {String} jobId The ID of the Job from which to delete the Task.
     * @param {String} taskId The ID of the Task to delete.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {String} [ifMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
     * @param {String} [ifNoneMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
     * @param {String} [ifModifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
     * @param {String} [ifUnmodifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
     * @param {module:api/TasksApi~taskDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taskDelete(jobId, taskId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskDelete");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling taskDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskDelete");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskGet operation.
     * @callback module:api/TasksApi~taskGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified Task.
     * For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
     * @param {String} jobId The ID of the Job that contains the Task.
     * @param {String} taskId The ID of the Task to get information about.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [select] An OData $select clause.
     * @param {String} [expand] An OData $expand clause.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {String} [ifMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
     * @param {String} [ifNoneMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
     * @param {String} [ifModifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
     * @param {String} [ifUnmodifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
     * @param {module:api/TasksApi~taskGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudTask}
     */
    taskGet(jobId, taskId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskGet");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling taskGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskGet");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId
      };
      let queryParams = {
        '$select': opts['select'],
        '$expand': opts['expand'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudTask;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskList operation.
     * @callback module:api/TasksApi~taskListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudTaskListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the Tasks that are associated with the specified Job.
     * For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
     * @param {String} jobId The ID of the Job.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks.
     * @param {String} [select] An OData $select clause.
     * @param {String} [expand] An OData $expand clause.
     * @param {Number} [maxresults = 1000)] The maximum number of items to return in the response. A maximum of 1000 Tasks can be returned.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/TasksApi~taskListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudTaskListResult}
     */
    taskList(jobId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskList");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$select': opts['select'],
        '$expand': opts['expand'],
        'maxresults': opts['maxresults'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudTaskListResult;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskListSubtasks operation.
     * @callback module:api/TasksApi~taskListSubtasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudTaskListSubtasksResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the subtasks that are associated with the specified multi-instance Task.
     * If the Task is not a multi-instance Task then this returns an empty collection.
     * @param {String} jobId The ID of the Job.
     * @param {String} taskId The ID of the Task.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [select] An OData $select clause.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/TasksApi~taskListSubtasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudTaskListSubtasksResult}
     */
    taskListSubtasks(jobId, taskId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskListSubtasks");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling taskListSubtasks");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskListSubtasks");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId
      };
      let queryParams = {
        '$select': opts['select'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudTaskListSubtasksResult;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}/subtasksinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskReactivate operation.
     * @callback module:api/TasksApi~taskReactivateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reactivates a Task, allowing it to run again even if its retry count has been exhausted.
     * Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).
     * @param {String} jobId The ID of the Job containing the Task.
     * @param {String} taskId The ID of the Task to reactivate.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {String} [ifMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
     * @param {String} [ifNoneMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
     * @param {String} [ifModifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
     * @param {String} [ifUnmodifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
     * @param {module:api/TasksApi~taskReactivateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taskReactivate(jobId, taskId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskReactivate");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling taskReactivate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskReactivate");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}/reactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskTerminate operation.
     * @callback module:api/TasksApi~taskTerminateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminates the specified Task.
     * When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.
     * @param {String} jobId The ID of the Job containing the Task.
     * @param {String} taskId The ID of the Task to terminate.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {String} [ifMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
     * @param {String} [ifNoneMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
     * @param {String} [ifModifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
     * @param {String} [ifUnmodifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
     * @param {module:api/TasksApi~taskTerminateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taskTerminate(jobId, taskId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskTerminate");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling taskTerminate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskTerminate");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}/terminate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskUpdate operation.
     * @callback module:api/TasksApi~taskUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of the specified Task.
     * @param {String} jobId The ID of the Job containing the Task.
     * @param {String} taskId The ID of the Task to update.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/TaskUpdateParameter} taskUpdateParameter The parameters for the request.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {String} [ifMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
     * @param {String} [ifNoneMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
     * @param {String} [ifModifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
     * @param {String} [ifUnmodifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
     * @param {module:api/TasksApi~taskUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taskUpdate(jobId, taskId, apiVersion, taskUpdateParameter, opts, callback) {
      opts = opts || {};
      let postBody = taskUpdateParameter;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskUpdate");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling taskUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskUpdate");
      }
      // verify the required parameter 'taskUpdateParameter' is set
      if (taskUpdateParameter === undefined || taskUpdateParameter === null) {
        throw new Error("Missing the required parameter 'taskUpdateParameter' when calling taskUpdate");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = ['api_key', 'azure_auth'];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
