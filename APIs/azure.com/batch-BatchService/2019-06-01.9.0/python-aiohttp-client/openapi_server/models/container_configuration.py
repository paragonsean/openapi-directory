# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_registry import ContainerRegistry
from openapi_server import util


class ContainerConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_image_names: List[str]=None, container_registries: List[ContainerRegistry]=None, type: str=None):
        """ContainerConfiguration - a model defined in OpenAPI

        :param container_image_names: The container_image_names of this ContainerConfiguration.
        :param container_registries: The container_registries of this ContainerConfiguration.
        :param type: The type of this ContainerConfiguration.
        """
        self.openapi_types = {
            'container_image_names': List[str],
            'container_registries': List[ContainerRegistry],
            'type': str
        }

        self.attribute_map = {
            'container_image_names': 'containerImageNames',
            'container_registries': 'containerRegistries',
            'type': 'type'
        }

        self._container_image_names = container_image_names
        self._container_registries = container_registries
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerConfiguration of this ContainerConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_image_names(self):
        """Gets the container_image_names of this ContainerConfiguration.

        This is the full Image reference, as would be specified to \"docker pull\". An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.

        :return: The container_image_names of this ContainerConfiguration.
        :rtype: List[str]
        """
        return self._container_image_names

    @container_image_names.setter
    def container_image_names(self, container_image_names):
        """Sets the container_image_names of this ContainerConfiguration.

        This is the full Image reference, as would be specified to \"docker pull\". An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.

        :param container_image_names: The container_image_names of this ContainerConfiguration.
        :type container_image_names: List[str]
        """

        self._container_image_names = container_image_names

    @property
    def container_registries(self):
        """Gets the container_registries of this ContainerConfiguration.

        If any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.

        :return: The container_registries of this ContainerConfiguration.
        :rtype: List[ContainerRegistry]
        """
        return self._container_registries

    @container_registries.setter
    def container_registries(self, container_registries):
        """Sets the container_registries of this ContainerConfiguration.

        If any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.

        :param container_registries: The container_registries of this ContainerConfiguration.
        :type container_registries: List[ContainerRegistry]
        """

        self._container_registries = container_registries

    @property
    def type(self):
        """Gets the type of this ContainerConfiguration.


        :return: The type of this ContainerConfiguration.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContainerConfiguration.


        :param type: The type of this ContainerConfiguration.
        :type type: str
        """
        allowed_values = ["dockerCompatible"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
