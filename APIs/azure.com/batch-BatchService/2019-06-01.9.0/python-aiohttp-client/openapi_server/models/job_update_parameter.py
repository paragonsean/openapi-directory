# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_constraints import JobConstraints
from openapi_server.models.metadata_item import MetadataItem
from openapi_server.models.on_all_tasks_complete import OnAllTasksComplete
from openapi_server.models.pool_information import PoolInformation
from openapi_server import util


class JobUpdateParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constraints: JobConstraints=None, metadata: List[MetadataItem]=None, on_all_tasks_complete: OnAllTasksComplete=None, pool_info: PoolInformation=None, priority: int=None):
        """JobUpdateParameter - a model defined in OpenAPI

        :param constraints: The constraints of this JobUpdateParameter.
        :param metadata: The metadata of this JobUpdateParameter.
        :param on_all_tasks_complete: The on_all_tasks_complete of this JobUpdateParameter.
        :param pool_info: The pool_info of this JobUpdateParameter.
        :param priority: The priority of this JobUpdateParameter.
        """
        self.openapi_types = {
            'constraints': JobConstraints,
            'metadata': List[MetadataItem],
            'on_all_tasks_complete': OnAllTasksComplete,
            'pool_info': PoolInformation,
            'priority': int
        }

        self.attribute_map = {
            'constraints': 'constraints',
            'metadata': 'metadata',
            'on_all_tasks_complete': 'onAllTasksComplete',
            'pool_info': 'poolInfo',
            'priority': 'priority'
        }

        self._constraints = constraints
        self._metadata = metadata
        self._on_all_tasks_complete = on_all_tasks_complete
        self._pool_info = pool_info
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobUpdateParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobUpdateParameter of this JobUpdateParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constraints(self):
        """Gets the constraints of this JobUpdateParameter.


        :return: The constraints of this JobUpdateParameter.
        :rtype: JobConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this JobUpdateParameter.


        :param constraints: The constraints of this JobUpdateParameter.
        :type constraints: JobConstraints
        """

        self._constraints = constraints

    @property
    def metadata(self):
        """Gets the metadata of this JobUpdateParameter.

        If omitted, it takes the default value of an empty list; in effect, any existing metadata is deleted.

        :return: The metadata of this JobUpdateParameter.
        :rtype: List[MetadataItem]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this JobUpdateParameter.

        If omitted, it takes the default value of an empty list; in effect, any existing metadata is deleted.

        :param metadata: The metadata of this JobUpdateParameter.
        :type metadata: List[MetadataItem]
        """

        self._metadata = metadata

    @property
    def on_all_tasks_complete(self):
        """Gets the on_all_tasks_complete of this JobUpdateParameter.


        :return: The on_all_tasks_complete of this JobUpdateParameter.
        :rtype: OnAllTasksComplete
        """
        return self._on_all_tasks_complete

    @on_all_tasks_complete.setter
    def on_all_tasks_complete(self, on_all_tasks_complete):
        """Sets the on_all_tasks_complete of this JobUpdateParameter.


        :param on_all_tasks_complete: The on_all_tasks_complete of this JobUpdateParameter.
        :type on_all_tasks_complete: OnAllTasksComplete
        """

        self._on_all_tasks_complete = on_all_tasks_complete

    @property
    def pool_info(self):
        """Gets the pool_info of this JobUpdateParameter.


        :return: The pool_info of this JobUpdateParameter.
        :rtype: PoolInformation
        """
        return self._pool_info

    @pool_info.setter
    def pool_info(self, pool_info):
        """Sets the pool_info of this JobUpdateParameter.


        :param pool_info: The pool_info of this JobUpdateParameter.
        :type pool_info: PoolInformation
        """
        if pool_info is None:
            raise ValueError("Invalid value for `pool_info`, must not be `None`")

        self._pool_info = pool_info

    @property
    def priority(self):
        """Gets the priority of this JobUpdateParameter.

        Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, it is set to the default value 0.

        :return: The priority of this JobUpdateParameter.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this JobUpdateParameter.

        Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, it is set to the default value 0.

        :param priority: The priority of this JobUpdateParameter.
        :type priority: int
        """

        self._priority = priority
