# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComputeNodeUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry_time: datetime=None, is_admin: bool=None, name: str=None, password: str=None, ssh_public_key: str=None):
        """ComputeNodeUser - a model defined in OpenAPI

        :param expiry_time: The expiry_time of this ComputeNodeUser.
        :param is_admin: The is_admin of this ComputeNodeUser.
        :param name: The name of this ComputeNodeUser.
        :param password: The password of this ComputeNodeUser.
        :param ssh_public_key: The ssh_public_key of this ComputeNodeUser.
        """
        self.openapi_types = {
            'expiry_time': datetime,
            'is_admin': bool,
            'name': str,
            'password': str,
            'ssh_public_key': str
        }

        self.attribute_map = {
            'expiry_time': 'expiryTime',
            'is_admin': 'isAdmin',
            'name': 'name',
            'password': 'password',
            'ssh_public_key': 'sshPublicKey'
        }

        self._expiry_time = expiry_time
        self._is_admin = is_admin
        self._name = name
        self._password = password
        self._ssh_public_key = ssh_public_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeNodeUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComputeNodeUser of this ComputeNodeUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry_time(self):
        """Gets the expiry_time of this ComputeNodeUser.

        If omitted, the default is 1 day from the current time. For Linux Compute Nodes, the expiryTime has a precision up to a day.

        :return: The expiry_time of this ComputeNodeUser.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this ComputeNodeUser.

        If omitted, the default is 1 day from the current time. For Linux Compute Nodes, the expiryTime has a precision up to a day.

        :param expiry_time: The expiry_time of this ComputeNodeUser.
        :type expiry_time: datetime
        """

        self._expiry_time = expiry_time

    @property
    def is_admin(self):
        """Gets the is_admin of this ComputeNodeUser.

        The default value is false.

        :return: The is_admin of this ComputeNodeUser.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this ComputeNodeUser.

        The default value is false.

        :param is_admin: The is_admin of this ComputeNodeUser.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def name(self):
        """Gets the name of this ComputeNodeUser.


        :return: The name of this ComputeNodeUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComputeNodeUser.


        :param name: The name of this ComputeNodeUser.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def password(self):
        """Gets the password of this ComputeNodeUser.

        The password is required for Windows Compute Nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows Image reference). For Linux Compute Nodes, the password can optionally be specified along with the sshPublicKey property.

        :return: The password of this ComputeNodeUser.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ComputeNodeUser.

        The password is required for Windows Compute Nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows Image reference). For Linux Compute Nodes, the password can optionally be specified along with the sshPublicKey property.

        :param password: The password of this ComputeNodeUser.
        :type password: str
        """

        self._password = password

    @property
    def ssh_public_key(self):
        """Gets the ssh_public_key of this ComputeNodeUser.

        The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux Compute Nodes. If this is specified for a Windows Compute Node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).

        :return: The ssh_public_key of this ComputeNodeUser.
        :rtype: str
        """
        return self._ssh_public_key

    @ssh_public_key.setter
    def ssh_public_key(self, ssh_public_key):
        """Sets the ssh_public_key of this ComputeNodeUser.

        The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux Compute Nodes. If this is specified for a Windows Compute Node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).

        :param ssh_public_key: The ssh_public_key of this ComputeNodeUser.
        :type ssh_public_key: str
        """

        self._ssh_public_key = ssh_public_key
