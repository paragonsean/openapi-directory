# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_specification import JobSpecification
from openapi_server.models.metadata_item import MetadataItem
from openapi_server.models.schedule import Schedule
from openapi_server import util


class JobScheduleAddParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, id: str=None, job_specification: JobSpecification=None, metadata: List[MetadataItem]=None, schedule: Schedule=None):
        """JobScheduleAddParameter - a model defined in OpenAPI

        :param display_name: The display_name of this JobScheduleAddParameter.
        :param id: The id of this JobScheduleAddParameter.
        :param job_specification: The job_specification of this JobScheduleAddParameter.
        :param metadata: The metadata of this JobScheduleAddParameter.
        :param schedule: The schedule of this JobScheduleAddParameter.
        """
        self.openapi_types = {
            'display_name': str,
            'id': str,
            'job_specification': JobSpecification,
            'metadata': List[MetadataItem],
            'schedule': Schedule
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'id': 'id',
            'job_specification': 'jobSpecification',
            'metadata': 'metadata',
            'schedule': 'schedule'
        }

        self._display_name = display_name
        self._id = id
        self._job_specification = job_specification
        self._metadata = metadata
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobScheduleAddParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobScheduleAddParameter of this JobScheduleAddParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this JobScheduleAddParameter.

        The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :return: The display_name of this JobScheduleAddParameter.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this JobScheduleAddParameter.

        The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :param display_name: The display_name of this JobScheduleAddParameter.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this JobScheduleAddParameter.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).

        :return: The id of this JobScheduleAddParameter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobScheduleAddParameter.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).

        :param id: The id of this JobScheduleAddParameter.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def job_specification(self):
        """Gets the job_specification of this JobScheduleAddParameter.


        :return: The job_specification of this JobScheduleAddParameter.
        :rtype: JobSpecification
        """
        return self._job_specification

    @job_specification.setter
    def job_specification(self, job_specification):
        """Sets the job_specification of this JobScheduleAddParameter.


        :param job_specification: The job_specification of this JobScheduleAddParameter.
        :type job_specification: JobSpecification
        """
        if job_specification is None:
            raise ValueError("Invalid value for `job_specification`, must not be `None`")

        self._job_specification = job_specification

    @property
    def metadata(self):
        """Gets the metadata of this JobScheduleAddParameter.

        The Batch service does not assign any meaning to metadata; it is solely for the use of user code.

        :return: The metadata of this JobScheduleAddParameter.
        :rtype: List[MetadataItem]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this JobScheduleAddParameter.

        The Batch service does not assign any meaning to metadata; it is solely for the use of user code.

        :param metadata: The metadata of this JobScheduleAddParameter.
        :type metadata: List[MetadataItem]
        """

        self._metadata = metadata

    @property
    def schedule(self):
        """Gets the schedule of this JobScheduleAddParameter.


        :return: The schedule of this JobScheduleAddParameter.
        :rtype: Schedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this JobScheduleAddParameter.


        :param schedule: The schedule of this JobScheduleAddParameter.
        :type schedule: Schedule
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule
