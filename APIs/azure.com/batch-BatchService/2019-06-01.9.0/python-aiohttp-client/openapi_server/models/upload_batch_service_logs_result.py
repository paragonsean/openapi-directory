# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadBatchServiceLogsResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number_of_files_uploaded: int=None, virtual_directory_name: str=None):
        """UploadBatchServiceLogsResult - a model defined in OpenAPI

        :param number_of_files_uploaded: The number_of_files_uploaded of this UploadBatchServiceLogsResult.
        :param virtual_directory_name: The virtual_directory_name of this UploadBatchServiceLogsResult.
        """
        self.openapi_types = {
            'number_of_files_uploaded': int,
            'virtual_directory_name': str
        }

        self.attribute_map = {
            'number_of_files_uploaded': 'numberOfFilesUploaded',
            'virtual_directory_name': 'virtualDirectoryName'
        }

        self._number_of_files_uploaded = number_of_files_uploaded
        self._virtual_directory_name = virtual_directory_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadBatchServiceLogsResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UploadBatchServiceLogsResult of this UploadBatchServiceLogsResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number_of_files_uploaded(self):
        """Gets the number_of_files_uploaded of this UploadBatchServiceLogsResult.


        :return: The number_of_files_uploaded of this UploadBatchServiceLogsResult.
        :rtype: int
        """
        return self._number_of_files_uploaded

    @number_of_files_uploaded.setter
    def number_of_files_uploaded(self, number_of_files_uploaded):
        """Sets the number_of_files_uploaded of this UploadBatchServiceLogsResult.


        :param number_of_files_uploaded: The number_of_files_uploaded of this UploadBatchServiceLogsResult.
        :type number_of_files_uploaded: int
        """
        if number_of_files_uploaded is None:
            raise ValueError("Invalid value for `number_of_files_uploaded`, must not be `None`")

        self._number_of_files_uploaded = number_of_files_uploaded

    @property
    def virtual_directory_name(self):
        """Gets the virtual_directory_name of this UploadBatchServiceLogsResult.

        The virtual directory name is part of the blob name for each log file uploaded, and it is built based poolId, nodeId and a unique identifier.

        :return: The virtual_directory_name of this UploadBatchServiceLogsResult.
        :rtype: str
        """
        return self._virtual_directory_name

    @virtual_directory_name.setter
    def virtual_directory_name(self, virtual_directory_name):
        """Sets the virtual_directory_name of this UploadBatchServiceLogsResult.

        The virtual directory name is part of the blob name for each log file uploaded, and it is built based poolId, nodeId and a unique identifier.

        :param virtual_directory_name: The virtual_directory_name of this UploadBatchServiceLogsResult.
        :type virtual_directory_name: str
        """
        if virtual_directory_name is None:
            raise ValueError("Invalid value for `virtual_directory_name`, must not be `None`")

        self._virtual_directory_name = virtual_directory_name
