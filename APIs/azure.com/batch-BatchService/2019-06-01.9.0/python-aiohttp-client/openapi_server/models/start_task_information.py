# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_container_execution_information import TaskContainerExecutionInformation
from openapi_server.models.task_execution_result import TaskExecutionResult
from openapi_server.models.task_failure_information import TaskFailureInformation
from openapi_server import util


class StartTaskInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_info: TaskContainerExecutionInformation=None, end_time: datetime=None, exit_code: int=None, failure_info: TaskFailureInformation=None, last_retry_time: datetime=None, result: TaskExecutionResult=None, retry_count: int=None, start_time: datetime=None, state: str=None):
        """StartTaskInformation - a model defined in OpenAPI

        :param container_info: The container_info of this StartTaskInformation.
        :param end_time: The end_time of this StartTaskInformation.
        :param exit_code: The exit_code of this StartTaskInformation.
        :param failure_info: The failure_info of this StartTaskInformation.
        :param last_retry_time: The last_retry_time of this StartTaskInformation.
        :param result: The result of this StartTaskInformation.
        :param retry_count: The retry_count of this StartTaskInformation.
        :param start_time: The start_time of this StartTaskInformation.
        :param state: The state of this StartTaskInformation.
        """
        self.openapi_types = {
            'container_info': TaskContainerExecutionInformation,
            'end_time': datetime,
            'exit_code': int,
            'failure_info': TaskFailureInformation,
            'last_retry_time': datetime,
            'result': TaskExecutionResult,
            'retry_count': int,
            'start_time': datetime,
            'state': str
        }

        self.attribute_map = {
            'container_info': 'containerInfo',
            'end_time': 'endTime',
            'exit_code': 'exitCode',
            'failure_info': 'failureInfo',
            'last_retry_time': 'lastRetryTime',
            'result': 'result',
            'retry_count': 'retryCount',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._container_info = container_info
        self._end_time = end_time
        self._exit_code = exit_code
        self._failure_info = failure_info
        self._last_retry_time = last_retry_time
        self._result = result
        self._retry_count = retry_count
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartTaskInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartTaskInformation of this StartTaskInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_info(self):
        """Gets the container_info of this StartTaskInformation.


        :return: The container_info of this StartTaskInformation.
        :rtype: TaskContainerExecutionInformation
        """
        return self._container_info

    @container_info.setter
    def container_info(self, container_info):
        """Sets the container_info of this StartTaskInformation.


        :param container_info: The container_info of this StartTaskInformation.
        :type container_info: TaskContainerExecutionInformation
        """

        self._container_info = container_info

    @property
    def end_time(self):
        """Gets the end_time of this StartTaskInformation.

        This is the end time of the most recent run of the start Task, if that run has completed (even if that run failed and a retry is pending). This element is not present if the start Task is currently running.

        :return: The end_time of this StartTaskInformation.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this StartTaskInformation.

        This is the end time of the most recent run of the start Task, if that run has completed (even if that run failed and a retry is pending). This element is not present if the start Task is currently running.

        :param end_time: The end_time of this StartTaskInformation.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def exit_code(self):
        """Gets the exit_code of this StartTaskInformation.

        This property is set only if the start Task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the start Task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.

        :return: The exit_code of this StartTaskInformation.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this StartTaskInformation.

        This property is set only if the start Task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the start Task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.

        :param exit_code: The exit_code of this StartTaskInformation.
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def failure_info(self):
        """Gets the failure_info of this StartTaskInformation.


        :return: The failure_info of this StartTaskInformation.
        :rtype: TaskFailureInformation
        """
        return self._failure_info

    @failure_info.setter
    def failure_info(self, failure_info):
        """Sets the failure_info of this StartTaskInformation.


        :param failure_info: The failure_info of this StartTaskInformation.
        :type failure_info: TaskFailureInformation
        """

        self._failure_info = failure_info

    @property
    def last_retry_time(self):
        """Gets the last_retry_time of this StartTaskInformation.

        This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.

        :return: The last_retry_time of this StartTaskInformation.
        :rtype: datetime
        """
        return self._last_retry_time

    @last_retry_time.setter
    def last_retry_time(self, last_retry_time):
        """Sets the last_retry_time of this StartTaskInformation.

        This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.

        :param last_retry_time: The last_retry_time of this StartTaskInformation.
        :type last_retry_time: datetime
        """

        self._last_retry_time = last_retry_time

    @property
    def result(self):
        """Gets the result of this StartTaskInformation.


        :return: The result of this StartTaskInformation.
        :rtype: TaskExecutionResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this StartTaskInformation.


        :param result: The result of this StartTaskInformation.
        :type result: TaskExecutionResult
        """

        self._result = result

    @property
    def retry_count(self):
        """Gets the retry_count of this StartTaskInformation.

        Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints.

        :return: The retry_count of this StartTaskInformation.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this StartTaskInformation.

        Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints.

        :param retry_count: The retry_count of this StartTaskInformation.
        :type retry_count: int
        """
        if retry_count is None:
            raise ValueError("Invalid value for `retry_count`, must not be `None`")

        self._retry_count = retry_count

    @property
    def start_time(self):
        """Gets the start_time of this StartTaskInformation.

        This value is reset every time the Task is restarted or retried (that is, this is the most recent time at which the start Task started running).

        :return: The start_time of this StartTaskInformation.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this StartTaskInformation.

        This value is reset every time the Task is restarted or retried (that is, this is the most recent time at which the start Task started running).

        :param start_time: The start_time of this StartTaskInformation.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this StartTaskInformation.


        :return: The state of this StartTaskInformation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StartTaskInformation.


        :param state: The state of this StartTaskInformation.
        :type state: str
        """
        allowed_values = ["running", "completed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
