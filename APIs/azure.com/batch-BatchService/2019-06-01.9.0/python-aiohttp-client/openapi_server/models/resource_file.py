# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_storage_container_name: str=None, blob_prefix: str=None, file_mode: str=None, file_path: str=None, http_url: str=None, storage_container_url: str=None):
        """ResourceFile - a model defined in OpenAPI

        :param auto_storage_container_name: The auto_storage_container_name of this ResourceFile.
        :param blob_prefix: The blob_prefix of this ResourceFile.
        :param file_mode: The file_mode of this ResourceFile.
        :param file_path: The file_path of this ResourceFile.
        :param http_url: The http_url of this ResourceFile.
        :param storage_container_url: The storage_container_url of this ResourceFile.
        """
        self.openapi_types = {
            'auto_storage_container_name': str,
            'blob_prefix': str,
            'file_mode': str,
            'file_path': str,
            'http_url': str,
            'storage_container_url': str
        }

        self.attribute_map = {
            'auto_storage_container_name': 'autoStorageContainerName',
            'blob_prefix': 'blobPrefix',
            'file_mode': 'fileMode',
            'file_path': 'filePath',
            'http_url': 'httpUrl',
            'storage_container_url': 'storageContainerUrl'
        }

        self._auto_storage_container_name = auto_storage_container_name
        self._blob_prefix = blob_prefix
        self._file_mode = file_mode
        self._file_path = file_path
        self._http_url = http_url
        self._storage_container_url = storage_container_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceFile of this ResourceFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_storage_container_name(self):
        """Gets the auto_storage_container_name of this ResourceFile.

        The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.

        :return: The auto_storage_container_name of this ResourceFile.
        :rtype: str
        """
        return self._auto_storage_container_name

    @auto_storage_container_name.setter
    def auto_storage_container_name(self, auto_storage_container_name):
        """Sets the auto_storage_container_name of this ResourceFile.

        The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.

        :param auto_storage_container_name: The auto_storage_container_name of this ResourceFile.
        :type auto_storage_container_name: str
        """

        self._auto_storage_container_name = auto_storage_container_name

    @property
    def blob_prefix(self):
        """Gets the blob_prefix of this ResourceFile.

        The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.

        :return: The blob_prefix of this ResourceFile.
        :rtype: str
        """
        return self._blob_prefix

    @blob_prefix.setter
    def blob_prefix(self, blob_prefix):
        """Sets the blob_prefix of this ResourceFile.

        The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.

        :param blob_prefix: The blob_prefix of this ResourceFile.
        :type blob_prefix: str
        """

        self._blob_prefix = blob_prefix

    @property
    def file_mode(self):
        """Gets the file_mode of this ResourceFile.

        This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.

        :return: The file_mode of this ResourceFile.
        :rtype: str
        """
        return self._file_mode

    @file_mode.setter
    def file_mode(self, file_mode):
        """Sets the file_mode of this ResourceFile.

        This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.

        :param file_mode: The file_mode of this ResourceFile.
        :type file_mode: str
        """

        self._file_mode = file_mode

    @property
    def file_path(self):
        """Gets the file_path of this ResourceFile.

        If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task's working directory (for example by using '..').

        :return: The file_path of this ResourceFile.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this ResourceFile.

        If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task's working directory (for example by using '..').

        :param file_path: The file_path of this ResourceFile.
        :type file_path: str
        """

        self._file_path = file_path

    @property
    def http_url(self):
        """Gets the http_url of this ResourceFile.

        The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.

        :return: The http_url of this ResourceFile.
        :rtype: str
        """
        return self._http_url

    @http_url.setter
    def http_url(self, http_url):
        """Sets the http_url of this ResourceFile.

        The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.

        :param http_url: The http_url of this ResourceFile.
        :type http_url: str
        """

        self._http_url = http_url

    @property
    def storage_container_url(self):
        """Gets the storage_container_url of this ResourceFile.

        The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading blobs from the container. There are two ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, or set the ACL for the container to allow public access.

        :return: The storage_container_url of this ResourceFile.
        :rtype: str
        """
        return self._storage_container_url

    @storage_container_url.setter
    def storage_container_url(self, storage_container_url):
        """Sets the storage_container_url of this ResourceFile.

        The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading blobs from the container. There are two ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, or set the ACL for the container to allow public access.

        :param storage_container_url: The storage_container_url of this ResourceFile.
        :type storage_container_url: str
        """

        self._storage_container_url = storage_container_url
