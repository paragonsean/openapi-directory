# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AffinityInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affinity_id: str=None):
        """AffinityInformation - a model defined in OpenAPI

        :param affinity_id: The affinity_id of this AffinityInformation.
        """
        self.openapi_types = {
            'affinity_id': str
        }

        self.attribute_map = {
            'affinity_id': 'affinityId'
        }

        self._affinity_id = affinity_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AffinityInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AffinityInformation of this AffinityInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affinity_id(self):
        """Gets the affinity_id of this AffinityInformation.

        You can pass the affinityId of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.

        :return: The affinity_id of this AffinityInformation.
        :rtype: str
        """
        return self._affinity_id

    @affinity_id.setter
    def affinity_id(self, affinity_id):
        """Sets the affinity_id of this AffinityInformation.

        You can pass the affinityId of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.

        :param affinity_id: The affinity_id of this AffinityInformation.
        :type affinity_id: str
        """
        if affinity_id is None:
            raise ValueError("Invalid value for `affinity_id`, must not be `None`")

        self._affinity_id = affinity_id
