# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LinuxUserConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid: int=None, ssh_private_key: str=None, uid: int=None):
        """LinuxUserConfiguration - a model defined in OpenAPI

        :param gid: The gid of this LinuxUserConfiguration.
        :param ssh_private_key: The ssh_private_key of this LinuxUserConfiguration.
        :param uid: The uid of this LinuxUserConfiguration.
        """
        self.openapi_types = {
            'gid': int,
            'ssh_private_key': str,
            'uid': int
        }

        self.attribute_map = {
            'gid': 'gid',
            'ssh_private_key': 'sshPrivateKey',
            'uid': 'uid'
        }

        self._gid = gid
        self._ssh_private_key = ssh_private_key
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinuxUserConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinuxUserConfiguration of this LinuxUserConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self):
        """Gets the gid of this LinuxUserConfiguration.

        The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.

        :return: The gid of this LinuxUserConfiguration.
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this LinuxUserConfiguration.

        The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.

        :param gid: The gid of this LinuxUserConfiguration.
        :type gid: int
        """

        self._gid = gid

    @property
    def ssh_private_key(self):
        """Gets the ssh_private_key of this LinuxUserConfiguration.

        The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user's .ssh directory is done).

        :return: The ssh_private_key of this LinuxUserConfiguration.
        :rtype: str
        """
        return self._ssh_private_key

    @ssh_private_key.setter
    def ssh_private_key(self, ssh_private_key):
        """Sets the ssh_private_key of this LinuxUserConfiguration.

        The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user's .ssh directory is done).

        :param ssh_private_key: The ssh_private_key of this LinuxUserConfiguration.
        :type ssh_private_key: str
        """

        self._ssh_private_key = ssh_private_key

    @property
    def uid(self):
        """Gets the uid of this LinuxUserConfiguration.

        The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.

        :return: The uid of this LinuxUserConfiguration.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this LinuxUserConfiguration.

        The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.

        :param uid: The uid of this LinuxUserConfiguration.
        :type uid: int
        """

        self._uid = uid
