# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.job_constraints import JobConstraints
from openapi_server.models.job_execution_information import JobExecutionInformation
from openapi_server.models.job_manager_task import JobManagerTask
from openapi_server.models.job_network_configuration import JobNetworkConfiguration
from openapi_server.models.job_preparation_task import JobPreparationTask
from openapi_server.models.job_release_task import JobReleaseTask
from openapi_server.models.job_state import JobState
from openapi_server.models.job_statistics import JobStatistics
from openapi_server.models.metadata_item import MetadataItem
from openapi_server.models.on_all_tasks_complete import OnAllTasksComplete
from openapi_server.models.on_task_failure import OnTaskFailure
from openapi_server.models.pool_information import PoolInformation
from openapi_server import util


class CloudJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_environment_settings: List[EnvironmentSetting]=None, constraints: JobConstraints=None, creation_time: datetime=None, display_name: str=None, e_tag: str=None, execution_info: JobExecutionInformation=None, id: str=None, job_manager_task: JobManagerTask=None, job_preparation_task: JobPreparationTask=None, job_release_task: JobReleaseTask=None, last_modified: datetime=None, metadata: List[MetadataItem]=None, network_configuration: JobNetworkConfiguration=None, on_all_tasks_complete: OnAllTasksComplete=None, on_task_failure: OnTaskFailure=None, pool_info: PoolInformation=None, previous_state: JobState=None, previous_state_transition_time: datetime=None, priority: int=None, state: JobState=None, state_transition_time: datetime=None, stats: JobStatistics=None, url: str=None, uses_task_dependencies: bool=None):
        """CloudJob - a model defined in OpenAPI

        :param common_environment_settings: The common_environment_settings of this CloudJob.
        :param constraints: The constraints of this CloudJob.
        :param creation_time: The creation_time of this CloudJob.
        :param display_name: The display_name of this CloudJob.
        :param e_tag: The e_tag of this CloudJob.
        :param execution_info: The execution_info of this CloudJob.
        :param id: The id of this CloudJob.
        :param job_manager_task: The job_manager_task of this CloudJob.
        :param job_preparation_task: The job_preparation_task of this CloudJob.
        :param job_release_task: The job_release_task of this CloudJob.
        :param last_modified: The last_modified of this CloudJob.
        :param metadata: The metadata of this CloudJob.
        :param network_configuration: The network_configuration of this CloudJob.
        :param on_all_tasks_complete: The on_all_tasks_complete of this CloudJob.
        :param on_task_failure: The on_task_failure of this CloudJob.
        :param pool_info: The pool_info of this CloudJob.
        :param previous_state: The previous_state of this CloudJob.
        :param previous_state_transition_time: The previous_state_transition_time of this CloudJob.
        :param priority: The priority of this CloudJob.
        :param state: The state of this CloudJob.
        :param state_transition_time: The state_transition_time of this CloudJob.
        :param stats: The stats of this CloudJob.
        :param url: The url of this CloudJob.
        :param uses_task_dependencies: The uses_task_dependencies of this CloudJob.
        """
        self.openapi_types = {
            'common_environment_settings': List[EnvironmentSetting],
            'constraints': JobConstraints,
            'creation_time': datetime,
            'display_name': str,
            'e_tag': str,
            'execution_info': JobExecutionInformation,
            'id': str,
            'job_manager_task': JobManagerTask,
            'job_preparation_task': JobPreparationTask,
            'job_release_task': JobReleaseTask,
            'last_modified': datetime,
            'metadata': List[MetadataItem],
            'network_configuration': JobNetworkConfiguration,
            'on_all_tasks_complete': OnAllTasksComplete,
            'on_task_failure': OnTaskFailure,
            'pool_info': PoolInformation,
            'previous_state': JobState,
            'previous_state_transition_time': datetime,
            'priority': int,
            'state': JobState,
            'state_transition_time': datetime,
            'stats': JobStatistics,
            'url': str,
            'uses_task_dependencies': bool
        }

        self.attribute_map = {
            'common_environment_settings': 'commonEnvironmentSettings',
            'constraints': 'constraints',
            'creation_time': 'creationTime',
            'display_name': 'displayName',
            'e_tag': 'eTag',
            'execution_info': 'executionInfo',
            'id': 'id',
            'job_manager_task': 'jobManagerTask',
            'job_preparation_task': 'jobPreparationTask',
            'job_release_task': 'jobReleaseTask',
            'last_modified': 'lastModified',
            'metadata': 'metadata',
            'network_configuration': 'networkConfiguration',
            'on_all_tasks_complete': 'onAllTasksComplete',
            'on_task_failure': 'onTaskFailure',
            'pool_info': 'poolInfo',
            'previous_state': 'previousState',
            'previous_state_transition_time': 'previousStateTransitionTime',
            'priority': 'priority',
            'state': 'state',
            'state_transition_time': 'stateTransitionTime',
            'stats': 'stats',
            'url': 'url',
            'uses_task_dependencies': 'usesTaskDependencies'
        }

        self._common_environment_settings = common_environment_settings
        self._constraints = constraints
        self._creation_time = creation_time
        self._display_name = display_name
        self._e_tag = e_tag
        self._execution_info = execution_info
        self._id = id
        self._job_manager_task = job_manager_task
        self._job_preparation_task = job_preparation_task
        self._job_release_task = job_release_task
        self._last_modified = last_modified
        self._metadata = metadata
        self._network_configuration = network_configuration
        self._on_all_tasks_complete = on_all_tasks_complete
        self._on_task_failure = on_task_failure
        self._pool_info = pool_info
        self._previous_state = previous_state
        self._previous_state_transition_time = previous_state_transition_time
        self._priority = priority
        self._state = state
        self._state_transition_time = state_transition_time
        self._stats = stats
        self._url = url
        self._uses_task_dependencies = uses_task_dependencies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudJob of this CloudJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_environment_settings(self):
        """Gets the common_environment_settings of this CloudJob.

        Individual Tasks can override an environment setting specified here by specifying the same setting name with a different value.

        :return: The common_environment_settings of this CloudJob.
        :rtype: List[EnvironmentSetting]
        """
        return self._common_environment_settings

    @common_environment_settings.setter
    def common_environment_settings(self, common_environment_settings):
        """Sets the common_environment_settings of this CloudJob.

        Individual Tasks can override an environment setting specified here by specifying the same setting name with a different value.

        :param common_environment_settings: The common_environment_settings of this CloudJob.
        :type common_environment_settings: List[EnvironmentSetting]
        """

        self._common_environment_settings = common_environment_settings

    @property
    def constraints(self):
        """Gets the constraints of this CloudJob.


        :return: The constraints of this CloudJob.
        :rtype: JobConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this CloudJob.


        :param constraints: The constraints of this CloudJob.
        :type constraints: JobConstraints
        """

        self._constraints = constraints

    @property
    def creation_time(self):
        """Gets the creation_time of this CloudJob.


        :return: The creation_time of this CloudJob.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this CloudJob.


        :param creation_time: The creation_time of this CloudJob.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def display_name(self):
        """Gets the display_name of this CloudJob.


        :return: The display_name of this CloudJob.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CloudJob.


        :param display_name: The display_name of this CloudJob.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def e_tag(self):
        """Gets the e_tag of this CloudJob.

        This is an opaque string. You can use it to detect whether the Job has changed between requests. In particular, you can be pass the ETag when updating a Job to specify that your changes should take effect only if nobody else has modified the Job in the meantime.

        :return: The e_tag of this CloudJob.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this CloudJob.

        This is an opaque string. You can use it to detect whether the Job has changed between requests. In particular, you can be pass the ETag when updating a Job to specify that your changes should take effect only if nobody else has modified the Job in the meantime.

        :param e_tag: The e_tag of this CloudJob.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def execution_info(self):
        """Gets the execution_info of this CloudJob.


        :return: The execution_info of this CloudJob.
        :rtype: JobExecutionInformation
        """
        return self._execution_info

    @execution_info.setter
    def execution_info(self, execution_info):
        """Sets the execution_info of this CloudJob.


        :param execution_info: The execution_info of this CloudJob.
        :type execution_info: JobExecutionInformation
        """

        self._execution_info = execution_info

    @property
    def id(self):
        """Gets the id of this CloudJob.

        The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).

        :return: The id of this CloudJob.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudJob.

        The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).

        :param id: The id of this CloudJob.
        :type id: str
        """

        self._id = id

    @property
    def job_manager_task(self):
        """Gets the job_manager_task of this CloudJob.


        :return: The job_manager_task of this CloudJob.
        :rtype: JobManagerTask
        """
        return self._job_manager_task

    @job_manager_task.setter
    def job_manager_task(self, job_manager_task):
        """Sets the job_manager_task of this CloudJob.


        :param job_manager_task: The job_manager_task of this CloudJob.
        :type job_manager_task: JobManagerTask
        """

        self._job_manager_task = job_manager_task

    @property
    def job_preparation_task(self):
        """Gets the job_preparation_task of this CloudJob.


        :return: The job_preparation_task of this CloudJob.
        :rtype: JobPreparationTask
        """
        return self._job_preparation_task

    @job_preparation_task.setter
    def job_preparation_task(self, job_preparation_task):
        """Sets the job_preparation_task of this CloudJob.


        :param job_preparation_task: The job_preparation_task of this CloudJob.
        :type job_preparation_task: JobPreparationTask
        """

        self._job_preparation_task = job_preparation_task

    @property
    def job_release_task(self):
        """Gets the job_release_task of this CloudJob.


        :return: The job_release_task of this CloudJob.
        :rtype: JobReleaseTask
        """
        return self._job_release_task

    @job_release_task.setter
    def job_release_task(self, job_release_task):
        """Sets the job_release_task of this CloudJob.


        :param job_release_task: The job_release_task of this CloudJob.
        :type job_release_task: JobReleaseTask
        """

        self._job_release_task = job_release_task

    @property
    def last_modified(self):
        """Gets the last_modified of this CloudJob.

        This is the last time at which the Job level data, such as the Job state or priority, changed. It does not factor in task-level changes such as adding new Tasks or Tasks changing state.

        :return: The last_modified of this CloudJob.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this CloudJob.

        This is the last time at which the Job level data, such as the Job state or priority, changed. It does not factor in task-level changes such as adding new Tasks or Tasks changing state.

        :param last_modified: The last_modified of this CloudJob.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def metadata(self):
        """Gets the metadata of this CloudJob.

        The Batch service does not assign any meaning to metadata; it is solely for the use of user code.

        :return: The metadata of this CloudJob.
        :rtype: List[MetadataItem]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CloudJob.

        The Batch service does not assign any meaning to metadata; it is solely for the use of user code.

        :param metadata: The metadata of this CloudJob.
        :type metadata: List[MetadataItem]
        """

        self._metadata = metadata

    @property
    def network_configuration(self):
        """Gets the network_configuration of this CloudJob.


        :return: The network_configuration of this CloudJob.
        :rtype: JobNetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this CloudJob.


        :param network_configuration: The network_configuration of this CloudJob.
        :type network_configuration: JobNetworkConfiguration
        """

        self._network_configuration = network_configuration

    @property
    def on_all_tasks_complete(self):
        """Gets the on_all_tasks_complete of this CloudJob.


        :return: The on_all_tasks_complete of this CloudJob.
        :rtype: OnAllTasksComplete
        """
        return self._on_all_tasks_complete

    @on_all_tasks_complete.setter
    def on_all_tasks_complete(self, on_all_tasks_complete):
        """Sets the on_all_tasks_complete of this CloudJob.


        :param on_all_tasks_complete: The on_all_tasks_complete of this CloudJob.
        :type on_all_tasks_complete: OnAllTasksComplete
        """

        self._on_all_tasks_complete = on_all_tasks_complete

    @property
    def on_task_failure(self):
        """Gets the on_task_failure of this CloudJob.


        :return: The on_task_failure of this CloudJob.
        :rtype: OnTaskFailure
        """
        return self._on_task_failure

    @on_task_failure.setter
    def on_task_failure(self, on_task_failure):
        """Sets the on_task_failure of this CloudJob.


        :param on_task_failure: The on_task_failure of this CloudJob.
        :type on_task_failure: OnTaskFailure
        """

        self._on_task_failure = on_task_failure

    @property
    def pool_info(self):
        """Gets the pool_info of this CloudJob.


        :return: The pool_info of this CloudJob.
        :rtype: PoolInformation
        """
        return self._pool_info

    @pool_info.setter
    def pool_info(self, pool_info):
        """Sets the pool_info of this CloudJob.


        :param pool_info: The pool_info of this CloudJob.
        :type pool_info: PoolInformation
        """

        self._pool_info = pool_info

    @property
    def previous_state(self):
        """Gets the previous_state of this CloudJob.


        :return: The previous_state of this CloudJob.
        :rtype: JobState
        """
        return self._previous_state

    @previous_state.setter
    def previous_state(self, previous_state):
        """Sets the previous_state of this CloudJob.


        :param previous_state: The previous_state of this CloudJob.
        :type previous_state: JobState
        """

        self._previous_state = previous_state

    @property
    def previous_state_transition_time(self):
        """Gets the previous_state_transition_time of this CloudJob.

        This property is not set if the Job is in its initial Active state.

        :return: The previous_state_transition_time of this CloudJob.
        :rtype: datetime
        """
        return self._previous_state_transition_time

    @previous_state_transition_time.setter
    def previous_state_transition_time(self, previous_state_transition_time):
        """Sets the previous_state_transition_time of this CloudJob.

        This property is not set if the Job is in its initial Active state.

        :param previous_state_transition_time: The previous_state_transition_time of this CloudJob.
        :type previous_state_transition_time: datetime
        """

        self._previous_state_transition_time = previous_state_transition_time

    @property
    def priority(self):
        """Gets the priority of this CloudJob.

        Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.

        :return: The priority of this CloudJob.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CloudJob.

        Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.

        :param priority: The priority of this CloudJob.
        :type priority: int
        """

        self._priority = priority

    @property
    def state(self):
        """Gets the state of this CloudJob.


        :return: The state of this CloudJob.
        :rtype: JobState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CloudJob.


        :param state: The state of this CloudJob.
        :type state: JobState
        """

        self._state = state

    @property
    def state_transition_time(self):
        """Gets the state_transition_time of this CloudJob.


        :return: The state_transition_time of this CloudJob.
        :rtype: datetime
        """
        return self._state_transition_time

    @state_transition_time.setter
    def state_transition_time(self, state_transition_time):
        """Sets the state_transition_time of this CloudJob.


        :param state_transition_time: The state_transition_time of this CloudJob.
        :type state_transition_time: datetime
        """

        self._state_transition_time = state_transition_time

    @property
    def stats(self):
        """Gets the stats of this CloudJob.


        :return: The stats of this CloudJob.
        :rtype: JobStatistics
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this CloudJob.


        :param stats: The stats of this CloudJob.
        :type stats: JobStatistics
        """

        self._stats = stats

    @property
    def url(self):
        """Gets the url of this CloudJob.


        :return: The url of this CloudJob.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CloudJob.


        :param url: The url of this CloudJob.
        :type url: str
        """

        self._url = url

    @property
    def uses_task_dependencies(self):
        """Gets the uses_task_dependencies of this CloudJob.


        :return: The uses_task_dependencies of this CloudJob.
        :rtype: bool
        """
        return self._uses_task_dependencies

    @uses_task_dependencies.setter
    def uses_task_dependencies(self, uses_task_dependencies):
        """Sets the uses_task_dependencies of this CloudJob.


        :param uses_task_dependencies: The uses_task_dependencies of this CloudJob.
        :type uses_task_dependencies: bool
        """

        self._uses_task_dependencies = uses_task_dependencies
