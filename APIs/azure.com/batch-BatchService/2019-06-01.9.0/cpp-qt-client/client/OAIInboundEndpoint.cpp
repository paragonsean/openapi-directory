/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInboundEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInboundEndpoint::OAIInboundEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInboundEndpoint::OAIInboundEndpoint() {
    this->initializeModel();
}

OAIInboundEndpoint::~OAIInboundEndpoint() {}

void OAIInboundEndpoint::initializeModel() {

    m_backend_port_isSet = false;
    m_backend_port_isValid = false;

    m_frontend_port_isSet = false;
    m_frontend_port_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_public_fqdn_isSet = false;
    m_public_fqdn_isValid = false;

    m_public_ip_address_isSet = false;
    m_public_ip_address_isValid = false;
}

void OAIInboundEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInboundEndpoint::fromJsonObject(QJsonObject json) {

    m_backend_port_isValid = ::OpenAPI::fromJsonValue(m_backend_port, json[QString("backendPort")]);
    m_backend_port_isSet = !json[QString("backendPort")].isNull() && m_backend_port_isValid;

    m_frontend_port_isValid = ::OpenAPI::fromJsonValue(m_frontend_port, json[QString("frontendPort")]);
    m_frontend_port_isSet = !json[QString("frontendPort")].isNull() && m_frontend_port_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_public_fqdn_isValid = ::OpenAPI::fromJsonValue(m_public_fqdn, json[QString("publicFQDN")]);
    m_public_fqdn_isSet = !json[QString("publicFQDN")].isNull() && m_public_fqdn_isValid;

    m_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_public_ip_address, json[QString("publicIPAddress")]);
    m_public_ip_address_isSet = !json[QString("publicIPAddress")].isNull() && m_public_ip_address_isValid;
}

QString OAIInboundEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInboundEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_port_isSet) {
        obj.insert(QString("backendPort"), ::OpenAPI::toJsonValue(m_backend_port));
    }
    if (m_frontend_port_isSet) {
        obj.insert(QString("frontendPort"), ::OpenAPI::toJsonValue(m_frontend_port));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_public_fqdn_isSet) {
        obj.insert(QString("publicFQDN"), ::OpenAPI::toJsonValue(m_public_fqdn));
    }
    if (m_public_ip_address_isSet) {
        obj.insert(QString("publicIPAddress"), ::OpenAPI::toJsonValue(m_public_ip_address));
    }
    return obj;
}

qint32 OAIInboundEndpoint::getBackendPort() const {
    return m_backend_port;
}
void OAIInboundEndpoint::setBackendPort(const qint32 &backend_port) {
    m_backend_port = backend_port;
    m_backend_port_isSet = true;
}

bool OAIInboundEndpoint::is_backend_port_Set() const{
    return m_backend_port_isSet;
}

bool OAIInboundEndpoint::is_backend_port_Valid() const{
    return m_backend_port_isValid;
}

qint32 OAIInboundEndpoint::getFrontendPort() const {
    return m_frontend_port;
}
void OAIInboundEndpoint::setFrontendPort(const qint32 &frontend_port) {
    m_frontend_port = frontend_port;
    m_frontend_port_isSet = true;
}

bool OAIInboundEndpoint::is_frontend_port_Set() const{
    return m_frontend_port_isSet;
}

bool OAIInboundEndpoint::is_frontend_port_Valid() const{
    return m_frontend_port_isValid;
}

QString OAIInboundEndpoint::getName() const {
    return m_name;
}
void OAIInboundEndpoint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInboundEndpoint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInboundEndpoint::is_name_Valid() const{
    return m_name_isValid;
}

OAIInboundEndpointProtocol OAIInboundEndpoint::getProtocol() const {
    return m_protocol;
}
void OAIInboundEndpoint::setProtocol(const OAIInboundEndpointProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIInboundEndpoint::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIInboundEndpoint::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIInboundEndpoint::getPublicFqdn() const {
    return m_public_fqdn;
}
void OAIInboundEndpoint::setPublicFqdn(const QString &public_fqdn) {
    m_public_fqdn = public_fqdn;
    m_public_fqdn_isSet = true;
}

bool OAIInboundEndpoint::is_public_fqdn_Set() const{
    return m_public_fqdn_isSet;
}

bool OAIInboundEndpoint::is_public_fqdn_Valid() const{
    return m_public_fqdn_isValid;
}

QString OAIInboundEndpoint::getPublicIpAddress() const {
    return m_public_ip_address;
}
void OAIInboundEndpoint::setPublicIpAddress(const QString &public_ip_address) {
    m_public_ip_address = public_ip_address;
    m_public_ip_address_isSet = true;
}

bool OAIInboundEndpoint::is_public_ip_address_Set() const{
    return m_public_ip_address_isSet;
}

bool OAIInboundEndpoint::is_public_ip_address_Valid() const{
    return m_public_ip_address_isValid;
}

bool OAIInboundEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInboundEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backend_port_isValid && m_frontend_port_isValid && m_name_isValid && m_protocol_isValid && m_public_fqdn_isValid && m_public_ip_address_isValid && true;
}

} // namespace OpenAPI
