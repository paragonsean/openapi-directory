/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceFile::OAIResourceFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceFile::OAIResourceFile() {
    this->initializeModel();
}

OAIResourceFile::~OAIResourceFile() {}

void OAIResourceFile::initializeModel() {

    m_auto_storage_container_name_isSet = false;
    m_auto_storage_container_name_isValid = false;

    m_blob_prefix_isSet = false;
    m_blob_prefix_isValid = false;

    m_file_mode_isSet = false;
    m_file_mode_isValid = false;

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_http_url_isSet = false;
    m_http_url_isValid = false;

    m_storage_container_url_isSet = false;
    m_storage_container_url_isValid = false;
}

void OAIResourceFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceFile::fromJsonObject(QJsonObject json) {

    m_auto_storage_container_name_isValid = ::OpenAPI::fromJsonValue(m_auto_storage_container_name, json[QString("autoStorageContainerName")]);
    m_auto_storage_container_name_isSet = !json[QString("autoStorageContainerName")].isNull() && m_auto_storage_container_name_isValid;

    m_blob_prefix_isValid = ::OpenAPI::fromJsonValue(m_blob_prefix, json[QString("blobPrefix")]);
    m_blob_prefix_isSet = !json[QString("blobPrefix")].isNull() && m_blob_prefix_isValid;

    m_file_mode_isValid = ::OpenAPI::fromJsonValue(m_file_mode, json[QString("fileMode")]);
    m_file_mode_isSet = !json[QString("fileMode")].isNull() && m_file_mode_isValid;

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;

    m_http_url_isValid = ::OpenAPI::fromJsonValue(m_http_url, json[QString("httpUrl")]);
    m_http_url_isSet = !json[QString("httpUrl")].isNull() && m_http_url_isValid;

    m_storage_container_url_isValid = ::OpenAPI::fromJsonValue(m_storage_container_url, json[QString("storageContainerUrl")]);
    m_storage_container_url_isSet = !json[QString("storageContainerUrl")].isNull() && m_storage_container_url_isValid;
}

QString OAIResourceFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceFile::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_storage_container_name_isSet) {
        obj.insert(QString("autoStorageContainerName"), ::OpenAPI::toJsonValue(m_auto_storage_container_name));
    }
    if (m_blob_prefix_isSet) {
        obj.insert(QString("blobPrefix"), ::OpenAPI::toJsonValue(m_blob_prefix));
    }
    if (m_file_mode_isSet) {
        obj.insert(QString("fileMode"), ::OpenAPI::toJsonValue(m_file_mode));
    }
    if (m_file_path_isSet) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_http_url_isSet) {
        obj.insert(QString("httpUrl"), ::OpenAPI::toJsonValue(m_http_url));
    }
    if (m_storage_container_url_isSet) {
        obj.insert(QString("storageContainerUrl"), ::OpenAPI::toJsonValue(m_storage_container_url));
    }
    return obj;
}

QString OAIResourceFile::getAutoStorageContainerName() const {
    return m_auto_storage_container_name;
}
void OAIResourceFile::setAutoStorageContainerName(const QString &auto_storage_container_name) {
    m_auto_storage_container_name = auto_storage_container_name;
    m_auto_storage_container_name_isSet = true;
}

bool OAIResourceFile::is_auto_storage_container_name_Set() const{
    return m_auto_storage_container_name_isSet;
}

bool OAIResourceFile::is_auto_storage_container_name_Valid() const{
    return m_auto_storage_container_name_isValid;
}

QString OAIResourceFile::getBlobPrefix() const {
    return m_blob_prefix;
}
void OAIResourceFile::setBlobPrefix(const QString &blob_prefix) {
    m_blob_prefix = blob_prefix;
    m_blob_prefix_isSet = true;
}

bool OAIResourceFile::is_blob_prefix_Set() const{
    return m_blob_prefix_isSet;
}

bool OAIResourceFile::is_blob_prefix_Valid() const{
    return m_blob_prefix_isValid;
}

QString OAIResourceFile::getFileMode() const {
    return m_file_mode;
}
void OAIResourceFile::setFileMode(const QString &file_mode) {
    m_file_mode = file_mode;
    m_file_mode_isSet = true;
}

bool OAIResourceFile::is_file_mode_Set() const{
    return m_file_mode_isSet;
}

bool OAIResourceFile::is_file_mode_Valid() const{
    return m_file_mode_isValid;
}

QString OAIResourceFile::getFilePath() const {
    return m_file_path;
}
void OAIResourceFile::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIResourceFile::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIResourceFile::is_file_path_Valid() const{
    return m_file_path_isValid;
}

QString OAIResourceFile::getHttpUrl() const {
    return m_http_url;
}
void OAIResourceFile::setHttpUrl(const QString &http_url) {
    m_http_url = http_url;
    m_http_url_isSet = true;
}

bool OAIResourceFile::is_http_url_Set() const{
    return m_http_url_isSet;
}

bool OAIResourceFile::is_http_url_Valid() const{
    return m_http_url_isValid;
}

QString OAIResourceFile::getStorageContainerUrl() const {
    return m_storage_container_url;
}
void OAIResourceFile::setStorageContainerUrl(const QString &storage_container_url) {
    m_storage_container_url = storage_container_url;
    m_storage_container_url_isSet = true;
}

bool OAIResourceFile::is_storage_container_url_Set() const{
    return m_storage_container_url_isSet;
}

bool OAIResourceFile::is_storage_container_url_Valid() const{
    return m_storage_container_url_isValid;
}

bool OAIResourceFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_storage_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_container_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
