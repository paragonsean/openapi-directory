/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilesApi_H
#define OAI_OAIFilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchError.h"
#include "OAINodeFileListResult.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilesApi : public QObject {
    Q_OBJECT

public:
    OAIFilesApi(const int timeOut = 0);
    ~OAIFilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  file_path QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  recursive bool [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void fileDeleteFromComputeNode(const QString &pool_id, const QString &node_id, const QString &file_path, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &recursive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  file_path QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  recursive bool [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void fileDeleteFromTask(const QString &job_id, const QString &task_id, const QString &file_path, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &recursive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  file_path QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  ocp_range QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void fileGetFromComputeNode(const QString &pool_id, const QString &node_id, const QString &file_path, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ocp_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  file_path QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  ocp_range QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void fileGetFromTask(const QString &job_id, const QString &task_id, const QString &file_path, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ocp_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  file_path QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void fileGetPropertiesFromComputeNode(const QString &pool_id, const QString &node_id, const QString &file_path, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  file_path QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void fileGetPropertiesFromTask(const QString &job_id, const QString &task_id, const QString &file_path, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  recursive bool [optional]
    * @param[in]  maxresults qint32 [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void fileListFromComputeNode(const QString &pool_id, const QString &node_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &recursive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  recursive bool [optional]
    * @param[in]  maxresults qint32 [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void fileListFromTask(const QString &job_id, const QString &task_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &recursive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fileDeleteFromComputeNodeCallback(OAIHttpRequestWorker *worker);
    void fileDeleteFromTaskCallback(OAIHttpRequestWorker *worker);
    void fileGetFromComputeNodeCallback(OAIHttpRequestWorker *worker);
    void fileGetFromTaskCallback(OAIHttpRequestWorker *worker);
    void fileGetPropertiesFromComputeNodeCallback(OAIHttpRequestWorker *worker);
    void fileGetPropertiesFromTaskCallback(OAIHttpRequestWorker *worker);
    void fileListFromComputeNodeCallback(OAIHttpRequestWorker *worker);
    void fileListFromTaskCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fileDeleteFromComputeNodeSignal();
    void fileDeleteFromTaskSignal();
    void fileGetFromComputeNodeSignal(OAIObject summary);
    void fileGetFromTaskSignal(OAIObject summary);
    void fileGetPropertiesFromComputeNodeSignal();
    void fileGetPropertiesFromTaskSignal();
    void fileListFromComputeNodeSignal(OAINodeFileListResult summary);
    void fileListFromTaskSignal(OAINodeFileListResult summary);


    void fileDeleteFromComputeNodeSignalFull(OAIHttpRequestWorker *worker);
    void fileDeleteFromTaskSignalFull(OAIHttpRequestWorker *worker);
    void fileGetFromComputeNodeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void fileGetFromTaskSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void fileGetPropertiesFromComputeNodeSignalFull(OAIHttpRequestWorker *worker);
    void fileGetPropertiesFromTaskSignalFull(OAIHttpRequestWorker *worker);
    void fileListFromComputeNodeSignalFull(OAIHttpRequestWorker *worker, OAINodeFileListResult summary);
    void fileListFromTaskSignalFull(OAIHttpRequestWorker *worker, OAINodeFileListResult summary);

    Q_DECL_DEPRECATED_X("Use fileDeleteFromComputeNodeSignalError() instead")
    void fileDeleteFromComputeNodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void fileDeleteFromComputeNodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileDeleteFromTaskSignalError() instead")
    void fileDeleteFromTaskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void fileDeleteFromTaskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileGetFromComputeNodeSignalError() instead")
    void fileGetFromComputeNodeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileGetFromComputeNodeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileGetFromTaskSignalError() instead")
    void fileGetFromTaskSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileGetFromTaskSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileGetPropertiesFromComputeNodeSignalError() instead")
    void fileGetPropertiesFromComputeNodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void fileGetPropertiesFromComputeNodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileGetPropertiesFromTaskSignalError() instead")
    void fileGetPropertiesFromTaskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void fileGetPropertiesFromTaskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileListFromComputeNodeSignalError() instead")
    void fileListFromComputeNodeSignalE(OAINodeFileListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileListFromComputeNodeSignalError(OAINodeFileListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileListFromTaskSignalError() instead")
    void fileListFromTaskSignalE(OAINodeFileListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileListFromTaskSignalError(OAINodeFileListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fileDeleteFromComputeNodeSignalErrorFull() instead")
    void fileDeleteFromComputeNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileDeleteFromComputeNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileDeleteFromTaskSignalErrorFull() instead")
    void fileDeleteFromTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileDeleteFromTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileGetFromComputeNodeSignalErrorFull() instead")
    void fileGetFromComputeNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileGetFromComputeNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileGetFromTaskSignalErrorFull() instead")
    void fileGetFromTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileGetFromTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileGetPropertiesFromComputeNodeSignalErrorFull() instead")
    void fileGetPropertiesFromComputeNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileGetPropertiesFromComputeNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileGetPropertiesFromTaskSignalErrorFull() instead")
    void fileGetPropertiesFromTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileGetPropertiesFromTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileListFromComputeNodeSignalErrorFull() instead")
    void fileListFromComputeNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileListFromComputeNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileListFromTaskSignalErrorFull() instead")
    void fileListFromTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileListFromTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
