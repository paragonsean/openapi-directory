/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageInformation::OAIImageInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageInformation::OAIImageInformation() {
    this->initializeModel();
}

OAIImageInformation::~OAIImageInformation() {}

void OAIImageInformation::initializeModel() {

    m_batch_support_end_of_life_isSet = false;
    m_batch_support_end_of_life_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_image_reference_isSet = false;
    m_image_reference_isValid = false;

    m_node_agent_skuid_isSet = false;
    m_node_agent_skuid_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_verification_type_isSet = false;
    m_verification_type_isValid = false;
}

void OAIImageInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageInformation::fromJsonObject(QJsonObject json) {

    m_batch_support_end_of_life_isValid = ::OpenAPI::fromJsonValue(m_batch_support_end_of_life, json[QString("batchSupportEndOfLife")]);
    m_batch_support_end_of_life_isSet = !json[QString("batchSupportEndOfLife")].isNull() && m_batch_support_end_of_life_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_image_reference_isValid = ::OpenAPI::fromJsonValue(m_image_reference, json[QString("imageReference")]);
    m_image_reference_isSet = !json[QString("imageReference")].isNull() && m_image_reference_isValid;

    m_node_agent_skuid_isValid = ::OpenAPI::fromJsonValue(m_node_agent_skuid, json[QString("nodeAgentSKUId")]);
    m_node_agent_skuid_isSet = !json[QString("nodeAgentSKUId")].isNull() && m_node_agent_skuid_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_verification_type_isValid = ::OpenAPI::fromJsonValue(m_verification_type, json[QString("verificationType")]);
    m_verification_type_isSet = !json[QString("verificationType")].isNull() && m_verification_type_isValid;
}

QString OAIImageInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_support_end_of_life_isSet) {
        obj.insert(QString("batchSupportEndOfLife"), ::OpenAPI::toJsonValue(m_batch_support_end_of_life));
    }
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_image_reference.isSet()) {
        obj.insert(QString("imageReference"), ::OpenAPI::toJsonValue(m_image_reference));
    }
    if (m_node_agent_skuid_isSet) {
        obj.insert(QString("nodeAgentSKUId"), ::OpenAPI::toJsonValue(m_node_agent_skuid));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_verification_type_isSet) {
        obj.insert(QString("verificationType"), ::OpenAPI::toJsonValue(m_verification_type));
    }
    return obj;
}

QDateTime OAIImageInformation::getBatchSupportEndOfLife() const {
    return m_batch_support_end_of_life;
}
void OAIImageInformation::setBatchSupportEndOfLife(const QDateTime &batch_support_end_of_life) {
    m_batch_support_end_of_life = batch_support_end_of_life;
    m_batch_support_end_of_life_isSet = true;
}

bool OAIImageInformation::is_batch_support_end_of_life_Set() const{
    return m_batch_support_end_of_life_isSet;
}

bool OAIImageInformation::is_batch_support_end_of_life_Valid() const{
    return m_batch_support_end_of_life_isValid;
}

QList<QString> OAIImageInformation::getCapabilities() const {
    return m_capabilities;
}
void OAIImageInformation::setCapabilities(const QList<QString> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIImageInformation::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIImageInformation::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

OAIImageReference OAIImageInformation::getImageReference() const {
    return m_image_reference;
}
void OAIImageInformation::setImageReference(const OAIImageReference &image_reference) {
    m_image_reference = image_reference;
    m_image_reference_isSet = true;
}

bool OAIImageInformation::is_image_reference_Set() const{
    return m_image_reference_isSet;
}

bool OAIImageInformation::is_image_reference_Valid() const{
    return m_image_reference_isValid;
}

QString OAIImageInformation::getNodeAgentSkuid() const {
    return m_node_agent_skuid;
}
void OAIImageInformation::setNodeAgentSkuid(const QString &node_agent_skuid) {
    m_node_agent_skuid = node_agent_skuid;
    m_node_agent_skuid_isSet = true;
}

bool OAIImageInformation::is_node_agent_skuid_Set() const{
    return m_node_agent_skuid_isSet;
}

bool OAIImageInformation::is_node_agent_skuid_Valid() const{
    return m_node_agent_skuid_isValid;
}

QString OAIImageInformation::getOsType() const {
    return m_os_type;
}
void OAIImageInformation::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIImageInformation::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIImageInformation::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIImageInformation::getVerificationType() const {
    return m_verification_type;
}
void OAIImageInformation::setVerificationType(const QString &verification_type) {
    m_verification_type = verification_type;
    m_verification_type_isSet = true;
}

bool OAIImageInformation::is_verification_type_Set() const{
    return m_verification_type_isSet;
}

bool OAIImageInformation::is_verification_type_Valid() const{
    return m_verification_type_isValid;
}

bool OAIImageInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_support_end_of_life_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_agent_skuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_reference_isValid && m_node_agent_skuid_isValid && m_os_type_isValid && m_verification_type_isValid && true;
}

} // namespace OpenAPI
