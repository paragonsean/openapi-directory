/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputFileBlobContainerDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputFileBlobContainerDestination::OAIOutputFileBlobContainerDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputFileBlobContainerDestination::OAIOutputFileBlobContainerDestination() {
    this->initializeModel();
}

OAIOutputFileBlobContainerDestination::~OAIOutputFileBlobContainerDestination() {}

void OAIOutputFileBlobContainerDestination::initializeModel() {

    m_container_url_isSet = false;
    m_container_url_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIOutputFileBlobContainerDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputFileBlobContainerDestination::fromJsonObject(QJsonObject json) {

    m_container_url_isValid = ::OpenAPI::fromJsonValue(m_container_url, json[QString("containerUrl")]);
    m_container_url_isSet = !json[QString("containerUrl")].isNull() && m_container_url_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIOutputFileBlobContainerDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputFileBlobContainerDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_container_url_isSet) {
        obj.insert(QString("containerUrl"), ::OpenAPI::toJsonValue(m_container_url));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QString OAIOutputFileBlobContainerDestination::getContainerUrl() const {
    return m_container_url;
}
void OAIOutputFileBlobContainerDestination::setContainerUrl(const QString &container_url) {
    m_container_url = container_url;
    m_container_url_isSet = true;
}

bool OAIOutputFileBlobContainerDestination::is_container_url_Set() const{
    return m_container_url_isSet;
}

bool OAIOutputFileBlobContainerDestination::is_container_url_Valid() const{
    return m_container_url_isValid;
}

QString OAIOutputFileBlobContainerDestination::getPath() const {
    return m_path;
}
void OAIOutputFileBlobContainerDestination::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIOutputFileBlobContainerDestination::is_path_Set() const{
    return m_path_isSet;
}

bool OAIOutputFileBlobContainerDestination::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIOutputFileBlobContainerDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputFileBlobContainerDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_container_url_isValid && true;
}

} // namespace OpenAPI
