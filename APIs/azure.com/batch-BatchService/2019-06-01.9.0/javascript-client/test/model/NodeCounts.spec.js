/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BatchService);
  }
}(this, function(expect, BatchService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BatchService.NodeCounts();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NodeCounts', function() {
    it('should create an instance of NodeCounts', function() {
      // uncomment below and update the code to test NodeCounts
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be.a(BatchService.NodeCounts);
    });

    it('should have the property creating (base name: "creating")', function() {
      // uncomment below and update the code to test the property creating
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

    it('should have the property idle (base name: "idle")', function() {
      // uncomment below and update the code to test the property idle
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

    it('should have the property leavingPool (base name: "leavingPool")', function() {
      // uncomment below and update the code to test the property leavingPool
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

    it('should have the property offline (base name: "offline")', function() {
      // uncomment below and update the code to test the property offline
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

    it('should have the property preempted (base name: "preempted")', function() {
      // uncomment below and update the code to test the property preempted
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

    it('should have the property rebooting (base name: "rebooting")', function() {
      // uncomment below and update the code to test the property rebooting
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

    it('should have the property reimaging (base name: "reimaging")', function() {
      // uncomment below and update the code to test the property reimaging
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

    it('should have the property running (base name: "running")', function() {
      // uncomment below and update the code to test the property running
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

    it('should have the property startTaskFailed (base name: "startTaskFailed")', function() {
      // uncomment below and update the code to test the property startTaskFailed
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

    it('should have the property starting (base name: "starting")', function() {
      // uncomment below and update the code to test the property starting
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

    it('should have the property unknown (base name: "unknown")', function() {
      // uncomment below and update the code to test the property unknown
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

    it('should have the property unusable (base name: "unusable")', function() {
      // uncomment below and update the code to test the property unusable
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

    it('should have the property waitingForStartTask (base name: "waitingForStartTask")', function() {
      // uncomment below and update the code to test the property waitingForStartTask
      //var instance = new BatchService.NodeCounts();
      //expect(instance).to.be();
    });

  });

}));
