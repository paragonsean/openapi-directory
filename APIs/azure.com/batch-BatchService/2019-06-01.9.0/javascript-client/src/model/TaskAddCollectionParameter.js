/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaskAddParameter from './TaskAddParameter';

/**
 * The TaskAddCollectionParameter model module.
 * @module model/TaskAddCollectionParameter
 * @version 2019-06-01.9.0
 */
class TaskAddCollectionParameter {
    /**
     * Constructs a new <code>TaskAddCollectionParameter</code>.
     * @alias module:model/TaskAddCollectionParameter
     * @param value {Array.<module:model/TaskAddParameter>} The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks.
     */
    constructor(value) { 
        
        TaskAddCollectionParameter.initialize(this, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, value) { 
        obj['value'] = value;
    }

    /**
     * Constructs a <code>TaskAddCollectionParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskAddCollectionParameter} obj Optional instance to populate.
     * @return {module:model/TaskAddCollectionParameter} The populated <code>TaskAddCollectionParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskAddCollectionParameter();

            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], [TaskAddParameter]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskAddCollectionParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskAddCollectionParameter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaskAddCollectionParameter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['value']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['value'])) {
                throw new Error("Expected the field `value` to be an array in the JSON data but got " + data['value']);
            }
            // validate the optional field `value` (array)
            for (const item of data['value']) {
                TaskAddParameter.validateJSON(item);
            };
        }

        return true;
    }


}

TaskAddCollectionParameter.RequiredProperties = ["value"];

/**
 * The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks.
 * @member {Array.<module:model/TaskAddParameter>} value
 */
TaskAddCollectionParameter.prototype['value'] = undefined;






export default TaskAddCollectionParameter;

