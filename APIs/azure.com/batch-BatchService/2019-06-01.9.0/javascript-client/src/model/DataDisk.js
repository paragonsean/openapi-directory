/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CachingType from './CachingType';
import StorageAccountType from './StorageAccountType';

/**
 * The DataDisk model module.
 * @module model/DataDisk
 * @version 2019-06-01.9.0
 */
class DataDisk {
    /**
     * Constructs a new <code>DataDisk</code>.
     * @alias module:model/DataDisk
     * @param diskSizeGB {Number} 
     * @param lun {Number} The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
     */
    constructor(diskSizeGB, lun) { 
        
        DataDisk.initialize(this, diskSizeGB, lun);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, diskSizeGB, lun) { 
        obj['diskSizeGB'] = diskSizeGB;
        obj['lun'] = lun;
    }

    /**
     * Constructs a <code>DataDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataDisk} obj Optional instance to populate.
     * @return {module:model/DataDisk} The populated <code>DataDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataDisk();

            if (data.hasOwnProperty('caching')) {
                obj['caching'] = CachingType.constructFromObject(data['caching']);
            }
            if (data.hasOwnProperty('diskSizeGB')) {
                obj['diskSizeGB'] = ApiClient.convertToType(data['diskSizeGB'], 'Number');
            }
            if (data.hasOwnProperty('lun')) {
                obj['lun'] = ApiClient.convertToType(data['lun'], 'Number');
            }
            if (data.hasOwnProperty('storageAccountType')) {
                obj['storageAccountType'] = StorageAccountType.constructFromObject(data['storageAccountType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataDisk</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataDisk.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

DataDisk.RequiredProperties = ["diskSizeGB", "lun"];

/**
 * @member {module:model/CachingType} caching
 */
DataDisk.prototype['caching'] = undefined;

/**
 * @member {Number} diskSizeGB
 */
DataDisk.prototype['diskSizeGB'] = undefined;

/**
 * The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
 * @member {Number} lun
 */
DataDisk.prototype['lun'] = undefined;

/**
 * @member {module:model/StorageAccountType} storageAccountType
 */
DataDisk.prototype['storageAccountType'] = undefined;






export default DataDisk;

