/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationPackageReference;
import org.openapitools.client.model.CertificateReference;
import org.openapitools.client.model.MetadataItem;
import org.openapitools.client.model.StartTask;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PoolPatchParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:29.913135-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PoolPatchParameter {
  public static final String SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES = "applicationPackageReferences";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES)
  private List<ApplicationPackageReference> applicationPackageReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_CERTIFICATE_REFERENCES = "certificateReferences";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_REFERENCES)
  private List<CertificateReference> certificateReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<MetadataItem> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TASK = "startTask";
  @SerializedName(SERIALIZED_NAME_START_TASK)
  private StartTask startTask;

  public PoolPatchParameter() {
  }

  public PoolPatchParameter applicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
    return this;
  }

  public PoolPatchParameter addApplicationPackageReferencesItem(ApplicationPackageReference applicationPackageReferencesItem) {
    if (this.applicationPackageReferences == null) {
      this.applicationPackageReferences = new ArrayList<>();
    }
    this.applicationPackageReferences.add(applicationPackageReferencesItem);
    return this;
  }

  /**
   * Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. If this element is present, it replaces any existing Package references. If you specify an empty collection, then all Package references are removed from the Pool. If omitted, any existing Package references are left unchanged.
   * @return applicationPackageReferences
   */
  @javax.annotation.Nullable
  public List<ApplicationPackageReference> getApplicationPackageReferences() {
    return applicationPackageReferences;
  }

  public void setApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
  }


  public PoolPatchParameter certificateReferences(List<CertificateReference> certificateReferences) {
    this.certificateReferences = certificateReferences;
    return this;
  }

  public PoolPatchParameter addCertificateReferencesItem(CertificateReference certificateReferencesItem) {
    if (this.certificateReferences == null) {
      this.certificateReferences = new ArrayList<>();
    }
    this.certificateReferences.add(certificateReferencesItem);
    return this;
  }

  /**
   * If this element is present, it replaces any existing Certificate references configured on the Pool. If omitted, any existing Certificate references are left unchanged. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &#39;remoteUser&#39;, a &#39;certs&#39; directory is created in the user&#39;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
   * @return certificateReferences
   */
  @javax.annotation.Nullable
  public List<CertificateReference> getCertificateReferences() {
    return certificateReferences;
  }

  public void setCertificateReferences(List<CertificateReference> certificateReferences) {
    this.certificateReferences = certificateReferences;
  }


  public PoolPatchParameter metadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
    return this;
  }

  public PoolPatchParameter addMetadataItem(MetadataItem metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * If this element is present, it replaces any existing metadata configured on the Pool. If you specify an empty collection, any metadata is removed from the Pool. If omitted, any existing metadata is left unchanged.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<MetadataItem> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
  }


  public PoolPatchParameter startTask(StartTask startTask) {
    this.startTask = startTask;
    return this;
  }

  /**
   * Get startTask
   * @return startTask
   */
  @javax.annotation.Nullable
  public StartTask getStartTask() {
    return startTask;
  }

  public void setStartTask(StartTask startTask) {
    this.startTask = startTask;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoolPatchParameter poolPatchParameter = (PoolPatchParameter) o;
    return Objects.equals(this.applicationPackageReferences, poolPatchParameter.applicationPackageReferences) &&
        Objects.equals(this.certificateReferences, poolPatchParameter.certificateReferences) &&
        Objects.equals(this.metadata, poolPatchParameter.metadata) &&
        Objects.equals(this.startTask, poolPatchParameter.startTask);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationPackageReferences, certificateReferences, metadata, startTask);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoolPatchParameter {\n");
    sb.append("    applicationPackageReferences: ").append(toIndentedString(applicationPackageReferences)).append("\n");
    sb.append("    certificateReferences: ").append(toIndentedString(certificateReferences)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    startTask: ").append(toIndentedString(startTask)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationPackageReferences");
    openapiFields.add("certificateReferences");
    openapiFields.add("metadata");
    openapiFields.add("startTask");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PoolPatchParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PoolPatchParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PoolPatchParameter is not found in the empty JSON string", PoolPatchParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PoolPatchParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PoolPatchParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("applicationPackageReferences") != null && !jsonObj.get("applicationPackageReferences").isJsonNull()) {
        JsonArray jsonArrayapplicationPackageReferences = jsonObj.getAsJsonArray("applicationPackageReferences");
        if (jsonArrayapplicationPackageReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applicationPackageReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applicationPackageReferences` to be an array in the JSON string but got `%s`", jsonObj.get("applicationPackageReferences").toString()));
          }

          // validate the optional field `applicationPackageReferences` (array)
          for (int i = 0; i < jsonArrayapplicationPackageReferences.size(); i++) {
            ApplicationPackageReference.validateJsonElement(jsonArrayapplicationPackageReferences.get(i));
          };
        }
      }
      if (jsonObj.get("certificateReferences") != null && !jsonObj.get("certificateReferences").isJsonNull()) {
        JsonArray jsonArraycertificateReferences = jsonObj.getAsJsonArray("certificateReferences");
        if (jsonArraycertificateReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("certificateReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `certificateReferences` to be an array in the JSON string but got `%s`", jsonObj.get("certificateReferences").toString()));
          }

          // validate the optional field `certificateReferences` (array)
          for (int i = 0; i < jsonArraycertificateReferences.size(); i++) {
            CertificateReference.validateJsonElement(jsonArraycertificateReferences.get(i));
          };
        }
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            MetadataItem.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      // validate the optional field `startTask`
      if (jsonObj.get("startTask") != null && !jsonObj.get("startTask").isJsonNull()) {
        StartTask.validateJsonElement(jsonObj.get("startTask"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PoolPatchParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PoolPatchParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PoolPatchParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PoolPatchParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<PoolPatchParameter>() {
           @Override
           public void write(JsonWriter out, PoolPatchParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PoolPatchParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PoolPatchParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PoolPatchParameter
   * @throws IOException if the JSON string is invalid with respect to PoolPatchParameter
   */
  public static PoolPatchParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PoolPatchParameter.class);
  }

  /**
   * Convert an instance of PoolPatchParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

