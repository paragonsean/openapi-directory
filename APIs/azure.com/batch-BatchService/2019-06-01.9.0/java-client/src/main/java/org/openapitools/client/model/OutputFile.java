/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OutputFileDestination;
import org.openapitools.client.model.OutputFileUploadOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OutputFile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:29.913135-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OutputFile {
  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private OutputFileDestination destination;

  public static final String SERIALIZED_NAME_FILE_PATTERN = "filePattern";
  @SerializedName(SERIALIZED_NAME_FILE_PATTERN)
  private String filePattern;

  public static final String SERIALIZED_NAME_UPLOAD_OPTIONS = "uploadOptions";
  @SerializedName(SERIALIZED_NAME_UPLOAD_OPTIONS)
  private OutputFileUploadOptions uploadOptions;

  public OutputFile() {
  }

  public OutputFile destination(OutputFileDestination destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nonnull
  public OutputFileDestination getDestination() {
    return destination;
  }

  public void setDestination(OutputFileDestination destination) {
    this.destination = destination;
  }


  public OutputFile filePattern(String filePattern) {
    this.filePattern = filePattern;
    return this;
  }

  /**
   * Both relative and absolute paths are supported. Relative paths are relative to the Task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with \&quot;.\&quot; it is ignored by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple example: **\\*.txt matches any file that does not start in &#39;.&#39; and ends with .txt in the Task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*] would match a file named abc*). Note that both \\ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.
   * @return filePattern
   */
  @javax.annotation.Nonnull
  public String getFilePattern() {
    return filePattern;
  }

  public void setFilePattern(String filePattern) {
    this.filePattern = filePattern;
  }


  public OutputFile uploadOptions(OutputFileUploadOptions uploadOptions) {
    this.uploadOptions = uploadOptions;
    return this;
  }

  /**
   * Get uploadOptions
   * @return uploadOptions
   */
  @javax.annotation.Nonnull
  public OutputFileUploadOptions getUploadOptions() {
    return uploadOptions;
  }

  public void setUploadOptions(OutputFileUploadOptions uploadOptions) {
    this.uploadOptions = uploadOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputFile outputFile = (OutputFile) o;
    return Objects.equals(this.destination, outputFile.destination) &&
        Objects.equals(this.filePattern, outputFile.filePattern) &&
        Objects.equals(this.uploadOptions, outputFile.uploadOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, filePattern, uploadOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputFile {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    filePattern: ").append(toIndentedString(filePattern)).append("\n");
    sb.append("    uploadOptions: ").append(toIndentedString(uploadOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destination");
    openapiFields.add("filePattern");
    openapiFields.add("uploadOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destination");
    openapiRequiredFields.add("filePattern");
    openapiRequiredFields.add("uploadOptions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutputFile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutputFile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutputFile is not found in the empty JSON string", OutputFile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutputFile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutputFile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OutputFile.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `destination`
      OutputFileDestination.validateJsonElement(jsonObj.get("destination"));
      if (!jsonObj.get("filePattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filePattern").toString()));
      }
      // validate the required field `uploadOptions`
      OutputFileUploadOptions.validateJsonElement(jsonObj.get("uploadOptions"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutputFile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutputFile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutputFile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutputFile.class));

       return (TypeAdapter<T>) new TypeAdapter<OutputFile>() {
           @Override
           public void write(JsonWriter out, OutputFile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutputFile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutputFile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutputFile
   * @throws IOException if the JSON string is invalid with respect to OutputFile
   */
  public static OutputFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutputFile.class);
  }

  /**
   * Convert an instance of OutputFile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

