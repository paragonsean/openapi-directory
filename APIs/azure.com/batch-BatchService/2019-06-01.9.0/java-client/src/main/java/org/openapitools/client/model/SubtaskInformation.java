/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ComputeNodeInformation;
import org.openapitools.client.model.SubtaskState;
import org.openapitools.client.model.TaskContainerExecutionInformation;
import org.openapitools.client.model.TaskExecutionResult;
import org.openapitools.client.model.TaskFailureInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubtaskInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:29.913135-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubtaskInformation {
  public static final String SERIALIZED_NAME_CONTAINER_INFO = "containerInfo";
  @SerializedName(SERIALIZED_NAME_CONTAINER_INFO)
  private TaskContainerExecutionInformation containerInfo;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EXIT_CODE = "exitCode";
  @SerializedName(SERIALIZED_NAME_EXIT_CODE)
  private Integer exitCode;

  public static final String SERIALIZED_NAME_FAILURE_INFO = "failureInfo";
  @SerializedName(SERIALIZED_NAME_FAILURE_INFO)
  private TaskFailureInformation failureInfo;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NODE_INFO = "nodeInfo";
  @SerializedName(SERIALIZED_NAME_NODE_INFO)
  private ComputeNodeInformation nodeInfo;

  public static final String SERIALIZED_NAME_PREVIOUS_STATE = "previousState";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_STATE)
  private SubtaskState previousState;

  public static final String SERIALIZED_NAME_PREVIOUS_STATE_TRANSITION_TIME = "previousStateTransitionTime";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_STATE_TRANSITION_TIME)
  private OffsetDateTime previousStateTransitionTime;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private TaskExecutionResult result;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private SubtaskState state;

  public static final String SERIALIZED_NAME_STATE_TRANSITION_TIME = "stateTransitionTime";
  @SerializedName(SERIALIZED_NAME_STATE_TRANSITION_TIME)
  private OffsetDateTime stateTransitionTime;

  public SubtaskInformation() {
  }

  public SubtaskInformation containerInfo(TaskContainerExecutionInformation containerInfo) {
    this.containerInfo = containerInfo;
    return this;
  }

  /**
   * Get containerInfo
   * @return containerInfo
   */
  @javax.annotation.Nullable
  public TaskContainerExecutionInformation getContainerInfo() {
    return containerInfo;
  }

  public void setContainerInfo(TaskContainerExecutionInformation containerInfo) {
    this.containerInfo = containerInfo;
  }


  public SubtaskInformation endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * This property is set only if the subtask is in the Completed state.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public SubtaskInformation exitCode(Integer exitCode) {
    this.exitCode = exitCode;
    return this;
  }

  /**
   * This property is set only if the subtask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
   * @return exitCode
   */
  @javax.annotation.Nullable
  public Integer getExitCode() {
    return exitCode;
  }

  public void setExitCode(Integer exitCode) {
    this.exitCode = exitCode;
  }


  public SubtaskInformation failureInfo(TaskFailureInformation failureInfo) {
    this.failureInfo = failureInfo;
    return this;
  }

  /**
   * Get failureInfo
   * @return failureInfo
   */
  @javax.annotation.Nullable
  public TaskFailureInformation getFailureInfo() {
    return failureInfo;
  }

  public void setFailureInfo(TaskFailureInformation failureInfo) {
    this.failureInfo = failureInfo;
  }


  public SubtaskInformation id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public SubtaskInformation nodeInfo(ComputeNodeInformation nodeInfo) {
    this.nodeInfo = nodeInfo;
    return this;
  }

  /**
   * Get nodeInfo
   * @return nodeInfo
   */
  @javax.annotation.Nullable
  public ComputeNodeInformation getNodeInfo() {
    return nodeInfo;
  }

  public void setNodeInfo(ComputeNodeInformation nodeInfo) {
    this.nodeInfo = nodeInfo;
  }


  public SubtaskInformation previousState(SubtaskState previousState) {
    this.previousState = previousState;
    return this;
  }

  /**
   * Get previousState
   * @return previousState
   */
  @javax.annotation.Nullable
  public SubtaskState getPreviousState() {
    return previousState;
  }

  public void setPreviousState(SubtaskState previousState) {
    this.previousState = previousState;
  }


  public SubtaskInformation previousStateTransitionTime(OffsetDateTime previousStateTransitionTime) {
    this.previousStateTransitionTime = previousStateTransitionTime;
    return this;
  }

  /**
   * This property is not set if the subtask is in its initial running state.
   * @return previousStateTransitionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPreviousStateTransitionTime() {
    return previousStateTransitionTime;
  }

  public void setPreviousStateTransitionTime(OffsetDateTime previousStateTransitionTime) {
    this.previousStateTransitionTime = previousStateTransitionTime;
  }


  public SubtaskInformation result(TaskExecutionResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public TaskExecutionResult getResult() {
    return result;
  }

  public void setResult(TaskExecutionResult result) {
    this.result = result;
  }


  public SubtaskInformation startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public SubtaskInformation state(SubtaskState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public SubtaskState getState() {
    return state;
  }

  public void setState(SubtaskState state) {
    this.state = state;
  }


  public SubtaskInformation stateTransitionTime(OffsetDateTime stateTransitionTime) {
    this.stateTransitionTime = stateTransitionTime;
    return this;
  }

  /**
   * Get stateTransitionTime
   * @return stateTransitionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStateTransitionTime() {
    return stateTransitionTime;
  }

  public void setStateTransitionTime(OffsetDateTime stateTransitionTime) {
    this.stateTransitionTime = stateTransitionTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubtaskInformation subtaskInformation = (SubtaskInformation) o;
    return Objects.equals(this.containerInfo, subtaskInformation.containerInfo) &&
        Objects.equals(this.endTime, subtaskInformation.endTime) &&
        Objects.equals(this.exitCode, subtaskInformation.exitCode) &&
        Objects.equals(this.failureInfo, subtaskInformation.failureInfo) &&
        Objects.equals(this.id, subtaskInformation.id) &&
        Objects.equals(this.nodeInfo, subtaskInformation.nodeInfo) &&
        Objects.equals(this.previousState, subtaskInformation.previousState) &&
        Objects.equals(this.previousStateTransitionTime, subtaskInformation.previousStateTransitionTime) &&
        Objects.equals(this.result, subtaskInformation.result) &&
        Objects.equals(this.startTime, subtaskInformation.startTime) &&
        Objects.equals(this.state, subtaskInformation.state) &&
        Objects.equals(this.stateTransitionTime, subtaskInformation.stateTransitionTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerInfo, endTime, exitCode, failureInfo, id, nodeInfo, previousState, previousStateTransitionTime, result, startTime, state, stateTransitionTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubtaskInformation {\n");
    sb.append("    containerInfo: ").append(toIndentedString(containerInfo)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    exitCode: ").append(toIndentedString(exitCode)).append("\n");
    sb.append("    failureInfo: ").append(toIndentedString(failureInfo)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeInfo: ").append(toIndentedString(nodeInfo)).append("\n");
    sb.append("    previousState: ").append(toIndentedString(previousState)).append("\n");
    sb.append("    previousStateTransitionTime: ").append(toIndentedString(previousStateTransitionTime)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateTransitionTime: ").append(toIndentedString(stateTransitionTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerInfo");
    openapiFields.add("endTime");
    openapiFields.add("exitCode");
    openapiFields.add("failureInfo");
    openapiFields.add("id");
    openapiFields.add("nodeInfo");
    openapiFields.add("previousState");
    openapiFields.add("previousStateTransitionTime");
    openapiFields.add("result");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("stateTransitionTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubtaskInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubtaskInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubtaskInformation is not found in the empty JSON string", SubtaskInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubtaskInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubtaskInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containerInfo`
      if (jsonObj.get("containerInfo") != null && !jsonObj.get("containerInfo").isJsonNull()) {
        TaskContainerExecutionInformation.validateJsonElement(jsonObj.get("containerInfo"));
      }
      // validate the optional field `failureInfo`
      if (jsonObj.get("failureInfo") != null && !jsonObj.get("failureInfo").isJsonNull()) {
        TaskFailureInformation.validateJsonElement(jsonObj.get("failureInfo"));
      }
      // validate the optional field `nodeInfo`
      if (jsonObj.get("nodeInfo") != null && !jsonObj.get("nodeInfo").isJsonNull()) {
        ComputeNodeInformation.validateJsonElement(jsonObj.get("nodeInfo"));
      }
      // validate the optional field `previousState`
      if (jsonObj.get("previousState") != null && !jsonObj.get("previousState").isJsonNull()) {
        SubtaskState.validateJsonElement(jsonObj.get("previousState"));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        TaskExecutionResult.validateJsonElement(jsonObj.get("result"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        SubtaskState.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubtaskInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubtaskInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubtaskInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubtaskInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<SubtaskInformation>() {
           @Override
           public void write(JsonWriter out, SubtaskInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubtaskInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubtaskInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubtaskInformation
   * @throws IOException if the JSON string is invalid with respect to SubtaskInformation
   */
  public static SubtaskInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubtaskInformation.class);
  }

  /**
   * Convert an instance of SubtaskInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

