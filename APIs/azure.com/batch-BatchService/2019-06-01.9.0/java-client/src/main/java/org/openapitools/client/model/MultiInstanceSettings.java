/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Multi-instance Tasks are commonly used to support MPI Tasks. In the MPI case, if any of the subtasks fail (for example due to exiting with a non-zero exit code) the entire multi-instance Task fails. The multi-instance Task is then terminated and retried, up to its retry limit.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:29.913135-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MultiInstanceSettings {
  public static final String SERIALIZED_NAME_COMMON_RESOURCE_FILES = "commonResourceFiles";
  @SerializedName(SERIALIZED_NAME_COMMON_RESOURCE_FILES)
  private List<ResourceFile> commonResourceFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_COORDINATION_COMMAND_LINE = "coordinationCommandLine";
  @SerializedName(SERIALIZED_NAME_COORDINATION_COMMAND_LINE)
  private String coordinationCommandLine;

  public static final String SERIALIZED_NAME_NUMBER_OF_INSTANCES = "numberOfInstances";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_INSTANCES)
  private Integer numberOfInstances;

  public MultiInstanceSettings() {
  }

  public MultiInstanceSettings commonResourceFiles(List<ResourceFile> commonResourceFiles) {
    this.commonResourceFiles = commonResourceFiles;
    return this;
  }

  public MultiInstanceSettings addCommonResourceFilesItem(ResourceFile commonResourceFilesItem) {
    if (this.commonResourceFiles == null) {
      this.commonResourceFiles = new ArrayList<>();
    }
    this.commonResourceFiles.add(commonResourceFilesItem);
    return this;
  }

  /**
   * The difference between common resource files and Task resource files is that common resource files are downloaded for all subtasks including the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above the working directory).  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
   * @return commonResourceFiles
   */
  @javax.annotation.Nullable
  public List<ResourceFile> getCommonResourceFiles() {
    return commonResourceFiles;
  }

  public void setCommonResourceFiles(List<ResourceFile> commonResourceFiles) {
    this.commonResourceFiles = commonResourceFiles;
  }


  public MultiInstanceSettings coordinationCommandLine(String coordinationCommandLine) {
    this.coordinationCommandLine = coordinationCommandLine;
    return this;
  }

  /**
   * A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages.
   * @return coordinationCommandLine
   */
  @javax.annotation.Nonnull
  public String getCoordinationCommandLine() {
    return coordinationCommandLine;
  }

  public void setCoordinationCommandLine(String coordinationCommandLine) {
    this.coordinationCommandLine = coordinationCommandLine;
  }


  public MultiInstanceSettings numberOfInstances(Integer numberOfInstances) {
    this.numberOfInstances = numberOfInstances;
    return this;
  }

  /**
   * If omitted, the default is 1.
   * @return numberOfInstances
   */
  @javax.annotation.Nullable
  public Integer getNumberOfInstances() {
    return numberOfInstances;
  }

  public void setNumberOfInstances(Integer numberOfInstances) {
    this.numberOfInstances = numberOfInstances;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiInstanceSettings multiInstanceSettings = (MultiInstanceSettings) o;
    return Objects.equals(this.commonResourceFiles, multiInstanceSettings.commonResourceFiles) &&
        Objects.equals(this.coordinationCommandLine, multiInstanceSettings.coordinationCommandLine) &&
        Objects.equals(this.numberOfInstances, multiInstanceSettings.numberOfInstances);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonResourceFiles, coordinationCommandLine, numberOfInstances);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiInstanceSettings {\n");
    sb.append("    commonResourceFiles: ").append(toIndentedString(commonResourceFiles)).append("\n");
    sb.append("    coordinationCommandLine: ").append(toIndentedString(coordinationCommandLine)).append("\n");
    sb.append("    numberOfInstances: ").append(toIndentedString(numberOfInstances)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonResourceFiles");
    openapiFields.add("coordinationCommandLine");
    openapiFields.add("numberOfInstances");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("coordinationCommandLine");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MultiInstanceSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiInstanceSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiInstanceSettings is not found in the empty JSON string", MultiInstanceSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultiInstanceSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiInstanceSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MultiInstanceSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("commonResourceFiles") != null && !jsonObj.get("commonResourceFiles").isJsonNull()) {
        JsonArray jsonArraycommonResourceFiles = jsonObj.getAsJsonArray("commonResourceFiles");
        if (jsonArraycommonResourceFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commonResourceFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commonResourceFiles` to be an array in the JSON string but got `%s`", jsonObj.get("commonResourceFiles").toString()));
          }

          // validate the optional field `commonResourceFiles` (array)
          for (int i = 0; i < jsonArraycommonResourceFiles.size(); i++) {
            ResourceFile.validateJsonElement(jsonArraycommonResourceFiles.get(i));
          };
        }
      }
      if (!jsonObj.get("coordinationCommandLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coordinationCommandLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coordinationCommandLine").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiInstanceSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiInstanceSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiInstanceSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiInstanceSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiInstanceSettings>() {
           @Override
           public void write(JsonWriter out, MultiInstanceSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiInstanceSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MultiInstanceSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MultiInstanceSettings
   * @throws IOException if the JSON string is invalid with respect to MultiInstanceSettings
   */
  public static MultiInstanceSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiInstanceSettings.class);
  }

  /**
   * Convert an instance of MultiInstanceSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

