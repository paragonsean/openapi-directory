/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NodeReimageParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:29.913135-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeReimageParameter {
  /**
   * The default value is requeue.
   */
  @JsonAdapter(NodeReimageOptionEnum.Adapter.class)
  public enum NodeReimageOptionEnum {
    REQUEUE("requeue"),
    
    TERMINATE("terminate"),
    
    TASKCOMPLETION("taskcompletion"),
    
    RETAINEDDATA("retaineddata");

    private String value;

    NodeReimageOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NodeReimageOptionEnum fromValue(String value) {
      for (NodeReimageOptionEnum b : NodeReimageOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NodeReimageOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NodeReimageOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NodeReimageOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NodeReimageOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NodeReimageOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NODE_REIMAGE_OPTION = "nodeReimageOption";
  @SerializedName(SERIALIZED_NAME_NODE_REIMAGE_OPTION)
  private NodeReimageOptionEnum nodeReimageOption;

  public NodeReimageParameter() {
  }

  public NodeReimageParameter nodeReimageOption(NodeReimageOptionEnum nodeReimageOption) {
    this.nodeReimageOption = nodeReimageOption;
    return this;
  }

  /**
   * The default value is requeue.
   * @return nodeReimageOption
   */
  @javax.annotation.Nullable
  public NodeReimageOptionEnum getNodeReimageOption() {
    return nodeReimageOption;
  }

  public void setNodeReimageOption(NodeReimageOptionEnum nodeReimageOption) {
    this.nodeReimageOption = nodeReimageOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeReimageParameter nodeReimageParameter = (NodeReimageParameter) o;
    return Objects.equals(this.nodeReimageOption, nodeReimageParameter.nodeReimageOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeReimageOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeReimageParameter {\n");
    sb.append("    nodeReimageOption: ").append(toIndentedString(nodeReimageOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nodeReimageOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeReimageParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeReimageParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeReimageParameter is not found in the empty JSON string", NodeReimageParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeReimageParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeReimageParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nodeReimageOption") != null && !jsonObj.get("nodeReimageOption").isJsonNull()) && !jsonObj.get("nodeReimageOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeReimageOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeReimageOption").toString()));
      }
      // validate the optional field `nodeReimageOption`
      if (jsonObj.get("nodeReimageOption") != null && !jsonObj.get("nodeReimageOption").isJsonNull()) {
        NodeReimageOptionEnum.validateJsonElement(jsonObj.get("nodeReimageOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeReimageParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeReimageParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeReimageParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeReimageParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeReimageParameter>() {
           @Override
           public void write(JsonWriter out, NodeReimageParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeReimageParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeReimageParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeReimageParameter
   * @throws IOException if the JSON string is invalid with respect to NodeReimageParameter
   */
  public static NodeReimageParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeReimageParameter.class);
  }

  /**
   * Convert an instance of NodeReimageParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

