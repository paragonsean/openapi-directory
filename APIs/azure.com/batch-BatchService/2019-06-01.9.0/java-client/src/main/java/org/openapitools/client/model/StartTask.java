/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnvironmentSetting;
import org.openapitools.client.model.ResourceFile;
import org.openapitools.client.model.TaskContainerSettings;
import org.openapitools.client.model.UserIdentity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the start Task may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid start Tasks which create breakaway process or install/launch services from the start Task working directory, as this will block Batch from being able to re-run the start Task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:29.913135-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartTask {
  public static final String SERIALIZED_NAME_COMMAND_LINE = "commandLine";
  @SerializedName(SERIALIZED_NAME_COMMAND_LINE)
  private String commandLine;

  public static final String SERIALIZED_NAME_CONTAINER_SETTINGS = "containerSettings";
  @SerializedName(SERIALIZED_NAME_CONTAINER_SETTINGS)
  private TaskContainerSettings containerSettings;

  public static final String SERIALIZED_NAME_ENVIRONMENT_SETTINGS = "environmentSettings";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_SETTINGS)
  private List<EnvironmentSetting> environmentSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_TASK_RETRY_COUNT = "maxTaskRetryCount";
  @SerializedName(SERIALIZED_NAME_MAX_TASK_RETRY_COUNT)
  private Integer maxTaskRetryCount;

  public static final String SERIALIZED_NAME_RESOURCE_FILES = "resourceFiles";
  @SerializedName(SERIALIZED_NAME_RESOURCE_FILES)
  private List<ResourceFile> resourceFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_IDENTITY = "userIdentity";
  @SerializedName(SERIALIZED_NAME_USER_IDENTITY)
  private UserIdentity userIdentity;

  public static final String SERIALIZED_NAME_WAIT_FOR_SUCCESS = "waitForSuccess";
  @SerializedName(SERIALIZED_NAME_WAIT_FOR_SUCCESS)
  private Boolean waitForSuccess;

  public StartTask() {
  }

  public StartTask commandLine(String commandLine) {
    this.commandLine = commandLine;
    return this;
  }

  /**
   * The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \&quot;cmd /c MyCommand\&quot; in Windows or \&quot;/bin/sh -c MyCommand\&quot; in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   * @return commandLine
   */
  @javax.annotation.Nonnull
  public String getCommandLine() {
    return commandLine;
  }

  public void setCommandLine(String commandLine) {
    this.commandLine = commandLine;
  }


  public StartTask containerSettings(TaskContainerSettings containerSettings) {
    this.containerSettings = containerSettings;
    return this;
  }

  /**
   * Get containerSettings
   * @return containerSettings
   */
  @javax.annotation.Nullable
  public TaskContainerSettings getContainerSettings() {
    return containerSettings;
  }

  public void setContainerSettings(TaskContainerSettings containerSettings) {
    this.containerSettings = containerSettings;
  }


  public StartTask environmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
    return this;
  }

  public StartTask addEnvironmentSettingsItem(EnvironmentSetting environmentSettingsItem) {
    if (this.environmentSettings == null) {
      this.environmentSettings = new ArrayList<>();
    }
    this.environmentSettings.add(environmentSettingsItem);
    return this;
  }

  /**
   * Get environmentSettings
   * @return environmentSettings
   */
  @javax.annotation.Nullable
  public List<EnvironmentSetting> getEnvironmentSettings() {
    return environmentSettings;
  }

  public void setEnvironmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
  }


  public StartTask maxTaskRetryCount(Integer maxTaskRetryCount) {
    this.maxTaskRetryCount = maxTaskRetryCount;
    return this;
  }

  /**
   * The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit.
   * @return maxTaskRetryCount
   */
  @javax.annotation.Nullable
  public Integer getMaxTaskRetryCount() {
    return maxTaskRetryCount;
  }

  public void setMaxTaskRetryCount(Integer maxTaskRetryCount) {
    this.maxTaskRetryCount = maxTaskRetryCount;
  }


  public StartTask resourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
    return this;
  }

  public StartTask addResourceFilesItem(ResourceFile resourceFilesItem) {
    if (this.resourceFiles == null) {
      this.resourceFiles = new ArrayList<>();
    }
    this.resourceFiles.add(resourceFilesItem);
    return this;
  }

  /**
   * Files listed under this element are located in the Task&#39;s working directory.
   * @return resourceFiles
   */
  @javax.annotation.Nullable
  public List<ResourceFile> getResourceFiles() {
    return resourceFiles;
  }

  public void setResourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
  }


  public StartTask userIdentity(UserIdentity userIdentity) {
    this.userIdentity = userIdentity;
    return this;
  }

  /**
   * Get userIdentity
   * @return userIdentity
   */
  @javax.annotation.Nullable
  public UserIdentity getUserIdentity() {
    return userIdentity;
  }

  public void setUserIdentity(UserIdentity userIdentity) {
    this.userIdentity = userIdentity;
  }


  public StartTask waitForSuccess(Boolean waitForSuccess) {
    this.waitForSuccess = waitForSuccess;
    return this;
  }

  /**
   * If true and the start Task fails on a Node, the Batch service retries the start Task up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the start Task to complete. In this case, other Tasks can start executing on the Compute Node while the start Task is still running; and even if the start Task fails, new Tasks will continue to be scheduled on the Compute Node. The default is false.
   * @return waitForSuccess
   */
  @javax.annotation.Nullable
  public Boolean getWaitForSuccess() {
    return waitForSuccess;
  }

  public void setWaitForSuccess(Boolean waitForSuccess) {
    this.waitForSuccess = waitForSuccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartTask startTask = (StartTask) o;
    return Objects.equals(this.commandLine, startTask.commandLine) &&
        Objects.equals(this.containerSettings, startTask.containerSettings) &&
        Objects.equals(this.environmentSettings, startTask.environmentSettings) &&
        Objects.equals(this.maxTaskRetryCount, startTask.maxTaskRetryCount) &&
        Objects.equals(this.resourceFiles, startTask.resourceFiles) &&
        Objects.equals(this.userIdentity, startTask.userIdentity) &&
        Objects.equals(this.waitForSuccess, startTask.waitForSuccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commandLine, containerSettings, environmentSettings, maxTaskRetryCount, resourceFiles, userIdentity, waitForSuccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartTask {\n");
    sb.append("    commandLine: ").append(toIndentedString(commandLine)).append("\n");
    sb.append("    containerSettings: ").append(toIndentedString(containerSettings)).append("\n");
    sb.append("    environmentSettings: ").append(toIndentedString(environmentSettings)).append("\n");
    sb.append("    maxTaskRetryCount: ").append(toIndentedString(maxTaskRetryCount)).append("\n");
    sb.append("    resourceFiles: ").append(toIndentedString(resourceFiles)).append("\n");
    sb.append("    userIdentity: ").append(toIndentedString(userIdentity)).append("\n");
    sb.append("    waitForSuccess: ").append(toIndentedString(waitForSuccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commandLine");
    openapiFields.add("containerSettings");
    openapiFields.add("environmentSettings");
    openapiFields.add("maxTaskRetryCount");
    openapiFields.add("resourceFiles");
    openapiFields.add("userIdentity");
    openapiFields.add("waitForSuccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("commandLine");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartTask is not found in the empty JSON string", StartTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartTask.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("commandLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandLine").toString()));
      }
      // validate the optional field `containerSettings`
      if (jsonObj.get("containerSettings") != null && !jsonObj.get("containerSettings").isJsonNull()) {
        TaskContainerSettings.validateJsonElement(jsonObj.get("containerSettings"));
      }
      if (jsonObj.get("environmentSettings") != null && !jsonObj.get("environmentSettings").isJsonNull()) {
        JsonArray jsonArrayenvironmentSettings = jsonObj.getAsJsonArray("environmentSettings");
        if (jsonArrayenvironmentSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentSettings` to be an array in the JSON string but got `%s`", jsonObj.get("environmentSettings").toString()));
          }

          // validate the optional field `environmentSettings` (array)
          for (int i = 0; i < jsonArrayenvironmentSettings.size(); i++) {
            EnvironmentSetting.validateJsonElement(jsonArrayenvironmentSettings.get(i));
          };
        }
      }
      if (jsonObj.get("resourceFiles") != null && !jsonObj.get("resourceFiles").isJsonNull()) {
        JsonArray jsonArrayresourceFiles = jsonObj.getAsJsonArray("resourceFiles");
        if (jsonArrayresourceFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceFiles` to be an array in the JSON string but got `%s`", jsonObj.get("resourceFiles").toString()));
          }

          // validate the optional field `resourceFiles` (array)
          for (int i = 0; i < jsonArrayresourceFiles.size(); i++) {
            ResourceFile.validateJsonElement(jsonArrayresourceFiles.get(i));
          };
        }
      }
      // validate the optional field `userIdentity`
      if (jsonObj.get("userIdentity") != null && !jsonObj.get("userIdentity").isJsonNull()) {
        UserIdentity.validateJsonElement(jsonObj.get("userIdentity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartTask.class));

       return (TypeAdapter<T>) new TypeAdapter<StartTask>() {
           @Override
           public void write(JsonWriter out, StartTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartTask
   * @throws IOException if the JSON string is invalid with respect to StartTask
   */
  public static StartTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartTask.class);
  }

  /**
   * Convert an instance of StartTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

