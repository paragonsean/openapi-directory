/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2019-06-01.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchError;
import org.openapitools.client.model.CloudTask;
import org.openapitools.client.model.CloudTaskListResult;
import org.openapitools.client.model.CloudTaskListSubtasksResult;
import org.openapitools.client.model.TaskAddCollectionParameter;
import org.openapitools.client.model.TaskAddCollectionResult;
import org.openapitools.client.model.TaskAddParameter;
import org.openapitools.client.model.TaskUpdateParameter;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TasksApi
 */
@Disabled
public class TasksApiTest {

    private final TasksApi api = new TasksApi();

    /**
     * Adds a Task to the specified Job.
     *
     * The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskAddTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        TaskAddParameter task = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.taskAdd(jobId, apiVersion, task, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Adds a collection of Tasks to the specified Job.
     *
     * Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskAddCollectionTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        TaskAddCollectionParameter taskCollection = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        TaskAddCollectionResult response = api.taskAddCollection(jobId, apiVersion, taskCollection, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Deletes a Task from the specified Job.
     *
     * When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskDeleteTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.taskDelete(jobId, taskId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Gets information about the specified Task.
     *
     * For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskGetTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String apiVersion = null;
        String $select = null;
        String $expand = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        CloudTask response = api.taskGet(jobId, taskId, apiVersion, $select, $expand, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Lists all of the Tasks that are associated with the specified Job.
     *
     * For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskListTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        String $filter = null;
        String $select = null;
        String $expand = null;
        Integer maxresults = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        CloudTaskListResult response = api.taskList(jobId, apiVersion, $filter, $select, $expand, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Lists all of the subtasks that are associated with the specified multi-instance Task.
     *
     * If the Task is not a multi-instance Task then this returns an empty collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskListSubtasksTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String apiVersion = null;
        String $select = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        CloudTaskListSubtasksResult response = api.taskListSubtasks(jobId, taskId, apiVersion, $select, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Reactivates a Task, allowing it to run again even if its retry count has been exhausted.
     *
     * Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task&#39;s state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskReactivateTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.taskReactivate(jobId, taskId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Terminates the specified Task.
     *
     * When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskTerminateTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.taskTerminate(jobId, taskId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Updates the properties of the specified Task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskUpdateTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String apiVersion = null;
        TaskUpdateParameter taskUpdateParameter = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.taskUpdate(jobId, taskId, apiVersion, taskUpdateParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

}
