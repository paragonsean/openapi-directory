/**
 * SignalRManagementClient
 * REST API for Azure SignalR Service
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SignalRManagementClient);
  }
}(this, function(expect, SignalRManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SignalRManagementClient.SignalRApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SignalRApi', function() {
    describe('operationsList', function() {
      it('should call operationsList successfully', function(done) {
        //uncomment below and update the code to test operationsList
        //instance.operationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signalRCheckNameAvailability', function() {
      it('should call signalRCheckNameAvailability successfully', function(done) {
        //uncomment below and update the code to test signalRCheckNameAvailability
        //instance.signalRCheckNameAvailability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signalRCreateOrUpdate', function() {
      it('should call signalRCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test signalRCreateOrUpdate
        //instance.signalRCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signalRDelete', function() {
      it('should call signalRDelete successfully', function(done) {
        //uncomment below and update the code to test signalRDelete
        //instance.signalRDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signalRGet', function() {
      it('should call signalRGet successfully', function(done) {
        //uncomment below and update the code to test signalRGet
        //instance.signalRGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signalRListByResourceGroup', function() {
      it('should call signalRListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test signalRListByResourceGroup
        //instance.signalRListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signalRListBySubscription', function() {
      it('should call signalRListBySubscription successfully', function(done) {
        //uncomment below and update the code to test signalRListBySubscription
        //instance.signalRListBySubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signalRListKeys', function() {
      it('should call signalRListKeys successfully', function(done) {
        //uncomment below and update the code to test signalRListKeys
        //instance.signalRListKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signalRRegenerateKey', function() {
      it('should call signalRRegenerateKey successfully', function(done) {
        //uncomment below and update the code to test signalRRegenerateKey
        //instance.signalRRegenerateKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signalRRestart', function() {
      it('should call signalRRestart successfully', function(done) {
        //uncomment below and update the code to test signalRRestart
        //instance.signalRRestart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signalRUpdate', function() {
      it('should call signalRUpdate successfully', function(done) {
        //uncomment below and update the code to test signalRUpdate
        //instance.signalRUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usagesList', function() {
      it('should call usagesList successfully', function(done) {
        //uncomment below and update the code to test usagesList
        //instance.usagesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
