/**
 * SignalRManagementClient
 * REST API for Azure SignalR Service
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';

/**
 * The MetricSpecification model module.
 * @module model/MetricSpecification
 * @version 2018-10-01
 */
class MetricSpecification {
    /**
     * Constructs a new <code>MetricSpecification</code>.
     * Specifications of the Metrics for Azure Monitoring.
     * @alias module:model/MetricSpecification
     */
    constructor() { 
        
        MetricSpecification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricSpecification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricSpecification} obj Optional instance to populate.
     * @return {module:model/MetricSpecification} The populated <code>MetricSpecification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricSpecification();

            if (data.hasOwnProperty('aggregationType')) {
                obj['aggregationType'] = ApiClient.convertToType(data['aggregationType'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [Dimension]);
            }
            if (data.hasOwnProperty('displayDescription')) {
                obj['displayDescription'] = ApiClient.convertToType(data['displayDescription'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('fillGapWithZero')) {
                obj['fillGapWithZero'] = ApiClient.convertToType(data['fillGapWithZero'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricSpecification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricSpecification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregationType'] && !(typeof data['aggregationType'] === 'string' || data['aggregationType'] instanceof String)) {
            throw new Error("Expected the field `aggregationType` to be a primitive type in the JSON string but got " + data['aggregationType']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                Dimension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayDescription'] && !(typeof data['displayDescription'] === 'string' || data['displayDescription'] instanceof String)) {
            throw new Error("Expected the field `displayDescription` to be a primitive type in the JSON string but got " + data['displayDescription']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['fillGapWithZero'] && !(typeof data['fillGapWithZero'] === 'string' || data['fillGapWithZero'] instanceof String)) {
            throw new Error("Expected the field `fillGapWithZero` to be a primitive type in the JSON string but got " + data['fillGapWithZero']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}



/**
 * Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count.
 * @member {String} aggregationType
 */
MetricSpecification.prototype['aggregationType'] = undefined;

/**
 * The name of the metric category that the metric belongs to. A metric can only belong to a single category.
 * @member {String} category
 */
MetricSpecification.prototype['category'] = undefined;

/**
 * The dimensions of the metrics.
 * @member {Array.<module:model/Dimension>} dimensions
 */
MetricSpecification.prototype['dimensions'] = undefined;

/**
 * Localized friendly description of the metric.
 * @member {String} displayDescription
 */
MetricSpecification.prototype['displayDescription'] = undefined;

/**
 * Localized friendly display name of the metric.
 * @member {String} displayName
 */
MetricSpecification.prototype['displayName'] = undefined;

/**
 * Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published.   Ex. a metric that returns the number of times a particular error code was emitted. The error code may not appear   often, instead of the RP publishing 0, Shoebox can auto fill in 0s for time periods where nothing was emitted.
 * @member {String} fillGapWithZero
 */
MetricSpecification.prototype['fillGapWithZero'] = undefined;

/**
 * Name of the metric.
 * @member {String} name
 */
MetricSpecification.prototype['name'] = undefined;

/**
 * The unit that makes sense for the metric.
 * @member {String} unit
 */
MetricSpecification.prototype['unit'] = undefined;






export default MetricSpecification;

