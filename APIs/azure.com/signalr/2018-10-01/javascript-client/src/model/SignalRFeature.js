/**
 * SignalRManagementClient
 * REST API for Azure SignalR Service
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SignalRFeature model module.
 * @module model/SignalRFeature
 * @version 2018-10-01
 */
class SignalRFeature {
    /**
     * Constructs a new <code>SignalRFeature</code>.
     * Feature of a SignalR resource, which controls the SignalR runtime behavior.
     * @alias module:model/SignalRFeature
     * @param flag {module:model/SignalRFeature.FlagEnum} FeatureFlags is the supported features of Azure SignalR service.  - ServiceMode: Flag for backend server for SignalR service. Values allowed: \"Default\": have your own backend server; \"Serverless\": your application doesn't have a backend server; \"Classic\": for backward compatibility. Support both Default and Serverless mode but not recommended; \"PredefinedOnly\": for future use.  - EnableConnectivityLogs: \"true\"/\"false\", to enable/disable the connectivity log category respectively.
     * @param value {String} Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
     */
    constructor(flag, value) { 
        
        SignalRFeature.initialize(this, flag, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, flag, value) { 
        obj['flag'] = flag;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>SignalRFeature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignalRFeature} obj Optional instance to populate.
     * @return {module:model/SignalRFeature} The populated <code>SignalRFeature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignalRFeature();

            if (data.hasOwnProperty('flag')) {
                obj['flag'] = ApiClient.convertToType(data['flag'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SignalRFeature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignalRFeature</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SignalRFeature.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['flag'] && !(typeof data['flag'] === 'string' || data['flag'] instanceof String)) {
            throw new Error("Expected the field `flag` to be a primitive type in the JSON string but got " + data['flag']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

SignalRFeature.RequiredProperties = ["flag", "value"];

/**
 * FeatureFlags is the supported features of Azure SignalR service.  - ServiceMode: Flag for backend server for SignalR service. Values allowed: \"Default\": have your own backend server; \"Serverless\": your application doesn't have a backend server; \"Classic\": for backward compatibility. Support both Default and Serverless mode but not recommended; \"PredefinedOnly\": for future use.  - EnableConnectivityLogs: \"true\"/\"false\", to enable/disable the connectivity log category respectively.
 * @member {module:model/SignalRFeature.FlagEnum} flag
 */
SignalRFeature.prototype['flag'] = undefined;

/**
 * Optional properties related to this feature.
 * @member {Object.<String, String>} properties
 */
SignalRFeature.prototype['properties'] = undefined;

/**
 * Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
 * @member {String} value
 */
SignalRFeature.prototype['value'] = undefined;





/**
 * Allowed values for the <code>flag</code> property.
 * @enum {String}
 * @readonly
 */
SignalRFeature['FlagEnum'] = {

    /**
     * value: "ServiceMode"
     * @const
     */
    "ServiceMode": "ServiceMode",

    /**
     * value: "EnableConnectivityLogs"
     * @const
     */
    "EnableConnectivityLogs": "EnableConnectivityLogs"
};



export default SignalRFeature;

