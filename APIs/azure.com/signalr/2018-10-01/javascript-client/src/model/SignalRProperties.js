/**
 * SignalRManagementClient
 * REST API for Azure SignalR Service
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SignalRCorsSettings from './SignalRCorsSettings';
import SignalRCreateOrUpdateProperties from './SignalRCreateOrUpdateProperties';
import SignalRFeature from './SignalRFeature';

/**
 * The SignalRProperties model module.
 * @module model/SignalRProperties
 * @version 2018-10-01
 */
class SignalRProperties {
    /**
     * Constructs a new <code>SignalRProperties</code>.
     * A class that describes the properties of the SignalR service that should contain more read-only properties than AzSignalR.Models.SignalRCreateOrUpdateProperties
     * @alias module:model/SignalRProperties
     * @implements module:model/SignalRCreateOrUpdateProperties
     */
    constructor() { 
        SignalRCreateOrUpdateProperties.initialize(this);
        SignalRProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SignalRProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignalRProperties} obj Optional instance to populate.
     * @return {module:model/SignalRProperties} The populated <code>SignalRProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignalRProperties();
            SignalRCreateOrUpdateProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('externalIP')) {
                obj['externalIP'] = ApiClient.convertToType(data['externalIP'], 'String');
            }
            if (data.hasOwnProperty('hostName')) {
                obj['hostName'] = ApiClient.convertToType(data['hostName'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('publicPort')) {
                obj['publicPort'] = ApiClient.convertToType(data['publicPort'], 'Number');
            }
            if (data.hasOwnProperty('serverPort')) {
                obj['serverPort'] = ApiClient.convertToType(data['serverPort'], 'Number');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('cors')) {
                obj['cors'] = SignalRCorsSettings.constructFromObject(data['cors']);
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], [SignalRFeature]);
            }
            if (data.hasOwnProperty('hostNamePrefix')) {
                obj['hostNamePrefix'] = ApiClient.convertToType(data['hostNamePrefix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SignalRProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignalRProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['externalIP'] && !(typeof data['externalIP'] === 'string' || data['externalIP'] instanceof String)) {
            throw new Error("Expected the field `externalIP` to be a primitive type in the JSON string but got " + data['externalIP']);
        }
        // ensure the json data is a string
        if (data['hostName'] && !(typeof data['hostName'] === 'string' || data['hostName'] instanceof String)) {
            throw new Error("Expected the field `hostName` to be a primitive type in the JSON string but got " + data['hostName']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // validate the optional field `cors`
        if (data['cors']) { // data not null
          SignalRCorsSettings.validateJSON(data['cors']);
        }
        if (data['features']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['features'])) {
                throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
            }
            // validate the optional field `features` (array)
            for (const item of data['features']) {
                SignalRFeature.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['hostNamePrefix'] && !(typeof data['hostNamePrefix'] === 'string' || data['hostNamePrefix'] instanceof String)) {
            throw new Error("Expected the field `hostNamePrefix` to be a primitive type in the JSON string but got " + data['hostNamePrefix']);
        }

        return true;
    }


}



/**
 * The publicly accessible IP of the SignalR service.
 * @member {String} externalIP
 */
SignalRProperties.prototype['externalIP'] = undefined;

/**
 * FQDN of the SignalR service instance. Format: xxx.service.signalr.net
 * @member {String} hostName
 */
SignalRProperties.prototype['hostName'] = undefined;

/**
 * Provisioning state of the resource.
 * @member {module:model/SignalRProperties.ProvisioningStateEnum} provisioningState
 */
SignalRProperties.prototype['provisioningState'] = undefined;

/**
 * The publicly accessible port of the SignalR service which is designed for browser/client side usage.
 * @member {Number} publicPort
 */
SignalRProperties.prototype['publicPort'] = undefined;

/**
 * The publicly accessible port of the SignalR service which is designed for customer server side usage.
 * @member {Number} serverPort
 */
SignalRProperties.prototype['serverPort'] = undefined;

/**
 * Version of the SignalR resource. Probably you need the same or higher version of client SDKs.
 * @member {String} version
 */
SignalRProperties.prototype['version'] = undefined;

/**
 * @member {module:model/SignalRCorsSettings} cors
 */
SignalRProperties.prototype['cors'] = undefined;

/**
 * List of SignalR featureFlags. e.g. ServiceMode.    FeatureFlags that are not included in the parameters for the update operation will not be modified.  And the response will only include featureFlags that are explicitly set.   When a featureFlag is not explicitly set, SignalR service will use its globally default value.   But keep in mind, the default value doesn't mean \"false\". It varies in terms of different FeatureFlags.
 * @member {Array.<module:model/SignalRFeature>} features
 */
SignalRProperties.prototype['features'] = undefined;

/**
 * Prefix for the hostName of the SignalR service. Retained for future use.  The hostname will be of format: &lt;hostNamePrefix&gt;.service.signalr.net.
 * @member {String} hostNamePrefix
 */
SignalRProperties.prototype['hostNamePrefix'] = undefined;


// Implement SignalRCreateOrUpdateProperties interface:
/**
 * @member {module:model/SignalRCorsSettings} cors
 */
SignalRCreateOrUpdateProperties.prototype['cors'] = undefined;
/**
 * List of SignalR featureFlags. e.g. ServiceMode.    FeatureFlags that are not included in the parameters for the update operation will not be modified.  And the response will only include featureFlags that are explicitly set.   When a featureFlag is not explicitly set, SignalR service will use its globally default value.   But keep in mind, the default value doesn't mean \"false\". It varies in terms of different FeatureFlags.
 * @member {Array.<module:model/SignalRFeature>} features
 */
SignalRCreateOrUpdateProperties.prototype['features'] = undefined;
/**
 * Prefix for the hostName of the SignalR service. Retained for future use.  The hostname will be of format: &lt;hostNamePrefix&gt;.service.signalr.net.
 * @member {String} hostNamePrefix
 */
SignalRCreateOrUpdateProperties.prototype['hostNamePrefix'] = undefined;



/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
SignalRProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Moving"
     * @const
     */
    "Moving": "Moving"
};



export default SignalRProperties;

