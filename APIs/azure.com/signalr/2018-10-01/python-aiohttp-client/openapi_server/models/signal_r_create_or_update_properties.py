# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.signal_r_cors_settings import SignalRCorsSettings
from openapi_server.models.signal_r_feature import SignalRFeature
from openapi_server import util


class SignalRCreateOrUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cors: SignalRCorsSettings=None, features: List[SignalRFeature]=None, host_name_prefix: str=None):
        """SignalRCreateOrUpdateProperties - a model defined in OpenAPI

        :param cors: The cors of this SignalRCreateOrUpdateProperties.
        :param features: The features of this SignalRCreateOrUpdateProperties.
        :param host_name_prefix: The host_name_prefix of this SignalRCreateOrUpdateProperties.
        """
        self.openapi_types = {
            'cors': SignalRCorsSettings,
            'features': List[SignalRFeature],
            'host_name_prefix': str
        }

        self.attribute_map = {
            'cors': 'cors',
            'features': 'features',
            'host_name_prefix': 'hostNamePrefix'
        }

        self._cors = cors
        self._features = features
        self._host_name_prefix = host_name_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignalRCreateOrUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignalRCreateOrUpdateProperties of this SignalRCreateOrUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cors(self):
        """Gets the cors of this SignalRCreateOrUpdateProperties.


        :return: The cors of this SignalRCreateOrUpdateProperties.
        :rtype: SignalRCorsSettings
        """
        return self._cors

    @cors.setter
    def cors(self, cors):
        """Sets the cors of this SignalRCreateOrUpdateProperties.


        :param cors: The cors of this SignalRCreateOrUpdateProperties.
        :type cors: SignalRCorsSettings
        """

        self._cors = cors

    @property
    def features(self):
        """Gets the features of this SignalRCreateOrUpdateProperties.

        List of SignalR featureFlags. e.g. ServiceMode.    FeatureFlags that are not included in the parameters for the update operation will not be modified.  And the response will only include featureFlags that are explicitly set.   When a featureFlag is not explicitly set, SignalR service will use its globally default value.   But keep in mind, the default value doesn't mean \"false\". It varies in terms of different FeatureFlags.

        :return: The features of this SignalRCreateOrUpdateProperties.
        :rtype: List[SignalRFeature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this SignalRCreateOrUpdateProperties.

        List of SignalR featureFlags. e.g. ServiceMode.    FeatureFlags that are not included in the parameters for the update operation will not be modified.  And the response will only include featureFlags that are explicitly set.   When a featureFlag is not explicitly set, SignalR service will use its globally default value.   But keep in mind, the default value doesn't mean \"false\". It varies in terms of different FeatureFlags.

        :param features: The features of this SignalRCreateOrUpdateProperties.
        :type features: List[SignalRFeature]
        """

        self._features = features

    @property
    def host_name_prefix(self):
        """Gets the host_name_prefix of this SignalRCreateOrUpdateProperties.

        Prefix for the hostName of the SignalR service. Retained for future use.  The hostname will be of format: &lt;hostNamePrefix&gt;.service.signalr.net.

        :return: The host_name_prefix of this SignalRCreateOrUpdateProperties.
        :rtype: str
        """
        return self._host_name_prefix

    @host_name_prefix.setter
    def host_name_prefix(self, host_name_prefix):
        """Sets the host_name_prefix of this SignalRCreateOrUpdateProperties.

        Prefix for the hostName of the SignalR service. Retained for future use.  The hostname will be of format: &lt;hostNamePrefix&gt;.service.signalr.net.

        :param host_name_prefix: The host_name_prefix of this SignalRCreateOrUpdateProperties.
        :type host_name_prefix: str
        """

        self._host_name_prefix = host_name_prefix
