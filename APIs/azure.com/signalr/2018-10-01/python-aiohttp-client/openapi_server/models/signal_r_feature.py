# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SignalRFeature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flag: str=None, properties: Dict[str, str]=None, value: str=None):
        """SignalRFeature - a model defined in OpenAPI

        :param flag: The flag of this SignalRFeature.
        :param properties: The properties of this SignalRFeature.
        :param value: The value of this SignalRFeature.
        """
        self.openapi_types = {
            'flag': str,
            'properties': Dict[str, str],
            'value': str
        }

        self.attribute_map = {
            'flag': 'flag',
            'properties': 'properties',
            'value': 'value'
        }

        self._flag = flag
        self._properties = properties
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignalRFeature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignalRFeature of this SignalRFeature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flag(self):
        """Gets the flag of this SignalRFeature.

        FeatureFlags is the supported features of Azure SignalR service.  - ServiceMode: Flag for backend server for SignalR service. Values allowed: \"Default\": have your own backend server; \"Serverless\": your application doesn't have a backend server; \"Classic\": for backward compatibility. Support both Default and Serverless mode but not recommended; \"PredefinedOnly\": for future use.  - EnableConnectivityLogs: \"true\"/\"false\", to enable/disable the connectivity log category respectively.

        :return: The flag of this SignalRFeature.
        :rtype: str
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this SignalRFeature.

        FeatureFlags is the supported features of Azure SignalR service.  - ServiceMode: Flag for backend server for SignalR service. Values allowed: \"Default\": have your own backend server; \"Serverless\": your application doesn't have a backend server; \"Classic\": for backward compatibility. Support both Default and Serverless mode but not recommended; \"PredefinedOnly\": for future use.  - EnableConnectivityLogs: \"true\"/\"false\", to enable/disable the connectivity log category respectively.

        :param flag: The flag of this SignalRFeature.
        :type flag: str
        """
        allowed_values = ["ServiceMode", "EnableConnectivityLogs"]  # noqa: E501
        if flag not in allowed_values:
            raise ValueError(
                "Invalid value for `flag` ({0}), must be one of {1}"
                .format(flag, allowed_values)
            )

        self._flag = flag

    @property
    def properties(self):
        """Gets the properties of this SignalRFeature.

        Optional properties related to this feature.

        :return: The properties of this SignalRFeature.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this SignalRFeature.

        Optional properties related to this feature.

        :param properties: The properties of this SignalRFeature.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def value(self):
        """Gets the value of this SignalRFeature.

        Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.

        :return: The value of this SignalRFeature.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SignalRFeature.

        Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.

        :param value: The value of this SignalRFeature.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")
        if value is not None and len(value) > 128:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `128`")
        if value is not None and len(value) < 1:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `1`")

        self._value = value
