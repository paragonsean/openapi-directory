# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server import util


class MetricSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_type: str=None, category: str=None, dimensions: List[Dimension]=None, display_description: str=None, display_name: str=None, fill_gap_with_zero: str=None, name: str=None, unit: str=None):
        """MetricSpecification - a model defined in OpenAPI

        :param aggregation_type: The aggregation_type of this MetricSpecification.
        :param category: The category of this MetricSpecification.
        :param dimensions: The dimensions of this MetricSpecification.
        :param display_description: The display_description of this MetricSpecification.
        :param display_name: The display_name of this MetricSpecification.
        :param fill_gap_with_zero: The fill_gap_with_zero of this MetricSpecification.
        :param name: The name of this MetricSpecification.
        :param unit: The unit of this MetricSpecification.
        """
        self.openapi_types = {
            'aggregation_type': str,
            'category': str,
            'dimensions': List[Dimension],
            'display_description': str,
            'display_name': str,
            'fill_gap_with_zero': str,
            'name': str,
            'unit': str
        }

        self.attribute_map = {
            'aggregation_type': 'aggregationType',
            'category': 'category',
            'dimensions': 'dimensions',
            'display_description': 'displayDescription',
            'display_name': 'displayName',
            'fill_gap_with_zero': 'fillGapWithZero',
            'name': 'name',
            'unit': 'unit'
        }

        self._aggregation_type = aggregation_type
        self._category = category
        self._dimensions = dimensions
        self._display_description = display_description
        self._display_name = display_name
        self._fill_gap_with_zero = fill_gap_with_zero
        self._name = name
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricSpecification of this MetricSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_type(self):
        """Gets the aggregation_type of this MetricSpecification.

        Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count.

        :return: The aggregation_type of this MetricSpecification.
        :rtype: str
        """
        return self._aggregation_type

    @aggregation_type.setter
    def aggregation_type(self, aggregation_type):
        """Sets the aggregation_type of this MetricSpecification.

        Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count.

        :param aggregation_type: The aggregation_type of this MetricSpecification.
        :type aggregation_type: str
        """

        self._aggregation_type = aggregation_type

    @property
    def category(self):
        """Gets the category of this MetricSpecification.

        The name of the metric category that the metric belongs to. A metric can only belong to a single category.

        :return: The category of this MetricSpecification.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MetricSpecification.

        The name of the metric category that the metric belongs to. A metric can only belong to a single category.

        :param category: The category of this MetricSpecification.
        :type category: str
        """

        self._category = category

    @property
    def dimensions(self):
        """Gets the dimensions of this MetricSpecification.

        The dimensions of the metrics.

        :return: The dimensions of this MetricSpecification.
        :rtype: List[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this MetricSpecification.

        The dimensions of the metrics.

        :param dimensions: The dimensions of this MetricSpecification.
        :type dimensions: List[Dimension]
        """

        self._dimensions = dimensions

    @property
    def display_description(self):
        """Gets the display_description of this MetricSpecification.

        Localized friendly description of the metric.

        :return: The display_description of this MetricSpecification.
        :rtype: str
        """
        return self._display_description

    @display_description.setter
    def display_description(self, display_description):
        """Sets the display_description of this MetricSpecification.

        Localized friendly description of the metric.

        :param display_description: The display_description of this MetricSpecification.
        :type display_description: str
        """

        self._display_description = display_description

    @property
    def display_name(self):
        """Gets the display_name of this MetricSpecification.

        Localized friendly display name of the metric.

        :return: The display_name of this MetricSpecification.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MetricSpecification.

        Localized friendly display name of the metric.

        :param display_name: The display_name of this MetricSpecification.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def fill_gap_with_zero(self):
        """Gets the fill_gap_with_zero of this MetricSpecification.

        Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published.   Ex. a metric that returns the number of times a particular error code was emitted. The error code may not appear   often, instead of the RP publishing 0, Shoebox can auto fill in 0s for time periods where nothing was emitted.

        :return: The fill_gap_with_zero of this MetricSpecification.
        :rtype: str
        """
        return self._fill_gap_with_zero

    @fill_gap_with_zero.setter
    def fill_gap_with_zero(self, fill_gap_with_zero):
        """Sets the fill_gap_with_zero of this MetricSpecification.

        Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published.   Ex. a metric that returns the number of times a particular error code was emitted. The error code may not appear   often, instead of the RP publishing 0, Shoebox can auto fill in 0s for time periods where nothing was emitted.

        :param fill_gap_with_zero: The fill_gap_with_zero of this MetricSpecification.
        :type fill_gap_with_zero: str
        """

        self._fill_gap_with_zero = fill_gap_with_zero

    @property
    def name(self):
        """Gets the name of this MetricSpecification.

        Name of the metric.

        :return: The name of this MetricSpecification.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricSpecification.

        Name of the metric.

        :param name: The name of this MetricSpecification.
        :type name: str
        """

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this MetricSpecification.

        The unit that makes sense for the metric.

        :return: The unit of this MetricSpecification.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this MetricSpecification.

        The unit that makes sense for the metric.

        :param unit: The unit of this MetricSpecification.
        :type unit: str
        """

        self._unit = unit
