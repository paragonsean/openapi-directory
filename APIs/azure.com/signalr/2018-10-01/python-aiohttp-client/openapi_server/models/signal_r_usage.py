# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.signal_r_usage_name import SignalRUsageName
from openapi_server import util


class SignalRUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_value: int=None, id: str=None, limit: int=None, name: SignalRUsageName=None, unit: str=None):
        """SignalRUsage - a model defined in OpenAPI

        :param current_value: The current_value of this SignalRUsage.
        :param id: The id of this SignalRUsage.
        :param limit: The limit of this SignalRUsage.
        :param name: The name of this SignalRUsage.
        :param unit: The unit of this SignalRUsage.
        """
        self.openapi_types = {
            'current_value': int,
            'id': str,
            'limit': int,
            'name': SignalRUsageName,
            'unit': str
        }

        self.attribute_map = {
            'current_value': 'currentValue',
            'id': 'id',
            'limit': 'limit',
            'name': 'name',
            'unit': 'unit'
        }

        self._current_value = current_value
        self._id = id
        self._limit = limit
        self._name = name
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignalRUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignalRUsage of this SignalRUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_value(self):
        """Gets the current_value of this SignalRUsage.

        Current value for the usage quota.

        :return: The current_value of this SignalRUsage.
        :rtype: int
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value):
        """Sets the current_value of this SignalRUsage.

        Current value for the usage quota.

        :param current_value: The current_value of this SignalRUsage.
        :type current_value: int
        """

        self._current_value = current_value

    @property
    def id(self):
        """Gets the id of this SignalRUsage.

        Fully qualified ARM resource id

        :return: The id of this SignalRUsage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SignalRUsage.

        Fully qualified ARM resource id

        :param id: The id of this SignalRUsage.
        :type id: str
        """

        self._id = id

    @property
    def limit(self):
        """Gets the limit of this SignalRUsage.

        The maximum permitted value for the usage quota. If there is no limit, this value will be -1.

        :return: The limit of this SignalRUsage.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SignalRUsage.

        The maximum permitted value for the usage quota. If there is no limit, this value will be -1.

        :param limit: The limit of this SignalRUsage.
        :type limit: int
        """

        self._limit = limit

    @property
    def name(self):
        """Gets the name of this SignalRUsage.


        :return: The name of this SignalRUsage.
        :rtype: SignalRUsageName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SignalRUsage.


        :param name: The name of this SignalRUsage.
        :type name: SignalRUsageName
        """

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this SignalRUsage.

        Representing the units of the usage quota. Possible values are: Count, Bytes, Seconds, Percent, CountPerSecond, BytesPerSecond.

        :return: The unit of this SignalRUsage.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SignalRUsage.

        Representing the units of the usage quota. Possible values are: Count, Bytes, Seconds, Percent, CountPerSecond, BytesPerSecond.

        :param unit: The unit of this SignalRUsage.
        :type unit: str
        """

        self._unit = unit
