/*
 * SignalRManagementClient
 * REST API for Azure SignalR Service
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.NameAvailability;
import org.openapitools.client.model.NameAvailabilityParameters;
import org.openapitools.client.model.OperationList;
import org.openapitools.client.model.RegenerateKeyParameters;
import org.openapitools.client.model.SignalRCreateParameters;
import org.openapitools.client.model.SignalRKeys;
import org.openapitools.client.model.SignalRResource;
import org.openapitools.client.model.SignalRResourceList;
import org.openapitools.client.model.SignalRUpdateParameters;
import org.openapitools.client.model.SignalRUsageList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SignalRApi
 */
@Disabled
public class SignalRApiTest {

    private final SignalRApi api = new SignalRApi();

    /**
     * Lists all of the available REST API operations of the Microsoft.SignalRService provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void operationsListTest() throws ApiException {
        String apiVersion = null;
        OperationList response = api.operationsList(apiVersion);
        // TODO: test validations
    }

    /**
     * Checks that the SignalR name is valid and is not already in use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signalRCheckNameAvailabilityTest() throws ApiException {
        String location = null;
        String apiVersion = null;
        String subscriptionId = null;
        NameAvailabilityParameters parameters = null;
        NameAvailability response = api.signalRCheckNameAvailability(location, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Create a new SignalR service and update an exiting SignalR service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signalRCreateOrUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        SignalRCreateParameters parameters = null;
        SignalRResource response = api.signalRCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters);
        // TODO: test validations
    }

    /**
     * Operation to delete a SignalR service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signalRDeleteTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        api.signalRDelete(apiVersion, subscriptionId, resourceGroupName, resourceName);
        // TODO: test validations
    }

    /**
     * Get the SignalR service and its properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signalRGetTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        SignalRResource response = api.signalRGet(apiVersion, subscriptionId, resourceGroupName, resourceName);
        // TODO: test validations
    }

    /**
     * Handles requests to list all resources in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signalRListByResourceGroupTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        SignalRResourceList response = api.signalRListByResourceGroup(apiVersion, subscriptionId, resourceGroupName);
        // TODO: test validations
    }

    /**
     * Handles requests to list all resources in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signalRListBySubscriptionTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        SignalRResourceList response = api.signalRListBySubscription(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Get the access keys of the SignalR resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signalRListKeysTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        SignalRKeys response = api.signalRListKeys(apiVersion, subscriptionId, resourceGroupName, resourceName);
        // TODO: test validations
    }

    /**
     * Regenerate SignalR service access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signalRRegenerateKeyTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        RegenerateKeyParameters parameters = null;
        SignalRKeys response = api.signalRRegenerateKey(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters);
        // TODO: test validations
    }

    /**
     * Operation to restart a SignalR service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signalRRestartTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        api.signalRRestart(apiVersion, subscriptionId, resourceGroupName, resourceName);
        // TODO: test validations
    }

    /**
     * Operation to update an exiting SignalR service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signalRUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        SignalRUpdateParameters parameters = null;
        SignalRResource response = api.signalRUpdate(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters);
        // TODO: test validations
    }

    /**
     * List usage quotas for Azure SignalR service by location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usagesListTest() throws ApiException {
        String location = null;
        String apiVersion = null;
        String subscriptionId = null;
        SignalRUsageList response = api.usagesList(location, apiVersion, subscriptionId);
        // TODO: test validations
    }

}
