/*
 * SignalRManagementClient
 * REST API for Azure SignalR Service
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SignalRCorsSettings;
import org.openapitools.client.model.SignalRFeature;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A class that describes the properties of the SignalR service that should contain more read-only properties than AzSignalR.Models.SignalRCreateOrUpdateProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:55:38.331635-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SignalRProperties {
  public static final String SERIALIZED_NAME_EXTERNAL_I_P = "externalIP";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_I_P)
  private String externalIP;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  /**
   * Provisioning state of the resource.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    UNKNOWN("Unknown"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled"),
    
    RUNNING("Running"),
    
    CREATING("Creating"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    MOVING("Moving");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_PUBLIC_PORT = "publicPort";
  @SerializedName(SERIALIZED_NAME_PUBLIC_PORT)
  private Integer publicPort;

  public static final String SERIALIZED_NAME_SERVER_PORT = "serverPort";
  @SerializedName(SERIALIZED_NAME_SERVER_PORT)
  private Integer serverPort;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_CORS = "cors";
  @SerializedName(SERIALIZED_NAME_CORS)
  private SignalRCorsSettings cors;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<SignalRFeature> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST_NAME_PREFIX = "hostNamePrefix";
  @SerializedName(SERIALIZED_NAME_HOST_NAME_PREFIX)
  private String hostNamePrefix;

  public SignalRProperties() {
  }

  public SignalRProperties(
     String externalIP, 
     String hostName, 
     ProvisioningStateEnum provisioningState, 
     Integer publicPort, 
     Integer serverPort
  ) {
    this();
    this.externalIP = externalIP;
    this.hostName = hostName;
    this.provisioningState = provisioningState;
    this.publicPort = publicPort;
    this.serverPort = serverPort;
  }

  /**
   * The publicly accessible IP of the SignalR service.
   * @return externalIP
   */
  @javax.annotation.Nullable
  public String getExternalIP() {
    return externalIP;
  }



  /**
   * FQDN of the SignalR service instance. Format: xxx.service.signalr.net
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }



  /**
   * Provisioning state of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  /**
   * The publicly accessible port of the SignalR service which is designed for browser/client side usage.
   * @return publicPort
   */
  @javax.annotation.Nullable
  public Integer getPublicPort() {
    return publicPort;
  }



  /**
   * The publicly accessible port of the SignalR service which is designed for customer server side usage.
   * @return serverPort
   */
  @javax.annotation.Nullable
  public Integer getServerPort() {
    return serverPort;
  }



  public SignalRProperties version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Version of the SignalR resource. Probably you need the same or higher version of client SDKs.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public SignalRProperties cors(SignalRCorsSettings cors) {
    this.cors = cors;
    return this;
  }

  /**
   * Get cors
   * @return cors
   */
  @javax.annotation.Nullable
  public SignalRCorsSettings getCors() {
    return cors;
  }

  public void setCors(SignalRCorsSettings cors) {
    this.cors = cors;
  }


  public SignalRProperties features(List<SignalRFeature> features) {
    this.features = features;
    return this;
  }

  public SignalRProperties addFeaturesItem(SignalRFeature featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * List of SignalR featureFlags. e.g. ServiceMode.    FeatureFlags that are not included in the parameters for the update operation will not be modified.  And the response will only include featureFlags that are explicitly set.   When a featureFlag is not explicitly set, SignalR service will use its globally default value.   But keep in mind, the default value doesn&#39;t mean \&quot;false\&quot;. It varies in terms of different FeatureFlags.
   * @return features
   */
  @javax.annotation.Nullable
  public List<SignalRFeature> getFeatures() {
    return features;
  }

  public void setFeatures(List<SignalRFeature> features) {
    this.features = features;
  }


  public SignalRProperties hostNamePrefix(String hostNamePrefix) {
    this.hostNamePrefix = hostNamePrefix;
    return this;
  }

  /**
   * Prefix for the hostName of the SignalR service. Retained for future use.  The hostname will be of format: &amp;lt;hostNamePrefix&amp;gt;.service.signalr.net.
   * @return hostNamePrefix
   */
  @javax.annotation.Nullable
  public String getHostNamePrefix() {
    return hostNamePrefix;
  }

  public void setHostNamePrefix(String hostNamePrefix) {
    this.hostNamePrefix = hostNamePrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignalRProperties signalRProperties = (SignalRProperties) o;
    return Objects.equals(this.externalIP, signalRProperties.externalIP) &&
        Objects.equals(this.hostName, signalRProperties.hostName) &&
        Objects.equals(this.provisioningState, signalRProperties.provisioningState) &&
        Objects.equals(this.publicPort, signalRProperties.publicPort) &&
        Objects.equals(this.serverPort, signalRProperties.serverPort) &&
        Objects.equals(this.version, signalRProperties.version) &&
        Objects.equals(this.cors, signalRProperties.cors) &&
        Objects.equals(this.features, signalRProperties.features) &&
        Objects.equals(this.hostNamePrefix, signalRProperties.hostNamePrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalIP, hostName, provisioningState, publicPort, serverPort, version, cors, features, hostNamePrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignalRProperties {\n");
    sb.append("    externalIP: ").append(toIndentedString(externalIP)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publicPort: ").append(toIndentedString(publicPort)).append("\n");
    sb.append("    serverPort: ").append(toIndentedString(serverPort)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    cors: ").append(toIndentedString(cors)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    hostNamePrefix: ").append(toIndentedString(hostNamePrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cors");
    openapiFields.add("features");
    openapiFields.add("hostNamePrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SignalRProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignalRProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignalRProperties is not found in the empty JSON string", SignalRProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignalRProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignalRProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("externalIP") != null && !jsonObj.get("externalIP").isJsonNull()) && !jsonObj.get("externalIP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalIP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalIP").toString()));
      }
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      // validate the optional field `cors`
      if (jsonObj.get("cors") != null && !jsonObj.get("cors").isJsonNull()) {
        SignalRCorsSettings.validateJsonElement(jsonObj.get("cors"));
      }
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        JsonArray jsonArrayfeatures = jsonObj.getAsJsonArray("features");
        if (jsonArrayfeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("features").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
          }

          // validate the optional field `features` (array)
          for (int i = 0; i < jsonArrayfeatures.size(); i++) {
            SignalRFeature.validateJsonElement(jsonArrayfeatures.get(i));
          };
        }
      }
      if ((jsonObj.get("hostNamePrefix") != null && !jsonObj.get("hostNamePrefix").isJsonNull()) && !jsonObj.get("hostNamePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostNamePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostNamePrefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignalRProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignalRProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignalRProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignalRProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SignalRProperties>() {
           @Override
           public void write(JsonWriter out, SignalRProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignalRProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SignalRProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SignalRProperties
   * @throws IOException if the JSON string is invalid with respect to SignalRProperties
   */
  public static SignalRProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignalRProperties.class);
  }

  /**
   * Convert an instance of SignalRProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

