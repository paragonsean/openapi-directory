/*
 * SignalRManagementClient
 * REST API for Azure SignalR Service
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.NameAvailability;
import org.openapitools.client.model.NameAvailabilityParameters;
import org.openapitools.client.model.OperationList;
import org.openapitools.client.model.RegenerateKeyParameters;
import org.openapitools.client.model.SignalRCreateParameters;
import org.openapitools.client.model.SignalRKeys;
import org.openapitools.client.model.SignalRResource;
import org.openapitools.client.model.SignalRResourceList;
import org.openapitools.client.model.SignalRUpdateParameters;
import org.openapitools.client.model.SignalRUsageList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SignalRApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SignalRApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SignalRApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for operationsList
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the list of operations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.SignalRService/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling operationsList(Async)");
        }

        return operationsListCall(apiVersion, _callback);

    }

    /**
     * 
     * Lists all of the available REST API operations of the Microsoft.SignalRService provider.
     * @param apiVersion Client Api Version. (required)
     * @return OperationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the list of operations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public OperationList operationsList(String apiVersion) throws ApiException {
        ApiResponse<OperationList> localVarResp = operationsListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the available REST API operations of the Microsoft.SignalRService provider.
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;OperationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the list of operations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationList> operationsListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the available REST API operations of the Microsoft.SignalRService provider.
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the list of operations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListAsync(String apiVersion, final ApiCallback<OperationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalRCheckNameAvailability
     * @param location the region (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the name availability. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRCheckNameAvailabilityCall(String location, String apiVersion, String subscriptionId, NameAvailabilityParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/locations/{location}/checkNameAvailability"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalRCheckNameAvailabilityValidateBeforeCall(String location, String apiVersion, String subscriptionId, NameAvailabilityParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling signalRCheckNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling signalRCheckNameAvailability(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling signalRCheckNameAvailability(Async)");
        }

        return signalRCheckNameAvailabilityCall(location, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Checks that the SignalR name is valid and is not already in use.
     * @param location the region (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the operation. (optional)
     * @return NameAvailability
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the name availability. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public NameAvailability signalRCheckNameAvailability(String location, String apiVersion, String subscriptionId, NameAvailabilityParameters parameters) throws ApiException {
        ApiResponse<NameAvailability> localVarResp = signalRCheckNameAvailabilityWithHttpInfo(location, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks that the SignalR name is valid and is not already in use.
     * @param location the region (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the operation. (optional)
     * @return ApiResponse&lt;NameAvailability&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the name availability. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NameAvailability> signalRCheckNameAvailabilityWithHttpInfo(String location, String apiVersion, String subscriptionId, NameAvailabilityParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = signalRCheckNameAvailabilityValidateBeforeCall(location, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<NameAvailability>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks that the SignalR name is valid and is not already in use.
     * @param location the region (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the name availability. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRCheckNameAvailabilityAsync(String location, String apiVersion, String subscriptionId, NameAvailabilityParameters parameters, final ApiCallback<NameAvailability> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalRCheckNameAvailabilityValidateBeforeCall(location, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<NameAvailability>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalRCreateOrUpdate
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param parameters Parameters for the create or update operation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes a SignalR service. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The response describes the new service and contains a Location header to query the operation result. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the exiting SignalR service is now updating and contains a Location header to query the operation result.. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRCreateOrUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, SignalRCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalRCreateOrUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, SignalRCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling signalRCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling signalRCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling signalRCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling signalRCreateOrUpdate(Async)");
        }

        return signalRCreateOrUpdateCall(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters, _callback);

    }

    /**
     * 
     * Create a new SignalR service and update an exiting SignalR service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param parameters Parameters for the create or update operation (optional)
     * @return SignalRResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes a SignalR service. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The response describes the new service and contains a Location header to query the operation result. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the exiting SignalR service is now updating and contains a Location header to query the operation result.. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public SignalRResource signalRCreateOrUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, SignalRCreateParameters parameters) throws ApiException {
        ApiResponse<SignalRResource> localVarResp = signalRCreateOrUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new SignalR service and update an exiting SignalR service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param parameters Parameters for the create or update operation (optional)
     * @return ApiResponse&lt;SignalRResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes a SignalR service. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The response describes the new service and contains a Location header to query the operation result. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the exiting SignalR service is now updating and contains a Location header to query the operation result.. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignalRResource> signalRCreateOrUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, SignalRCreateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = signalRCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters, null);
        Type localVarReturnType = new TypeToken<SignalRResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new SignalR service and update an exiting SignalR service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param parameters Parameters for the create or update operation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes a SignalR service. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The response describes the new service and contains a Location header to query the operation result. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the exiting SignalR service is now updating and contains a Location header to query the operation result.. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRCreateOrUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, SignalRCreateParameters parameters, final ApiCallback<SignalRResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalRCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters, _callback);
        Type localVarReturnType = new TypeToken<SignalRResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalRDelete
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the delete operation is performed in the background. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success. The response indicates the resource is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalRDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling signalRDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling signalRDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling signalRDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling signalRDelete(Async)");
        }

        return signalRDeleteCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);

    }

    /**
     * 
     * Operation to delete a SignalR service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the delete operation is performed in the background. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success. The response indicates the resource is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public void signalRDelete(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        signalRDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName);
    }

    /**
     * 
     * Operation to delete a SignalR service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the delete operation is performed in the background. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success. The response indicates the resource is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> signalRDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        okhttp3.Call localVarCall = signalRDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Operation to delete a SignalR service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the delete operation is performed in the background. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success. The response indicates the resource is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalRDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalRGet
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the corresponding SignalR service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalRGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling signalRGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling signalRGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling signalRGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling signalRGet(Async)");
        }

        return signalRGetCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);

    }

    /**
     * 
     * Get the SignalR service and its properties.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @return SignalRResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the corresponding SignalR service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public SignalRResource signalRGet(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        ApiResponse<SignalRResource> localVarResp = signalRGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the SignalR service and its properties.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @return ApiResponse&lt;SignalRResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the corresponding SignalR service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignalRResource> signalRGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        okhttp3.Call localVarCall = signalRGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, null);
        Type localVarReturnType = new TypeToken<SignalRResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the SignalR service and its properties.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the corresponding SignalR service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback<SignalRResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalRGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);
        Type localVarReturnType = new TypeToken<SignalRResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalRListByResourceGroup
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the list of SignalR services in a resourceGroup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRListByResourceGroupCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/SignalR"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalRListByResourceGroupValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling signalRListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling signalRListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling signalRListByResourceGroup(Async)");
        }

        return signalRListByResourceGroupCall(apiVersion, subscriptionId, resourceGroupName, _callback);

    }

    /**
     * 
     * Handles requests to list all resources in a resource group.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @return SignalRResourceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the list of SignalR services in a resourceGroup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public SignalRResourceList signalRListByResourceGroup(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        ApiResponse<SignalRResourceList> localVarResp = signalRListByResourceGroupWithHttpInfo(apiVersion, subscriptionId, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Handles requests to list all resources in a resource group.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @return ApiResponse&lt;SignalRResourceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the list of SignalR services in a resourceGroup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignalRResourceList> signalRListByResourceGroupWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = signalRListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<SignalRResourceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Handles requests to list all resources in a resource group.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the list of SignalR services in a resourceGroup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRListByResourceGroupAsync(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback<SignalRResourceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalRListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<SignalRResourceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalRListBySubscription
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the list of SignalR services in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRListBySubscriptionCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/SignalR"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalRListBySubscriptionValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling signalRListBySubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling signalRListBySubscription(Async)");
        }

        return signalRListBySubscriptionCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Handles requests to list all resources in a subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SignalRResourceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the list of SignalR services in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public SignalRResourceList signalRListBySubscription(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SignalRResourceList> localVarResp = signalRListBySubscriptionWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Handles requests to list all resources in a subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SignalRResourceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the list of SignalR services in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignalRResourceList> signalRListBySubscriptionWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = signalRListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SignalRResourceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Handles requests to list all resources in a subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes the list of SignalR services in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRListBySubscriptionAsync(String apiVersion, String subscriptionId, final ApiCallback<SignalRResourceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalRListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SignalRResourceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalRListKeys
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes SignalR service access keys. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRListKeysCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/SignalR/{resourceName}/listKeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalRListKeysValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling signalRListKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling signalRListKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling signalRListKeys(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling signalRListKeys(Async)");
        }

        return signalRListKeysCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);

    }

    /**
     * 
     * Get the access keys of the SignalR resource.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @return SignalRKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes SignalR service access keys. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public SignalRKeys signalRListKeys(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        ApiResponse<SignalRKeys> localVarResp = signalRListKeysWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the access keys of the SignalR resource.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @return ApiResponse&lt;SignalRKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes SignalR service access keys. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignalRKeys> signalRListKeysWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        okhttp3.Call localVarCall = signalRListKeysValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, null);
        Type localVarReturnType = new TypeToken<SignalRKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the access keys of the SignalR resource.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes SignalR service access keys. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRListKeysAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback<SignalRKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalRListKeysValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);
        Type localVarReturnType = new TypeToken<SignalRKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalRRegenerateKey
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param parameters Parameter that describes the Regenerate Key Operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created and an async operation is executing in background to make the new key to take effect. The response contains new keys and a Location header to query the async operation result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRRegenerateKeyCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, RegenerateKeyParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/SignalR/{resourceName}/regenerateKey"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalRRegenerateKeyValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, RegenerateKeyParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling signalRRegenerateKey(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling signalRRegenerateKey(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling signalRRegenerateKey(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling signalRRegenerateKey(Async)");
        }

        return signalRRegenerateKeyCall(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters, _callback);

    }

    /**
     * 
     * Regenerate SignalR service access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param parameters Parameter that describes the Regenerate Key Operation. (optional)
     * @return SignalRKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created and an async operation is executing in background to make the new key to take effect. The response contains new keys and a Location header to query the async operation result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public SignalRKeys signalRRegenerateKey(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, RegenerateKeyParameters parameters) throws ApiException {
        ApiResponse<SignalRKeys> localVarResp = signalRRegenerateKeyWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerate SignalR service access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param parameters Parameter that describes the Regenerate Key Operation. (optional)
     * @return ApiResponse&lt;SignalRKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created and an async operation is executing in background to make the new key to take effect. The response contains new keys and a Location header to query the async operation result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignalRKeys> signalRRegenerateKeyWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, RegenerateKeyParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = signalRRegenerateKeyValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters, null);
        Type localVarReturnType = new TypeToken<SignalRKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerate SignalR service access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param parameters Parameter that describes the Regenerate Key Operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created and an async operation is executing in background to make the new key to take effect. The response contains new keys and a Location header to query the async operation result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRRegenerateKeyAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, RegenerateKeyParameters parameters, final ApiCallback<SignalRKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalRRegenerateKeyValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters, _callback);
        Type localVarReturnType = new TypeToken<SignalRKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalRRestart
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the restart operation is performed in the background. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success. The response indicates the operation is successful and no content will be returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRRestartCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/restart"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalRRestartValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling signalRRestart(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling signalRRestart(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling signalRRestart(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling signalRRestart(Async)");
        }

        return signalRRestartCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);

    }

    /**
     * 
     * Operation to restart a SignalR service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the restart operation is performed in the background. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success. The response indicates the operation is successful and no content will be returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public void signalRRestart(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        signalRRestartWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName);
    }

    /**
     * 
     * Operation to restart a SignalR service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the restart operation is performed in the background. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success. The response indicates the operation is successful and no content will be returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> signalRRestartWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        okhttp3.Call localVarCall = signalRRestartValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Operation to restart a SignalR service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the restart operation is performed in the background. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success. The response indicates the operation is successful and no content will be returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRRestartAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalRRestartValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalRUpdate
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param parameters Parameters for the update operation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes a SignalR service. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the exiting SignalR service is now updating  and contains a Location header to query the operation result.. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, SignalRUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalRUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, SignalRUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling signalRUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling signalRUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling signalRUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling signalRUpdate(Async)");
        }

        return signalRUpdateCall(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters, _callback);

    }

    /**
     * 
     * Operation to update an exiting SignalR service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param parameters Parameters for the update operation (optional)
     * @return SignalRResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes a SignalR service. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the exiting SignalR service is now updating  and contains a Location header to query the operation result.. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public SignalRResource signalRUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, SignalRUpdateParameters parameters) throws ApiException {
        ApiResponse<SignalRResource> localVarResp = signalRUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Operation to update an exiting SignalR service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param parameters Parameters for the update operation (optional)
     * @return ApiResponse&lt;SignalRResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes a SignalR service. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the exiting SignalR service is now updating  and contains a Location header to query the operation result.. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignalRResource> signalRUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, SignalRUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = signalRUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters, null);
        Type localVarReturnType = new TypeToken<SignalRResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Operation to update an exiting SignalR service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param resourceName The name of the SignalR resource. (required)
     * @param parameters Parameters for the update operation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describes a SignalR service. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The response indicates the exiting SignalR service is now updating  and contains a Location header to query the operation result.. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalRUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, SignalRUpdateParameters parameters, final ApiCallback<SignalRResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalRUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, parameters, _callback);
        Type localVarReturnType = new TypeToken<SignalRResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usagesList
     * @param location the location like \&quot;eastus\&quot; (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describe the usage quotas of a subscription in specified region. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usagesListCall(String location, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/locations/{location}/usages"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usagesListValidateBeforeCall(String location, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling usagesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling usagesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling usagesList(Async)");
        }

        return usagesListCall(location, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * List usage quotas for Azure SignalR service by location.
     * @param location the location like \&quot;eastus\&quot; (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SignalRUsageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describe the usage quotas of a subscription in specified region. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public SignalRUsageList usagesList(String location, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SignalRUsageList> localVarResp = usagesListWithHttpInfo(location, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * List usage quotas for Azure SignalR service by location.
     * @param location the location like \&quot;eastus\&quot; (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SignalRUsageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describe the usage quotas of a subscription in specified region. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignalRUsageList> usagesListWithHttpInfo(String location, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = usagesListValidateBeforeCall(location, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SignalRUsageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List usage quotas for Azure SignalR service by location.
     * @param location the location like \&quot;eastus\&quot; (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The response describe the usage quotas of a subscription in specified region. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred during the operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usagesListAsync(String location, String apiVersion, String subscriptionId, final ApiCallback<SignalRUsageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = usagesListValidateBeforeCall(location, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SignalRUsageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
