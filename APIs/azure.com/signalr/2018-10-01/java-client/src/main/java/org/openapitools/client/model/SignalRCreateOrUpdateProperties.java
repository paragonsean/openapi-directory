/*
 * SignalRManagementClient
 * REST API for Azure SignalR Service
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SignalRCorsSettings;
import org.openapitools.client.model.SignalRFeature;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings used to provision or configure the resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:55:38.331635-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SignalRCreateOrUpdateProperties {
  public static final String SERIALIZED_NAME_CORS = "cors";
  @SerializedName(SERIALIZED_NAME_CORS)
  private SignalRCorsSettings cors;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<SignalRFeature> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST_NAME_PREFIX = "hostNamePrefix";
  @SerializedName(SERIALIZED_NAME_HOST_NAME_PREFIX)
  private String hostNamePrefix;

  public SignalRCreateOrUpdateProperties() {
  }

  public SignalRCreateOrUpdateProperties cors(SignalRCorsSettings cors) {
    this.cors = cors;
    return this;
  }

  /**
   * Get cors
   * @return cors
   */
  @javax.annotation.Nullable
  public SignalRCorsSettings getCors() {
    return cors;
  }

  public void setCors(SignalRCorsSettings cors) {
    this.cors = cors;
  }


  public SignalRCreateOrUpdateProperties features(List<SignalRFeature> features) {
    this.features = features;
    return this;
  }

  public SignalRCreateOrUpdateProperties addFeaturesItem(SignalRFeature featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * List of SignalR featureFlags. e.g. ServiceMode.    FeatureFlags that are not included in the parameters for the update operation will not be modified.  And the response will only include featureFlags that are explicitly set.   When a featureFlag is not explicitly set, SignalR service will use its globally default value.   But keep in mind, the default value doesn&#39;t mean \&quot;false\&quot;. It varies in terms of different FeatureFlags.
   * @return features
   */
  @javax.annotation.Nullable
  public List<SignalRFeature> getFeatures() {
    return features;
  }

  public void setFeatures(List<SignalRFeature> features) {
    this.features = features;
  }


  public SignalRCreateOrUpdateProperties hostNamePrefix(String hostNamePrefix) {
    this.hostNamePrefix = hostNamePrefix;
    return this;
  }

  /**
   * Prefix for the hostName of the SignalR service. Retained for future use.  The hostname will be of format: &amp;lt;hostNamePrefix&amp;gt;.service.signalr.net.
   * @return hostNamePrefix
   */
  @javax.annotation.Nullable
  public String getHostNamePrefix() {
    return hostNamePrefix;
  }

  public void setHostNamePrefix(String hostNamePrefix) {
    this.hostNamePrefix = hostNamePrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignalRCreateOrUpdateProperties signalRCreateOrUpdateProperties = (SignalRCreateOrUpdateProperties) o;
    return Objects.equals(this.cors, signalRCreateOrUpdateProperties.cors) &&
        Objects.equals(this.features, signalRCreateOrUpdateProperties.features) &&
        Objects.equals(this.hostNamePrefix, signalRCreateOrUpdateProperties.hostNamePrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cors, features, hostNamePrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignalRCreateOrUpdateProperties {\n");
    sb.append("    cors: ").append(toIndentedString(cors)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    hostNamePrefix: ").append(toIndentedString(hostNamePrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cors");
    openapiFields.add("features");
    openapiFields.add("hostNamePrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SignalRCreateOrUpdateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignalRCreateOrUpdateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignalRCreateOrUpdateProperties is not found in the empty JSON string", SignalRCreateOrUpdateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignalRCreateOrUpdateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignalRCreateOrUpdateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cors`
      if (jsonObj.get("cors") != null && !jsonObj.get("cors").isJsonNull()) {
        SignalRCorsSettings.validateJsonElement(jsonObj.get("cors"));
      }
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        JsonArray jsonArrayfeatures = jsonObj.getAsJsonArray("features");
        if (jsonArrayfeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("features").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
          }

          // validate the optional field `features` (array)
          for (int i = 0; i < jsonArrayfeatures.size(); i++) {
            SignalRFeature.validateJsonElement(jsonArrayfeatures.get(i));
          };
        }
      }
      if ((jsonObj.get("hostNamePrefix") != null && !jsonObj.get("hostNamePrefix").isJsonNull()) && !jsonObj.get("hostNamePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostNamePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostNamePrefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignalRCreateOrUpdateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignalRCreateOrUpdateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignalRCreateOrUpdateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignalRCreateOrUpdateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SignalRCreateOrUpdateProperties>() {
           @Override
           public void write(JsonWriter out, SignalRCreateOrUpdateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignalRCreateOrUpdateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SignalRCreateOrUpdateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SignalRCreateOrUpdateProperties
   * @throws IOException if the JSON string is invalid with respect to SignalRCreateOrUpdateProperties
   */
  public static SignalRCreateOrUpdateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignalRCreateOrUpdateProperties.class);
  }

  /**
   * Convert an instance of SignalRCreateOrUpdateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

