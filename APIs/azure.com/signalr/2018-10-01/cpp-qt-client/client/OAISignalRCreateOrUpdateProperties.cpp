/**
 * SignalRManagementClient
 * REST API for Azure SignalR Service
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignalRCreateOrUpdateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignalRCreateOrUpdateProperties::OAISignalRCreateOrUpdateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignalRCreateOrUpdateProperties::OAISignalRCreateOrUpdateProperties() {
    this->initializeModel();
}

OAISignalRCreateOrUpdateProperties::~OAISignalRCreateOrUpdateProperties() {}

void OAISignalRCreateOrUpdateProperties::initializeModel() {

    m_cors_isSet = false;
    m_cors_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_host_name_prefix_isSet = false;
    m_host_name_prefix_isValid = false;
}

void OAISignalRCreateOrUpdateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignalRCreateOrUpdateProperties::fromJsonObject(QJsonObject json) {

    m_cors_isValid = ::OpenAPI::fromJsonValue(m_cors, json[QString("cors")]);
    m_cors_isSet = !json[QString("cors")].isNull() && m_cors_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_host_name_prefix_isValid = ::OpenAPI::fromJsonValue(m_host_name_prefix, json[QString("hostNamePrefix")]);
    m_host_name_prefix_isSet = !json[QString("hostNamePrefix")].isNull() && m_host_name_prefix_isValid;
}

QString OAISignalRCreateOrUpdateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignalRCreateOrUpdateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_cors.isSet()) {
        obj.insert(QString("cors"), ::OpenAPI::toJsonValue(m_cors));
    }
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_host_name_prefix_isSet) {
        obj.insert(QString("hostNamePrefix"), ::OpenAPI::toJsonValue(m_host_name_prefix));
    }
    return obj;
}

OAISignalRCorsSettings OAISignalRCreateOrUpdateProperties::getCors() const {
    return m_cors;
}
void OAISignalRCreateOrUpdateProperties::setCors(const OAISignalRCorsSettings &cors) {
    m_cors = cors;
    m_cors_isSet = true;
}

bool OAISignalRCreateOrUpdateProperties::is_cors_Set() const{
    return m_cors_isSet;
}

bool OAISignalRCreateOrUpdateProperties::is_cors_Valid() const{
    return m_cors_isValid;
}

QList<OAISignalRFeature> OAISignalRCreateOrUpdateProperties::getFeatures() const {
    return m_features;
}
void OAISignalRCreateOrUpdateProperties::setFeatures(const QList<OAISignalRFeature> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAISignalRCreateOrUpdateProperties::is_features_Set() const{
    return m_features_isSet;
}

bool OAISignalRCreateOrUpdateProperties::is_features_Valid() const{
    return m_features_isValid;
}

QString OAISignalRCreateOrUpdateProperties::getHostNamePrefix() const {
    return m_host_name_prefix;
}
void OAISignalRCreateOrUpdateProperties::setHostNamePrefix(const QString &host_name_prefix) {
    m_host_name_prefix = host_name_prefix;
    m_host_name_prefix_isSet = true;
}

bool OAISignalRCreateOrUpdateProperties::is_host_name_prefix_Set() const{
    return m_host_name_prefix_isSet;
}

bool OAISignalRCreateOrUpdateProperties::is_host_name_prefix_Valid() const{
    return m_host_name_prefix_isValid;
}

bool OAISignalRCreateOrUpdateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignalRCreateOrUpdateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
