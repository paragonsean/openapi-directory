/**
 * SignalRManagementClient
 * REST API for Azure SignalR Service
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISignalRApi_H
#define OAI_OAISignalRApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAINameAvailability.h"
#include "OAINameAvailabilityParameters.h"
#include "OAIOperationList.h"
#include "OAIRegenerateKeyParameters.h"
#include "OAISignalRCreateParameters.h"
#include "OAISignalRKeys.h"
#include "OAISignalRResource.h"
#include "OAISignalRResourceList.h"
#include "OAISignalRUpdateParameters.h"
#include "OAISignalRUsageList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISignalRApi : public QObject {
    Q_OBJECT

public:
    OAISignalRApi(const int timeOut = 0);
    ~OAISignalRApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void operationsList(const QString &api_version);

    /**
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINameAvailabilityParameters [optional]
    */
    virtual void signalRCheckNameAvailability(const QString &location, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAINameAvailabilityParameters> &parameters = ::OpenAPI::OptionalParam<OAINameAvailabilityParameters>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  parameters OAISignalRCreateParameters [optional]
    */
    virtual void signalRCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const ::OpenAPI::OptionalParam<OAISignalRCreateParameters> &parameters = ::OpenAPI::OptionalParam<OAISignalRCreateParameters>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void signalRDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void signalRGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void signalRListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void signalRListBySubscription(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void signalRListKeys(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  parameters OAIRegenerateKeyParameters [optional]
    */
    virtual void signalRRegenerateKey(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const ::OpenAPI::OptionalParam<OAIRegenerateKeyParameters> &parameters = ::OpenAPI::OptionalParam<OAIRegenerateKeyParameters>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void signalRRestart(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  parameters OAISignalRUpdateParameters [optional]
    */
    virtual void signalRUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const ::OpenAPI::OptionalParam<OAISignalRUpdateParameters> &parameters = ::OpenAPI::OptionalParam<OAISignalRUpdateParameters>());

    /**
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void usagesList(const QString &location, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void operationsListCallback(OAIHttpRequestWorker *worker);
    void signalRCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void signalRCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void signalRDeleteCallback(OAIHttpRequestWorker *worker);
    void signalRGetCallback(OAIHttpRequestWorker *worker);
    void signalRListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void signalRListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void signalRListKeysCallback(OAIHttpRequestWorker *worker);
    void signalRRegenerateKeyCallback(OAIHttpRequestWorker *worker);
    void signalRRestartCallback(OAIHttpRequestWorker *worker);
    void signalRUpdateCallback(OAIHttpRequestWorker *worker);
    void usagesListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void operationsListSignal(OAIOperationList summary);
    void signalRCheckNameAvailabilitySignal(OAINameAvailability summary);
    void signalRCreateOrUpdateSignal(OAISignalRResource summary);
    void signalRDeleteSignal();
    void signalRGetSignal(OAISignalRResource summary);
    void signalRListByResourceGroupSignal(OAISignalRResourceList summary);
    void signalRListBySubscriptionSignal(OAISignalRResourceList summary);
    void signalRListKeysSignal(OAISignalRKeys summary);
    void signalRRegenerateKeySignal(OAISignalRKeys summary);
    void signalRRestartSignal();
    void signalRUpdateSignal(OAISignalRResource summary);
    void usagesListSignal(OAISignalRUsageList summary);


    void operationsListSignalFull(OAIHttpRequestWorker *worker, OAIOperationList summary);
    void signalRCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAINameAvailability summary);
    void signalRCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISignalRResource summary);
    void signalRDeleteSignalFull(OAIHttpRequestWorker *worker);
    void signalRGetSignalFull(OAIHttpRequestWorker *worker, OAISignalRResource summary);
    void signalRListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAISignalRResourceList summary);
    void signalRListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISignalRResourceList summary);
    void signalRListKeysSignalFull(OAIHttpRequestWorker *worker, OAISignalRKeys summary);
    void signalRRegenerateKeySignalFull(OAIHttpRequestWorker *worker, OAISignalRKeys summary);
    void signalRRestartSignalFull(OAIHttpRequestWorker *worker);
    void signalRUpdateSignalFull(OAIHttpRequestWorker *worker, OAISignalRResource summary);
    void usagesListSignalFull(OAIHttpRequestWorker *worker, OAISignalRUsageList summary);

    Q_DECL_DEPRECATED_X("Use operationsListSignalError() instead")
    void operationsListSignalE(OAIOperationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalError(OAIOperationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRCheckNameAvailabilitySignalError() instead")
    void signalRCheckNameAvailabilitySignalE(OAINameAvailability summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRCheckNameAvailabilitySignalError(OAINameAvailability summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRCreateOrUpdateSignalError() instead")
    void signalRCreateOrUpdateSignalE(OAISignalRResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRCreateOrUpdateSignalError(OAISignalRResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRDeleteSignalError() instead")
    void signalRDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void signalRDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRGetSignalError() instead")
    void signalRGetSignalE(OAISignalRResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRGetSignalError(OAISignalRResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRListByResourceGroupSignalError() instead")
    void signalRListByResourceGroupSignalE(OAISignalRResourceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRListByResourceGroupSignalError(OAISignalRResourceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRListBySubscriptionSignalError() instead")
    void signalRListBySubscriptionSignalE(OAISignalRResourceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRListBySubscriptionSignalError(OAISignalRResourceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRListKeysSignalError() instead")
    void signalRListKeysSignalE(OAISignalRKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRListKeysSignalError(OAISignalRKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRRegenerateKeySignalError() instead")
    void signalRRegenerateKeySignalE(OAISignalRKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRRegenerateKeySignalError(OAISignalRKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRRestartSignalError() instead")
    void signalRRestartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void signalRRestartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRUpdateSignalError() instead")
    void signalRUpdateSignalE(OAISignalRResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRUpdateSignalError(OAISignalRResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usagesListSignalError() instead")
    void usagesListSignalE(OAISignalRUsageList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usagesListSignalError(OAISignalRUsageList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use operationsListSignalErrorFull() instead")
    void operationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRCheckNameAvailabilitySignalErrorFull() instead")
    void signalRCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRCreateOrUpdateSignalErrorFull() instead")
    void signalRCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRDeleteSignalErrorFull() instead")
    void signalRDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRGetSignalErrorFull() instead")
    void signalRGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRListByResourceGroupSignalErrorFull() instead")
    void signalRListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRListBySubscriptionSignalErrorFull() instead")
    void signalRListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRListKeysSignalErrorFull() instead")
    void signalRListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRRegenerateKeySignalErrorFull() instead")
    void signalRRegenerateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRRegenerateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRRestartSignalErrorFull() instead")
    void signalRRestartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRRestartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalRUpdateSignalErrorFull() instead")
    void signalRUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalRUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usagesListSignalErrorFull() instead")
    void usagesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usagesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
