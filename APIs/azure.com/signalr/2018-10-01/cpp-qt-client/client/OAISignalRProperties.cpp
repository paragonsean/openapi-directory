/**
 * SignalRManagementClient
 * REST API for Azure SignalR Service
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignalRProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignalRProperties::OAISignalRProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignalRProperties::OAISignalRProperties() {
    this->initializeModel();
}

OAISignalRProperties::~OAISignalRProperties() {}

void OAISignalRProperties::initializeModel() {

    m_external_ip_isSet = false;
    m_external_ip_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_port_isSet = false;
    m_public_port_isValid = false;

    m_server_port_isSet = false;
    m_server_port_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_cors_isSet = false;
    m_cors_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_host_name_prefix_isSet = false;
    m_host_name_prefix_isValid = false;
}

void OAISignalRProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignalRProperties::fromJsonObject(QJsonObject json) {

    m_external_ip_isValid = ::OpenAPI::fromJsonValue(m_external_ip, json[QString("externalIP")]);
    m_external_ip_isSet = !json[QString("externalIP")].isNull() && m_external_ip_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_port_isValid = ::OpenAPI::fromJsonValue(m_public_port, json[QString("publicPort")]);
    m_public_port_isSet = !json[QString("publicPort")].isNull() && m_public_port_isValid;

    m_server_port_isValid = ::OpenAPI::fromJsonValue(m_server_port, json[QString("serverPort")]);
    m_server_port_isSet = !json[QString("serverPort")].isNull() && m_server_port_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_cors_isValid = ::OpenAPI::fromJsonValue(m_cors, json[QString("cors")]);
    m_cors_isSet = !json[QString("cors")].isNull() && m_cors_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_host_name_prefix_isValid = ::OpenAPI::fromJsonValue(m_host_name_prefix, json[QString("hostNamePrefix")]);
    m_host_name_prefix_isSet = !json[QString("hostNamePrefix")].isNull() && m_host_name_prefix_isValid;
}

QString OAISignalRProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignalRProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_external_ip_isSet) {
        obj.insert(QString("externalIP"), ::OpenAPI::toJsonValue(m_external_ip));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_port_isSet) {
        obj.insert(QString("publicPort"), ::OpenAPI::toJsonValue(m_public_port));
    }
    if (m_server_port_isSet) {
        obj.insert(QString("serverPort"), ::OpenAPI::toJsonValue(m_server_port));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_cors.isSet()) {
        obj.insert(QString("cors"), ::OpenAPI::toJsonValue(m_cors));
    }
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_host_name_prefix_isSet) {
        obj.insert(QString("hostNamePrefix"), ::OpenAPI::toJsonValue(m_host_name_prefix));
    }
    return obj;
}

QString OAISignalRProperties::getExternalIp() const {
    return m_external_ip;
}
void OAISignalRProperties::setExternalIp(const QString &external_ip) {
    m_external_ip = external_ip;
    m_external_ip_isSet = true;
}

bool OAISignalRProperties::is_external_ip_Set() const{
    return m_external_ip_isSet;
}

bool OAISignalRProperties::is_external_ip_Valid() const{
    return m_external_ip_isValid;
}

QString OAISignalRProperties::getHostName() const {
    return m_host_name;
}
void OAISignalRProperties::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAISignalRProperties::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAISignalRProperties::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QString OAISignalRProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAISignalRProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAISignalRProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAISignalRProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

qint32 OAISignalRProperties::getPublicPort() const {
    return m_public_port;
}
void OAISignalRProperties::setPublicPort(const qint32 &public_port) {
    m_public_port = public_port;
    m_public_port_isSet = true;
}

bool OAISignalRProperties::is_public_port_Set() const{
    return m_public_port_isSet;
}

bool OAISignalRProperties::is_public_port_Valid() const{
    return m_public_port_isValid;
}

qint32 OAISignalRProperties::getServerPort() const {
    return m_server_port;
}
void OAISignalRProperties::setServerPort(const qint32 &server_port) {
    m_server_port = server_port;
    m_server_port_isSet = true;
}

bool OAISignalRProperties::is_server_port_Set() const{
    return m_server_port_isSet;
}

bool OAISignalRProperties::is_server_port_Valid() const{
    return m_server_port_isValid;
}

QString OAISignalRProperties::getVersion() const {
    return m_version;
}
void OAISignalRProperties::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISignalRProperties::is_version_Set() const{
    return m_version_isSet;
}

bool OAISignalRProperties::is_version_Valid() const{
    return m_version_isValid;
}

OAISignalRCorsSettings OAISignalRProperties::getCors() const {
    return m_cors;
}
void OAISignalRProperties::setCors(const OAISignalRCorsSettings &cors) {
    m_cors = cors;
    m_cors_isSet = true;
}

bool OAISignalRProperties::is_cors_Set() const{
    return m_cors_isSet;
}

bool OAISignalRProperties::is_cors_Valid() const{
    return m_cors_isValid;
}

QList<OAISignalRFeature> OAISignalRProperties::getFeatures() const {
    return m_features;
}
void OAISignalRProperties::setFeatures(const QList<OAISignalRFeature> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAISignalRProperties::is_features_Set() const{
    return m_features_isSet;
}

bool OAISignalRProperties::is_features_Valid() const{
    return m_features_isValid;
}

QString OAISignalRProperties::getHostNamePrefix() const {
    return m_host_name_prefix;
}
void OAISignalRProperties::setHostNamePrefix(const QString &host_name_prefix) {
    m_host_name_prefix = host_name_prefix;
    m_host_name_prefix_isSet = true;
}

bool OAISignalRProperties::is_host_name_prefix_Set() const{
    return m_host_name_prefix_isSet;
}

bool OAISignalRProperties::is_host_name_prefix_Valid() const{
    return m_host_name_prefix_isValid;
}

bool OAISignalRProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignalRProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
