/**
 * SignalRManagementClient
 * REST API for Azure SignalR Service
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISignalRProperties.h
 *
 * A class that describes the properties of the SignalR service that should contain more read-only properties than AzSignalR.Models.SignalRCreateOrUpdateProperties
 */

#ifndef OAISignalRProperties_H
#define OAISignalRProperties_H

#include <QJsonObject>

#include "OAISignalRCorsSettings.h"
#include "OAISignalRFeature.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISignalRCorsSettings;
class OAISignalRFeature;

class OAISignalRProperties : public OAIObject {
public:
    OAISignalRProperties();
    OAISignalRProperties(QString json);
    ~OAISignalRProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getExternalIp() const;
    void setExternalIp(const QString &external_ip);
    bool is_external_ip_Set() const;
    bool is_external_ip_Valid() const;

    QString getHostName() const;
    void setHostName(const QString &host_name);
    bool is_host_name_Set() const;
    bool is_host_name_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    qint32 getPublicPort() const;
    void setPublicPort(const qint32 &public_port);
    bool is_public_port_Set() const;
    bool is_public_port_Valid() const;

    qint32 getServerPort() const;
    void setServerPort(const qint32 &server_port);
    bool is_server_port_Set() const;
    bool is_server_port_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    OAISignalRCorsSettings getCors() const;
    void setCors(const OAISignalRCorsSettings &cors);
    bool is_cors_Set() const;
    bool is_cors_Valid() const;

    QList<OAISignalRFeature> getFeatures() const;
    void setFeatures(const QList<OAISignalRFeature> &features);
    bool is_features_Set() const;
    bool is_features_Valid() const;

    QString getHostNamePrefix() const;
    void setHostNamePrefix(const QString &host_name_prefix);
    bool is_host_name_prefix_Set() const;
    bool is_host_name_prefix_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_external_ip;
    bool m_external_ip_isSet;
    bool m_external_ip_isValid;

    QString m_host_name;
    bool m_host_name_isSet;
    bool m_host_name_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    qint32 m_public_port;
    bool m_public_port_isSet;
    bool m_public_port_isValid;

    qint32 m_server_port;
    bool m_server_port_isSet;
    bool m_server_port_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    OAISignalRCorsSettings m_cors;
    bool m_cors_isSet;
    bool m_cors_isValid;

    QList<OAISignalRFeature> m_features;
    bool m_features_isSet;
    bool m_features_isValid;

    QString m_host_name_prefix;
    bool m_host_name_prefix_isSet;
    bool m_host_name_prefix_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISignalRProperties)

#endif // OAISignalRProperties_H
