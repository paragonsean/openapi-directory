# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SignalRProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_ip: str=None, host_name: str=None, provisioning_state: str=None, public_port: int=None, server_port: int=None, version: str=None, host_name_prefix: str=None):
        """SignalRProperties - a model defined in OpenAPI

        :param external_ip: The external_ip of this SignalRProperties.
        :param host_name: The host_name of this SignalRProperties.
        :param provisioning_state: The provisioning_state of this SignalRProperties.
        :param public_port: The public_port of this SignalRProperties.
        :param server_port: The server_port of this SignalRProperties.
        :param version: The version of this SignalRProperties.
        :param host_name_prefix: The host_name_prefix of this SignalRProperties.
        """
        self.openapi_types = {
            'external_ip': str,
            'host_name': str,
            'provisioning_state': str,
            'public_port': int,
            'server_port': int,
            'version': str,
            'host_name_prefix': str
        }

        self.attribute_map = {
            'external_ip': 'externalIP',
            'host_name': 'hostName',
            'provisioning_state': 'provisioningState',
            'public_port': 'publicPort',
            'server_port': 'serverPort',
            'version': 'version',
            'host_name_prefix': 'hostNamePrefix'
        }

        self._external_ip = external_ip
        self._host_name = host_name
        self._provisioning_state = provisioning_state
        self._public_port = public_port
        self._server_port = server_port
        self._version = version
        self._host_name_prefix = host_name_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignalRProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignalRProperties of this SignalRProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_ip(self):
        """Gets the external_ip of this SignalRProperties.

        The publicly accessible IP of the SignalR service.

        :return: The external_ip of this SignalRProperties.
        :rtype: str
        """
        return self._external_ip

    @external_ip.setter
    def external_ip(self, external_ip):
        """Sets the external_ip of this SignalRProperties.

        The publicly accessible IP of the SignalR service.

        :param external_ip: The external_ip of this SignalRProperties.
        :type external_ip: str
        """

        self._external_ip = external_ip

    @property
    def host_name(self):
        """Gets the host_name of this SignalRProperties.

        FQDN of the SignalR service instance. Format: xxx.service.signalr.net

        :return: The host_name of this SignalRProperties.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this SignalRProperties.

        FQDN of the SignalR service instance. Format: xxx.service.signalr.net

        :param host_name: The host_name of this SignalRProperties.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this SignalRProperties.

        Provisioning state of the resource.

        :return: The provisioning_state of this SignalRProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this SignalRProperties.

        Provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this SignalRProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Unknown", "Succeeded", "Failed", "Canceled", "Running", "Creating", "Updating", "Deleting", "Moving"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def public_port(self):
        """Gets the public_port of this SignalRProperties.

        The publicly accessibly port of the SignalR service which is designed for browser/client side usage.

        :return: The public_port of this SignalRProperties.
        :rtype: int
        """
        return self._public_port

    @public_port.setter
    def public_port(self, public_port):
        """Sets the public_port of this SignalRProperties.

        The publicly accessibly port of the SignalR service which is designed for browser/client side usage.

        :param public_port: The public_port of this SignalRProperties.
        :type public_port: int
        """

        self._public_port = public_port

    @property
    def server_port(self):
        """Gets the server_port of this SignalRProperties.

        The publicly accessibly port of the SignalR service which is designed for customer server side usage.

        :return: The server_port of this SignalRProperties.
        :rtype: int
        """
        return self._server_port

    @server_port.setter
    def server_port(self, server_port):
        """Sets the server_port of this SignalRProperties.

        The publicly accessibly port of the SignalR service which is designed for customer server side usage.

        :param server_port: The server_port of this SignalRProperties.
        :type server_port: int
        """

        self._server_port = server_port

    @property
    def version(self):
        """Gets the version of this SignalRProperties.

        Version of the SignalR resource. Probably you need the same or higher version of client SDKs.

        :return: The version of this SignalRProperties.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SignalRProperties.

        Version of the SignalR resource. Probably you need the same or higher version of client SDKs.

        :param version: The version of this SignalRProperties.
        :type version: str
        """

        self._version = version

    @property
    def host_name_prefix(self):
        """Gets the host_name_prefix of this SignalRProperties.

        Prefix for the hostName of the SignalR service. Retained for future use.  The hostname will be of format: &lt;hostNamePrefix&gt;.service.signalr.net.

        :return: The host_name_prefix of this SignalRProperties.
        :rtype: str
        """
        return self._host_name_prefix

    @host_name_prefix.setter
    def host_name_prefix(self, host_name_prefix):
        """Sets the host_name_prefix of this SignalRProperties.

        Prefix for the hostName of the SignalR service. Retained for future use.  The hostname will be of format: &lt;hostNamePrefix&gt;.service.signalr.net.

        :param host_name_prefix: The host_name_prefix of this SignalRProperties.
        :type host_name_prefix: str
        """

        self._host_name_prefix = host_name_prefix
