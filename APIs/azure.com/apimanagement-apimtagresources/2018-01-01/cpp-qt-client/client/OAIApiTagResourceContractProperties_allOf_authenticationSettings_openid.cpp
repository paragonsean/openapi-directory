/**
 * ApiManagementClient
 * Use these REST APIs for querying APIs. Operations and Products by tags in your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid() {
    this->initializeModel();
}

OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::~OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid() {}

void OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::initializeModel() {

    m_bearer_token_sending_methods_isSet = false;
    m_bearer_token_sending_methods_isValid = false;

    m_openid_provider_id_isSet = false;
    m_openid_provider_id_isValid = false;
}

void OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::fromJsonObject(QJsonObject json) {

    m_bearer_token_sending_methods_isValid = ::OpenAPI::fromJsonValue(m_bearer_token_sending_methods, json[QString("bearerTokenSendingMethods")]);
    m_bearer_token_sending_methods_isSet = !json[QString("bearerTokenSendingMethods")].isNull() && m_bearer_token_sending_methods_isValid;

    m_openid_provider_id_isValid = ::OpenAPI::fromJsonValue(m_openid_provider_id, json[QString("openidProviderId")]);
    m_openid_provider_id_isSet = !json[QString("openidProviderId")].isNull() && m_openid_provider_id_isValid;
}

QString OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::asJsonObject() const {
    QJsonObject obj;
    if (m_bearer_token_sending_methods.size() > 0) {
        obj.insert(QString("bearerTokenSendingMethods"), ::OpenAPI::toJsonValue(m_bearer_token_sending_methods));
    }
    if (m_openid_provider_id_isSet) {
        obj.insert(QString("openidProviderId"), ::OpenAPI::toJsonValue(m_openid_provider_id));
    }
    return obj;
}

QList<QString> OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::getBearerTokenSendingMethods() const {
    return m_bearer_token_sending_methods;
}
void OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::setBearerTokenSendingMethods(const QList<QString> &bearer_token_sending_methods) {
    m_bearer_token_sending_methods = bearer_token_sending_methods;
    m_bearer_token_sending_methods_isSet = true;
}

bool OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::is_bearer_token_sending_methods_Set() const{
    return m_bearer_token_sending_methods_isSet;
}

bool OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::is_bearer_token_sending_methods_Valid() const{
    return m_bearer_token_sending_methods_isValid;
}

QString OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::getOpenidProviderId() const {
    return m_openid_provider_id;
}
void OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::setOpenidProviderId(const QString &openid_provider_id) {
    m_openid_provider_id = openid_provider_id;
    m_openid_provider_id_isSet = true;
}

bool OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::is_openid_provider_id_Set() const{
    return m_openid_provider_id_isSet;
}

bool OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::is_openid_provider_id_Valid() const{
    return m_openid_provider_id_isValid;
}

bool OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bearer_token_sending_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_openid_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiTagResourceContractProperties_allOf_authenticationSettings_openid::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
