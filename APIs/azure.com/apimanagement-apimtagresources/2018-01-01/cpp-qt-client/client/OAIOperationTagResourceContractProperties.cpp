/**
 * ApiManagementClient
 * Use these REST APIs for querying APIs. Operations and Products by tags in your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationTagResourceContractProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationTagResourceContractProperties::OAIOperationTagResourceContractProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationTagResourceContractProperties::OAIOperationTagResourceContractProperties() {
    this->initializeModel();
}

OAIOperationTagResourceContractProperties::~OAIOperationTagResourceContractProperties() {}

void OAIOperationTagResourceContractProperties::initializeModel() {

    m_api_name_isSet = false;
    m_api_name_isValid = false;

    m_api_revision_isSet = false;
    m_api_revision_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_template_isSet = false;
    m_url_template_isValid = false;
}

void OAIOperationTagResourceContractProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationTagResourceContractProperties::fromJsonObject(QJsonObject json) {

    m_api_name_isValid = ::OpenAPI::fromJsonValue(m_api_name, json[QString("apiName")]);
    m_api_name_isSet = !json[QString("apiName")].isNull() && m_api_name_isValid;

    m_api_revision_isValid = ::OpenAPI::fromJsonValue(m_api_revision, json[QString("apiRevision")]);
    m_api_revision_isSet = !json[QString("apiRevision")].isNull() && m_api_revision_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("apiVersion")]);
    m_api_version_isSet = !json[QString("apiVersion")].isNull() && m_api_version_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_template_isValid = ::OpenAPI::fromJsonValue(m_url_template, json[QString("urlTemplate")]);
    m_url_template_isSet = !json[QString("urlTemplate")].isNull() && m_url_template_isValid;
}

QString OAIOperationTagResourceContractProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationTagResourceContractProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_api_name_isSet) {
        obj.insert(QString("apiName"), ::OpenAPI::toJsonValue(m_api_name));
    }
    if (m_api_revision_isSet) {
        obj.insert(QString("apiRevision"), ::OpenAPI::toJsonValue(m_api_revision));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("apiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_template_isSet) {
        obj.insert(QString("urlTemplate"), ::OpenAPI::toJsonValue(m_url_template));
    }
    return obj;
}

QString OAIOperationTagResourceContractProperties::getApiName() const {
    return m_api_name;
}
void OAIOperationTagResourceContractProperties::setApiName(const QString &api_name) {
    m_api_name = api_name;
    m_api_name_isSet = true;
}

bool OAIOperationTagResourceContractProperties::is_api_name_Set() const{
    return m_api_name_isSet;
}

bool OAIOperationTagResourceContractProperties::is_api_name_Valid() const{
    return m_api_name_isValid;
}

QString OAIOperationTagResourceContractProperties::getApiRevision() const {
    return m_api_revision;
}
void OAIOperationTagResourceContractProperties::setApiRevision(const QString &api_revision) {
    m_api_revision = api_revision;
    m_api_revision_isSet = true;
}

bool OAIOperationTagResourceContractProperties::is_api_revision_Set() const{
    return m_api_revision_isSet;
}

bool OAIOperationTagResourceContractProperties::is_api_revision_Valid() const{
    return m_api_revision_isValid;
}

QString OAIOperationTagResourceContractProperties::getApiVersion() const {
    return m_api_version;
}
void OAIOperationTagResourceContractProperties::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIOperationTagResourceContractProperties::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIOperationTagResourceContractProperties::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIOperationTagResourceContractProperties::getDescription() const {
    return m_description;
}
void OAIOperationTagResourceContractProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOperationTagResourceContractProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOperationTagResourceContractProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOperationTagResourceContractProperties::getId() const {
    return m_id;
}
void OAIOperationTagResourceContractProperties::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOperationTagResourceContractProperties::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOperationTagResourceContractProperties::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOperationTagResourceContractProperties::getMethod() const {
    return m_method;
}
void OAIOperationTagResourceContractProperties::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIOperationTagResourceContractProperties::is_method_Set() const{
    return m_method_isSet;
}

bool OAIOperationTagResourceContractProperties::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIOperationTagResourceContractProperties::getName() const {
    return m_name;
}
void OAIOperationTagResourceContractProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOperationTagResourceContractProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOperationTagResourceContractProperties::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOperationTagResourceContractProperties::getUrlTemplate() const {
    return m_url_template;
}
void OAIOperationTagResourceContractProperties::setUrlTemplate(const QString &url_template) {
    m_url_template = url_template;
    m_url_template_isSet = true;
}

bool OAIOperationTagResourceContractProperties::is_url_template_Set() const{
    return m_url_template_isSet;
}

bool OAIOperationTagResourceContractProperties::is_url_template_Valid() const{
    return m_url_template_isValid;
}

bool OAIOperationTagResourceContractProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_template_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationTagResourceContractProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
