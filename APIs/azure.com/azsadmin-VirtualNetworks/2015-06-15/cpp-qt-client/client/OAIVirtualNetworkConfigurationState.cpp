/**
 * NetworkAdminManagementClient
 * Virtual Network admin operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2015-06-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkConfigurationState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkConfigurationState::OAIVirtualNetworkConfigurationState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkConfigurationState::OAIVirtualNetworkConfigurationState() {
    this->initializeModel();
}

OAIVirtualNetworkConfigurationState::~OAIVirtualNetworkConfigurationState() {}

void OAIVirtualNetworkConfigurationState::initializeModel() {

    m_host_errors_isSet = false;
    m_host_errors_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_virtual_network_interface_errors_isSet = false;
    m_virtual_network_interface_errors_isValid = false;
}

void OAIVirtualNetworkConfigurationState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNetworkConfigurationState::fromJsonObject(QJsonObject json) {

    m_host_errors_isValid = ::OpenAPI::fromJsonValue(m_host_errors, json[QString("hostErrors")]);
    m_host_errors_isSet = !json[QString("hostErrors")].isNull() && m_host_errors_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_virtual_network_interface_errors_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_interface_errors, json[QString("virtualNetworkInterfaceErrors")]);
    m_virtual_network_interface_errors_isSet = !json[QString("virtualNetworkInterfaceErrors")].isNull() && m_virtual_network_interface_errors_isValid;
}

QString OAIVirtualNetworkConfigurationState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNetworkConfigurationState::asJsonObject() const {
    QJsonObject obj;
    if (m_host_errors.size() > 0) {
        obj.insert(QString("hostErrors"), ::OpenAPI::toJsonValue(m_host_errors));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_virtual_network_interface_errors.size() > 0) {
        obj.insert(QString("virtualNetworkInterfaceErrors"), ::OpenAPI::toJsonValue(m_virtual_network_interface_errors));
    }
    return obj;
}

QList<OAIVirtualNetworkConfigurationStatus> OAIVirtualNetworkConfigurationState::getHostErrors() const {
    return m_host_errors;
}
void OAIVirtualNetworkConfigurationState::setHostErrors(const QList<OAIVirtualNetworkConfigurationStatus> &host_errors) {
    m_host_errors = host_errors;
    m_host_errors_isSet = true;
}

bool OAIVirtualNetworkConfigurationState::is_host_errors_Set() const{
    return m_host_errors_isSet;
}

bool OAIVirtualNetworkConfigurationState::is_host_errors_Valid() const{
    return m_host_errors_isValid;
}

QDateTime OAIVirtualNetworkConfigurationState::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIVirtualNetworkConfigurationState::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIVirtualNetworkConfigurationState::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIVirtualNetworkConfigurationState::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIVirtualNetworkConfigurationState::getStatus() const {
    return m_status;
}
void OAIVirtualNetworkConfigurationState::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVirtualNetworkConfigurationState::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVirtualNetworkConfigurationState::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIVirtualNetworkConfigurationStatus> OAIVirtualNetworkConfigurationState::getVirtualNetworkInterfaceErrors() const {
    return m_virtual_network_interface_errors;
}
void OAIVirtualNetworkConfigurationState::setVirtualNetworkInterfaceErrors(const QList<OAIVirtualNetworkConfigurationStatus> &virtual_network_interface_errors) {
    m_virtual_network_interface_errors = virtual_network_interface_errors;
    m_virtual_network_interface_errors_isSet = true;
}

bool OAIVirtualNetworkConfigurationState::is_virtual_network_interface_errors_Set() const{
    return m_virtual_network_interface_errors_isSet;
}

bool OAIVirtualNetworkConfigurationState::is_virtual_network_interface_errors_Valid() const{
    return m_virtual_network_interface_errors_isValid;
}

bool OAIVirtualNetworkConfigurationState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_interface_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNetworkConfigurationState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
