/**
 * NetworkAdminManagementClient
 * Virtual Network admin operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2015-06-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkProperties::OAIVirtualNetworkProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkProperties::OAIVirtualNetworkProperties() {
    this->initializeModel();
}

OAIVirtualNetworkProperties::~OAIVirtualNetworkProperties() {}

void OAIVirtualNetworkProperties::initializeModel() {

    m_configuration_state_isSet = false;
    m_configuration_state_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_tenant_resource_uri_isSet = false;
    m_tenant_resource_uri_isValid = false;
}

void OAIVirtualNetworkProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNetworkProperties::fromJsonObject(QJsonObject json) {

    m_configuration_state_isValid = ::OpenAPI::fromJsonValue(m_configuration_state, json[QString("configurationState")]);
    m_configuration_state_isSet = !json[QString("configurationState")].isNull() && m_configuration_state_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_tenant_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_tenant_resource_uri, json[QString("tenantResourceUri")]);
    m_tenant_resource_uri_isSet = !json[QString("tenantResourceUri")].isNull() && m_tenant_resource_uri_isValid;
}

QString OAIVirtualNetworkProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNetworkProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_state.isSet()) {
        obj.insert(QString("configurationState"), ::OpenAPI::toJsonValue(m_configuration_state));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_tenant_resource_uri_isSet) {
        obj.insert(QString("tenantResourceUri"), ::OpenAPI::toJsonValue(m_tenant_resource_uri));
    }
    return obj;
}

OAIVirtualNetworkConfigurationState OAIVirtualNetworkProperties::getConfigurationState() const {
    return m_configuration_state;
}
void OAIVirtualNetworkProperties::setConfigurationState(const OAIVirtualNetworkConfigurationState &configuration_state) {
    m_configuration_state = configuration_state;
    m_configuration_state_isSet = true;
}

bool OAIVirtualNetworkProperties::is_configuration_state_Set() const{
    return m_configuration_state_isSet;
}

bool OAIVirtualNetworkProperties::is_configuration_state_Valid() const{
    return m_configuration_state_isValid;
}

QString OAIVirtualNetworkProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualNetworkProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualNetworkProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualNetworkProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIVirtualNetworkProperties::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIVirtualNetworkProperties::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIVirtualNetworkProperties::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIVirtualNetworkProperties::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIVirtualNetworkProperties::getTenantResourceUri() const {
    return m_tenant_resource_uri;
}
void OAIVirtualNetworkProperties::setTenantResourceUri(const QString &tenant_resource_uri) {
    m_tenant_resource_uri = tenant_resource_uri;
    m_tenant_resource_uri_isSet = true;
}

bool OAIVirtualNetworkProperties::is_tenant_resource_uri_Set() const{
    return m_tenant_resource_uri_isSet;
}

bool OAIVirtualNetworkProperties::is_tenant_resource_uri_Valid() const{
    return m_tenant_resource_uri_isValid;
}

bool OAIVirtualNetworkProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNetworkProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
