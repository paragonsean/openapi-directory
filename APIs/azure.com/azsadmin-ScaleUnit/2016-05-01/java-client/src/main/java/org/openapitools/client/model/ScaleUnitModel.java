/*
 * FabricAdminClient
 * Scale unit operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ScaleUnitCapacity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a scale unit.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:15.550973-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScaleUnitModel {
  public static final String SERIALIZED_NAME_IS_MULTI_NODE = "isMultiNode";
  @SerializedName(SERIALIZED_NAME_IS_MULTI_NODE)
  private Boolean isMultiNode;

  public static final String SERIALIZED_NAME_LOGICAL_FAULT_DOMAIN = "logicalFaultDomain";
  @SerializedName(SERIALIZED_NAME_LOGICAL_FAULT_DOMAIN)
  private Integer logicalFaultDomain;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private List<String> nodes = new ArrayList<>();

  /**
   * Type of cluster.
   */
  @JsonAdapter(ScaleUnitTypeEnum.Adapter.class)
  public enum ScaleUnitTypeEnum {
    UNKNOWN("Unknown"),
    
    COMPUTE_ONLY("ComputeOnly"),
    
    STORAGE_ONLY("StorageOnly"),
    
    HYPER_CONVERGED("HyperConverged");

    private String value;

    ScaleUnitTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScaleUnitTypeEnum fromValue(String value) {
      for (ScaleUnitTypeEnum b : ScaleUnitTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScaleUnitTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScaleUnitTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScaleUnitTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScaleUnitTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScaleUnitTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCALE_UNIT_TYPE = "scaleUnitType";
  @SerializedName(SERIALIZED_NAME_SCALE_UNIT_TYPE)
  private ScaleUnitTypeEnum scaleUnitType;

  /**
   * Current state of the cluster.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNKNOWN("Unknown"),
    
    CREATING("Creating"),
    
    RUNNING("Running"),
    
    UPGRADING("Upgrading"),
    
    DELETING("Deleting");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TOTAL_CAPACITY = "totalCapacity";
  @SerializedName(SERIALIZED_NAME_TOTAL_CAPACITY)
  private ScaleUnitCapacity totalCapacity;

  public ScaleUnitModel() {
  }

  public ScaleUnitModel isMultiNode(Boolean isMultiNode) {
    this.isMultiNode = isMultiNode;
    return this;
  }

  /**
   * Denotes if more than one node in cluster.
   * @return isMultiNode
   */
  @javax.annotation.Nullable
  public Boolean getIsMultiNode() {
    return isMultiNode;
  }

  public void setIsMultiNode(Boolean isMultiNode) {
    this.isMultiNode = isMultiNode;
  }


  public ScaleUnitModel logicalFaultDomain(Integer logicalFaultDomain) {
    this.logicalFaultDomain = logicalFaultDomain;
    return this;
  }

  /**
   * Fault domain name of the cluster.
   * @return logicalFaultDomain
   */
  @javax.annotation.Nullable
  public Integer getLogicalFaultDomain() {
    return logicalFaultDomain;
  }

  public void setLogicalFaultDomain(Integer logicalFaultDomain) {
    this.logicalFaultDomain = logicalFaultDomain;
  }


  public ScaleUnitModel model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Model of the servers in the cluster.
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public ScaleUnitModel nodes(List<String> nodes) {
    this.nodes = nodes;
    return this;
  }

  public ScaleUnitModel addNodesItem(String nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

  /**
   * List of nodes in the server.
   * @return nodes
   */
  @javax.annotation.Nullable
  public List<String> getNodes() {
    return nodes;
  }

  public void setNodes(List<String> nodes) {
    this.nodes = nodes;
  }


  public ScaleUnitModel scaleUnitType(ScaleUnitTypeEnum scaleUnitType) {
    this.scaleUnitType = scaleUnitType;
    return this;
  }

  /**
   * Type of cluster.
   * @return scaleUnitType
   */
  @javax.annotation.Nullable
  public ScaleUnitTypeEnum getScaleUnitType() {
    return scaleUnitType;
  }

  public void setScaleUnitType(ScaleUnitTypeEnum scaleUnitType) {
    this.scaleUnitType = scaleUnitType;
  }


  public ScaleUnitModel state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Current state of the cluster.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public ScaleUnitModel totalCapacity(ScaleUnitCapacity totalCapacity) {
    this.totalCapacity = totalCapacity;
    return this;
  }

  /**
   * Get totalCapacity
   * @return totalCapacity
   */
  @javax.annotation.Nullable
  public ScaleUnitCapacity getTotalCapacity() {
    return totalCapacity;
  }

  public void setTotalCapacity(ScaleUnitCapacity totalCapacity) {
    this.totalCapacity = totalCapacity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScaleUnitModel scaleUnitModel = (ScaleUnitModel) o;
    return Objects.equals(this.isMultiNode, scaleUnitModel.isMultiNode) &&
        Objects.equals(this.logicalFaultDomain, scaleUnitModel.logicalFaultDomain) &&
        Objects.equals(this.model, scaleUnitModel.model) &&
        Objects.equals(this.nodes, scaleUnitModel.nodes) &&
        Objects.equals(this.scaleUnitType, scaleUnitModel.scaleUnitType) &&
        Objects.equals(this.state, scaleUnitModel.state) &&
        Objects.equals(this.totalCapacity, scaleUnitModel.totalCapacity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isMultiNode, logicalFaultDomain, model, nodes, scaleUnitType, state, totalCapacity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScaleUnitModel {\n");
    sb.append("    isMultiNode: ").append(toIndentedString(isMultiNode)).append("\n");
    sb.append("    logicalFaultDomain: ").append(toIndentedString(logicalFaultDomain)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    scaleUnitType: ").append(toIndentedString(scaleUnitType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    totalCapacity: ").append(toIndentedString(totalCapacity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isMultiNode");
    openapiFields.add("logicalFaultDomain");
    openapiFields.add("model");
    openapiFields.add("nodes");
    openapiFields.add("scaleUnitType");
    openapiFields.add("state");
    openapiFields.add("totalCapacity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScaleUnitModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScaleUnitModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScaleUnitModel is not found in the empty JSON string", ScaleUnitModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScaleUnitModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScaleUnitModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull() && !jsonObj.get("nodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
      }
      if ((jsonObj.get("scaleUnitType") != null && !jsonObj.get("scaleUnitType").isJsonNull()) && !jsonObj.get("scaleUnitType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scaleUnitType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scaleUnitType").toString()));
      }
      // validate the optional field `scaleUnitType`
      if (jsonObj.get("scaleUnitType") != null && !jsonObj.get("scaleUnitType").isJsonNull()) {
        ScaleUnitTypeEnum.validateJsonElement(jsonObj.get("scaleUnitType"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `totalCapacity`
      if (jsonObj.get("totalCapacity") != null && !jsonObj.get("totalCapacity").isJsonNull()) {
        ScaleUnitCapacity.validateJsonElement(jsonObj.get("totalCapacity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScaleUnitModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScaleUnitModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScaleUnitModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScaleUnitModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ScaleUnitModel>() {
           @Override
           public void write(JsonWriter out, ScaleUnitModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScaleUnitModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScaleUnitModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScaleUnitModel
   * @throws IOException if the JSON string is invalid with respect to ScaleUnitModel
   */
  public static ScaleUnitModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScaleUnitModel.class);
  }

  /**
   * Convert an instance of ScaleUnitModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

