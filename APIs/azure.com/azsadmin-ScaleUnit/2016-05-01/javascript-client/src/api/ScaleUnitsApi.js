/**
 * FabricAdminClient
 * Scale unit operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateFromJsonScaleUnitParametersList from '../model/CreateFromJsonScaleUnitParametersList';
import ScaleOutScaleUnitParametersList from '../model/ScaleOutScaleUnitParametersList';
import ScaleUnit from '../model/ScaleUnit';
import ScaleUnitList from '../model/ScaleUnitList';

/**
* ScaleUnits service.
* @module api/ScaleUnitsApi
* @version 2016-05-01
*/
export default class ScaleUnitsApi {

    /**
    * Constructs a new ScaleUnitsApi. 
    * @alias module:api/ScaleUnitsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the scaleUnitsCreateFromJson operation.
     * @callback module:api/ScaleUnitsApi~scaleUnitsCreateFromJsonCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new scale unit.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} location Location of the resource.
     * @param {String} scaleUnit Name of the scale units.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/CreateFromJsonScaleUnitParametersList} creationData A list of input data that allows for creating the new scale unit.
     * @param {module:api/ScaleUnitsApi~scaleUnitsCreateFromJsonCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scaleUnitsCreateFromJson(subscriptionId, resourceGroupName, location, scaleUnit, apiVersion, creationData, callback) {
      let postBody = creationData;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling scaleUnitsCreateFromJson");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling scaleUnitsCreateFromJson");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling scaleUnitsCreateFromJson");
      }
      // verify the required parameter 'scaleUnit' is set
      if (scaleUnit === undefined || scaleUnit === null) {
        throw new Error("Missing the required parameter 'scaleUnit' when calling scaleUnitsCreateFromJson");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling scaleUnitsCreateFromJson");
      }
      // verify the required parameter 'creationData' is set
      if (creationData === undefined || creationData === null) {
        throw new Error("Missing the required parameter 'creationData' when calling scaleUnitsCreateFromJson");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location,
        'scaleUnit': scaleUnit
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnits/{scaleUnit}/createFromJson', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scaleUnitsGet operation.
     * @callback module:api/ScaleUnitsApi~scaleUnitsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScaleUnit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the requested scale unit.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} location Location of the resource.
     * @param {String} scaleUnit Name of the scale units.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/ScaleUnitsApi~scaleUnitsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScaleUnit}
     */
    scaleUnitsGet(subscriptionId, resourceGroupName, location, scaleUnit, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling scaleUnitsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling scaleUnitsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling scaleUnitsGet");
      }
      // verify the required parameter 'scaleUnit' is set
      if (scaleUnit === undefined || scaleUnit === null) {
        throw new Error("Missing the required parameter 'scaleUnit' when calling scaleUnitsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling scaleUnitsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location,
        'scaleUnit': scaleUnit
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScaleUnit;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnits/{scaleUnit}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scaleUnitsList operation.
     * @callback module:api/ScaleUnitsApi~scaleUnitsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScaleUnitList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all scale units at a location.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} location Location of the resource.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter parameter.
     * @param {module:api/ScaleUnitsApi~scaleUnitsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScaleUnitList}
     */
    scaleUnitsList(subscriptionId, resourceGroupName, location, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling scaleUnitsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling scaleUnitsList");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling scaleUnitsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling scaleUnitsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScaleUnitList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scaleUnitsScaleOut operation.
     * @callback module:api/ScaleUnitsApi~scaleUnitsScaleOutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scales out a scale unit.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} location Location of the resource.
     * @param {String} scaleUnit Name of the scale units.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/ScaleOutScaleUnitParametersList} scaleUnitNodeParameters A list of input data that allows for adding a set of scale unit nodes.
     * @param {module:api/ScaleUnitsApi~scaleUnitsScaleOutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scaleUnitsScaleOut(subscriptionId, resourceGroupName, location, scaleUnit, apiVersion, scaleUnitNodeParameters, callback) {
      let postBody = scaleUnitNodeParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling scaleUnitsScaleOut");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling scaleUnitsScaleOut");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling scaleUnitsScaleOut");
      }
      // verify the required parameter 'scaleUnit' is set
      if (scaleUnit === undefined || scaleUnit === null) {
        throw new Error("Missing the required parameter 'scaleUnit' when calling scaleUnitsScaleOut");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling scaleUnitsScaleOut");
      }
      // verify the required parameter 'scaleUnitNodeParameters' is set
      if (scaleUnitNodeParameters === undefined || scaleUnitNodeParameters === null) {
        throw new Error("Missing the required parameter 'scaleUnitNodeParameters' when calling scaleUnitsScaleOut");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location,
        'scaleUnit': scaleUnit
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnits/{scaleUnit}/scaleOut', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
