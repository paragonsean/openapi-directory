/**
 * FabricAdminClient
 * Scale unit operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScaleUnitCapacity from './ScaleUnitCapacity';

/**
 * The ScaleUnitModel model module.
 * @module model/ScaleUnitModel
 * @version 2016-05-01
 */
class ScaleUnitModel {
    /**
     * Constructs a new <code>ScaleUnitModel</code>.
     * Properties of a scale unit.
     * @alias module:model/ScaleUnitModel
     */
    constructor() { 
        
        ScaleUnitModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScaleUnitModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScaleUnitModel} obj Optional instance to populate.
     * @return {module:model/ScaleUnitModel} The populated <code>ScaleUnitModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScaleUnitModel();

            if (data.hasOwnProperty('isMultiNode')) {
                obj['isMultiNode'] = ApiClient.convertToType(data['isMultiNode'], 'Boolean');
            }
            if (data.hasOwnProperty('logicalFaultDomain')) {
                obj['logicalFaultDomain'] = ApiClient.convertToType(data['logicalFaultDomain'], 'Number');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('nodes')) {
                obj['nodes'] = ApiClient.convertToType(data['nodes'], ['String']);
            }
            if (data.hasOwnProperty('scaleUnitType')) {
                obj['scaleUnitType'] = ApiClient.convertToType(data['scaleUnitType'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('totalCapacity')) {
                obj['totalCapacity'] = ScaleUnitCapacity.constructFromObject(data['totalCapacity']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScaleUnitModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScaleUnitModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nodes'])) {
            throw new Error("Expected the field `nodes` to be an array in the JSON data but got " + data['nodes']);
        }
        // ensure the json data is a string
        if (data['scaleUnitType'] && !(typeof data['scaleUnitType'] === 'string' || data['scaleUnitType'] instanceof String)) {
            throw new Error("Expected the field `scaleUnitType` to be a primitive type in the JSON string but got " + data['scaleUnitType']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `totalCapacity`
        if (data['totalCapacity']) { // data not null
          ScaleUnitCapacity.validateJSON(data['totalCapacity']);
        }

        return true;
    }


}



/**
 * Denotes if more than one node in cluster.
 * @member {Boolean} isMultiNode
 */
ScaleUnitModel.prototype['isMultiNode'] = undefined;

/**
 * Fault domain name of the cluster.
 * @member {Number} logicalFaultDomain
 */
ScaleUnitModel.prototype['logicalFaultDomain'] = undefined;

/**
 * Model of the servers in the cluster.
 * @member {String} model
 */
ScaleUnitModel.prototype['model'] = undefined;

/**
 * List of nodes in the server.
 * @member {Array.<String>} nodes
 */
ScaleUnitModel.prototype['nodes'] = undefined;

/**
 * Type of cluster.
 * @member {module:model/ScaleUnitModel.ScaleUnitTypeEnum} scaleUnitType
 */
ScaleUnitModel.prototype['scaleUnitType'] = undefined;

/**
 * Current state of the cluster.
 * @member {module:model/ScaleUnitModel.StateEnum} state
 */
ScaleUnitModel.prototype['state'] = undefined;

/**
 * @member {module:model/ScaleUnitCapacity} totalCapacity
 */
ScaleUnitModel.prototype['totalCapacity'] = undefined;





/**
 * Allowed values for the <code>scaleUnitType</code> property.
 * @enum {String}
 * @readonly
 */
ScaleUnitModel['ScaleUnitTypeEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "ComputeOnly"
     * @const
     */
    "ComputeOnly": "ComputeOnly",

    /**
     * value: "StorageOnly"
     * @const
     */
    "StorageOnly": "StorageOnly",

    /**
     * value: "HyperConverged"
     * @const
     */
    "HyperConverged": "HyperConverged"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ScaleUnitModel['StateEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Upgrading"
     * @const
     */
    "Upgrading": "Upgrading",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting"
};



export default ScaleUnitModel;

