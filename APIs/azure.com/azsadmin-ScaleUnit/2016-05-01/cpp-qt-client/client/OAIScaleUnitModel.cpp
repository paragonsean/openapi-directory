/**
 * FabricAdminClient
 * Scale unit operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScaleUnitModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScaleUnitModel::OAIScaleUnitModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScaleUnitModel::OAIScaleUnitModel() {
    this->initializeModel();
}

OAIScaleUnitModel::~OAIScaleUnitModel() {}

void OAIScaleUnitModel::initializeModel() {

    m_is_multi_node_isSet = false;
    m_is_multi_node_isValid = false;

    m_logical_fault_domain_isSet = false;
    m_logical_fault_domain_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_scale_unit_type_isSet = false;
    m_scale_unit_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_total_capacity_isSet = false;
    m_total_capacity_isValid = false;
}

void OAIScaleUnitModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScaleUnitModel::fromJsonObject(QJsonObject json) {

    m_is_multi_node_isValid = ::OpenAPI::fromJsonValue(m_is_multi_node, json[QString("isMultiNode")]);
    m_is_multi_node_isSet = !json[QString("isMultiNode")].isNull() && m_is_multi_node_isValid;

    m_logical_fault_domain_isValid = ::OpenAPI::fromJsonValue(m_logical_fault_domain, json[QString("logicalFaultDomain")]);
    m_logical_fault_domain_isSet = !json[QString("logicalFaultDomain")].isNull() && m_logical_fault_domain_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_scale_unit_type_isValid = ::OpenAPI::fromJsonValue(m_scale_unit_type, json[QString("scaleUnitType")]);
    m_scale_unit_type_isSet = !json[QString("scaleUnitType")].isNull() && m_scale_unit_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_total_capacity_isValid = ::OpenAPI::fromJsonValue(m_total_capacity, json[QString("totalCapacity")]);
    m_total_capacity_isSet = !json[QString("totalCapacity")].isNull() && m_total_capacity_isValid;
}

QString OAIScaleUnitModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScaleUnitModel::asJsonObject() const {
    QJsonObject obj;
    if (m_is_multi_node_isSet) {
        obj.insert(QString("isMultiNode"), ::OpenAPI::toJsonValue(m_is_multi_node));
    }
    if (m_logical_fault_domain_isSet) {
        obj.insert(QString("logicalFaultDomain"), ::OpenAPI::toJsonValue(m_logical_fault_domain));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_nodes.size() > 0) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_scale_unit_type_isSet) {
        obj.insert(QString("scaleUnitType"), ::OpenAPI::toJsonValue(m_scale_unit_type));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_total_capacity.isSet()) {
        obj.insert(QString("totalCapacity"), ::OpenAPI::toJsonValue(m_total_capacity));
    }
    return obj;
}

bool OAIScaleUnitModel::isIsMultiNode() const {
    return m_is_multi_node;
}
void OAIScaleUnitModel::setIsMultiNode(const bool &is_multi_node) {
    m_is_multi_node = is_multi_node;
    m_is_multi_node_isSet = true;
}

bool OAIScaleUnitModel::is_is_multi_node_Set() const{
    return m_is_multi_node_isSet;
}

bool OAIScaleUnitModel::is_is_multi_node_Valid() const{
    return m_is_multi_node_isValid;
}

qint32 OAIScaleUnitModel::getLogicalFaultDomain() const {
    return m_logical_fault_domain;
}
void OAIScaleUnitModel::setLogicalFaultDomain(const qint32 &logical_fault_domain) {
    m_logical_fault_domain = logical_fault_domain;
    m_logical_fault_domain_isSet = true;
}

bool OAIScaleUnitModel::is_logical_fault_domain_Set() const{
    return m_logical_fault_domain_isSet;
}

bool OAIScaleUnitModel::is_logical_fault_domain_Valid() const{
    return m_logical_fault_domain_isValid;
}

QString OAIScaleUnitModel::getModel() const {
    return m_model;
}
void OAIScaleUnitModel::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIScaleUnitModel::is_model_Set() const{
    return m_model_isSet;
}

bool OAIScaleUnitModel::is_model_Valid() const{
    return m_model_isValid;
}

QList<QString> OAIScaleUnitModel::getNodes() const {
    return m_nodes;
}
void OAIScaleUnitModel::setNodes(const QList<QString> &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIScaleUnitModel::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIScaleUnitModel::is_nodes_Valid() const{
    return m_nodes_isValid;
}

QString OAIScaleUnitModel::getScaleUnitType() const {
    return m_scale_unit_type;
}
void OAIScaleUnitModel::setScaleUnitType(const QString &scale_unit_type) {
    m_scale_unit_type = scale_unit_type;
    m_scale_unit_type_isSet = true;
}

bool OAIScaleUnitModel::is_scale_unit_type_Set() const{
    return m_scale_unit_type_isSet;
}

bool OAIScaleUnitModel::is_scale_unit_type_Valid() const{
    return m_scale_unit_type_isValid;
}

QString OAIScaleUnitModel::getState() const {
    return m_state;
}
void OAIScaleUnitModel::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIScaleUnitModel::is_state_Set() const{
    return m_state_isSet;
}

bool OAIScaleUnitModel::is_state_Valid() const{
    return m_state_isValid;
}

OAIScaleUnitCapacity OAIScaleUnitModel::getTotalCapacity() const {
    return m_total_capacity;
}
void OAIScaleUnitModel::setTotalCapacity(const OAIScaleUnitCapacity &total_capacity) {
    m_total_capacity = total_capacity;
    m_total_capacity_isSet = true;
}

bool OAIScaleUnitModel::is_total_capacity_Set() const{
    return m_total_capacity_isSet;
}

bool OAIScaleUnitModel::is_total_capacity_Valid() const{
    return m_total_capacity_isValid;
}

bool OAIScaleUnitModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_multi_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_fault_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_unit_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScaleUnitModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
