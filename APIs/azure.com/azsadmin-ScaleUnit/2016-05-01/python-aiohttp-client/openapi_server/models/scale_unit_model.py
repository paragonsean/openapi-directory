# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scale_unit_capacity import ScaleUnitCapacity
from openapi_server import util


class ScaleUnitModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_multi_node: bool=None, logical_fault_domain: int=None, model: str=None, nodes: List[str]=None, scale_unit_type: str=None, state: str=None, total_capacity: ScaleUnitCapacity=None):
        """ScaleUnitModel - a model defined in OpenAPI

        :param is_multi_node: The is_multi_node of this ScaleUnitModel.
        :param logical_fault_domain: The logical_fault_domain of this ScaleUnitModel.
        :param model: The model of this ScaleUnitModel.
        :param nodes: The nodes of this ScaleUnitModel.
        :param scale_unit_type: The scale_unit_type of this ScaleUnitModel.
        :param state: The state of this ScaleUnitModel.
        :param total_capacity: The total_capacity of this ScaleUnitModel.
        """
        self.openapi_types = {
            'is_multi_node': bool,
            'logical_fault_domain': int,
            'model': str,
            'nodes': List[str],
            'scale_unit_type': str,
            'state': str,
            'total_capacity': ScaleUnitCapacity
        }

        self.attribute_map = {
            'is_multi_node': 'isMultiNode',
            'logical_fault_domain': 'logicalFaultDomain',
            'model': 'model',
            'nodes': 'nodes',
            'scale_unit_type': 'scaleUnitType',
            'state': 'state',
            'total_capacity': 'totalCapacity'
        }

        self._is_multi_node = is_multi_node
        self._logical_fault_domain = logical_fault_domain
        self._model = model
        self._nodes = nodes
        self._scale_unit_type = scale_unit_type
        self._state = state
        self._total_capacity = total_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScaleUnitModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScaleUnitModel of this ScaleUnitModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_multi_node(self):
        """Gets the is_multi_node of this ScaleUnitModel.

        Denotes if more than one node in cluster.

        :return: The is_multi_node of this ScaleUnitModel.
        :rtype: bool
        """
        return self._is_multi_node

    @is_multi_node.setter
    def is_multi_node(self, is_multi_node):
        """Sets the is_multi_node of this ScaleUnitModel.

        Denotes if more than one node in cluster.

        :param is_multi_node: The is_multi_node of this ScaleUnitModel.
        :type is_multi_node: bool
        """

        self._is_multi_node = is_multi_node

    @property
    def logical_fault_domain(self):
        """Gets the logical_fault_domain of this ScaleUnitModel.

        Fault domain name of the cluster.

        :return: The logical_fault_domain of this ScaleUnitModel.
        :rtype: int
        """
        return self._logical_fault_domain

    @logical_fault_domain.setter
    def logical_fault_domain(self, logical_fault_domain):
        """Sets the logical_fault_domain of this ScaleUnitModel.

        Fault domain name of the cluster.

        :param logical_fault_domain: The logical_fault_domain of this ScaleUnitModel.
        :type logical_fault_domain: int
        """

        self._logical_fault_domain = logical_fault_domain

    @property
    def model(self):
        """Gets the model of this ScaleUnitModel.

        Model of the servers in the cluster.

        :return: The model of this ScaleUnitModel.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ScaleUnitModel.

        Model of the servers in the cluster.

        :param model: The model of this ScaleUnitModel.
        :type model: str
        """

        self._model = model

    @property
    def nodes(self):
        """Gets the nodes of this ScaleUnitModel.

        List of nodes in the server.

        :return: The nodes of this ScaleUnitModel.
        :rtype: List[str]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this ScaleUnitModel.

        List of nodes in the server.

        :param nodes: The nodes of this ScaleUnitModel.
        :type nodes: List[str]
        """

        self._nodes = nodes

    @property
    def scale_unit_type(self):
        """Gets the scale_unit_type of this ScaleUnitModel.

        Type of cluster.

        :return: The scale_unit_type of this ScaleUnitModel.
        :rtype: str
        """
        return self._scale_unit_type

    @scale_unit_type.setter
    def scale_unit_type(self, scale_unit_type):
        """Sets the scale_unit_type of this ScaleUnitModel.

        Type of cluster.

        :param scale_unit_type: The scale_unit_type of this ScaleUnitModel.
        :type scale_unit_type: str
        """
        allowed_values = ["Unknown", "ComputeOnly", "StorageOnly", "HyperConverged"]  # noqa: E501
        if scale_unit_type not in allowed_values:
            raise ValueError(
                "Invalid value for `scale_unit_type` ({0}), must be one of {1}"
                .format(scale_unit_type, allowed_values)
            )

        self._scale_unit_type = scale_unit_type

    @property
    def state(self):
        """Gets the state of this ScaleUnitModel.

        Current state of the cluster.

        :return: The state of this ScaleUnitModel.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ScaleUnitModel.

        Current state of the cluster.

        :param state: The state of this ScaleUnitModel.
        :type state: str
        """
        allowed_values = ["Unknown", "Creating", "Running", "Upgrading", "Deleting"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def total_capacity(self):
        """Gets the total_capacity of this ScaleUnitModel.


        :return: The total_capacity of this ScaleUnitModel.
        :rtype: ScaleUnitCapacity
        """
        return self._total_capacity

    @total_capacity.setter
    def total_capacity(self, total_capacity):
        """Sets the total_capacity of this ScaleUnitModel.


        :param total_capacity: The total_capacity of this ScaleUnitModel.
        :type total_capacity: ScaleUnitCapacity
        """

        self._total_capacity = total_capacity
