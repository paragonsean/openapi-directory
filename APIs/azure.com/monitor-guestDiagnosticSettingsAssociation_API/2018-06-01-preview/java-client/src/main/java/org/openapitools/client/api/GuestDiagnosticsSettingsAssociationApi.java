/*
 * Guest Diagnostic Settings Association
 * API to Add/Remove/List Guest Diagnostics Settings Association for Azure Resources
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GuestDiagnosticSettingsAssociationResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GuestDiagnosticsSettingsAssociationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GuestDiagnosticsSettingsAssociationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GuestDiagnosticsSettingsAssociationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for guestDiagnosticsSettingsAssociationCreateOrUpdate
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. (required)
     * @param associationName The name of the diagnostic settings association. (required)
     * @param apiVersion Client Api Version. (required)
     * @param diagnosticSettingsAssociation The diagnostic settings association to create or update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing guest diagnostic settings association was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new guest diagnostic settings association was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the guest diagnostic settings association could not be created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestDiagnosticsSettingsAssociationCreateOrUpdateCall(String resourceUri, String associationName, String apiVersion, GuestDiagnosticSettingsAssociationResource diagnosticSettingsAssociation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = diagnosticSettingsAssociation;

        // create path and map variables
        String localVarPath = "/{resourceUri}/providers/microsoft.insights/guestDiagnosticSettingsAssociation/{associationName}"
            .replace("{" + "resourceUri" + "}", localVarApiClient.escapeString(resourceUri.toString()))
            .replace("{" + "associationName" + "}", localVarApiClient.escapeString(associationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call guestDiagnosticsSettingsAssociationCreateOrUpdateValidateBeforeCall(String resourceUri, String associationName, String apiVersion, GuestDiagnosticSettingsAssociationResource diagnosticSettingsAssociation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceUri' is set
        if (resourceUri == null) {
            throw new ApiException("Missing the required parameter 'resourceUri' when calling guestDiagnosticsSettingsAssociationCreateOrUpdate(Async)");
        }

        // verify the required parameter 'associationName' is set
        if (associationName == null) {
            throw new ApiException("Missing the required parameter 'associationName' when calling guestDiagnosticsSettingsAssociationCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling guestDiagnosticsSettingsAssociationCreateOrUpdate(Async)");
        }

        // verify the required parameter 'diagnosticSettingsAssociation' is set
        if (diagnosticSettingsAssociation == null) {
            throw new ApiException("Missing the required parameter 'diagnosticSettingsAssociation' when calling guestDiagnosticsSettingsAssociationCreateOrUpdate(Async)");
        }

        return guestDiagnosticsSettingsAssociationCreateOrUpdateCall(resourceUri, associationName, apiVersion, diagnosticSettingsAssociation, _callback);

    }

    /**
     * 
     * Creates or updates guest diagnostics settings association.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. (required)
     * @param associationName The name of the diagnostic settings association. (required)
     * @param apiVersion Client Api Version. (required)
     * @param diagnosticSettingsAssociation The diagnostic settings association to create or update. (required)
     * @return GuestDiagnosticSettingsAssociationResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing guest diagnostic settings association was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new guest diagnostic settings association was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the guest diagnostic settings association could not be created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public GuestDiagnosticSettingsAssociationResource guestDiagnosticsSettingsAssociationCreateOrUpdate(String resourceUri, String associationName, String apiVersion, GuestDiagnosticSettingsAssociationResource diagnosticSettingsAssociation) throws ApiException {
        ApiResponse<GuestDiagnosticSettingsAssociationResource> localVarResp = guestDiagnosticsSettingsAssociationCreateOrUpdateWithHttpInfo(resourceUri, associationName, apiVersion, diagnosticSettingsAssociation);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates guest diagnostics settings association.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. (required)
     * @param associationName The name of the diagnostic settings association. (required)
     * @param apiVersion Client Api Version. (required)
     * @param diagnosticSettingsAssociation The diagnostic settings association to create or update. (required)
     * @return ApiResponse&lt;GuestDiagnosticSettingsAssociationResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing guest diagnostic settings association was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new guest diagnostic settings association was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the guest diagnostic settings association could not be created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GuestDiagnosticSettingsAssociationResource> guestDiagnosticsSettingsAssociationCreateOrUpdateWithHttpInfo(String resourceUri, String associationName, String apiVersion, GuestDiagnosticSettingsAssociationResource diagnosticSettingsAssociation) throws ApiException {
        okhttp3.Call localVarCall = guestDiagnosticsSettingsAssociationCreateOrUpdateValidateBeforeCall(resourceUri, associationName, apiVersion, diagnosticSettingsAssociation, null);
        Type localVarReturnType = new TypeToken<GuestDiagnosticSettingsAssociationResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates guest diagnostics settings association.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. (required)
     * @param associationName The name of the diagnostic settings association. (required)
     * @param apiVersion Client Api Version. (required)
     * @param diagnosticSettingsAssociation The diagnostic settings association to create or update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing guest diagnostic settings association was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new guest diagnostic settings association was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the guest diagnostic settings association could not be created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestDiagnosticsSettingsAssociationCreateOrUpdateAsync(String resourceUri, String associationName, String apiVersion, GuestDiagnosticSettingsAssociationResource diagnosticSettingsAssociation, final ApiCallback<GuestDiagnosticSettingsAssociationResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = guestDiagnosticsSettingsAssociationCreateOrUpdateValidateBeforeCall(resourceUri, associationName, apiVersion, diagnosticSettingsAssociation, _callback);
        Type localVarReturnType = new TypeToken<GuestDiagnosticSettingsAssociationResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for guestDiagnosticsSettingsAssociationDelete
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. (required)
     * @param associationName The name of the diagnostic settings association. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The diagnostic settings association was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The diagnostic settings association does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the diagnostic settings association could not be deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestDiagnosticsSettingsAssociationDeleteCall(String resourceUri, String associationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceUri}/providers/microsoft.insights/guestDiagnosticSettingsAssociation/{associationName}"
            .replace("{" + "resourceUri" + "}", localVarApiClient.escapeString(resourceUri.toString()))
            .replace("{" + "associationName" + "}", localVarApiClient.escapeString(associationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call guestDiagnosticsSettingsAssociationDeleteValidateBeforeCall(String resourceUri, String associationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceUri' is set
        if (resourceUri == null) {
            throw new ApiException("Missing the required parameter 'resourceUri' when calling guestDiagnosticsSettingsAssociationDelete(Async)");
        }

        // verify the required parameter 'associationName' is set
        if (associationName == null) {
            throw new ApiException("Missing the required parameter 'associationName' when calling guestDiagnosticsSettingsAssociationDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling guestDiagnosticsSettingsAssociationDelete(Async)");
        }

        return guestDiagnosticsSettingsAssociationDeleteCall(resourceUri, associationName, apiVersion, _callback);

    }

    /**
     * 
     * Delete guest diagnostics association settings.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. (required)
     * @param associationName The name of the diagnostic settings association. (required)
     * @param apiVersion Client Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The diagnostic settings association was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The diagnostic settings association does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the diagnostic settings association could not be deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void guestDiagnosticsSettingsAssociationDelete(String resourceUri, String associationName, String apiVersion) throws ApiException {
        guestDiagnosticsSettingsAssociationDeleteWithHttpInfo(resourceUri, associationName, apiVersion);
    }

    /**
     * 
     * Delete guest diagnostics association settings.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. (required)
     * @param associationName The name of the diagnostic settings association. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The diagnostic settings association was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The diagnostic settings association does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the diagnostic settings association could not be deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> guestDiagnosticsSettingsAssociationDeleteWithHttpInfo(String resourceUri, String associationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = guestDiagnosticsSettingsAssociationDeleteValidateBeforeCall(resourceUri, associationName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete guest diagnostics association settings.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. (required)
     * @param associationName The name of the diagnostic settings association. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The diagnostic settings association was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The diagnostic settings association does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the diagnostic settings association could not be deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestDiagnosticsSettingsAssociationDeleteAsync(String resourceUri, String associationName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = guestDiagnosticsSettingsAssociationDeleteValidateBeforeCall(resourceUri, associationName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for guestDiagnosticsSettingsAssociationGet
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. (required)
     * @param associationName The name of the diagnostic settings association. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the diagnostic settings association could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestDiagnosticsSettingsAssociationGetCall(String resourceUri, String associationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceUri}/providers/microsoft.insights/guestDiagnosticSettingsAssociation/{associationName}"
            .replace("{" + "resourceUri" + "}", localVarApiClient.escapeString(resourceUri.toString()))
            .replace("{" + "associationName" + "}", localVarApiClient.escapeString(associationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call guestDiagnosticsSettingsAssociationGetValidateBeforeCall(String resourceUri, String associationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceUri' is set
        if (resourceUri == null) {
            throw new ApiException("Missing the required parameter 'resourceUri' when calling guestDiagnosticsSettingsAssociationGet(Async)");
        }

        // verify the required parameter 'associationName' is set
        if (associationName == null) {
            throw new ApiException("Missing the required parameter 'associationName' when calling guestDiagnosticsSettingsAssociationGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling guestDiagnosticsSettingsAssociationGet(Async)");
        }

        return guestDiagnosticsSettingsAssociationGetCall(resourceUri, associationName, apiVersion, _callback);

    }

    /**
     * 
     * Gets guest diagnostics association settings.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. (required)
     * @param associationName The name of the diagnostic settings association. (required)
     * @param apiVersion Client Api Version. (required)
     * @return GuestDiagnosticSettingsAssociationResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the diagnostic settings association could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public GuestDiagnosticSettingsAssociationResource guestDiagnosticsSettingsAssociationGet(String resourceUri, String associationName, String apiVersion) throws ApiException {
        ApiResponse<GuestDiagnosticSettingsAssociationResource> localVarResp = guestDiagnosticsSettingsAssociationGetWithHttpInfo(resourceUri, associationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets guest diagnostics association settings.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. (required)
     * @param associationName The name of the diagnostic settings association. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;GuestDiagnosticSettingsAssociationResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the diagnostic settings association could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GuestDiagnosticSettingsAssociationResource> guestDiagnosticsSettingsAssociationGetWithHttpInfo(String resourceUri, String associationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = guestDiagnosticsSettingsAssociationGetValidateBeforeCall(resourceUri, associationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<GuestDiagnosticSettingsAssociationResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets guest diagnostics association settings.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type. (required)
     * @param associationName The name of the diagnostic settings association. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the diagnostic settings association could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestDiagnosticsSettingsAssociationGetAsync(String resourceUri, String associationName, String apiVersion, final ApiCallback<GuestDiagnosticSettingsAssociationResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = guestDiagnosticsSettingsAssociationGetValidateBeforeCall(resourceUri, associationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GuestDiagnosticSettingsAssociationResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
