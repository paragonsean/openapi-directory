/**
 * Guest Diagnostic Settings Association
 * API to Add/Remove/List Guest Diagnostics Settings Association for Azure Resources
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIGuestDiagnosticSettingsAssociationList.h"
#include "OAIGuestDiagnosticSettingsAssociationResource.h"
#include "OAIGuestDiagnosticSettingsAssociationResourcePatch.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void guestDiagnosticsSettingsAssociationList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void guestDiagnosticsSettingsAssociationListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_uri QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  association_name QString [required]
    * @param[in]  parameters OAIGuestDiagnosticSettingsAssociationResourcePatch [required]
    */
    virtual void guestDiagnosticsSettingsAssociationUpdate(const QString &resource_uri, const QString &api_version, const QString &association_name, const OAIGuestDiagnosticSettingsAssociationResourcePatch &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void guestDiagnosticsSettingsAssociationListCallback(OAIHttpRequestWorker *worker);
    void guestDiagnosticsSettingsAssociationListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void guestDiagnosticsSettingsAssociationUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void guestDiagnosticsSettingsAssociationListSignal(OAIGuestDiagnosticSettingsAssociationList summary);
    void guestDiagnosticsSettingsAssociationListByResourceGroupSignal(OAIGuestDiagnosticSettingsAssociationList summary);
    void guestDiagnosticsSettingsAssociationUpdateSignal(OAIGuestDiagnosticSettingsAssociationResource summary);


    void guestDiagnosticsSettingsAssociationListSignalFull(OAIHttpRequestWorker *worker, OAIGuestDiagnosticSettingsAssociationList summary);
    void guestDiagnosticsSettingsAssociationListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIGuestDiagnosticSettingsAssociationList summary);
    void guestDiagnosticsSettingsAssociationUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGuestDiagnosticSettingsAssociationResource summary);

    Q_DECL_DEPRECATED_X("Use guestDiagnosticsSettingsAssociationListSignalError() instead")
    void guestDiagnosticsSettingsAssociationListSignalE(OAIGuestDiagnosticSettingsAssociationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void guestDiagnosticsSettingsAssociationListSignalError(OAIGuestDiagnosticSettingsAssociationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use guestDiagnosticsSettingsAssociationListByResourceGroupSignalError() instead")
    void guestDiagnosticsSettingsAssociationListByResourceGroupSignalE(OAIGuestDiagnosticSettingsAssociationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void guestDiagnosticsSettingsAssociationListByResourceGroupSignalError(OAIGuestDiagnosticSettingsAssociationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use guestDiagnosticsSettingsAssociationUpdateSignalError() instead")
    void guestDiagnosticsSettingsAssociationUpdateSignalE(OAIGuestDiagnosticSettingsAssociationResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void guestDiagnosticsSettingsAssociationUpdateSignalError(OAIGuestDiagnosticSettingsAssociationResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use guestDiagnosticsSettingsAssociationListSignalErrorFull() instead")
    void guestDiagnosticsSettingsAssociationListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void guestDiagnosticsSettingsAssociationListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use guestDiagnosticsSettingsAssociationListByResourceGroupSignalErrorFull() instead")
    void guestDiagnosticsSettingsAssociationListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void guestDiagnosticsSettingsAssociationListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use guestDiagnosticsSettingsAssociationUpdateSignalErrorFull() instead")
    void guestDiagnosticsSettingsAssociationUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void guestDiagnosticsSettingsAssociationUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
