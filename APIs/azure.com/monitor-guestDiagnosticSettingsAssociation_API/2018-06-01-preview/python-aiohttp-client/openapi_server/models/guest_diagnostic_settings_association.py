# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GuestDiagnosticSettingsAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, guest_diagnostic_settings_name: str=None):
        """GuestDiagnosticSettingsAssociation - a model defined in OpenAPI

        :param guest_diagnostic_settings_name: The guest_diagnostic_settings_name of this GuestDiagnosticSettingsAssociation.
        """
        self.openapi_types = {
            'guest_diagnostic_settings_name': str
        }

        self.attribute_map = {
            'guest_diagnostic_settings_name': 'guestDiagnosticSettingsName'
        }

        self._guest_diagnostic_settings_name = guest_diagnostic_settings_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GuestDiagnosticSettingsAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GuestDiagnosticSettingsAssociation of this GuestDiagnosticSettingsAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guest_diagnostic_settings_name(self):
        """Gets the guest_diagnostic_settings_name of this GuestDiagnosticSettingsAssociation.

        The guest diagnostic settings name.

        :return: The guest_diagnostic_settings_name of this GuestDiagnosticSettingsAssociation.
        :rtype: str
        """
        return self._guest_diagnostic_settings_name

    @guest_diagnostic_settings_name.setter
    def guest_diagnostic_settings_name(self, guest_diagnostic_settings_name):
        """Sets the guest_diagnostic_settings_name of this GuestDiagnosticSettingsAssociation.

        The guest diagnostic settings name.

        :param guest_diagnostic_settings_name: The guest_diagnostic_settings_name of this GuestDiagnosticSettingsAssociation.
        :type guest_diagnostic_settings_name: str
        """
        if guest_diagnostic_settings_name is None:
            raise ValueError("Invalid value for `guest_diagnostic_settings_name`, must not be `None`")

        self._guest_diagnostic_settings_name = guest_diagnostic_settings_name
