/**
 * AzureDigitalTwinsManagementClient
 * Azure Digital Twins Client for managing DigitalTwinsInstance
 *
 * The version of the OpenAPI document: 2020-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckNameRequest from '../model/CheckNameRequest';
import CheckNameResult from '../model/CheckNameResult';
import ErrorResponse from '../model/ErrorResponse';

/**
* CheckNameAvailability service.
* @module api/CheckNameAvailabilityApi
* @version 2020-03-01-preview
*/
export default class CheckNameAvailabilityApi {

    /**
    * Constructs a new CheckNameAvailabilityApi. 
    * @alias module:api/CheckNameAvailabilityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the digitalTwinsCheckNameAvailability operation.
     * @callback module:api/CheckNameAvailabilityApi~digitalTwinsCheckNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckNameResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a DigitalTwinsInstance name is available.
     * @param {module:model/String} apiVersion Version of the DigitalTwinsInstance Management API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} location Location of DigitalTwinsInstance.
     * @param {module:model/CheckNameRequest} digitalTwinsInstanceCheckName Set the name parameter in the DigitalTwinsInstanceCheckName structure to the name of the DigitalTwinsInstance to check.
     * @param {module:api/CheckNameAvailabilityApi~digitalTwinsCheckNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckNameResult}
     */
    digitalTwinsCheckNameAvailability(apiVersion, subscriptionId, location, digitalTwinsInstanceCheckName, callback) {
      let postBody = digitalTwinsInstanceCheckName;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling digitalTwinsCheckNameAvailability");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling digitalTwinsCheckNameAvailability");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling digitalTwinsCheckNameAvailability");
      }
      // verify the required parameter 'digitalTwinsInstanceCheckName' is set
      if (digitalTwinsInstanceCheckName === undefined || digitalTwinsInstanceCheckName === null) {
        throw new Error("Missing the required parameter 'digitalTwinsInstanceCheckName' when calling digitalTwinsCheckNameAvailability");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckNameResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DigitalTwins/locations/{location}/checkNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
