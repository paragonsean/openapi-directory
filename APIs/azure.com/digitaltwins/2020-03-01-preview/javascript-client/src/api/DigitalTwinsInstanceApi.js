/**
 * AzureDigitalTwinsManagementClient
 * Azure Digital Twins Client for managing DigitalTwinsInstance
 *
 * The version of the OpenAPI document: 2020-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DigitalTwinsDescription from '../model/DigitalTwinsDescription';
import DigitalTwinsDescriptionListResult from '../model/DigitalTwinsDescriptionListResult';
import DigitalTwinsPatchDescription from '../model/DigitalTwinsPatchDescription';
import ErrorResponse from '../model/ErrorResponse';

/**
* DigitalTwinsInstance service.
* @module api/DigitalTwinsInstanceApi
* @version 2020-03-01-preview
*/
export default class DigitalTwinsInstanceApi {

    /**
    * Constructs a new DigitalTwinsInstanceApi. 
    * @alias module:api/DigitalTwinsInstanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the digitalTwinsCreateOrUpdate operation.
     * @callback module:api/DigitalTwinsInstanceApi~digitalTwinsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DigitalTwinsDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property is to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the modified values in a new body to update the DigitalTwinsInstance.
     * @param {module:model/String} apiVersion Version of the DigitalTwinsInstance Management API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param {String} resourceName The name of the DigitalTwinsInstance.
     * @param {module:model/DigitalTwinsDescription} digitalTwinsCreate The DigitalTwinsInstance and security metadata.
     * @param {module:api/DigitalTwinsInstanceApi~digitalTwinsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DigitalTwinsDescription}
     */
    digitalTwinsCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, resourceName, digitalTwinsCreate, callback) {
      let postBody = digitalTwinsCreate;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling digitalTwinsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling digitalTwinsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling digitalTwinsCreateOrUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling digitalTwinsCreateOrUpdate");
      }
      // verify the required parameter 'digitalTwinsCreate' is set
      if (digitalTwinsCreate === undefined || digitalTwinsCreate === null) {
        throw new Error("Missing the required parameter 'digitalTwinsCreate' when calling digitalTwinsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DigitalTwinsDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the digitalTwinsDelete operation.
     * @callback module:api/DigitalTwinsInstanceApi~digitalTwinsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a DigitalTwinsInstance.
     * @param {module:model/String} apiVersion Version of the DigitalTwinsInstance Management API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param {String} resourceName The name of the DigitalTwinsInstance.
     * @param {module:api/DigitalTwinsInstanceApi~digitalTwinsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    digitalTwinsDelete(apiVersion, subscriptionId, resourceGroupName, resourceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling digitalTwinsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling digitalTwinsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling digitalTwinsDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling digitalTwinsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the digitalTwinsGet operation.
     * @callback module:api/DigitalTwinsInstanceApi~digitalTwinsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DigitalTwinsDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get DigitalTwinsInstances resource.
     * @param {module:model/String} apiVersion Version of the DigitalTwinsInstance Management API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param {String} resourceName The name of the DigitalTwinsInstance.
     * @param {module:api/DigitalTwinsInstanceApi~digitalTwinsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DigitalTwinsDescription}
     */
    digitalTwinsGet(apiVersion, subscriptionId, resourceGroupName, resourceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling digitalTwinsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling digitalTwinsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling digitalTwinsGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling digitalTwinsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DigitalTwinsDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the digitalTwinsList operation.
     * @callback module:api/DigitalTwinsInstanceApi~digitalTwinsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DigitalTwinsDescriptionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the DigitalTwinsInstances in a subscription.
     * @param {module:model/String} apiVersion Version of the DigitalTwinsInstance Management API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {module:api/DigitalTwinsInstanceApi~digitalTwinsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DigitalTwinsDescriptionListResult}
     */
    digitalTwinsList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling digitalTwinsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling digitalTwinsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DigitalTwinsDescriptionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DigitalTwins/digitalTwinsInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the digitalTwinsListByResourceGroup operation.
     * @callback module:api/DigitalTwinsInstanceApi~digitalTwinsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DigitalTwinsDescriptionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the DigitalTwinsInstances in a resource group.
     * @param {module:model/String} apiVersion Version of the DigitalTwinsInstance Management API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param {module:api/DigitalTwinsInstanceApi~digitalTwinsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DigitalTwinsDescriptionListResult}
     */
    digitalTwinsListByResourceGroup(apiVersion, subscriptionId, resourceGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling digitalTwinsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling digitalTwinsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling digitalTwinsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DigitalTwinsDescriptionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the digitalTwinsUpdate operation.
     * @callback module:api/DigitalTwinsInstanceApi~digitalTwinsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DigitalTwinsDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update metadata of DigitalTwinsInstance.
     * @param {module:model/String} apiVersion Version of the DigitalTwinsInstance Management API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param {String} resourceName The name of the DigitalTwinsInstance.
     * @param {module:model/DigitalTwinsPatchDescription} digitalTwinsPatchDescription The DigitalTwinsInstance and security metadata.
     * @param {module:api/DigitalTwinsInstanceApi~digitalTwinsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DigitalTwinsDescription}
     */
    digitalTwinsUpdate(apiVersion, subscriptionId, resourceGroupName, resourceName, digitalTwinsPatchDescription, callback) {
      let postBody = digitalTwinsPatchDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling digitalTwinsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling digitalTwinsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling digitalTwinsUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling digitalTwinsUpdate");
      }
      // verify the required parameter 'digitalTwinsPatchDescription' is set
      if (digitalTwinsPatchDescription === undefined || digitalTwinsPatchDescription === null) {
        throw new Error("Missing the required parameter 'digitalTwinsPatchDescription' when calling digitalTwinsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DigitalTwinsDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
