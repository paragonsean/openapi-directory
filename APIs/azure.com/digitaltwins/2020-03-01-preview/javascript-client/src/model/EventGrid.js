/**
 * AzureDigitalTwinsManagementClient
 * Azure Digital Twins Client for managing DigitalTwinsInstance
 *
 * The version of the OpenAPI document: 2020-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DigitalTwinsEndpointResourceProperties from './DigitalTwinsEndpointResourceProperties';

/**
 * The EventGrid model module.
 * @module model/EventGrid
 * @version 2020-03-01-preview
 */
class EventGrid {
    /**
     * Constructs a new <code>EventGrid</code>.
     * properties related to eventgrid.
     * @alias module:model/EventGrid
     * @extends module:model/DigitalTwinsEndpointResourceProperties
     * @implements module:model/DigitalTwinsEndpointResourceProperties
     * @param endpointType {module:model/EventGrid.EndpointTypeEnum} The type of Digital Twins endpoint
     */
    constructor(endpointType) { 
        DigitalTwinsEndpointResourceProperties.initialize(this, endpointType);
        EventGrid.initialize(this, endpointType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, endpointType) { 
    }

    /**
     * Constructs a <code>EventGrid</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventGrid} obj Optional instance to populate.
     * @return {module:model/EventGrid} The populated <code>EventGrid</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventGrid();
            DigitalTwinsEndpointResourceProperties.constructFromObject(data, obj);
            DigitalTwinsEndpointResourceProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('TopicEndpoint')) {
                obj['TopicEndpoint'] = ApiClient.convertToType(data['TopicEndpoint'], 'String');
            }
            if (data.hasOwnProperty('accessKey1')) {
                obj['accessKey1'] = ApiClient.convertToType(data['accessKey1'], 'String');
            }
            if (data.hasOwnProperty('accessKey2')) {
                obj['accessKey2'] = ApiClient.convertToType(data['accessKey2'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventGrid</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventGrid</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventGrid.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['TopicEndpoint'] && !(typeof data['TopicEndpoint'] === 'string' || data['TopicEndpoint'] instanceof String)) {
            throw new Error("Expected the field `TopicEndpoint` to be a primitive type in the JSON string but got " + data['TopicEndpoint']);
        }
        // ensure the json data is a string
        if (data['accessKey1'] && !(typeof data['accessKey1'] === 'string' || data['accessKey1'] instanceof String)) {
            throw new Error("Expected the field `accessKey1` to be a primitive type in the JSON string but got " + data['accessKey1']);
        }
        // ensure the json data is a string
        if (data['accessKey2'] && !(typeof data['accessKey2'] === 'string' || data['accessKey2'] instanceof String)) {
            throw new Error("Expected the field `accessKey2` to be a primitive type in the JSON string but got " + data['accessKey2']);
        }

        return true;
    }


}

EventGrid.RequiredProperties = ["endpointType"];

/**
 * EventGrid Topic Endpoint
 * @member {String} TopicEndpoint
 */
EventGrid.prototype['TopicEndpoint'] = undefined;

/**
 * EventGrid secondary accesskey. Will be obfuscated during read
 * @member {String} accessKey1
 */
EventGrid.prototype['accessKey1'] = undefined;

/**
 * EventGrid secondary accesskey. Will be obfuscated during read
 * @member {String} accessKey2
 */
EventGrid.prototype['accessKey2'] = undefined;


// Implement DigitalTwinsEndpointResourceProperties interface:
/**
 * Time when the Endpoint was added to DigitalTwinsInstance.
 * @member {Date} createdTime
 */
DigitalTwinsEndpointResourceProperties.prototype['createdTime'] = undefined;
/**
 * The type of Digital Twins endpoint
 * @member {module:model/DigitalTwinsEndpointResourceProperties.EndpointTypeEnum} endpointType
 */
DigitalTwinsEndpointResourceProperties.prototype['endpointType'] = undefined;
/**
 * The provisioning state.
 * @member {module:model/DigitalTwinsEndpointResourceProperties.ProvisioningStateEnum} provisioningState
 */
DigitalTwinsEndpointResourceProperties.prototype['provisioningState'] = undefined;
/**
 * The resource tags.
 * @member {Object.<String, String>} tags
 */
DigitalTwinsEndpointResourceProperties.prototype['tags'] = undefined;




export default EventGrid;

