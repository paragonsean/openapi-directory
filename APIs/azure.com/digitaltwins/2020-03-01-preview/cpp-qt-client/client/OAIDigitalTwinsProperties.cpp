/**
 * AzureDigitalTwinsManagementClient
 * Azure Digital Twins Client for managing DigitalTwinsInstance
 *
 * The version of the OpenAPI document: 2020-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDigitalTwinsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDigitalTwinsProperties::OAIDigitalTwinsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDigitalTwinsProperties::OAIDigitalTwinsProperties() {
    this->initializeModel();
}

OAIDigitalTwinsProperties::~OAIDigitalTwinsProperties() {}

void OAIDigitalTwinsProperties::initializeModel() {

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIDigitalTwinsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDigitalTwinsProperties::fromJsonObject(QJsonObject json) {

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIDigitalTwinsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDigitalTwinsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QDateTime OAIDigitalTwinsProperties::getCreatedTime() const {
    return m_created_time;
}
void OAIDigitalTwinsProperties::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDigitalTwinsProperties::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDigitalTwinsProperties::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIDigitalTwinsProperties::getHostName() const {
    return m_host_name;
}
void OAIDigitalTwinsProperties::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIDigitalTwinsProperties::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIDigitalTwinsProperties::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QDateTime OAIDigitalTwinsProperties::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDigitalTwinsProperties::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDigitalTwinsProperties::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDigitalTwinsProperties::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIDigitalTwinsProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDigitalTwinsProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDigitalTwinsProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDigitalTwinsProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIDigitalTwinsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDigitalTwinsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
