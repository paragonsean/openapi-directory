/**
 * AzureDigitalTwinsManagementClient
 * Azure Digital Twins Client for managing DigitalTwinsInstance
 *
 * The version of the OpenAPI document: 2020-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEventHub.h
 *
 * properties related to eventhub.
 */

#ifndef OAIEventHub_H
#define OAIEventHub_H

#include <QJsonObject>

#include "OAIDigitalTwinsEndpointResourceProperties.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEventHub : public OAIObject {
public:
    OAIEventHub();
    OAIEventHub(QString json);
    ~OAIEventHub() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    QString getEndpointType() const;
    void setEndpointType(const QString &endpoint_type);
    bool is_endpoint_type_Set() const;
    bool is_endpoint_type_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getConnectionStringPrimaryKey() const;
    void setConnectionStringPrimaryKey(const QString &connection_string_primary_key);
    bool is_connection_string_primary_key_Set() const;
    bool is_connection_string_primary_key_Valid() const;

    QString getConnectionStringSecondaryKey() const;
    void setConnectionStringSecondaryKey(const QString &connection_string_secondary_key);
    bool is_connection_string_secondary_key_Set() const;
    bool is_connection_string_secondary_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    QString m_endpoint_type;
    bool m_endpoint_type_isSet;
    bool m_endpoint_type_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_connection_string_primary_key;
    bool m_connection_string_primary_key_isSet;
    bool m_connection_string_primary_key_isValid;

    QString m_connection_string_secondary_key;
    bool m_connection_string_secondary_key_isSet;
    bool m_connection_string_secondary_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEventHub)

#endif // OAIEventHub_H
