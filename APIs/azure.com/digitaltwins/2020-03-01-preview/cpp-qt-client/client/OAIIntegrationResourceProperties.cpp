/**
 * AzureDigitalTwinsManagementClient
 * Azure Digital Twins Client for managing DigitalTwinsInstance
 *
 * The version of the OpenAPI document: 2020-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationResourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationResourceProperties::OAIIntegrationResourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationResourceProperties::OAIIntegrationResourceProperties() {
    this->initializeModel();
}

OAIIntegrationResourceProperties::~OAIIntegrationResourceProperties() {}

void OAIIntegrationResourceProperties::initializeModel() {

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIIntegrationResourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegrationResourceProperties::fromJsonObject(QJsonObject json) {

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIIntegrationResourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegrationResourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QDateTime OAIIntegrationResourceProperties::getCreatedTime() const {
    return m_created_time;
}
void OAIIntegrationResourceProperties::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIIntegrationResourceProperties::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIIntegrationResourceProperties::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIIntegrationResourceProperties::getResourceId() const {
    return m_resource_id;
}
void OAIIntegrationResourceProperties::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIIntegrationResourceProperties::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIIntegrationResourceProperties::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIIntegrationResourceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIIntegrationResourceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIIntegrationResourceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIIntegrationResourceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIIntegrationResourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegrationResourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
