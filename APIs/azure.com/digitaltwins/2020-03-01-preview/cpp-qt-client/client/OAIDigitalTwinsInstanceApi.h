/**
 * AzureDigitalTwinsManagementClient
 * Azure Digital Twins Client for managing DigitalTwinsInstance
 *
 * The version of the OpenAPI document: 2020-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDigitalTwinsInstanceApi_H
#define OAI_OAIDigitalTwinsInstanceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDigitalTwinsDescription.h"
#include "OAIDigitalTwinsDescriptionListResult.h"
#include "OAIDigitalTwinsPatchDescription.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDigitalTwinsInstanceApi : public QObject {
    Q_OBJECT

public:
    OAIDigitalTwinsInstanceApi(const int timeOut = 0);
    ~OAIDigitalTwinsInstanceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  digital_twins_create OAIDigitalTwinsDescription [required]
    */
    virtual void digitalTwinsCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const OAIDigitalTwinsDescription &digital_twins_create);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void digitalTwinsDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void digitalTwinsGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void digitalTwinsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void digitalTwinsListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  digital_twins_patch_description OAIDigitalTwinsPatchDescription [required]
    */
    virtual void digitalTwinsUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const OAIDigitalTwinsPatchDescription &digital_twins_patch_description);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void digitalTwinsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void digitalTwinsDeleteCallback(OAIHttpRequestWorker *worker);
    void digitalTwinsGetCallback(OAIHttpRequestWorker *worker);
    void digitalTwinsListCallback(OAIHttpRequestWorker *worker);
    void digitalTwinsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void digitalTwinsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void digitalTwinsCreateOrUpdateSignal(OAIDigitalTwinsDescription summary);
    void digitalTwinsDeleteSignal();
    void digitalTwinsGetSignal(OAIDigitalTwinsDescription summary);
    void digitalTwinsListSignal(OAIDigitalTwinsDescriptionListResult summary);
    void digitalTwinsListByResourceGroupSignal(OAIDigitalTwinsDescriptionListResult summary);
    void digitalTwinsUpdateSignal(OAIDigitalTwinsDescription summary);


    void digitalTwinsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDigitalTwinsDescription summary);
    void digitalTwinsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void digitalTwinsGetSignalFull(OAIHttpRequestWorker *worker, OAIDigitalTwinsDescription summary);
    void digitalTwinsListSignalFull(OAIHttpRequestWorker *worker, OAIDigitalTwinsDescriptionListResult summary);
    void digitalTwinsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDigitalTwinsDescriptionListResult summary);
    void digitalTwinsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDigitalTwinsDescription summary);

    Q_DECL_DEPRECATED_X("Use digitalTwinsCreateOrUpdateSignalError() instead")
    void digitalTwinsCreateOrUpdateSignalE(OAIDigitalTwinsDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void digitalTwinsCreateOrUpdateSignalError(OAIDigitalTwinsDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digitalTwinsDeleteSignalError() instead")
    void digitalTwinsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void digitalTwinsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digitalTwinsGetSignalError() instead")
    void digitalTwinsGetSignalE(OAIDigitalTwinsDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void digitalTwinsGetSignalError(OAIDigitalTwinsDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digitalTwinsListSignalError() instead")
    void digitalTwinsListSignalE(OAIDigitalTwinsDescriptionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void digitalTwinsListSignalError(OAIDigitalTwinsDescriptionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digitalTwinsListByResourceGroupSignalError() instead")
    void digitalTwinsListByResourceGroupSignalE(OAIDigitalTwinsDescriptionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void digitalTwinsListByResourceGroupSignalError(OAIDigitalTwinsDescriptionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digitalTwinsUpdateSignalError() instead")
    void digitalTwinsUpdateSignalE(OAIDigitalTwinsDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void digitalTwinsUpdateSignalError(OAIDigitalTwinsDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use digitalTwinsCreateOrUpdateSignalErrorFull() instead")
    void digitalTwinsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void digitalTwinsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digitalTwinsDeleteSignalErrorFull() instead")
    void digitalTwinsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void digitalTwinsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digitalTwinsGetSignalErrorFull() instead")
    void digitalTwinsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void digitalTwinsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digitalTwinsListSignalErrorFull() instead")
    void digitalTwinsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void digitalTwinsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digitalTwinsListByResourceGroupSignalErrorFull() instead")
    void digitalTwinsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void digitalTwinsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digitalTwinsUpdateSignalErrorFull() instead")
    void digitalTwinsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void digitalTwinsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
