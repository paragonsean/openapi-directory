/**
 * AzureDigitalTwinsManagementClient
 * Azure Digital Twins Client for managing DigitalTwinsInstance
 *
 * The version of the OpenAPI document: 2020-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDigitalTwinsEndpointResourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDigitalTwinsEndpointResourceProperties::OAIDigitalTwinsEndpointResourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDigitalTwinsEndpointResourceProperties::OAIDigitalTwinsEndpointResourceProperties() {
    this->initializeModel();
}

OAIDigitalTwinsEndpointResourceProperties::~OAIDigitalTwinsEndpointResourceProperties() {}

void OAIDigitalTwinsEndpointResourceProperties::initializeModel() {

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDigitalTwinsEndpointResourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDigitalTwinsEndpointResourceProperties::fromJsonObject(QJsonObject json) {

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("endpointType")]);
    m_endpoint_type_isSet = !json[QString("endpointType")].isNull() && m_endpoint_type_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIDigitalTwinsEndpointResourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDigitalTwinsEndpointResourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_endpoint_type_isSet) {
        obj.insert(QString("endpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QDateTime OAIDigitalTwinsEndpointResourceProperties::getCreatedTime() const {
    return m_created_time;
}
void OAIDigitalTwinsEndpointResourceProperties::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDigitalTwinsEndpointResourceProperties::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDigitalTwinsEndpointResourceProperties::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIDigitalTwinsEndpointResourceProperties::getEndpointType() const {
    return m_endpoint_type;
}
void OAIDigitalTwinsEndpointResourceProperties::setEndpointType(const QString &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAIDigitalTwinsEndpointResourceProperties::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAIDigitalTwinsEndpointResourceProperties::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

QString OAIDigitalTwinsEndpointResourceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDigitalTwinsEndpointResourceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDigitalTwinsEndpointResourceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDigitalTwinsEndpointResourceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QMap<QString, QString> OAIDigitalTwinsEndpointResourceProperties::getTags() const {
    return m_tags;
}
void OAIDigitalTwinsEndpointResourceProperties::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDigitalTwinsEndpointResourceProperties::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDigitalTwinsEndpointResourceProperties::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDigitalTwinsEndpointResourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDigitalTwinsEndpointResourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_type_isValid && true;
}

} // namespace OpenAPI
