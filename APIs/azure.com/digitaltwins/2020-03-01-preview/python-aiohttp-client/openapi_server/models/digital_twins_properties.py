# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DigitalTwinsProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: datetime=None, host_name: str=None, last_updated_time: datetime=None, provisioning_state: str=None):
        """DigitalTwinsProperties - a model defined in OpenAPI

        :param created_time: The created_time of this DigitalTwinsProperties.
        :param host_name: The host_name of this DigitalTwinsProperties.
        :param last_updated_time: The last_updated_time of this DigitalTwinsProperties.
        :param provisioning_state: The provisioning_state of this DigitalTwinsProperties.
        """
        self.openapi_types = {
            'created_time': datetime,
            'host_name': str,
            'last_updated_time': datetime,
            'provisioning_state': str
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'host_name': 'hostName',
            'last_updated_time': 'lastUpdatedTime',
            'provisioning_state': 'provisioningState'
        }

        self._created_time = created_time
        self._host_name = host_name
        self._last_updated_time = last_updated_time
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DigitalTwinsProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DigitalTwinsProperties of this DigitalTwinsProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this DigitalTwinsProperties.

        Time when DigitalTwinsInstance was created.

        :return: The created_time of this DigitalTwinsProperties.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this DigitalTwinsProperties.

        Time when DigitalTwinsInstance was created.

        :param created_time: The created_time of this DigitalTwinsProperties.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def host_name(self):
        """Gets the host_name of this DigitalTwinsProperties.

        Api endpoint to work with DigitalTwinsInstance.

        :return: The host_name of this DigitalTwinsProperties.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this DigitalTwinsProperties.

        Api endpoint to work with DigitalTwinsInstance.

        :param host_name: The host_name of this DigitalTwinsProperties.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this DigitalTwinsProperties.

        Time when DigitalTwinsInstance was created.

        :return: The last_updated_time of this DigitalTwinsProperties.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this DigitalTwinsProperties.

        Time when DigitalTwinsInstance was created.

        :param last_updated_time: The last_updated_time of this DigitalTwinsProperties.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DigitalTwinsProperties.

        The provisioning state.

        :return: The provisioning_state of this DigitalTwinsProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DigitalTwinsProperties.

        The provisioning state.

        :param provisioning_state: The provisioning_state of this DigitalTwinsProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Provisioning", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
