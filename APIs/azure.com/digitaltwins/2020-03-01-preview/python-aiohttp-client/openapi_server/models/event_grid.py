# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.digital_twins_endpoint_resource_properties import DigitalTwinsEndpointResourceProperties
from openapi_server import util


class EventGrid(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: datetime=None, endpoint_type: str=None, provisioning_state: str=None, tags: Dict[str, str]=None, topic_endpoint: str=None, access_key1: str=None, access_key2: str=None):
        """EventGrid - a model defined in OpenAPI

        :param created_time: The created_time of this EventGrid.
        :param endpoint_type: The endpoint_type of this EventGrid.
        :param provisioning_state: The provisioning_state of this EventGrid.
        :param tags: The tags of this EventGrid.
        :param topic_endpoint: The topic_endpoint of this EventGrid.
        :param access_key1: The access_key1 of this EventGrid.
        :param access_key2: The access_key2 of this EventGrid.
        """
        self.openapi_types = {
            'created_time': datetime,
            'endpoint_type': str,
            'provisioning_state': str,
            'tags': Dict[str, str],
            'topic_endpoint': str,
            'access_key1': str,
            'access_key2': str
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'endpoint_type': 'endpointType',
            'provisioning_state': 'provisioningState',
            'tags': 'tags',
            'topic_endpoint': 'TopicEndpoint',
            'access_key1': 'accessKey1',
            'access_key2': 'accessKey2'
        }

        self._created_time = created_time
        self._endpoint_type = endpoint_type
        self._provisioning_state = provisioning_state
        self._tags = tags
        self._topic_endpoint = topic_endpoint
        self._access_key1 = access_key1
        self._access_key2 = access_key2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventGrid':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventGrid of this EventGrid.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this EventGrid.

        Time when the Endpoint was added to DigitalTwinsInstance.

        :return: The created_time of this EventGrid.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this EventGrid.

        Time when the Endpoint was added to DigitalTwinsInstance.

        :param created_time: The created_time of this EventGrid.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def endpoint_type(self):
        """Gets the endpoint_type of this EventGrid.

        The type of Digital Twins endpoint

        :return: The endpoint_type of this EventGrid.
        :rtype: str
        """
        return self._endpoint_type

    @endpoint_type.setter
    def endpoint_type(self, endpoint_type):
        """Sets the endpoint_type of this EventGrid.

        The type of Digital Twins endpoint

        :param endpoint_type: The endpoint_type of this EventGrid.
        :type endpoint_type: str
        """
        allowed_values = ["EventHub", "EventGrid", "ServiceBus"]  # noqa: E501
        if endpoint_type not in allowed_values:
            raise ValueError(
                "Invalid value for `endpoint_type` ({0}), must be one of {1}"
                .format(endpoint_type, allowed_values)
            )

        self._endpoint_type = endpoint_type

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this EventGrid.

        The provisioning state.

        :return: The provisioning_state of this EventGrid.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this EventGrid.

        The provisioning state.

        :param provisioning_state: The provisioning_state of this EventGrid.
        :type provisioning_state: str
        """
        allowed_values = ["Provisioning", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def tags(self):
        """Gets the tags of this EventGrid.

        The resource tags.

        :return: The tags of this EventGrid.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EventGrid.

        The resource tags.

        :param tags: The tags of this EventGrid.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def topic_endpoint(self):
        """Gets the topic_endpoint of this EventGrid.

        EventGrid Topic Endpoint

        :return: The topic_endpoint of this EventGrid.
        :rtype: str
        """
        return self._topic_endpoint

    @topic_endpoint.setter
    def topic_endpoint(self, topic_endpoint):
        """Sets the topic_endpoint of this EventGrid.

        EventGrid Topic Endpoint

        :param topic_endpoint: The topic_endpoint of this EventGrid.
        :type topic_endpoint: str
        """

        self._topic_endpoint = topic_endpoint

    @property
    def access_key1(self):
        """Gets the access_key1 of this EventGrid.

        EventGrid secondary accesskey. Will be obfuscated during read

        :return: The access_key1 of this EventGrid.
        :rtype: str
        """
        return self._access_key1

    @access_key1.setter
    def access_key1(self, access_key1):
        """Sets the access_key1 of this EventGrid.

        EventGrid secondary accesskey. Will be obfuscated during read

        :param access_key1: The access_key1 of this EventGrid.
        :type access_key1: str
        """

        self._access_key1 = access_key1

    @property
    def access_key2(self):
        """Gets the access_key2 of this EventGrid.

        EventGrid secondary accesskey. Will be obfuscated during read

        :return: The access_key2 of this EventGrid.
        :rtype: str
        """
        return self._access_key2

    @access_key2.setter
    def access_key2(self, access_key2):
        """Sets the access_key2 of this EventGrid.

        EventGrid secondary accesskey. Will be obfuscated during read

        :param access_key2: The access_key2 of this EventGrid.
        :type access_key2: str
        """

        self._access_key2 = access_key2
