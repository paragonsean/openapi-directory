/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileShareProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileShareProperties::OAIFileShareProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileShareProperties::OAIFileShareProperties() {
    this->initializeModel();
}

OAIFileShareProperties::~OAIFileShareProperties() {}

void OAIFileShareProperties::initializeModel() {

    m_admin_user_isSet = false;
    m_admin_user_isValid = false;

    m_data_policy_isSet = false;
    m_data_policy_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_local_used_capacity_in_bytes_isSet = false;
    m_local_used_capacity_in_bytes_isValid = false;

    m_monitoring_status_isSet = false;
    m_monitoring_status_isValid = false;

    m_provisioned_capacity_in_bytes_isSet = false;
    m_provisioned_capacity_in_bytes_isValid = false;

    m_share_status_isSet = false;
    m_share_status_isValid = false;

    m_used_capacity_in_bytes_isSet = false;
    m_used_capacity_in_bytes_isValid = false;
}

void OAIFileShareProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileShareProperties::fromJsonObject(QJsonObject json) {

    m_admin_user_isValid = ::OpenAPI::fromJsonValue(m_admin_user, json[QString("adminUser")]);
    m_admin_user_isSet = !json[QString("adminUser")].isNull() && m_admin_user_isValid;

    m_data_policy_isValid = ::OpenAPI::fromJsonValue(m_data_policy, json[QString("dataPolicy")]);
    m_data_policy_isSet = !json[QString("dataPolicy")].isNull() && m_data_policy_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_local_used_capacity_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_local_used_capacity_in_bytes, json[QString("localUsedCapacityInBytes")]);
    m_local_used_capacity_in_bytes_isSet = !json[QString("localUsedCapacityInBytes")].isNull() && m_local_used_capacity_in_bytes_isValid;

    m_monitoring_status_isValid = ::OpenAPI::fromJsonValue(m_monitoring_status, json[QString("monitoringStatus")]);
    m_monitoring_status_isSet = !json[QString("monitoringStatus")].isNull() && m_monitoring_status_isValid;

    m_provisioned_capacity_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_provisioned_capacity_in_bytes, json[QString("provisionedCapacityInBytes")]);
    m_provisioned_capacity_in_bytes_isSet = !json[QString("provisionedCapacityInBytes")].isNull() && m_provisioned_capacity_in_bytes_isValid;

    m_share_status_isValid = ::OpenAPI::fromJsonValue(m_share_status, json[QString("shareStatus")]);
    m_share_status_isSet = !json[QString("shareStatus")].isNull() && m_share_status_isValid;

    m_used_capacity_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_used_capacity_in_bytes, json[QString("usedCapacityInBytes")]);
    m_used_capacity_in_bytes_isSet = !json[QString("usedCapacityInBytes")].isNull() && m_used_capacity_in_bytes_isValid;
}

QString OAIFileShareProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileShareProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_user_isSet) {
        obj.insert(QString("adminUser"), ::OpenAPI::toJsonValue(m_admin_user));
    }
    if (m_data_policy_isSet) {
        obj.insert(QString("dataPolicy"), ::OpenAPI::toJsonValue(m_data_policy));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_local_used_capacity_in_bytes_isSet) {
        obj.insert(QString("localUsedCapacityInBytes"), ::OpenAPI::toJsonValue(m_local_used_capacity_in_bytes));
    }
    if (m_monitoring_status_isSet) {
        obj.insert(QString("monitoringStatus"), ::OpenAPI::toJsonValue(m_monitoring_status));
    }
    if (m_provisioned_capacity_in_bytes_isSet) {
        obj.insert(QString("provisionedCapacityInBytes"), ::OpenAPI::toJsonValue(m_provisioned_capacity_in_bytes));
    }
    if (m_share_status_isSet) {
        obj.insert(QString("shareStatus"), ::OpenAPI::toJsonValue(m_share_status));
    }
    if (m_used_capacity_in_bytes_isSet) {
        obj.insert(QString("usedCapacityInBytes"), ::OpenAPI::toJsonValue(m_used_capacity_in_bytes));
    }
    return obj;
}

QString OAIFileShareProperties::getAdminUser() const {
    return m_admin_user;
}
void OAIFileShareProperties::setAdminUser(const QString &admin_user) {
    m_admin_user = admin_user;
    m_admin_user_isSet = true;
}

bool OAIFileShareProperties::is_admin_user_Set() const{
    return m_admin_user_isSet;
}

bool OAIFileShareProperties::is_admin_user_Valid() const{
    return m_admin_user_isValid;
}

QString OAIFileShareProperties::getDataPolicy() const {
    return m_data_policy;
}
void OAIFileShareProperties::setDataPolicy(const QString &data_policy) {
    m_data_policy = data_policy;
    m_data_policy_isSet = true;
}

bool OAIFileShareProperties::is_data_policy_Set() const{
    return m_data_policy_isSet;
}

bool OAIFileShareProperties::is_data_policy_Valid() const{
    return m_data_policy_isValid;
}

QString OAIFileShareProperties::getDescription() const {
    return m_description;
}
void OAIFileShareProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFileShareProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFileShareProperties::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIFileShareProperties::getLocalUsedCapacityInBytes() const {
    return m_local_used_capacity_in_bytes;
}
void OAIFileShareProperties::setLocalUsedCapacityInBytes(const qint64 &local_used_capacity_in_bytes) {
    m_local_used_capacity_in_bytes = local_used_capacity_in_bytes;
    m_local_used_capacity_in_bytes_isSet = true;
}

bool OAIFileShareProperties::is_local_used_capacity_in_bytes_Set() const{
    return m_local_used_capacity_in_bytes_isSet;
}

bool OAIFileShareProperties::is_local_used_capacity_in_bytes_Valid() const{
    return m_local_used_capacity_in_bytes_isValid;
}

QString OAIFileShareProperties::getMonitoringStatus() const {
    return m_monitoring_status;
}
void OAIFileShareProperties::setMonitoringStatus(const QString &monitoring_status) {
    m_monitoring_status = monitoring_status;
    m_monitoring_status_isSet = true;
}

bool OAIFileShareProperties::is_monitoring_status_Set() const{
    return m_monitoring_status_isSet;
}

bool OAIFileShareProperties::is_monitoring_status_Valid() const{
    return m_monitoring_status_isValid;
}

qint64 OAIFileShareProperties::getProvisionedCapacityInBytes() const {
    return m_provisioned_capacity_in_bytes;
}
void OAIFileShareProperties::setProvisionedCapacityInBytes(const qint64 &provisioned_capacity_in_bytes) {
    m_provisioned_capacity_in_bytes = provisioned_capacity_in_bytes;
    m_provisioned_capacity_in_bytes_isSet = true;
}

bool OAIFileShareProperties::is_provisioned_capacity_in_bytes_Set() const{
    return m_provisioned_capacity_in_bytes_isSet;
}

bool OAIFileShareProperties::is_provisioned_capacity_in_bytes_Valid() const{
    return m_provisioned_capacity_in_bytes_isValid;
}

QString OAIFileShareProperties::getShareStatus() const {
    return m_share_status;
}
void OAIFileShareProperties::setShareStatus(const QString &share_status) {
    m_share_status = share_status;
    m_share_status_isSet = true;
}

bool OAIFileShareProperties::is_share_status_Set() const{
    return m_share_status_isSet;
}

bool OAIFileShareProperties::is_share_status_Valid() const{
    return m_share_status_isValid;
}

qint64 OAIFileShareProperties::getUsedCapacityInBytes() const {
    return m_used_capacity_in_bytes;
}
void OAIFileShareProperties::setUsedCapacityInBytes(const qint64 &used_capacity_in_bytes) {
    m_used_capacity_in_bytes = used_capacity_in_bytes;
    m_used_capacity_in_bytes_isSet = true;
}

bool OAIFileShareProperties::is_used_capacity_in_bytes_Set() const{
    return m_used_capacity_in_bytes_isSet;
}

bool OAIFileShareProperties::is_used_capacity_in_bytes_Valid() const{
    return m_used_capacity_in_bytes_isValid;
}

bool OAIFileShareProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_used_capacity_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_capacity_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_capacity_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileShareProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_admin_user_isValid && m_data_policy_isValid && m_monitoring_status_isValid && m_provisioned_capacity_in_bytes_isValid && m_share_status_isValid && true;
}

} // namespace OpenAPI
