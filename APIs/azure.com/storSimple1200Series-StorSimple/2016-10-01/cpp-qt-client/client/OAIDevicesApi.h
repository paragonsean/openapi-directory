/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDevicesApi_H
#define OAI_OAIDevicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlertSettings.h"
#include "OAIDevice.h"
#include "OAIDeviceList.h"
#include "OAIDevicePatch.h"
#include "OAIError.h"
#include "OAIFailoverRequest.h"
#include "OAIMetricDefinitionList.h"
#include "OAIMetricList.h"
#include "OAINetworkSettings.h"
#include "OAISecuritySettings.h"
#include "OAITimeSettings.h"
#include "OAIUpdates.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDevicesApi : public QObject {
    Q_OBJECT

public:
    OAIDevicesApi(const int timeOut = 0);
    ~OAIDevicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  alert_settings OAIAlertSettings [required]
    */
    virtual void devicesCreateOrUpdateAlertSettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIAlertSettings &alert_settings);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  security_settings OAISecuritySettings [required]
    */
    virtual void devicesCreateOrUpdateSecuritySettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAISecuritySettings &security_settings);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesDeactivate(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesDelete(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesDownloadUpdates(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  failover_request OAIFailoverRequest [required]
    */
    virtual void devicesFailover(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIFailoverRequest &failover_request);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void devicesGet(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesGetAlertSettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesGetNetworkSettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesGetTimeSettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesGetUpdateSummary(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesInstallUpdates(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void devicesListByManager(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void devicesListFailoverTarget(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesListMetricDefinition(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void devicesListMetrics(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  device_patch OAIDevicePatch [required]
    */
    virtual void devicesPatch(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIDevicePatch &device_patch);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesScanForUpdates(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void devicesCreateOrUpdateAlertSettingsCallback(OAIHttpRequestWorker *worker);
    void devicesCreateOrUpdateSecuritySettingsCallback(OAIHttpRequestWorker *worker);
    void devicesDeactivateCallback(OAIHttpRequestWorker *worker);
    void devicesDeleteCallback(OAIHttpRequestWorker *worker);
    void devicesDownloadUpdatesCallback(OAIHttpRequestWorker *worker);
    void devicesFailoverCallback(OAIHttpRequestWorker *worker);
    void devicesGetCallback(OAIHttpRequestWorker *worker);
    void devicesGetAlertSettingsCallback(OAIHttpRequestWorker *worker);
    void devicesGetNetworkSettingsCallback(OAIHttpRequestWorker *worker);
    void devicesGetTimeSettingsCallback(OAIHttpRequestWorker *worker);
    void devicesGetUpdateSummaryCallback(OAIHttpRequestWorker *worker);
    void devicesInstallUpdatesCallback(OAIHttpRequestWorker *worker);
    void devicesListByManagerCallback(OAIHttpRequestWorker *worker);
    void devicesListFailoverTargetCallback(OAIHttpRequestWorker *worker);
    void devicesListMetricDefinitionCallback(OAIHttpRequestWorker *worker);
    void devicesListMetricsCallback(OAIHttpRequestWorker *worker);
    void devicesPatchCallback(OAIHttpRequestWorker *worker);
    void devicesScanForUpdatesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void devicesCreateOrUpdateAlertSettingsSignal(OAIAlertSettings summary);
    void devicesCreateOrUpdateSecuritySettingsSignal();
    void devicesDeactivateSignal();
    void devicesDeleteSignal();
    void devicesDownloadUpdatesSignal();
    void devicesFailoverSignal();
    void devicesGetSignal(OAIDevice summary);
    void devicesGetAlertSettingsSignal(OAIAlertSettings summary);
    void devicesGetNetworkSettingsSignal(OAINetworkSettings summary);
    void devicesGetTimeSettingsSignal(OAITimeSettings summary);
    void devicesGetUpdateSummarySignal(OAIUpdates summary);
    void devicesInstallUpdatesSignal();
    void devicesListByManagerSignal(OAIDeviceList summary);
    void devicesListFailoverTargetSignal(OAIDeviceList summary);
    void devicesListMetricDefinitionSignal(OAIMetricDefinitionList summary);
    void devicesListMetricsSignal(OAIMetricList summary);
    void devicesPatchSignal(OAIDevice summary);
    void devicesScanForUpdatesSignal();


    void devicesCreateOrUpdateAlertSettingsSignalFull(OAIHttpRequestWorker *worker, OAIAlertSettings summary);
    void devicesCreateOrUpdateSecuritySettingsSignalFull(OAIHttpRequestWorker *worker);
    void devicesDeactivateSignalFull(OAIHttpRequestWorker *worker);
    void devicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void devicesDownloadUpdatesSignalFull(OAIHttpRequestWorker *worker);
    void devicesFailoverSignalFull(OAIHttpRequestWorker *worker);
    void devicesGetSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void devicesGetAlertSettingsSignalFull(OAIHttpRequestWorker *worker, OAIAlertSettings summary);
    void devicesGetNetworkSettingsSignalFull(OAIHttpRequestWorker *worker, OAINetworkSettings summary);
    void devicesGetTimeSettingsSignalFull(OAIHttpRequestWorker *worker, OAITimeSettings summary);
    void devicesGetUpdateSummarySignalFull(OAIHttpRequestWorker *worker, OAIUpdates summary);
    void devicesInstallUpdatesSignalFull(OAIHttpRequestWorker *worker);
    void devicesListByManagerSignalFull(OAIHttpRequestWorker *worker, OAIDeviceList summary);
    void devicesListFailoverTargetSignalFull(OAIHttpRequestWorker *worker, OAIDeviceList summary);
    void devicesListMetricDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionList summary);
    void devicesListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricList summary);
    void devicesPatchSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void devicesScanForUpdatesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use devicesCreateOrUpdateAlertSettingsSignalError() instead")
    void devicesCreateOrUpdateAlertSettingsSignalE(OAIAlertSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesCreateOrUpdateAlertSettingsSignalError(OAIAlertSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesCreateOrUpdateSecuritySettingsSignalError() instead")
    void devicesCreateOrUpdateSecuritySettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesCreateOrUpdateSecuritySettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDeactivateSignalError() instead")
    void devicesDeactivateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDeactivateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDeleteSignalError() instead")
    void devicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDownloadUpdatesSignalError() instead")
    void devicesDownloadUpdatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDownloadUpdatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesFailoverSignalError() instead")
    void devicesFailoverSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesFailoverSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetSignalError() instead")
    void devicesGetSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetAlertSettingsSignalError() instead")
    void devicesGetAlertSettingsSignalE(OAIAlertSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetAlertSettingsSignalError(OAIAlertSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetNetworkSettingsSignalError() instead")
    void devicesGetNetworkSettingsSignalE(OAINetworkSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetNetworkSettingsSignalError(OAINetworkSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetTimeSettingsSignalError() instead")
    void devicesGetTimeSettingsSignalE(OAITimeSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetTimeSettingsSignalError(OAITimeSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetUpdateSummarySignalError() instead")
    void devicesGetUpdateSummarySignalE(OAIUpdates summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetUpdateSummarySignalError(OAIUpdates summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesInstallUpdatesSignalError() instead")
    void devicesInstallUpdatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesInstallUpdatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListByManagerSignalError() instead")
    void devicesListByManagerSignalE(OAIDeviceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListByManagerSignalError(OAIDeviceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListFailoverTargetSignalError() instead")
    void devicesListFailoverTargetSignalE(OAIDeviceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListFailoverTargetSignalError(OAIDeviceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListMetricDefinitionSignalError() instead")
    void devicesListMetricDefinitionSignalE(OAIMetricDefinitionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListMetricDefinitionSignalError(OAIMetricDefinitionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListMetricsSignalError() instead")
    void devicesListMetricsSignalE(OAIMetricList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListMetricsSignalError(OAIMetricList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesPatchSignalError() instead")
    void devicesPatchSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesPatchSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesScanForUpdatesSignalError() instead")
    void devicesScanForUpdatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesScanForUpdatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use devicesCreateOrUpdateAlertSettingsSignalErrorFull() instead")
    void devicesCreateOrUpdateAlertSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesCreateOrUpdateAlertSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesCreateOrUpdateSecuritySettingsSignalErrorFull() instead")
    void devicesCreateOrUpdateSecuritySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesCreateOrUpdateSecuritySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDeactivateSignalErrorFull() instead")
    void devicesDeactivateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDeactivateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDeleteSignalErrorFull() instead")
    void devicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDownloadUpdatesSignalErrorFull() instead")
    void devicesDownloadUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDownloadUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesFailoverSignalErrorFull() instead")
    void devicesFailoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesFailoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetSignalErrorFull() instead")
    void devicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetAlertSettingsSignalErrorFull() instead")
    void devicesGetAlertSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetAlertSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetNetworkSettingsSignalErrorFull() instead")
    void devicesGetNetworkSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetNetworkSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetTimeSettingsSignalErrorFull() instead")
    void devicesGetTimeSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetTimeSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetUpdateSummarySignalErrorFull() instead")
    void devicesGetUpdateSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetUpdateSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesInstallUpdatesSignalErrorFull() instead")
    void devicesInstallUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesInstallUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListByManagerSignalErrorFull() instead")
    void devicesListByManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListByManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListFailoverTargetSignalErrorFull() instead")
    void devicesListFailoverTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListFailoverTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListMetricDefinitionSignalErrorFull() instead")
    void devicesListMetricDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListMetricDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListMetricsSignalErrorFull() instead")
    void devicesListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesPatchSignalErrorFull() instead")
    void devicesPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesScanForUpdatesSignalErrorFull() instead")
    void devicesScanForUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesScanForUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
