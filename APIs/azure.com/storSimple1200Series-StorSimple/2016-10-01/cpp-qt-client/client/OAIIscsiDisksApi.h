/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIscsiDisksApi_H
#define OAI_OAIIscsiDisksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIISCSIDisk.h"
#include "OAIISCSIDiskList.h"
#include "OAIMetricDefinitionList.h"
#include "OAIMetricList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIscsiDisksApi : public QObject {
    Q_OBJECT

public:
    OAIIscsiDisksApi(const int timeOut = 0);
    ~OAIIscsiDisksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  iscsi_server_name QString [required]
    * @param[in]  disk_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  iscsi_disk OAIISCSIDisk [required]
    */
    virtual void iscsiDisksCreateOrUpdate(const QString &device_name, const QString &iscsi_server_name, const QString &disk_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIISCSIDisk &iscsi_disk);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  iscsi_server_name QString [required]
    * @param[in]  disk_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iscsiDisksDelete(const QString &device_name, const QString &iscsi_server_name, const QString &disk_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  iscsi_server_name QString [required]
    * @param[in]  disk_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iscsiDisksGet(const QString &device_name, const QString &iscsi_server_name, const QString &disk_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iscsiDisksListByDevice(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  iscsi_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iscsiDisksListByIscsiServer(const QString &device_name, const QString &iscsi_server_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  iscsi_server_name QString [required]
    * @param[in]  disk_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iscsiDisksListMetricDefinition(const QString &device_name, const QString &iscsi_server_name, const QString &disk_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  iscsi_server_name QString [required]
    * @param[in]  disk_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void iscsiDisksListMetrics(const QString &device_name, const QString &iscsi_server_name, const QString &disk_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void iscsiDisksCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void iscsiDisksDeleteCallback(OAIHttpRequestWorker *worker);
    void iscsiDisksGetCallback(OAIHttpRequestWorker *worker);
    void iscsiDisksListByDeviceCallback(OAIHttpRequestWorker *worker);
    void iscsiDisksListByIscsiServerCallback(OAIHttpRequestWorker *worker);
    void iscsiDisksListMetricDefinitionCallback(OAIHttpRequestWorker *worker);
    void iscsiDisksListMetricsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void iscsiDisksCreateOrUpdateSignal(OAIISCSIDisk summary);
    void iscsiDisksDeleteSignal();
    void iscsiDisksGetSignal(OAIISCSIDisk summary);
    void iscsiDisksListByDeviceSignal(OAIISCSIDiskList summary);
    void iscsiDisksListByIscsiServerSignal(OAIISCSIDiskList summary);
    void iscsiDisksListMetricDefinitionSignal(OAIMetricDefinitionList summary);
    void iscsiDisksListMetricsSignal(OAIMetricList summary);


    void iscsiDisksCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIISCSIDisk summary);
    void iscsiDisksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void iscsiDisksGetSignalFull(OAIHttpRequestWorker *worker, OAIISCSIDisk summary);
    void iscsiDisksListByDeviceSignalFull(OAIHttpRequestWorker *worker, OAIISCSIDiskList summary);
    void iscsiDisksListByIscsiServerSignalFull(OAIHttpRequestWorker *worker, OAIISCSIDiskList summary);
    void iscsiDisksListMetricDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionList summary);
    void iscsiDisksListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricList summary);

    Q_DECL_DEPRECATED_X("Use iscsiDisksCreateOrUpdateSignalError() instead")
    void iscsiDisksCreateOrUpdateSignalE(OAIISCSIDisk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksCreateOrUpdateSignalError(OAIISCSIDisk summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiDisksDeleteSignalError() instead")
    void iscsiDisksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiDisksGetSignalError() instead")
    void iscsiDisksGetSignalE(OAIISCSIDisk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksGetSignalError(OAIISCSIDisk summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiDisksListByDeviceSignalError() instead")
    void iscsiDisksListByDeviceSignalE(OAIISCSIDiskList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksListByDeviceSignalError(OAIISCSIDiskList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiDisksListByIscsiServerSignalError() instead")
    void iscsiDisksListByIscsiServerSignalE(OAIISCSIDiskList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksListByIscsiServerSignalError(OAIISCSIDiskList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiDisksListMetricDefinitionSignalError() instead")
    void iscsiDisksListMetricDefinitionSignalE(OAIMetricDefinitionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksListMetricDefinitionSignalError(OAIMetricDefinitionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiDisksListMetricsSignalError() instead")
    void iscsiDisksListMetricsSignalE(OAIMetricList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksListMetricsSignalError(OAIMetricList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use iscsiDisksCreateOrUpdateSignalErrorFull() instead")
    void iscsiDisksCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiDisksDeleteSignalErrorFull() instead")
    void iscsiDisksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiDisksGetSignalErrorFull() instead")
    void iscsiDisksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiDisksListByDeviceSignalErrorFull() instead")
    void iscsiDisksListByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksListByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiDisksListByIscsiServerSignalErrorFull() instead")
    void iscsiDisksListByIscsiServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksListByIscsiServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiDisksListMetricDefinitionSignalErrorFull() instead")
    void iscsiDisksListMetricDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksListMetricDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiDisksListMetricsSignalErrorFull() instead")
    void iscsiDisksListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiDisksListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
