/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSettingsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSettingsProperties::OAITimeSettingsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSettingsProperties::OAITimeSettingsProperties() {
    this->initializeModel();
}

OAITimeSettingsProperties::~OAITimeSettingsProperties() {}

void OAITimeSettingsProperties::initializeModel() {

    m_primary_time_server_isSet = false;
    m_primary_time_server_isValid = false;

    m_secondary_time_server_isSet = false;
    m_secondary_time_server_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAITimeSettingsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSettingsProperties::fromJsonObject(QJsonObject json) {

    m_primary_time_server_isValid = ::OpenAPI::fromJsonValue(m_primary_time_server, json[QString("primaryTimeServer")]);
    m_primary_time_server_isSet = !json[QString("primaryTimeServer")].isNull() && m_primary_time_server_isValid;

    m_secondary_time_server_isValid = ::OpenAPI::fromJsonValue(m_secondary_time_server, json[QString("secondaryTimeServer")]);
    m_secondary_time_server_isSet = !json[QString("secondaryTimeServer")].isNull() && m_secondary_time_server_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAITimeSettingsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSettingsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_time_server_isSet) {
        obj.insert(QString("primaryTimeServer"), ::OpenAPI::toJsonValue(m_primary_time_server));
    }
    if (m_secondary_time_server_isSet) {
        obj.insert(QString("secondaryTimeServer"), ::OpenAPI::toJsonValue(m_secondary_time_server));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAITimeSettingsProperties::getPrimaryTimeServer() const {
    return m_primary_time_server;
}
void OAITimeSettingsProperties::setPrimaryTimeServer(const QString &primary_time_server) {
    m_primary_time_server = primary_time_server;
    m_primary_time_server_isSet = true;
}

bool OAITimeSettingsProperties::is_primary_time_server_Set() const{
    return m_primary_time_server_isSet;
}

bool OAITimeSettingsProperties::is_primary_time_server_Valid() const{
    return m_primary_time_server_isValid;
}

QString OAITimeSettingsProperties::getSecondaryTimeServer() const {
    return m_secondary_time_server;
}
void OAITimeSettingsProperties::setSecondaryTimeServer(const QString &secondary_time_server) {
    m_secondary_time_server = secondary_time_server;
    m_secondary_time_server_isSet = true;
}

bool OAITimeSettingsProperties::is_secondary_time_server_Set() const{
    return m_secondary_time_server_isSet;
}

bool OAITimeSettingsProperties::is_secondary_time_server_Valid() const{
    return m_secondary_time_server_isValid;
}

QString OAITimeSettingsProperties::getTimeZone() const {
    return m_time_zone;
}
void OAITimeSettingsProperties::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAITimeSettingsProperties::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAITimeSettingsProperties::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAITimeSettingsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_time_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_time_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSettingsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_primary_time_server_isValid && m_time_zone_isValid && true;
}

} // namespace OpenAPI
