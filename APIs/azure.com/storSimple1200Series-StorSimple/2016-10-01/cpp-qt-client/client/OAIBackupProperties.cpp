/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupProperties::OAIBackupProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupProperties::OAIBackupProperties() {
    this->initializeModel();
}

OAIBackupProperties::~OAIBackupProperties() {}

void OAIBackupProperties::initializeModel() {

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_initiated_by_isSet = false;
    m_initiated_by_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_target_type_isSet = false;
    m_target_type_isValid = false;
}

void OAIBackupProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupProperties::fromJsonObject(QJsonObject json) {

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_initiated_by_isValid = ::OpenAPI::fromJsonValue(m_initiated_by, json[QString("initiatedBy")]);
    m_initiated_by_isSet = !json[QString("initiatedBy")].isNull() && m_initiated_by_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("sizeInBytes")]);
    m_size_in_bytes_isSet = !json[QString("sizeInBytes")].isNull() && m_size_in_bytes_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;

    m_target_type_isValid = ::OpenAPI::fromJsonValue(m_target_type, json[QString("targetType")]);
    m_target_type_isSet = !json[QString("targetType")].isNull() && m_target_type_isValid;
}

QString OAIBackupProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_initiated_by_isSet) {
        obj.insert(QString("initiatedBy"), ::OpenAPI::toJsonValue(m_initiated_by));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("sizeInBytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_target_type_isSet) {
        obj.insert(QString("targetType"), ::OpenAPI::toJsonValue(m_target_type));
    }
    return obj;
}

QDateTime OAIBackupProperties::getCreatedTime() const {
    return m_created_time;
}
void OAIBackupProperties::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIBackupProperties::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIBackupProperties::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIBackupProperties::getDeviceId() const {
    return m_device_id;
}
void OAIBackupProperties::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIBackupProperties::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIBackupProperties::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QList<OAIBackupElement> OAIBackupProperties::getElements() const {
    return m_elements;
}
void OAIBackupProperties::setElements(const QList<OAIBackupElement> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIBackupProperties::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIBackupProperties::is_elements_Valid() const{
    return m_elements_isValid;
}

QDateTime OAIBackupProperties::getExpirationTime() const {
    return m_expiration_time;
}
void OAIBackupProperties::setExpirationTime(const QDateTime &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIBackupProperties::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIBackupProperties::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QString OAIBackupProperties::getInitiatedBy() const {
    return m_initiated_by;
}
void OAIBackupProperties::setInitiatedBy(const QString &initiated_by) {
    m_initiated_by = initiated_by;
    m_initiated_by_isSet = true;
}

bool OAIBackupProperties::is_initiated_by_Set() const{
    return m_initiated_by_isSet;
}

bool OAIBackupProperties::is_initiated_by_Valid() const{
    return m_initiated_by_isValid;
}

qint64 OAIBackupProperties::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIBackupProperties::setSizeInBytes(const qint64 &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIBackupProperties::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIBackupProperties::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

QString OAIBackupProperties::getTargetId() const {
    return m_target_id;
}
void OAIBackupProperties::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIBackupProperties::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIBackupProperties::is_target_id_Valid() const{
    return m_target_id_isValid;
}

QString OAIBackupProperties::getTargetType() const {
    return m_target_type;
}
void OAIBackupProperties::setTargetType(const QString &target_type) {
    m_target_type = target_type;
    m_target_type_isSet = true;
}

bool OAIBackupProperties::is_target_type_Set() const{
    return m_target_type_isSet;
}

bool OAIBackupProperties::is_target_type_Valid() const{
    return m_target_type_isValid;
}

bool OAIBackupProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_id_isValid && m_elements_isValid && m_initiated_by_isValid && m_size_in_bytes_isValid && true;
}

} // namespace OpenAPI
