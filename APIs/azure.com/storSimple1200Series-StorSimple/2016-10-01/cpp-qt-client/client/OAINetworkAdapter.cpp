/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkAdapter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkAdapter::OAINetworkAdapter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkAdapter::OAINetworkAdapter() {
    this->initializeModel();
}

OAINetworkAdapter::~OAINetworkAdapter() {}

void OAINetworkAdapter::initializeModel() {

    m_dhcp_status_isSet = false;
    m_dhcp_status_isValid = false;

    m_i_pv4_info_isSet = false;
    m_i_pv4_info_isValid = false;

    m_i_pv6_info_isSet = false;
    m_i_pv6_info_isValid = false;

    m_link_speed_isSet = false;
    m_link_speed_isValid = false;

    m_network_adapter_name_isSet = false;
    m_network_adapter_name_isValid = false;
}

void OAINetworkAdapter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkAdapter::fromJsonObject(QJsonObject json) {

    m_dhcp_status_isValid = ::OpenAPI::fromJsonValue(m_dhcp_status, json[QString("dhcpStatus")]);
    m_dhcp_status_isSet = !json[QString("dhcpStatus")].isNull() && m_dhcp_status_isValid;

    m_i_pv4_info_isValid = ::OpenAPI::fromJsonValue(m_i_pv4_info, json[QString("iPv4Info")]);
    m_i_pv4_info_isSet = !json[QString("iPv4Info")].isNull() && m_i_pv4_info_isValid;

    m_i_pv6_info_isValid = ::OpenAPI::fromJsonValue(m_i_pv6_info, json[QString("iPv6Info")]);
    m_i_pv6_info_isSet = !json[QString("iPv6Info")].isNull() && m_i_pv6_info_isValid;

    m_link_speed_isValid = ::OpenAPI::fromJsonValue(m_link_speed, json[QString("linkSpeed")]);
    m_link_speed_isSet = !json[QString("linkSpeed")].isNull() && m_link_speed_isValid;

    m_network_adapter_name_isValid = ::OpenAPI::fromJsonValue(m_network_adapter_name, json[QString("networkAdapterName")]);
    m_network_adapter_name_isSet = !json[QString("networkAdapterName")].isNull() && m_network_adapter_name_isValid;
}

QString OAINetworkAdapter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkAdapter::asJsonObject() const {
    QJsonObject obj;
    if (m_dhcp_status_isSet) {
        obj.insert(QString("dhcpStatus"), ::OpenAPI::toJsonValue(m_dhcp_status));
    }
    if (m_i_pv4_info.isSet()) {
        obj.insert(QString("iPv4Info"), ::OpenAPI::toJsonValue(m_i_pv4_info));
    }
    if (m_i_pv6_info.isSet()) {
        obj.insert(QString("iPv6Info"), ::OpenAPI::toJsonValue(m_i_pv6_info));
    }
    if (m_link_speed_isSet) {
        obj.insert(QString("linkSpeed"), ::OpenAPI::toJsonValue(m_link_speed));
    }
    if (m_network_adapter_name_isSet) {
        obj.insert(QString("networkAdapterName"), ::OpenAPI::toJsonValue(m_network_adapter_name));
    }
    return obj;
}

QString OAINetworkAdapter::getDhcpStatus() const {
    return m_dhcp_status;
}
void OAINetworkAdapter::setDhcpStatus(const QString &dhcp_status) {
    m_dhcp_status = dhcp_status;
    m_dhcp_status_isSet = true;
}

bool OAINetworkAdapter::is_dhcp_status_Set() const{
    return m_dhcp_status_isSet;
}

bool OAINetworkAdapter::is_dhcp_status_Valid() const{
    return m_dhcp_status_isValid;
}

OAIIPConfig OAINetworkAdapter::getIPv4Info() const {
    return m_i_pv4_info;
}
void OAINetworkAdapter::setIPv4Info(const OAIIPConfig &i_pv4_info) {
    m_i_pv4_info = i_pv4_info;
    m_i_pv4_info_isSet = true;
}

bool OAINetworkAdapter::is_i_pv4_info_Set() const{
    return m_i_pv4_info_isSet;
}

bool OAINetworkAdapter::is_i_pv4_info_Valid() const{
    return m_i_pv4_info_isValid;
}

OAIIPConfig OAINetworkAdapter::getIPv6Info() const {
    return m_i_pv6_info;
}
void OAINetworkAdapter::setIPv6Info(const OAIIPConfig &i_pv6_info) {
    m_i_pv6_info = i_pv6_info;
    m_i_pv6_info_isSet = true;
}

bool OAINetworkAdapter::is_i_pv6_info_Set() const{
    return m_i_pv6_info_isSet;
}

bool OAINetworkAdapter::is_i_pv6_info_Valid() const{
    return m_i_pv6_info_isValid;
}

qint64 OAINetworkAdapter::getLinkSpeed() const {
    return m_link_speed;
}
void OAINetworkAdapter::setLinkSpeed(const qint64 &link_speed) {
    m_link_speed = link_speed;
    m_link_speed_isSet = true;
}

bool OAINetworkAdapter::is_link_speed_Set() const{
    return m_link_speed_isSet;
}

bool OAINetworkAdapter::is_link_speed_Valid() const{
    return m_link_speed_isValid;
}

QString OAINetworkAdapter::getNetworkAdapterName() const {
    return m_network_adapter_name;
}
void OAINetworkAdapter::setNetworkAdapterName(const QString &network_adapter_name) {
    m_network_adapter_name = network_adapter_name;
    m_network_adapter_name_isSet = true;
}

bool OAINetworkAdapter::is_network_adapter_name_Set() const{
    return m_network_adapter_name_isSet;
}

bool OAINetworkAdapter::is_network_adapter_name_Valid() const{
    return m_network_adapter_name_isValid;
}

bool OAINetworkAdapter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dhcp_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_pv4_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_pv6_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_adapter_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkAdapter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dhcp_status_isValid && m_network_adapter_name_isValid && true;
}

} // namespace OpenAPI
