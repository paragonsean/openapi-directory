/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricDefinition::OAIMetricDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricDefinition::OAIMetricDefinition() {
    this->initializeModel();
}

OAIMetricDefinition::~OAIMetricDefinition() {}

void OAIMetricDefinition::initializeModel() {

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_metric_availabilities_isSet = false;
    m_metric_availabilities_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_aggregation_type_isSet = false;
    m_primary_aggregation_type_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIMetricDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricDefinition::fromJsonObject(QJsonObject json) {

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_metric_availabilities_isValid = ::OpenAPI::fromJsonValue(m_metric_availabilities, json[QString("metricAvailabilities")]);
    m_metric_availabilities_isSet = !json[QString("metricAvailabilities")].isNull() && m_metric_availabilities_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_aggregation_type_isValid = ::OpenAPI::fromJsonValue(m_primary_aggregation_type, json[QString("primaryAggregationType")]);
    m_primary_aggregation_type_isSet = !json[QString("primaryAggregationType")].isNull() && m_primary_aggregation_type_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIMetricDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_metric_availabilities.size() > 0) {
        obj.insert(QString("metricAvailabilities"), ::OpenAPI::toJsonValue(m_metric_availabilities));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_aggregation_type_isSet) {
        obj.insert(QString("primaryAggregationType"), ::OpenAPI::toJsonValue(m_primary_aggregation_type));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QList<OAIMetricDimension> OAIMetricDefinition::getDimensions() const {
    return m_dimensions;
}
void OAIMetricDefinition::setDimensions(const QList<OAIMetricDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIMetricDefinition::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIMetricDefinition::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QList<OAIMetricAvailablity> OAIMetricDefinition::getMetricAvailabilities() const {
    return m_metric_availabilities;
}
void OAIMetricDefinition::setMetricAvailabilities(const QList<OAIMetricAvailablity> &metric_availabilities) {
    m_metric_availabilities = metric_availabilities;
    m_metric_availabilities_isSet = true;
}

bool OAIMetricDefinition::is_metric_availabilities_Set() const{
    return m_metric_availabilities_isSet;
}

bool OAIMetricDefinition::is_metric_availabilities_Valid() const{
    return m_metric_availabilities_isValid;
}

OAIMetricName OAIMetricDefinition::getName() const {
    return m_name;
}
void OAIMetricDefinition::setName(const OAIMetricName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetricDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetricDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMetricDefinition::getPrimaryAggregationType() const {
    return m_primary_aggregation_type;
}
void OAIMetricDefinition::setPrimaryAggregationType(const QString &primary_aggregation_type) {
    m_primary_aggregation_type = primary_aggregation_type;
    m_primary_aggregation_type_isSet = true;
}

bool OAIMetricDefinition::is_primary_aggregation_type_Set() const{
    return m_primary_aggregation_type_isSet;
}

bool OAIMetricDefinition::is_primary_aggregation_type_Valid() const{
    return m_primary_aggregation_type_isValid;
}

QString OAIMetricDefinition::getResourceId() const {
    return m_resource_id;
}
void OAIMetricDefinition::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIMetricDefinition::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIMetricDefinition::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIMetricDefinition::getType() const {
    return m_type;
}
void OAIMetricDefinition::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMetricDefinition::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMetricDefinition::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMetricDefinition::getUnit() const {
    return m_unit;
}
void OAIMetricDefinition::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMetricDefinition::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMetricDefinition::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIMetricDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_availabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_aggregation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dimensions_isValid && m_metric_availabilities_isValid && m_name_isValid && m_primary_aggregation_type_isValid && m_resource_id_isValid && m_type_isValid && m_unit_isValid && true;
}

} // namespace OpenAPI
