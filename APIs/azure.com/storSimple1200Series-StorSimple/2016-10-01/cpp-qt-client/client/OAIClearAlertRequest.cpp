/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClearAlertRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClearAlertRequest::OAIClearAlertRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClearAlertRequest::OAIClearAlertRequest() {
    this->initializeModel();
}

OAIClearAlertRequest::~OAIClearAlertRequest() {}

void OAIClearAlertRequest::initializeModel() {

    m_alerts_isSet = false;
    m_alerts_isValid = false;

    m_resolution_message_isSet = false;
    m_resolution_message_isValid = false;
}

void OAIClearAlertRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClearAlertRequest::fromJsonObject(QJsonObject json) {

    m_alerts_isValid = ::OpenAPI::fromJsonValue(m_alerts, json[QString("alerts")]);
    m_alerts_isSet = !json[QString("alerts")].isNull() && m_alerts_isValid;

    m_resolution_message_isValid = ::OpenAPI::fromJsonValue(m_resolution_message, json[QString("resolutionMessage")]);
    m_resolution_message_isSet = !json[QString("resolutionMessage")].isNull() && m_resolution_message_isValid;
}

QString OAIClearAlertRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClearAlertRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_alerts.size() > 0) {
        obj.insert(QString("alerts"), ::OpenAPI::toJsonValue(m_alerts));
    }
    if (m_resolution_message_isSet) {
        obj.insert(QString("resolutionMessage"), ::OpenAPI::toJsonValue(m_resolution_message));
    }
    return obj;
}

QList<QString> OAIClearAlertRequest::getAlerts() const {
    return m_alerts;
}
void OAIClearAlertRequest::setAlerts(const QList<QString> &alerts) {
    m_alerts = alerts;
    m_alerts_isSet = true;
}

bool OAIClearAlertRequest::is_alerts_Set() const{
    return m_alerts_isSet;
}

bool OAIClearAlertRequest::is_alerts_Valid() const{
    return m_alerts_isValid;
}

QString OAIClearAlertRequest::getResolutionMessage() const {
    return m_resolution_message;
}
void OAIClearAlertRequest::setResolutionMessage(const QString &resolution_message) {
    m_resolution_message = resolution_message;
    m_resolution_message_isSet = true;
}

bool OAIClearAlertRequest::is_resolution_message_Set() const{
    return m_resolution_message_isSet;
}

bool OAIClearAlertRequest::is_resolution_message_Valid() const{
    return m_resolution_message_isValid;
}

bool OAIClearAlertRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alerts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClearAlertRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alerts_isValid && true;
}

} // namespace OpenAPI
