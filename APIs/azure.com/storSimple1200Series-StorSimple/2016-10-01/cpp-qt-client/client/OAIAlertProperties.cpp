/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertProperties::OAIAlertProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertProperties::OAIAlertProperties() {
    this->initializeModel();
}

OAIAlertProperties::~OAIAlertProperties() {}

void OAIAlertProperties::initializeModel() {

    m_alert_type_isSet = false;
    m_alert_type_isValid = false;

    m_appeared_at_source_time_isSet = false;
    m_appeared_at_source_time_isValid = false;

    m_appeared_at_time_isSet = false;
    m_appeared_at_time_isValid = false;

    m_cleared_at_source_time_isSet = false;
    m_cleared_at_source_time_isValid = false;

    m_cleared_at_time_isSet = false;
    m_cleared_at_time_isValid = false;

    m_detailed_information_isSet = false;
    m_detailed_information_isValid = false;

    m_error_details_isSet = false;
    m_error_details_isValid = false;

    m_recommendation_isSet = false;
    m_recommendation_isValid = false;

    m_resolution_reason_isSet = false;
    m_resolution_reason_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAlertProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertProperties::fromJsonObject(QJsonObject json) {

    m_alert_type_isValid = ::OpenAPI::fromJsonValue(m_alert_type, json[QString("alertType")]);
    m_alert_type_isSet = !json[QString("alertType")].isNull() && m_alert_type_isValid;

    m_appeared_at_source_time_isValid = ::OpenAPI::fromJsonValue(m_appeared_at_source_time, json[QString("appearedAtSourceTime")]);
    m_appeared_at_source_time_isSet = !json[QString("appearedAtSourceTime")].isNull() && m_appeared_at_source_time_isValid;

    m_appeared_at_time_isValid = ::OpenAPI::fromJsonValue(m_appeared_at_time, json[QString("appearedAtTime")]);
    m_appeared_at_time_isSet = !json[QString("appearedAtTime")].isNull() && m_appeared_at_time_isValid;

    m_cleared_at_source_time_isValid = ::OpenAPI::fromJsonValue(m_cleared_at_source_time, json[QString("clearedAtSourceTime")]);
    m_cleared_at_source_time_isSet = !json[QString("clearedAtSourceTime")].isNull() && m_cleared_at_source_time_isValid;

    m_cleared_at_time_isValid = ::OpenAPI::fromJsonValue(m_cleared_at_time, json[QString("clearedAtTime")]);
    m_cleared_at_time_isSet = !json[QString("clearedAtTime")].isNull() && m_cleared_at_time_isValid;

    m_detailed_information_isValid = ::OpenAPI::fromJsonValue(m_detailed_information, json[QString("detailedInformation")]);
    m_detailed_information_isSet = !json[QString("detailedInformation")].isNull() && m_detailed_information_isValid;

    m_error_details_isValid = ::OpenAPI::fromJsonValue(m_error_details, json[QString("errorDetails")]);
    m_error_details_isSet = !json[QString("errorDetails")].isNull() && m_error_details_isValid;

    m_recommendation_isValid = ::OpenAPI::fromJsonValue(m_recommendation, json[QString("recommendation")]);
    m_recommendation_isSet = !json[QString("recommendation")].isNull() && m_recommendation_isValid;

    m_resolution_reason_isValid = ::OpenAPI::fromJsonValue(m_resolution_reason, json[QString("resolutionReason")]);
    m_resolution_reason_isSet = !json[QString("resolutionReason")].isNull() && m_resolution_reason_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAlertProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_type_isSet) {
        obj.insert(QString("alertType"), ::OpenAPI::toJsonValue(m_alert_type));
    }
    if (m_appeared_at_source_time_isSet) {
        obj.insert(QString("appearedAtSourceTime"), ::OpenAPI::toJsonValue(m_appeared_at_source_time));
    }
    if (m_appeared_at_time_isSet) {
        obj.insert(QString("appearedAtTime"), ::OpenAPI::toJsonValue(m_appeared_at_time));
    }
    if (m_cleared_at_source_time_isSet) {
        obj.insert(QString("clearedAtSourceTime"), ::OpenAPI::toJsonValue(m_cleared_at_source_time));
    }
    if (m_cleared_at_time_isSet) {
        obj.insert(QString("clearedAtTime"), ::OpenAPI::toJsonValue(m_cleared_at_time));
    }
    if (m_detailed_information.size() > 0) {
        obj.insert(QString("detailedInformation"), ::OpenAPI::toJsonValue(m_detailed_information));
    }
    if (m_error_details.isSet()) {
        obj.insert(QString("errorDetails"), ::OpenAPI::toJsonValue(m_error_details));
    }
    if (m_recommendation_isSet) {
        obj.insert(QString("recommendation"), ::OpenAPI::toJsonValue(m_recommendation));
    }
    if (m_resolution_reason_isSet) {
        obj.insert(QString("resolutionReason"), ::OpenAPI::toJsonValue(m_resolution_reason));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIAlertProperties::getAlertType() const {
    return m_alert_type;
}
void OAIAlertProperties::setAlertType(const QString &alert_type) {
    m_alert_type = alert_type;
    m_alert_type_isSet = true;
}

bool OAIAlertProperties::is_alert_type_Set() const{
    return m_alert_type_isSet;
}

bool OAIAlertProperties::is_alert_type_Valid() const{
    return m_alert_type_isValid;
}

QDateTime OAIAlertProperties::getAppearedAtSourceTime() const {
    return m_appeared_at_source_time;
}
void OAIAlertProperties::setAppearedAtSourceTime(const QDateTime &appeared_at_source_time) {
    m_appeared_at_source_time = appeared_at_source_time;
    m_appeared_at_source_time_isSet = true;
}

bool OAIAlertProperties::is_appeared_at_source_time_Set() const{
    return m_appeared_at_source_time_isSet;
}

bool OAIAlertProperties::is_appeared_at_source_time_Valid() const{
    return m_appeared_at_source_time_isValid;
}

QDateTime OAIAlertProperties::getAppearedAtTime() const {
    return m_appeared_at_time;
}
void OAIAlertProperties::setAppearedAtTime(const QDateTime &appeared_at_time) {
    m_appeared_at_time = appeared_at_time;
    m_appeared_at_time_isSet = true;
}

bool OAIAlertProperties::is_appeared_at_time_Set() const{
    return m_appeared_at_time_isSet;
}

bool OAIAlertProperties::is_appeared_at_time_Valid() const{
    return m_appeared_at_time_isValid;
}

QDateTime OAIAlertProperties::getClearedAtSourceTime() const {
    return m_cleared_at_source_time;
}
void OAIAlertProperties::setClearedAtSourceTime(const QDateTime &cleared_at_source_time) {
    m_cleared_at_source_time = cleared_at_source_time;
    m_cleared_at_source_time_isSet = true;
}

bool OAIAlertProperties::is_cleared_at_source_time_Set() const{
    return m_cleared_at_source_time_isSet;
}

bool OAIAlertProperties::is_cleared_at_source_time_Valid() const{
    return m_cleared_at_source_time_isValid;
}

QDateTime OAIAlertProperties::getClearedAtTime() const {
    return m_cleared_at_time;
}
void OAIAlertProperties::setClearedAtTime(const QDateTime &cleared_at_time) {
    m_cleared_at_time = cleared_at_time;
    m_cleared_at_time_isSet = true;
}

bool OAIAlertProperties::is_cleared_at_time_Set() const{
    return m_cleared_at_time_isSet;
}

bool OAIAlertProperties::is_cleared_at_time_Valid() const{
    return m_cleared_at_time_isValid;
}

QMap<QString, QString> OAIAlertProperties::getDetailedInformation() const {
    return m_detailed_information;
}
void OAIAlertProperties::setDetailedInformation(const QMap<QString, QString> &detailed_information) {
    m_detailed_information = detailed_information;
    m_detailed_information_isSet = true;
}

bool OAIAlertProperties::is_detailed_information_Set() const{
    return m_detailed_information_isSet;
}

bool OAIAlertProperties::is_detailed_information_Valid() const{
    return m_detailed_information_isValid;
}

OAIAlertErrorDetails OAIAlertProperties::getErrorDetails() const {
    return m_error_details;
}
void OAIAlertProperties::setErrorDetails(const OAIAlertErrorDetails &error_details) {
    m_error_details = error_details;
    m_error_details_isSet = true;
}

bool OAIAlertProperties::is_error_details_Set() const{
    return m_error_details_isSet;
}

bool OAIAlertProperties::is_error_details_Valid() const{
    return m_error_details_isValid;
}

QString OAIAlertProperties::getRecommendation() const {
    return m_recommendation;
}
void OAIAlertProperties::setRecommendation(const QString &recommendation) {
    m_recommendation = recommendation;
    m_recommendation_isSet = true;
}

bool OAIAlertProperties::is_recommendation_Set() const{
    return m_recommendation_isSet;
}

bool OAIAlertProperties::is_recommendation_Valid() const{
    return m_recommendation_isValid;
}

QString OAIAlertProperties::getResolutionReason() const {
    return m_resolution_reason;
}
void OAIAlertProperties::setResolutionReason(const QString &resolution_reason) {
    m_resolution_reason = resolution_reason;
    m_resolution_reason_isSet = true;
}

bool OAIAlertProperties::is_resolution_reason_Set() const{
    return m_resolution_reason_isSet;
}

bool OAIAlertProperties::is_resolution_reason_Valid() const{
    return m_resolution_reason_isValid;
}

QString OAIAlertProperties::getScope() const {
    return m_scope;
}
void OAIAlertProperties::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIAlertProperties::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAlertProperties::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIAlertProperties::getSeverity() const {
    return m_severity;
}
void OAIAlertProperties::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIAlertProperties::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIAlertProperties::is_severity_Valid() const{
    return m_severity_isValid;
}

OAIAlertSource OAIAlertProperties::getSource() const {
    return m_source;
}
void OAIAlertProperties::setSource(const OAIAlertSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAlertProperties::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAlertProperties::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIAlertProperties::getStatus() const {
    return m_status;
}
void OAIAlertProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAlertProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAlertProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAlertProperties::getTitle() const {
    return m_title;
}
void OAIAlertProperties::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAlertProperties::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAlertProperties::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAlertProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_appeared_at_source_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_appeared_at_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cleared_at_source_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cleared_at_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detailed_information.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alert_type_isValid && m_appeared_at_source_time_isValid && m_appeared_at_time_isValid && m_scope_isValid && m_severity_isValid && m_source_isValid && m_status_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
