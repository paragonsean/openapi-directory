/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISymmetricEncryptedSecret.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISymmetricEncryptedSecret::OAISymmetricEncryptedSecret(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISymmetricEncryptedSecret::OAISymmetricEncryptedSecret() {
    this->initializeModel();
}

OAISymmetricEncryptedSecret::~OAISymmetricEncryptedSecret() {}

void OAISymmetricEncryptedSecret::initializeModel() {

    m_encryption_algorithm_isSet = false;
    m_encryption_algorithm_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_value_certificate_thumbprint_isSet = false;
    m_value_certificate_thumbprint_isValid = false;
}

void OAISymmetricEncryptedSecret::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISymmetricEncryptedSecret::fromJsonObject(QJsonObject json) {

    m_encryption_algorithm_isValid = ::OpenAPI::fromJsonValue(m_encryption_algorithm, json[QString("encryptionAlgorithm")]);
    m_encryption_algorithm_isSet = !json[QString("encryptionAlgorithm")].isNull() && m_encryption_algorithm_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_value_certificate_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_value_certificate_thumbprint, json[QString("valueCertificateThumbprint")]);
    m_value_certificate_thumbprint_isSet = !json[QString("valueCertificateThumbprint")].isNull() && m_value_certificate_thumbprint_isValid;
}

QString OAISymmetricEncryptedSecret::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISymmetricEncryptedSecret::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_algorithm_isSet) {
        obj.insert(QString("encryptionAlgorithm"), ::OpenAPI::toJsonValue(m_encryption_algorithm));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_value_certificate_thumbprint_isSet) {
        obj.insert(QString("valueCertificateThumbprint"), ::OpenAPI::toJsonValue(m_value_certificate_thumbprint));
    }
    return obj;
}

QString OAISymmetricEncryptedSecret::getEncryptionAlgorithm() const {
    return m_encryption_algorithm;
}
void OAISymmetricEncryptedSecret::setEncryptionAlgorithm(const QString &encryption_algorithm) {
    m_encryption_algorithm = encryption_algorithm;
    m_encryption_algorithm_isSet = true;
}

bool OAISymmetricEncryptedSecret::is_encryption_algorithm_Set() const{
    return m_encryption_algorithm_isSet;
}

bool OAISymmetricEncryptedSecret::is_encryption_algorithm_Valid() const{
    return m_encryption_algorithm_isValid;
}

QString OAISymmetricEncryptedSecret::getValue() const {
    return m_value;
}
void OAISymmetricEncryptedSecret::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISymmetricEncryptedSecret::is_value_Set() const{
    return m_value_isSet;
}

bool OAISymmetricEncryptedSecret::is_value_Valid() const{
    return m_value_isValid;
}

QString OAISymmetricEncryptedSecret::getValueCertificateThumbprint() const {
    return m_value_certificate_thumbprint;
}
void OAISymmetricEncryptedSecret::setValueCertificateThumbprint(const QString &value_certificate_thumbprint) {
    m_value_certificate_thumbprint = value_certificate_thumbprint;
    m_value_certificate_thumbprint_isSet = true;
}

bool OAISymmetricEncryptedSecret::is_value_certificate_thumbprint_Set() const{
    return m_value_certificate_thumbprint_isSet;
}

bool OAISymmetricEncryptedSecret::is_value_certificate_thumbprint_Valid() const{
    return m_value_certificate_thumbprint_isValid;
}

bool OAISymmetricEncryptedSecret::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_certificate_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISymmetricEncryptedSecret::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_encryption_algorithm_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
