/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFileServersApi_H
#define OAI_OAIFileServersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIFileServer.h"
#include "OAIFileServerList.h"
#include "OAIMetricDefinitionList.h"
#include "OAIMetricList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFileServersApi : public QObject {
    Q_OBJECT

public:
    OAIFileServersApi(const int timeOut = 0);
    ~OAIFileServersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  file_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void fileServersBackupNow(const QString &device_name, const QString &file_server_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  file_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  file_server OAIFileServer [required]
    */
    virtual void fileServersCreateOrUpdate(const QString &device_name, const QString &file_server_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIFileServer &file_server);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  file_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void fileServersDelete(const QString &device_name, const QString &file_server_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  file_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void fileServersGet(const QString &device_name, const QString &file_server_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void fileServersListByDevice(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void fileServersListByManager(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  file_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void fileServersListMetricDefinition(const QString &device_name, const QString &file_server_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  file_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void fileServersListMetrics(const QString &device_name, const QString &file_server_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fileServersBackupNowCallback(OAIHttpRequestWorker *worker);
    void fileServersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void fileServersDeleteCallback(OAIHttpRequestWorker *worker);
    void fileServersGetCallback(OAIHttpRequestWorker *worker);
    void fileServersListByDeviceCallback(OAIHttpRequestWorker *worker);
    void fileServersListByManagerCallback(OAIHttpRequestWorker *worker);
    void fileServersListMetricDefinitionCallback(OAIHttpRequestWorker *worker);
    void fileServersListMetricsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fileServersBackupNowSignal();
    void fileServersCreateOrUpdateSignal(OAIFileServer summary);
    void fileServersDeleteSignal();
    void fileServersGetSignal(OAIFileServer summary);
    void fileServersListByDeviceSignal(OAIFileServerList summary);
    void fileServersListByManagerSignal(OAIFileServerList summary);
    void fileServersListMetricDefinitionSignal(OAIMetricDefinitionList summary);
    void fileServersListMetricsSignal(OAIMetricList summary);


    void fileServersBackupNowSignalFull(OAIHttpRequestWorker *worker);
    void fileServersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFileServer summary);
    void fileServersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void fileServersGetSignalFull(OAIHttpRequestWorker *worker, OAIFileServer summary);
    void fileServersListByDeviceSignalFull(OAIHttpRequestWorker *worker, OAIFileServerList summary);
    void fileServersListByManagerSignalFull(OAIHttpRequestWorker *worker, OAIFileServerList summary);
    void fileServersListMetricDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionList summary);
    void fileServersListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricList summary);

    Q_DECL_DEPRECATED_X("Use fileServersBackupNowSignalError() instead")
    void fileServersBackupNowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersBackupNowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersCreateOrUpdateSignalError() instead")
    void fileServersCreateOrUpdateSignalE(OAIFileServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersCreateOrUpdateSignalError(OAIFileServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersDeleteSignalError() instead")
    void fileServersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersGetSignalError() instead")
    void fileServersGetSignalE(OAIFileServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersGetSignalError(OAIFileServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersListByDeviceSignalError() instead")
    void fileServersListByDeviceSignalE(OAIFileServerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersListByDeviceSignalError(OAIFileServerList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersListByManagerSignalError() instead")
    void fileServersListByManagerSignalE(OAIFileServerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersListByManagerSignalError(OAIFileServerList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersListMetricDefinitionSignalError() instead")
    void fileServersListMetricDefinitionSignalE(OAIMetricDefinitionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersListMetricDefinitionSignalError(OAIMetricDefinitionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersListMetricsSignalError() instead")
    void fileServersListMetricsSignalE(OAIMetricList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersListMetricsSignalError(OAIMetricList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fileServersBackupNowSignalErrorFull() instead")
    void fileServersBackupNowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersBackupNowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersCreateOrUpdateSignalErrorFull() instead")
    void fileServersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersDeleteSignalErrorFull() instead")
    void fileServersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersGetSignalErrorFull() instead")
    void fileServersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersListByDeviceSignalErrorFull() instead")
    void fileServersListByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersListByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersListByManagerSignalErrorFull() instead")
    void fileServersListByManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersListByManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersListMetricDefinitionSignalErrorFull() instead")
    void fileServersListMetricDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersListMetricDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileServersListMetricsSignalErrorFull() instead")
    void fileServersListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileServersListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
