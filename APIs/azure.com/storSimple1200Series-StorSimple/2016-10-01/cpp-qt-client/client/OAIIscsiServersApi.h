/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIscsiServersApi_H
#define OAI_OAIIscsiServersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIISCSIServer.h"
#include "OAIISCSIServerList.h"
#include "OAIMetricDefinitionList.h"
#include "OAIMetricList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIscsiServersApi : public QObject {
    Q_OBJECT

public:
    OAIIscsiServersApi(const int timeOut = 0);
    ~OAIIscsiServersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  iscsi_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iscsiServersBackupNow(const QString &device_name, const QString &iscsi_server_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  iscsi_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  iscsi_server OAIISCSIServer [required]
    */
    virtual void iscsiServersCreateOrUpdate(const QString &device_name, const QString &iscsi_server_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIISCSIServer &iscsi_server);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  iscsi_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iscsiServersDelete(const QString &device_name, const QString &iscsi_server_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  iscsi_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iscsiServersGet(const QString &device_name, const QString &iscsi_server_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iscsiServersListByDevice(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iscsiServersListByManager(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  iscsi_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iscsiServersListMetricDefinition(const QString &device_name, const QString &iscsi_server_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  iscsi_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void iscsiServersListMetrics(const QString &device_name, const QString &iscsi_server_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void iscsiServersBackupNowCallback(OAIHttpRequestWorker *worker);
    void iscsiServersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void iscsiServersDeleteCallback(OAIHttpRequestWorker *worker);
    void iscsiServersGetCallback(OAIHttpRequestWorker *worker);
    void iscsiServersListByDeviceCallback(OAIHttpRequestWorker *worker);
    void iscsiServersListByManagerCallback(OAIHttpRequestWorker *worker);
    void iscsiServersListMetricDefinitionCallback(OAIHttpRequestWorker *worker);
    void iscsiServersListMetricsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void iscsiServersBackupNowSignal();
    void iscsiServersCreateOrUpdateSignal(OAIISCSIServer summary);
    void iscsiServersDeleteSignal();
    void iscsiServersGetSignal(OAIISCSIServer summary);
    void iscsiServersListByDeviceSignal(OAIISCSIServerList summary);
    void iscsiServersListByManagerSignal(OAIISCSIServerList summary);
    void iscsiServersListMetricDefinitionSignal(OAIMetricDefinitionList summary);
    void iscsiServersListMetricsSignal(OAIMetricList summary);


    void iscsiServersBackupNowSignalFull(OAIHttpRequestWorker *worker);
    void iscsiServersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIISCSIServer summary);
    void iscsiServersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void iscsiServersGetSignalFull(OAIHttpRequestWorker *worker, OAIISCSIServer summary);
    void iscsiServersListByDeviceSignalFull(OAIHttpRequestWorker *worker, OAIISCSIServerList summary);
    void iscsiServersListByManagerSignalFull(OAIHttpRequestWorker *worker, OAIISCSIServerList summary);
    void iscsiServersListMetricDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionList summary);
    void iscsiServersListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricList summary);

    Q_DECL_DEPRECATED_X("Use iscsiServersBackupNowSignalError() instead")
    void iscsiServersBackupNowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersBackupNowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersCreateOrUpdateSignalError() instead")
    void iscsiServersCreateOrUpdateSignalE(OAIISCSIServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersCreateOrUpdateSignalError(OAIISCSIServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersDeleteSignalError() instead")
    void iscsiServersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersGetSignalError() instead")
    void iscsiServersGetSignalE(OAIISCSIServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersGetSignalError(OAIISCSIServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersListByDeviceSignalError() instead")
    void iscsiServersListByDeviceSignalE(OAIISCSIServerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersListByDeviceSignalError(OAIISCSIServerList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersListByManagerSignalError() instead")
    void iscsiServersListByManagerSignalE(OAIISCSIServerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersListByManagerSignalError(OAIISCSIServerList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersListMetricDefinitionSignalError() instead")
    void iscsiServersListMetricDefinitionSignalE(OAIMetricDefinitionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersListMetricDefinitionSignalError(OAIMetricDefinitionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersListMetricsSignalError() instead")
    void iscsiServersListMetricsSignalE(OAIMetricList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersListMetricsSignalError(OAIMetricList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use iscsiServersBackupNowSignalErrorFull() instead")
    void iscsiServersBackupNowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersBackupNowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersCreateOrUpdateSignalErrorFull() instead")
    void iscsiServersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersDeleteSignalErrorFull() instead")
    void iscsiServersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersGetSignalErrorFull() instead")
    void iscsiServersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersListByDeviceSignalErrorFull() instead")
    void iscsiServersListByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersListByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersListByManagerSignalErrorFull() instead")
    void iscsiServersListByManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersListByManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersListMetricDefinitionSignalErrorFull() instead")
    void iscsiServersListMetricDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersListMetricDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iscsiServersListMetricsSignalErrorFull() instead")
    void iscsiServersListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iscsiServersListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
