/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIManagersApi_H
#define OAI_OAIManagersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEncryptionSettings.h"
#include "OAIError.h"
#include "OAIManager.h"
#include "OAIManagerExtendedInfo.h"
#include "OAIManagerList.h"
#include "OAIManagerPatch.h"
#include "OAIMetricDefinitionList.h"
#include "OAIMetricList.h"
#include "OAISymmetricEncryptedSecret.h"
#include "OAIUploadCertificateRequest.h"
#include "OAIUploadCertificateResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIManagersApi : public QObject {
    Q_OBJECT

public:
    OAIManagersApi(const int timeOut = 0);
    ~OAIManagersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  manager_extended_info OAIManagerExtendedInfo [required]
    */
    virtual void managersCreateExtendedInfo(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIManagerExtendedInfo &manager_extended_info);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  manager OAIManager [required]
    */
    virtual void managersCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIManager &manager);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managersDelete(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managersDeleteExtendedInfo(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managersGet(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managersGetEncryptionKey(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managersGetEncryptionSettings(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managersGetExtendedInfo(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managersList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managersListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managersListMetricDefinition(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void managersListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIManagerPatch [required]
    */
    virtual void managersUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIManagerPatch &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  manager_extended_info OAIManagerExtendedInfo [required]
    */
    virtual void managersUpdateExtendedInfo(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const QString &if_match, const OAIManagerExtendedInfo &manager_extended_info);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  upload_certificate_requestrequest OAIUploadCertificateRequest [required]
    */
    virtual void managersUploadRegistrationCertificate(const QString &certificate_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIUploadCertificateRequest &upload_certificate_requestrequest);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void managersCreateExtendedInfoCallback(OAIHttpRequestWorker *worker);
    void managersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void managersDeleteCallback(OAIHttpRequestWorker *worker);
    void managersDeleteExtendedInfoCallback(OAIHttpRequestWorker *worker);
    void managersGetCallback(OAIHttpRequestWorker *worker);
    void managersGetEncryptionKeyCallback(OAIHttpRequestWorker *worker);
    void managersGetEncryptionSettingsCallback(OAIHttpRequestWorker *worker);
    void managersGetExtendedInfoCallback(OAIHttpRequestWorker *worker);
    void managersListCallback(OAIHttpRequestWorker *worker);
    void managersListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void managersListMetricDefinitionCallback(OAIHttpRequestWorker *worker);
    void managersListMetricsCallback(OAIHttpRequestWorker *worker);
    void managersUpdateCallback(OAIHttpRequestWorker *worker);
    void managersUpdateExtendedInfoCallback(OAIHttpRequestWorker *worker);
    void managersUploadRegistrationCertificateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void managersCreateExtendedInfoSignal(OAIManagerExtendedInfo summary);
    void managersCreateOrUpdateSignal(OAIManager summary);
    void managersDeleteSignal();
    void managersDeleteExtendedInfoSignal();
    void managersGetSignal(OAIManager summary);
    void managersGetEncryptionKeySignal(OAISymmetricEncryptedSecret summary);
    void managersGetEncryptionSettingsSignal(OAIEncryptionSettings summary);
    void managersGetExtendedInfoSignal(OAIManagerExtendedInfo summary);
    void managersListSignal(OAIManagerList summary);
    void managersListByResourceGroupSignal(OAIManagerList summary);
    void managersListMetricDefinitionSignal(OAIMetricDefinitionList summary);
    void managersListMetricsSignal(OAIMetricList summary);
    void managersUpdateSignal(OAIManager summary);
    void managersUpdateExtendedInfoSignal(OAIManagerExtendedInfo summary);
    void managersUploadRegistrationCertificateSignal(OAIUploadCertificateResponse summary);


    void managersCreateExtendedInfoSignalFull(OAIHttpRequestWorker *worker, OAIManagerExtendedInfo summary);
    void managersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManager summary);
    void managersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void managersDeleteExtendedInfoSignalFull(OAIHttpRequestWorker *worker);
    void managersGetSignalFull(OAIHttpRequestWorker *worker, OAIManager summary);
    void managersGetEncryptionKeySignalFull(OAIHttpRequestWorker *worker, OAISymmetricEncryptedSecret summary);
    void managersGetEncryptionSettingsSignalFull(OAIHttpRequestWorker *worker, OAIEncryptionSettings summary);
    void managersGetExtendedInfoSignalFull(OAIHttpRequestWorker *worker, OAIManagerExtendedInfo summary);
    void managersListSignalFull(OAIHttpRequestWorker *worker, OAIManagerList summary);
    void managersListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIManagerList summary);
    void managersListMetricDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionList summary);
    void managersListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricList summary);
    void managersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManager summary);
    void managersUpdateExtendedInfoSignalFull(OAIHttpRequestWorker *worker, OAIManagerExtendedInfo summary);
    void managersUploadRegistrationCertificateSignalFull(OAIHttpRequestWorker *worker, OAIUploadCertificateResponse summary);

    Q_DECL_DEPRECATED_X("Use managersCreateExtendedInfoSignalError() instead")
    void managersCreateExtendedInfoSignalE(OAIManagerExtendedInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managersCreateExtendedInfoSignalError(OAIManagerExtendedInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersCreateOrUpdateSignalError() instead")
    void managersCreateOrUpdateSignalE(OAIManager summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managersCreateOrUpdateSignalError(OAIManager summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersDeleteSignalError() instead")
    void managersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersDeleteExtendedInfoSignalError() instead")
    void managersDeleteExtendedInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managersDeleteExtendedInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersGetSignalError() instead")
    void managersGetSignalE(OAIManager summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managersGetSignalError(OAIManager summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersGetEncryptionKeySignalError() instead")
    void managersGetEncryptionKeySignalE(OAISymmetricEncryptedSecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managersGetEncryptionKeySignalError(OAISymmetricEncryptedSecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersGetEncryptionSettingsSignalError() instead")
    void managersGetEncryptionSettingsSignalE(OAIEncryptionSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managersGetEncryptionSettingsSignalError(OAIEncryptionSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersGetExtendedInfoSignalError() instead")
    void managersGetExtendedInfoSignalE(OAIManagerExtendedInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managersGetExtendedInfoSignalError(OAIManagerExtendedInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersListSignalError() instead")
    void managersListSignalE(OAIManagerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managersListSignalError(OAIManagerList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersListByResourceGroupSignalError() instead")
    void managersListByResourceGroupSignalE(OAIManagerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managersListByResourceGroupSignalError(OAIManagerList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersListMetricDefinitionSignalError() instead")
    void managersListMetricDefinitionSignalE(OAIMetricDefinitionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managersListMetricDefinitionSignalError(OAIMetricDefinitionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersListMetricsSignalError() instead")
    void managersListMetricsSignalE(OAIMetricList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managersListMetricsSignalError(OAIMetricList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersUpdateSignalError() instead")
    void managersUpdateSignalE(OAIManager summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managersUpdateSignalError(OAIManager summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersUpdateExtendedInfoSignalError() instead")
    void managersUpdateExtendedInfoSignalE(OAIManagerExtendedInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managersUpdateExtendedInfoSignalError(OAIManagerExtendedInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersUploadRegistrationCertificateSignalError() instead")
    void managersUploadRegistrationCertificateSignalE(OAIUploadCertificateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managersUploadRegistrationCertificateSignalError(OAIUploadCertificateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use managersCreateExtendedInfoSignalErrorFull() instead")
    void managersCreateExtendedInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersCreateExtendedInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersCreateOrUpdateSignalErrorFull() instead")
    void managersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersDeleteSignalErrorFull() instead")
    void managersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersDeleteExtendedInfoSignalErrorFull() instead")
    void managersDeleteExtendedInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersDeleteExtendedInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersGetSignalErrorFull() instead")
    void managersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersGetEncryptionKeySignalErrorFull() instead")
    void managersGetEncryptionKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersGetEncryptionKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersGetEncryptionSettingsSignalErrorFull() instead")
    void managersGetEncryptionSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersGetEncryptionSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersGetExtendedInfoSignalErrorFull() instead")
    void managersGetExtendedInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersGetExtendedInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersListSignalErrorFull() instead")
    void managersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersListByResourceGroupSignalErrorFull() instead")
    void managersListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersListMetricDefinitionSignalErrorFull() instead")
    void managersListMetricDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersListMetricDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersListMetricsSignalErrorFull() instead")
    void managersListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersUpdateSignalErrorFull() instead")
    void managersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersUpdateExtendedInfoSignalErrorFull() instead")
    void managersUpdateExtendedInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersUpdateExtendedInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managersUploadRegistrationCertificateSignalErrorFull() instead")
    void managersUploadRegistrationCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managersUploadRegistrationCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
