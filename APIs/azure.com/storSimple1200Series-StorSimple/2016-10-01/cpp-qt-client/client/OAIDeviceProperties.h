/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeviceProperties.h
 *
 * Encases all the properties of the Device
 */

#ifndef OAIDeviceProperties_H
#define OAIDeviceProperties_H

#include <QJsonObject>

#include "OAIDeviceDetails.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeviceDetails;

class OAIDeviceProperties : public OAIObject {
public:
    OAIDeviceProperties();
    OAIDeviceProperties(QString json);
    ~OAIDeviceProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getActivationTime() const;
    void setActivationTime(const QDateTime &activation_time);
    bool is_activation_time_Set() const;
    bool is_activation_time_Valid() const;

    QList<QString> getAllowedDeviceOperations() const;
    void setAllowedDeviceOperations(const QList<QString> &allowed_device_operations);
    bool is_allowed_device_operations_Set() const;
    bool is_allowed_device_operations_Valid() const;

    QString getCulture() const;
    void setCulture(const QString &culture);
    bool is_culture_Set() const;
    bool is_culture_Valid() const;

    OAIDeviceDetails getDetails() const;
    void setDetails(const OAIDeviceDetails &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QList<QString> getDeviceCapabilities() const;
    void setDeviceCapabilities(const QList<QString> &device_capabilities);
    bool is_device_capabilities_Set() const;
    bool is_device_capabilities_Valid() const;

    QString getDeviceConfigurationStatus() const;
    void setDeviceConfigurationStatus(const QString &device_configuration_status);
    bool is_device_configuration_status_Set() const;
    bool is_device_configuration_status_Valid() const;

    QString getDeviceDescription() const;
    void setDeviceDescription(const QString &device_description);
    bool is_device_description_Set() const;
    bool is_device_description_Valid() const;

    QString getDeviceSoftwareVersion() const;
    void setDeviceSoftwareVersion(const QString &device_software_version);
    bool is_device_software_version_Set() const;
    bool is_device_software_version_Valid() const;

    QString getDomainName() const;
    void setDomainName(const QString &domain_name);
    bool is_domain_name_Set() const;
    bool is_domain_name_Valid() const;

    QString getFriendlySoftwareName() const;
    void setFriendlySoftwareName(const QString &friendly_software_name);
    bool is_friendly_software_name_Set() const;
    bool is_friendly_software_name_Valid() const;

    QString getModelDescription() const;
    void setModelDescription(const QString &model_description);
    bool is_model_description_Set() const;
    bool is_model_description_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_activation_time;
    bool m_activation_time_isSet;
    bool m_activation_time_isValid;

    QList<QString> m_allowed_device_operations;
    bool m_allowed_device_operations_isSet;
    bool m_allowed_device_operations_isValid;

    QString m_culture;
    bool m_culture_isSet;
    bool m_culture_isValid;

    OAIDeviceDetails m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QList<QString> m_device_capabilities;
    bool m_device_capabilities_isSet;
    bool m_device_capabilities_isValid;

    QString m_device_configuration_status;
    bool m_device_configuration_status_isSet;
    bool m_device_configuration_status_isValid;

    QString m_device_description;
    bool m_device_description_isSet;
    bool m_device_description_isValid;

    QString m_device_software_version;
    bool m_device_software_version_isSet;
    bool m_device_software_version_isValid;

    QString m_domain_name;
    bool m_domain_name_isSet;
    bool m_domain_name_isValid;

    QString m_friendly_software_name;
    bool m_friendly_software_name_isSet;
    bool m_friendly_software_name_isValid;

    QString m_model_description;
    bool m_model_description_isSet;
    bool m_model_description_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeviceProperties)

#endif // OAIDeviceProperties_H
