/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailoverRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailoverRequest::OAIFailoverRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailoverRequest::OAIFailoverRequest() {
    this->initializeModel();
}

OAIFailoverRequest::~OAIFailoverRequest() {}

void OAIFailoverRequest::initializeModel() {

    m_accesspoint_ids_isSet = false;
    m_accesspoint_ids_isValid = false;

    m_keep_source_device_isSet = false;
    m_keep_source_device_isValid = false;

    m_skip_validation_isSet = false;
    m_skip_validation_isValid = false;

    m_target_device_id_isSet = false;
    m_target_device_id_isValid = false;
}

void OAIFailoverRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailoverRequest::fromJsonObject(QJsonObject json) {

    m_accesspoint_ids_isValid = ::OpenAPI::fromJsonValue(m_accesspoint_ids, json[QString("accesspointIds")]);
    m_accesspoint_ids_isSet = !json[QString("accesspointIds")].isNull() && m_accesspoint_ids_isValid;

    m_keep_source_device_isValid = ::OpenAPI::fromJsonValue(m_keep_source_device, json[QString("keepSourceDevice")]);
    m_keep_source_device_isSet = !json[QString("keepSourceDevice")].isNull() && m_keep_source_device_isValid;

    m_skip_validation_isValid = ::OpenAPI::fromJsonValue(m_skip_validation, json[QString("skipValidation")]);
    m_skip_validation_isSet = !json[QString("skipValidation")].isNull() && m_skip_validation_isValid;

    m_target_device_id_isValid = ::OpenAPI::fromJsonValue(m_target_device_id, json[QString("targetDeviceId")]);
    m_target_device_id_isSet = !json[QString("targetDeviceId")].isNull() && m_target_device_id_isValid;
}

QString OAIFailoverRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailoverRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_accesspoint_ids.size() > 0) {
        obj.insert(QString("accesspointIds"), ::OpenAPI::toJsonValue(m_accesspoint_ids));
    }
    if (m_keep_source_device_isSet) {
        obj.insert(QString("keepSourceDevice"), ::OpenAPI::toJsonValue(m_keep_source_device));
    }
    if (m_skip_validation_isSet) {
        obj.insert(QString("skipValidation"), ::OpenAPI::toJsonValue(m_skip_validation));
    }
    if (m_target_device_id_isSet) {
        obj.insert(QString("targetDeviceId"), ::OpenAPI::toJsonValue(m_target_device_id));
    }
    return obj;
}

QList<QString> OAIFailoverRequest::getAccesspointIds() const {
    return m_accesspoint_ids;
}
void OAIFailoverRequest::setAccesspointIds(const QList<QString> &accesspoint_ids) {
    m_accesspoint_ids = accesspoint_ids;
    m_accesspoint_ids_isSet = true;
}

bool OAIFailoverRequest::is_accesspoint_ids_Set() const{
    return m_accesspoint_ids_isSet;
}

bool OAIFailoverRequest::is_accesspoint_ids_Valid() const{
    return m_accesspoint_ids_isValid;
}

bool OAIFailoverRequest::isKeepSourceDevice() const {
    return m_keep_source_device;
}
void OAIFailoverRequest::setKeepSourceDevice(const bool &keep_source_device) {
    m_keep_source_device = keep_source_device;
    m_keep_source_device_isSet = true;
}

bool OAIFailoverRequest::is_keep_source_device_Set() const{
    return m_keep_source_device_isSet;
}

bool OAIFailoverRequest::is_keep_source_device_Valid() const{
    return m_keep_source_device_isValid;
}

bool OAIFailoverRequest::isSkipValidation() const {
    return m_skip_validation;
}
void OAIFailoverRequest::setSkipValidation(const bool &skip_validation) {
    m_skip_validation = skip_validation;
    m_skip_validation_isSet = true;
}

bool OAIFailoverRequest::is_skip_validation_Set() const{
    return m_skip_validation_isSet;
}

bool OAIFailoverRequest::is_skip_validation_Valid() const{
    return m_skip_validation_isValid;
}

QString OAIFailoverRequest::getTargetDeviceId() const {
    return m_target_device_id;
}
void OAIFailoverRequest::setTargetDeviceId(const QString &target_device_id) {
    m_target_device_id = target_device_id;
    m_target_device_id_isSet = true;
}

bool OAIFailoverRequest::is_target_device_id_Set() const{
    return m_target_device_id_isSet;
}

bool OAIFailoverRequest::is_target_device_id_Valid() const{
    return m_target_device_id_isValid;
}

bool OAIFailoverRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accesspoint_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_source_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_validation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailoverRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
