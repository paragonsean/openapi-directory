/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceProperties::OAIDeviceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceProperties::OAIDeviceProperties() {
    this->initializeModel();
}

OAIDeviceProperties::~OAIDeviceProperties() {}

void OAIDeviceProperties::initializeModel() {

    m_activation_time_isSet = false;
    m_activation_time_isValid = false;

    m_allowed_device_operations_isSet = false;
    m_allowed_device_operations_isValid = false;

    m_culture_isSet = false;
    m_culture_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_device_capabilities_isSet = false;
    m_device_capabilities_isValid = false;

    m_device_configuration_status_isSet = false;
    m_device_configuration_status_isValid = false;

    m_device_description_isSet = false;
    m_device_description_isValid = false;

    m_device_software_version_isSet = false;
    m_device_software_version_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_friendly_software_name_isSet = false;
    m_friendly_software_name_isValid = false;

    m_model_description_isSet = false;
    m_model_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDeviceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceProperties::fromJsonObject(QJsonObject json) {

    m_activation_time_isValid = ::OpenAPI::fromJsonValue(m_activation_time, json[QString("activationTime")]);
    m_activation_time_isSet = !json[QString("activationTime")].isNull() && m_activation_time_isValid;

    m_allowed_device_operations_isValid = ::OpenAPI::fromJsonValue(m_allowed_device_operations, json[QString("allowedDeviceOperations")]);
    m_allowed_device_operations_isSet = !json[QString("allowedDeviceOperations")].isNull() && m_allowed_device_operations_isValid;

    m_culture_isValid = ::OpenAPI::fromJsonValue(m_culture, json[QString("culture")]);
    m_culture_isSet = !json[QString("culture")].isNull() && m_culture_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_device_capabilities_isValid = ::OpenAPI::fromJsonValue(m_device_capabilities, json[QString("deviceCapabilities")]);
    m_device_capabilities_isSet = !json[QString("deviceCapabilities")].isNull() && m_device_capabilities_isValid;

    m_device_configuration_status_isValid = ::OpenAPI::fromJsonValue(m_device_configuration_status, json[QString("deviceConfigurationStatus")]);
    m_device_configuration_status_isSet = !json[QString("deviceConfigurationStatus")].isNull() && m_device_configuration_status_isValid;

    m_device_description_isValid = ::OpenAPI::fromJsonValue(m_device_description, json[QString("deviceDescription")]);
    m_device_description_isSet = !json[QString("deviceDescription")].isNull() && m_device_description_isValid;

    m_device_software_version_isValid = ::OpenAPI::fromJsonValue(m_device_software_version, json[QString("deviceSoftwareVersion")]);
    m_device_software_version_isSet = !json[QString("deviceSoftwareVersion")].isNull() && m_device_software_version_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domainName")]);
    m_domain_name_isSet = !json[QString("domainName")].isNull() && m_domain_name_isValid;

    m_friendly_software_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_software_name, json[QString("friendlySoftwareName")]);
    m_friendly_software_name_isSet = !json[QString("friendlySoftwareName")].isNull() && m_friendly_software_name_isValid;

    m_model_description_isValid = ::OpenAPI::fromJsonValue(m_model_description, json[QString("modelDescription")]);
    m_model_description_isSet = !json[QString("modelDescription")].isNull() && m_model_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDeviceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_time_isSet) {
        obj.insert(QString("activationTime"), ::OpenAPI::toJsonValue(m_activation_time));
    }
    if (m_allowed_device_operations.size() > 0) {
        obj.insert(QString("allowedDeviceOperations"), ::OpenAPI::toJsonValue(m_allowed_device_operations));
    }
    if (m_culture_isSet) {
        obj.insert(QString("culture"), ::OpenAPI::toJsonValue(m_culture));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_device_capabilities.size() > 0) {
        obj.insert(QString("deviceCapabilities"), ::OpenAPI::toJsonValue(m_device_capabilities));
    }
    if (m_device_configuration_status_isSet) {
        obj.insert(QString("deviceConfigurationStatus"), ::OpenAPI::toJsonValue(m_device_configuration_status));
    }
    if (m_device_description_isSet) {
        obj.insert(QString("deviceDescription"), ::OpenAPI::toJsonValue(m_device_description));
    }
    if (m_device_software_version_isSet) {
        obj.insert(QString("deviceSoftwareVersion"), ::OpenAPI::toJsonValue(m_device_software_version));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("domainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_friendly_software_name_isSet) {
        obj.insert(QString("friendlySoftwareName"), ::OpenAPI::toJsonValue(m_friendly_software_name));
    }
    if (m_model_description_isSet) {
        obj.insert(QString("modelDescription"), ::OpenAPI::toJsonValue(m_model_description));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime OAIDeviceProperties::getActivationTime() const {
    return m_activation_time;
}
void OAIDeviceProperties::setActivationTime(const QDateTime &activation_time) {
    m_activation_time = activation_time;
    m_activation_time_isSet = true;
}

bool OAIDeviceProperties::is_activation_time_Set() const{
    return m_activation_time_isSet;
}

bool OAIDeviceProperties::is_activation_time_Valid() const{
    return m_activation_time_isValid;
}

QList<QString> OAIDeviceProperties::getAllowedDeviceOperations() const {
    return m_allowed_device_operations;
}
void OAIDeviceProperties::setAllowedDeviceOperations(const QList<QString> &allowed_device_operations) {
    m_allowed_device_operations = allowed_device_operations;
    m_allowed_device_operations_isSet = true;
}

bool OAIDeviceProperties::is_allowed_device_operations_Set() const{
    return m_allowed_device_operations_isSet;
}

bool OAIDeviceProperties::is_allowed_device_operations_Valid() const{
    return m_allowed_device_operations_isValid;
}

QString OAIDeviceProperties::getCulture() const {
    return m_culture;
}
void OAIDeviceProperties::setCulture(const QString &culture) {
    m_culture = culture;
    m_culture_isSet = true;
}

bool OAIDeviceProperties::is_culture_Set() const{
    return m_culture_isSet;
}

bool OAIDeviceProperties::is_culture_Valid() const{
    return m_culture_isValid;
}

OAIDeviceDetails OAIDeviceProperties::getDetails() const {
    return m_details;
}
void OAIDeviceProperties::setDetails(const OAIDeviceDetails &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIDeviceProperties::is_details_Set() const{
    return m_details_isSet;
}

bool OAIDeviceProperties::is_details_Valid() const{
    return m_details_isValid;
}

QList<QString> OAIDeviceProperties::getDeviceCapabilities() const {
    return m_device_capabilities;
}
void OAIDeviceProperties::setDeviceCapabilities(const QList<QString> &device_capabilities) {
    m_device_capabilities = device_capabilities;
    m_device_capabilities_isSet = true;
}

bool OAIDeviceProperties::is_device_capabilities_Set() const{
    return m_device_capabilities_isSet;
}

bool OAIDeviceProperties::is_device_capabilities_Valid() const{
    return m_device_capabilities_isValid;
}

QString OAIDeviceProperties::getDeviceConfigurationStatus() const {
    return m_device_configuration_status;
}
void OAIDeviceProperties::setDeviceConfigurationStatus(const QString &device_configuration_status) {
    m_device_configuration_status = device_configuration_status;
    m_device_configuration_status_isSet = true;
}

bool OAIDeviceProperties::is_device_configuration_status_Set() const{
    return m_device_configuration_status_isSet;
}

bool OAIDeviceProperties::is_device_configuration_status_Valid() const{
    return m_device_configuration_status_isValid;
}

QString OAIDeviceProperties::getDeviceDescription() const {
    return m_device_description;
}
void OAIDeviceProperties::setDeviceDescription(const QString &device_description) {
    m_device_description = device_description;
    m_device_description_isSet = true;
}

bool OAIDeviceProperties::is_device_description_Set() const{
    return m_device_description_isSet;
}

bool OAIDeviceProperties::is_device_description_Valid() const{
    return m_device_description_isValid;
}

QString OAIDeviceProperties::getDeviceSoftwareVersion() const {
    return m_device_software_version;
}
void OAIDeviceProperties::setDeviceSoftwareVersion(const QString &device_software_version) {
    m_device_software_version = device_software_version;
    m_device_software_version_isSet = true;
}

bool OAIDeviceProperties::is_device_software_version_Set() const{
    return m_device_software_version_isSet;
}

bool OAIDeviceProperties::is_device_software_version_Valid() const{
    return m_device_software_version_isValid;
}

QString OAIDeviceProperties::getDomainName() const {
    return m_domain_name;
}
void OAIDeviceProperties::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDeviceProperties::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDeviceProperties::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIDeviceProperties::getFriendlySoftwareName() const {
    return m_friendly_software_name;
}
void OAIDeviceProperties::setFriendlySoftwareName(const QString &friendly_software_name) {
    m_friendly_software_name = friendly_software_name;
    m_friendly_software_name_isSet = true;
}

bool OAIDeviceProperties::is_friendly_software_name_Set() const{
    return m_friendly_software_name_isSet;
}

bool OAIDeviceProperties::is_friendly_software_name_Valid() const{
    return m_friendly_software_name_isValid;
}

QString OAIDeviceProperties::getModelDescription() const {
    return m_model_description;
}
void OAIDeviceProperties::setModelDescription(const QString &model_description) {
    m_model_description = model_description;
    m_model_description_isSet = true;
}

bool OAIDeviceProperties::is_model_description_Set() const{
    return m_model_description_isSet;
}

bool OAIDeviceProperties::is_model_description_Valid() const{
    return m_model_description_isValid;
}

QString OAIDeviceProperties::getStatus() const {
    return m_status;
}
void OAIDeviceProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeviceProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeviceProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeviceProperties::getType() const {
    return m_type;
}
void OAIDeviceProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeviceProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeviceProperties::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDeviceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_device_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_culture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_configuration_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_software_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
