/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAsymmetricEncryptedSecret.h
 *
 * This class can be used as the Type for any secret entity represented as Password, CertThumbprint, Algorithm. This class is intended to be used when the secret is encrypted with an asymmetric key pair. The encryptionAlgorithm field is mainly for future usage to potentially allow different entities encrypted using different algorithms.
 */

#ifndef OAIAsymmetricEncryptedSecret_H
#define OAIAsymmetricEncryptedSecret_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAsymmetricEncryptedSecret : public OAIObject {
public:
    OAIAsymmetricEncryptedSecret();
    OAIAsymmetricEncryptedSecret(QString json);
    ~OAIAsymmetricEncryptedSecret() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEncryptionAlgorithm() const;
    void setEncryptionAlgorithm(const QString &encryption_algorithm);
    bool is_encryption_algorithm_Set() const;
    bool is_encryption_algorithm_Valid() const;

    QString getEncryptionCertificateThumbprint() const;
    void setEncryptionCertificateThumbprint(const QString &encryption_certificate_thumbprint);
    bool is_encryption_certificate_thumbprint_Set() const;
    bool is_encryption_certificate_thumbprint_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_encryption_algorithm;
    bool m_encryption_algorithm_isSet;
    bool m_encryption_algorithm_isValid;

    QString m_encryption_certificate_thumbprint;
    bool m_encryption_certificate_thumbprint_isSet;
    bool m_encryption_certificate_thumbprint_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAsymmetricEncryptedSecret)

#endif // OAIAsymmetricEncryptedSecret_H
