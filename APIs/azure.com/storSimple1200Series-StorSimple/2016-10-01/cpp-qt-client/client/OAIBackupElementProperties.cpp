/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupElementProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupElementProperties::OAIBackupElementProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupElementProperties::OAIBackupElementProperties() {
    this->initializeModel();
}

OAIBackupElementProperties::~OAIBackupElementProperties() {}

void OAIBackupElementProperties::initializeModel() {

    m_data_policy_isSet = false;
    m_data_policy_isValid = false;

    m_endpoint_name_isSet = false;
    m_endpoint_name_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;
}

void OAIBackupElementProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupElementProperties::fromJsonObject(QJsonObject json) {

    m_data_policy_isValid = ::OpenAPI::fromJsonValue(m_data_policy, json[QString("dataPolicy")]);
    m_data_policy_isSet = !json[QString("dataPolicy")].isNull() && m_data_policy_isValid;

    m_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_name, json[QString("endpointName")]);
    m_endpoint_name_isSet = !json[QString("endpointName")].isNull() && m_endpoint_name_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("sizeInBytes")]);
    m_size_in_bytes_isSet = !json[QString("sizeInBytes")].isNull() && m_size_in_bytes_isValid;
}

QString OAIBackupElementProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupElementProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_policy_isSet) {
        obj.insert(QString("dataPolicy"), ::OpenAPI::toJsonValue(m_data_policy));
    }
    if (m_endpoint_name_isSet) {
        obj.insert(QString("endpointName"), ::OpenAPI::toJsonValue(m_endpoint_name));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("sizeInBytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    return obj;
}

QString OAIBackupElementProperties::getDataPolicy() const {
    return m_data_policy;
}
void OAIBackupElementProperties::setDataPolicy(const QString &data_policy) {
    m_data_policy = data_policy;
    m_data_policy_isSet = true;
}

bool OAIBackupElementProperties::is_data_policy_Set() const{
    return m_data_policy_isSet;
}

bool OAIBackupElementProperties::is_data_policy_Valid() const{
    return m_data_policy_isValid;
}

QString OAIBackupElementProperties::getEndpointName() const {
    return m_endpoint_name;
}
void OAIBackupElementProperties::setEndpointName(const QString &endpoint_name) {
    m_endpoint_name = endpoint_name;
    m_endpoint_name_isSet = true;
}

bool OAIBackupElementProperties::is_endpoint_name_Set() const{
    return m_endpoint_name_isSet;
}

bool OAIBackupElementProperties::is_endpoint_name_Valid() const{
    return m_endpoint_name_isValid;
}

qint64 OAIBackupElementProperties::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIBackupElementProperties::setSizeInBytes(const qint64 &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIBackupElementProperties::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIBackupElementProperties::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

bool OAIBackupElementProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupElementProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_policy_isValid && m_endpoint_name_isValid && m_size_in_bytes_isValid && true;
}

} // namespace OpenAPI
