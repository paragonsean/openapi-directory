/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatesProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatesProperties::OAIUpdatesProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatesProperties::OAIUpdatesProperties() {
    this->initializeModel();
}

OAIUpdatesProperties::~OAIUpdatesProperties() {}

void OAIUpdatesProperties::initializeModel() {

    m_device_last_scanned_time_isSet = false;
    m_device_last_scanned_time_isValid = false;

    m_device_version_isSet = false;
    m_device_version_isValid = false;

    m_in_progress_download_job_id_isSet = false;
    m_in_progress_download_job_id_isValid = false;

    m_in_progress_download_job_started_time_isSet = false;
    m_in_progress_download_job_started_time_isValid = false;

    m_in_progress_install_job_id_isSet = false;
    m_in_progress_install_job_id_isValid = false;

    m_in_progress_install_job_started_time_isSet = false;
    m_in_progress_install_job_started_time_isValid = false;

    m_in_progress_scan_started_time_isSet = false;
    m_in_progress_scan_started_time_isValid = false;

    m_last_completed_download_job_time_isSet = false;
    m_last_completed_download_job_time_isValid = false;

    m_last_completed_install_job_time_isSet = false;
    m_last_completed_install_job_time_isValid = false;

    m_last_completed_scan_time_isSet = false;
    m_last_completed_scan_time_isValid = false;

    m_reboot_required_for_install_isSet = false;
    m_reboot_required_for_install_isValid = false;

    m_regular_updates_available_isSet = false;
    m_regular_updates_available_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_items_pending_for_download_isSet = false;
    m_total_items_pending_for_download_isValid = false;

    m_total_items_pending_for_install_isSet = false;
    m_total_items_pending_for_install_isValid = false;
}

void OAIUpdatesProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatesProperties::fromJsonObject(QJsonObject json) {

    m_device_last_scanned_time_isValid = ::OpenAPI::fromJsonValue(m_device_last_scanned_time, json[QString("deviceLastScannedTime")]);
    m_device_last_scanned_time_isSet = !json[QString("deviceLastScannedTime")].isNull() && m_device_last_scanned_time_isValid;

    m_device_version_isValid = ::OpenAPI::fromJsonValue(m_device_version, json[QString("deviceVersion")]);
    m_device_version_isSet = !json[QString("deviceVersion")].isNull() && m_device_version_isValid;

    m_in_progress_download_job_id_isValid = ::OpenAPI::fromJsonValue(m_in_progress_download_job_id, json[QString("inProgressDownloadJobId")]);
    m_in_progress_download_job_id_isSet = !json[QString("inProgressDownloadJobId")].isNull() && m_in_progress_download_job_id_isValid;

    m_in_progress_download_job_started_time_isValid = ::OpenAPI::fromJsonValue(m_in_progress_download_job_started_time, json[QString("inProgressDownloadJobStartedTime")]);
    m_in_progress_download_job_started_time_isSet = !json[QString("inProgressDownloadJobStartedTime")].isNull() && m_in_progress_download_job_started_time_isValid;

    m_in_progress_install_job_id_isValid = ::OpenAPI::fromJsonValue(m_in_progress_install_job_id, json[QString("inProgressInstallJobId")]);
    m_in_progress_install_job_id_isSet = !json[QString("inProgressInstallJobId")].isNull() && m_in_progress_install_job_id_isValid;

    m_in_progress_install_job_started_time_isValid = ::OpenAPI::fromJsonValue(m_in_progress_install_job_started_time, json[QString("inProgressInstallJobStartedTime")]);
    m_in_progress_install_job_started_time_isSet = !json[QString("inProgressInstallJobStartedTime")].isNull() && m_in_progress_install_job_started_time_isValid;

    m_in_progress_scan_started_time_isValid = ::OpenAPI::fromJsonValue(m_in_progress_scan_started_time, json[QString("inProgressScanStartedTime")]);
    m_in_progress_scan_started_time_isSet = !json[QString("inProgressScanStartedTime")].isNull() && m_in_progress_scan_started_time_isValid;

    m_last_completed_download_job_time_isValid = ::OpenAPI::fromJsonValue(m_last_completed_download_job_time, json[QString("lastCompletedDownloadJobTime")]);
    m_last_completed_download_job_time_isSet = !json[QString("lastCompletedDownloadJobTime")].isNull() && m_last_completed_download_job_time_isValid;

    m_last_completed_install_job_time_isValid = ::OpenAPI::fromJsonValue(m_last_completed_install_job_time, json[QString("lastCompletedInstallJobTime")]);
    m_last_completed_install_job_time_isSet = !json[QString("lastCompletedInstallJobTime")].isNull() && m_last_completed_install_job_time_isValid;

    m_last_completed_scan_time_isValid = ::OpenAPI::fromJsonValue(m_last_completed_scan_time, json[QString("lastCompletedScanTime")]);
    m_last_completed_scan_time_isSet = !json[QString("lastCompletedScanTime")].isNull() && m_last_completed_scan_time_isValid;

    m_reboot_required_for_install_isValid = ::OpenAPI::fromJsonValue(m_reboot_required_for_install, json[QString("rebootRequiredForInstall")]);
    m_reboot_required_for_install_isSet = !json[QString("rebootRequiredForInstall")].isNull() && m_reboot_required_for_install_isValid;

    m_regular_updates_available_isValid = ::OpenAPI::fromJsonValue(m_regular_updates_available, json[QString("regularUpdatesAvailable")]);
    m_regular_updates_available_isSet = !json[QString("regularUpdatesAvailable")].isNull() && m_regular_updates_available_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_items_pending_for_download_isValid = ::OpenAPI::fromJsonValue(m_total_items_pending_for_download, json[QString("totalItemsPendingForDownload")]);
    m_total_items_pending_for_download_isSet = !json[QString("totalItemsPendingForDownload")].isNull() && m_total_items_pending_for_download_isValid;

    m_total_items_pending_for_install_isValid = ::OpenAPI::fromJsonValue(m_total_items_pending_for_install, json[QString("totalItemsPendingForInstall")]);
    m_total_items_pending_for_install_isSet = !json[QString("totalItemsPendingForInstall")].isNull() && m_total_items_pending_for_install_isValid;
}

QString OAIUpdatesProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatesProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_device_last_scanned_time_isSet) {
        obj.insert(QString("deviceLastScannedTime"), ::OpenAPI::toJsonValue(m_device_last_scanned_time));
    }
    if (m_device_version_isSet) {
        obj.insert(QString("deviceVersion"), ::OpenAPI::toJsonValue(m_device_version));
    }
    if (m_in_progress_download_job_id_isSet) {
        obj.insert(QString("inProgressDownloadJobId"), ::OpenAPI::toJsonValue(m_in_progress_download_job_id));
    }
    if (m_in_progress_download_job_started_time_isSet) {
        obj.insert(QString("inProgressDownloadJobStartedTime"), ::OpenAPI::toJsonValue(m_in_progress_download_job_started_time));
    }
    if (m_in_progress_install_job_id_isSet) {
        obj.insert(QString("inProgressInstallJobId"), ::OpenAPI::toJsonValue(m_in_progress_install_job_id));
    }
    if (m_in_progress_install_job_started_time_isSet) {
        obj.insert(QString("inProgressInstallJobStartedTime"), ::OpenAPI::toJsonValue(m_in_progress_install_job_started_time));
    }
    if (m_in_progress_scan_started_time_isSet) {
        obj.insert(QString("inProgressScanStartedTime"), ::OpenAPI::toJsonValue(m_in_progress_scan_started_time));
    }
    if (m_last_completed_download_job_time_isSet) {
        obj.insert(QString("lastCompletedDownloadJobTime"), ::OpenAPI::toJsonValue(m_last_completed_download_job_time));
    }
    if (m_last_completed_install_job_time_isSet) {
        obj.insert(QString("lastCompletedInstallJobTime"), ::OpenAPI::toJsonValue(m_last_completed_install_job_time));
    }
    if (m_last_completed_scan_time_isSet) {
        obj.insert(QString("lastCompletedScanTime"), ::OpenAPI::toJsonValue(m_last_completed_scan_time));
    }
    if (m_reboot_required_for_install_isSet) {
        obj.insert(QString("rebootRequiredForInstall"), ::OpenAPI::toJsonValue(m_reboot_required_for_install));
    }
    if (m_regular_updates_available_isSet) {
        obj.insert(QString("regularUpdatesAvailable"), ::OpenAPI::toJsonValue(m_regular_updates_available));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_items_pending_for_download_isSet) {
        obj.insert(QString("totalItemsPendingForDownload"), ::OpenAPI::toJsonValue(m_total_items_pending_for_download));
    }
    if (m_total_items_pending_for_install_isSet) {
        obj.insert(QString("totalItemsPendingForInstall"), ::OpenAPI::toJsonValue(m_total_items_pending_for_install));
    }
    return obj;
}

QDateTime OAIUpdatesProperties::getDeviceLastScannedTime() const {
    return m_device_last_scanned_time;
}
void OAIUpdatesProperties::setDeviceLastScannedTime(const QDateTime &device_last_scanned_time) {
    m_device_last_scanned_time = device_last_scanned_time;
    m_device_last_scanned_time_isSet = true;
}

bool OAIUpdatesProperties::is_device_last_scanned_time_Set() const{
    return m_device_last_scanned_time_isSet;
}

bool OAIUpdatesProperties::is_device_last_scanned_time_Valid() const{
    return m_device_last_scanned_time_isValid;
}

QString OAIUpdatesProperties::getDeviceVersion() const {
    return m_device_version;
}
void OAIUpdatesProperties::setDeviceVersion(const QString &device_version) {
    m_device_version = device_version;
    m_device_version_isSet = true;
}

bool OAIUpdatesProperties::is_device_version_Set() const{
    return m_device_version_isSet;
}

bool OAIUpdatesProperties::is_device_version_Valid() const{
    return m_device_version_isValid;
}

QString OAIUpdatesProperties::getInProgressDownloadJobId() const {
    return m_in_progress_download_job_id;
}
void OAIUpdatesProperties::setInProgressDownloadJobId(const QString &in_progress_download_job_id) {
    m_in_progress_download_job_id = in_progress_download_job_id;
    m_in_progress_download_job_id_isSet = true;
}

bool OAIUpdatesProperties::is_in_progress_download_job_id_Set() const{
    return m_in_progress_download_job_id_isSet;
}

bool OAIUpdatesProperties::is_in_progress_download_job_id_Valid() const{
    return m_in_progress_download_job_id_isValid;
}

QDateTime OAIUpdatesProperties::getInProgressDownloadJobStartedTime() const {
    return m_in_progress_download_job_started_time;
}
void OAIUpdatesProperties::setInProgressDownloadJobStartedTime(const QDateTime &in_progress_download_job_started_time) {
    m_in_progress_download_job_started_time = in_progress_download_job_started_time;
    m_in_progress_download_job_started_time_isSet = true;
}

bool OAIUpdatesProperties::is_in_progress_download_job_started_time_Set() const{
    return m_in_progress_download_job_started_time_isSet;
}

bool OAIUpdatesProperties::is_in_progress_download_job_started_time_Valid() const{
    return m_in_progress_download_job_started_time_isValid;
}

QString OAIUpdatesProperties::getInProgressInstallJobId() const {
    return m_in_progress_install_job_id;
}
void OAIUpdatesProperties::setInProgressInstallJobId(const QString &in_progress_install_job_id) {
    m_in_progress_install_job_id = in_progress_install_job_id;
    m_in_progress_install_job_id_isSet = true;
}

bool OAIUpdatesProperties::is_in_progress_install_job_id_Set() const{
    return m_in_progress_install_job_id_isSet;
}

bool OAIUpdatesProperties::is_in_progress_install_job_id_Valid() const{
    return m_in_progress_install_job_id_isValid;
}

QDateTime OAIUpdatesProperties::getInProgressInstallJobStartedTime() const {
    return m_in_progress_install_job_started_time;
}
void OAIUpdatesProperties::setInProgressInstallJobStartedTime(const QDateTime &in_progress_install_job_started_time) {
    m_in_progress_install_job_started_time = in_progress_install_job_started_time;
    m_in_progress_install_job_started_time_isSet = true;
}

bool OAIUpdatesProperties::is_in_progress_install_job_started_time_Set() const{
    return m_in_progress_install_job_started_time_isSet;
}

bool OAIUpdatesProperties::is_in_progress_install_job_started_time_Valid() const{
    return m_in_progress_install_job_started_time_isValid;
}

QDateTime OAIUpdatesProperties::getInProgressScanStartedTime() const {
    return m_in_progress_scan_started_time;
}
void OAIUpdatesProperties::setInProgressScanStartedTime(const QDateTime &in_progress_scan_started_time) {
    m_in_progress_scan_started_time = in_progress_scan_started_time;
    m_in_progress_scan_started_time_isSet = true;
}

bool OAIUpdatesProperties::is_in_progress_scan_started_time_Set() const{
    return m_in_progress_scan_started_time_isSet;
}

bool OAIUpdatesProperties::is_in_progress_scan_started_time_Valid() const{
    return m_in_progress_scan_started_time_isValid;
}

QDateTime OAIUpdatesProperties::getLastCompletedDownloadJobTime() const {
    return m_last_completed_download_job_time;
}
void OAIUpdatesProperties::setLastCompletedDownloadJobTime(const QDateTime &last_completed_download_job_time) {
    m_last_completed_download_job_time = last_completed_download_job_time;
    m_last_completed_download_job_time_isSet = true;
}

bool OAIUpdatesProperties::is_last_completed_download_job_time_Set() const{
    return m_last_completed_download_job_time_isSet;
}

bool OAIUpdatesProperties::is_last_completed_download_job_time_Valid() const{
    return m_last_completed_download_job_time_isValid;
}

QDateTime OAIUpdatesProperties::getLastCompletedInstallJobTime() const {
    return m_last_completed_install_job_time;
}
void OAIUpdatesProperties::setLastCompletedInstallJobTime(const QDateTime &last_completed_install_job_time) {
    m_last_completed_install_job_time = last_completed_install_job_time;
    m_last_completed_install_job_time_isSet = true;
}

bool OAIUpdatesProperties::is_last_completed_install_job_time_Set() const{
    return m_last_completed_install_job_time_isSet;
}

bool OAIUpdatesProperties::is_last_completed_install_job_time_Valid() const{
    return m_last_completed_install_job_time_isValid;
}

QDateTime OAIUpdatesProperties::getLastCompletedScanTime() const {
    return m_last_completed_scan_time;
}
void OAIUpdatesProperties::setLastCompletedScanTime(const QDateTime &last_completed_scan_time) {
    m_last_completed_scan_time = last_completed_scan_time;
    m_last_completed_scan_time_isSet = true;
}

bool OAIUpdatesProperties::is_last_completed_scan_time_Set() const{
    return m_last_completed_scan_time_isSet;
}

bool OAIUpdatesProperties::is_last_completed_scan_time_Valid() const{
    return m_last_completed_scan_time_isValid;
}

bool OAIUpdatesProperties::isRebootRequiredForInstall() const {
    return m_reboot_required_for_install;
}
void OAIUpdatesProperties::setRebootRequiredForInstall(const bool &reboot_required_for_install) {
    m_reboot_required_for_install = reboot_required_for_install;
    m_reboot_required_for_install_isSet = true;
}

bool OAIUpdatesProperties::is_reboot_required_for_install_Set() const{
    return m_reboot_required_for_install_isSet;
}

bool OAIUpdatesProperties::is_reboot_required_for_install_Valid() const{
    return m_reboot_required_for_install_isValid;
}

bool OAIUpdatesProperties::isRegularUpdatesAvailable() const {
    return m_regular_updates_available;
}
void OAIUpdatesProperties::setRegularUpdatesAvailable(const bool &regular_updates_available) {
    m_regular_updates_available = regular_updates_available;
    m_regular_updates_available_isSet = true;
}

bool OAIUpdatesProperties::is_regular_updates_available_Set() const{
    return m_regular_updates_available_isSet;
}

bool OAIUpdatesProperties::is_regular_updates_available_Valid() const{
    return m_regular_updates_available_isValid;
}

QString OAIUpdatesProperties::getStatus() const {
    return m_status;
}
void OAIUpdatesProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdatesProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdatesProperties::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIUpdatesProperties::getTotalItemsPendingForDownload() const {
    return m_total_items_pending_for_download;
}
void OAIUpdatesProperties::setTotalItemsPendingForDownload(const qint32 &total_items_pending_for_download) {
    m_total_items_pending_for_download = total_items_pending_for_download;
    m_total_items_pending_for_download_isSet = true;
}

bool OAIUpdatesProperties::is_total_items_pending_for_download_Set() const{
    return m_total_items_pending_for_download_isSet;
}

bool OAIUpdatesProperties::is_total_items_pending_for_download_Valid() const{
    return m_total_items_pending_for_download_isValid;
}

qint32 OAIUpdatesProperties::getTotalItemsPendingForInstall() const {
    return m_total_items_pending_for_install;
}
void OAIUpdatesProperties::setTotalItemsPendingForInstall(const qint32 &total_items_pending_for_install) {
    m_total_items_pending_for_install = total_items_pending_for_install;
    m_total_items_pending_for_install_isSet = true;
}

bool OAIUpdatesProperties::is_total_items_pending_for_install_Set() const{
    return m_total_items_pending_for_install_isSet;
}

bool OAIUpdatesProperties::is_total_items_pending_for_install_Valid() const{
    return m_total_items_pending_for_install_isValid;
}

bool OAIUpdatesProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_last_scanned_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_download_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_download_job_started_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_install_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_install_job_started_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_scan_started_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_completed_download_job_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_completed_install_job_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_completed_scan_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reboot_required_for_install_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regular_updates_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_pending_for_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_pending_for_install_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatesProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
