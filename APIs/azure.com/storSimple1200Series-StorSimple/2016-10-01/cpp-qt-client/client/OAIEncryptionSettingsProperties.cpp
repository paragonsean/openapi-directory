/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionSettingsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionSettingsProperties::OAIEncryptionSettingsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionSettingsProperties::OAIEncryptionSettingsProperties() {
    this->initializeModel();
}

OAIEncryptionSettingsProperties::~OAIEncryptionSettingsProperties() {}

void OAIEncryptionSettingsProperties::initializeModel() {

    m_encryption_status_isSet = false;
    m_encryption_status_isValid = false;

    m_key_rollover_status_isSet = false;
    m_key_rollover_status_isValid = false;
}

void OAIEncryptionSettingsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionSettingsProperties::fromJsonObject(QJsonObject json) {

    m_encryption_status_isValid = ::OpenAPI::fromJsonValue(m_encryption_status, json[QString("encryptionStatus")]);
    m_encryption_status_isSet = !json[QString("encryptionStatus")].isNull() && m_encryption_status_isValid;

    m_key_rollover_status_isValid = ::OpenAPI::fromJsonValue(m_key_rollover_status, json[QString("keyRolloverStatus")]);
    m_key_rollover_status_isSet = !json[QString("keyRolloverStatus")].isNull() && m_key_rollover_status_isValid;
}

QString OAIEncryptionSettingsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionSettingsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_status_isSet) {
        obj.insert(QString("encryptionStatus"), ::OpenAPI::toJsonValue(m_encryption_status));
    }
    if (m_key_rollover_status_isSet) {
        obj.insert(QString("keyRolloverStatus"), ::OpenAPI::toJsonValue(m_key_rollover_status));
    }
    return obj;
}

QString OAIEncryptionSettingsProperties::getEncryptionStatus() const {
    return m_encryption_status;
}
void OAIEncryptionSettingsProperties::setEncryptionStatus(const QString &encryption_status) {
    m_encryption_status = encryption_status;
    m_encryption_status_isSet = true;
}

bool OAIEncryptionSettingsProperties::is_encryption_status_Set() const{
    return m_encryption_status_isSet;
}

bool OAIEncryptionSettingsProperties::is_encryption_status_Valid() const{
    return m_encryption_status_isValid;
}

QString OAIEncryptionSettingsProperties::getKeyRolloverStatus() const {
    return m_key_rollover_status;
}
void OAIEncryptionSettingsProperties::setKeyRolloverStatus(const QString &key_rollover_status) {
    m_key_rollover_status = key_rollover_status;
    m_key_rollover_status_isSet = true;
}

bool OAIEncryptionSettingsProperties::is_key_rollover_status_Set() const{
    return m_key_rollover_status_isSet;
}

bool OAIEncryptionSettingsProperties::is_key_rollover_status_Valid() const{
    return m_key_rollover_status_isValid;
}

bool OAIEncryptionSettingsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_rollover_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionSettingsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_encryption_status_isValid && m_key_rollover_status_isValid && true;
}

} // namespace OpenAPI
