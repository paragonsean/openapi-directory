/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBackupScheduleGroupsApi_H
#define OAI_OAIBackupScheduleGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackupScheduleGroup.h"
#include "OAIBackupScheduleGroupList.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBackupScheduleGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIBackupScheduleGroupsApi(const int timeOut = 0);
    ~OAIBackupScheduleGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  schedule_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  schedule_group OAIBackupScheduleGroup [required]
    */
    virtual void backupScheduleGroupsCreateOrUpdate(const QString &device_name, const QString &schedule_group_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIBackupScheduleGroup &schedule_group);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  schedule_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupScheduleGroupsDelete(const QString &device_name, const QString &schedule_group_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  schedule_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupScheduleGroupsGet(const QString &device_name, const QString &schedule_group_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupScheduleGroupsListByDevice(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void backupScheduleGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void backupScheduleGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void backupScheduleGroupsGetCallback(OAIHttpRequestWorker *worker);
    void backupScheduleGroupsListByDeviceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void backupScheduleGroupsCreateOrUpdateSignal(OAIBackupScheduleGroup summary);
    void backupScheduleGroupsDeleteSignal();
    void backupScheduleGroupsGetSignal(OAIBackupScheduleGroup summary);
    void backupScheduleGroupsListByDeviceSignal(OAIBackupScheduleGroupList summary);


    void backupScheduleGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBackupScheduleGroup summary);
    void backupScheduleGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void backupScheduleGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIBackupScheduleGroup summary);
    void backupScheduleGroupsListByDeviceSignalFull(OAIHttpRequestWorker *worker, OAIBackupScheduleGroupList summary);

    Q_DECL_DEPRECATED_X("Use backupScheduleGroupsCreateOrUpdateSignalError() instead")
    void backupScheduleGroupsCreateOrUpdateSignalE(OAIBackupScheduleGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupScheduleGroupsCreateOrUpdateSignalError(OAIBackupScheduleGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupScheduleGroupsDeleteSignalError() instead")
    void backupScheduleGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void backupScheduleGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupScheduleGroupsGetSignalError() instead")
    void backupScheduleGroupsGetSignalE(OAIBackupScheduleGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupScheduleGroupsGetSignalError(OAIBackupScheduleGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupScheduleGroupsListByDeviceSignalError() instead")
    void backupScheduleGroupsListByDeviceSignalE(OAIBackupScheduleGroupList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupScheduleGroupsListByDeviceSignalError(OAIBackupScheduleGroupList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use backupScheduleGroupsCreateOrUpdateSignalErrorFull() instead")
    void backupScheduleGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupScheduleGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupScheduleGroupsDeleteSignalErrorFull() instead")
    void backupScheduleGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupScheduleGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupScheduleGroupsGetSignalErrorFull() instead")
    void backupScheduleGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupScheduleGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupScheduleGroupsListByDeviceSignalErrorFull() instead")
    void backupScheduleGroupsListByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupScheduleGroupsListByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
