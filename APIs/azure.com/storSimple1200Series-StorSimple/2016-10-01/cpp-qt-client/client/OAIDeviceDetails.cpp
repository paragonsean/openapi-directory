/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceDetails::OAIDeviceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceDetails::OAIDeviceDetails() {
    this->initializeModel();
}

OAIDeviceDetails::~OAIDeviceDetails() {}

void OAIDeviceDetails::initializeModel() {

    m_available_local_storage_in_bytes_isSet = false;
    m_available_local_storage_in_bytes_isValid = false;

    m_available_storage_in_bytes_isSet = false;
    m_available_storage_in_bytes_isValid = false;

    m_endpoint_count_isSet = false;
    m_endpoint_count_isValid = false;

    m_provisioned_local_storage_in_bytes_isSet = false;
    m_provisioned_local_storage_in_bytes_isValid = false;

    m_provisioned_storage_in_bytes_isSet = false;
    m_provisioned_storage_in_bytes_isValid = false;

    m_total_backup_size_in_bytes_isSet = false;
    m_total_backup_size_in_bytes_isValid = false;

    m_total_local_storage_in_bytes_isSet = false;
    m_total_local_storage_in_bytes_isValid = false;

    m_total_storage_in_bytes_isSet = false;
    m_total_storage_in_bytes_isValid = false;

    m_using_local_storage_in_bytes_isSet = false;
    m_using_local_storage_in_bytes_isValid = false;

    m_using_storage_in_bytes_isSet = false;
    m_using_storage_in_bytes_isValid = false;
}

void OAIDeviceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceDetails::fromJsonObject(QJsonObject json) {

    m_available_local_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_available_local_storage_in_bytes, json[QString("availableLocalStorageInBytes")]);
    m_available_local_storage_in_bytes_isSet = !json[QString("availableLocalStorageInBytes")].isNull() && m_available_local_storage_in_bytes_isValid;

    m_available_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_available_storage_in_bytes, json[QString("availableStorageInBytes")]);
    m_available_storage_in_bytes_isSet = !json[QString("availableStorageInBytes")].isNull() && m_available_storage_in_bytes_isValid;

    m_endpoint_count_isValid = ::OpenAPI::fromJsonValue(m_endpoint_count, json[QString("endpointCount")]);
    m_endpoint_count_isSet = !json[QString("endpointCount")].isNull() && m_endpoint_count_isValid;

    m_provisioned_local_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_provisioned_local_storage_in_bytes, json[QString("provisionedLocalStorageInBytes")]);
    m_provisioned_local_storage_in_bytes_isSet = !json[QString("provisionedLocalStorageInBytes")].isNull() && m_provisioned_local_storage_in_bytes_isValid;

    m_provisioned_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_provisioned_storage_in_bytes, json[QString("provisionedStorageInBytes")]);
    m_provisioned_storage_in_bytes_isSet = !json[QString("provisionedStorageInBytes")].isNull() && m_provisioned_storage_in_bytes_isValid;

    m_total_backup_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_backup_size_in_bytes, json[QString("totalBackupSizeInBytes")]);
    m_total_backup_size_in_bytes_isSet = !json[QString("totalBackupSizeInBytes")].isNull() && m_total_backup_size_in_bytes_isValid;

    m_total_local_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_local_storage_in_bytes, json[QString("totalLocalStorageInBytes")]);
    m_total_local_storage_in_bytes_isSet = !json[QString("totalLocalStorageInBytes")].isNull() && m_total_local_storage_in_bytes_isValid;

    m_total_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_storage_in_bytes, json[QString("totalStorageInBytes")]);
    m_total_storage_in_bytes_isSet = !json[QString("totalStorageInBytes")].isNull() && m_total_storage_in_bytes_isValid;

    m_using_local_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_using_local_storage_in_bytes, json[QString("usingLocalStorageInBytes")]);
    m_using_local_storage_in_bytes_isSet = !json[QString("usingLocalStorageInBytes")].isNull() && m_using_local_storage_in_bytes_isValid;

    m_using_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_using_storage_in_bytes, json[QString("usingStorageInBytes")]);
    m_using_storage_in_bytes_isSet = !json[QString("usingStorageInBytes")].isNull() && m_using_storage_in_bytes_isValid;
}

QString OAIDeviceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_available_local_storage_in_bytes_isSet) {
        obj.insert(QString("availableLocalStorageInBytes"), ::OpenAPI::toJsonValue(m_available_local_storage_in_bytes));
    }
    if (m_available_storage_in_bytes_isSet) {
        obj.insert(QString("availableStorageInBytes"), ::OpenAPI::toJsonValue(m_available_storage_in_bytes));
    }
    if (m_endpoint_count_isSet) {
        obj.insert(QString("endpointCount"), ::OpenAPI::toJsonValue(m_endpoint_count));
    }
    if (m_provisioned_local_storage_in_bytes_isSet) {
        obj.insert(QString("provisionedLocalStorageInBytes"), ::OpenAPI::toJsonValue(m_provisioned_local_storage_in_bytes));
    }
    if (m_provisioned_storage_in_bytes_isSet) {
        obj.insert(QString("provisionedStorageInBytes"), ::OpenAPI::toJsonValue(m_provisioned_storage_in_bytes));
    }
    if (m_total_backup_size_in_bytes_isSet) {
        obj.insert(QString("totalBackupSizeInBytes"), ::OpenAPI::toJsonValue(m_total_backup_size_in_bytes));
    }
    if (m_total_local_storage_in_bytes_isSet) {
        obj.insert(QString("totalLocalStorageInBytes"), ::OpenAPI::toJsonValue(m_total_local_storage_in_bytes));
    }
    if (m_total_storage_in_bytes_isSet) {
        obj.insert(QString("totalStorageInBytes"), ::OpenAPI::toJsonValue(m_total_storage_in_bytes));
    }
    if (m_using_local_storage_in_bytes_isSet) {
        obj.insert(QString("usingLocalStorageInBytes"), ::OpenAPI::toJsonValue(m_using_local_storage_in_bytes));
    }
    if (m_using_storage_in_bytes_isSet) {
        obj.insert(QString("usingStorageInBytes"), ::OpenAPI::toJsonValue(m_using_storage_in_bytes));
    }
    return obj;
}

qint64 OAIDeviceDetails::getAvailableLocalStorageInBytes() const {
    return m_available_local_storage_in_bytes;
}
void OAIDeviceDetails::setAvailableLocalStorageInBytes(const qint64 &available_local_storage_in_bytes) {
    m_available_local_storage_in_bytes = available_local_storage_in_bytes;
    m_available_local_storage_in_bytes_isSet = true;
}

bool OAIDeviceDetails::is_available_local_storage_in_bytes_Set() const{
    return m_available_local_storage_in_bytes_isSet;
}

bool OAIDeviceDetails::is_available_local_storage_in_bytes_Valid() const{
    return m_available_local_storage_in_bytes_isValid;
}

qint64 OAIDeviceDetails::getAvailableStorageInBytes() const {
    return m_available_storage_in_bytes;
}
void OAIDeviceDetails::setAvailableStorageInBytes(const qint64 &available_storage_in_bytes) {
    m_available_storage_in_bytes = available_storage_in_bytes;
    m_available_storage_in_bytes_isSet = true;
}

bool OAIDeviceDetails::is_available_storage_in_bytes_Set() const{
    return m_available_storage_in_bytes_isSet;
}

bool OAIDeviceDetails::is_available_storage_in_bytes_Valid() const{
    return m_available_storage_in_bytes_isValid;
}

qint32 OAIDeviceDetails::getEndpointCount() const {
    return m_endpoint_count;
}
void OAIDeviceDetails::setEndpointCount(const qint32 &endpoint_count) {
    m_endpoint_count = endpoint_count;
    m_endpoint_count_isSet = true;
}

bool OAIDeviceDetails::is_endpoint_count_Set() const{
    return m_endpoint_count_isSet;
}

bool OAIDeviceDetails::is_endpoint_count_Valid() const{
    return m_endpoint_count_isValid;
}

qint64 OAIDeviceDetails::getProvisionedLocalStorageInBytes() const {
    return m_provisioned_local_storage_in_bytes;
}
void OAIDeviceDetails::setProvisionedLocalStorageInBytes(const qint64 &provisioned_local_storage_in_bytes) {
    m_provisioned_local_storage_in_bytes = provisioned_local_storage_in_bytes;
    m_provisioned_local_storage_in_bytes_isSet = true;
}

bool OAIDeviceDetails::is_provisioned_local_storage_in_bytes_Set() const{
    return m_provisioned_local_storage_in_bytes_isSet;
}

bool OAIDeviceDetails::is_provisioned_local_storage_in_bytes_Valid() const{
    return m_provisioned_local_storage_in_bytes_isValid;
}

qint64 OAIDeviceDetails::getProvisionedStorageInBytes() const {
    return m_provisioned_storage_in_bytes;
}
void OAIDeviceDetails::setProvisionedStorageInBytes(const qint64 &provisioned_storage_in_bytes) {
    m_provisioned_storage_in_bytes = provisioned_storage_in_bytes;
    m_provisioned_storage_in_bytes_isSet = true;
}

bool OAIDeviceDetails::is_provisioned_storage_in_bytes_Set() const{
    return m_provisioned_storage_in_bytes_isSet;
}

bool OAIDeviceDetails::is_provisioned_storage_in_bytes_Valid() const{
    return m_provisioned_storage_in_bytes_isValid;
}

qint64 OAIDeviceDetails::getTotalBackupSizeInBytes() const {
    return m_total_backup_size_in_bytes;
}
void OAIDeviceDetails::setTotalBackupSizeInBytes(const qint64 &total_backup_size_in_bytes) {
    m_total_backup_size_in_bytes = total_backup_size_in_bytes;
    m_total_backup_size_in_bytes_isSet = true;
}

bool OAIDeviceDetails::is_total_backup_size_in_bytes_Set() const{
    return m_total_backup_size_in_bytes_isSet;
}

bool OAIDeviceDetails::is_total_backup_size_in_bytes_Valid() const{
    return m_total_backup_size_in_bytes_isValid;
}

qint64 OAIDeviceDetails::getTotalLocalStorageInBytes() const {
    return m_total_local_storage_in_bytes;
}
void OAIDeviceDetails::setTotalLocalStorageInBytes(const qint64 &total_local_storage_in_bytes) {
    m_total_local_storage_in_bytes = total_local_storage_in_bytes;
    m_total_local_storage_in_bytes_isSet = true;
}

bool OAIDeviceDetails::is_total_local_storage_in_bytes_Set() const{
    return m_total_local_storage_in_bytes_isSet;
}

bool OAIDeviceDetails::is_total_local_storage_in_bytes_Valid() const{
    return m_total_local_storage_in_bytes_isValid;
}

qint64 OAIDeviceDetails::getTotalStorageInBytes() const {
    return m_total_storage_in_bytes;
}
void OAIDeviceDetails::setTotalStorageInBytes(const qint64 &total_storage_in_bytes) {
    m_total_storage_in_bytes = total_storage_in_bytes;
    m_total_storage_in_bytes_isSet = true;
}

bool OAIDeviceDetails::is_total_storage_in_bytes_Set() const{
    return m_total_storage_in_bytes_isSet;
}

bool OAIDeviceDetails::is_total_storage_in_bytes_Valid() const{
    return m_total_storage_in_bytes_isValid;
}

qint64 OAIDeviceDetails::getUsingLocalStorageInBytes() const {
    return m_using_local_storage_in_bytes;
}
void OAIDeviceDetails::setUsingLocalStorageInBytes(const qint64 &using_local_storage_in_bytes) {
    m_using_local_storage_in_bytes = using_local_storage_in_bytes;
    m_using_local_storage_in_bytes_isSet = true;
}

bool OAIDeviceDetails::is_using_local_storage_in_bytes_Set() const{
    return m_using_local_storage_in_bytes_isSet;
}

bool OAIDeviceDetails::is_using_local_storage_in_bytes_Valid() const{
    return m_using_local_storage_in_bytes_isValid;
}

qint64 OAIDeviceDetails::getUsingStorageInBytes() const {
    return m_using_storage_in_bytes;
}
void OAIDeviceDetails::setUsingStorageInBytes(const qint64 &using_storage_in_bytes) {
    m_using_storage_in_bytes = using_storage_in_bytes;
    m_using_storage_in_bytes_isSet = true;
}

bool OAIDeviceDetails::is_using_storage_in_bytes_Set() const{
    return m_using_storage_in_bytes_isSet;
}

bool OAIDeviceDetails::is_using_storage_in_bytes_Valid() const{
    return m_using_storage_in_bytes_isValid;
}

bool OAIDeviceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_local_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_local_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_backup_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_local_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_using_local_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_using_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
