/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloneRequestProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloneRequestProperties::OAICloneRequestProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloneRequestProperties::OAICloneRequestProperties() {
    this->initializeModel();
}

OAICloneRequestProperties::~OAICloneRequestProperties() {}

void OAICloneRequestProperties::initializeModel() {

    m_disk_isSet = false;
    m_disk_isValid = false;

    m_new_endpoint_name_isSet = false;
    m_new_endpoint_name_isValid = false;

    m_share_isSet = false;
    m_share_isValid = false;

    m_target_access_point_id_isSet = false;
    m_target_access_point_id_isValid = false;

    m_target_device_id_isSet = false;
    m_target_device_id_isValid = false;
}

void OAICloneRequestProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloneRequestProperties::fromJsonObject(QJsonObject json) {

    m_disk_isValid = ::OpenAPI::fromJsonValue(m_disk, json[QString("disk")]);
    m_disk_isSet = !json[QString("disk")].isNull() && m_disk_isValid;

    m_new_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_new_endpoint_name, json[QString("newEndpointName")]);
    m_new_endpoint_name_isSet = !json[QString("newEndpointName")].isNull() && m_new_endpoint_name_isValid;

    m_share_isValid = ::OpenAPI::fromJsonValue(m_share, json[QString("share")]);
    m_share_isSet = !json[QString("share")].isNull() && m_share_isValid;

    m_target_access_point_id_isValid = ::OpenAPI::fromJsonValue(m_target_access_point_id, json[QString("targetAccessPointId")]);
    m_target_access_point_id_isSet = !json[QString("targetAccessPointId")].isNull() && m_target_access_point_id_isValid;

    m_target_device_id_isValid = ::OpenAPI::fromJsonValue(m_target_device_id, json[QString("targetDeviceId")]);
    m_target_device_id_isSet = !json[QString("targetDeviceId")].isNull() && m_target_device_id_isValid;
}

QString OAICloneRequestProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloneRequestProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_disk.isSet()) {
        obj.insert(QString("disk"), ::OpenAPI::toJsonValue(m_disk));
    }
    if (m_new_endpoint_name_isSet) {
        obj.insert(QString("newEndpointName"), ::OpenAPI::toJsonValue(m_new_endpoint_name));
    }
    if (m_share.isSet()) {
        obj.insert(QString("share"), ::OpenAPI::toJsonValue(m_share));
    }
    if (m_target_access_point_id_isSet) {
        obj.insert(QString("targetAccessPointId"), ::OpenAPI::toJsonValue(m_target_access_point_id));
    }
    if (m_target_device_id_isSet) {
        obj.insert(QString("targetDeviceId"), ::OpenAPI::toJsonValue(m_target_device_id));
    }
    return obj;
}

OAIISCSIDisk OAICloneRequestProperties::getDisk() const {
    return m_disk;
}
void OAICloneRequestProperties::setDisk(const OAIISCSIDisk &disk) {
    m_disk = disk;
    m_disk_isSet = true;
}

bool OAICloneRequestProperties::is_disk_Set() const{
    return m_disk_isSet;
}

bool OAICloneRequestProperties::is_disk_Valid() const{
    return m_disk_isValid;
}

QString OAICloneRequestProperties::getNewEndpointName() const {
    return m_new_endpoint_name;
}
void OAICloneRequestProperties::setNewEndpointName(const QString &new_endpoint_name) {
    m_new_endpoint_name = new_endpoint_name;
    m_new_endpoint_name_isSet = true;
}

bool OAICloneRequestProperties::is_new_endpoint_name_Set() const{
    return m_new_endpoint_name_isSet;
}

bool OAICloneRequestProperties::is_new_endpoint_name_Valid() const{
    return m_new_endpoint_name_isValid;
}

OAIFileShare OAICloneRequestProperties::getShare() const {
    return m_share;
}
void OAICloneRequestProperties::setShare(const OAIFileShare &share) {
    m_share = share;
    m_share_isSet = true;
}

bool OAICloneRequestProperties::is_share_Set() const{
    return m_share_isSet;
}

bool OAICloneRequestProperties::is_share_Valid() const{
    return m_share_isValid;
}

QString OAICloneRequestProperties::getTargetAccessPointId() const {
    return m_target_access_point_id;
}
void OAICloneRequestProperties::setTargetAccessPointId(const QString &target_access_point_id) {
    m_target_access_point_id = target_access_point_id;
    m_target_access_point_id_isSet = true;
}

bool OAICloneRequestProperties::is_target_access_point_id_Set() const{
    return m_target_access_point_id_isSet;
}

bool OAICloneRequestProperties::is_target_access_point_id_Valid() const{
    return m_target_access_point_id_isValid;
}

QString OAICloneRequestProperties::getTargetDeviceId() const {
    return m_target_device_id;
}
void OAICloneRequestProperties::setTargetDeviceId(const QString &target_device_id) {
    m_target_device_id = target_device_id;
    m_target_device_id_isSet = true;
}

bool OAICloneRequestProperties::is_target_device_id_Set() const{
    return m_target_device_id_isSet;
}

bool OAICloneRequestProperties::is_target_device_id_Valid() const{
    return m_target_device_id_isValid;
}

bool OAICloneRequestProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_access_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloneRequestProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_new_endpoint_name_isValid && m_target_access_point_id_isValid && m_target_device_id_isValid && true;
}

} // namespace OpenAPI
