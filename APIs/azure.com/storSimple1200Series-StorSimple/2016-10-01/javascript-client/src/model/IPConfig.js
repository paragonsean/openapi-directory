/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IPConfig model module.
 * @module model/IPConfig
 * @version 2016-10-01
 */
class IPConfig {
    /**
     * Constructs a new <code>IPConfig</code>.
     * Details related to the IP address configuration
     * @alias module:model/IPConfig
     * @param gateway {String} The gateway of the network adapter.
     * @param ipAddress {String} The IP address of the network adapter, either ipv4 or ipv6.
     */
    constructor(gateway, ipAddress) { 
        
        IPConfig.initialize(this, gateway, ipAddress);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, gateway, ipAddress) { 
        obj['gateway'] = gateway;
        obj['ipAddress'] = ipAddress;
    }

    /**
     * Constructs a <code>IPConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IPConfig} obj Optional instance to populate.
     * @return {module:model/IPConfig} The populated <code>IPConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IPConfig();

            if (data.hasOwnProperty('gateway')) {
                obj['gateway'] = ApiClient.convertToType(data['gateway'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('prefixLength')) {
                obj['prefixLength'] = ApiClient.convertToType(data['prefixLength'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IPConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IPConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IPConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['gateway'] && !(typeof data['gateway'] === 'string' || data['gateway'] instanceof String)) {
            throw new Error("Expected the field `gateway` to be a primitive type in the JSON string but got " + data['gateway']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }

        return true;
    }


}

IPConfig.RequiredProperties = ["gateway", "ipAddress"];

/**
 * The gateway of the network adapter.
 * @member {String} gateway
 */
IPConfig.prototype['gateway'] = undefined;

/**
 * The IP address of the network adapter, either ipv4 or ipv6.
 * @member {String} ipAddress
 */
IPConfig.prototype['ipAddress'] = undefined;

/**
 * The prefix length of the network adapter.
 * @member {Number} prefixLength
 */
IPConfig.prototype['prefixLength'] = undefined;






export default IPConfig;

