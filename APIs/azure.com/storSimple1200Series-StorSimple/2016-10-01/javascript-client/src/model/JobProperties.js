/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobStage from './JobStage';
import JobStats from './JobStats';
import UpdateDownloadProgress from './UpdateDownloadProgress';
import UpdateInstallProgress from './UpdateInstallProgress';

/**
 * The JobProperties model module.
 * @module model/JobProperties
 * @version 2016-10-01
 */
class JobProperties {
    /**
     * Constructs a new <code>JobProperties</code>.
     * properties for the job
     * @alias module:model/JobProperties
     * @param jobType {module:model/JobProperties.JobTypeEnum} Type of the job
     */
    constructor(jobType) { 
        
        JobProperties.initialize(this, jobType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, jobType) { 
        obj['jobType'] = jobType;
    }

    /**
     * Constructs a <code>JobProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobProperties} obj Optional instance to populate.
     * @return {module:model/JobProperties} The populated <code>JobProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobProperties();

            if (data.hasOwnProperty('backupPointInTime')) {
                obj['backupPointInTime'] = ApiClient.convertToType(data['backupPointInTime'], 'Date');
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('downloadProgress')) {
                obj['downloadProgress'] = UpdateDownloadProgress.constructFromObject(data['downloadProgress']);
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('installProgress')) {
                obj['installProgress'] = UpdateInstallProgress.constructFromObject(data['installProgress']);
            }
            if (data.hasOwnProperty('isCancellable')) {
                obj['isCancellable'] = ApiClient.convertToType(data['isCancellable'], 'Boolean');
            }
            if (data.hasOwnProperty('jobStages')) {
                obj['jobStages'] = ApiClient.convertToType(data['jobStages'], [JobStage]);
            }
            if (data.hasOwnProperty('jobType')) {
                obj['jobType'] = ApiClient.convertToType(data['jobType'], 'String');
            }
            if (data.hasOwnProperty('sourceDeviceId')) {
                obj['sourceDeviceId'] = ApiClient.convertToType(data['sourceDeviceId'], 'String');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = JobStats.constructFromObject(data['stats']);
            }
            if (data.hasOwnProperty('targetId')) {
                obj['targetId'] = ApiClient.convertToType(data['targetId'], 'String');
            }
            if (data.hasOwnProperty('targetType')) {
                obj['targetType'] = ApiClient.convertToType(data['targetType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        // validate the optional field `downloadProgress`
        if (data['downloadProgress']) { // data not null
          UpdateDownloadProgress.validateJSON(data['downloadProgress']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        // validate the optional field `installProgress`
        if (data['installProgress']) { // data not null
          UpdateInstallProgress.validateJSON(data['installProgress']);
        }
        if (data['jobStages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['jobStages'])) {
                throw new Error("Expected the field `jobStages` to be an array in the JSON data but got " + data['jobStages']);
            }
            // validate the optional field `jobStages` (array)
            for (const item of data['jobStages']) {
                JobStage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['jobType'] && !(typeof data['jobType'] === 'string' || data['jobType'] instanceof String)) {
            throw new Error("Expected the field `jobType` to be a primitive type in the JSON string but got " + data['jobType']);
        }
        // ensure the json data is a string
        if (data['sourceDeviceId'] && !(typeof data['sourceDeviceId'] === 'string' || data['sourceDeviceId'] instanceof String)) {
            throw new Error("Expected the field `sourceDeviceId` to be a primitive type in the JSON string but got " + data['sourceDeviceId']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          JobStats.validateJSON(data['stats']);
        }
        // ensure the json data is a string
        if (data['targetId'] && !(typeof data['targetId'] === 'string' || data['targetId'] instanceof String)) {
            throw new Error("Expected the field `targetId` to be a primitive type in the JSON string but got " + data['targetId']);
        }
        // ensure the json data is a string
        if (data['targetType'] && !(typeof data['targetType'] === 'string' || data['targetType'] instanceof String)) {
            throw new Error("Expected the field `targetType` to be a primitive type in the JSON string but got " + data['targetType']);
        }

        return true;
    }


}

JobProperties.RequiredProperties = ["jobType"];

/**
 * The time of the backup used for the failover.
 * @member {Date} backupPointInTime
 */
JobProperties.prototype['backupPointInTime'] = undefined;

/**
 * The device id in which the job is currently running
 * @member {String} deviceId
 */
JobProperties.prototype['deviceId'] = undefined;

/**
 * @member {module:model/UpdateDownloadProgress} downloadProgress
 */
JobProperties.prototype['downloadProgress'] = undefined;

/**
 * The entity identifier for which the job ran.
 * @member {String} entityId
 */
JobProperties.prototype['entityId'] = undefined;

/**
 * The entity type for which the job ran.
 * @member {String} entityType
 */
JobProperties.prototype['entityType'] = undefined;

/**
 * @member {module:model/UpdateInstallProgress} installProgress
 */
JobProperties.prototype['installProgress'] = undefined;

/**
 * Represents whether the job is cancellable or not
 * @member {Boolean} isCancellable
 */
JobProperties.prototype['isCancellable'] = undefined;

/**
 * The job stages.
 * @member {Array.<module:model/JobStage>} jobStages
 */
JobProperties.prototype['jobStages'] = undefined;

/**
 * Type of the job
 * @member {module:model/JobProperties.JobTypeEnum} jobType
 */
JobProperties.prototype['jobType'] = undefined;

/**
 * The source device identifier of the failover job.
 * @member {String} sourceDeviceId
 */
JobProperties.prototype['sourceDeviceId'] = undefined;

/**
 * @member {module:model/JobStats} stats
 */
JobProperties.prototype['stats'] = undefined;

/**
 * Id of the object that is created by the job
 * @member {String} targetId
 */
JobProperties.prototype['targetId'] = undefined;

/**
 * The target type of the backup.
 * @member {module:model/JobProperties.TargetTypeEnum} targetType
 */
JobProperties.prototype['targetType'] = undefined;





/**
 * Allowed values for the <code>jobType</code> property.
 * @enum {String}
 * @readonly
 */
JobProperties['JobTypeEnum'] = {

    /**
     * value: "Backup"
     * @const
     */
    "Backup": "Backup",

    /**
     * value: "Clone"
     * @const
     */
    "Clone": "Clone",

    /**
     * value: "Failover"
     * @const
     */
    "Failover": "Failover",

    /**
     * value: "DownloadUpdates"
     * @const
     */
    "DownloadUpdates": "DownloadUpdates",

    /**
     * value: "InstallUpdates"
     * @const
     */
    "InstallUpdates": "InstallUpdates"
};


/**
 * Allowed values for the <code>targetType</code> property.
 * @enum {String}
 * @readonly
 */
JobProperties['TargetTypeEnum'] = {

    /**
     * value: "FileServer"
     * @const
     */
    "FileServer": "FileServer",

    /**
     * value: "DiskServer"
     * @const
     */
    "DiskServer": "DiskServer"
};



export default JobProperties;

