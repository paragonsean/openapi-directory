/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AlertSettingsProperties model module.
 * @module model/AlertSettingsProperties
 * @version 2016-10-01
 */
class AlertSettingsProperties {
    /**
     * Constructs a new <code>AlertSettingsProperties</code>.
     * Class containing the properties of AlertSettings
     * @alias module:model/AlertSettingsProperties
     * @param alertNotificationCulture {String} Culture setting to be used while building alert emails. For eg: \"en-US\"
     * @param emailNotification {module:model/AlertSettingsProperties.EmailNotificationEnum} Value indicating whether user/admins will receive emails when an alert condition occurs on the system
     * @param notificationToServiceOwners {module:model/AlertSettingsProperties.NotificationToServiceOwnersEnum} Value indicating whether service owners will receive emails when an alert condition occurs on the system. Applicable only if emailNotification flag is Enabled.
     */
    constructor(alertNotificationCulture, emailNotification, notificationToServiceOwners) { 
        
        AlertSettingsProperties.initialize(this, alertNotificationCulture, emailNotification, notificationToServiceOwners);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alertNotificationCulture, emailNotification, notificationToServiceOwners) { 
        obj['alertNotificationCulture'] = alertNotificationCulture;
        obj['emailNotification'] = emailNotification;
        obj['notificationToServiceOwners'] = notificationToServiceOwners;
    }

    /**
     * Constructs a <code>AlertSettingsProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertSettingsProperties} obj Optional instance to populate.
     * @return {module:model/AlertSettingsProperties} The populated <code>AlertSettingsProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertSettingsProperties();

            if (data.hasOwnProperty('additionalRecipientEmailList')) {
                obj['additionalRecipientEmailList'] = ApiClient.convertToType(data['additionalRecipientEmailList'], ['String']);
            }
            if (data.hasOwnProperty('alertNotificationCulture')) {
                obj['alertNotificationCulture'] = ApiClient.convertToType(data['alertNotificationCulture'], 'String');
            }
            if (data.hasOwnProperty('emailNotification')) {
                obj['emailNotification'] = ApiClient.convertToType(data['emailNotification'], 'String');
            }
            if (data.hasOwnProperty('notificationToServiceOwners')) {
                obj['notificationToServiceOwners'] = ApiClient.convertToType(data['notificationToServiceOwners'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertSettingsProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertSettingsProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AlertSettingsProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['additionalRecipientEmailList'])) {
            throw new Error("Expected the field `additionalRecipientEmailList` to be an array in the JSON data but got " + data['additionalRecipientEmailList']);
        }
        // ensure the json data is a string
        if (data['alertNotificationCulture'] && !(typeof data['alertNotificationCulture'] === 'string' || data['alertNotificationCulture'] instanceof String)) {
            throw new Error("Expected the field `alertNotificationCulture` to be a primitive type in the JSON string but got " + data['alertNotificationCulture']);
        }
        // ensure the json data is a string
        if (data['emailNotification'] && !(typeof data['emailNotification'] === 'string' || data['emailNotification'] instanceof String)) {
            throw new Error("Expected the field `emailNotification` to be a primitive type in the JSON string but got " + data['emailNotification']);
        }
        // ensure the json data is a string
        if (data['notificationToServiceOwners'] && !(typeof data['notificationToServiceOwners'] === 'string' || data['notificationToServiceOwners'] instanceof String)) {
            throw new Error("Expected the field `notificationToServiceOwners` to be a primitive type in the JSON string but got " + data['notificationToServiceOwners']);
        }

        return true;
    }


}

AlertSettingsProperties.RequiredProperties = ["alertNotificationCulture", "emailNotification", "notificationToServiceOwners"];

/**
 * List of email addresses (apart from admin/co-admin of subscription) to whom the alert emails need to be sent
 * @member {Array.<String>} additionalRecipientEmailList
 */
AlertSettingsProperties.prototype['additionalRecipientEmailList'] = undefined;

/**
 * Culture setting to be used while building alert emails. For eg: \"en-US\"
 * @member {String} alertNotificationCulture
 */
AlertSettingsProperties.prototype['alertNotificationCulture'] = undefined;

/**
 * Value indicating whether user/admins will receive emails when an alert condition occurs on the system
 * @member {module:model/AlertSettingsProperties.EmailNotificationEnum} emailNotification
 */
AlertSettingsProperties.prototype['emailNotification'] = undefined;

/**
 * Value indicating whether service owners will receive emails when an alert condition occurs on the system. Applicable only if emailNotification flag is Enabled.
 * @member {module:model/AlertSettingsProperties.NotificationToServiceOwnersEnum} notificationToServiceOwners
 */
AlertSettingsProperties.prototype['notificationToServiceOwners'] = undefined;





/**
 * Allowed values for the <code>emailNotification</code> property.
 * @enum {String}
 * @readonly
 */
AlertSettingsProperties['EmailNotificationEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>notificationToServiceOwners</code> property.
 * @enum {String}
 * @readonly
 */
AlertSettingsProperties['NotificationToServiceOwnersEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default AlertSettingsProperties;

