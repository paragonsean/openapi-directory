/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ManagerExtendedInfoProperties model module.
 * @module model/ManagerExtendedInfoProperties
 * @version 2016-10-01
 */
class ManagerExtendedInfoProperties {
    /**
     * Constructs a new <code>ManagerExtendedInfoProperties</code>.
     * Properties of the ManagerExtendedInfo
     * @alias module:model/ManagerExtendedInfoProperties
     * @param algorithm {String} Represents the encryption algorithm used to encrypt the other keys. None - if EncryptionKey is saved in plain text format. AlgorithmName - if encryption is used
     * @param integrityKey {String} Represents the CIK of the resource
     */
    constructor(algorithm, integrityKey) { 
        
        ManagerExtendedInfoProperties.initialize(this, algorithm, integrityKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, algorithm, integrityKey) { 
        obj['algorithm'] = algorithm;
        obj['integrityKey'] = integrityKey;
    }

    /**
     * Constructs a <code>ManagerExtendedInfoProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagerExtendedInfoProperties} obj Optional instance to populate.
     * @return {module:model/ManagerExtendedInfoProperties} The populated <code>ManagerExtendedInfoProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagerExtendedInfoProperties();

            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('encryptionKey')) {
                obj['encryptionKey'] = ApiClient.convertToType(data['encryptionKey'], 'String');
            }
            if (data.hasOwnProperty('encryptionKeyThumbprint')) {
                obj['encryptionKeyThumbprint'] = ApiClient.convertToType(data['encryptionKeyThumbprint'], 'String');
            }
            if (data.hasOwnProperty('integrityKey')) {
                obj['integrityKey'] = ApiClient.convertToType(data['integrityKey'], 'String');
            }
            if (data.hasOwnProperty('portalCertificateThumbprint')) {
                obj['portalCertificateThumbprint'] = ApiClient.convertToType(data['portalCertificateThumbprint'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagerExtendedInfoProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagerExtendedInfoProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ManagerExtendedInfoProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['algorithm'] && !(typeof data['algorithm'] === 'string' || data['algorithm'] instanceof String)) {
            throw new Error("Expected the field `algorithm` to be a primitive type in the JSON string but got " + data['algorithm']);
        }
        // ensure the json data is a string
        if (data['encryptionKey'] && !(typeof data['encryptionKey'] === 'string' || data['encryptionKey'] instanceof String)) {
            throw new Error("Expected the field `encryptionKey` to be a primitive type in the JSON string but got " + data['encryptionKey']);
        }
        // ensure the json data is a string
        if (data['encryptionKeyThumbprint'] && !(typeof data['encryptionKeyThumbprint'] === 'string' || data['encryptionKeyThumbprint'] instanceof String)) {
            throw new Error("Expected the field `encryptionKeyThumbprint` to be a primitive type in the JSON string but got " + data['encryptionKeyThumbprint']);
        }
        // ensure the json data is a string
        if (data['integrityKey'] && !(typeof data['integrityKey'] === 'string' || data['integrityKey'] instanceof String)) {
            throw new Error("Expected the field `integrityKey` to be a primitive type in the JSON string but got " + data['integrityKey']);
        }
        // ensure the json data is a string
        if (data['portalCertificateThumbprint'] && !(typeof data['portalCertificateThumbprint'] === 'string' || data['portalCertificateThumbprint'] instanceof String)) {
            throw new Error("Expected the field `portalCertificateThumbprint` to be a primitive type in the JSON string but got " + data['portalCertificateThumbprint']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

ManagerExtendedInfoProperties.RequiredProperties = ["algorithm", "integrityKey"];

/**
 * Represents the encryption algorithm used to encrypt the other keys. None - if EncryptionKey is saved in plain text format. AlgorithmName - if encryption is used
 * @member {String} algorithm
 */
ManagerExtendedInfoProperties.prototype['algorithm'] = undefined;

/**
 * Represents the CEK of the resource
 * @member {String} encryptionKey
 */
ManagerExtendedInfoProperties.prototype['encryptionKey'] = undefined;

/**
 * Represents the Cert thumbprint that was used to encrypt the CEK
 * @member {String} encryptionKeyThumbprint
 */
ManagerExtendedInfoProperties.prototype['encryptionKeyThumbprint'] = undefined;

/**
 * Represents the CIK of the resource
 * @member {String} integrityKey
 */
ManagerExtendedInfoProperties.prototype['integrityKey'] = undefined;

/**
 * Represents the portal thumbprint which can be used optionally to encrypt the entire data before storing it.
 * @member {String} portalCertificateThumbprint
 */
ManagerExtendedInfoProperties.prototype['portalCertificateThumbprint'] = undefined;

/**
 * Represents the version of the ExtendedInfo object being persisted
 * @member {String} version
 */
ManagerExtendedInfoProperties.prototype['version'] = undefined;






export default ManagerExtendedInfoProperties;

