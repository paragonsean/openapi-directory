/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceDetails from './DeviceDetails';

/**
 * The DeviceProperties model module.
 * @module model/DeviceProperties
 * @version 2016-10-01
 */
class DeviceProperties {
    /**
     * Constructs a new <code>DeviceProperties</code>.
     * Encases all the properties of the Device
     * @alias module:model/DeviceProperties
     */
    constructor() { 
        
        DeviceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceProperties} obj Optional instance to populate.
     * @return {module:model/DeviceProperties} The populated <code>DeviceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceProperties();

            if (data.hasOwnProperty('activationTime')) {
                obj['activationTime'] = ApiClient.convertToType(data['activationTime'], 'Date');
            }
            if (data.hasOwnProperty('allowedDeviceOperations')) {
                obj['allowedDeviceOperations'] = ApiClient.convertToType(data['allowedDeviceOperations'], ['String']);
            }
            if (data.hasOwnProperty('culture')) {
                obj['culture'] = ApiClient.convertToType(data['culture'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = DeviceDetails.constructFromObject(data['details']);
            }
            if (data.hasOwnProperty('deviceCapabilities')) {
                obj['deviceCapabilities'] = ApiClient.convertToType(data['deviceCapabilities'], ['String']);
            }
            if (data.hasOwnProperty('deviceConfigurationStatus')) {
                obj['deviceConfigurationStatus'] = ApiClient.convertToType(data['deviceConfigurationStatus'], 'String');
            }
            if (data.hasOwnProperty('deviceDescription')) {
                obj['deviceDescription'] = ApiClient.convertToType(data['deviceDescription'], 'String');
            }
            if (data.hasOwnProperty('deviceSoftwareVersion')) {
                obj['deviceSoftwareVersion'] = ApiClient.convertToType(data['deviceSoftwareVersion'], 'String');
            }
            if (data.hasOwnProperty('domainName')) {
                obj['domainName'] = ApiClient.convertToType(data['domainName'], 'String');
            }
            if (data.hasOwnProperty('friendlySoftwareName')) {
                obj['friendlySoftwareName'] = ApiClient.convertToType(data['friendlySoftwareName'], 'String');
            }
            if (data.hasOwnProperty('modelDescription')) {
                obj['modelDescription'] = ApiClient.convertToType(data['modelDescription'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedDeviceOperations'])) {
            throw new Error("Expected the field `allowedDeviceOperations` to be an array in the JSON data but got " + data['allowedDeviceOperations']);
        }
        // ensure the json data is a string
        if (data['culture'] && !(typeof data['culture'] === 'string' || data['culture'] instanceof String)) {
            throw new Error("Expected the field `culture` to be a primitive type in the JSON string but got " + data['culture']);
        }
        // validate the optional field `details`
        if (data['details']) { // data not null
          DeviceDetails.validateJSON(data['details']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['deviceCapabilities'])) {
            throw new Error("Expected the field `deviceCapabilities` to be an array in the JSON data but got " + data['deviceCapabilities']);
        }
        // ensure the json data is a string
        if (data['deviceConfigurationStatus'] && !(typeof data['deviceConfigurationStatus'] === 'string' || data['deviceConfigurationStatus'] instanceof String)) {
            throw new Error("Expected the field `deviceConfigurationStatus` to be a primitive type in the JSON string but got " + data['deviceConfigurationStatus']);
        }
        // ensure the json data is a string
        if (data['deviceDescription'] && !(typeof data['deviceDescription'] === 'string' || data['deviceDescription'] instanceof String)) {
            throw new Error("Expected the field `deviceDescription` to be a primitive type in the JSON string but got " + data['deviceDescription']);
        }
        // ensure the json data is a string
        if (data['deviceSoftwareVersion'] && !(typeof data['deviceSoftwareVersion'] === 'string' || data['deviceSoftwareVersion'] instanceof String)) {
            throw new Error("Expected the field `deviceSoftwareVersion` to be a primitive type in the JSON string but got " + data['deviceSoftwareVersion']);
        }
        // ensure the json data is a string
        if (data['domainName'] && !(typeof data['domainName'] === 'string' || data['domainName'] instanceof String)) {
            throw new Error("Expected the field `domainName` to be a primitive type in the JSON string but got " + data['domainName']);
        }
        // ensure the json data is a string
        if (data['friendlySoftwareName'] && !(typeof data['friendlySoftwareName'] === 'string' || data['friendlySoftwareName'] instanceof String)) {
            throw new Error("Expected the field `friendlySoftwareName` to be a primitive type in the JSON string but got " + data['friendlySoftwareName']);
        }
        // ensure the json data is a string
        if (data['modelDescription'] && !(typeof data['modelDescription'] === 'string' || data['modelDescription'] instanceof String)) {
            throw new Error("Expected the field `modelDescription` to be a primitive type in the JSON string but got " + data['modelDescription']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The UTC time at which the device was activated
 * @member {Date} activationTime
 */
DeviceProperties.prototype['activationTime'] = undefined;

/**
 * Operations that are allowed on the device based on its current state
 * @member {Array.<module:model/DeviceProperties.AllowedDeviceOperationsEnum>} allowedDeviceOperations
 */
DeviceProperties.prototype['allowedDeviceOperations'] = undefined;

/**
 * Language culture setting on the device. For eg: \"en-US\"
 * @member {String} culture
 */
DeviceProperties.prototype['culture'] = undefined;

/**
 * @member {module:model/DeviceDetails} details
 */
DeviceProperties.prototype['details'] = undefined;

/**
 * Device can be configured either as FileServer or IscsiServer
 * @member {Array.<module:model/DeviceProperties.DeviceCapabilitiesEnum>} deviceCapabilities
 */
DeviceProperties.prototype['deviceCapabilities'] = undefined;

/**
 * \"Complete\" if the device has been successfully registered as File/IscsiServer and the creation of share/volume is complete, \"Pending\" if the device is only registered but the creation of share/volume is complete is still pending
 * @member {module:model/DeviceProperties.DeviceConfigurationStatusEnum} deviceConfigurationStatus
 */
DeviceProperties.prototype['deviceConfigurationStatus'] = undefined;

/**
 * Short description given for the device
 * @member {String} deviceDescription
 */
DeviceProperties.prototype['deviceDescription'] = undefined;

/**
 * Version number of the software running on the device
 * @member {String} deviceSoftwareVersion
 */
DeviceProperties.prototype['deviceSoftwareVersion'] = undefined;

/**
 * Fully qualified name of the domain to which the device is attached
 * @member {String} domainName
 */
DeviceProperties.prototype['domainName'] = undefined;

/**
 * Friendly name for the software version
 * @member {String} friendlySoftwareName
 */
DeviceProperties.prototype['friendlySoftwareName'] = undefined;

/**
 * Name of the device model
 * @member {String} modelDescription
 */
DeviceProperties.prototype['modelDescription'] = undefined;

/**
 * Current status of the device
 * @member {module:model/DeviceProperties.StatusEnum} status
 */
DeviceProperties.prototype['status'] = undefined;

/**
 * Type of the device
 * @member {module:model/DeviceProperties.TypeEnum} type
 */
DeviceProperties.prototype['type'] = undefined;





/**
 * Allowed values for the <code>allowedDeviceOperations</code> property.
 * @enum {String}
 * @readonly
 */
DeviceProperties['AllowedDeviceOperationsEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Delete"
     * @const
     */
    "Delete": "Delete",

    /**
     * value: "DeleteWithWarning"
     * @const
     */
    "DeleteWithWarning": "DeleteWithWarning",

    /**
     * value: "DRSource"
     * @const
     */
    "DRSource": "DRSource",

    /**
     * value: "DRTarget"
     * @const
     */
    "DRTarget": "DRTarget",

    /**
     * value: "Browsable"
     * @const
     */
    "Browsable": "Browsable",

    /**
     * value: "ReadOnlyForDR"
     * @const
     */
    "ReadOnlyForDR": "ReadOnlyForDR",

    /**
     * value: "Deactivate"
     * @const
     */
    "Deactivate": "Deactivate"
};


/**
 * Allowed values for the <code>deviceCapabilities</code> property.
 * @enum {String}
 * @readonly
 */
DeviceProperties['DeviceCapabilitiesEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "FileServer"
     * @const
     */
    "FileServer": "FileServer",

    /**
     * value: "IscsiServer"
     * @const
     */
    "IscsiServer": "IscsiServer"
};


/**
 * Allowed values for the <code>deviceConfigurationStatus</code> property.
 * @enum {String}
 * @readonly
 */
DeviceProperties['DeviceConfigurationStatusEnum'] = {

    /**
     * value: "Complete"
     * @const
     */
    "Complete": "Complete",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DeviceProperties['StatusEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online",

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline",

    /**
     * value: "RequiresAttention"
     * @const
     */
    "RequiresAttention": "RequiresAttention",

    /**
     * value: "MaintenanceMode"
     * @const
     */
    "MaintenanceMode": "MaintenanceMode",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Provisioning"
     * @const
     */
    "Provisioning": "Provisioning",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted",

    /**
     * value: "ReadyToSetup"
     * @const
     */
    "ReadyToSetup": "ReadyToSetup",

    /**
     * value: "Deactivated"
     * @const
     */
    "Deactivated": "Deactivated",

    /**
     * value: "Deactivating"
     * @const
     */
    "Deactivating": "Deactivating"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DeviceProperties['TypeEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Appliance"
     * @const
     */
    "Appliance": "Appliance",

    /**
     * value: "VirtualAppliance"
     * @const
     */
    "VirtualAppliance": "VirtualAppliance",

    /**
     * value: "Series9000OnPremVirtualAppliance"
     * @const
     */
    "Series9000OnPremVirtualAppliance": "Series9000OnPremVirtualAppliance",

    /**
     * value: "Series9000VirtualAppliance"
     * @const
     */
    "Series9000VirtualAppliance": "Series9000VirtualAppliance",

    /**
     * value: "Series9000PhysicalAppliance"
     * @const
     */
    "Series9000PhysicalAppliance": "Series9000PhysicalAppliance"
};



export default DeviceProperties;

