/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ISCSIDiskProperties model module.
 * @module model/ISCSIDiskProperties
 * @version 2016-10-01
 */
class ISCSIDiskProperties {
    /**
     * Constructs a new <code>ISCSIDiskProperties</code>.
     * The iSCSI disk properties.
     * @alias module:model/ISCSIDiskProperties
     * @param accessControlRecords {Array.<String>} The access control records.
     * @param dataPolicy {module:model/ISCSIDiskProperties.DataPolicyEnum} The data policy.
     * @param diskStatus {module:model/ISCSIDiskProperties.DiskStatusEnum} The disk status.
     * @param monitoringStatus {module:model/ISCSIDiskProperties.MonitoringStatusEnum} The monitoring.
     * @param provisionedCapacityInBytes {Number} The provisioned capacity in bytes.
     */
    constructor(accessControlRecords, dataPolicy, diskStatus, monitoringStatus, provisionedCapacityInBytes) { 
        
        ISCSIDiskProperties.initialize(this, accessControlRecords, dataPolicy, diskStatus, monitoringStatus, provisionedCapacityInBytes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessControlRecords, dataPolicy, diskStatus, monitoringStatus, provisionedCapacityInBytes) { 
        obj['accessControlRecords'] = accessControlRecords;
        obj['dataPolicy'] = dataPolicy;
        obj['diskStatus'] = diskStatus;
        obj['monitoringStatus'] = monitoringStatus;
        obj['provisionedCapacityInBytes'] = provisionedCapacityInBytes;
    }

    /**
     * Constructs a <code>ISCSIDiskProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ISCSIDiskProperties} obj Optional instance to populate.
     * @return {module:model/ISCSIDiskProperties} The populated <code>ISCSIDiskProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ISCSIDiskProperties();

            if (data.hasOwnProperty('accessControlRecords')) {
                obj['accessControlRecords'] = ApiClient.convertToType(data['accessControlRecords'], ['String']);
            }
            if (data.hasOwnProperty('dataPolicy')) {
                obj['dataPolicy'] = ApiClient.convertToType(data['dataPolicy'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('diskStatus')) {
                obj['diskStatus'] = ApiClient.convertToType(data['diskStatus'], 'String');
            }
            if (data.hasOwnProperty('localUsedCapacityInBytes')) {
                obj['localUsedCapacityInBytes'] = ApiClient.convertToType(data['localUsedCapacityInBytes'], 'Number');
            }
            if (data.hasOwnProperty('monitoringStatus')) {
                obj['monitoringStatus'] = ApiClient.convertToType(data['monitoringStatus'], 'String');
            }
            if (data.hasOwnProperty('provisionedCapacityInBytes')) {
                obj['provisionedCapacityInBytes'] = ApiClient.convertToType(data['provisionedCapacityInBytes'], 'Number');
            }
            if (data.hasOwnProperty('usedCapacityInBytes')) {
                obj['usedCapacityInBytes'] = ApiClient.convertToType(data['usedCapacityInBytes'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ISCSIDiskProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ISCSIDiskProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ISCSIDiskProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['accessControlRecords'])) {
            throw new Error("Expected the field `accessControlRecords` to be an array in the JSON data but got " + data['accessControlRecords']);
        }
        // ensure the json data is a string
        if (data['dataPolicy'] && !(typeof data['dataPolicy'] === 'string' || data['dataPolicy'] instanceof String)) {
            throw new Error("Expected the field `dataPolicy` to be a primitive type in the JSON string but got " + data['dataPolicy']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['diskStatus'] && !(typeof data['diskStatus'] === 'string' || data['diskStatus'] instanceof String)) {
            throw new Error("Expected the field `diskStatus` to be a primitive type in the JSON string but got " + data['diskStatus']);
        }
        // ensure the json data is a string
        if (data['monitoringStatus'] && !(typeof data['monitoringStatus'] === 'string' || data['monitoringStatus'] instanceof String)) {
            throw new Error("Expected the field `monitoringStatus` to be a primitive type in the JSON string but got " + data['monitoringStatus']);
        }

        return true;
    }


}

ISCSIDiskProperties.RequiredProperties = ["accessControlRecords", "dataPolicy", "diskStatus", "monitoringStatus", "provisionedCapacityInBytes"];

/**
 * The access control records.
 * @member {Array.<String>} accessControlRecords
 */
ISCSIDiskProperties.prototype['accessControlRecords'] = undefined;

/**
 * The data policy.
 * @member {module:model/ISCSIDiskProperties.DataPolicyEnum} dataPolicy
 */
ISCSIDiskProperties.prototype['dataPolicy'] = undefined;

/**
 * The description.
 * @member {String} description
 */
ISCSIDiskProperties.prototype['description'] = undefined;

/**
 * The disk status.
 * @member {module:model/ISCSIDiskProperties.DiskStatusEnum} diskStatus
 */
ISCSIDiskProperties.prototype['diskStatus'] = undefined;

/**
 * The local used capacity in bytes.
 * @member {Number} localUsedCapacityInBytes
 */
ISCSIDiskProperties.prototype['localUsedCapacityInBytes'] = undefined;

/**
 * The monitoring.
 * @member {module:model/ISCSIDiskProperties.MonitoringStatusEnum} monitoringStatus
 */
ISCSIDiskProperties.prototype['monitoringStatus'] = undefined;

/**
 * The provisioned capacity in bytes.
 * @member {Number} provisionedCapacityInBytes
 */
ISCSIDiskProperties.prototype['provisionedCapacityInBytes'] = undefined;

/**
 * The used capacity in bytes.
 * @member {Number} usedCapacityInBytes
 */
ISCSIDiskProperties.prototype['usedCapacityInBytes'] = undefined;





/**
 * Allowed values for the <code>dataPolicy</code> property.
 * @enum {String}
 * @readonly
 */
ISCSIDiskProperties['DataPolicyEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Local"
     * @const
     */
    "Local": "Local",

    /**
     * value: "Tiered"
     * @const
     */
    "Tiered": "Tiered",

    /**
     * value: "Cloud"
     * @const
     */
    "Cloud": "Cloud"
};


/**
 * Allowed values for the <code>diskStatus</code> property.
 * @enum {String}
 * @readonly
 */
ISCSIDiskProperties['DiskStatusEnum'] = {

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online",

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline"
};


/**
 * Allowed values for the <code>monitoringStatus</code> property.
 * @enum {String}
 * @readonly
 */
ISCSIDiskProperties['MonitoringStatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default ISCSIDiskProperties;

