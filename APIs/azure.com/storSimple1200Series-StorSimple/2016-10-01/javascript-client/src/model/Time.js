/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Time model module.
 * @module model/Time
 * @version 2016-10-01
 */
class Time {
    /**
     * Constructs a new <code>Time</code>.
     * The Time.
     * @alias module:model/Time
     * @param hour {Number} The hour.
     * @param minute {Number} The minute.
     */
    constructor(hour, minute) { 
        
        Time.initialize(this, hour, minute);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hour, minute) { 
        obj['hour'] = hour;
        obj['minute'] = minute;
    }

    /**
     * Constructs a <code>Time</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Time} obj Optional instance to populate.
     * @return {module:model/Time} The populated <code>Time</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Time();

            if (data.hasOwnProperty('hour')) {
                obj['hour'] = ApiClient.convertToType(data['hour'], 'Number');
            }
            if (data.hasOwnProperty('minute')) {
                obj['minute'] = ApiClient.convertToType(data['minute'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Time</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Time</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Time.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

Time.RequiredProperties = ["hour", "minute"];

/**
 * The hour.
 * @member {Number} hour
 */
Time.prototype['hour'] = undefined;

/**
 * The minute.
 * @member {Number} minute
 */
Time.prototype['minute'] = undefined;






export default Time;

