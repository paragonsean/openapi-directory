/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Item from './Item';
import Message from './Message';

/**
 * The Error model module.
 * @module model/Error
 * @version 2016-10-01
 */
class Error {
    /**
     * Constructs a new <code>Error</code>.
     * @alias module:model/Error
     * @param errorCode {String} 
     * @param message {module:model/Message} 
     */
    constructor(errorCode, message) { 
        
        Error.initialize(this, errorCode, message);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, errorCode, message) { 
        obj['errorCode'] = errorCode;
        obj['message'] = message;
    }

    /**
     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Error} obj Optional instance to populate.
     * @return {module:model/Error} The populated <code>Error</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Error();

            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = Message.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [Item]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Error</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Error</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Error.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['errorCode'] && !(typeof data['errorCode'] === 'string' || data['errorCode'] instanceof String)) {
            throw new Error("Expected the field `errorCode` to be a primitive type in the JSON string but got " + data['errorCode']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          Message.validateJSON(data['message']);
        }
        if (data['values']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['values'])) {
                throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
            }
            // validate the optional field `values` (array)
            for (const item of data['values']) {
                Item.validateJSON(item);
            };
        }

        return true;
    }


}

Error.RequiredProperties = ["errorCode", "message"];

/**
 * @member {String} errorCode
 */
Error.prototype['errorCode'] = undefined;

/**
 * @member {module:model/Message} message
 */
Error.prototype['message'] = undefined;

/**
 * @member {Array.<module:model/Item>} values
 */
Error.prototype['values'] = undefined;






export default Error;

