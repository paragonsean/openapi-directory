/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AsymmetricEncryptedSecret from './AsymmetricEncryptedSecret';

/**
 * The StorageAccountCredentialProperties model module.
 * @module model/StorageAccountCredentialProperties
 * @version 2016-10-01
 */
class StorageAccountCredentialProperties {
    /**
     * Constructs a new <code>StorageAccountCredentialProperties</code>.
     * Storage account properties
     * @alias module:model/StorageAccountCredentialProperties
     * @param cloudType {module:model/StorageAccountCredentialProperties.CloudTypeEnum} The cloud service provider
     * @param enableSSL {module:model/StorageAccountCredentialProperties.EnableSSLEnum} SSL needs to be enabled or not
     * @param endPoint {String} The storage endpoint
     * @param login {String} The storage account login
     */
    constructor(cloudType, enableSSL, endPoint, login) { 
        
        StorageAccountCredentialProperties.initialize(this, cloudType, enableSSL, endPoint, login);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cloudType, enableSSL, endPoint, login) { 
        obj['cloudType'] = cloudType;
        obj['enableSSL'] = enableSSL;
        obj['endPoint'] = endPoint;
        obj['login'] = login;
    }

    /**
     * Constructs a <code>StorageAccountCredentialProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StorageAccountCredentialProperties} obj Optional instance to populate.
     * @return {module:model/StorageAccountCredentialProperties} The populated <code>StorageAccountCredentialProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StorageAccountCredentialProperties();

            if (data.hasOwnProperty('accessKey')) {
                obj['accessKey'] = AsymmetricEncryptedSecret.constructFromObject(data['accessKey']);
            }
            if (data.hasOwnProperty('cloudType')) {
                obj['cloudType'] = ApiClient.convertToType(data['cloudType'], 'String');
            }
            if (data.hasOwnProperty('enableSSL')) {
                obj['enableSSL'] = ApiClient.convertToType(data['enableSSL'], 'String');
            }
            if (data.hasOwnProperty('endPoint')) {
                obj['endPoint'] = ApiClient.convertToType(data['endPoint'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StorageAccountCredentialProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StorageAccountCredentialProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StorageAccountCredentialProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accessKey`
        if (data['accessKey']) { // data not null
          AsymmetricEncryptedSecret.validateJSON(data['accessKey']);
        }
        // ensure the json data is a string
        if (data['cloudType'] && !(typeof data['cloudType'] === 'string' || data['cloudType'] instanceof String)) {
            throw new Error("Expected the field `cloudType` to be a primitive type in the JSON string but got " + data['cloudType']);
        }
        // ensure the json data is a string
        if (data['enableSSL'] && !(typeof data['enableSSL'] === 'string' || data['enableSSL'] instanceof String)) {
            throw new Error("Expected the field `enableSSL` to be a primitive type in the JSON string but got " + data['enableSSL']);
        }
        // ensure the json data is a string
        if (data['endPoint'] && !(typeof data['endPoint'] === 'string' || data['endPoint'] instanceof String)) {
            throw new Error("Expected the field `endPoint` to be a primitive type in the JSON string but got " + data['endPoint']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }

        return true;
    }


}

StorageAccountCredentialProperties.RequiredProperties = ["cloudType", "enableSSL", "endPoint", "login"];

/**
 * @member {module:model/AsymmetricEncryptedSecret} accessKey
 */
StorageAccountCredentialProperties.prototype['accessKey'] = undefined;

/**
 * The cloud service provider
 * @member {module:model/StorageAccountCredentialProperties.CloudTypeEnum} cloudType
 */
StorageAccountCredentialProperties.prototype['cloudType'] = undefined;

/**
 * SSL needs to be enabled or not
 * @member {module:model/StorageAccountCredentialProperties.EnableSSLEnum} enableSSL
 */
StorageAccountCredentialProperties.prototype['enableSSL'] = undefined;

/**
 * The storage endpoint
 * @member {String} endPoint
 */
StorageAccountCredentialProperties.prototype['endPoint'] = undefined;

/**
 * The storage account's geo location
 * @member {String} location
 */
StorageAccountCredentialProperties.prototype['location'] = undefined;

/**
 * The storage account login
 * @member {String} login
 */
StorageAccountCredentialProperties.prototype['login'] = undefined;





/**
 * Allowed values for the <code>cloudType</code> property.
 * @enum {String}
 * @readonly
 */
StorageAccountCredentialProperties['CloudTypeEnum'] = {

    /**
     * value: "Azure"
     * @const
     */
    "Azure": "Azure",

    /**
     * value: "S3"
     * @const
     */
    "S3": "S3",

    /**
     * value: "S3_RRS"
     * @const
     */
    "S3_RRS": "S3_RRS",

    /**
     * value: "OpenStack"
     * @const
     */
    "OpenStack": "OpenStack",

    /**
     * value: "HP"
     * @const
     */
    "HP": "HP"
};


/**
 * Allowed values for the <code>enableSSL</code> property.
 * @enum {String}
 * @readonly
 */
StorageAccountCredentialProperties['EnableSSLEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default StorageAccountCredentialProperties;

