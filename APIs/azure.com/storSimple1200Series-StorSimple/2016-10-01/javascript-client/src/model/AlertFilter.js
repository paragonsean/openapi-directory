/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AlertFilter model module.
 * @module model/AlertFilter
 * @version 2016-10-01
 */
class AlertFilter {
    /**
     * Constructs a new <code>AlertFilter</code>.
     * Filters that can be specified on the alert
     * @alias module:model/AlertFilter
     */
    constructor() { 
        
        AlertFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlertFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertFilter} obj Optional instance to populate.
     * @return {module:model/AlertFilter} The populated <code>AlertFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertFilter();

            if (data.hasOwnProperty('appearedOnTime')) {
                obj['appearedOnTime'] = ApiClient.convertToType(data['appearedOnTime'], 'Date');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('sourceName')) {
                obj['sourceName'] = ApiClient.convertToType(data['sourceName'], 'String');
            }
            if (data.hasOwnProperty('sourceType')) {
                obj['sourceType'] = ApiClient.convertToType(data['sourceType'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['sourceName'] && !(typeof data['sourceName'] === 'string' || data['sourceName'] instanceof String)) {
            throw new Error("Expected the field `sourceName` to be a primitive type in the JSON string but got " + data['sourceName']);
        }
        // ensure the json data is a string
        if (data['sourceType'] && !(typeof data['sourceType'] === 'string' || data['sourceType'] instanceof String)) {
            throw new Error("Expected the field `sourceType` to be a primitive type in the JSON string but got " + data['sourceType']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * UTC time on which the alert appeared
 * @member {Date} appearedOnTime
 */
AlertFilter.prototype['appearedOnTime'] = undefined;

/**
 * Severity of the alert
 * @member {module:model/AlertFilter.SeverityEnum} severity
 */
AlertFilter.prototype['severity'] = undefined;

/**
 * Source name of the alert
 * @member {String} sourceName
 */
AlertFilter.prototype['sourceName'] = undefined;

/**
 * Source of the alert
 * @member {module:model/AlertFilter.SourceTypeEnum} sourceType
 */
AlertFilter.prototype['sourceType'] = undefined;

/**
 * Status of the alert
 * @member {module:model/AlertFilter.StatusEnum} status
 */
AlertFilter.prototype['status'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
AlertFilter['SeverityEnum'] = {

    /**
     * value: "Informational"
     * @const
     */
    "Informational": "Informational",

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "Critical"
     * @const
     */
    "Critical": "Critical"
};


/**
 * Allowed values for the <code>sourceType</code> property.
 * @enum {String}
 * @readonly
 */
AlertFilter['SourceTypeEnum'] = {

    /**
     * value: "Resource"
     * @const
     */
    "Resource": "Resource",

    /**
     * value: "Device"
     * @const
     */
    "Device": "Device"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AlertFilter['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Cleared"
     * @const
     */
    "Cleared": "Cleared"
};



export default AlertFilter;

