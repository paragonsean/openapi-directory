/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricAvailablity from './MetricAvailablity';
import MetricDimension from './MetricDimension';
import MetricName from './MetricName';

/**
 * The MetricDefinition model module.
 * @module model/MetricDefinition
 * @version 2016-10-01
 */
class MetricDefinition {
    /**
     * Constructs a new <code>MetricDefinition</code>.
     * Monitoring metric definition represents the metadata of the metrics.
     * @alias module:model/MetricDefinition
     * @param dimensions {Array.<module:model/MetricDimension>} The supported dimensions
     * @param metricAvailabilities {Array.<module:model/MetricAvailablity>} The available metric granularities
     * @param name {module:model/MetricName} 
     * @param primaryAggregationType {module:model/MetricDefinition.PrimaryAggregationTypeEnum} The metric aggregation type
     * @param resourceId {String} The metric source id
     * @param type {String} The metric definition type
     * @param unit {module:model/MetricDefinition.UnitEnum} The metric unit
     */
    constructor(dimensions, metricAvailabilities, name, primaryAggregationType, resourceId, type, unit) { 
        
        MetricDefinition.initialize(this, dimensions, metricAvailabilities, name, primaryAggregationType, resourceId, type, unit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dimensions, metricAvailabilities, name, primaryAggregationType, resourceId, type, unit) { 
        obj['dimensions'] = dimensions;
        obj['metricAvailabilities'] = metricAvailabilities;
        obj['name'] = name;
        obj['primaryAggregationType'] = primaryAggregationType;
        obj['resourceId'] = resourceId;
        obj['type'] = type;
        obj['unit'] = unit;
    }

    /**
     * Constructs a <code>MetricDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricDefinition} obj Optional instance to populate.
     * @return {module:model/MetricDefinition} The populated <code>MetricDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricDefinition();

            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [MetricDimension]);
            }
            if (data.hasOwnProperty('metricAvailabilities')) {
                obj['metricAvailabilities'] = ApiClient.convertToType(data['metricAvailabilities'], [MetricAvailablity]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = MetricName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('primaryAggregationType')) {
                obj['primaryAggregationType'] = ApiClient.convertToType(data['primaryAggregationType'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetricDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                MetricDimension.validateJSON(item);
            };
        }
        if (data['metricAvailabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricAvailabilities'])) {
                throw new Error("Expected the field `metricAvailabilities` to be an array in the JSON data but got " + data['metricAvailabilities']);
            }
            // validate the optional field `metricAvailabilities` (array)
            for (const item of data['metricAvailabilities']) {
                MetricAvailablity.validateJSON(item);
            };
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          MetricName.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['primaryAggregationType'] && !(typeof data['primaryAggregationType'] === 'string' || data['primaryAggregationType'] instanceof String)) {
            throw new Error("Expected the field `primaryAggregationType` to be a primitive type in the JSON string but got " + data['primaryAggregationType']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

MetricDefinition.RequiredProperties = ["dimensions", "metricAvailabilities", "name", "primaryAggregationType", "resourceId", "type", "unit"];

/**
 * The supported dimensions
 * @member {Array.<module:model/MetricDimension>} dimensions
 */
MetricDefinition.prototype['dimensions'] = undefined;

/**
 * The available metric granularities
 * @member {Array.<module:model/MetricAvailablity>} metricAvailabilities
 */
MetricDefinition.prototype['metricAvailabilities'] = undefined;

/**
 * @member {module:model/MetricName} name
 */
MetricDefinition.prototype['name'] = undefined;

/**
 * The metric aggregation type
 * @member {module:model/MetricDefinition.PrimaryAggregationTypeEnum} primaryAggregationType
 */
MetricDefinition.prototype['primaryAggregationType'] = undefined;

/**
 * The metric source id
 * @member {String} resourceId
 */
MetricDefinition.prototype['resourceId'] = undefined;

/**
 * The metric definition type
 * @member {String} type
 */
MetricDefinition.prototype['type'] = undefined;

/**
 * The metric unit
 * @member {module:model/MetricDefinition.UnitEnum} unit
 */
MetricDefinition.prototype['unit'] = undefined;





/**
 * Allowed values for the <code>primaryAggregationType</code> property.
 * @enum {String}
 * @readonly
 */
MetricDefinition['PrimaryAggregationTypeEnum'] = {

    /**
     * value: "Average"
     * @const
     */
    "Average": "Average",

    /**
     * value: "Last"
     * @const
     */
    "Last": "Last",

    /**
     * value: "Maximum"
     * @const
     */
    "Maximum": "Maximum",

    /**
     * value: "Minimum"
     * @const
     */
    "Minimum": "Minimum",

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Total"
     * @const
     */
    "Total": "Total"
};


/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
MetricDefinition['UnitEnum'] = {

    /**
     * value: "Bytes"
     * @const
     */
    "Bytes": "Bytes",

    /**
     * value: "BytesPerSecond"
     * @const
     */
    "BytesPerSecond": "BytesPerSecond",

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count",

    /**
     * value: "CountPerSecond"
     * @const
     */
    "CountPerSecond": "CountPerSecond",

    /**
     * value: "Percent"
     * @const
     */
    "Percent": "Percent",

    /**
     * value: "Seconds"
     * @const
     */
    "Seconds": "Seconds"
};



export default MetricDefinition;

