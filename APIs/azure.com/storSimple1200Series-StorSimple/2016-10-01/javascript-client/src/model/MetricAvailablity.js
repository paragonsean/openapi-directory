/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MetricAvailablity model module.
 * @module model/MetricAvailablity
 * @version 2016-10-01
 */
class MetricAvailablity {
    /**
     * Constructs a new <code>MetricAvailablity</code>.
     * Metric availability specifies the time grain (aggregation interval or frequency) and the retention period for that time grain
     * @alias module:model/MetricAvailablity
     * @param retention {String} The retention period for the metric at the specified timegrain
     * @param timeGrain {String} The time grain, specifies the aggregation interval for the metric.
     */
    constructor(retention, timeGrain) { 
        
        MetricAvailablity.initialize(this, retention, timeGrain);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, retention, timeGrain) { 
        obj['retention'] = retention;
        obj['timeGrain'] = timeGrain;
    }

    /**
     * Constructs a <code>MetricAvailablity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricAvailablity} obj Optional instance to populate.
     * @return {module:model/MetricAvailablity} The populated <code>MetricAvailablity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricAvailablity();

            if (data.hasOwnProperty('retention')) {
                obj['retention'] = ApiClient.convertToType(data['retention'], 'String');
            }
            if (data.hasOwnProperty('timeGrain')) {
                obj['timeGrain'] = ApiClient.convertToType(data['timeGrain'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricAvailablity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricAvailablity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetricAvailablity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['retention'] && !(typeof data['retention'] === 'string' || data['retention'] instanceof String)) {
            throw new Error("Expected the field `retention` to be a primitive type in the JSON string but got " + data['retention']);
        }
        // ensure the json data is a string
        if (data['timeGrain'] && !(typeof data['timeGrain'] === 'string' || data['timeGrain'] instanceof String)) {
            throw new Error("Expected the field `timeGrain` to be a primitive type in the JSON string but got " + data['timeGrain']);
        }

        return true;
    }


}

MetricAvailablity.RequiredProperties = ["retention", "timeGrain"];

/**
 * The retention period for the metric at the specified timegrain
 * @member {String} retention
 */
MetricAvailablity.prototype['retention'] = undefined;

/**
 * The time grain, specifies the aggregation interval for the metric.
 * @member {String} timeGrain
 */
MetricAvailablity.prototype['timeGrain'] = undefined;






export default MetricAvailablity;

