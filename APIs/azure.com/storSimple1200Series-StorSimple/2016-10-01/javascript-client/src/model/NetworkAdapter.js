/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IPConfig from './IPConfig';

/**
 * The NetworkAdapter model module.
 * @module model/NetworkAdapter
 * @version 2016-10-01
 */
class NetworkAdapter {
    /**
     * Constructs a new <code>NetworkAdapter</code>.
     * Represents a networkAdapter in a particular node.
     * @alias module:model/NetworkAdapter
     * @param dhcpStatus {module:model/NetworkAdapter.DhcpStatusEnum} Represents state of DHCP.
     * @param networkAdapterName {String} The name of the network adapter.
     */
    constructor(dhcpStatus, networkAdapterName) { 
        
        NetworkAdapter.initialize(this, dhcpStatus, networkAdapterName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dhcpStatus, networkAdapterName) { 
        obj['dhcpStatus'] = dhcpStatus;
        obj['networkAdapterName'] = networkAdapterName;
    }

    /**
     * Constructs a <code>NetworkAdapter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkAdapter} obj Optional instance to populate.
     * @return {module:model/NetworkAdapter} The populated <code>NetworkAdapter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkAdapter();

            if (data.hasOwnProperty('dhcpStatus')) {
                obj['dhcpStatus'] = ApiClient.convertToType(data['dhcpStatus'], 'String');
            }
            if (data.hasOwnProperty('iPv4Info')) {
                obj['iPv4Info'] = IPConfig.constructFromObject(data['iPv4Info']);
            }
            if (data.hasOwnProperty('iPv6Info')) {
                obj['iPv6Info'] = IPConfig.constructFromObject(data['iPv6Info']);
            }
            if (data.hasOwnProperty('linkSpeed')) {
                obj['linkSpeed'] = ApiClient.convertToType(data['linkSpeed'], 'Number');
            }
            if (data.hasOwnProperty('networkAdapterName')) {
                obj['networkAdapterName'] = ApiClient.convertToType(data['networkAdapterName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkAdapter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkAdapter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NetworkAdapter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dhcpStatus'] && !(typeof data['dhcpStatus'] === 'string' || data['dhcpStatus'] instanceof String)) {
            throw new Error("Expected the field `dhcpStatus` to be a primitive type in the JSON string but got " + data['dhcpStatus']);
        }
        // validate the optional field `iPv4Info`
        if (data['iPv4Info']) { // data not null
          IPConfig.validateJSON(data['iPv4Info']);
        }
        // validate the optional field `iPv6Info`
        if (data['iPv6Info']) { // data not null
          IPConfig.validateJSON(data['iPv6Info']);
        }
        // ensure the json data is a string
        if (data['networkAdapterName'] && !(typeof data['networkAdapterName'] === 'string' || data['networkAdapterName'] instanceof String)) {
            throw new Error("Expected the field `networkAdapterName` to be a primitive type in the JSON string but got " + data['networkAdapterName']);
        }

        return true;
    }


}

NetworkAdapter.RequiredProperties = ["dhcpStatus", "networkAdapterName"];

/**
 * Represents state of DHCP.
 * @member {module:model/NetworkAdapter.DhcpStatusEnum} dhcpStatus
 */
NetworkAdapter.prototype['dhcpStatus'] = undefined;

/**
 * @member {module:model/IPConfig} iPv4Info
 */
NetworkAdapter.prototype['iPv4Info'] = undefined;

/**
 * @member {module:model/IPConfig} iPv6Info
 */
NetworkAdapter.prototype['iPv6Info'] = undefined;

/**
 * The speed of the network adapter.
 * @member {Number} linkSpeed
 */
NetworkAdapter.prototype['linkSpeed'] = undefined;

/**
 * The name of the network adapter.
 * @member {String} networkAdapterName
 */
NetworkAdapter.prototype['networkAdapterName'] = undefined;





/**
 * Allowed values for the <code>dhcpStatus</code> property.
 * @enum {String}
 * @readonly
 */
NetworkAdapter['DhcpStatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default NetworkAdapter;

