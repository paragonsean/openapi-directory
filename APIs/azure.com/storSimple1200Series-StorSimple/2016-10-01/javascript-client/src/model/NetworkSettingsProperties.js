/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeNetwork from './NodeNetwork';

/**
 * The NetworkSettingsProperties model module.
 * @module model/NetworkSettingsProperties
 * @version 2016-10-01
 */
class NetworkSettingsProperties {
    /**
     * Constructs a new <code>NetworkSettingsProperties</code>.
     * The properties of NetworkSettings
     * @alias module:model/NetworkSettingsProperties
     * @param nodeNetworks {Array.<module:model/NodeNetwork>} The NetworkAdapters under each node of the device.
     * @param primaryDnsServer {String} The Primary DNS server for the device
     */
    constructor(nodeNetworks, primaryDnsServer) { 
        
        NetworkSettingsProperties.initialize(this, nodeNetworks, primaryDnsServer);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nodeNetworks, primaryDnsServer) { 
        obj['nodeNetworks'] = nodeNetworks;
        obj['primaryDnsServer'] = primaryDnsServer;
    }

    /**
     * Constructs a <code>NetworkSettingsProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkSettingsProperties} obj Optional instance to populate.
     * @return {module:model/NetworkSettingsProperties} The populated <code>NetworkSettingsProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkSettingsProperties();

            if (data.hasOwnProperty('nodeNetworks')) {
                obj['nodeNetworks'] = ApiClient.convertToType(data['nodeNetworks'], [NodeNetwork]);
            }
            if (data.hasOwnProperty('primaryDnsServer')) {
                obj['primaryDnsServer'] = ApiClient.convertToType(data['primaryDnsServer'], 'String');
            }
            if (data.hasOwnProperty('secondaryDnsServer')) {
                obj['secondaryDnsServer'] = ApiClient.convertToType(data['secondaryDnsServer'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkSettingsProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkSettingsProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NetworkSettingsProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['nodeNetworks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nodeNetworks'])) {
                throw new Error("Expected the field `nodeNetworks` to be an array in the JSON data but got " + data['nodeNetworks']);
            }
            // validate the optional field `nodeNetworks` (array)
            for (const item of data['nodeNetworks']) {
                NodeNetwork.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['primaryDnsServer'] && !(typeof data['primaryDnsServer'] === 'string' || data['primaryDnsServer'] instanceof String)) {
            throw new Error("Expected the field `primaryDnsServer` to be a primitive type in the JSON string but got " + data['primaryDnsServer']);
        }
        // ensure the json data is a string
        if (data['secondaryDnsServer'] && !(typeof data['secondaryDnsServer'] === 'string' || data['secondaryDnsServer'] instanceof String)) {
            throw new Error("Expected the field `secondaryDnsServer` to be a primitive type in the JSON string but got " + data['secondaryDnsServer']);
        }

        return true;
    }


}

NetworkSettingsProperties.RequiredProperties = ["nodeNetworks", "primaryDnsServer"];

/**
 * The NetworkAdapters under each node of the device.
 * @member {Array.<module:model/NodeNetwork>} nodeNetworks
 */
NetworkSettingsProperties.prototype['nodeNetworks'] = undefined;

/**
 * The Primary DNS server for the device
 * @member {String} primaryDnsServer
 */
NetworkSettingsProperties.prototype['primaryDnsServer'] = undefined;

/**
 * The secondary DNS server for the device
 * @member {String} secondaryDnsServer
 */
NetworkSettingsProperties.prototype['secondaryDnsServer'] = undefined;






export default NetworkSettingsProperties;

