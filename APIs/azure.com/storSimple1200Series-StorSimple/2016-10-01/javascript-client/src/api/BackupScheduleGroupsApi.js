/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BackupScheduleGroup from '../model/BackupScheduleGroup';
import BackupScheduleGroupList from '../model/BackupScheduleGroupList';
import Error from '../model/Error';

/**
* BackupScheduleGroups service.
* @module api/BackupScheduleGroupsApi
* @version 2016-10-01
*/
export default class BackupScheduleGroupsApi {

    /**
    * Constructs a new BackupScheduleGroupsApi. 
    * @alias module:api/BackupScheduleGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the backupScheduleGroupsCreateOrUpdate operation.
     * @callback module:api/BackupScheduleGroupsApi~backupScheduleGroupsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupScheduleGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or Updates the backup schedule Group.
     * @param {String} deviceName The name of the device.
     * @param {String} scheduleGroupName The name of the schedule group.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:model/BackupScheduleGroup} scheduleGroup The schedule group to be created
     * @param {module:api/BackupScheduleGroupsApi~backupScheduleGroupsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupScheduleGroup}
     */
    backupScheduleGroupsCreateOrUpdate(deviceName, scheduleGroupName, subscriptionId, resourceGroupName, managerName, apiVersion, scheduleGroup, callback) {
      let postBody = scheduleGroup;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling backupScheduleGroupsCreateOrUpdate");
      }
      // verify the required parameter 'scheduleGroupName' is set
      if (scheduleGroupName === undefined || scheduleGroupName === null) {
        throw new Error("Missing the required parameter 'scheduleGroupName' when calling backupScheduleGroupsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling backupScheduleGroupsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling backupScheduleGroupsCreateOrUpdate");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling backupScheduleGroupsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling backupScheduleGroupsCreateOrUpdate");
      }
      // verify the required parameter 'scheduleGroup' is set
      if (scheduleGroup === undefined || scheduleGroup === null) {
        throw new Error("Missing the required parameter 'scheduleGroup' when calling backupScheduleGroupsCreateOrUpdate");
      }

      let pathParams = {
        'deviceName': deviceName,
        'scheduleGroupName': scheduleGroupName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BackupScheduleGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupScheduleGroups/{scheduleGroupName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backupScheduleGroupsDelete operation.
     * @callback module:api/BackupScheduleGroupsApi~backupScheduleGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the backup schedule group.
     * @param {String} deviceName The name of the device.
     * @param {String} scheduleGroupName The name of the schedule group.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/BackupScheduleGroupsApi~backupScheduleGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    backupScheduleGroupsDelete(deviceName, scheduleGroupName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling backupScheduleGroupsDelete");
      }
      // verify the required parameter 'scheduleGroupName' is set
      if (scheduleGroupName === undefined || scheduleGroupName === null) {
        throw new Error("Missing the required parameter 'scheduleGroupName' when calling backupScheduleGroupsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling backupScheduleGroupsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling backupScheduleGroupsDelete");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling backupScheduleGroupsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling backupScheduleGroupsDelete");
      }

      let pathParams = {
        'deviceName': deviceName,
        'scheduleGroupName': scheduleGroupName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupScheduleGroups/{scheduleGroupName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backupScheduleGroupsGet operation.
     * @callback module:api/BackupScheduleGroupsApi~backupScheduleGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupScheduleGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the properties of the specified backup schedule group name.
     * @param {String} deviceName The name of the device.
     * @param {String} scheduleGroupName The name of the schedule group.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/BackupScheduleGroupsApi~backupScheduleGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupScheduleGroup}
     */
    backupScheduleGroupsGet(deviceName, scheduleGroupName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling backupScheduleGroupsGet");
      }
      // verify the required parameter 'scheduleGroupName' is set
      if (scheduleGroupName === undefined || scheduleGroupName === null) {
        throw new Error("Missing the required parameter 'scheduleGroupName' when calling backupScheduleGroupsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling backupScheduleGroupsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling backupScheduleGroupsGet");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling backupScheduleGroupsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling backupScheduleGroupsGet");
      }

      let pathParams = {
        'deviceName': deviceName,
        'scheduleGroupName': scheduleGroupName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupScheduleGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupScheduleGroups/{scheduleGroupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backupScheduleGroupsListByDevice operation.
     * @callback module:api/BackupScheduleGroupsApi~backupScheduleGroupsListByDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupScheduleGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all the backup schedule groups in a device.
     * @param {String} deviceName The name of the device.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/BackupScheduleGroupsApi~backupScheduleGroupsListByDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupScheduleGroupList}
     */
    backupScheduleGroupsListByDevice(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling backupScheduleGroupsListByDevice");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling backupScheduleGroupsListByDevice");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling backupScheduleGroupsListByDevice");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling backupScheduleGroupsListByDevice");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling backupScheduleGroupsListByDevice");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupScheduleGroupList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupScheduleGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
