/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ISCSIServer from '../model/ISCSIServer';
import ISCSIServerList from '../model/ISCSIServerList';
import MetricDefinitionList from '../model/MetricDefinitionList';
import MetricList from '../model/MetricList';

/**
* IscsiServers service.
* @module api/IscsiServersApi
* @version 2016-10-01
*/
export default class IscsiServersApi {

    /**
    * Constructs a new IscsiServersApi. 
    * @alias module:api/IscsiServersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the iscsiServersBackupNow operation.
     * @callback module:api/IscsiServersApi~iscsiServersBackupNowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Backup the iSCSI server now.
     * @param {String} deviceName The device name.
     * @param {String} iscsiServerName The iSCSI server name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/IscsiServersApi~iscsiServersBackupNowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iscsiServersBackupNow(deviceName, iscsiServerName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling iscsiServersBackupNow");
      }
      // verify the required parameter 'iscsiServerName' is set
      if (iscsiServerName === undefined || iscsiServerName === null) {
        throw new Error("Missing the required parameter 'iscsiServerName' when calling iscsiServersBackupNow");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iscsiServersBackupNow");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iscsiServersBackupNow");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling iscsiServersBackupNow");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iscsiServersBackupNow");
      }

      let pathParams = {
        'deviceName': deviceName,
        'iscsiServerName': iscsiServerName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/backup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iscsiServersCreateOrUpdate operation.
     * @callback module:api/IscsiServersApi~iscsiServersCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ISCSIServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the iSCSI server.
     * @param {String} deviceName The device name.
     * @param {String} iscsiServerName The iSCSI server name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:model/ISCSIServer} iscsiServer The iSCSI server.
     * @param {module:api/IscsiServersApi~iscsiServersCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ISCSIServer}
     */
    iscsiServersCreateOrUpdate(deviceName, iscsiServerName, subscriptionId, resourceGroupName, managerName, apiVersion, iscsiServer, callback) {
      let postBody = iscsiServer;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling iscsiServersCreateOrUpdate");
      }
      // verify the required parameter 'iscsiServerName' is set
      if (iscsiServerName === undefined || iscsiServerName === null) {
        throw new Error("Missing the required parameter 'iscsiServerName' when calling iscsiServersCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iscsiServersCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iscsiServersCreateOrUpdate");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling iscsiServersCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iscsiServersCreateOrUpdate");
      }
      // verify the required parameter 'iscsiServer' is set
      if (iscsiServer === undefined || iscsiServer === null) {
        throw new Error("Missing the required parameter 'iscsiServer' when calling iscsiServersCreateOrUpdate");
      }

      let pathParams = {
        'deviceName': deviceName,
        'iscsiServerName': iscsiServerName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ISCSIServer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iscsiServersDelete operation.
     * @callback module:api/IscsiServersApi~iscsiServersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the iSCSI server.
     * @param {String} deviceName The device name.
     * @param {String} iscsiServerName The iSCSI server name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/IscsiServersApi~iscsiServersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iscsiServersDelete(deviceName, iscsiServerName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling iscsiServersDelete");
      }
      // verify the required parameter 'iscsiServerName' is set
      if (iscsiServerName === undefined || iscsiServerName === null) {
        throw new Error("Missing the required parameter 'iscsiServerName' when calling iscsiServersDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iscsiServersDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iscsiServersDelete");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling iscsiServersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iscsiServersDelete");
      }

      let pathParams = {
        'deviceName': deviceName,
        'iscsiServerName': iscsiServerName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iscsiServersGet operation.
     * @callback module:api/IscsiServersApi~iscsiServersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ISCSIServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the properties of the specified iSCSI server name.
     * @param {String} deviceName The device name.
     * @param {String} iscsiServerName The iSCSI server name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/IscsiServersApi~iscsiServersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ISCSIServer}
     */
    iscsiServersGet(deviceName, iscsiServerName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling iscsiServersGet");
      }
      // verify the required parameter 'iscsiServerName' is set
      if (iscsiServerName === undefined || iscsiServerName === null) {
        throw new Error("Missing the required parameter 'iscsiServerName' when calling iscsiServersGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iscsiServersGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iscsiServersGet");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling iscsiServersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iscsiServersGet");
      }

      let pathParams = {
        'deviceName': deviceName,
        'iscsiServerName': iscsiServerName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ISCSIServer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iscsiServersListByDevice operation.
     * @callback module:api/IscsiServersApi~iscsiServersListByDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ISCSIServerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all the iSCSI in a device.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/IscsiServersApi~iscsiServersListByDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ISCSIServerList}
     */
    iscsiServersListByDevice(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling iscsiServersListByDevice");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iscsiServersListByDevice");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iscsiServersListByDevice");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling iscsiServersListByDevice");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iscsiServersListByDevice");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ISCSIServerList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iscsiServersListByManager operation.
     * @callback module:api/IscsiServersApi~iscsiServersListByManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ISCSIServerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all the iSCSI servers in a manager.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/IscsiServersApi~iscsiServersListByManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ISCSIServerList}
     */
    iscsiServersListByManager(subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iscsiServersListByManager");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iscsiServersListByManager");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling iscsiServersListByManager");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iscsiServersListByManager");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ISCSIServerList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/iscsiservers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iscsiServersListMetricDefinition operation.
     * @callback module:api/IscsiServersApi~iscsiServersListMetricDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves metric definitions for all metrics aggregated at iSCSI server.
     * @param {String} deviceName The device name.
     * @param {String} iscsiServerName The iSCSI server name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/IscsiServersApi~iscsiServersListMetricDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionList}
     */
    iscsiServersListMetricDefinition(deviceName, iscsiServerName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling iscsiServersListMetricDefinition");
      }
      // verify the required parameter 'iscsiServerName' is set
      if (iscsiServerName === undefined || iscsiServerName === null) {
        throw new Error("Missing the required parameter 'iscsiServerName' when calling iscsiServersListMetricDefinition");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iscsiServersListMetricDefinition");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iscsiServersListMetricDefinition");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling iscsiServersListMetricDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iscsiServersListMetricDefinition");
      }

      let pathParams = {
        'deviceName': deviceName,
        'iscsiServerName': iscsiServerName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricDefinitionList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/metricsDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iscsiServersListMetrics operation.
     * @callback module:api/IscsiServersApi~iscsiServersListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the iSCSI server metrics
     * @param {String} deviceName The device name.
     * @param {String} iscsiServerName The iSCSI server name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData Filter options
     * @param {module:api/IscsiServersApi~iscsiServersListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricList}
     */
    iscsiServersListMetrics(deviceName, iscsiServerName, subscriptionId, resourceGroupName, managerName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling iscsiServersListMetrics");
      }
      // verify the required parameter 'iscsiServerName' is set
      if (iscsiServerName === undefined || iscsiServerName === null) {
        throw new Error("Missing the required parameter 'iscsiServerName' when calling iscsiServersListMetrics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iscsiServersListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iscsiServersListMetrics");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling iscsiServersListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iscsiServersListMetrics");
      }

      let pathParams = {
        'deviceName': deviceName,
        'iscsiServerName': iscsiServerName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
