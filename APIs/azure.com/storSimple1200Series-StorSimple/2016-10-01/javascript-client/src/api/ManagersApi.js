/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EncryptionSettings from '../model/EncryptionSettings';
import Error from '../model/Error';
import Manager from '../model/Manager';
import ManagerExtendedInfo from '../model/ManagerExtendedInfo';
import ManagerList from '../model/ManagerList';
import ManagerPatch from '../model/ManagerPatch';
import MetricDefinitionList from '../model/MetricDefinitionList';
import MetricList from '../model/MetricList';
import SymmetricEncryptedSecret from '../model/SymmetricEncryptedSecret';
import UploadCertificateRequest from '../model/UploadCertificateRequest';
import UploadCertificateResponse from '../model/UploadCertificateResponse';

/**
* Managers service.
* @module api/ManagersApi
* @version 2016-10-01
*/
export default class ManagersApi {

    /**
    * Constructs a new ManagersApi. 
    * @alias module:api/ManagersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the managersCreateExtendedInfo operation.
     * @callback module:api/ManagersApi~managersCreateExtendedInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerExtendedInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the extended info of the manager.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:model/ManagerExtendedInfo} managerExtendedInfo The manager extended information.
     * @param {module:api/ManagersApi~managersCreateExtendedInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerExtendedInfo}
     */
    managersCreateExtendedInfo(subscriptionId, resourceGroupName, managerName, apiVersion, managerExtendedInfo, callback) {
      let postBody = managerExtendedInfo;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersCreateExtendedInfo");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersCreateExtendedInfo");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling managersCreateExtendedInfo");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersCreateExtendedInfo");
      }
      // verify the required parameter 'managerExtendedInfo' is set
      if (managerExtendedInfo === undefined || managerExtendedInfo === null) {
        throw new Error("Missing the required parameter 'managerExtendedInfo' when calling managersCreateExtendedInfo");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagerExtendedInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersCreateOrUpdate operation.
     * @callback module:api/ManagersApi~managersCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the manager.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:model/Manager} manager The manager.
     * @param {module:api/ManagersApi~managersCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manager}
     */
    managersCreateOrUpdate(subscriptionId, resourceGroupName, managerName, apiVersion, manager, callback) {
      let postBody = manager;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersCreateOrUpdate");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling managersCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersCreateOrUpdate");
      }
      // verify the required parameter 'manager' is set
      if (manager === undefined || manager === null) {
        throw new Error("Missing the required parameter 'manager' when calling managersCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Manager;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersDelete operation.
     * @callback module:api/ManagersApi~managersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the manager.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/ManagersApi~managersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managersDelete(subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersDelete");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling managersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersDeleteExtendedInfo operation.
     * @callback module:api/ManagersApi~managersDeleteExtendedInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the extended info of the manager.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/ManagersApi~managersDeleteExtendedInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managersDeleteExtendedInfo(subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersDeleteExtendedInfo");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersDeleteExtendedInfo");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling managersDeleteExtendedInfo");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersDeleteExtendedInfo");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersGet operation.
     * @callback module:api/ManagersApi~managersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the properties of the specified manager name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/ManagersApi~managersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manager}
     */
    managersGet(subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersGet");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling managersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Manager;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersGetEncryptionKey operation.
     * @callback module:api/ManagersApi~managersGetEncryptionKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SymmetricEncryptedSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the symmetric encryption key of the manager.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/ManagersApi~managersGetEncryptionKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SymmetricEncryptedSecret}
     */
    managersGetEncryptionKey(subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersGetEncryptionKey");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersGetEncryptionKey");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling managersGetEncryptionKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersGetEncryptionKey");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SymmetricEncryptedSecret;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/getEncryptionKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersGetEncryptionSettings operation.
     * @callback module:api/ManagersApi~managersGetEncryptionSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptionSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the encryption settings of the manager.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/ManagersApi~managersGetEncryptionSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptionSettings}
     */
    managersGetEncryptionSettings(subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersGetEncryptionSettings");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersGetEncryptionSettings");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling managersGetEncryptionSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersGetEncryptionSettings");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EncryptionSettings;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/encryptionSettings/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersGetExtendedInfo operation.
     * @callback module:api/ManagersApi~managersGetExtendedInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerExtendedInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the extended information of the specified manager name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/ManagersApi~managersGetExtendedInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerExtendedInfo}
     */
    managersGetExtendedInfo(subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersGetExtendedInfo");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersGetExtendedInfo");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling managersGetExtendedInfo");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersGetExtendedInfo");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagerExtendedInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersList operation.
     * @callback module:api/ManagersApi~managersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all the managers in a subscription.
     * @param {String} subscriptionId The subscription id
     * @param {String} apiVersion The api version
     * @param {module:api/ManagersApi~managersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerList}
     */
    managersList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagerList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.StorSimple/managers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersListByResourceGroup operation.
     * @callback module:api/ManagersApi~managersListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all the managers in a resource group.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} apiVersion The api version
     * @param {module:api/ManagersApi~managersListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerList}
     */
    managersListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagerList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersListMetricDefinition operation.
     * @callback module:api/ManagersApi~managersListMetricDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves metric definition of all metrics aggregated at manager.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/ManagersApi~managersListMetricDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionList}
     */
    managersListMetricDefinition(subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersListMetricDefinition");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersListMetricDefinition");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling managersListMetricDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersListMetricDefinition");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricDefinitionList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/metricsDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersListMetrics operation.
     * @callback module:api/ManagersApi~managersListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the  manager metrics
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData Filter options
     * @param {module:api/ManagersApi~managersListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricList}
     */
    managersListMetrics(subscriptionId, resourceGroupName, managerName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersListMetrics");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling managersListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersUpdate operation.
     * @callback module:api/ManagersApi~managersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the StorSimple Manager.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:model/ManagerPatch} parameters The manager update parameters.
     * @param {module:api/ManagersApi~managersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manager}
     */
    managersUpdate(subscriptionId, resourceGroupName, managerName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersUpdate");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling managersUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling managersUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Manager;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersUpdateExtendedInfo operation.
     * @callback module:api/ManagersApi~managersUpdateExtendedInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerExtendedInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the extended info of the manager.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {String} ifMatch Pass the ETag of ExtendedInfo fetched from GET call
     * @param {module:model/ManagerExtendedInfo} managerExtendedInfo The manager extended information.
     * @param {module:api/ManagersApi~managersUpdateExtendedInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerExtendedInfo}
     */
    managersUpdateExtendedInfo(subscriptionId, resourceGroupName, managerName, apiVersion, ifMatch, managerExtendedInfo, callback) {
      let postBody = managerExtendedInfo;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersUpdateExtendedInfo");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersUpdateExtendedInfo");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling managersUpdateExtendedInfo");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersUpdateExtendedInfo");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling managersUpdateExtendedInfo");
      }
      // verify the required parameter 'managerExtendedInfo' is set
      if (managerExtendedInfo === undefined || managerExtendedInfo === null) {
        throw new Error("Missing the required parameter 'managerExtendedInfo' when calling managersUpdateExtendedInfo");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagerExtendedInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managersUploadRegistrationCertificate operation.
     * @callback module:api/ManagersApi~managersUploadRegistrationCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadCertificateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Vault Cred Certificate.  Returns UploadCertificateResponse
     * @param {String} certificateName Certificate Name
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:model/UploadCertificateRequest} uploadCertificateRequestrequest UploadCertificateRequest Request
     * @param {module:api/ManagersApi~managersUploadRegistrationCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadCertificateResponse}
     */
    managersUploadRegistrationCertificate(certificateName, subscriptionId, resourceGroupName, managerName, apiVersion, uploadCertificateRequestrequest, callback) {
      let postBody = uploadCertificateRequestrequest;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling managersUploadRegistrationCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managersUploadRegistrationCertificate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managersUploadRegistrationCertificate");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling managersUploadRegistrationCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managersUploadRegistrationCertificate");
      }
      // verify the required parameter 'uploadCertificateRequestrequest' is set
      if (uploadCertificateRequestrequest === undefined || uploadCertificateRequestrequest === null) {
        throw new Error("Missing the required parameter 'uploadCertificateRequestrequest' when calling managersUploadRegistrationCertificate");
      }

      let pathParams = {
        'certificateName': certificateName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UploadCertificateResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/certificates/{certificateName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
