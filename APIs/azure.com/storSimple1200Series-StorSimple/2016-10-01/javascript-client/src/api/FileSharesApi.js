/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import FileShare from '../model/FileShare';
import FileShareList from '../model/FileShareList';
import MetricDefinitionList from '../model/MetricDefinitionList';
import MetricList from '../model/MetricList';

/**
* FileShares service.
* @module api/FileSharesApi
* @version 2016-10-01
*/
export default class FileSharesApi {

    /**
    * Constructs a new FileSharesApi. 
    * @alias module:api/FileSharesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fileSharesCreateOrUpdate operation.
     * @callback module:api/FileSharesApi~fileSharesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the file share.
     * @param {String} deviceName The device name.
     * @param {String} fileServerName The file server name.
     * @param {String} shareName The file share name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:model/FileShare} fileShare The file share.
     * @param {module:api/FileSharesApi~fileSharesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileShare}
     */
    fileSharesCreateOrUpdate(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, fileShare, callback) {
      let postBody = fileShare;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling fileSharesCreateOrUpdate");
      }
      // verify the required parameter 'fileServerName' is set
      if (fileServerName === undefined || fileServerName === null) {
        throw new Error("Missing the required parameter 'fileServerName' when calling fileSharesCreateOrUpdate");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling fileSharesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling fileSharesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling fileSharesCreateOrUpdate");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling fileSharesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileSharesCreateOrUpdate");
      }
      // verify the required parameter 'fileShare' is set
      if (fileShare === undefined || fileShare === null) {
        throw new Error("Missing the required parameter 'fileShare' when calling fileSharesCreateOrUpdate");
      }

      let pathParams = {
        'deviceName': deviceName,
        'fileServerName': fileServerName,
        'shareName': shareName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileShare;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileSharesDelete operation.
     * @callback module:api/FileSharesApi~fileSharesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the file share.
     * @param {String} deviceName The device name.
     * @param {String} fileServerName The file server name.
     * @param {String} shareName The file share Name
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/FileSharesApi~fileSharesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fileSharesDelete(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling fileSharesDelete");
      }
      // verify the required parameter 'fileServerName' is set
      if (fileServerName === undefined || fileServerName === null) {
        throw new Error("Missing the required parameter 'fileServerName' when calling fileSharesDelete");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling fileSharesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling fileSharesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling fileSharesDelete");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling fileSharesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileSharesDelete");
      }

      let pathParams = {
        'deviceName': deviceName,
        'fileServerName': fileServerName,
        'shareName': shareName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileSharesGet operation.
     * @callback module:api/FileSharesApi~fileSharesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the properties of the specified file share name.
     * @param {String} deviceName The device name.
     * @param {String} fileServerName The file server name.
     * @param {String} shareName The file share name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/FileSharesApi~fileSharesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileShare}
     */
    fileSharesGet(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling fileSharesGet");
      }
      // verify the required parameter 'fileServerName' is set
      if (fileServerName === undefined || fileServerName === null) {
        throw new Error("Missing the required parameter 'fileServerName' when calling fileSharesGet");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling fileSharesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling fileSharesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling fileSharesGet");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling fileSharesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileSharesGet");
      }

      let pathParams = {
        'deviceName': deviceName,
        'fileServerName': fileServerName,
        'shareName': shareName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileShare;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileSharesListByDevice operation.
     * @callback module:api/FileSharesApi~fileSharesListByDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileShareList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all the file shares in a device.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/FileSharesApi~fileSharesListByDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileShareList}
     */
    fileSharesListByDevice(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling fileSharesListByDevice");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling fileSharesListByDevice");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling fileSharesListByDevice");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling fileSharesListByDevice");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileSharesListByDevice");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileShareList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileSharesListByFileServer operation.
     * @callback module:api/FileSharesApi~fileSharesListByFileServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileShareList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all the file shares in a file server.
     * @param {String} deviceName The device name.
     * @param {String} fileServerName The file server name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/FileSharesApi~fileSharesListByFileServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileShareList}
     */
    fileSharesListByFileServer(deviceName, fileServerName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling fileSharesListByFileServer");
      }
      // verify the required parameter 'fileServerName' is set
      if (fileServerName === undefined || fileServerName === null) {
        throw new Error("Missing the required parameter 'fileServerName' when calling fileSharesListByFileServer");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling fileSharesListByFileServer");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling fileSharesListByFileServer");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling fileSharesListByFileServer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileSharesListByFileServer");
      }

      let pathParams = {
        'deviceName': deviceName,
        'fileServerName': fileServerName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileShareList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileSharesListMetricDefinition operation.
     * @callback module:api/FileSharesApi~fileSharesListMetricDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves metric definitions of all metrics aggregated at the file share.
     * @param {String} deviceName The device name.
     * @param {String} fileServerName The file server name.
     * @param {String} shareName The file share name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/FileSharesApi~fileSharesListMetricDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionList}
     */
    fileSharesListMetricDefinition(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling fileSharesListMetricDefinition");
      }
      // verify the required parameter 'fileServerName' is set
      if (fileServerName === undefined || fileServerName === null) {
        throw new Error("Missing the required parameter 'fileServerName' when calling fileSharesListMetricDefinition");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling fileSharesListMetricDefinition");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling fileSharesListMetricDefinition");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling fileSharesListMetricDefinition");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling fileSharesListMetricDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileSharesListMetricDefinition");
      }

      let pathParams = {
        'deviceName': deviceName,
        'fileServerName': fileServerName,
        'shareName': shareName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricDefinitionList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}/metricsDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileSharesListMetrics operation.
     * @callback module:api/FileSharesApi~fileSharesListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the file share metrics
     * @param {String} deviceName The device name.
     * @param {String} fileServerName The file server name.
     * @param {String} shareName The file share name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData Filter options
     * @param {module:api/FileSharesApi~fileSharesListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricList}
     */
    fileSharesListMetrics(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling fileSharesListMetrics");
      }
      // verify the required parameter 'fileServerName' is set
      if (fileServerName === undefined || fileServerName === null) {
        throw new Error("Missing the required parameter 'fileServerName' when calling fileSharesListMetrics");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling fileSharesListMetrics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling fileSharesListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling fileSharesListMetrics");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling fileSharesListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileSharesListMetrics");
      }

      let pathParams = {
        'deviceName': deviceName,
        'fileServerName': fileServerName,
        'shareName': shareName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
