/**
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StorSimpleManagementClient);
  }
}(this, function(expect, StorSimpleManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StorSimpleManagementClient.DevicesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DevicesApi', function() {
    describe('devicesCreateOrUpdateAlertSettings', function() {
      it('should call devicesCreateOrUpdateAlertSettings successfully', function(done) {
        //uncomment below and update the code to test devicesCreateOrUpdateAlertSettings
        //instance.devicesCreateOrUpdateAlertSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesCreateOrUpdateSecuritySettings', function() {
      it('should call devicesCreateOrUpdateSecuritySettings successfully', function(done) {
        //uncomment below and update the code to test devicesCreateOrUpdateSecuritySettings
        //instance.devicesCreateOrUpdateSecuritySettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesDeactivate', function() {
      it('should call devicesDeactivate successfully', function(done) {
        //uncomment below and update the code to test devicesDeactivate
        //instance.devicesDeactivate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesDelete', function() {
      it('should call devicesDelete successfully', function(done) {
        //uncomment below and update the code to test devicesDelete
        //instance.devicesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesDownloadUpdates', function() {
      it('should call devicesDownloadUpdates successfully', function(done) {
        //uncomment below and update the code to test devicesDownloadUpdates
        //instance.devicesDownloadUpdates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesFailover', function() {
      it('should call devicesFailover successfully', function(done) {
        //uncomment below and update the code to test devicesFailover
        //instance.devicesFailover(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesGet', function() {
      it('should call devicesGet successfully', function(done) {
        //uncomment below and update the code to test devicesGet
        //instance.devicesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesGetAlertSettings', function() {
      it('should call devicesGetAlertSettings successfully', function(done) {
        //uncomment below and update the code to test devicesGetAlertSettings
        //instance.devicesGetAlertSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesGetNetworkSettings', function() {
      it('should call devicesGetNetworkSettings successfully', function(done) {
        //uncomment below and update the code to test devicesGetNetworkSettings
        //instance.devicesGetNetworkSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesGetTimeSettings', function() {
      it('should call devicesGetTimeSettings successfully', function(done) {
        //uncomment below and update the code to test devicesGetTimeSettings
        //instance.devicesGetTimeSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesGetUpdateSummary', function() {
      it('should call devicesGetUpdateSummary successfully', function(done) {
        //uncomment below and update the code to test devicesGetUpdateSummary
        //instance.devicesGetUpdateSummary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesInstallUpdates', function() {
      it('should call devicesInstallUpdates successfully', function(done) {
        //uncomment below and update the code to test devicesInstallUpdates
        //instance.devicesInstallUpdates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesListByManager', function() {
      it('should call devicesListByManager successfully', function(done) {
        //uncomment below and update the code to test devicesListByManager
        //instance.devicesListByManager(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesListFailoverTarget', function() {
      it('should call devicesListFailoverTarget successfully', function(done) {
        //uncomment below and update the code to test devicesListFailoverTarget
        //instance.devicesListFailoverTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesListMetricDefinition', function() {
      it('should call devicesListMetricDefinition successfully', function(done) {
        //uncomment below and update the code to test devicesListMetricDefinition
        //instance.devicesListMetricDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesListMetrics', function() {
      it('should call devicesListMetrics successfully', function(done) {
        //uncomment below and update the code to test devicesListMetrics
        //instance.devicesListMetrics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesPatch', function() {
      it('should call devicesPatch successfully', function(done) {
        //uncomment below and update the code to test devicesPatch
        //instance.devicesPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesScanForUpdates', function() {
      it('should call devicesScanForUpdates successfully', function(done) {
        //uncomment below and update the code to test devicesScanForUpdates
        //instance.devicesScanForUpdates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
