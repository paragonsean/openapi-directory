# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_network import NodeNetwork
from openapi_server import util


class NetworkSettingsProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_networks: List[NodeNetwork]=None, primary_dns_server: str=None, secondary_dns_server: str=None):
        """NetworkSettingsProperties - a model defined in OpenAPI

        :param node_networks: The node_networks of this NetworkSettingsProperties.
        :param primary_dns_server: The primary_dns_server of this NetworkSettingsProperties.
        :param secondary_dns_server: The secondary_dns_server of this NetworkSettingsProperties.
        """
        self.openapi_types = {
            'node_networks': List[NodeNetwork],
            'primary_dns_server': str,
            'secondary_dns_server': str
        }

        self.attribute_map = {
            'node_networks': 'nodeNetworks',
            'primary_dns_server': 'primaryDnsServer',
            'secondary_dns_server': 'secondaryDnsServer'
        }

        self._node_networks = node_networks
        self._primary_dns_server = primary_dns_server
        self._secondary_dns_server = secondary_dns_server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkSettingsProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkSettingsProperties of this NetworkSettingsProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_networks(self):
        """Gets the node_networks of this NetworkSettingsProperties.

        The NetworkAdapters under each node of the device.

        :return: The node_networks of this NetworkSettingsProperties.
        :rtype: List[NodeNetwork]
        """
        return self._node_networks

    @node_networks.setter
    def node_networks(self, node_networks):
        """Sets the node_networks of this NetworkSettingsProperties.

        The NetworkAdapters under each node of the device.

        :param node_networks: The node_networks of this NetworkSettingsProperties.
        :type node_networks: List[NodeNetwork]
        """
        if node_networks is None:
            raise ValueError("Invalid value for `node_networks`, must not be `None`")

        self._node_networks = node_networks

    @property
    def primary_dns_server(self):
        """Gets the primary_dns_server of this NetworkSettingsProperties.

        The Primary DNS server for the device

        :return: The primary_dns_server of this NetworkSettingsProperties.
        :rtype: str
        """
        return self._primary_dns_server

    @primary_dns_server.setter
    def primary_dns_server(self, primary_dns_server):
        """Sets the primary_dns_server of this NetworkSettingsProperties.

        The Primary DNS server for the device

        :param primary_dns_server: The primary_dns_server of this NetworkSettingsProperties.
        :type primary_dns_server: str
        """
        if primary_dns_server is None:
            raise ValueError("Invalid value for `primary_dns_server`, must not be `None`")

        self._primary_dns_server = primary_dns_server

    @property
    def secondary_dns_server(self):
        """Gets the secondary_dns_server of this NetworkSettingsProperties.

        The secondary DNS server for the device

        :return: The secondary_dns_server of this NetworkSettingsProperties.
        :rtype: str
        """
        return self._secondary_dns_server

    @secondary_dns_server.setter
    def secondary_dns_server(self, secondary_dns_server):
        """Sets the secondary_dns_server of this NetworkSettingsProperties.

        The secondary DNS server for the device

        :param secondary_dns_server: The secondary_dns_server of this NetworkSettingsProperties.
        :type secondary_dns_server: str
        """

        self._secondary_dns_server = secondary_dns_server
