# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asymmetric_encrypted_secret import AsymmetricEncryptedSecret
from openapi_server import util


class StorageAccountCredentialProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_key: AsymmetricEncryptedSecret=None, cloud_type: str=None, enable_ssl: str=None, end_point: str=None, location: str=None, login: str=None):
        """StorageAccountCredentialProperties - a model defined in OpenAPI

        :param access_key: The access_key of this StorageAccountCredentialProperties.
        :param cloud_type: The cloud_type of this StorageAccountCredentialProperties.
        :param enable_ssl: The enable_ssl of this StorageAccountCredentialProperties.
        :param end_point: The end_point of this StorageAccountCredentialProperties.
        :param location: The location of this StorageAccountCredentialProperties.
        :param login: The login of this StorageAccountCredentialProperties.
        """
        self.openapi_types = {
            'access_key': AsymmetricEncryptedSecret,
            'cloud_type': str,
            'enable_ssl': str,
            'end_point': str,
            'location': str,
            'login': str
        }

        self.attribute_map = {
            'access_key': 'accessKey',
            'cloud_type': 'cloudType',
            'enable_ssl': 'enableSSL',
            'end_point': 'endPoint',
            'location': 'location',
            'login': 'login'
        }

        self._access_key = access_key
        self._cloud_type = cloud_type
        self._enable_ssl = enable_ssl
        self._end_point = end_point
        self._location = location
        self._login = login

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageAccountCredentialProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageAccountCredentialProperties of this StorageAccountCredentialProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_key(self):
        """Gets the access_key of this StorageAccountCredentialProperties.


        :return: The access_key of this StorageAccountCredentialProperties.
        :rtype: AsymmetricEncryptedSecret
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this StorageAccountCredentialProperties.


        :param access_key: The access_key of this StorageAccountCredentialProperties.
        :type access_key: AsymmetricEncryptedSecret
        """

        self._access_key = access_key

    @property
    def cloud_type(self):
        """Gets the cloud_type of this StorageAccountCredentialProperties.

        The cloud service provider

        :return: The cloud_type of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._cloud_type

    @cloud_type.setter
    def cloud_type(self, cloud_type):
        """Sets the cloud_type of this StorageAccountCredentialProperties.

        The cloud service provider

        :param cloud_type: The cloud_type of this StorageAccountCredentialProperties.
        :type cloud_type: str
        """
        allowed_values = ["Azure", "S3", "S3_RRS", "OpenStack", "HP"]  # noqa: E501
        if cloud_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cloud_type` ({0}), must be one of {1}"
                .format(cloud_type, allowed_values)
            )

        self._cloud_type = cloud_type

    @property
    def enable_ssl(self):
        """Gets the enable_ssl of this StorageAccountCredentialProperties.

        SSL needs to be enabled or not

        :return: The enable_ssl of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._enable_ssl

    @enable_ssl.setter
    def enable_ssl(self, enable_ssl):
        """Sets the enable_ssl of this StorageAccountCredentialProperties.

        SSL needs to be enabled or not

        :param enable_ssl: The enable_ssl of this StorageAccountCredentialProperties.
        :type enable_ssl: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if enable_ssl not in allowed_values:
            raise ValueError(
                "Invalid value for `enable_ssl` ({0}), must be one of {1}"
                .format(enable_ssl, allowed_values)
            )

        self._enable_ssl = enable_ssl

    @property
    def end_point(self):
        """Gets the end_point of this StorageAccountCredentialProperties.

        The storage endpoint

        :return: The end_point of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._end_point

    @end_point.setter
    def end_point(self, end_point):
        """Sets the end_point of this StorageAccountCredentialProperties.

        The storage endpoint

        :param end_point: The end_point of this StorageAccountCredentialProperties.
        :type end_point: str
        """
        if end_point is None:
            raise ValueError("Invalid value for `end_point`, must not be `None`")

        self._end_point = end_point

    @property
    def location(self):
        """Gets the location of this StorageAccountCredentialProperties.

        The storage account's geo location

        :return: The location of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StorageAccountCredentialProperties.

        The storage account's geo location

        :param location: The location of this StorageAccountCredentialProperties.
        :type location: str
        """

        self._location = location

    @property
    def login(self):
        """Gets the login of this StorageAccountCredentialProperties.

        The storage account login

        :return: The login of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this StorageAccountCredentialProperties.

        The storage account login

        :param login: The login of this StorageAccountCredentialProperties.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")

        self._login = login
