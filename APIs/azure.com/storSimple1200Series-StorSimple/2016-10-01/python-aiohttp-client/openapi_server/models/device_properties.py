# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_details import DeviceDetails
from openapi_server import util


class DeviceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_time: datetime=None, allowed_device_operations: List[str]=None, culture: str=None, details: DeviceDetails=None, device_capabilities: List[str]=None, device_configuration_status: str=None, device_description: str=None, device_software_version: str=None, domain_name: str=None, friendly_software_name: str=None, model_description: str=None, status: str=None, type: str=None):
        """DeviceProperties - a model defined in OpenAPI

        :param activation_time: The activation_time of this DeviceProperties.
        :param allowed_device_operations: The allowed_device_operations of this DeviceProperties.
        :param culture: The culture of this DeviceProperties.
        :param details: The details of this DeviceProperties.
        :param device_capabilities: The device_capabilities of this DeviceProperties.
        :param device_configuration_status: The device_configuration_status of this DeviceProperties.
        :param device_description: The device_description of this DeviceProperties.
        :param device_software_version: The device_software_version of this DeviceProperties.
        :param domain_name: The domain_name of this DeviceProperties.
        :param friendly_software_name: The friendly_software_name of this DeviceProperties.
        :param model_description: The model_description of this DeviceProperties.
        :param status: The status of this DeviceProperties.
        :param type: The type of this DeviceProperties.
        """
        self.openapi_types = {
            'activation_time': datetime,
            'allowed_device_operations': List[str],
            'culture': str,
            'details': DeviceDetails,
            'device_capabilities': List[str],
            'device_configuration_status': str,
            'device_description': str,
            'device_software_version': str,
            'domain_name': str,
            'friendly_software_name': str,
            'model_description': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'activation_time': 'activationTime',
            'allowed_device_operations': 'allowedDeviceOperations',
            'culture': 'culture',
            'details': 'details',
            'device_capabilities': 'deviceCapabilities',
            'device_configuration_status': 'deviceConfigurationStatus',
            'device_description': 'deviceDescription',
            'device_software_version': 'deviceSoftwareVersion',
            'domain_name': 'domainName',
            'friendly_software_name': 'friendlySoftwareName',
            'model_description': 'modelDescription',
            'status': 'status',
            'type': 'type'
        }

        self._activation_time = activation_time
        self._allowed_device_operations = allowed_device_operations
        self._culture = culture
        self._details = details
        self._device_capabilities = device_capabilities
        self._device_configuration_status = device_configuration_status
        self._device_description = device_description
        self._device_software_version = device_software_version
        self._domain_name = domain_name
        self._friendly_software_name = friendly_software_name
        self._model_description = model_description
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceProperties of this DeviceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_time(self):
        """Gets the activation_time of this DeviceProperties.

        The UTC time at which the device was activated

        :return: The activation_time of this DeviceProperties.
        :rtype: datetime
        """
        return self._activation_time

    @activation_time.setter
    def activation_time(self, activation_time):
        """Sets the activation_time of this DeviceProperties.

        The UTC time at which the device was activated

        :param activation_time: The activation_time of this DeviceProperties.
        :type activation_time: datetime
        """

        self._activation_time = activation_time

    @property
    def allowed_device_operations(self):
        """Gets the allowed_device_operations of this DeviceProperties.

        Operations that are allowed on the device based on its current state

        :return: The allowed_device_operations of this DeviceProperties.
        :rtype: List[str]
        """
        return self._allowed_device_operations

    @allowed_device_operations.setter
    def allowed_device_operations(self, allowed_device_operations):
        """Sets the allowed_device_operations of this DeviceProperties.

        Operations that are allowed on the device based on its current state

        :param allowed_device_operations: The allowed_device_operations of this DeviceProperties.
        :type allowed_device_operations: List[str]
        """
        allowed_values = ["None", "Delete", "DeleteWithWarning", "DRSource", "DRTarget", "Browsable", "ReadOnlyForDR", "Deactivate"]  # noqa: E501
        if not set(allowed_device_operations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allowed_device_operations` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(allowed_device_operations) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_device_operations = allowed_device_operations

    @property
    def culture(self):
        """Gets the culture of this DeviceProperties.

        Language culture setting on the device. For eg: \"en-US\"

        :return: The culture of this DeviceProperties.
        :rtype: str
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this DeviceProperties.

        Language culture setting on the device. For eg: \"en-US\"

        :param culture: The culture of this DeviceProperties.
        :type culture: str
        """

        self._culture = culture

    @property
    def details(self):
        """Gets the details of this DeviceProperties.


        :return: The details of this DeviceProperties.
        :rtype: DeviceDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this DeviceProperties.


        :param details: The details of this DeviceProperties.
        :type details: DeviceDetails
        """

        self._details = details

    @property
    def device_capabilities(self):
        """Gets the device_capabilities of this DeviceProperties.

        Device can be configured either as FileServer or IscsiServer

        :return: The device_capabilities of this DeviceProperties.
        :rtype: List[str]
        """
        return self._device_capabilities

    @device_capabilities.setter
    def device_capabilities(self, device_capabilities):
        """Sets the device_capabilities of this DeviceProperties.

        Device can be configured either as FileServer or IscsiServer

        :param device_capabilities: The device_capabilities of this DeviceProperties.
        :type device_capabilities: List[str]
        """
        allowed_values = ["Invalid", "FileServer", "IscsiServer"]  # noqa: E501
        if not set(device_capabilities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `device_capabilities` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(device_capabilities) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._device_capabilities = device_capabilities

    @property
    def device_configuration_status(self):
        """Gets the device_configuration_status of this DeviceProperties.

        \"Complete\" if the device has been successfully registered as File/IscsiServer and the creation of share/volume is complete, \"Pending\" if the device is only registered but the creation of share/volume is complete is still pending

        :return: The device_configuration_status of this DeviceProperties.
        :rtype: str
        """
        return self._device_configuration_status

    @device_configuration_status.setter
    def device_configuration_status(self, device_configuration_status):
        """Sets the device_configuration_status of this DeviceProperties.

        \"Complete\" if the device has been successfully registered as File/IscsiServer and the creation of share/volume is complete, \"Pending\" if the device is only registered but the creation of share/volume is complete is still pending

        :param device_configuration_status: The device_configuration_status of this DeviceProperties.
        :type device_configuration_status: str
        """
        allowed_values = ["Complete", "Pending"]  # noqa: E501
        if device_configuration_status not in allowed_values:
            raise ValueError(
                "Invalid value for `device_configuration_status` ({0}), must be one of {1}"
                .format(device_configuration_status, allowed_values)
            )

        self._device_configuration_status = device_configuration_status

    @property
    def device_description(self):
        """Gets the device_description of this DeviceProperties.

        Short description given for the device

        :return: The device_description of this DeviceProperties.
        :rtype: str
        """
        return self._device_description

    @device_description.setter
    def device_description(self, device_description):
        """Sets the device_description of this DeviceProperties.

        Short description given for the device

        :param device_description: The device_description of this DeviceProperties.
        :type device_description: str
        """

        self._device_description = device_description

    @property
    def device_software_version(self):
        """Gets the device_software_version of this DeviceProperties.

        Version number of the software running on the device

        :return: The device_software_version of this DeviceProperties.
        :rtype: str
        """
        return self._device_software_version

    @device_software_version.setter
    def device_software_version(self, device_software_version):
        """Sets the device_software_version of this DeviceProperties.

        Version number of the software running on the device

        :param device_software_version: The device_software_version of this DeviceProperties.
        :type device_software_version: str
        """

        self._device_software_version = device_software_version

    @property
    def domain_name(self):
        """Gets the domain_name of this DeviceProperties.

        Fully qualified name of the domain to which the device is attached

        :return: The domain_name of this DeviceProperties.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DeviceProperties.

        Fully qualified name of the domain to which the device is attached

        :param domain_name: The domain_name of this DeviceProperties.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def friendly_software_name(self):
        """Gets the friendly_software_name of this DeviceProperties.

        Friendly name for the software version

        :return: The friendly_software_name of this DeviceProperties.
        :rtype: str
        """
        return self._friendly_software_name

    @friendly_software_name.setter
    def friendly_software_name(self, friendly_software_name):
        """Sets the friendly_software_name of this DeviceProperties.

        Friendly name for the software version

        :param friendly_software_name: The friendly_software_name of this DeviceProperties.
        :type friendly_software_name: str
        """

        self._friendly_software_name = friendly_software_name

    @property
    def model_description(self):
        """Gets the model_description of this DeviceProperties.

        Name of the device model

        :return: The model_description of this DeviceProperties.
        :rtype: str
        """
        return self._model_description

    @model_description.setter
    def model_description(self, model_description):
        """Sets the model_description of this DeviceProperties.

        Name of the device model

        :param model_description: The model_description of this DeviceProperties.
        :type model_description: str
        """

        self._model_description = model_description

    @property
    def status(self):
        """Gets the status of this DeviceProperties.

        Current status of the device

        :return: The status of this DeviceProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceProperties.

        Current status of the device

        :param status: The status of this DeviceProperties.
        :type status: str
        """
        allowed_values = ["Unknown", "Online", "Offline", "RequiresAttention", "MaintenanceMode", "Creating", "Provisioning", "Deleted", "ReadyToSetup", "Deactivated", "Deactivating"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this DeviceProperties.

        Type of the device

        :return: The type of this DeviceProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeviceProperties.

        Type of the device

        :param type: The type of this DeviceProperties.
        :type type: str
        """
        allowed_values = ["Invalid", "Appliance", "VirtualAppliance", "Series9000OnPremVirtualAppliance", "Series9000VirtualAppliance", "Series9000PhysicalAppliance"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
