# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackupElementProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_policy: str=None, endpoint_name: str=None, size_in_bytes: int=None):
        """BackupElementProperties - a model defined in OpenAPI

        :param data_policy: The data_policy of this BackupElementProperties.
        :param endpoint_name: The endpoint_name of this BackupElementProperties.
        :param size_in_bytes: The size_in_bytes of this BackupElementProperties.
        """
        self.openapi_types = {
            'data_policy': str,
            'endpoint_name': str,
            'size_in_bytes': int
        }

        self.attribute_map = {
            'data_policy': 'dataPolicy',
            'endpoint_name': 'endpointName',
            'size_in_bytes': 'sizeInBytes'
        }

        self._data_policy = data_policy
        self._endpoint_name = endpoint_name
        self._size_in_bytes = size_in_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupElementProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupElementProperties of this BackupElementProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_policy(self):
        """Gets the data_policy of this BackupElementProperties.

        The data policy of backed up endpoint.

        :return: The data_policy of this BackupElementProperties.
        :rtype: str
        """
        return self._data_policy

    @data_policy.setter
    def data_policy(self, data_policy):
        """Sets the data_policy of this BackupElementProperties.

        The data policy of backed up endpoint.

        :param data_policy: The data_policy of this BackupElementProperties.
        :type data_policy: str
        """
        allowed_values = ["Invalid", "Local", "Tiered", "Cloud"]  # noqa: E501
        if data_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `data_policy` ({0}), must be one of {1}"
                .format(data_policy, allowed_values)
            )

        self._data_policy = data_policy

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this BackupElementProperties.

        The name of the endpoint.

        :return: The endpoint_name of this BackupElementProperties.
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this BackupElementProperties.

        The name of the endpoint.

        :param endpoint_name: The endpoint_name of this BackupElementProperties.
        :type endpoint_name: str
        """
        if endpoint_name is None:
            raise ValueError("Invalid value for `endpoint_name`, must not be `None`")

        self._endpoint_name = endpoint_name

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this BackupElementProperties.

        The size in bytes.

        :return: The size_in_bytes of this BackupElementProperties.
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this BackupElementProperties.

        The size in bytes.

        :param size_in_bytes: The size_in_bytes of this BackupElementProperties.
        :type size_in_bytes: int
        """
        if size_in_bytes is None:
            raise ValueError("Invalid value for `size_in_bytes`, must not be `None`")

        self._size_in_bytes = size_in_bytes
