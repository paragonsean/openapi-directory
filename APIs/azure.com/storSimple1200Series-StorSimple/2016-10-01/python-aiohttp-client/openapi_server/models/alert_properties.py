# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert_error_details import AlertErrorDetails
from openapi_server.models.alert_source import AlertSource
from openapi_server import util


class AlertProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_type: str=None, appeared_at_source_time: datetime=None, appeared_at_time: datetime=None, cleared_at_source_time: datetime=None, cleared_at_time: datetime=None, detailed_information: Dict[str, str]=None, error_details: AlertErrorDetails=None, recommendation: str=None, resolution_reason: str=None, scope: str=None, severity: str=None, source: AlertSource=None, status: str=None, title: str=None):
        """AlertProperties - a model defined in OpenAPI

        :param alert_type: The alert_type of this AlertProperties.
        :param appeared_at_source_time: The appeared_at_source_time of this AlertProperties.
        :param appeared_at_time: The appeared_at_time of this AlertProperties.
        :param cleared_at_source_time: The cleared_at_source_time of this AlertProperties.
        :param cleared_at_time: The cleared_at_time of this AlertProperties.
        :param detailed_information: The detailed_information of this AlertProperties.
        :param error_details: The error_details of this AlertProperties.
        :param recommendation: The recommendation of this AlertProperties.
        :param resolution_reason: The resolution_reason of this AlertProperties.
        :param scope: The scope of this AlertProperties.
        :param severity: The severity of this AlertProperties.
        :param source: The source of this AlertProperties.
        :param status: The status of this AlertProperties.
        :param title: The title of this AlertProperties.
        """
        self.openapi_types = {
            'alert_type': str,
            'appeared_at_source_time': datetime,
            'appeared_at_time': datetime,
            'cleared_at_source_time': datetime,
            'cleared_at_time': datetime,
            'detailed_information': Dict[str, str],
            'error_details': AlertErrorDetails,
            'recommendation': str,
            'resolution_reason': str,
            'scope': str,
            'severity': str,
            'source': AlertSource,
            'status': str,
            'title': str
        }

        self.attribute_map = {
            'alert_type': 'alertType',
            'appeared_at_source_time': 'appearedAtSourceTime',
            'appeared_at_time': 'appearedAtTime',
            'cleared_at_source_time': 'clearedAtSourceTime',
            'cleared_at_time': 'clearedAtTime',
            'detailed_information': 'detailedInformation',
            'error_details': 'errorDetails',
            'recommendation': 'recommendation',
            'resolution_reason': 'resolutionReason',
            'scope': 'scope',
            'severity': 'severity',
            'source': 'source',
            'status': 'status',
            'title': 'title'
        }

        self._alert_type = alert_type
        self._appeared_at_source_time = appeared_at_source_time
        self._appeared_at_time = appeared_at_time
        self._cleared_at_source_time = cleared_at_source_time
        self._cleared_at_time = cleared_at_time
        self._detailed_information = detailed_information
        self._error_details = error_details
        self._recommendation = recommendation
        self._resolution_reason = resolution_reason
        self._scope = scope
        self._severity = severity
        self._source = source
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertProperties of this AlertProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_type(self):
        """Gets the alert_type of this AlertProperties.

        Type of the alert

        :return: The alert_type of this AlertProperties.
        :rtype: str
        """
        return self._alert_type

    @alert_type.setter
    def alert_type(self, alert_type):
        """Sets the alert_type of this AlertProperties.

        Type of the alert

        :param alert_type: The alert_type of this AlertProperties.
        :type alert_type: str
        """
        if alert_type is None:
            raise ValueError("Invalid value for `alert_type`, must not be `None`")

        self._alert_type = alert_type

    @property
    def appeared_at_source_time(self):
        """Gets the appeared_at_source_time of this AlertProperties.

        UTC time at which the alert appeared on the source

        :return: The appeared_at_source_time of this AlertProperties.
        :rtype: datetime
        """
        return self._appeared_at_source_time

    @appeared_at_source_time.setter
    def appeared_at_source_time(self, appeared_at_source_time):
        """Sets the appeared_at_source_time of this AlertProperties.

        UTC time at which the alert appeared on the source

        :param appeared_at_source_time: The appeared_at_source_time of this AlertProperties.
        :type appeared_at_source_time: datetime
        """
        if appeared_at_source_time is None:
            raise ValueError("Invalid value for `appeared_at_source_time`, must not be `None`")

        self._appeared_at_source_time = appeared_at_source_time

    @property
    def appeared_at_time(self):
        """Gets the appeared_at_time of this AlertProperties.

        UTC time at which the alert appeared

        :return: The appeared_at_time of this AlertProperties.
        :rtype: datetime
        """
        return self._appeared_at_time

    @appeared_at_time.setter
    def appeared_at_time(self, appeared_at_time):
        """Sets the appeared_at_time of this AlertProperties.

        UTC time at which the alert appeared

        :param appeared_at_time: The appeared_at_time of this AlertProperties.
        :type appeared_at_time: datetime
        """
        if appeared_at_time is None:
            raise ValueError("Invalid value for `appeared_at_time`, must not be `None`")

        self._appeared_at_time = appeared_at_time

    @property
    def cleared_at_source_time(self):
        """Gets the cleared_at_source_time of this AlertProperties.

        UTC time at which the alert was cleared on the source

        :return: The cleared_at_source_time of this AlertProperties.
        :rtype: datetime
        """
        return self._cleared_at_source_time

    @cleared_at_source_time.setter
    def cleared_at_source_time(self, cleared_at_source_time):
        """Sets the cleared_at_source_time of this AlertProperties.

        UTC time at which the alert was cleared on the source

        :param cleared_at_source_time: The cleared_at_source_time of this AlertProperties.
        :type cleared_at_source_time: datetime
        """

        self._cleared_at_source_time = cleared_at_source_time

    @property
    def cleared_at_time(self):
        """Gets the cleared_at_time of this AlertProperties.

        UTC time at which the alert got cleared

        :return: The cleared_at_time of this AlertProperties.
        :rtype: datetime
        """
        return self._cleared_at_time

    @cleared_at_time.setter
    def cleared_at_time(self, cleared_at_time):
        """Sets the cleared_at_time of this AlertProperties.

        UTC time at which the alert got cleared

        :param cleared_at_time: The cleared_at_time of this AlertProperties.
        :type cleared_at_time: datetime
        """

        self._cleared_at_time = cleared_at_time

    @property
    def detailed_information(self):
        """Gets the detailed_information of this AlertProperties.

        Other information about the alert

        :return: The detailed_information of this AlertProperties.
        :rtype: Dict[str, str]
        """
        return self._detailed_information

    @detailed_information.setter
    def detailed_information(self, detailed_information):
        """Sets the detailed_information of this AlertProperties.

        Other information about the alert

        :param detailed_information: The detailed_information of this AlertProperties.
        :type detailed_information: Dict[str, str]
        """

        self._detailed_information = detailed_information

    @property
    def error_details(self):
        """Gets the error_details of this AlertProperties.


        :return: The error_details of this AlertProperties.
        :rtype: AlertErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this AlertProperties.


        :param error_details: The error_details of this AlertProperties.
        :type error_details: AlertErrorDetails
        """

        self._error_details = error_details

    @property
    def recommendation(self):
        """Gets the recommendation of this AlertProperties.

        Recommendation for acting on the alert

        :return: The recommendation of this AlertProperties.
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this AlertProperties.

        Recommendation for acting on the alert

        :param recommendation: The recommendation of this AlertProperties.
        :type recommendation: str
        """

        self._recommendation = recommendation

    @property
    def resolution_reason(self):
        """Gets the resolution_reason of this AlertProperties.

        Reason for resolving the alert

        :return: The resolution_reason of this AlertProperties.
        :rtype: str
        """
        return self._resolution_reason

    @resolution_reason.setter
    def resolution_reason(self, resolution_reason):
        """Sets the resolution_reason of this AlertProperties.

        Reason for resolving the alert

        :param resolution_reason: The resolution_reason of this AlertProperties.
        :type resolution_reason: str
        """

        self._resolution_reason = resolution_reason

    @property
    def scope(self):
        """Gets the scope of this AlertProperties.

        Device or Resource alert

        :return: The scope of this AlertProperties.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AlertProperties.

        Device or Resource alert

        :param scope: The scope of this AlertProperties.
        :type scope: str
        """
        allowed_values = ["Resource", "Device"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def severity(self):
        """Gets the severity of this AlertProperties.

        Severity of the alert

        :return: The severity of this AlertProperties.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this AlertProperties.

        Severity of the alert

        :param severity: The severity of this AlertProperties.
        :type severity: str
        """
        allowed_values = ["Informational", "Warning", "Critical"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def source(self):
        """Gets the source of this AlertProperties.


        :return: The source of this AlertProperties.
        :rtype: AlertSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AlertProperties.


        :param source: The source of this AlertProperties.
        :type source: AlertSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def status(self):
        """Gets the status of this AlertProperties.

        Current status of the alert

        :return: The status of this AlertProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AlertProperties.

        Current status of the alert

        :param status: The status of this AlertProperties.
        :type status: str
        """
        allowed_values = ["Active", "Cleared"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def title(self):
        """Gets the title of this AlertProperties.

        Title of the alert

        :return: The title of this AlertProperties.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AlertProperties.

        Title of the alert

        :param title: The title of this AlertProperties.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
