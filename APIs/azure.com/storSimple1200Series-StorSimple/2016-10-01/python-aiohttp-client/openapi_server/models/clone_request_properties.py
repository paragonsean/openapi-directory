# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_share import FileShare
from openapi_server.models.iscsi_disk import ISCSIDisk
from openapi_server import util


class CloneRequestProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk: ISCSIDisk=None, new_endpoint_name: str=None, share: FileShare=None, target_access_point_id: str=None, target_device_id: str=None):
        """CloneRequestProperties - a model defined in OpenAPI

        :param disk: The disk of this CloneRequestProperties.
        :param new_endpoint_name: The new_endpoint_name of this CloneRequestProperties.
        :param share: The share of this CloneRequestProperties.
        :param target_access_point_id: The target_access_point_id of this CloneRequestProperties.
        :param target_device_id: The target_device_id of this CloneRequestProperties.
        """
        self.openapi_types = {
            'disk': ISCSIDisk,
            'new_endpoint_name': str,
            'share': FileShare,
            'target_access_point_id': str,
            'target_device_id': str
        }

        self.attribute_map = {
            'disk': 'disk',
            'new_endpoint_name': 'newEndpointName',
            'share': 'share',
            'target_access_point_id': 'targetAccessPointId',
            'target_device_id': 'targetDeviceId'
        }

        self._disk = disk
        self._new_endpoint_name = new_endpoint_name
        self._share = share
        self._target_access_point_id = target_access_point_id
        self._target_device_id = target_device_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloneRequestProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloneRequestProperties of this CloneRequestProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk(self):
        """Gets the disk of this CloneRequestProperties.


        :return: The disk of this CloneRequestProperties.
        :rtype: ISCSIDisk
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this CloneRequestProperties.


        :param disk: The disk of this CloneRequestProperties.
        :type disk: ISCSIDisk
        """

        self._disk = disk

    @property
    def new_endpoint_name(self):
        """Gets the new_endpoint_name of this CloneRequestProperties.

        Name of new endpoint which will created as part of clone job.

        :return: The new_endpoint_name of this CloneRequestProperties.
        :rtype: str
        """
        return self._new_endpoint_name

    @new_endpoint_name.setter
    def new_endpoint_name(self, new_endpoint_name):
        """Sets the new_endpoint_name of this CloneRequestProperties.

        Name of new endpoint which will created as part of clone job.

        :param new_endpoint_name: The new_endpoint_name of this CloneRequestProperties.
        :type new_endpoint_name: str
        """
        if new_endpoint_name is None:
            raise ValueError("Invalid value for `new_endpoint_name`, must not be `None`")

        self._new_endpoint_name = new_endpoint_name

    @property
    def share(self):
        """Gets the share of this CloneRequestProperties.


        :return: The share of this CloneRequestProperties.
        :rtype: FileShare
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this CloneRequestProperties.


        :param share: The share of this CloneRequestProperties.
        :type share: FileShare
        """

        self._share = share

    @property
    def target_access_point_id(self):
        """Gets the target_access_point_id of this CloneRequestProperties.

        Access point Id on which clone job will performed.

        :return: The target_access_point_id of this CloneRequestProperties.
        :rtype: str
        """
        return self._target_access_point_id

    @target_access_point_id.setter
    def target_access_point_id(self, target_access_point_id):
        """Sets the target_access_point_id of this CloneRequestProperties.

        Access point Id on which clone job will performed.

        :param target_access_point_id: The target_access_point_id of this CloneRequestProperties.
        :type target_access_point_id: str
        """
        if target_access_point_id is None:
            raise ValueError("Invalid value for `target_access_point_id`, must not be `None`")

        self._target_access_point_id = target_access_point_id

    @property
    def target_device_id(self):
        """Gets the target_device_id of this CloneRequestProperties.

        DeviceId of the device which will act as the Clone target

        :return: The target_device_id of this CloneRequestProperties.
        :rtype: str
        """
        return self._target_device_id

    @target_device_id.setter
    def target_device_id(self, target_device_id):
        """Sets the target_device_id of this CloneRequestProperties.

        DeviceId of the device which will act as the Clone target

        :param target_device_id: The target_device_id of this CloneRequestProperties.
        :type target_device_id: str
        """
        if target_device_id is None:
            raise ValueError("Invalid value for `target_device_id`, must not be `None`")

        self._target_device_id = target_device_id
