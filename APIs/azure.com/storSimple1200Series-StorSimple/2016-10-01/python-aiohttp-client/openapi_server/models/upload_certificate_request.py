# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.raw_certificate_data import RawCertificateData
from openapi_server import util


class UploadCertificateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contract_version: str=None, properties: RawCertificateData=None):
        """UploadCertificateRequest - a model defined in OpenAPI

        :param contract_version: The contract_version of this UploadCertificateRequest.
        :param properties: The properties of this UploadCertificateRequest.
        """
        self.openapi_types = {
            'contract_version': str,
            'properties': RawCertificateData
        }

        self.attribute_map = {
            'contract_version': 'contractVersion',
            'properties': 'properties'
        }

        self._contract_version = contract_version
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadCertificateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UploadCertificateRequest of this UploadCertificateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contract_version(self):
        """Gets the contract_version of this UploadCertificateRequest.

        Gets ContractVersion

        :return: The contract_version of this UploadCertificateRequest.
        :rtype: str
        """
        return self._contract_version

    @contract_version.setter
    def contract_version(self, contract_version):
        """Sets the contract_version of this UploadCertificateRequest.

        Gets ContractVersion

        :param contract_version: The contract_version of this UploadCertificateRequest.
        :type contract_version: str
        """
        allowed_values = ["InvalidVersion", "V2011_09", "V2012_02", "V2012_05", "V2012_12", "V2013_04", "V2013_10", "V2013_11", "V2014_04", "V2014_06", "V2014_07", "V2014_09", "V2014_10", "V2014_12", "V2015_01", "V2015_02", "V2015_04", "V2015_05", "V2015_06", "V2015_07", "V2015_08", "V2015_10", "V2015_12", "V2016_01", "V2016_02", "V2016_04", "V2016_05", "V2016_07", "V2016_08"]  # noqa: E501
        if contract_version not in allowed_values:
            raise ValueError(
                "Invalid value for `contract_version` ({0}), must be one of {1}"
                .format(contract_version, allowed_values)
            )

        self._contract_version = contract_version

    @property
    def properties(self):
        """Gets the properties of this UploadCertificateRequest.


        :return: The properties of this UploadCertificateRequest.
        :rtype: RawCertificateData
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this UploadCertificateRequest.


        :param properties: The properties of this UploadCertificateRequest.
        :type properties: RawCertificateData
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties
