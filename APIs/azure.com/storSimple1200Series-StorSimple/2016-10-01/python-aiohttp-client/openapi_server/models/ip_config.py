# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IPConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway: str=None, ip_address: str=None, prefix_length: int=None):
        """IPConfig - a model defined in OpenAPI

        :param gateway: The gateway of this IPConfig.
        :param ip_address: The ip_address of this IPConfig.
        :param prefix_length: The prefix_length of this IPConfig.
        """
        self.openapi_types = {
            'gateway': str,
            'ip_address': str,
            'prefix_length': int
        }

        self.attribute_map = {
            'gateway': 'gateway',
            'ip_address': 'ipAddress',
            'prefix_length': 'prefixLength'
        }

        self._gateway = gateway
        self._ip_address = ip_address
        self._prefix_length = prefix_length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPConfig of this IPConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway(self):
        """Gets the gateway of this IPConfig.

        The gateway of the network adapter.

        :return: The gateway of this IPConfig.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this IPConfig.

        The gateway of the network adapter.

        :param gateway: The gateway of this IPConfig.
        :type gateway: str
        """
        if gateway is None:
            raise ValueError("Invalid value for `gateway`, must not be `None`")

        self._gateway = gateway

    @property
    def ip_address(self):
        """Gets the ip_address of this IPConfig.

        The IP address of the network adapter, either ipv4 or ipv6.

        :return: The ip_address of this IPConfig.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this IPConfig.

        The IP address of the network adapter, either ipv4 or ipv6.

        :param ip_address: The ip_address of this IPConfig.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")

        self._ip_address = ip_address

    @property
    def prefix_length(self):
        """Gets the prefix_length of this IPConfig.

        The prefix length of the network adapter.

        :return: The prefix_length of this IPConfig.
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """Sets the prefix_length of this IPConfig.

        The prefix length of the network adapter.

        :param prefix_length: The prefix_length of this IPConfig.
        :type prefix_length: int
        """

        self._prefix_length = prefix_length
