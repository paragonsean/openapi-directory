# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_stage import JobStage
from openapi_server.models.job_stats import JobStats
from openapi_server.models.update_download_progress import UpdateDownloadProgress
from openapi_server.models.update_install_progress import UpdateInstallProgress
from openapi_server import util


class JobProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_point_in_time: datetime=None, device_id: str=None, download_progress: UpdateDownloadProgress=None, entity_id: str=None, entity_type: str=None, install_progress: UpdateInstallProgress=None, is_cancellable: bool=None, job_stages: List[JobStage]=None, job_type: str=None, source_device_id: str=None, stats: JobStats=None, target_id: str=None, target_type: str=None):
        """JobProperties - a model defined in OpenAPI

        :param backup_point_in_time: The backup_point_in_time of this JobProperties.
        :param device_id: The device_id of this JobProperties.
        :param download_progress: The download_progress of this JobProperties.
        :param entity_id: The entity_id of this JobProperties.
        :param entity_type: The entity_type of this JobProperties.
        :param install_progress: The install_progress of this JobProperties.
        :param is_cancellable: The is_cancellable of this JobProperties.
        :param job_stages: The job_stages of this JobProperties.
        :param job_type: The job_type of this JobProperties.
        :param source_device_id: The source_device_id of this JobProperties.
        :param stats: The stats of this JobProperties.
        :param target_id: The target_id of this JobProperties.
        :param target_type: The target_type of this JobProperties.
        """
        self.openapi_types = {
            'backup_point_in_time': datetime,
            'device_id': str,
            'download_progress': UpdateDownloadProgress,
            'entity_id': str,
            'entity_type': str,
            'install_progress': UpdateInstallProgress,
            'is_cancellable': bool,
            'job_stages': List[JobStage],
            'job_type': str,
            'source_device_id': str,
            'stats': JobStats,
            'target_id': str,
            'target_type': str
        }

        self.attribute_map = {
            'backup_point_in_time': 'backupPointInTime',
            'device_id': 'deviceId',
            'download_progress': 'downloadProgress',
            'entity_id': 'entityId',
            'entity_type': 'entityType',
            'install_progress': 'installProgress',
            'is_cancellable': 'isCancellable',
            'job_stages': 'jobStages',
            'job_type': 'jobType',
            'source_device_id': 'sourceDeviceId',
            'stats': 'stats',
            'target_id': 'targetId',
            'target_type': 'targetType'
        }

        self._backup_point_in_time = backup_point_in_time
        self._device_id = device_id
        self._download_progress = download_progress
        self._entity_id = entity_id
        self._entity_type = entity_type
        self._install_progress = install_progress
        self._is_cancellable = is_cancellable
        self._job_stages = job_stages
        self._job_type = job_type
        self._source_device_id = source_device_id
        self._stats = stats
        self._target_id = target_id
        self._target_type = target_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobProperties of this JobProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_point_in_time(self):
        """Gets the backup_point_in_time of this JobProperties.

        The time of the backup used for the failover.

        :return: The backup_point_in_time of this JobProperties.
        :rtype: datetime
        """
        return self._backup_point_in_time

    @backup_point_in_time.setter
    def backup_point_in_time(self, backup_point_in_time):
        """Sets the backup_point_in_time of this JobProperties.

        The time of the backup used for the failover.

        :param backup_point_in_time: The backup_point_in_time of this JobProperties.
        :type backup_point_in_time: datetime
        """

        self._backup_point_in_time = backup_point_in_time

    @property
    def device_id(self):
        """Gets the device_id of this JobProperties.

        The device id in which the job is currently running

        :return: The device_id of this JobProperties.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this JobProperties.

        The device id in which the job is currently running

        :param device_id: The device_id of this JobProperties.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def download_progress(self):
        """Gets the download_progress of this JobProperties.


        :return: The download_progress of this JobProperties.
        :rtype: UpdateDownloadProgress
        """
        return self._download_progress

    @download_progress.setter
    def download_progress(self, download_progress):
        """Sets the download_progress of this JobProperties.


        :param download_progress: The download_progress of this JobProperties.
        :type download_progress: UpdateDownloadProgress
        """

        self._download_progress = download_progress

    @property
    def entity_id(self):
        """Gets the entity_id of this JobProperties.

        The entity identifier for which the job ran.

        :return: The entity_id of this JobProperties.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this JobProperties.

        The entity identifier for which the job ran.

        :param entity_id: The entity_id of this JobProperties.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this JobProperties.

        The entity type for which the job ran.

        :return: The entity_type of this JobProperties.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this JobProperties.

        The entity type for which the job ran.

        :param entity_type: The entity_type of this JobProperties.
        :type entity_type: str
        """

        self._entity_type = entity_type

    @property
    def install_progress(self):
        """Gets the install_progress of this JobProperties.


        :return: The install_progress of this JobProperties.
        :rtype: UpdateInstallProgress
        """
        return self._install_progress

    @install_progress.setter
    def install_progress(self, install_progress):
        """Sets the install_progress of this JobProperties.


        :param install_progress: The install_progress of this JobProperties.
        :type install_progress: UpdateInstallProgress
        """

        self._install_progress = install_progress

    @property
    def is_cancellable(self):
        """Gets the is_cancellable of this JobProperties.

        Represents whether the job is cancellable or not

        :return: The is_cancellable of this JobProperties.
        :rtype: bool
        """
        return self._is_cancellable

    @is_cancellable.setter
    def is_cancellable(self, is_cancellable):
        """Sets the is_cancellable of this JobProperties.

        Represents whether the job is cancellable or not

        :param is_cancellable: The is_cancellable of this JobProperties.
        :type is_cancellable: bool
        """

        self._is_cancellable = is_cancellable

    @property
    def job_stages(self):
        """Gets the job_stages of this JobProperties.

        The job stages.

        :return: The job_stages of this JobProperties.
        :rtype: List[JobStage]
        """
        return self._job_stages

    @job_stages.setter
    def job_stages(self, job_stages):
        """Sets the job_stages of this JobProperties.

        The job stages.

        :param job_stages: The job_stages of this JobProperties.
        :type job_stages: List[JobStage]
        """

        self._job_stages = job_stages

    @property
    def job_type(self):
        """Gets the job_type of this JobProperties.

        Type of the job

        :return: The job_type of this JobProperties.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobProperties.

        Type of the job

        :param job_type: The job_type of this JobProperties.
        :type job_type: str
        """
        allowed_values = ["Backup", "Clone", "Failover", "DownloadUpdates", "InstallUpdates"]  # noqa: E501
        if job_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def source_device_id(self):
        """Gets the source_device_id of this JobProperties.

        The source device identifier of the failover job.

        :return: The source_device_id of this JobProperties.
        :rtype: str
        """
        return self._source_device_id

    @source_device_id.setter
    def source_device_id(self, source_device_id):
        """Sets the source_device_id of this JobProperties.

        The source device identifier of the failover job.

        :param source_device_id: The source_device_id of this JobProperties.
        :type source_device_id: str
        """

        self._source_device_id = source_device_id

    @property
    def stats(self):
        """Gets the stats of this JobProperties.


        :return: The stats of this JobProperties.
        :rtype: JobStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this JobProperties.


        :param stats: The stats of this JobProperties.
        :type stats: JobStats
        """

        self._stats = stats

    @property
    def target_id(self):
        """Gets the target_id of this JobProperties.

        Id of the object that is created by the job

        :return: The target_id of this JobProperties.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this JobProperties.

        Id of the object that is created by the job

        :param target_id: The target_id of this JobProperties.
        :type target_id: str
        """

        self._target_id = target_id

    @property
    def target_type(self):
        """Gets the target_type of this JobProperties.

        The target type of the backup.

        :return: The target_type of this JobProperties.
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this JobProperties.

        The target type of the backup.

        :param target_type: The target_type of this JobProperties.
        :type target_type: str
        """
        allowed_values = ["FileServer", "DiskServer"]  # noqa: E501
        if target_type not in allowed_values:
            raise ValueError(
                "Invalid value for `target_type` ({0}), must be one of {1}"
                .format(target_type, allowed_values)
            )

        self._target_type = target_type
