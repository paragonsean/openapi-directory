# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileShareProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_user: str=None, data_policy: str=None, description: str=None, local_used_capacity_in_bytes: int=None, monitoring_status: str=None, provisioned_capacity_in_bytes: int=None, share_status: str=None, used_capacity_in_bytes: int=None):
        """FileShareProperties - a model defined in OpenAPI

        :param admin_user: The admin_user of this FileShareProperties.
        :param data_policy: The data_policy of this FileShareProperties.
        :param description: The description of this FileShareProperties.
        :param local_used_capacity_in_bytes: The local_used_capacity_in_bytes of this FileShareProperties.
        :param monitoring_status: The monitoring_status of this FileShareProperties.
        :param provisioned_capacity_in_bytes: The provisioned_capacity_in_bytes of this FileShareProperties.
        :param share_status: The share_status of this FileShareProperties.
        :param used_capacity_in_bytes: The used_capacity_in_bytes of this FileShareProperties.
        """
        self.openapi_types = {
            'admin_user': str,
            'data_policy': str,
            'description': str,
            'local_used_capacity_in_bytes': int,
            'monitoring_status': str,
            'provisioned_capacity_in_bytes': int,
            'share_status': str,
            'used_capacity_in_bytes': int
        }

        self.attribute_map = {
            'admin_user': 'adminUser',
            'data_policy': 'dataPolicy',
            'description': 'description',
            'local_used_capacity_in_bytes': 'localUsedCapacityInBytes',
            'monitoring_status': 'monitoringStatus',
            'provisioned_capacity_in_bytes': 'provisionedCapacityInBytes',
            'share_status': 'shareStatus',
            'used_capacity_in_bytes': 'usedCapacityInBytes'
        }

        self._admin_user = admin_user
        self._data_policy = data_policy
        self._description = description
        self._local_used_capacity_in_bytes = local_used_capacity_in_bytes
        self._monitoring_status = monitoring_status
        self._provisioned_capacity_in_bytes = provisioned_capacity_in_bytes
        self._share_status = share_status
        self._used_capacity_in_bytes = used_capacity_in_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileShareProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileShareProperties of this FileShareProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_user(self):
        """Gets the admin_user of this FileShareProperties.

        The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\\xyz.

        :return: The admin_user of this FileShareProperties.
        :rtype: str
        """
        return self._admin_user

    @admin_user.setter
    def admin_user(self, admin_user):
        """Sets the admin_user of this FileShareProperties.

        The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\\xyz.

        :param admin_user: The admin_user of this FileShareProperties.
        :type admin_user: str
        """
        if admin_user is None:
            raise ValueError("Invalid value for `admin_user`, must not be `None`")

        self._admin_user = admin_user

    @property
    def data_policy(self):
        """Gets the data_policy of this FileShareProperties.

        The data policy

        :return: The data_policy of this FileShareProperties.
        :rtype: str
        """
        return self._data_policy

    @data_policy.setter
    def data_policy(self, data_policy):
        """Sets the data_policy of this FileShareProperties.

        The data policy

        :param data_policy: The data_policy of this FileShareProperties.
        :type data_policy: str
        """
        allowed_values = ["Invalid", "Local", "Tiered", "Cloud"]  # noqa: E501
        if data_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `data_policy` ({0}), must be one of {1}"
                .format(data_policy, allowed_values)
            )

        self._data_policy = data_policy

    @property
    def description(self):
        """Gets the description of this FileShareProperties.

        Description for file share

        :return: The description of this FileShareProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FileShareProperties.

        Description for file share

        :param description: The description of this FileShareProperties.
        :type description: str
        """

        self._description = description

    @property
    def local_used_capacity_in_bytes(self):
        """Gets the local_used_capacity_in_bytes of this FileShareProperties.

        The local used capacity in Bytes.

        :return: The local_used_capacity_in_bytes of this FileShareProperties.
        :rtype: int
        """
        return self._local_used_capacity_in_bytes

    @local_used_capacity_in_bytes.setter
    def local_used_capacity_in_bytes(self, local_used_capacity_in_bytes):
        """Sets the local_used_capacity_in_bytes of this FileShareProperties.

        The local used capacity in Bytes.

        :param local_used_capacity_in_bytes: The local_used_capacity_in_bytes of this FileShareProperties.
        :type local_used_capacity_in_bytes: int
        """

        self._local_used_capacity_in_bytes = local_used_capacity_in_bytes

    @property
    def monitoring_status(self):
        """Gets the monitoring_status of this FileShareProperties.

        The monitoring status

        :return: The monitoring_status of this FileShareProperties.
        :rtype: str
        """
        return self._monitoring_status

    @monitoring_status.setter
    def monitoring_status(self, monitoring_status):
        """Sets the monitoring_status of this FileShareProperties.

        The monitoring status

        :param monitoring_status: The monitoring_status of this FileShareProperties.
        :type monitoring_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if monitoring_status not in allowed_values:
            raise ValueError(
                "Invalid value for `monitoring_status` ({0}), must be one of {1}"
                .format(monitoring_status, allowed_values)
            )

        self._monitoring_status = monitoring_status

    @property
    def provisioned_capacity_in_bytes(self):
        """Gets the provisioned_capacity_in_bytes of this FileShareProperties.

        The total provisioned capacity in Bytes

        :return: The provisioned_capacity_in_bytes of this FileShareProperties.
        :rtype: int
        """
        return self._provisioned_capacity_in_bytes

    @provisioned_capacity_in_bytes.setter
    def provisioned_capacity_in_bytes(self, provisioned_capacity_in_bytes):
        """Sets the provisioned_capacity_in_bytes of this FileShareProperties.

        The total provisioned capacity in Bytes

        :param provisioned_capacity_in_bytes: The provisioned_capacity_in_bytes of this FileShareProperties.
        :type provisioned_capacity_in_bytes: int
        """
        if provisioned_capacity_in_bytes is None:
            raise ValueError("Invalid value for `provisioned_capacity_in_bytes`, must not be `None`")

        self._provisioned_capacity_in_bytes = provisioned_capacity_in_bytes

    @property
    def share_status(self):
        """Gets the share_status of this FileShareProperties.

        The Share Status

        :return: The share_status of this FileShareProperties.
        :rtype: str
        """
        return self._share_status

    @share_status.setter
    def share_status(self, share_status):
        """Sets the share_status of this FileShareProperties.

        The Share Status

        :param share_status: The share_status of this FileShareProperties.
        :type share_status: str
        """
        allowed_values = ["Online", "Offline"]  # noqa: E501
        if share_status not in allowed_values:
            raise ValueError(
                "Invalid value for `share_status` ({0}), must be one of {1}"
                .format(share_status, allowed_values)
            )

        self._share_status = share_status

    @property
    def used_capacity_in_bytes(self):
        """Gets the used_capacity_in_bytes of this FileShareProperties.

        The used capacity in Bytes.

        :return: The used_capacity_in_bytes of this FileShareProperties.
        :rtype: int
        """
        return self._used_capacity_in_bytes

    @used_capacity_in_bytes.setter
    def used_capacity_in_bytes(self, used_capacity_in_bytes):
        """Sets the used_capacity_in_bytes of this FileShareProperties.

        The used capacity in Bytes.

        :param used_capacity_in_bytes: The used_capacity_in_bytes of this FileShareProperties.
        :type used_capacity_in_bytes: int
        """

        self._used_capacity_in_bytes = used_capacity_in_bytes
