# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asymmetric_encrypted_secret import AsymmetricEncryptedSecret
from openapi_server import util


class StorageDomainProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_key: AsymmetricEncryptedSecret=None, encryption_status: str=None, storage_account_credential_ids: List[str]=None):
        """StorageDomainProperties - a model defined in OpenAPI

        :param encryption_key: The encryption_key of this StorageDomainProperties.
        :param encryption_status: The encryption_status of this StorageDomainProperties.
        :param storage_account_credential_ids: The storage_account_credential_ids of this StorageDomainProperties.
        """
        self.openapi_types = {
            'encryption_key': AsymmetricEncryptedSecret,
            'encryption_status': str,
            'storage_account_credential_ids': List[str]
        }

        self.attribute_map = {
            'encryption_key': 'encryptionKey',
            'encryption_status': 'encryptionStatus',
            'storage_account_credential_ids': 'storageAccountCredentialIds'
        }

        self._encryption_key = encryption_key
        self._encryption_status = encryption_status
        self._storage_account_credential_ids = storage_account_credential_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageDomainProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageDomainProperties of this StorageDomainProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_key(self):
        """Gets the encryption_key of this StorageDomainProperties.


        :return: The encryption_key of this StorageDomainProperties.
        :rtype: AsymmetricEncryptedSecret
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this StorageDomainProperties.


        :param encryption_key: The encryption_key of this StorageDomainProperties.
        :type encryption_key: AsymmetricEncryptedSecret
        """

        self._encryption_key = encryption_key

    @property
    def encryption_status(self):
        """Gets the encryption_status of this StorageDomainProperties.

        The encryption status \"Enabled | Disabled\".

        :return: The encryption_status of this StorageDomainProperties.
        :rtype: str
        """
        return self._encryption_status

    @encryption_status.setter
    def encryption_status(self, encryption_status):
        """Sets the encryption_status of this StorageDomainProperties.

        The encryption status \"Enabled | Disabled\".

        :param encryption_status: The encryption_status of this StorageDomainProperties.
        :type encryption_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if encryption_status not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_status` ({0}), must be one of {1}"
                .format(encryption_status, allowed_values)
            )

        self._encryption_status = encryption_status

    @property
    def storage_account_credential_ids(self):
        """Gets the storage_account_credential_ids of this StorageDomainProperties.

        The storage account credentials.

        :return: The storage_account_credential_ids of this StorageDomainProperties.
        :rtype: List[str]
        """
        return self._storage_account_credential_ids

    @storage_account_credential_ids.setter
    def storage_account_credential_ids(self, storage_account_credential_ids):
        """Sets the storage_account_credential_ids of this StorageDomainProperties.

        The storage account credentials.

        :param storage_account_credential_ids: The storage_account_credential_ids of this StorageDomainProperties.
        :type storage_account_credential_ids: List[str]
        """
        if storage_account_credential_ids is None:
            raise ValueError("Invalid value for `storage_account_credential_ids`, must not be `None`")

        self._storage_account_credential_ids = storage_account_credential_ids
