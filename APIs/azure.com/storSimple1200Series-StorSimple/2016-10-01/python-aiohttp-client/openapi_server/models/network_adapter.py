# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_config import IPConfig
from openapi_server import util


class NetworkAdapter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dhcp_status: str=None, i_pv4_info: IPConfig=None, i_pv6_info: IPConfig=None, link_speed: int=None, network_adapter_name: str=None):
        """NetworkAdapter - a model defined in OpenAPI

        :param dhcp_status: The dhcp_status of this NetworkAdapter.
        :param i_pv4_info: The i_pv4_info of this NetworkAdapter.
        :param i_pv6_info: The i_pv6_info of this NetworkAdapter.
        :param link_speed: The link_speed of this NetworkAdapter.
        :param network_adapter_name: The network_adapter_name of this NetworkAdapter.
        """
        self.openapi_types = {
            'dhcp_status': str,
            'i_pv4_info': IPConfig,
            'i_pv6_info': IPConfig,
            'link_speed': int,
            'network_adapter_name': str
        }

        self.attribute_map = {
            'dhcp_status': 'dhcpStatus',
            'i_pv4_info': 'iPv4Info',
            'i_pv6_info': 'iPv6Info',
            'link_speed': 'linkSpeed',
            'network_adapter_name': 'networkAdapterName'
        }

        self._dhcp_status = dhcp_status
        self._i_pv4_info = i_pv4_info
        self._i_pv6_info = i_pv6_info
        self._link_speed = link_speed
        self._network_adapter_name = network_adapter_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkAdapter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkAdapter of this NetworkAdapter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dhcp_status(self):
        """Gets the dhcp_status of this NetworkAdapter.

        Represents state of DHCP.

        :return: The dhcp_status of this NetworkAdapter.
        :rtype: str
        """
        return self._dhcp_status

    @dhcp_status.setter
    def dhcp_status(self, dhcp_status):
        """Sets the dhcp_status of this NetworkAdapter.

        Represents state of DHCP.

        :param dhcp_status: The dhcp_status of this NetworkAdapter.
        :type dhcp_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if dhcp_status not in allowed_values:
            raise ValueError(
                "Invalid value for `dhcp_status` ({0}), must be one of {1}"
                .format(dhcp_status, allowed_values)
            )

        self._dhcp_status = dhcp_status

    @property
    def i_pv4_info(self):
        """Gets the i_pv4_info of this NetworkAdapter.


        :return: The i_pv4_info of this NetworkAdapter.
        :rtype: IPConfig
        """
        return self._i_pv4_info

    @i_pv4_info.setter
    def i_pv4_info(self, i_pv4_info):
        """Sets the i_pv4_info of this NetworkAdapter.


        :param i_pv4_info: The i_pv4_info of this NetworkAdapter.
        :type i_pv4_info: IPConfig
        """

        self._i_pv4_info = i_pv4_info

    @property
    def i_pv6_info(self):
        """Gets the i_pv6_info of this NetworkAdapter.


        :return: The i_pv6_info of this NetworkAdapter.
        :rtype: IPConfig
        """
        return self._i_pv6_info

    @i_pv6_info.setter
    def i_pv6_info(self, i_pv6_info):
        """Sets the i_pv6_info of this NetworkAdapter.


        :param i_pv6_info: The i_pv6_info of this NetworkAdapter.
        :type i_pv6_info: IPConfig
        """

        self._i_pv6_info = i_pv6_info

    @property
    def link_speed(self):
        """Gets the link_speed of this NetworkAdapter.

        The speed of the network adapter.

        :return: The link_speed of this NetworkAdapter.
        :rtype: int
        """
        return self._link_speed

    @link_speed.setter
    def link_speed(self, link_speed):
        """Sets the link_speed of this NetworkAdapter.

        The speed of the network adapter.

        :param link_speed: The link_speed of this NetworkAdapter.
        :type link_speed: int
        """

        self._link_speed = link_speed

    @property
    def network_adapter_name(self):
        """Gets the network_adapter_name of this NetworkAdapter.

        The name of the network adapter.

        :return: The network_adapter_name of this NetworkAdapter.
        :rtype: str
        """
        return self._network_adapter_name

    @network_adapter_name.setter
    def network_adapter_name(self, network_adapter_name):
        """Sets the network_adapter_name of this NetworkAdapter.

        The name of the network adapter.

        :param network_adapter_name: The network_adapter_name of this NetworkAdapter.
        :type network_adapter_name: str
        """
        if network_adapter_name is None:
            raise ValueError("Invalid value for `network_adapter_name`, must not be `None`")

        self._network_adapter_name = network_adapter_name
