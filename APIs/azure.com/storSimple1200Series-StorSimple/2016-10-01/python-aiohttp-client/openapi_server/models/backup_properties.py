# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_element import BackupElement
from openapi_server import util


class BackupProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: datetime=None, device_id: str=None, elements: List[BackupElement]=None, expiration_time: datetime=None, initiated_by: str=None, size_in_bytes: int=None, target_id: str=None, target_type: str=None):
        """BackupProperties - a model defined in OpenAPI

        :param created_time: The created_time of this BackupProperties.
        :param device_id: The device_id of this BackupProperties.
        :param elements: The elements of this BackupProperties.
        :param expiration_time: The expiration_time of this BackupProperties.
        :param initiated_by: The initiated_by of this BackupProperties.
        :param size_in_bytes: The size_in_bytes of this BackupProperties.
        :param target_id: The target_id of this BackupProperties.
        :param target_type: The target_type of this BackupProperties.
        """
        self.openapi_types = {
            'created_time': datetime,
            'device_id': str,
            'elements': List[BackupElement],
            'expiration_time': datetime,
            'initiated_by': str,
            'size_in_bytes': int,
            'target_id': str,
            'target_type': str
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'device_id': 'deviceId',
            'elements': 'elements',
            'expiration_time': 'expirationTime',
            'initiated_by': 'initiatedBy',
            'size_in_bytes': 'sizeInBytes',
            'target_id': 'targetId',
            'target_type': 'targetType'
        }

        self._created_time = created_time
        self._device_id = device_id
        self._elements = elements
        self._expiration_time = expiration_time
        self._initiated_by = initiated_by
        self._size_in_bytes = size_in_bytes
        self._target_id = target_id
        self._target_type = target_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupProperties of this BackupProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this BackupProperties.

        The time when the backup was created.

        :return: The created_time of this BackupProperties.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this BackupProperties.

        The time when the backup was created.

        :param created_time: The created_time of this BackupProperties.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def device_id(self):
        """Gets the device_id of this BackupProperties.

        The Device Identifier.

        :return: The device_id of this BackupProperties.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this BackupProperties.

        The Device Identifier.

        :param device_id: The device_id of this BackupProperties.
        :type device_id: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")

        self._device_id = device_id

    @property
    def elements(self):
        """Gets the elements of this BackupProperties.

        The backup elements.

        :return: The elements of this BackupProperties.
        :rtype: List[BackupElement]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this BackupProperties.

        The backup elements.

        :param elements: The elements of this BackupProperties.
        :type elements: List[BackupElement]
        """
        if elements is None:
            raise ValueError("Invalid value for `elements`, must not be `None`")

        self._elements = elements

    @property
    def expiration_time(self):
        """Gets the expiration_time of this BackupProperties.

        The time when the backup will expire.

        :return: The expiration_time of this BackupProperties.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this BackupProperties.

        The time when the backup will expire.

        :param expiration_time: The expiration_time of this BackupProperties.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def initiated_by(self):
        """Gets the initiated_by of this BackupProperties.

        Indicates how the backup was initiated \"Manual | Scheduled\".

        :return: The initiated_by of this BackupProperties.
        :rtype: str
        """
        return self._initiated_by

    @initiated_by.setter
    def initiated_by(self, initiated_by):
        """Sets the initiated_by of this BackupProperties.

        Indicates how the backup was initiated \"Manual | Scheduled\".

        :param initiated_by: The initiated_by of this BackupProperties.
        :type initiated_by: str
        """
        allowed_values = ["Manual", "Scheduled"]  # noqa: E501
        if initiated_by not in allowed_values:
            raise ValueError(
                "Invalid value for `initiated_by` ({0}), must be one of {1}"
                .format(initiated_by, allowed_values)
            )

        self._initiated_by = initiated_by

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this BackupProperties.

        The backup size in bytes.

        :return: The size_in_bytes of this BackupProperties.
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this BackupProperties.

        The backup size in bytes.

        :param size_in_bytes: The size_in_bytes of this BackupProperties.
        :type size_in_bytes: int
        """
        if size_in_bytes is None:
            raise ValueError("Invalid value for `size_in_bytes`, must not be `None`")

        self._size_in_bytes = size_in_bytes

    @property
    def target_id(self):
        """Gets the target_id of this BackupProperties.

        The path id of the target FileServer or IscsiServer for which the backup was taken.

        :return: The target_id of this BackupProperties.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this BackupProperties.

        The path id of the target FileServer or IscsiServer for which the backup was taken.

        :param target_id: The target_id of this BackupProperties.
        :type target_id: str
        """

        self._target_id = target_id

    @property
    def target_type(self):
        """Gets the target_type of this BackupProperties.

        Type of target, FileServer or IscsiServer

        :return: The target_type of this BackupProperties.
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this BackupProperties.

        Type of target, FileServer or IscsiServer

        :param target_type: The target_type of this BackupProperties.
        :type target_type: str
        """

        self._target_type = target_type
