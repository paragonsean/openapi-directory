# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileServerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_schedule_group_id: str=None, description: str=None, domain_name: str=None, storage_domain_id: str=None):
        """FileServerProperties - a model defined in OpenAPI

        :param backup_schedule_group_id: The backup_schedule_group_id of this FileServerProperties.
        :param description: The description of this FileServerProperties.
        :param domain_name: The domain_name of this FileServerProperties.
        :param storage_domain_id: The storage_domain_id of this FileServerProperties.
        """
        self.openapi_types = {
            'backup_schedule_group_id': str,
            'description': str,
            'domain_name': str,
            'storage_domain_id': str
        }

        self.attribute_map = {
            'backup_schedule_group_id': 'backupScheduleGroupId',
            'description': 'description',
            'domain_name': 'domainName',
            'storage_domain_id': 'storageDomainId'
        }

        self._backup_schedule_group_id = backup_schedule_group_id
        self._description = description
        self._domain_name = domain_name
        self._storage_domain_id = storage_domain_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileServerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileServerProperties of this FileServerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_schedule_group_id(self):
        """Gets the backup_schedule_group_id of this FileServerProperties.

        The backup policy id.

        :return: The backup_schedule_group_id of this FileServerProperties.
        :rtype: str
        """
        return self._backup_schedule_group_id

    @backup_schedule_group_id.setter
    def backup_schedule_group_id(self, backup_schedule_group_id):
        """Sets the backup_schedule_group_id of this FileServerProperties.

        The backup policy id.

        :param backup_schedule_group_id: The backup_schedule_group_id of this FileServerProperties.
        :type backup_schedule_group_id: str
        """
        if backup_schedule_group_id is None:
            raise ValueError("Invalid value for `backup_schedule_group_id`, must not be `None`")

        self._backup_schedule_group_id = backup_schedule_group_id

    @property
    def description(self):
        """Gets the description of this FileServerProperties.

        The description of the file server

        :return: The description of this FileServerProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FileServerProperties.

        The description of the file server

        :param description: The description of this FileServerProperties.
        :type description: str
        """

        self._description = description

    @property
    def domain_name(self):
        """Gets the domain_name of this FileServerProperties.

        Domain of the file server

        :return: The domain_name of this FileServerProperties.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this FileServerProperties.

        Domain of the file server

        :param domain_name: The domain_name of this FileServerProperties.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def storage_domain_id(self):
        """Gets the storage_domain_id of this FileServerProperties.

        The storage domain id.

        :return: The storage_domain_id of this FileServerProperties.
        :rtype: str
        """
        return self._storage_domain_id

    @storage_domain_id.setter
    def storage_domain_id(self, storage_domain_id):
        """Sets the storage_domain_id of this FileServerProperties.

        The storage domain id.

        :param storage_domain_id: The storage_domain_id of this FileServerProperties.
        :type storage_domain_id: str
        """
        if storage_domain_id is None:
            raise ValueError("Invalid value for `storage_domain_id`, must not be `None`")

        self._storage_domain_id = storage_domain_id
