# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_work_item_count: int=None, estimated_time_remaining: int=None, total_work_item_count: int=None):
        """JobStats - a model defined in OpenAPI

        :param completed_work_item_count: The completed_work_item_count of this JobStats.
        :param estimated_time_remaining: The estimated_time_remaining of this JobStats.
        :param total_work_item_count: The total_work_item_count of this JobStats.
        """
        self.openapi_types = {
            'completed_work_item_count': int,
            'estimated_time_remaining': int,
            'total_work_item_count': int
        }

        self.attribute_map = {
            'completed_work_item_count': 'completedWorkItemCount',
            'estimated_time_remaining': 'estimatedTimeRemaining',
            'total_work_item_count': 'totalWorkItemCount'
        }

        self._completed_work_item_count = completed_work_item_count
        self._estimated_time_remaining = estimated_time_remaining
        self._total_work_item_count = total_work_item_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobStats of this JobStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_work_item_count(self):
        """Gets the completed_work_item_count of this JobStats.

        Completed work item count.

        :return: The completed_work_item_count of this JobStats.
        :rtype: int
        """
        return self._completed_work_item_count

    @completed_work_item_count.setter
    def completed_work_item_count(self, completed_work_item_count):
        """Sets the completed_work_item_count of this JobStats.

        Completed work item count.

        :param completed_work_item_count: The completed_work_item_count of this JobStats.
        :type completed_work_item_count: int
        """

        self._completed_work_item_count = completed_work_item_count

    @property
    def estimated_time_remaining(self):
        """Gets the estimated_time_remaining of this JobStats.

        The estimated time remaining.

        :return: The estimated_time_remaining of this JobStats.
        :rtype: int
        """
        return self._estimated_time_remaining

    @estimated_time_remaining.setter
    def estimated_time_remaining(self, estimated_time_remaining):
        """Sets the estimated_time_remaining of this JobStats.

        The estimated time remaining.

        :param estimated_time_remaining: The estimated_time_remaining of this JobStats.
        :type estimated_time_remaining: int
        """

        self._estimated_time_remaining = estimated_time_remaining

    @property
    def total_work_item_count(self):
        """Gets the total_work_item_count of this JobStats.

        Total work item count.

        :return: The total_work_item_count of this JobStats.
        :rtype: int
        """
        return self._total_work_item_count

    @total_work_item_count.setter
    def total_work_item_count(self, total_work_item_count):
        """Sets the total_work_item_count of this JobStats.

        Total work item count.

        :param total_work_item_count: The total_work_item_count of this JobStats.
        :type total_work_item_count: int
        """

        self._total_work_item_count = total_work_item_count
