# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_local_storage_in_bytes: int=None, available_storage_in_bytes: int=None, endpoint_count: int=None, provisioned_local_storage_in_bytes: int=None, provisioned_storage_in_bytes: int=None, total_backup_size_in_bytes: int=None, total_local_storage_in_bytes: int=None, total_storage_in_bytes: int=None, using_local_storage_in_bytes: int=None, using_storage_in_bytes: int=None):
        """DeviceDetails - a model defined in OpenAPI

        :param available_local_storage_in_bytes: The available_local_storage_in_bytes of this DeviceDetails.
        :param available_storage_in_bytes: The available_storage_in_bytes of this DeviceDetails.
        :param endpoint_count: The endpoint_count of this DeviceDetails.
        :param provisioned_local_storage_in_bytes: The provisioned_local_storage_in_bytes of this DeviceDetails.
        :param provisioned_storage_in_bytes: The provisioned_storage_in_bytes of this DeviceDetails.
        :param total_backup_size_in_bytes: The total_backup_size_in_bytes of this DeviceDetails.
        :param total_local_storage_in_bytes: The total_local_storage_in_bytes of this DeviceDetails.
        :param total_storage_in_bytes: The total_storage_in_bytes of this DeviceDetails.
        :param using_local_storage_in_bytes: The using_local_storage_in_bytes of this DeviceDetails.
        :param using_storage_in_bytes: The using_storage_in_bytes of this DeviceDetails.
        """
        self.openapi_types = {
            'available_local_storage_in_bytes': int,
            'available_storage_in_bytes': int,
            'endpoint_count': int,
            'provisioned_local_storage_in_bytes': int,
            'provisioned_storage_in_bytes': int,
            'total_backup_size_in_bytes': int,
            'total_local_storage_in_bytes': int,
            'total_storage_in_bytes': int,
            'using_local_storage_in_bytes': int,
            'using_storage_in_bytes': int
        }

        self.attribute_map = {
            'available_local_storage_in_bytes': 'availableLocalStorageInBytes',
            'available_storage_in_bytes': 'availableStorageInBytes',
            'endpoint_count': 'endpointCount',
            'provisioned_local_storage_in_bytes': 'provisionedLocalStorageInBytes',
            'provisioned_storage_in_bytes': 'provisionedStorageInBytes',
            'total_backup_size_in_bytes': 'totalBackupSizeInBytes',
            'total_local_storage_in_bytes': 'totalLocalStorageInBytes',
            'total_storage_in_bytes': 'totalStorageInBytes',
            'using_local_storage_in_bytes': 'usingLocalStorageInBytes',
            'using_storage_in_bytes': 'usingStorageInBytes'
        }

        self._available_local_storage_in_bytes = available_local_storage_in_bytes
        self._available_storage_in_bytes = available_storage_in_bytes
        self._endpoint_count = endpoint_count
        self._provisioned_local_storage_in_bytes = provisioned_local_storage_in_bytes
        self._provisioned_storage_in_bytes = provisioned_storage_in_bytes
        self._total_backup_size_in_bytes = total_backup_size_in_bytes
        self._total_local_storage_in_bytes = total_local_storage_in_bytes
        self._total_storage_in_bytes = total_storage_in_bytes
        self._using_local_storage_in_bytes = using_local_storage_in_bytes
        self._using_storage_in_bytes = using_storage_in_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceDetails of this DeviceDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_local_storage_in_bytes(self):
        """Gets the available_local_storage_in_bytes of this DeviceDetails.

        Local pending storage available on the device in bytes

        :return: The available_local_storage_in_bytes of this DeviceDetails.
        :rtype: int
        """
        return self._available_local_storage_in_bytes

    @available_local_storage_in_bytes.setter
    def available_local_storage_in_bytes(self, available_local_storage_in_bytes):
        """Sets the available_local_storage_in_bytes of this DeviceDetails.

        Local pending storage available on the device in bytes

        :param available_local_storage_in_bytes: The available_local_storage_in_bytes of this DeviceDetails.
        :type available_local_storage_in_bytes: int
        """

        self._available_local_storage_in_bytes = available_local_storage_in_bytes

    @property
    def available_storage_in_bytes(self):
        """Gets the available_storage_in_bytes of this DeviceDetails.

        Total pending available storage on the device in bytes

        :return: The available_storage_in_bytes of this DeviceDetails.
        :rtype: int
        """
        return self._available_storage_in_bytes

    @available_storage_in_bytes.setter
    def available_storage_in_bytes(self, available_storage_in_bytes):
        """Sets the available_storage_in_bytes of this DeviceDetails.

        Total pending available storage on the device in bytes

        :param available_storage_in_bytes: The available_storage_in_bytes of this DeviceDetails.
        :type available_storage_in_bytes: int
        """

        self._available_storage_in_bytes = available_storage_in_bytes

    @property
    def endpoint_count(self):
        """Gets the endpoint_count of this DeviceDetails.

        Total number of endpoints that are currently on the device ( i.e. number of shares on FileServer or number of volumes on IscsiServer)

        :return: The endpoint_count of this DeviceDetails.
        :rtype: int
        """
        return self._endpoint_count

    @endpoint_count.setter
    def endpoint_count(self, endpoint_count):
        """Sets the endpoint_count of this DeviceDetails.

        Total number of endpoints that are currently on the device ( i.e. number of shares on FileServer or number of volumes on IscsiServer)

        :param endpoint_count: The endpoint_count of this DeviceDetails.
        :type endpoint_count: int
        """

        self._endpoint_count = endpoint_count

    @property
    def provisioned_local_storage_in_bytes(self):
        """Gets the provisioned_local_storage_in_bytes of this DeviceDetails.

        Storage in bytes that has been provisioned locally on the device

        :return: The provisioned_local_storage_in_bytes of this DeviceDetails.
        :rtype: int
        """
        return self._provisioned_local_storage_in_bytes

    @provisioned_local_storage_in_bytes.setter
    def provisioned_local_storage_in_bytes(self, provisioned_local_storage_in_bytes):
        """Sets the provisioned_local_storage_in_bytes of this DeviceDetails.

        Storage in bytes that has been provisioned locally on the device

        :param provisioned_local_storage_in_bytes: The provisioned_local_storage_in_bytes of this DeviceDetails.
        :type provisioned_local_storage_in_bytes: int
        """

        self._provisioned_local_storage_in_bytes = provisioned_local_storage_in_bytes

    @property
    def provisioned_storage_in_bytes(self):
        """Gets the provisioned_storage_in_bytes of this DeviceDetails.

        Storage in bytes that has been provisioned on the device including both local and cloud

        :return: The provisioned_storage_in_bytes of this DeviceDetails.
        :rtype: int
        """
        return self._provisioned_storage_in_bytes

    @provisioned_storage_in_bytes.setter
    def provisioned_storage_in_bytes(self, provisioned_storage_in_bytes):
        """Sets the provisioned_storage_in_bytes of this DeviceDetails.

        Storage in bytes that has been provisioned on the device including both local and cloud

        :param provisioned_storage_in_bytes: The provisioned_storage_in_bytes of this DeviceDetails.
        :type provisioned_storage_in_bytes: int
        """

        self._provisioned_storage_in_bytes = provisioned_storage_in_bytes

    @property
    def total_backup_size_in_bytes(self):
        """Gets the total_backup_size_in_bytes of this DeviceDetails.

        Total size taken up by backups in bytes

        :return: The total_backup_size_in_bytes of this DeviceDetails.
        :rtype: int
        """
        return self._total_backup_size_in_bytes

    @total_backup_size_in_bytes.setter
    def total_backup_size_in_bytes(self, total_backup_size_in_bytes):
        """Sets the total_backup_size_in_bytes of this DeviceDetails.

        Total size taken up by backups in bytes

        :param total_backup_size_in_bytes: The total_backup_size_in_bytes of this DeviceDetails.
        :type total_backup_size_in_bytes: int
        """

        self._total_backup_size_in_bytes = total_backup_size_in_bytes

    @property
    def total_local_storage_in_bytes(self):
        """Gets the total_local_storage_in_bytes of this DeviceDetails.

        Total local storage capacity in device in bytes.

        :return: The total_local_storage_in_bytes of this DeviceDetails.
        :rtype: int
        """
        return self._total_local_storage_in_bytes

    @total_local_storage_in_bytes.setter
    def total_local_storage_in_bytes(self, total_local_storage_in_bytes):
        """Sets the total_local_storage_in_bytes of this DeviceDetails.

        Total local storage capacity in device in bytes.

        :param total_local_storage_in_bytes: The total_local_storage_in_bytes of this DeviceDetails.
        :type total_local_storage_in_bytes: int
        """

        self._total_local_storage_in_bytes = total_local_storage_in_bytes

    @property
    def total_storage_in_bytes(self):
        """Gets the total_storage_in_bytes of this DeviceDetails.

        Total storage available on the device in bytes.

        :return: The total_storage_in_bytes of this DeviceDetails.
        :rtype: int
        """
        return self._total_storage_in_bytes

    @total_storage_in_bytes.setter
    def total_storage_in_bytes(self, total_storage_in_bytes):
        """Sets the total_storage_in_bytes of this DeviceDetails.

        Total storage available on the device in bytes.

        :param total_storage_in_bytes: The total_storage_in_bytes of this DeviceDetails.
        :type total_storage_in_bytes: int
        """

        self._total_storage_in_bytes = total_storage_in_bytes

    @property
    def using_local_storage_in_bytes(self):
        """Gets the using_local_storage_in_bytes of this DeviceDetails.

        Local Storage that is being currently used in bytes

        :return: The using_local_storage_in_bytes of this DeviceDetails.
        :rtype: int
        """
        return self._using_local_storage_in_bytes

    @using_local_storage_in_bytes.setter
    def using_local_storage_in_bytes(self, using_local_storage_in_bytes):
        """Sets the using_local_storage_in_bytes of this DeviceDetails.

        Local Storage that is being currently used in bytes

        :param using_local_storage_in_bytes: The using_local_storage_in_bytes of this DeviceDetails.
        :type using_local_storage_in_bytes: int
        """

        self._using_local_storage_in_bytes = using_local_storage_in_bytes

    @property
    def using_storage_in_bytes(self):
        """Gets the using_storage_in_bytes of this DeviceDetails.

        Storage that is being currently used in bytes including both local and cloud

        :return: The using_storage_in_bytes of this DeviceDetails.
        :rtype: int
        """
        return self._using_storage_in_bytes

    @using_storage_in_bytes.setter
    def using_storage_in_bytes(self, using_storage_in_bytes):
        """Sets the using_storage_in_bytes of this DeviceDetails.

        Storage that is being currently used in bytes including both local and cloud

        :param using_storage_in_bytes: The using_storage_in_bytes of this DeviceDetails.
        :type using_storage_in_bytes: int
        """

        self._using_storage_in_bytes = using_storage_in_bytes
