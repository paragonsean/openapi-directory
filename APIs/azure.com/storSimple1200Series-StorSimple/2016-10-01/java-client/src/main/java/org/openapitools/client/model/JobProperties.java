/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JobStage;
import org.openapitools.client.model.JobStats;
import org.openapitools.client.model.UpdateDownloadProgress;
import org.openapitools.client.model.UpdateInstallProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * properties for the job
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobProperties {
  public static final String SERIALIZED_NAME_BACKUP_POINT_IN_TIME = "backupPointInTime";
  @SerializedName(SERIALIZED_NAME_BACKUP_POINT_IN_TIME)
  private OffsetDateTime backupPointInTime;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_DOWNLOAD_PROGRESS = "downloadProgress";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_PROGRESS)
  private UpdateDownloadProgress downloadProgress;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_INSTALL_PROGRESS = "installProgress";
  @SerializedName(SERIALIZED_NAME_INSTALL_PROGRESS)
  private UpdateInstallProgress installProgress;

  public static final String SERIALIZED_NAME_IS_CANCELLABLE = "isCancellable";
  @SerializedName(SERIALIZED_NAME_IS_CANCELLABLE)
  private Boolean isCancellable;

  public static final String SERIALIZED_NAME_JOB_STAGES = "jobStages";
  @SerializedName(SERIALIZED_NAME_JOB_STAGES)
  private List<JobStage> jobStages = new ArrayList<>();

  /**
   * Type of the job
   */
  @JsonAdapter(JobTypeEnum.Adapter.class)
  public enum JobTypeEnum {
    BACKUP("Backup"),
    
    CLONE("Clone"),
    
    FAILOVER("Failover"),
    
    DOWNLOAD_UPDATES("DownloadUpdates"),
    
    INSTALL_UPDATES("InstallUpdates");

    private String value;

    JobTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobTypeEnum fromValue(String value) {
      for (JobTypeEnum b : JobTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JobTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobTypeEnum jobType;

  public static final String SERIALIZED_NAME_SOURCE_DEVICE_ID = "sourceDeviceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_DEVICE_ID)
  private String sourceDeviceId;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private JobStats stats;

  public static final String SERIALIZED_NAME_TARGET_ID = "targetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  /**
   * The target type of the backup.
   */
  @JsonAdapter(TargetTypeEnum.Adapter.class)
  public enum TargetTypeEnum {
    FILE_SERVER("FileServer"),
    
    DISK_SERVER("DiskServer");

    private String value;

    TargetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetTypeEnum fromValue(String value) {
      for (TargetTypeEnum b : TargetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_TYPE = "targetType";
  @SerializedName(SERIALIZED_NAME_TARGET_TYPE)
  private TargetTypeEnum targetType;

  public JobProperties() {
  }

  public JobProperties backupPointInTime(OffsetDateTime backupPointInTime) {
    this.backupPointInTime = backupPointInTime;
    return this;
  }

  /**
   * The time of the backup used for the failover.
   * @return backupPointInTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBackupPointInTime() {
    return backupPointInTime;
  }

  public void setBackupPointInTime(OffsetDateTime backupPointInTime) {
    this.backupPointInTime = backupPointInTime;
  }


  public JobProperties deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * The device id in which the job is currently running
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public JobProperties downloadProgress(UpdateDownloadProgress downloadProgress) {
    this.downloadProgress = downloadProgress;
    return this;
  }

  /**
   * Get downloadProgress
   * @return downloadProgress
   */
  @javax.annotation.Nullable
  public UpdateDownloadProgress getDownloadProgress() {
    return downloadProgress;
  }

  public void setDownloadProgress(UpdateDownloadProgress downloadProgress) {
    this.downloadProgress = downloadProgress;
  }


  public JobProperties entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * The entity identifier for which the job ran.
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public JobProperties entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * The entity type for which the job ran.
   * @return entityType
   */
  @javax.annotation.Nullable
  public String getEntityType() {
    return entityType;
  }

  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public JobProperties installProgress(UpdateInstallProgress installProgress) {
    this.installProgress = installProgress;
    return this;
  }

  /**
   * Get installProgress
   * @return installProgress
   */
  @javax.annotation.Nullable
  public UpdateInstallProgress getInstallProgress() {
    return installProgress;
  }

  public void setInstallProgress(UpdateInstallProgress installProgress) {
    this.installProgress = installProgress;
  }


  public JobProperties isCancellable(Boolean isCancellable) {
    this.isCancellable = isCancellable;
    return this;
  }

  /**
   * Represents whether the job is cancellable or not
   * @return isCancellable
   */
  @javax.annotation.Nullable
  public Boolean getIsCancellable() {
    return isCancellable;
  }

  public void setIsCancellable(Boolean isCancellable) {
    this.isCancellable = isCancellable;
  }


  public JobProperties jobStages(List<JobStage> jobStages) {
    this.jobStages = jobStages;
    return this;
  }

  public JobProperties addJobStagesItem(JobStage jobStagesItem) {
    if (this.jobStages == null) {
      this.jobStages = new ArrayList<>();
    }
    this.jobStages.add(jobStagesItem);
    return this;
  }

  /**
   * The job stages.
   * @return jobStages
   */
  @javax.annotation.Nullable
  public List<JobStage> getJobStages() {
    return jobStages;
  }

  public void setJobStages(List<JobStage> jobStages) {
    this.jobStages = jobStages;
  }


  public JobProperties jobType(JobTypeEnum jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * Type of the job
   * @return jobType
   */
  @javax.annotation.Nonnull
  public JobTypeEnum getJobType() {
    return jobType;
  }

  public void setJobType(JobTypeEnum jobType) {
    this.jobType = jobType;
  }


  public JobProperties sourceDeviceId(String sourceDeviceId) {
    this.sourceDeviceId = sourceDeviceId;
    return this;
  }

  /**
   * The source device identifier of the failover job.
   * @return sourceDeviceId
   */
  @javax.annotation.Nullable
  public String getSourceDeviceId() {
    return sourceDeviceId;
  }

  public void setSourceDeviceId(String sourceDeviceId) {
    this.sourceDeviceId = sourceDeviceId;
  }


  public JobProperties stats(JobStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public JobStats getStats() {
    return stats;
  }

  public void setStats(JobStats stats) {
    this.stats = stats;
  }


  public JobProperties targetId(String targetId) {
    this.targetId = targetId;
    return this;
  }

  /**
   * Id of the object that is created by the job
   * @return targetId
   */
  @javax.annotation.Nullable
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }


  public JobProperties targetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
    return this;
  }

  /**
   * The target type of the backup.
   * @return targetType
   */
  @javax.annotation.Nullable
  public TargetTypeEnum getTargetType() {
    return targetType;
  }

  public void setTargetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobProperties jobProperties = (JobProperties) o;
    return Objects.equals(this.backupPointInTime, jobProperties.backupPointInTime) &&
        Objects.equals(this.deviceId, jobProperties.deviceId) &&
        Objects.equals(this.downloadProgress, jobProperties.downloadProgress) &&
        Objects.equals(this.entityId, jobProperties.entityId) &&
        Objects.equals(this.entityType, jobProperties.entityType) &&
        Objects.equals(this.installProgress, jobProperties.installProgress) &&
        Objects.equals(this.isCancellable, jobProperties.isCancellable) &&
        Objects.equals(this.jobStages, jobProperties.jobStages) &&
        Objects.equals(this.jobType, jobProperties.jobType) &&
        Objects.equals(this.sourceDeviceId, jobProperties.sourceDeviceId) &&
        Objects.equals(this.stats, jobProperties.stats) &&
        Objects.equals(this.targetId, jobProperties.targetId) &&
        Objects.equals(this.targetType, jobProperties.targetType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupPointInTime, deviceId, downloadProgress, entityId, entityType, installProgress, isCancellable, jobStages, jobType, sourceDeviceId, stats, targetId, targetType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobProperties {\n");
    sb.append("    backupPointInTime: ").append(toIndentedString(backupPointInTime)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    downloadProgress: ").append(toIndentedString(downloadProgress)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    installProgress: ").append(toIndentedString(installProgress)).append("\n");
    sb.append("    isCancellable: ").append(toIndentedString(isCancellable)).append("\n");
    sb.append("    jobStages: ").append(toIndentedString(jobStages)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    sourceDeviceId: ").append(toIndentedString(sourceDeviceId)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupPointInTime");
    openapiFields.add("deviceId");
    openapiFields.add("downloadProgress");
    openapiFields.add("entityId");
    openapiFields.add("entityType");
    openapiFields.add("installProgress");
    openapiFields.add("isCancellable");
    openapiFields.add("jobStages");
    openapiFields.add("jobType");
    openapiFields.add("sourceDeviceId");
    openapiFields.add("stats");
    openapiFields.add("targetId");
    openapiFields.add("targetType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jobType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobProperties is not found in the empty JSON string", JobProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deviceId") != null && !jsonObj.get("deviceId").isJsonNull()) && !jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
      // validate the optional field `downloadProgress`
      if (jsonObj.get("downloadProgress") != null && !jsonObj.get("downloadProgress").isJsonNull()) {
        UpdateDownloadProgress.validateJsonElement(jsonObj.get("downloadProgress"));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // validate the optional field `installProgress`
      if (jsonObj.get("installProgress") != null && !jsonObj.get("installProgress").isJsonNull()) {
        UpdateInstallProgress.validateJsonElement(jsonObj.get("installProgress"));
      }
      if (jsonObj.get("jobStages") != null && !jsonObj.get("jobStages").isJsonNull()) {
        JsonArray jsonArrayjobStages = jsonObj.getAsJsonArray("jobStages");
        if (jsonArrayjobStages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobStages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobStages` to be an array in the JSON string but got `%s`", jsonObj.get("jobStages").toString()));
          }

          // validate the optional field `jobStages` (array)
          for (int i = 0; i < jsonArrayjobStages.size(); i++) {
            JobStage.validateJsonElement(jsonArrayjobStages.get(i));
          };
        }
      }
      if (!jsonObj.get("jobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobType").toString()));
      }
      // validate the required field `jobType`
      JobTypeEnum.validateJsonElement(jsonObj.get("jobType"));
      if ((jsonObj.get("sourceDeviceId") != null && !jsonObj.get("sourceDeviceId").isJsonNull()) && !jsonObj.get("sourceDeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceDeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceDeviceId").toString()));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        JobStats.validateJsonElement(jsonObj.get("stats"));
      }
      if ((jsonObj.get("targetId") != null && !jsonObj.get("targetId").isJsonNull()) && !jsonObj.get("targetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetId").toString()));
      }
      if ((jsonObj.get("targetType") != null && !jsonObj.get("targetType").isJsonNull()) && !jsonObj.get("targetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetType").toString()));
      }
      // validate the optional field `targetType`
      if (jsonObj.get("targetType") != null && !jsonObj.get("targetType").isJsonNull()) {
        TargetTypeEnum.validateJsonElement(jsonObj.get("targetType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<JobProperties>() {
           @Override
           public void write(JsonWriter out, JobProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobProperties
   * @throws IOException if the JSON string is invalid with respect to JobProperties
   */
  public static JobProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobProperties.class);
  }

  /**
   * Convert an instance of JobProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

