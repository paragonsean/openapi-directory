/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IPConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a networkAdapter in a particular node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkAdapter {
  /**
   * Represents state of DHCP.
   */
  @JsonAdapter(DhcpStatusEnum.Adapter.class)
  public enum DhcpStatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    DhcpStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DhcpStatusEnum fromValue(String value) {
      for (DhcpStatusEnum b : DhcpStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DhcpStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DhcpStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DhcpStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DhcpStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DhcpStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DHCP_STATUS = "dhcpStatus";
  @SerializedName(SERIALIZED_NAME_DHCP_STATUS)
  private DhcpStatusEnum dhcpStatus;

  public static final String SERIALIZED_NAME_I_PV4_INFO = "iPv4Info";
  @SerializedName(SERIALIZED_NAME_I_PV4_INFO)
  private IPConfig iPv4Info;

  public static final String SERIALIZED_NAME_I_PV6_INFO = "iPv6Info";
  @SerializedName(SERIALIZED_NAME_I_PV6_INFO)
  private IPConfig iPv6Info;

  public static final String SERIALIZED_NAME_LINK_SPEED = "linkSpeed";
  @SerializedName(SERIALIZED_NAME_LINK_SPEED)
  private Long linkSpeed;

  public static final String SERIALIZED_NAME_NETWORK_ADAPTER_NAME = "networkAdapterName";
  @SerializedName(SERIALIZED_NAME_NETWORK_ADAPTER_NAME)
  private String networkAdapterName;

  public NetworkAdapter() {
  }

  public NetworkAdapter dhcpStatus(DhcpStatusEnum dhcpStatus) {
    this.dhcpStatus = dhcpStatus;
    return this;
  }

  /**
   * Represents state of DHCP.
   * @return dhcpStatus
   */
  @javax.annotation.Nonnull
  public DhcpStatusEnum getDhcpStatus() {
    return dhcpStatus;
  }

  public void setDhcpStatus(DhcpStatusEnum dhcpStatus) {
    this.dhcpStatus = dhcpStatus;
  }


  public NetworkAdapter iPv4Info(IPConfig iPv4Info) {
    this.iPv4Info = iPv4Info;
    return this;
  }

  /**
   * Get iPv4Info
   * @return iPv4Info
   */
  @javax.annotation.Nullable
  public IPConfig getiPv4Info() {
    return iPv4Info;
  }

  public void setiPv4Info(IPConfig iPv4Info) {
    this.iPv4Info = iPv4Info;
  }


  public NetworkAdapter iPv6Info(IPConfig iPv6Info) {
    this.iPv6Info = iPv6Info;
    return this;
  }

  /**
   * Get iPv6Info
   * @return iPv6Info
   */
  @javax.annotation.Nullable
  public IPConfig getiPv6Info() {
    return iPv6Info;
  }

  public void setiPv6Info(IPConfig iPv6Info) {
    this.iPv6Info = iPv6Info;
  }


  public NetworkAdapter linkSpeed(Long linkSpeed) {
    this.linkSpeed = linkSpeed;
    return this;
  }

  /**
   * The speed of the network adapter.
   * @return linkSpeed
   */
  @javax.annotation.Nullable
  public Long getLinkSpeed() {
    return linkSpeed;
  }

  public void setLinkSpeed(Long linkSpeed) {
    this.linkSpeed = linkSpeed;
  }


  public NetworkAdapter networkAdapterName(String networkAdapterName) {
    this.networkAdapterName = networkAdapterName;
    return this;
  }

  /**
   * The name of the network adapter.
   * @return networkAdapterName
   */
  @javax.annotation.Nonnull
  public String getNetworkAdapterName() {
    return networkAdapterName;
  }

  public void setNetworkAdapterName(String networkAdapterName) {
    this.networkAdapterName = networkAdapterName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkAdapter networkAdapter = (NetworkAdapter) o;
    return Objects.equals(this.dhcpStatus, networkAdapter.dhcpStatus) &&
        Objects.equals(this.iPv4Info, networkAdapter.iPv4Info) &&
        Objects.equals(this.iPv6Info, networkAdapter.iPv6Info) &&
        Objects.equals(this.linkSpeed, networkAdapter.linkSpeed) &&
        Objects.equals(this.networkAdapterName, networkAdapter.networkAdapterName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dhcpStatus, iPv4Info, iPv6Info, linkSpeed, networkAdapterName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkAdapter {\n");
    sb.append("    dhcpStatus: ").append(toIndentedString(dhcpStatus)).append("\n");
    sb.append("    iPv4Info: ").append(toIndentedString(iPv4Info)).append("\n");
    sb.append("    iPv6Info: ").append(toIndentedString(iPv6Info)).append("\n");
    sb.append("    linkSpeed: ").append(toIndentedString(linkSpeed)).append("\n");
    sb.append("    networkAdapterName: ").append(toIndentedString(networkAdapterName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dhcpStatus");
    openapiFields.add("iPv4Info");
    openapiFields.add("iPv6Info");
    openapiFields.add("linkSpeed");
    openapiFields.add("networkAdapterName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dhcpStatus");
    openapiRequiredFields.add("networkAdapterName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkAdapter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkAdapter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkAdapter is not found in the empty JSON string", NetworkAdapter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkAdapter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkAdapter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NetworkAdapter.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dhcpStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcpStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcpStatus").toString()));
      }
      // validate the required field `dhcpStatus`
      DhcpStatusEnum.validateJsonElement(jsonObj.get("dhcpStatus"));
      // validate the optional field `iPv4Info`
      if (jsonObj.get("iPv4Info") != null && !jsonObj.get("iPv4Info").isJsonNull()) {
        IPConfig.validateJsonElement(jsonObj.get("iPv4Info"));
      }
      // validate the optional field `iPv6Info`
      if (jsonObj.get("iPv6Info") != null && !jsonObj.get("iPv6Info").isJsonNull()) {
        IPConfig.validateJsonElement(jsonObj.get("iPv6Info"));
      }
      if (!jsonObj.get("networkAdapterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkAdapterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkAdapterName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkAdapter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkAdapter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkAdapter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkAdapter.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkAdapter>() {
           @Override
           public void write(JsonWriter out, NetworkAdapter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkAdapter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkAdapter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkAdapter
   * @throws IOException if the JSON string is invalid with respect to NetworkAdapter
   */
  public static NetworkAdapter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkAdapter.class);
  }

  /**
   * Convert an instance of NetworkAdapter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

