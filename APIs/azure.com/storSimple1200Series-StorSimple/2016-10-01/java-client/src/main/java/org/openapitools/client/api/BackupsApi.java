/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BackupList;
import org.openapitools.client.model.CloneRequest;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BackupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BackupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BackupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for backupsClone
     * @param deviceName The device name. (required)
     * @param backupName The backup name. (required)
     * @param elementName The backup element name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param cloneRequest The clone request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully cloned. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to clone. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupsCloneCall(String deviceName, String backupName, String elementName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, CloneRequest cloneRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloneRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups/{backupName}/elements/{elementName}/clone"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "backupName" + "}", localVarApiClient.escapeString(backupName.toString()))
            .replace("{" + "elementName" + "}", localVarApiClient.escapeString(elementName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupsCloneValidateBeforeCall(String deviceName, String backupName, String elementName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, CloneRequest cloneRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling backupsClone(Async)");
        }

        // verify the required parameter 'backupName' is set
        if (backupName == null) {
            throw new ApiException("Missing the required parameter 'backupName' when calling backupsClone(Async)");
        }

        // verify the required parameter 'elementName' is set
        if (elementName == null) {
            throw new ApiException("Missing the required parameter 'elementName' when calling backupsClone(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling backupsClone(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling backupsClone(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling backupsClone(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupsClone(Async)");
        }

        // verify the required parameter 'cloneRequest' is set
        if (cloneRequest == null) {
            throw new ApiException("Missing the required parameter 'cloneRequest' when calling backupsClone(Async)");
        }

        return backupsCloneCall(deviceName, backupName, elementName, subscriptionId, resourceGroupName, managerName, apiVersion, cloneRequest, _callback);

    }

    /**
     * 
     * Clones the given backup element to a new disk or share with given details.
     * @param deviceName The device name. (required)
     * @param backupName The backup name. (required)
     * @param elementName The backup element name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param cloneRequest The clone request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully cloned. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to clone. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public void backupsClone(String deviceName, String backupName, String elementName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, CloneRequest cloneRequest) throws ApiException {
        backupsCloneWithHttpInfo(deviceName, backupName, elementName, subscriptionId, resourceGroupName, managerName, apiVersion, cloneRequest);
    }

    /**
     * 
     * Clones the given backup element to a new disk or share with given details.
     * @param deviceName The device name. (required)
     * @param backupName The backup name. (required)
     * @param elementName The backup element name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param cloneRequest The clone request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully cloned. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to clone. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> backupsCloneWithHttpInfo(String deviceName, String backupName, String elementName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, CloneRequest cloneRequest) throws ApiException {
        okhttp3.Call localVarCall = backupsCloneValidateBeforeCall(deviceName, backupName, elementName, subscriptionId, resourceGroupName, managerName, apiVersion, cloneRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Clones the given backup element to a new disk or share with given details.
     * @param deviceName The device name. (required)
     * @param backupName The backup name. (required)
     * @param elementName The backup element name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param cloneRequest The clone request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully cloned. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to clone. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupsCloneAsync(String deviceName, String backupName, String elementName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, CloneRequest cloneRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupsCloneValidateBeforeCall(deviceName, backupName, elementName, subscriptionId, resourceGroupName, managerName, apiVersion, cloneRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for backupsDelete
     * @param deviceName The device name. (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the backup. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the backup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupsDeleteCall(String deviceName, String backupName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups/{backupName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "backupName" + "}", localVarApiClient.escapeString(backupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupsDeleteValidateBeforeCall(String deviceName, String backupName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling backupsDelete(Async)");
        }

        // verify the required parameter 'backupName' is set
        if (backupName == null) {
            throw new ApiException("Missing the required parameter 'backupName' when calling backupsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling backupsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling backupsDelete(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling backupsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupsDelete(Async)");
        }

        return backupsDeleteCall(deviceName, backupName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the backup.
     * @param deviceName The device name. (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the backup. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the backup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public void backupsDelete(String deviceName, String backupName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        backupsDeleteWithHttpInfo(deviceName, backupName, subscriptionId, resourceGroupName, managerName, apiVersion);
    }

    /**
     * 
     * Deletes the backup.
     * @param deviceName The device name. (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the backup. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the backup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> backupsDeleteWithHttpInfo(String deviceName, String backupName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = backupsDeleteValidateBeforeCall(deviceName, backupName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the backup.
     * @param deviceName The device name. (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the backup. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the backup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupsDeleteAsync(String deviceName, String backupName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupsDeleteValidateBeforeCall(deviceName, backupName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for backupsListByDevice
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param forFailover Set to true if you need backups which can be used for failover. (optional)
     * @param $filter OData Filter options (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupsListByDeviceCall(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, Boolean forFailover, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forFailover != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forFailover", forFailover));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupsListByDeviceValidateBeforeCall(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, Boolean forFailover, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling backupsListByDevice(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling backupsListByDevice(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling backupsListByDevice(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling backupsListByDevice(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupsListByDevice(Async)");
        }

        return backupsListByDeviceCall(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, forFailover, $filter, _callback);

    }

    /**
     * 
     * Retrieves all the backups in a device. Can be used to get the backups for failover also.
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param forFailover Set to true if you need backups which can be used for failover. (optional)
     * @param $filter OData Filter options (optional)
     * @return BackupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public BackupList backupsListByDevice(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, Boolean forFailover, String $filter) throws ApiException {
        ApiResponse<BackupList> localVarResp = backupsListByDeviceWithHttpInfo(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, forFailover, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves all the backups in a device. Can be used to get the backups for failover also.
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param forFailover Set to true if you need backups which can be used for failover. (optional)
     * @param $filter OData Filter options (optional)
     * @return ApiResponse&lt;BackupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupList> backupsListByDeviceWithHttpInfo(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, Boolean forFailover, String $filter) throws ApiException {
        okhttp3.Call localVarCall = backupsListByDeviceValidateBeforeCall(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, forFailover, $filter, null);
        Type localVarReturnType = new TypeToken<BackupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves all the backups in a device. Can be used to get the backups for failover also.
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param forFailover Set to true if you need backups which can be used for failover. (optional)
     * @param $filter OData Filter options (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupsListByDeviceAsync(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, Boolean forFailover, String $filter, final ApiCallback<BackupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupsListByDeviceValidateBeforeCall(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, forFailover, $filter, _callback);
        Type localVarReturnType = new TypeToken<BackupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for backupsListByManager
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupsListByManagerCall(String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/backups"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupsListByManagerValidateBeforeCall(String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling backupsListByManager(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling backupsListByManager(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling backupsListByManager(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupsListByManager(Async)");
        }

        return backupsListByManagerCall(subscriptionId, resourceGroupName, managerName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves all the backups in a manager.
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param $filter OData Filter options (optional)
     * @return BackupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public BackupList backupsListByManager(String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<BackupList> localVarResp = backupsListByManagerWithHttpInfo(subscriptionId, resourceGroupName, managerName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves all the backups in a manager.
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param $filter OData Filter options (optional)
     * @return ApiResponse&lt;BackupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupList> backupsListByManagerWithHttpInfo(String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = backupsListByManagerValidateBeforeCall(subscriptionId, resourceGroupName, managerName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<BackupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves all the backups in a manager.
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupsListByManagerAsync(String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter, final ApiCallback<BackupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupsListByManagerValidateBeforeCall(subscriptionId, resourceGroupName, managerName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<BackupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
