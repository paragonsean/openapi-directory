/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeviceDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Encases all the properties of the Device
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceProperties {
  public static final String SERIALIZED_NAME_ACTIVATION_TIME = "activationTime";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_TIME)
  private OffsetDateTime activationTime;

  /**
   * Gets or Sets allowedDeviceOperations
   */
  @JsonAdapter(AllowedDeviceOperationsEnum.Adapter.class)
  public enum AllowedDeviceOperationsEnum {
    NONE("None"),
    
    DELETE("Delete"),
    
    DELETE_WITH_WARNING("DeleteWithWarning"),
    
    DR_SOURCE("DRSource"),
    
    DR_TARGET("DRTarget"),
    
    BROWSABLE("Browsable"),
    
    READ_ONLY_FOR_DR("ReadOnlyForDR"),
    
    DEACTIVATE("Deactivate");

    private String value;

    AllowedDeviceOperationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedDeviceOperationsEnum fromValue(String value) {
      for (AllowedDeviceOperationsEnum b : AllowedDeviceOperationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedDeviceOperationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedDeviceOperationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedDeviceOperationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowedDeviceOperationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllowedDeviceOperationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_DEVICE_OPERATIONS = "allowedDeviceOperations";
  @SerializedName(SERIALIZED_NAME_ALLOWED_DEVICE_OPERATIONS)
  private List<AllowedDeviceOperationsEnum> allowedDeviceOperations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CULTURE = "culture";
  @SerializedName(SERIALIZED_NAME_CULTURE)
  private String culture;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private DeviceDetails details;

  /**
   * Gets or Sets deviceCapabilities
   */
  @JsonAdapter(DeviceCapabilitiesEnum.Adapter.class)
  public enum DeviceCapabilitiesEnum {
    INVALID("Invalid"),
    
    FILE_SERVER("FileServer"),
    
    ISCSI_SERVER("IscsiServer");

    private String value;

    DeviceCapabilitiesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceCapabilitiesEnum fromValue(String value) {
      for (DeviceCapabilitiesEnum b : DeviceCapabilitiesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceCapabilitiesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceCapabilitiesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceCapabilitiesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceCapabilitiesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceCapabilitiesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_CAPABILITIES = "deviceCapabilities";
  @SerializedName(SERIALIZED_NAME_DEVICE_CAPABILITIES)
  private List<DeviceCapabilitiesEnum> deviceCapabilities = new ArrayList<>();

  /**
   * \&quot;Complete\&quot; if the device has been successfully registered as File/IscsiServer and the creation of share/volume is complete, \&quot;Pending\&quot; if the device is only registered but the creation of share/volume is complete is still pending
   */
  @JsonAdapter(DeviceConfigurationStatusEnum.Adapter.class)
  public enum DeviceConfigurationStatusEnum {
    COMPLETE("Complete"),
    
    PENDING("Pending");

    private String value;

    DeviceConfigurationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceConfigurationStatusEnum fromValue(String value) {
      for (DeviceConfigurationStatusEnum b : DeviceConfigurationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceConfigurationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceConfigurationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceConfigurationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceConfigurationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceConfigurationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_CONFIGURATION_STATUS = "deviceConfigurationStatus";
  @SerializedName(SERIALIZED_NAME_DEVICE_CONFIGURATION_STATUS)
  private DeviceConfigurationStatusEnum deviceConfigurationStatus;

  public static final String SERIALIZED_NAME_DEVICE_DESCRIPTION = "deviceDescription";
  @SerializedName(SERIALIZED_NAME_DEVICE_DESCRIPTION)
  private String deviceDescription;

  public static final String SERIALIZED_NAME_DEVICE_SOFTWARE_VERSION = "deviceSoftwareVersion";
  @SerializedName(SERIALIZED_NAME_DEVICE_SOFTWARE_VERSION)
  private String deviceSoftwareVersion;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_FRIENDLY_SOFTWARE_NAME = "friendlySoftwareName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_SOFTWARE_NAME)
  private String friendlySoftwareName;

  public static final String SERIALIZED_NAME_MODEL_DESCRIPTION = "modelDescription";
  @SerializedName(SERIALIZED_NAME_MODEL_DESCRIPTION)
  private String modelDescription;

  /**
   * Current status of the device
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNKNOWN("Unknown"),
    
    ONLINE("Online"),
    
    OFFLINE("Offline"),
    
    REQUIRES_ATTENTION("RequiresAttention"),
    
    MAINTENANCE_MODE("MaintenanceMode"),
    
    CREATING("Creating"),
    
    PROVISIONING("Provisioning"),
    
    DELETED("Deleted"),
    
    READY_TO_SETUP("ReadyToSetup"),
    
    DEACTIVATED("Deactivated"),
    
    DEACTIVATING("Deactivating");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Type of the device
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INVALID("Invalid"),
    
    APPLIANCE("Appliance"),
    
    VIRTUAL_APPLIANCE("VirtualAppliance"),
    
    SERIES9000_ON_PREM_VIRTUAL_APPLIANCE("Series9000OnPremVirtualAppliance"),
    
    SERIES9000_VIRTUAL_APPLIANCE("Series9000VirtualAppliance"),
    
    SERIES9000_PHYSICAL_APPLIANCE("Series9000PhysicalAppliance");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public DeviceProperties() {
  }

  public DeviceProperties activationTime(OffsetDateTime activationTime) {
    this.activationTime = activationTime;
    return this;
  }

  /**
   * The UTC time at which the device was activated
   * @return activationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActivationTime() {
    return activationTime;
  }

  public void setActivationTime(OffsetDateTime activationTime) {
    this.activationTime = activationTime;
  }


  public DeviceProperties allowedDeviceOperations(List<AllowedDeviceOperationsEnum> allowedDeviceOperations) {
    this.allowedDeviceOperations = allowedDeviceOperations;
    return this;
  }

  public DeviceProperties addAllowedDeviceOperationsItem(AllowedDeviceOperationsEnum allowedDeviceOperationsItem) {
    if (this.allowedDeviceOperations == null) {
      this.allowedDeviceOperations = new ArrayList<>();
    }
    this.allowedDeviceOperations.add(allowedDeviceOperationsItem);
    return this;
  }

  /**
   * Operations that are allowed on the device based on its current state
   * @return allowedDeviceOperations
   */
  @javax.annotation.Nullable
  public List<AllowedDeviceOperationsEnum> getAllowedDeviceOperations() {
    return allowedDeviceOperations;
  }

  public void setAllowedDeviceOperations(List<AllowedDeviceOperationsEnum> allowedDeviceOperations) {
    this.allowedDeviceOperations = allowedDeviceOperations;
  }


  public DeviceProperties culture(String culture) {
    this.culture = culture;
    return this;
  }

  /**
   * Language culture setting on the device. For eg: \&quot;en-US\&quot;
   * @return culture
   */
  @javax.annotation.Nullable
  public String getCulture() {
    return culture;
  }

  public void setCulture(String culture) {
    this.culture = culture;
  }


  public DeviceProperties details(DeviceDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public DeviceDetails getDetails() {
    return details;
  }

  public void setDetails(DeviceDetails details) {
    this.details = details;
  }


  public DeviceProperties deviceCapabilities(List<DeviceCapabilitiesEnum> deviceCapabilities) {
    this.deviceCapabilities = deviceCapabilities;
    return this;
  }

  public DeviceProperties addDeviceCapabilitiesItem(DeviceCapabilitiesEnum deviceCapabilitiesItem) {
    if (this.deviceCapabilities == null) {
      this.deviceCapabilities = new ArrayList<>();
    }
    this.deviceCapabilities.add(deviceCapabilitiesItem);
    return this;
  }

  /**
   * Device can be configured either as FileServer or IscsiServer
   * @return deviceCapabilities
   */
  @javax.annotation.Nullable
  public List<DeviceCapabilitiesEnum> getDeviceCapabilities() {
    return deviceCapabilities;
  }

  public void setDeviceCapabilities(List<DeviceCapabilitiesEnum> deviceCapabilities) {
    this.deviceCapabilities = deviceCapabilities;
  }


  public DeviceProperties deviceConfigurationStatus(DeviceConfigurationStatusEnum deviceConfigurationStatus) {
    this.deviceConfigurationStatus = deviceConfigurationStatus;
    return this;
  }

  /**
   * \&quot;Complete\&quot; if the device has been successfully registered as File/IscsiServer and the creation of share/volume is complete, \&quot;Pending\&quot; if the device is only registered but the creation of share/volume is complete is still pending
   * @return deviceConfigurationStatus
   */
  @javax.annotation.Nullable
  public DeviceConfigurationStatusEnum getDeviceConfigurationStatus() {
    return deviceConfigurationStatus;
  }

  public void setDeviceConfigurationStatus(DeviceConfigurationStatusEnum deviceConfigurationStatus) {
    this.deviceConfigurationStatus = deviceConfigurationStatus;
  }


  public DeviceProperties deviceDescription(String deviceDescription) {
    this.deviceDescription = deviceDescription;
    return this;
  }

  /**
   * Short description given for the device
   * @return deviceDescription
   */
  @javax.annotation.Nullable
  public String getDeviceDescription() {
    return deviceDescription;
  }

  public void setDeviceDescription(String deviceDescription) {
    this.deviceDescription = deviceDescription;
  }


  public DeviceProperties deviceSoftwareVersion(String deviceSoftwareVersion) {
    this.deviceSoftwareVersion = deviceSoftwareVersion;
    return this;
  }

  /**
   * Version number of the software running on the device
   * @return deviceSoftwareVersion
   */
  @javax.annotation.Nullable
  public String getDeviceSoftwareVersion() {
    return deviceSoftwareVersion;
  }

  public void setDeviceSoftwareVersion(String deviceSoftwareVersion) {
    this.deviceSoftwareVersion = deviceSoftwareVersion;
  }


  public DeviceProperties domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Fully qualified name of the domain to which the device is attached
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public DeviceProperties friendlySoftwareName(String friendlySoftwareName) {
    this.friendlySoftwareName = friendlySoftwareName;
    return this;
  }

  /**
   * Friendly name for the software version
   * @return friendlySoftwareName
   */
  @javax.annotation.Nullable
  public String getFriendlySoftwareName() {
    return friendlySoftwareName;
  }

  public void setFriendlySoftwareName(String friendlySoftwareName) {
    this.friendlySoftwareName = friendlySoftwareName;
  }


  public DeviceProperties modelDescription(String modelDescription) {
    this.modelDescription = modelDescription;
    return this;
  }

  /**
   * Name of the device model
   * @return modelDescription
   */
  @javax.annotation.Nullable
  public String getModelDescription() {
    return modelDescription;
  }

  public void setModelDescription(String modelDescription) {
    this.modelDescription = modelDescription;
  }


  public DeviceProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of the device
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public DeviceProperties type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the device
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceProperties deviceProperties = (DeviceProperties) o;
    return Objects.equals(this.activationTime, deviceProperties.activationTime) &&
        Objects.equals(this.allowedDeviceOperations, deviceProperties.allowedDeviceOperations) &&
        Objects.equals(this.culture, deviceProperties.culture) &&
        Objects.equals(this.details, deviceProperties.details) &&
        Objects.equals(this.deviceCapabilities, deviceProperties.deviceCapabilities) &&
        Objects.equals(this.deviceConfigurationStatus, deviceProperties.deviceConfigurationStatus) &&
        Objects.equals(this.deviceDescription, deviceProperties.deviceDescription) &&
        Objects.equals(this.deviceSoftwareVersion, deviceProperties.deviceSoftwareVersion) &&
        Objects.equals(this.domainName, deviceProperties.domainName) &&
        Objects.equals(this.friendlySoftwareName, deviceProperties.friendlySoftwareName) &&
        Objects.equals(this.modelDescription, deviceProperties.modelDescription) &&
        Objects.equals(this.status, deviceProperties.status) &&
        Objects.equals(this.type, deviceProperties.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationTime, allowedDeviceOperations, culture, details, deviceCapabilities, deviceConfigurationStatus, deviceDescription, deviceSoftwareVersion, domainName, friendlySoftwareName, modelDescription, status, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceProperties {\n");
    sb.append("    activationTime: ").append(toIndentedString(activationTime)).append("\n");
    sb.append("    allowedDeviceOperations: ").append(toIndentedString(allowedDeviceOperations)).append("\n");
    sb.append("    culture: ").append(toIndentedString(culture)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    deviceCapabilities: ").append(toIndentedString(deviceCapabilities)).append("\n");
    sb.append("    deviceConfigurationStatus: ").append(toIndentedString(deviceConfigurationStatus)).append("\n");
    sb.append("    deviceDescription: ").append(toIndentedString(deviceDescription)).append("\n");
    sb.append("    deviceSoftwareVersion: ").append(toIndentedString(deviceSoftwareVersion)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    friendlySoftwareName: ").append(toIndentedString(friendlySoftwareName)).append("\n");
    sb.append("    modelDescription: ").append(toIndentedString(modelDescription)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activationTime");
    openapiFields.add("allowedDeviceOperations");
    openapiFields.add("culture");
    openapiFields.add("details");
    openapiFields.add("deviceCapabilities");
    openapiFields.add("deviceConfigurationStatus");
    openapiFields.add("deviceDescription");
    openapiFields.add("deviceSoftwareVersion");
    openapiFields.add("domainName");
    openapiFields.add("friendlySoftwareName");
    openapiFields.add("modelDescription");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceProperties is not found in the empty JSON string", DeviceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedDeviceOperations") != null && !jsonObj.get("allowedDeviceOperations").isJsonNull() && !jsonObj.get("allowedDeviceOperations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedDeviceOperations` to be an array in the JSON string but got `%s`", jsonObj.get("allowedDeviceOperations").toString()));
      }
      if ((jsonObj.get("culture") != null && !jsonObj.get("culture").isJsonNull()) && !jsonObj.get("culture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `culture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("culture").toString()));
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        DeviceDetails.validateJsonElement(jsonObj.get("details"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deviceCapabilities") != null && !jsonObj.get("deviceCapabilities").isJsonNull() && !jsonObj.get("deviceCapabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceCapabilities` to be an array in the JSON string but got `%s`", jsonObj.get("deviceCapabilities").toString()));
      }
      if ((jsonObj.get("deviceConfigurationStatus") != null && !jsonObj.get("deviceConfigurationStatus").isJsonNull()) && !jsonObj.get("deviceConfigurationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceConfigurationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceConfigurationStatus").toString()));
      }
      // validate the optional field `deviceConfigurationStatus`
      if (jsonObj.get("deviceConfigurationStatus") != null && !jsonObj.get("deviceConfigurationStatus").isJsonNull()) {
        DeviceConfigurationStatusEnum.validateJsonElement(jsonObj.get("deviceConfigurationStatus"));
      }
      if ((jsonObj.get("deviceDescription") != null && !jsonObj.get("deviceDescription").isJsonNull()) && !jsonObj.get("deviceDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceDescription").toString()));
      }
      if ((jsonObj.get("deviceSoftwareVersion") != null && !jsonObj.get("deviceSoftwareVersion").isJsonNull()) && !jsonObj.get("deviceSoftwareVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceSoftwareVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceSoftwareVersion").toString()));
      }
      if ((jsonObj.get("domainName") != null && !jsonObj.get("domainName").isJsonNull()) && !jsonObj.get("domainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainName").toString()));
      }
      if ((jsonObj.get("friendlySoftwareName") != null && !jsonObj.get("friendlySoftwareName").isJsonNull()) && !jsonObj.get("friendlySoftwareName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlySoftwareName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlySoftwareName").toString()));
      }
      if ((jsonObj.get("modelDescription") != null && !jsonObj.get("modelDescription").isJsonNull()) && !jsonObj.get("modelDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelDescription").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceProperties>() {
           @Override
           public void write(JsonWriter out, DeviceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceProperties
   * @throws IOException if the JSON string is invalid with respect to DeviceProperties
   */
  public static DeviceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceProperties.class);
  }

  /**
   * Convert an instance of DeviceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

