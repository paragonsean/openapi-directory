/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the localized display information for this particular operation / action.   These value will be used by several clients for   (1) custom role definitions for RBAC;   (2) complex query filters for the event service; and (3) audit history / records for management operations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailableProviderOperationDisplay {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private String resource;

  public AvailableProviderOperationDisplay() {
  }

  public AvailableProviderOperationDisplay description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Gets or sets Description  The localized friendly description for the operation, as it should be shown to the user.   It should be thorough, yet concise – it will be used in tool tips and detailed views.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AvailableProviderOperationDisplay operation(String operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Gets or sets Operation  The localized friendly name for the operation, as it should be shown to the user.   It should be concise (to fit in drop downs) but clear (i.e. self-documenting). It should use Title Casing and include the entity/resource to which it applies.
   * @return operation
   */
  @javax.annotation.Nullable
  public String getOperation() {
    return operation;
  }

  public void setOperation(String operation) {
    this.operation = operation;
  }


  public AvailableProviderOperationDisplay provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Gets or sets Provider  The localized friendly form of the resource provider name – it is expected to also include the publisher/company responsible.   It should use Title Casing and begin with “Microsoft” for 1st party services.
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public AvailableProviderOperationDisplay resource(String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Gets or sets Resource  The localized friendly form of the resource type related to this action/operation – it should match the public documentation for the resource provider.   It should use Title Casing – for examples, please refer to the “name” section.
   * @return resource
   */
  @javax.annotation.Nullable
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableProviderOperationDisplay availableProviderOperationDisplay = (AvailableProviderOperationDisplay) o;
    return Objects.equals(this.description, availableProviderOperationDisplay.description) &&
        Objects.equals(this.operation, availableProviderOperationDisplay.operation) &&
        Objects.equals(this.provider, availableProviderOperationDisplay.provider) &&
        Objects.equals(this.resource, availableProviderOperationDisplay.resource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, operation, provider, resource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableProviderOperationDisplay {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("operation");
    openapiFields.add("provider");
    openapiFields.add("resource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailableProviderOperationDisplay
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailableProviderOperationDisplay.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailableProviderOperationDisplay is not found in the empty JSON string", AvailableProviderOperationDisplay.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailableProviderOperationDisplay.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailableProviderOperationDisplay` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) && !jsonObj.get("resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailableProviderOperationDisplay.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailableProviderOperationDisplay' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailableProviderOperationDisplay> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailableProviderOperationDisplay.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailableProviderOperationDisplay>() {
           @Override
           public void write(JsonWriter out, AvailableProviderOperationDisplay value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailableProviderOperationDisplay read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailableProviderOperationDisplay given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailableProviderOperationDisplay
   * @throws IOException if the JSON string is invalid with respect to AvailableProviderOperationDisplay
   */
  public static AvailableProviderOperationDisplay fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailableProviderOperationDisplay.class);
  }

  /**
   * Convert an instance of AvailableProviderOperationDisplay to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

