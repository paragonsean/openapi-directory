/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resource Certificate And AAD Details from IDM
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceCertificateAndAADDetails {
  public static final String SERIALIZED_NAME_AAD_AUTHORITY = "aadAuthority";
  @SerializedName(SERIALIZED_NAME_AAD_AUTHORITY)
  private String aadAuthority;

  public static final String SERIALIZED_NAME_AAD_TENANT_ID = "aadTenantId";
  @SerializedName(SERIALIZED_NAME_AAD_TENANT_ID)
  private String aadTenantId;

  /**
   * Specify the Authentication type
   */
  @JsonAdapter(AuthTypeEnum.Adapter.class)
  public enum AuthTypeEnum {
    INVALID("Invalid"),
    
    ACCESS_CONTROL_SERVICE("AccessControlService"),
    
    AZURE_ACTIVE_DIRECTORY("AzureActiveDirectory");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthTypeEnum fromValue(String value) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_TYPE = "authType";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private AuthTypeEnum authType;

  public static final String SERIALIZED_NAME_AZURE_MANAGEMENT_ENDPOINT_AUDIENCE = "azureManagementEndpointAudience";
  @SerializedName(SERIALIZED_NAME_AZURE_MANAGEMENT_ENDPOINT_AUDIENCE)
  private String azureManagementEndpointAudience;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private Long resourceId;

  public static final String SERIALIZED_NAME_SERVICE_PRINCIPAL_CLIENT_ID = "servicePrincipalClientId";
  @SerializedName(SERIALIZED_NAME_SERVICE_PRINCIPAL_CLIENT_ID)
  private String servicePrincipalClientId;

  public static final String SERIALIZED_NAME_SERVICE_PRINCIPAL_OBJECT_ID = "servicePrincipalObjectId";
  @SerializedName(SERIALIZED_NAME_SERVICE_PRINCIPAL_OBJECT_ID)
  private String servicePrincipalObjectId;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_THUMBPRINT = "thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  private OffsetDateTime validTo;

  public ResourceCertificateAndAADDetails() {
  }

  public ResourceCertificateAndAADDetails aadAuthority(String aadAuthority) {
    this.aadAuthority = aadAuthority;
    return this;
  }

  /**
   * AAD tenant authority
   * @return aadAuthority
   */
  @javax.annotation.Nonnull
  public String getAadAuthority() {
    return aadAuthority;
  }

  public void setAadAuthority(String aadAuthority) {
    this.aadAuthority = aadAuthority;
  }


  public ResourceCertificateAndAADDetails aadTenantId(String aadTenantId) {
    this.aadTenantId = aadTenantId;
    return this;
  }

  /**
   * AAD tenant Id
   * @return aadTenantId
   */
  @javax.annotation.Nonnull
  public String getAadTenantId() {
    return aadTenantId;
  }

  public void setAadTenantId(String aadTenantId) {
    this.aadTenantId = aadTenantId;
  }


  public ResourceCertificateAndAADDetails authType(AuthTypeEnum authType) {
    this.authType = authType;
    return this;
  }

  /**
   * Specify the Authentication type
   * @return authType
   */
  @javax.annotation.Nullable
  public AuthTypeEnum getAuthType() {
    return authType;
  }

  public void setAuthType(AuthTypeEnum authType) {
    this.authType = authType;
  }


  public ResourceCertificateAndAADDetails azureManagementEndpointAudience(String azureManagementEndpointAudience) {
    this.azureManagementEndpointAudience = azureManagementEndpointAudience;
    return this;
  }

  /**
   * Azure Management Endpoint Audience
   * @return azureManagementEndpointAudience
   */
  @javax.annotation.Nonnull
  public String getAzureManagementEndpointAudience() {
    return azureManagementEndpointAudience;
  }

  public void setAzureManagementEndpointAudience(String azureManagementEndpointAudience) {
    this.azureManagementEndpointAudience = azureManagementEndpointAudience;
  }


  public ResourceCertificateAndAADDetails certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Gets or sets the base64 encoded certificate raw data string
   * @return certificate
   */
  @javax.annotation.Nonnull
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public ResourceCertificateAndAADDetails friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Certificate friendly name
   * @return friendlyName
   */
  @javax.annotation.Nonnull
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public ResourceCertificateAndAADDetails issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Certificate issuer
   * @return issuer
   */
  @javax.annotation.Nonnull
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public ResourceCertificateAndAADDetails resourceId(Long resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Gets or Sets the ResourceId
   * @return resourceId
   */
  @javax.annotation.Nonnull
  public Long getResourceId() {
    return resourceId;
  }

  public void setResourceId(Long resourceId) {
    this.resourceId = resourceId;
  }


  public ResourceCertificateAndAADDetails servicePrincipalClientId(String servicePrincipalClientId) {
    this.servicePrincipalClientId = servicePrincipalClientId;
    return this;
  }

  /**
   * AAD service principal clientId
   * @return servicePrincipalClientId
   */
  @javax.annotation.Nonnull
  public String getServicePrincipalClientId() {
    return servicePrincipalClientId;
  }

  public void setServicePrincipalClientId(String servicePrincipalClientId) {
    this.servicePrincipalClientId = servicePrincipalClientId;
  }


  public ResourceCertificateAndAADDetails servicePrincipalObjectId(String servicePrincipalObjectId) {
    this.servicePrincipalObjectId = servicePrincipalObjectId;
    return this;
  }

  /**
   * AAD service principal ObjectId
   * @return servicePrincipalObjectId
   */
  @javax.annotation.Nonnull
  public String getServicePrincipalObjectId() {
    return servicePrincipalObjectId;
  }

  public void setServicePrincipalObjectId(String servicePrincipalObjectId) {
    this.servicePrincipalObjectId = servicePrincipalObjectId;
  }


  public ResourceCertificateAndAADDetails subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Certificate Subject Name
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public ResourceCertificateAndAADDetails thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * Certificate thumbprint
   * @return thumbprint
   */
  @javax.annotation.Nonnull
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public ResourceCertificateAndAADDetails validFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
    return this;
  }

  /**
   * Certificate Validity start Date time
   * @return validFrom
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public ResourceCertificateAndAADDetails validTo(OffsetDateTime validTo) {
    this.validTo = validTo;
    return this;
  }

  /**
   * Certificate Validity End Date time
   * @return validTo
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getValidTo() {
    return validTo;
  }

  public void setValidTo(OffsetDateTime validTo) {
    this.validTo = validTo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceCertificateAndAADDetails resourceCertificateAndAADDetails = (ResourceCertificateAndAADDetails) o;
    return Objects.equals(this.aadAuthority, resourceCertificateAndAADDetails.aadAuthority) &&
        Objects.equals(this.aadTenantId, resourceCertificateAndAADDetails.aadTenantId) &&
        Objects.equals(this.authType, resourceCertificateAndAADDetails.authType) &&
        Objects.equals(this.azureManagementEndpointAudience, resourceCertificateAndAADDetails.azureManagementEndpointAudience) &&
        Objects.equals(this.certificate, resourceCertificateAndAADDetails.certificate) &&
        Objects.equals(this.friendlyName, resourceCertificateAndAADDetails.friendlyName) &&
        Objects.equals(this.issuer, resourceCertificateAndAADDetails.issuer) &&
        Objects.equals(this.resourceId, resourceCertificateAndAADDetails.resourceId) &&
        Objects.equals(this.servicePrincipalClientId, resourceCertificateAndAADDetails.servicePrincipalClientId) &&
        Objects.equals(this.servicePrincipalObjectId, resourceCertificateAndAADDetails.servicePrincipalObjectId) &&
        Objects.equals(this.subject, resourceCertificateAndAADDetails.subject) &&
        Objects.equals(this.thumbprint, resourceCertificateAndAADDetails.thumbprint) &&
        Objects.equals(this.validFrom, resourceCertificateAndAADDetails.validFrom) &&
        Objects.equals(this.validTo, resourceCertificateAndAADDetails.validTo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aadAuthority, aadTenantId, authType, azureManagementEndpointAudience, certificate, friendlyName, issuer, resourceId, servicePrincipalClientId, servicePrincipalObjectId, subject, thumbprint, validFrom, validTo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceCertificateAndAADDetails {\n");
    sb.append("    aadAuthority: ").append(toIndentedString(aadAuthority)).append("\n");
    sb.append("    aadTenantId: ").append(toIndentedString(aadTenantId)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    azureManagementEndpointAudience: ").append(toIndentedString(azureManagementEndpointAudience)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    servicePrincipalClientId: ").append(toIndentedString(servicePrincipalClientId)).append("\n");
    sb.append("    servicePrincipalObjectId: ").append(toIndentedString(servicePrincipalObjectId)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aadAuthority");
    openapiFields.add("aadTenantId");
    openapiFields.add("authType");
    openapiFields.add("azureManagementEndpointAudience");
    openapiFields.add("certificate");
    openapiFields.add("friendlyName");
    openapiFields.add("issuer");
    openapiFields.add("resourceId");
    openapiFields.add("servicePrincipalClientId");
    openapiFields.add("servicePrincipalObjectId");
    openapiFields.add("subject");
    openapiFields.add("thumbprint");
    openapiFields.add("validFrom");
    openapiFields.add("validTo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aadAuthority");
    openapiRequiredFields.add("aadTenantId");
    openapiRequiredFields.add("azureManagementEndpointAudience");
    openapiRequiredFields.add("certificate");
    openapiRequiredFields.add("friendlyName");
    openapiRequiredFields.add("issuer");
    openapiRequiredFields.add("resourceId");
    openapiRequiredFields.add("servicePrincipalClientId");
    openapiRequiredFields.add("servicePrincipalObjectId");
    openapiRequiredFields.add("subject");
    openapiRequiredFields.add("thumbprint");
    openapiRequiredFields.add("validFrom");
    openapiRequiredFields.add("validTo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceCertificateAndAADDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceCertificateAndAADDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceCertificateAndAADDetails is not found in the empty JSON string", ResourceCertificateAndAADDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceCertificateAndAADDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceCertificateAndAADDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResourceCertificateAndAADDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("aadAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aadAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aadAuthority").toString()));
      }
      if (!jsonObj.get("aadTenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aadTenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aadTenantId").toString()));
      }
      if ((jsonObj.get("authType") != null && !jsonObj.get("authType").isJsonNull()) && !jsonObj.get("authType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authType").toString()));
      }
      // validate the optional field `authType`
      if (jsonObj.get("authType") != null && !jsonObj.get("authType").isJsonNull()) {
        AuthTypeEnum.validateJsonElement(jsonObj.get("authType"));
      }
      if (!jsonObj.get("azureManagementEndpointAudience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureManagementEndpointAudience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureManagementEndpointAudience").toString()));
      }
      if (!jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      if (!jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if (!jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if (!jsonObj.get("servicePrincipalClientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servicePrincipalClientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servicePrincipalClientId").toString()));
      }
      if (!jsonObj.get("servicePrincipalObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servicePrincipalObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servicePrincipalObjectId").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if (!jsonObj.get("thumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceCertificateAndAADDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceCertificateAndAADDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceCertificateAndAADDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceCertificateAndAADDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceCertificateAndAADDetails>() {
           @Override
           public void write(JsonWriter out, ResourceCertificateAndAADDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceCertificateAndAADDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceCertificateAndAADDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceCertificateAndAADDetails
   * @throws IOException if the JSON string is invalid with respect to ResourceCertificateAndAADDetails
   */
  public static ResourceCertificateAndAADDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceCertificateAndAADDetails.class);
  }

  /**
   * Convert an instance of ResourceCertificateAndAADDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

