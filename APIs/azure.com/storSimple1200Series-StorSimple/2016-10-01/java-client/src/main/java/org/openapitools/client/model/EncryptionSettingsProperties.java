/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of EncryptionSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EncryptionSettingsProperties {
  /**
   * The encryption status which indicates if encryption is enabled or not.
   */
  @JsonAdapter(EncryptionStatusEnum.Adapter.class)
  public enum EncryptionStatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    EncryptionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionStatusEnum fromValue(String value) {
      for (EncryptionStatusEnum b : EncryptionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_STATUS = "encryptionStatus";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_STATUS)
  private EncryptionStatusEnum encryptionStatus;

  /**
   * The key rollover status which indicates if key rollover is required or not. If secrets encryption has been upgraded, then it requires key rollover.
   */
  @JsonAdapter(KeyRolloverStatusEnum.Adapter.class)
  public enum KeyRolloverStatusEnum {
    REQUIRED("Required"),
    
    NOT_REQUIRED("NotRequired");

    private String value;

    KeyRolloverStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyRolloverStatusEnum fromValue(String value) {
      for (KeyRolloverStatusEnum b : KeyRolloverStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyRolloverStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyRolloverStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyRolloverStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyRolloverStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeyRolloverStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEY_ROLLOVER_STATUS = "keyRolloverStatus";
  @SerializedName(SERIALIZED_NAME_KEY_ROLLOVER_STATUS)
  private KeyRolloverStatusEnum keyRolloverStatus;

  public EncryptionSettingsProperties() {
  }

  public EncryptionSettingsProperties encryptionStatus(EncryptionStatusEnum encryptionStatus) {
    this.encryptionStatus = encryptionStatus;
    return this;
  }

  /**
   * The encryption status which indicates if encryption is enabled or not.
   * @return encryptionStatus
   */
  @javax.annotation.Nonnull
  public EncryptionStatusEnum getEncryptionStatus() {
    return encryptionStatus;
  }

  public void setEncryptionStatus(EncryptionStatusEnum encryptionStatus) {
    this.encryptionStatus = encryptionStatus;
  }


  public EncryptionSettingsProperties keyRolloverStatus(KeyRolloverStatusEnum keyRolloverStatus) {
    this.keyRolloverStatus = keyRolloverStatus;
    return this;
  }

  /**
   * The key rollover status which indicates if key rollover is required or not. If secrets encryption has been upgraded, then it requires key rollover.
   * @return keyRolloverStatus
   */
  @javax.annotation.Nonnull
  public KeyRolloverStatusEnum getKeyRolloverStatus() {
    return keyRolloverStatus;
  }

  public void setKeyRolloverStatus(KeyRolloverStatusEnum keyRolloverStatus) {
    this.keyRolloverStatus = keyRolloverStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncryptionSettingsProperties encryptionSettingsProperties = (EncryptionSettingsProperties) o;
    return Objects.equals(this.encryptionStatus, encryptionSettingsProperties.encryptionStatus) &&
        Objects.equals(this.keyRolloverStatus, encryptionSettingsProperties.keyRolloverStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptionStatus, keyRolloverStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncryptionSettingsProperties {\n");
    sb.append("    encryptionStatus: ").append(toIndentedString(encryptionStatus)).append("\n");
    sb.append("    keyRolloverStatus: ").append(toIndentedString(keyRolloverStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryptionStatus");
    openapiFields.add("keyRolloverStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("encryptionStatus");
    openapiRequiredFields.add("keyRolloverStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EncryptionSettingsProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EncryptionSettingsProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EncryptionSettingsProperties is not found in the empty JSON string", EncryptionSettingsProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EncryptionSettingsProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EncryptionSettingsProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EncryptionSettingsProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("encryptionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionStatus").toString()));
      }
      // validate the required field `encryptionStatus`
      EncryptionStatusEnum.validateJsonElement(jsonObj.get("encryptionStatus"));
      if (!jsonObj.get("keyRolloverStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyRolloverStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyRolloverStatus").toString()));
      }
      // validate the required field `keyRolloverStatus`
      KeyRolloverStatusEnum.validateJsonElement(jsonObj.get("keyRolloverStatus"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EncryptionSettingsProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EncryptionSettingsProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EncryptionSettingsProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EncryptionSettingsProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<EncryptionSettingsProperties>() {
           @Override
           public void write(JsonWriter out, EncryptionSettingsProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EncryptionSettingsProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EncryptionSettingsProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EncryptionSettingsProperties
   * @throws IOException if the JSON string is invalid with respect to EncryptionSettingsProperties
   */
  public static EncryptionSettingsProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EncryptionSettingsProperties.class);
  }

  /**
   * Convert an instance of EncryptionSettingsProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

