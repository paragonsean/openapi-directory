/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class containing more granular details about the device
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceDetails {
  public static final String SERIALIZED_NAME_AVAILABLE_LOCAL_STORAGE_IN_BYTES = "availableLocalStorageInBytes";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_LOCAL_STORAGE_IN_BYTES)
  private Long availableLocalStorageInBytes;

  public static final String SERIALIZED_NAME_AVAILABLE_STORAGE_IN_BYTES = "availableStorageInBytes";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_STORAGE_IN_BYTES)
  private Long availableStorageInBytes;

  public static final String SERIALIZED_NAME_ENDPOINT_COUNT = "endpointCount";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_COUNT)
  private Integer endpointCount;

  public static final String SERIALIZED_NAME_PROVISIONED_LOCAL_STORAGE_IN_BYTES = "provisionedLocalStorageInBytes";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_LOCAL_STORAGE_IN_BYTES)
  private Long provisionedLocalStorageInBytes;

  public static final String SERIALIZED_NAME_PROVISIONED_STORAGE_IN_BYTES = "provisionedStorageInBytes";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_STORAGE_IN_BYTES)
  private Long provisionedStorageInBytes;

  public static final String SERIALIZED_NAME_TOTAL_BACKUP_SIZE_IN_BYTES = "totalBackupSizeInBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_BACKUP_SIZE_IN_BYTES)
  private Long totalBackupSizeInBytes;

  public static final String SERIALIZED_NAME_TOTAL_LOCAL_STORAGE_IN_BYTES = "totalLocalStorageInBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_LOCAL_STORAGE_IN_BYTES)
  private Long totalLocalStorageInBytes;

  public static final String SERIALIZED_NAME_TOTAL_STORAGE_IN_BYTES = "totalStorageInBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_STORAGE_IN_BYTES)
  private Long totalStorageInBytes;

  public static final String SERIALIZED_NAME_USING_LOCAL_STORAGE_IN_BYTES = "usingLocalStorageInBytes";
  @SerializedName(SERIALIZED_NAME_USING_LOCAL_STORAGE_IN_BYTES)
  private Long usingLocalStorageInBytes;

  public static final String SERIALIZED_NAME_USING_STORAGE_IN_BYTES = "usingStorageInBytes";
  @SerializedName(SERIALIZED_NAME_USING_STORAGE_IN_BYTES)
  private Long usingStorageInBytes;

  public DeviceDetails() {
  }

  public DeviceDetails availableLocalStorageInBytes(Long availableLocalStorageInBytes) {
    this.availableLocalStorageInBytes = availableLocalStorageInBytes;
    return this;
  }

  /**
   * Local pending storage available on the device in bytes
   * @return availableLocalStorageInBytes
   */
  @javax.annotation.Nullable
  public Long getAvailableLocalStorageInBytes() {
    return availableLocalStorageInBytes;
  }

  public void setAvailableLocalStorageInBytes(Long availableLocalStorageInBytes) {
    this.availableLocalStorageInBytes = availableLocalStorageInBytes;
  }


  public DeviceDetails availableStorageInBytes(Long availableStorageInBytes) {
    this.availableStorageInBytes = availableStorageInBytes;
    return this;
  }

  /**
   * Total pending available storage on the device in bytes
   * @return availableStorageInBytes
   */
  @javax.annotation.Nullable
  public Long getAvailableStorageInBytes() {
    return availableStorageInBytes;
  }

  public void setAvailableStorageInBytes(Long availableStorageInBytes) {
    this.availableStorageInBytes = availableStorageInBytes;
  }


  public DeviceDetails endpointCount(Integer endpointCount) {
    this.endpointCount = endpointCount;
    return this;
  }

  /**
   * Total number of endpoints that are currently on the device ( i.e. number of shares on FileServer or number of volumes on IscsiServer)
   * @return endpointCount
   */
  @javax.annotation.Nullable
  public Integer getEndpointCount() {
    return endpointCount;
  }

  public void setEndpointCount(Integer endpointCount) {
    this.endpointCount = endpointCount;
  }


  public DeviceDetails provisionedLocalStorageInBytes(Long provisionedLocalStorageInBytes) {
    this.provisionedLocalStorageInBytes = provisionedLocalStorageInBytes;
    return this;
  }

  /**
   * Storage in bytes that has been provisioned locally on the device
   * @return provisionedLocalStorageInBytes
   */
  @javax.annotation.Nullable
  public Long getProvisionedLocalStorageInBytes() {
    return provisionedLocalStorageInBytes;
  }

  public void setProvisionedLocalStorageInBytes(Long provisionedLocalStorageInBytes) {
    this.provisionedLocalStorageInBytes = provisionedLocalStorageInBytes;
  }


  public DeviceDetails provisionedStorageInBytes(Long provisionedStorageInBytes) {
    this.provisionedStorageInBytes = provisionedStorageInBytes;
    return this;
  }

  /**
   * Storage in bytes that has been provisioned on the device including both local and cloud
   * @return provisionedStorageInBytes
   */
  @javax.annotation.Nullable
  public Long getProvisionedStorageInBytes() {
    return provisionedStorageInBytes;
  }

  public void setProvisionedStorageInBytes(Long provisionedStorageInBytes) {
    this.provisionedStorageInBytes = provisionedStorageInBytes;
  }


  public DeviceDetails totalBackupSizeInBytes(Long totalBackupSizeInBytes) {
    this.totalBackupSizeInBytes = totalBackupSizeInBytes;
    return this;
  }

  /**
   * Total size taken up by backups in bytes
   * @return totalBackupSizeInBytes
   */
  @javax.annotation.Nullable
  public Long getTotalBackupSizeInBytes() {
    return totalBackupSizeInBytes;
  }

  public void setTotalBackupSizeInBytes(Long totalBackupSizeInBytes) {
    this.totalBackupSizeInBytes = totalBackupSizeInBytes;
  }


  public DeviceDetails totalLocalStorageInBytes(Long totalLocalStorageInBytes) {
    this.totalLocalStorageInBytes = totalLocalStorageInBytes;
    return this;
  }

  /**
   * Total local storage capacity in device in bytes.
   * @return totalLocalStorageInBytes
   */
  @javax.annotation.Nullable
  public Long getTotalLocalStorageInBytes() {
    return totalLocalStorageInBytes;
  }

  public void setTotalLocalStorageInBytes(Long totalLocalStorageInBytes) {
    this.totalLocalStorageInBytes = totalLocalStorageInBytes;
  }


  public DeviceDetails totalStorageInBytes(Long totalStorageInBytes) {
    this.totalStorageInBytes = totalStorageInBytes;
    return this;
  }

  /**
   * Total storage available on the device in bytes.
   * @return totalStorageInBytes
   */
  @javax.annotation.Nullable
  public Long getTotalStorageInBytes() {
    return totalStorageInBytes;
  }

  public void setTotalStorageInBytes(Long totalStorageInBytes) {
    this.totalStorageInBytes = totalStorageInBytes;
  }


  public DeviceDetails usingLocalStorageInBytes(Long usingLocalStorageInBytes) {
    this.usingLocalStorageInBytes = usingLocalStorageInBytes;
    return this;
  }

  /**
   * Local Storage that is being currently used in bytes
   * @return usingLocalStorageInBytes
   */
  @javax.annotation.Nullable
  public Long getUsingLocalStorageInBytes() {
    return usingLocalStorageInBytes;
  }

  public void setUsingLocalStorageInBytes(Long usingLocalStorageInBytes) {
    this.usingLocalStorageInBytes = usingLocalStorageInBytes;
  }


  public DeviceDetails usingStorageInBytes(Long usingStorageInBytes) {
    this.usingStorageInBytes = usingStorageInBytes;
    return this;
  }

  /**
   * Storage that is being currently used in bytes including both local and cloud
   * @return usingStorageInBytes
   */
  @javax.annotation.Nullable
  public Long getUsingStorageInBytes() {
    return usingStorageInBytes;
  }

  public void setUsingStorageInBytes(Long usingStorageInBytes) {
    this.usingStorageInBytes = usingStorageInBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceDetails deviceDetails = (DeviceDetails) o;
    return Objects.equals(this.availableLocalStorageInBytes, deviceDetails.availableLocalStorageInBytes) &&
        Objects.equals(this.availableStorageInBytes, deviceDetails.availableStorageInBytes) &&
        Objects.equals(this.endpointCount, deviceDetails.endpointCount) &&
        Objects.equals(this.provisionedLocalStorageInBytes, deviceDetails.provisionedLocalStorageInBytes) &&
        Objects.equals(this.provisionedStorageInBytes, deviceDetails.provisionedStorageInBytes) &&
        Objects.equals(this.totalBackupSizeInBytes, deviceDetails.totalBackupSizeInBytes) &&
        Objects.equals(this.totalLocalStorageInBytes, deviceDetails.totalLocalStorageInBytes) &&
        Objects.equals(this.totalStorageInBytes, deviceDetails.totalStorageInBytes) &&
        Objects.equals(this.usingLocalStorageInBytes, deviceDetails.usingLocalStorageInBytes) &&
        Objects.equals(this.usingStorageInBytes, deviceDetails.usingStorageInBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableLocalStorageInBytes, availableStorageInBytes, endpointCount, provisionedLocalStorageInBytes, provisionedStorageInBytes, totalBackupSizeInBytes, totalLocalStorageInBytes, totalStorageInBytes, usingLocalStorageInBytes, usingStorageInBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceDetails {\n");
    sb.append("    availableLocalStorageInBytes: ").append(toIndentedString(availableLocalStorageInBytes)).append("\n");
    sb.append("    availableStorageInBytes: ").append(toIndentedString(availableStorageInBytes)).append("\n");
    sb.append("    endpointCount: ").append(toIndentedString(endpointCount)).append("\n");
    sb.append("    provisionedLocalStorageInBytes: ").append(toIndentedString(provisionedLocalStorageInBytes)).append("\n");
    sb.append("    provisionedStorageInBytes: ").append(toIndentedString(provisionedStorageInBytes)).append("\n");
    sb.append("    totalBackupSizeInBytes: ").append(toIndentedString(totalBackupSizeInBytes)).append("\n");
    sb.append("    totalLocalStorageInBytes: ").append(toIndentedString(totalLocalStorageInBytes)).append("\n");
    sb.append("    totalStorageInBytes: ").append(toIndentedString(totalStorageInBytes)).append("\n");
    sb.append("    usingLocalStorageInBytes: ").append(toIndentedString(usingLocalStorageInBytes)).append("\n");
    sb.append("    usingStorageInBytes: ").append(toIndentedString(usingStorageInBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableLocalStorageInBytes");
    openapiFields.add("availableStorageInBytes");
    openapiFields.add("endpointCount");
    openapiFields.add("provisionedLocalStorageInBytes");
    openapiFields.add("provisionedStorageInBytes");
    openapiFields.add("totalBackupSizeInBytes");
    openapiFields.add("totalLocalStorageInBytes");
    openapiFields.add("totalStorageInBytes");
    openapiFields.add("usingLocalStorageInBytes");
    openapiFields.add("usingStorageInBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceDetails is not found in the empty JSON string", DeviceDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceDetails>() {
           @Override
           public void write(JsonWriter out, DeviceDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceDetails
   * @throws IOException if the JSON string is invalid with respect to DeviceDetails
   */
  public static DeviceDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceDetails.class);
  }

  /**
   * Convert an instance of DeviceDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

