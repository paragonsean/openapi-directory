/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BackupElement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class represents Backup properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupProperties {
  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_ELEMENTS = "elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  private List<BackupElement> elements = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "expirationTime";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private OffsetDateTime expirationTime;

  /**
   * Indicates how the backup was initiated \&quot;Manual | Scheduled\&quot;.
   */
  @JsonAdapter(InitiatedByEnum.Adapter.class)
  public enum InitiatedByEnum {
    MANUAL("Manual"),
    
    SCHEDULED("Scheduled");

    private String value;

    InitiatedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InitiatedByEnum fromValue(String value) {
      for (InitiatedByEnum b : InitiatedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InitiatedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InitiatedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InitiatedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InitiatedByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InitiatedByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INITIATED_BY = "initiatedBy";
  @SerializedName(SERIALIZED_NAME_INITIATED_BY)
  private InitiatedByEnum initiatedBy;

  public static final String SERIALIZED_NAME_SIZE_IN_BYTES = "sizeInBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_IN_BYTES)
  private Long sizeInBytes;

  public static final String SERIALIZED_NAME_TARGET_ID = "targetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  public static final String SERIALIZED_NAME_TARGET_TYPE = "targetType";
  @SerializedName(SERIALIZED_NAME_TARGET_TYPE)
  private String targetType;

  public BackupProperties() {
  }

  public BackupProperties createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * The time when the backup was created.
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public BackupProperties deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * The Device Identifier.
   * @return deviceId
   */
  @javax.annotation.Nonnull
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public BackupProperties elements(List<BackupElement> elements) {
    this.elements = elements;
    return this;
  }

  public BackupProperties addElementsItem(BackupElement elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<>();
    }
    this.elements.add(elementsItem);
    return this;
  }

  /**
   * The backup elements.
   * @return elements
   */
  @javax.annotation.Nonnull
  public List<BackupElement> getElements() {
    return elements;
  }

  public void setElements(List<BackupElement> elements) {
    this.elements = elements;
  }


  public BackupProperties expirationTime(OffsetDateTime expirationTime) {
    this.expirationTime = expirationTime;
    return this;
  }

  /**
   * The time when the backup will expire.
   * @return expirationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationTime() {
    return expirationTime;
  }

  public void setExpirationTime(OffsetDateTime expirationTime) {
    this.expirationTime = expirationTime;
  }


  public BackupProperties initiatedBy(InitiatedByEnum initiatedBy) {
    this.initiatedBy = initiatedBy;
    return this;
  }

  /**
   * Indicates how the backup was initiated \&quot;Manual | Scheduled\&quot;.
   * @return initiatedBy
   */
  @javax.annotation.Nonnull
  public InitiatedByEnum getInitiatedBy() {
    return initiatedBy;
  }

  public void setInitiatedBy(InitiatedByEnum initiatedBy) {
    this.initiatedBy = initiatedBy;
  }


  public BackupProperties sizeInBytes(Long sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
    return this;
  }

  /**
   * The backup size in bytes.
   * @return sizeInBytes
   */
  @javax.annotation.Nonnull
  public Long getSizeInBytes() {
    return sizeInBytes;
  }

  public void setSizeInBytes(Long sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
  }


  public BackupProperties targetId(String targetId) {
    this.targetId = targetId;
    return this;
  }

  /**
   * The path id of the target FileServer or IscsiServer for which the backup was taken.
   * @return targetId
   */
  @javax.annotation.Nullable
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }


  public BackupProperties targetType(String targetType) {
    this.targetType = targetType;
    return this;
  }

  /**
   * Type of target, FileServer or IscsiServer
   * @return targetType
   */
  @javax.annotation.Nullable
  public String getTargetType() {
    return targetType;
  }

  public void setTargetType(String targetType) {
    this.targetType = targetType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupProperties backupProperties = (BackupProperties) o;
    return Objects.equals(this.createdTime, backupProperties.createdTime) &&
        Objects.equals(this.deviceId, backupProperties.deviceId) &&
        Objects.equals(this.elements, backupProperties.elements) &&
        Objects.equals(this.expirationTime, backupProperties.expirationTime) &&
        Objects.equals(this.initiatedBy, backupProperties.initiatedBy) &&
        Objects.equals(this.sizeInBytes, backupProperties.sizeInBytes) &&
        Objects.equals(this.targetId, backupProperties.targetId) &&
        Objects.equals(this.targetType, backupProperties.targetType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdTime, deviceId, elements, expirationTime, initiatedBy, sizeInBytes, targetId, targetType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupProperties {\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    initiatedBy: ").append(toIndentedString(initiatedBy)).append("\n");
    sb.append("    sizeInBytes: ").append(toIndentedString(sizeInBytes)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdTime");
    openapiFields.add("deviceId");
    openapiFields.add("elements");
    openapiFields.add("expirationTime");
    openapiFields.add("initiatedBy");
    openapiFields.add("sizeInBytes");
    openapiFields.add("targetId");
    openapiFields.add("targetType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deviceId");
    openapiRequiredFields.add("elements");
    openapiRequiredFields.add("initiatedBy");
    openapiRequiredFields.add("sizeInBytes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupProperties is not found in the empty JSON string", BackupProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BackupProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("elements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `elements` to be an array in the JSON string but got `%s`", jsonObj.get("elements").toString()));
      }

      JsonArray jsonArrayelements = jsonObj.getAsJsonArray("elements");
      // validate the required field `elements` (array)
      for (int i = 0; i < jsonArrayelements.size(); i++) {
        BackupElement.validateJsonElement(jsonArrayelements.get(i));
      };
      if (!jsonObj.get("initiatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initiatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initiatedBy").toString()));
      }
      // validate the required field `initiatedBy`
      InitiatedByEnum.validateJsonElement(jsonObj.get("initiatedBy"));
      if ((jsonObj.get("targetId") != null && !jsonObj.get("targetId").isJsonNull()) && !jsonObj.get("targetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetId").toString()));
      }
      if ((jsonObj.get("targetType") != null && !jsonObj.get("targetType").isJsonNull()) && !jsonObj.get("targetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupProperties>() {
           @Override
           public void write(JsonWriter out, BackupProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupProperties
   * @throws IOException if the JSON string is invalid with respect to BackupProperties
   */
  public static BackupProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupProperties.class);
  }

  /**
   * Convert an instance of BackupProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

