/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FileShare;
import org.openapitools.client.model.ISCSIDisk;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of CloneRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloneRequestProperties {
  public static final String SERIALIZED_NAME_DISK = "disk";
  @SerializedName(SERIALIZED_NAME_DISK)
  private ISCSIDisk disk;

  public static final String SERIALIZED_NAME_NEW_ENDPOINT_NAME = "newEndpointName";
  @SerializedName(SERIALIZED_NAME_NEW_ENDPOINT_NAME)
  private String newEndpointName;

  public static final String SERIALIZED_NAME_SHARE = "share";
  @SerializedName(SERIALIZED_NAME_SHARE)
  private FileShare share;

  public static final String SERIALIZED_NAME_TARGET_ACCESS_POINT_ID = "targetAccessPointId";
  @SerializedName(SERIALIZED_NAME_TARGET_ACCESS_POINT_ID)
  private String targetAccessPointId;

  public static final String SERIALIZED_NAME_TARGET_DEVICE_ID = "targetDeviceId";
  @SerializedName(SERIALIZED_NAME_TARGET_DEVICE_ID)
  private String targetDeviceId;

  public CloneRequestProperties() {
  }

  public CloneRequestProperties disk(ISCSIDisk disk) {
    this.disk = disk;
    return this;
  }

  /**
   * Get disk
   * @return disk
   */
  @javax.annotation.Nullable
  public ISCSIDisk getDisk() {
    return disk;
  }

  public void setDisk(ISCSIDisk disk) {
    this.disk = disk;
  }


  public CloneRequestProperties newEndpointName(String newEndpointName) {
    this.newEndpointName = newEndpointName;
    return this;
  }

  /**
   * Name of new endpoint which will created as part of clone job.
   * @return newEndpointName
   */
  @javax.annotation.Nonnull
  public String getNewEndpointName() {
    return newEndpointName;
  }

  public void setNewEndpointName(String newEndpointName) {
    this.newEndpointName = newEndpointName;
  }


  public CloneRequestProperties share(FileShare share) {
    this.share = share;
    return this;
  }

  /**
   * Get share
   * @return share
   */
  @javax.annotation.Nullable
  public FileShare getShare() {
    return share;
  }

  public void setShare(FileShare share) {
    this.share = share;
  }


  public CloneRequestProperties targetAccessPointId(String targetAccessPointId) {
    this.targetAccessPointId = targetAccessPointId;
    return this;
  }

  /**
   * Access point Id on which clone job will performed.
   * @return targetAccessPointId
   */
  @javax.annotation.Nonnull
  public String getTargetAccessPointId() {
    return targetAccessPointId;
  }

  public void setTargetAccessPointId(String targetAccessPointId) {
    this.targetAccessPointId = targetAccessPointId;
  }


  public CloneRequestProperties targetDeviceId(String targetDeviceId) {
    this.targetDeviceId = targetDeviceId;
    return this;
  }

  /**
   * DeviceId of the device which will act as the Clone target
   * @return targetDeviceId
   */
  @javax.annotation.Nonnull
  public String getTargetDeviceId() {
    return targetDeviceId;
  }

  public void setTargetDeviceId(String targetDeviceId) {
    this.targetDeviceId = targetDeviceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloneRequestProperties cloneRequestProperties = (CloneRequestProperties) o;
    return Objects.equals(this.disk, cloneRequestProperties.disk) &&
        Objects.equals(this.newEndpointName, cloneRequestProperties.newEndpointName) &&
        Objects.equals(this.share, cloneRequestProperties.share) &&
        Objects.equals(this.targetAccessPointId, cloneRequestProperties.targetAccessPointId) &&
        Objects.equals(this.targetDeviceId, cloneRequestProperties.targetDeviceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disk, newEndpointName, share, targetAccessPointId, targetDeviceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloneRequestProperties {\n");
    sb.append("    disk: ").append(toIndentedString(disk)).append("\n");
    sb.append("    newEndpointName: ").append(toIndentedString(newEndpointName)).append("\n");
    sb.append("    share: ").append(toIndentedString(share)).append("\n");
    sb.append("    targetAccessPointId: ").append(toIndentedString(targetAccessPointId)).append("\n");
    sb.append("    targetDeviceId: ").append(toIndentedString(targetDeviceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disk");
    openapiFields.add("newEndpointName");
    openapiFields.add("share");
    openapiFields.add("targetAccessPointId");
    openapiFields.add("targetDeviceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("newEndpointName");
    openapiRequiredFields.add("targetAccessPointId");
    openapiRequiredFields.add("targetDeviceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloneRequestProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloneRequestProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloneRequestProperties is not found in the empty JSON string", CloneRequestProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloneRequestProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloneRequestProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CloneRequestProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `disk`
      if (jsonObj.get("disk") != null && !jsonObj.get("disk").isJsonNull()) {
        ISCSIDisk.validateJsonElement(jsonObj.get("disk"));
      }
      if (!jsonObj.get("newEndpointName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newEndpointName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newEndpointName").toString()));
      }
      // validate the optional field `share`
      if (jsonObj.get("share") != null && !jsonObj.get("share").isJsonNull()) {
        FileShare.validateJsonElement(jsonObj.get("share"));
      }
      if (!jsonObj.get("targetAccessPointId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetAccessPointId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetAccessPointId").toString()));
      }
      if (!jsonObj.get("targetDeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetDeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetDeviceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloneRequestProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloneRequestProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloneRequestProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloneRequestProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CloneRequestProperties>() {
           @Override
           public void write(JsonWriter out, CloneRequestProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloneRequestProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloneRequestProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloneRequestProperties
   * @throws IOException if the JSON string is invalid with respect to CloneRequestProperties
   */
  public static CloneRequestProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloneRequestProperties.class);
  }

  /**
   * Convert an instance of CloneRequestProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

