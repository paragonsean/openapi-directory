/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RawCertificateData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Upload Certificate Request to IDM
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UploadCertificateRequest {
  /**
   * Gets ContractVersion
   */
  @JsonAdapter(ContractVersionEnum.Adapter.class)
  public enum ContractVersionEnum {
    INVALID_VERSION("InvalidVersion"),
    
    V2011_09("V2011_09"),
    
    V2012_02("V2012_02"),
    
    V2012_05("V2012_05"),
    
    V2012_12("V2012_12"),
    
    V2013_04("V2013_04"),
    
    V2013_10("V2013_10"),
    
    V2013_11("V2013_11"),
    
    V2014_04("V2014_04"),
    
    V2014_06("V2014_06"),
    
    V2014_07("V2014_07"),
    
    V2014_09("V2014_09"),
    
    V2014_10("V2014_10"),
    
    V2014_12("V2014_12"),
    
    V2015_01("V2015_01"),
    
    V2015_02("V2015_02"),
    
    V2015_04("V2015_04"),
    
    V2015_05("V2015_05"),
    
    V2015_06("V2015_06"),
    
    V2015_07("V2015_07"),
    
    V2015_08("V2015_08"),
    
    V2015_10("V2015_10"),
    
    V2015_12("V2015_12"),
    
    V2016_01("V2016_01"),
    
    V2016_02("V2016_02"),
    
    V2016_04("V2016_04"),
    
    V2016_05("V2016_05"),
    
    V2016_07("V2016_07"),
    
    V2016_08("V2016_08");

    private String value;

    ContractVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContractVersionEnum fromValue(String value) {
      for (ContractVersionEnum b : ContractVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContractVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContractVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContractVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContractVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContractVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTRACT_VERSION = "contractVersion";
  @SerializedName(SERIALIZED_NAME_CONTRACT_VERSION)
  private ContractVersionEnum contractVersion;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private RawCertificateData properties;

  public UploadCertificateRequest() {
  }

  public UploadCertificateRequest(
     ContractVersionEnum contractVersion
  ) {
    this();
    this.contractVersion = contractVersion;
  }

  /**
   * Gets ContractVersion
   * @return contractVersion
   */
  @javax.annotation.Nullable
  public ContractVersionEnum getContractVersion() {
    return contractVersion;
  }



  public UploadCertificateRequest properties(RawCertificateData properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nonnull
  public RawCertificateData getProperties() {
    return properties;
  }

  public void setProperties(RawCertificateData properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadCertificateRequest uploadCertificateRequest = (UploadCertificateRequest) o;
    return Objects.equals(this.contractVersion, uploadCertificateRequest.contractVersion) &&
        Objects.equals(this.properties, uploadCertificateRequest.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractVersion, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadCertificateRequest {\n");
    sb.append("    contractVersion: ").append(toIndentedString(contractVersion)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractVersion");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("properties");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UploadCertificateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UploadCertificateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadCertificateRequest is not found in the empty JSON string", UploadCertificateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UploadCertificateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadCertificateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UploadCertificateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contractVersion") != null && !jsonObj.get("contractVersion").isJsonNull()) && !jsonObj.get("contractVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractVersion").toString()));
      }
      // validate the optional field `contractVersion`
      if (jsonObj.get("contractVersion") != null && !jsonObj.get("contractVersion").isJsonNull()) {
        ContractVersionEnum.validateJsonElement(jsonObj.get("contractVersion"));
      }
      // validate the required field `properties`
      RawCertificateData.validateJsonElement(jsonObj.get("properties"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadCertificateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadCertificateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadCertificateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadCertificateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadCertificateRequest>() {
           @Override
           public void write(JsonWriter out, UploadCertificateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadCertificateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UploadCertificateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UploadCertificateRequest
   * @throws IOException if the JSON string is invalid with respect to UploadCertificateRequest
   */
  public static UploadCertificateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadCertificateRequest.class);
  }

  /**
   * Convert an instance of UploadCertificateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

