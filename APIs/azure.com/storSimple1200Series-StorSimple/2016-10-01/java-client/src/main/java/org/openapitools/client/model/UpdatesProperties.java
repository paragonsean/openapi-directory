/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the update profile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatesProperties {
  public static final String SERIALIZED_NAME_DEVICE_LAST_SCANNED_TIME = "deviceLastScannedTime";
  @SerializedName(SERIALIZED_NAME_DEVICE_LAST_SCANNED_TIME)
  private OffsetDateTime deviceLastScannedTime;

  public static final String SERIALIZED_NAME_DEVICE_VERSION = "deviceVersion";
  @SerializedName(SERIALIZED_NAME_DEVICE_VERSION)
  private String deviceVersion;

  public static final String SERIALIZED_NAME_IN_PROGRESS_DOWNLOAD_JOB_ID = "inProgressDownloadJobId";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS_DOWNLOAD_JOB_ID)
  private String inProgressDownloadJobId;

  public static final String SERIALIZED_NAME_IN_PROGRESS_DOWNLOAD_JOB_STARTED_TIME = "inProgressDownloadJobStartedTime";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS_DOWNLOAD_JOB_STARTED_TIME)
  private OffsetDateTime inProgressDownloadJobStartedTime;

  public static final String SERIALIZED_NAME_IN_PROGRESS_INSTALL_JOB_ID = "inProgressInstallJobId";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS_INSTALL_JOB_ID)
  private String inProgressInstallJobId;

  public static final String SERIALIZED_NAME_IN_PROGRESS_INSTALL_JOB_STARTED_TIME = "inProgressInstallJobStartedTime";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS_INSTALL_JOB_STARTED_TIME)
  private OffsetDateTime inProgressInstallJobStartedTime;

  public static final String SERIALIZED_NAME_IN_PROGRESS_SCAN_STARTED_TIME = "inProgressScanStartedTime";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS_SCAN_STARTED_TIME)
  private OffsetDateTime inProgressScanStartedTime;

  public static final String SERIALIZED_NAME_LAST_COMPLETED_DOWNLOAD_JOB_TIME = "lastCompletedDownloadJobTime";
  @SerializedName(SERIALIZED_NAME_LAST_COMPLETED_DOWNLOAD_JOB_TIME)
  private OffsetDateTime lastCompletedDownloadJobTime;

  public static final String SERIALIZED_NAME_LAST_COMPLETED_INSTALL_JOB_TIME = "lastCompletedInstallJobTime";
  @SerializedName(SERIALIZED_NAME_LAST_COMPLETED_INSTALL_JOB_TIME)
  private OffsetDateTime lastCompletedInstallJobTime;

  public static final String SERIALIZED_NAME_LAST_COMPLETED_SCAN_TIME = "lastCompletedScanTime";
  @SerializedName(SERIALIZED_NAME_LAST_COMPLETED_SCAN_TIME)
  private OffsetDateTime lastCompletedScanTime;

  public static final String SERIALIZED_NAME_REBOOT_REQUIRED_FOR_INSTALL = "rebootRequiredForInstall";
  @SerializedName(SERIALIZED_NAME_REBOOT_REQUIRED_FOR_INSTALL)
  private Boolean rebootRequiredForInstall;

  public static final String SERIALIZED_NAME_REGULAR_UPDATES_AVAILABLE = "regularUpdatesAvailable";
  @SerializedName(SERIALIZED_NAME_REGULAR_UPDATES_AVAILABLE)
  private Boolean regularUpdatesAvailable;

  /**
   * The current update operation.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IDLE("Idle"),
    
    SCANNING("Scanning"),
    
    DOWNLOADING("Downloading"),
    
    INSTALLING("Installing");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TOTAL_ITEMS_PENDING_FOR_DOWNLOAD = "totalItemsPendingForDownload";
  @SerializedName(SERIALIZED_NAME_TOTAL_ITEMS_PENDING_FOR_DOWNLOAD)
  private Integer totalItemsPendingForDownload;

  public static final String SERIALIZED_NAME_TOTAL_ITEMS_PENDING_FOR_INSTALL = "totalItemsPendingForInstall";
  @SerializedName(SERIALIZED_NAME_TOTAL_ITEMS_PENDING_FOR_INSTALL)
  private Integer totalItemsPendingForInstall;

  public UpdatesProperties() {
  }

  public UpdatesProperties deviceLastScannedTime(OffsetDateTime deviceLastScannedTime) {
    this.deviceLastScannedTime = deviceLastScannedTime;
    return this;
  }

  /**
   * The last time when the device did an update scan.
   * @return deviceLastScannedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeviceLastScannedTime() {
    return deviceLastScannedTime;
  }

  public void setDeviceLastScannedTime(OffsetDateTime deviceLastScannedTime) {
    this.deviceLastScannedTime = deviceLastScannedTime;
  }


  public UpdatesProperties deviceVersion(String deviceVersion) {
    this.deviceVersion = deviceVersion;
    return this;
  }

  /**
   * The current Device version.
   * @return deviceVersion
   */
  @javax.annotation.Nullable
  public String getDeviceVersion() {
    return deviceVersion;
  }

  public void setDeviceVersion(String deviceVersion) {
    this.deviceVersion = deviceVersion;
  }


  public UpdatesProperties inProgressDownloadJobId(String inProgressDownloadJobId) {
    this.inProgressDownloadJobId = inProgressDownloadJobId;
    return this;
  }

  /**
   * If a download is in progress, this field contains the JobId of that particular download job
   * @return inProgressDownloadJobId
   */
  @javax.annotation.Nullable
  public String getInProgressDownloadJobId() {
    return inProgressDownloadJobId;
  }

  public void setInProgressDownloadJobId(String inProgressDownloadJobId) {
    this.inProgressDownloadJobId = inProgressDownloadJobId;
  }


  public UpdatesProperties inProgressDownloadJobStartedTime(OffsetDateTime inProgressDownloadJobStartedTime) {
    this.inProgressDownloadJobStartedTime = inProgressDownloadJobStartedTime;
    return this;
  }

  /**
   * The time when the currently running download (if any) started
   * @return inProgressDownloadJobStartedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInProgressDownloadJobStartedTime() {
    return inProgressDownloadJobStartedTime;
  }

  public void setInProgressDownloadJobStartedTime(OffsetDateTime inProgressDownloadJobStartedTime) {
    this.inProgressDownloadJobStartedTime = inProgressDownloadJobStartedTime;
  }


  public UpdatesProperties inProgressInstallJobId(String inProgressInstallJobId) {
    this.inProgressInstallJobId = inProgressInstallJobId;
    return this;
  }

  /**
   * If an install is in progress, this field contains the JobId of that particular install job
   * @return inProgressInstallJobId
   */
  @javax.annotation.Nullable
  public String getInProgressInstallJobId() {
    return inProgressInstallJobId;
  }

  public void setInProgressInstallJobId(String inProgressInstallJobId) {
    this.inProgressInstallJobId = inProgressInstallJobId;
  }


  public UpdatesProperties inProgressInstallJobStartedTime(OffsetDateTime inProgressInstallJobStartedTime) {
    this.inProgressInstallJobStartedTime = inProgressInstallJobStartedTime;
    return this;
  }

  /**
   * The time when the currently running install (if any) started
   * @return inProgressInstallJobStartedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInProgressInstallJobStartedTime() {
    return inProgressInstallJobStartedTime;
  }

  public void setInProgressInstallJobStartedTime(OffsetDateTime inProgressInstallJobStartedTime) {
    this.inProgressInstallJobStartedTime = inProgressInstallJobStartedTime;
  }


  public UpdatesProperties inProgressScanStartedTime(OffsetDateTime inProgressScanStartedTime) {
    this.inProgressScanStartedTime = inProgressScanStartedTime;
    return this;
  }

  /**
   * The time when the currently running scan (if any) started
   * @return inProgressScanStartedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInProgressScanStartedTime() {
    return inProgressScanStartedTime;
  }

  public void setInProgressScanStartedTime(OffsetDateTime inProgressScanStartedTime) {
    this.inProgressScanStartedTime = inProgressScanStartedTime;
  }


  public UpdatesProperties lastCompletedDownloadJobTime(OffsetDateTime lastCompletedDownloadJobTime) {
    this.lastCompletedDownloadJobTime = lastCompletedDownloadJobTime;
    return this;
  }

  /**
   * The time when the last Download job was completed (success|cancelled|failed) on the device.
   * @return lastCompletedDownloadJobTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastCompletedDownloadJobTime() {
    return lastCompletedDownloadJobTime;
  }

  public void setLastCompletedDownloadJobTime(OffsetDateTime lastCompletedDownloadJobTime) {
    this.lastCompletedDownloadJobTime = lastCompletedDownloadJobTime;
  }


  public UpdatesProperties lastCompletedInstallJobTime(OffsetDateTime lastCompletedInstallJobTime) {
    this.lastCompletedInstallJobTime = lastCompletedInstallJobTime;
    return this;
  }

  /**
   * The time when the last Install job was completed (success|cancelled|failed) on the device.
   * @return lastCompletedInstallJobTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastCompletedInstallJobTime() {
    return lastCompletedInstallJobTime;
  }

  public void setLastCompletedInstallJobTime(OffsetDateTime lastCompletedInstallJobTime) {
    this.lastCompletedInstallJobTime = lastCompletedInstallJobTime;
  }


  public UpdatesProperties lastCompletedScanTime(OffsetDateTime lastCompletedScanTime) {
    this.lastCompletedScanTime = lastCompletedScanTime;
    return this;
  }

  /**
   * The time when the last scan job was completed (success|cancelled|failed) on the device.
   * @return lastCompletedScanTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastCompletedScanTime() {
    return lastCompletedScanTime;
  }

  public void setLastCompletedScanTime(OffsetDateTime lastCompletedScanTime) {
    this.lastCompletedScanTime = lastCompletedScanTime;
  }


  public UpdatesProperties rebootRequiredForInstall(Boolean rebootRequiredForInstall) {
    this.rebootRequiredForInstall = rebootRequiredForInstall;
    return this;
  }

  /**
   * Set to true if RegularUpdatesAvailable is true and if at least one of the updateItems detected has needs a reboot to install.
   * @return rebootRequiredForInstall
   */
  @javax.annotation.Nullable
  public Boolean getRebootRequiredForInstall() {
    return rebootRequiredForInstall;
  }

  public void setRebootRequiredForInstall(Boolean rebootRequiredForInstall) {
    this.rebootRequiredForInstall = rebootRequiredForInstall;
  }


  public UpdatesProperties regularUpdatesAvailable(Boolean regularUpdatesAvailable) {
    this.regularUpdatesAvailable = regularUpdatesAvailable;
    return this;
  }

  /**
   * Set to true if regular updates were detected for the current version of the device.
   * @return regularUpdatesAvailable
   */
  @javax.annotation.Nullable
  public Boolean getRegularUpdatesAvailable() {
    return regularUpdatesAvailable;
  }

  public void setRegularUpdatesAvailable(Boolean regularUpdatesAvailable) {
    this.regularUpdatesAvailable = regularUpdatesAvailable;
  }


  public UpdatesProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current update operation.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public UpdatesProperties totalItemsPendingForDownload(Integer totalItemsPendingForDownload) {
    this.totalItemsPendingForDownload = totalItemsPendingForDownload;
    return this;
  }

  /**
   * The total number of items pending for download.
   * @return totalItemsPendingForDownload
   */
  @javax.annotation.Nullable
  public Integer getTotalItemsPendingForDownload() {
    return totalItemsPendingForDownload;
  }

  public void setTotalItemsPendingForDownload(Integer totalItemsPendingForDownload) {
    this.totalItemsPendingForDownload = totalItemsPendingForDownload;
  }


  public UpdatesProperties totalItemsPendingForInstall(Integer totalItemsPendingForInstall) {
    this.totalItemsPendingForInstall = totalItemsPendingForInstall;
    return this;
  }

  /**
   * The total number of items pending for install.
   * @return totalItemsPendingForInstall
   */
  @javax.annotation.Nullable
  public Integer getTotalItemsPendingForInstall() {
    return totalItemsPendingForInstall;
  }

  public void setTotalItemsPendingForInstall(Integer totalItemsPendingForInstall) {
    this.totalItemsPendingForInstall = totalItemsPendingForInstall;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatesProperties updatesProperties = (UpdatesProperties) o;
    return Objects.equals(this.deviceLastScannedTime, updatesProperties.deviceLastScannedTime) &&
        Objects.equals(this.deviceVersion, updatesProperties.deviceVersion) &&
        Objects.equals(this.inProgressDownloadJobId, updatesProperties.inProgressDownloadJobId) &&
        Objects.equals(this.inProgressDownloadJobStartedTime, updatesProperties.inProgressDownloadJobStartedTime) &&
        Objects.equals(this.inProgressInstallJobId, updatesProperties.inProgressInstallJobId) &&
        Objects.equals(this.inProgressInstallJobStartedTime, updatesProperties.inProgressInstallJobStartedTime) &&
        Objects.equals(this.inProgressScanStartedTime, updatesProperties.inProgressScanStartedTime) &&
        Objects.equals(this.lastCompletedDownloadJobTime, updatesProperties.lastCompletedDownloadJobTime) &&
        Objects.equals(this.lastCompletedInstallJobTime, updatesProperties.lastCompletedInstallJobTime) &&
        Objects.equals(this.lastCompletedScanTime, updatesProperties.lastCompletedScanTime) &&
        Objects.equals(this.rebootRequiredForInstall, updatesProperties.rebootRequiredForInstall) &&
        Objects.equals(this.regularUpdatesAvailable, updatesProperties.regularUpdatesAvailable) &&
        Objects.equals(this.status, updatesProperties.status) &&
        Objects.equals(this.totalItemsPendingForDownload, updatesProperties.totalItemsPendingForDownload) &&
        Objects.equals(this.totalItemsPendingForInstall, updatesProperties.totalItemsPendingForInstall);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceLastScannedTime, deviceVersion, inProgressDownloadJobId, inProgressDownloadJobStartedTime, inProgressInstallJobId, inProgressInstallJobStartedTime, inProgressScanStartedTime, lastCompletedDownloadJobTime, lastCompletedInstallJobTime, lastCompletedScanTime, rebootRequiredForInstall, regularUpdatesAvailable, status, totalItemsPendingForDownload, totalItemsPendingForInstall);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatesProperties {\n");
    sb.append("    deviceLastScannedTime: ").append(toIndentedString(deviceLastScannedTime)).append("\n");
    sb.append("    deviceVersion: ").append(toIndentedString(deviceVersion)).append("\n");
    sb.append("    inProgressDownloadJobId: ").append(toIndentedString(inProgressDownloadJobId)).append("\n");
    sb.append("    inProgressDownloadJobStartedTime: ").append(toIndentedString(inProgressDownloadJobStartedTime)).append("\n");
    sb.append("    inProgressInstallJobId: ").append(toIndentedString(inProgressInstallJobId)).append("\n");
    sb.append("    inProgressInstallJobStartedTime: ").append(toIndentedString(inProgressInstallJobStartedTime)).append("\n");
    sb.append("    inProgressScanStartedTime: ").append(toIndentedString(inProgressScanStartedTime)).append("\n");
    sb.append("    lastCompletedDownloadJobTime: ").append(toIndentedString(lastCompletedDownloadJobTime)).append("\n");
    sb.append("    lastCompletedInstallJobTime: ").append(toIndentedString(lastCompletedInstallJobTime)).append("\n");
    sb.append("    lastCompletedScanTime: ").append(toIndentedString(lastCompletedScanTime)).append("\n");
    sb.append("    rebootRequiredForInstall: ").append(toIndentedString(rebootRequiredForInstall)).append("\n");
    sb.append("    regularUpdatesAvailable: ").append(toIndentedString(regularUpdatesAvailable)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalItemsPendingForDownload: ").append(toIndentedString(totalItemsPendingForDownload)).append("\n");
    sb.append("    totalItemsPendingForInstall: ").append(toIndentedString(totalItemsPendingForInstall)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceLastScannedTime");
    openapiFields.add("deviceVersion");
    openapiFields.add("inProgressDownloadJobId");
    openapiFields.add("inProgressDownloadJobStartedTime");
    openapiFields.add("inProgressInstallJobId");
    openapiFields.add("inProgressInstallJobStartedTime");
    openapiFields.add("inProgressScanStartedTime");
    openapiFields.add("lastCompletedDownloadJobTime");
    openapiFields.add("lastCompletedInstallJobTime");
    openapiFields.add("lastCompletedScanTime");
    openapiFields.add("rebootRequiredForInstall");
    openapiFields.add("regularUpdatesAvailable");
    openapiFields.add("status");
    openapiFields.add("totalItemsPendingForDownload");
    openapiFields.add("totalItemsPendingForInstall");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatesProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatesProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatesProperties is not found in the empty JSON string", UpdatesProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatesProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatesProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deviceVersion") != null && !jsonObj.get("deviceVersion").isJsonNull()) && !jsonObj.get("deviceVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceVersion").toString()));
      }
      if ((jsonObj.get("inProgressDownloadJobId") != null && !jsonObj.get("inProgressDownloadJobId").isJsonNull()) && !jsonObj.get("inProgressDownloadJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inProgressDownloadJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inProgressDownloadJobId").toString()));
      }
      if ((jsonObj.get("inProgressInstallJobId") != null && !jsonObj.get("inProgressInstallJobId").isJsonNull()) && !jsonObj.get("inProgressInstallJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inProgressInstallJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inProgressInstallJobId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatesProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatesProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatesProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatesProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatesProperties>() {
           @Override
           public void write(JsonWriter out, UpdatesProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatesProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatesProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatesProperties
   * @throws IOException if the JSON string is invalid with respect to UpdatesProperties
   */
  public static UpdatesProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatesProperties.class);
  }

  /**
   * Convert an instance of UpdatesProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

