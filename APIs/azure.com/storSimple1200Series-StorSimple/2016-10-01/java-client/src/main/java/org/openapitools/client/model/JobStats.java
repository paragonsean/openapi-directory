/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Stats that are available for all jobs in common
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobStats {
  public static final String SERIALIZED_NAME_COMPLETED_WORK_ITEM_COUNT = "completedWorkItemCount";
  @SerializedName(SERIALIZED_NAME_COMPLETED_WORK_ITEM_COUNT)
  private Integer completedWorkItemCount;

  public static final String SERIALIZED_NAME_ESTIMATED_TIME_REMAINING = "estimatedTimeRemaining";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TIME_REMAINING)
  private Integer estimatedTimeRemaining;

  public static final String SERIALIZED_NAME_TOTAL_WORK_ITEM_COUNT = "totalWorkItemCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_WORK_ITEM_COUNT)
  private Integer totalWorkItemCount;

  public JobStats() {
  }

  public JobStats completedWorkItemCount(Integer completedWorkItemCount) {
    this.completedWorkItemCount = completedWorkItemCount;
    return this;
  }

  /**
   * Completed work item count.
   * @return completedWorkItemCount
   */
  @javax.annotation.Nullable
  public Integer getCompletedWorkItemCount() {
    return completedWorkItemCount;
  }

  public void setCompletedWorkItemCount(Integer completedWorkItemCount) {
    this.completedWorkItemCount = completedWorkItemCount;
  }


  public JobStats estimatedTimeRemaining(Integer estimatedTimeRemaining) {
    this.estimatedTimeRemaining = estimatedTimeRemaining;
    return this;
  }

  /**
   * The estimated time remaining.
   * @return estimatedTimeRemaining
   */
  @javax.annotation.Nullable
  public Integer getEstimatedTimeRemaining() {
    return estimatedTimeRemaining;
  }

  public void setEstimatedTimeRemaining(Integer estimatedTimeRemaining) {
    this.estimatedTimeRemaining = estimatedTimeRemaining;
  }


  public JobStats totalWorkItemCount(Integer totalWorkItemCount) {
    this.totalWorkItemCount = totalWorkItemCount;
    return this;
  }

  /**
   * Total work item count.
   * @return totalWorkItemCount
   */
  @javax.annotation.Nullable
  public Integer getTotalWorkItemCount() {
    return totalWorkItemCount;
  }

  public void setTotalWorkItemCount(Integer totalWorkItemCount) {
    this.totalWorkItemCount = totalWorkItemCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobStats jobStats = (JobStats) o;
    return Objects.equals(this.completedWorkItemCount, jobStats.completedWorkItemCount) &&
        Objects.equals(this.estimatedTimeRemaining, jobStats.estimatedTimeRemaining) &&
        Objects.equals(this.totalWorkItemCount, jobStats.totalWorkItemCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completedWorkItemCount, estimatedTimeRemaining, totalWorkItemCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobStats {\n");
    sb.append("    completedWorkItemCount: ").append(toIndentedString(completedWorkItemCount)).append("\n");
    sb.append("    estimatedTimeRemaining: ").append(toIndentedString(estimatedTimeRemaining)).append("\n");
    sb.append("    totalWorkItemCount: ").append(toIndentedString(totalWorkItemCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completedWorkItemCount");
    openapiFields.add("estimatedTimeRemaining");
    openapiFields.add("totalWorkItemCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobStats is not found in the empty JSON string", JobStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobStats.class));

       return (TypeAdapter<T>) new TypeAdapter<JobStats>() {
           @Override
           public void write(JsonWriter out, JobStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobStats
   * @throws IOException if the JSON string is invalid with respect to JobStats
   */
  public static JobStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobStats.class);
  }

  /**
   * Convert an instance of JobStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

