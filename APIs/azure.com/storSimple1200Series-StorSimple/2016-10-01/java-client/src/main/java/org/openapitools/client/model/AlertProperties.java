/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AlertErrorDetails;
import org.openapitools.client.model.AlertSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of alert
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertProperties {
  public static final String SERIALIZED_NAME_ALERT_TYPE = "alertType";
  @SerializedName(SERIALIZED_NAME_ALERT_TYPE)
  private String alertType;

  public static final String SERIALIZED_NAME_APPEARED_AT_SOURCE_TIME = "appearedAtSourceTime";
  @SerializedName(SERIALIZED_NAME_APPEARED_AT_SOURCE_TIME)
  private OffsetDateTime appearedAtSourceTime;

  public static final String SERIALIZED_NAME_APPEARED_AT_TIME = "appearedAtTime";
  @SerializedName(SERIALIZED_NAME_APPEARED_AT_TIME)
  private OffsetDateTime appearedAtTime;

  public static final String SERIALIZED_NAME_CLEARED_AT_SOURCE_TIME = "clearedAtSourceTime";
  @SerializedName(SERIALIZED_NAME_CLEARED_AT_SOURCE_TIME)
  private OffsetDateTime clearedAtSourceTime;

  public static final String SERIALIZED_NAME_CLEARED_AT_TIME = "clearedAtTime";
  @SerializedName(SERIALIZED_NAME_CLEARED_AT_TIME)
  private OffsetDateTime clearedAtTime;

  public static final String SERIALIZED_NAME_DETAILED_INFORMATION = "detailedInformation";
  @SerializedName(SERIALIZED_NAME_DETAILED_INFORMATION)
  private Map<String, String> detailedInformation = new HashMap<>();

  public static final String SERIALIZED_NAME_ERROR_DETAILS = "errorDetails";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAILS)
  private AlertErrorDetails errorDetails;

  public static final String SERIALIZED_NAME_RECOMMENDATION = "recommendation";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION)
  private String recommendation;

  public static final String SERIALIZED_NAME_RESOLUTION_REASON = "resolutionReason";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_REASON)
  private String resolutionReason;

  /**
   * Device or Resource alert
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    RESOURCE("Resource"),
    
    DEVICE("Device");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private ScopeEnum scope;

  /**
   * Severity of the alert
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    INFORMATIONAL("Informational"),
    
    WARNING("Warning"),
    
    CRITICAL("Critical");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private AlertSource source;

  /**
   * Current status of the alert
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("Active"),
    
    CLEARED("Cleared");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public AlertProperties() {
  }

  public AlertProperties alertType(String alertType) {
    this.alertType = alertType;
    return this;
  }

  /**
   * Type of the alert
   * @return alertType
   */
  @javax.annotation.Nonnull
  public String getAlertType() {
    return alertType;
  }

  public void setAlertType(String alertType) {
    this.alertType = alertType;
  }


  public AlertProperties appearedAtSourceTime(OffsetDateTime appearedAtSourceTime) {
    this.appearedAtSourceTime = appearedAtSourceTime;
    return this;
  }

  /**
   * UTC time at which the alert appeared on the source
   * @return appearedAtSourceTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getAppearedAtSourceTime() {
    return appearedAtSourceTime;
  }

  public void setAppearedAtSourceTime(OffsetDateTime appearedAtSourceTime) {
    this.appearedAtSourceTime = appearedAtSourceTime;
  }


  public AlertProperties appearedAtTime(OffsetDateTime appearedAtTime) {
    this.appearedAtTime = appearedAtTime;
    return this;
  }

  /**
   * UTC time at which the alert appeared
   * @return appearedAtTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getAppearedAtTime() {
    return appearedAtTime;
  }

  public void setAppearedAtTime(OffsetDateTime appearedAtTime) {
    this.appearedAtTime = appearedAtTime;
  }


  public AlertProperties clearedAtSourceTime(OffsetDateTime clearedAtSourceTime) {
    this.clearedAtSourceTime = clearedAtSourceTime;
    return this;
  }

  /**
   * UTC time at which the alert was cleared on the source
   * @return clearedAtSourceTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getClearedAtSourceTime() {
    return clearedAtSourceTime;
  }

  public void setClearedAtSourceTime(OffsetDateTime clearedAtSourceTime) {
    this.clearedAtSourceTime = clearedAtSourceTime;
  }


  public AlertProperties clearedAtTime(OffsetDateTime clearedAtTime) {
    this.clearedAtTime = clearedAtTime;
    return this;
  }

  /**
   * UTC time at which the alert got cleared
   * @return clearedAtTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getClearedAtTime() {
    return clearedAtTime;
  }

  public void setClearedAtTime(OffsetDateTime clearedAtTime) {
    this.clearedAtTime = clearedAtTime;
  }


  public AlertProperties detailedInformation(Map<String, String> detailedInformation) {
    this.detailedInformation = detailedInformation;
    return this;
  }

  public AlertProperties putDetailedInformationItem(String key, String detailedInformationItem) {
    if (this.detailedInformation == null) {
      this.detailedInformation = new HashMap<>();
    }
    this.detailedInformation.put(key, detailedInformationItem);
    return this;
  }

  /**
   * Other information about the alert
   * @return detailedInformation
   */
  @javax.annotation.Nullable
  public Map<String, String> getDetailedInformation() {
    return detailedInformation;
  }

  public void setDetailedInformation(Map<String, String> detailedInformation) {
    this.detailedInformation = detailedInformation;
  }


  public AlertProperties errorDetails(AlertErrorDetails errorDetails) {
    this.errorDetails = errorDetails;
    return this;
  }

  /**
   * Get errorDetails
   * @return errorDetails
   */
  @javax.annotation.Nullable
  public AlertErrorDetails getErrorDetails() {
    return errorDetails;
  }

  public void setErrorDetails(AlertErrorDetails errorDetails) {
    this.errorDetails = errorDetails;
  }


  public AlertProperties recommendation(String recommendation) {
    this.recommendation = recommendation;
    return this;
  }

  /**
   * Recommendation for acting on the alert
   * @return recommendation
   */
  @javax.annotation.Nullable
  public String getRecommendation() {
    return recommendation;
  }

  public void setRecommendation(String recommendation) {
    this.recommendation = recommendation;
  }


  public AlertProperties resolutionReason(String resolutionReason) {
    this.resolutionReason = resolutionReason;
    return this;
  }

  /**
   * Reason for resolving the alert
   * @return resolutionReason
   */
  @javax.annotation.Nullable
  public String getResolutionReason() {
    return resolutionReason;
  }

  public void setResolutionReason(String resolutionReason) {
    this.resolutionReason = resolutionReason;
  }


  public AlertProperties scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Device or Resource alert
   * @return scope
   */
  @javax.annotation.Nonnull
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }


  public AlertProperties severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Severity of the alert
   * @return severity
   */
  @javax.annotation.Nonnull
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public AlertProperties source(AlertSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public AlertSource getSource() {
    return source;
  }

  public void setSource(AlertSource source) {
    this.source = source;
  }


  public AlertProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of the alert
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public AlertProperties title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the alert
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertProperties alertProperties = (AlertProperties) o;
    return Objects.equals(this.alertType, alertProperties.alertType) &&
        Objects.equals(this.appearedAtSourceTime, alertProperties.appearedAtSourceTime) &&
        Objects.equals(this.appearedAtTime, alertProperties.appearedAtTime) &&
        Objects.equals(this.clearedAtSourceTime, alertProperties.clearedAtSourceTime) &&
        Objects.equals(this.clearedAtTime, alertProperties.clearedAtTime) &&
        Objects.equals(this.detailedInformation, alertProperties.detailedInformation) &&
        Objects.equals(this.errorDetails, alertProperties.errorDetails) &&
        Objects.equals(this.recommendation, alertProperties.recommendation) &&
        Objects.equals(this.resolutionReason, alertProperties.resolutionReason) &&
        Objects.equals(this.scope, alertProperties.scope) &&
        Objects.equals(this.severity, alertProperties.severity) &&
        Objects.equals(this.source, alertProperties.source) &&
        Objects.equals(this.status, alertProperties.status) &&
        Objects.equals(this.title, alertProperties.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertType, appearedAtSourceTime, appearedAtTime, clearedAtSourceTime, clearedAtTime, detailedInformation, errorDetails, recommendation, resolutionReason, scope, severity, source, status, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertProperties {\n");
    sb.append("    alertType: ").append(toIndentedString(alertType)).append("\n");
    sb.append("    appearedAtSourceTime: ").append(toIndentedString(appearedAtSourceTime)).append("\n");
    sb.append("    appearedAtTime: ").append(toIndentedString(appearedAtTime)).append("\n");
    sb.append("    clearedAtSourceTime: ").append(toIndentedString(clearedAtSourceTime)).append("\n");
    sb.append("    clearedAtTime: ").append(toIndentedString(clearedAtTime)).append("\n");
    sb.append("    detailedInformation: ").append(toIndentedString(detailedInformation)).append("\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("    recommendation: ").append(toIndentedString(recommendation)).append("\n");
    sb.append("    resolutionReason: ").append(toIndentedString(resolutionReason)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertType");
    openapiFields.add("appearedAtSourceTime");
    openapiFields.add("appearedAtTime");
    openapiFields.add("clearedAtSourceTime");
    openapiFields.add("clearedAtTime");
    openapiFields.add("detailedInformation");
    openapiFields.add("errorDetails");
    openapiFields.add("recommendation");
    openapiFields.add("resolutionReason");
    openapiFields.add("scope");
    openapiFields.add("severity");
    openapiFields.add("source");
    openapiFields.add("status");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("alertType");
    openapiRequiredFields.add("appearedAtSourceTime");
    openapiRequiredFields.add("appearedAtTime");
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("severity");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertProperties is not found in the empty JSON string", AlertProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AlertProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("alertType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertType").toString()));
      }
      // validate the optional field `errorDetails`
      if (jsonObj.get("errorDetails") != null && !jsonObj.get("errorDetails").isJsonNull()) {
        AlertErrorDetails.validateJsonElement(jsonObj.get("errorDetails"));
      }
      if ((jsonObj.get("recommendation") != null && !jsonObj.get("recommendation").isJsonNull()) && !jsonObj.get("recommendation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendation").toString()));
      }
      if ((jsonObj.get("resolutionReason") != null && !jsonObj.get("resolutionReason").isJsonNull()) && !jsonObj.get("resolutionReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolutionReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolutionReason").toString()));
      }
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      // validate the required field `scope`
      ScopeEnum.validateJsonElement(jsonObj.get("scope"));
      if (!jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the required field `severity`
      SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      // validate the required field `source`
      AlertSource.validateJsonElement(jsonObj.get("source"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertProperties>() {
           @Override
           public void write(JsonWriter out, AlertProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertProperties
   * @throws IOException if the JSON string is invalid with respect to AlertProperties
   */
  public static AlertProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertProperties.class);
  }

  /**
   * Convert an instance of AlertProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

