/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AsymmetricEncryptedSecret;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Storage account properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageAccountCredentialProperties {
  public static final String SERIALIZED_NAME_ACCESS_KEY = "accessKey";
  @SerializedName(SERIALIZED_NAME_ACCESS_KEY)
  private AsymmetricEncryptedSecret accessKey;

  /**
   * The cloud service provider
   */
  @JsonAdapter(CloudTypeEnum.Adapter.class)
  public enum CloudTypeEnum {
    AZURE("Azure"),
    
    S3("S3"),
    
    S3_RRS("S3_RRS"),
    
    OPEN_STACK("OpenStack"),
    
    HP("HP");

    private String value;

    CloudTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CloudTypeEnum fromValue(String value) {
      for (CloudTypeEnum b : CloudTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CloudTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CloudTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CloudTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CloudTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CloudTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLOUD_TYPE = "cloudType";
  @SerializedName(SERIALIZED_NAME_CLOUD_TYPE)
  private CloudTypeEnum cloudType;

  /**
   * SSL needs to be enabled or not
   */
  @JsonAdapter(EnableSSLEnum.Adapter.class)
  public enum EnableSSLEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    EnableSSLEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnableSSLEnum fromValue(String value) {
      for (EnableSSLEnum b : EnableSSLEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnableSSLEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnableSSLEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnableSSLEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnableSSLEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnableSSLEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENABLE_S_S_L = "enableSSL";
  @SerializedName(SERIALIZED_NAME_ENABLE_S_S_L)
  private EnableSSLEnum enableSSL;

  public static final String SERIALIZED_NAME_END_POINT = "endPoint";
  @SerializedName(SERIALIZED_NAME_END_POINT)
  private String endPoint;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public StorageAccountCredentialProperties() {
  }

  public StorageAccountCredentialProperties accessKey(AsymmetricEncryptedSecret accessKey) {
    this.accessKey = accessKey;
    return this;
  }

  /**
   * Get accessKey
   * @return accessKey
   */
  @javax.annotation.Nullable
  public AsymmetricEncryptedSecret getAccessKey() {
    return accessKey;
  }

  public void setAccessKey(AsymmetricEncryptedSecret accessKey) {
    this.accessKey = accessKey;
  }


  public StorageAccountCredentialProperties cloudType(CloudTypeEnum cloudType) {
    this.cloudType = cloudType;
    return this;
  }

  /**
   * The cloud service provider
   * @return cloudType
   */
  @javax.annotation.Nonnull
  public CloudTypeEnum getCloudType() {
    return cloudType;
  }

  public void setCloudType(CloudTypeEnum cloudType) {
    this.cloudType = cloudType;
  }


  public StorageAccountCredentialProperties enableSSL(EnableSSLEnum enableSSL) {
    this.enableSSL = enableSSL;
    return this;
  }

  /**
   * SSL needs to be enabled or not
   * @return enableSSL
   */
  @javax.annotation.Nonnull
  public EnableSSLEnum getEnableSSL() {
    return enableSSL;
  }

  public void setEnableSSL(EnableSSLEnum enableSSL) {
    this.enableSSL = enableSSL;
  }


  public StorageAccountCredentialProperties endPoint(String endPoint) {
    this.endPoint = endPoint;
    return this;
  }

  /**
   * The storage endpoint
   * @return endPoint
   */
  @javax.annotation.Nonnull
  public String getEndPoint() {
    return endPoint;
  }

  public void setEndPoint(String endPoint) {
    this.endPoint = endPoint;
  }


  public StorageAccountCredentialProperties location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The storage account&#39;s geo location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public StorageAccountCredentialProperties login(String login) {
    this.login = login;
    return this;
  }

  /**
   * The storage account login
   * @return login
   */
  @javax.annotation.Nonnull
  public String getLogin() {
    return login;
  }

  public void setLogin(String login) {
    this.login = login;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageAccountCredentialProperties storageAccountCredentialProperties = (StorageAccountCredentialProperties) o;
    return Objects.equals(this.accessKey, storageAccountCredentialProperties.accessKey) &&
        Objects.equals(this.cloudType, storageAccountCredentialProperties.cloudType) &&
        Objects.equals(this.enableSSL, storageAccountCredentialProperties.enableSSL) &&
        Objects.equals(this.endPoint, storageAccountCredentialProperties.endPoint) &&
        Objects.equals(this.location, storageAccountCredentialProperties.location) &&
        Objects.equals(this.login, storageAccountCredentialProperties.login);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessKey, cloudType, enableSSL, endPoint, location, login);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageAccountCredentialProperties {\n");
    sb.append("    accessKey: ").append(toIndentedString(accessKey)).append("\n");
    sb.append("    cloudType: ").append(toIndentedString(cloudType)).append("\n");
    sb.append("    enableSSL: ").append(toIndentedString(enableSSL)).append("\n");
    sb.append("    endPoint: ").append(toIndentedString(endPoint)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessKey");
    openapiFields.add("cloudType");
    openapiFields.add("enableSSL");
    openapiFields.add("endPoint");
    openapiFields.add("location");
    openapiFields.add("login");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cloudType");
    openapiRequiredFields.add("enableSSL");
    openapiRequiredFields.add("endPoint");
    openapiRequiredFields.add("login");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageAccountCredentialProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageAccountCredentialProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageAccountCredentialProperties is not found in the empty JSON string", StorageAccountCredentialProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageAccountCredentialProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageAccountCredentialProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StorageAccountCredentialProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessKey`
      if (jsonObj.get("accessKey") != null && !jsonObj.get("accessKey").isJsonNull()) {
        AsymmetricEncryptedSecret.validateJsonElement(jsonObj.get("accessKey"));
      }
      if (!jsonObj.get("cloudType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudType").toString()));
      }
      // validate the required field `cloudType`
      CloudTypeEnum.validateJsonElement(jsonObj.get("cloudType"));
      if (!jsonObj.get("enableSSL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableSSL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enableSSL").toString()));
      }
      // validate the required field `enableSSL`
      EnableSSLEnum.validateJsonElement(jsonObj.get("enableSSL"));
      if (!jsonObj.get("endPoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endPoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endPoint").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (!jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageAccountCredentialProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageAccountCredentialProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageAccountCredentialProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageAccountCredentialProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageAccountCredentialProperties>() {
           @Override
           public void write(JsonWriter out, StorageAccountCredentialProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageAccountCredentialProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageAccountCredentialProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageAccountCredentialProperties
   * @throws IOException if the JSON string is invalid with respect to StorageAccountCredentialProperties
   */
  public static StorageAccountCredentialProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageAccountCredentialProperties.class);
  }

  /**
   * Convert an instance of StorageAccountCredentialProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

