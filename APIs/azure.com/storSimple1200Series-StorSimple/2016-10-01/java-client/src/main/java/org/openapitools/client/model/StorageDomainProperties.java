/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AsymmetricEncryptedSecret;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The storage domain properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageDomainProperties {
  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private AsymmetricEncryptedSecret encryptionKey;

  /**
   * The encryption status \&quot;Enabled | Disabled\&quot;.
   */
  @JsonAdapter(EncryptionStatusEnum.Adapter.class)
  public enum EncryptionStatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    EncryptionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionStatusEnum fromValue(String value) {
      for (EncryptionStatusEnum b : EncryptionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_STATUS = "encryptionStatus";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_STATUS)
  private EncryptionStatusEnum encryptionStatus;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_CREDENTIAL_IDS = "storageAccountCredentialIds";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_CREDENTIAL_IDS)
  private List<String> storageAccountCredentialIds = new ArrayList<>();

  public StorageDomainProperties() {
  }

  public StorageDomainProperties encryptionKey(AsymmetricEncryptedSecret encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * Get encryptionKey
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public AsymmetricEncryptedSecret getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(AsymmetricEncryptedSecret encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public StorageDomainProperties encryptionStatus(EncryptionStatusEnum encryptionStatus) {
    this.encryptionStatus = encryptionStatus;
    return this;
  }

  /**
   * The encryption status \&quot;Enabled | Disabled\&quot;.
   * @return encryptionStatus
   */
  @javax.annotation.Nonnull
  public EncryptionStatusEnum getEncryptionStatus() {
    return encryptionStatus;
  }

  public void setEncryptionStatus(EncryptionStatusEnum encryptionStatus) {
    this.encryptionStatus = encryptionStatus;
  }


  public StorageDomainProperties storageAccountCredentialIds(List<String> storageAccountCredentialIds) {
    this.storageAccountCredentialIds = storageAccountCredentialIds;
    return this;
  }

  public StorageDomainProperties addStorageAccountCredentialIdsItem(String storageAccountCredentialIdsItem) {
    if (this.storageAccountCredentialIds == null) {
      this.storageAccountCredentialIds = new ArrayList<>();
    }
    this.storageAccountCredentialIds.add(storageAccountCredentialIdsItem);
    return this;
  }

  /**
   * The storage account credentials.
   * @return storageAccountCredentialIds
   */
  @javax.annotation.Nonnull
  public List<String> getStorageAccountCredentialIds() {
    return storageAccountCredentialIds;
  }

  public void setStorageAccountCredentialIds(List<String> storageAccountCredentialIds) {
    this.storageAccountCredentialIds = storageAccountCredentialIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageDomainProperties storageDomainProperties = (StorageDomainProperties) o;
    return Objects.equals(this.encryptionKey, storageDomainProperties.encryptionKey) &&
        Objects.equals(this.encryptionStatus, storageDomainProperties.encryptionStatus) &&
        Objects.equals(this.storageAccountCredentialIds, storageDomainProperties.storageAccountCredentialIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptionKey, encryptionStatus, storageAccountCredentialIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageDomainProperties {\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    encryptionStatus: ").append(toIndentedString(encryptionStatus)).append("\n");
    sb.append("    storageAccountCredentialIds: ").append(toIndentedString(storageAccountCredentialIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryptionKey");
    openapiFields.add("encryptionStatus");
    openapiFields.add("storageAccountCredentialIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("encryptionStatus");
    openapiRequiredFields.add("storageAccountCredentialIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageDomainProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageDomainProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageDomainProperties is not found in the empty JSON string", StorageDomainProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageDomainProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageDomainProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StorageDomainProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `encryptionKey`
      if (jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) {
        AsymmetricEncryptedSecret.validateJsonElement(jsonObj.get("encryptionKey"));
      }
      if (!jsonObj.get("encryptionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionStatus").toString()));
      }
      // validate the required field `encryptionStatus`
      EncryptionStatusEnum.validateJsonElement(jsonObj.get("encryptionStatus"));
      // ensure the required json array is present
      if (jsonObj.get("storageAccountCredentialIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("storageAccountCredentialIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountCredentialIds` to be an array in the JSON string but got `%s`", jsonObj.get("storageAccountCredentialIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageDomainProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageDomainProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageDomainProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageDomainProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageDomainProperties>() {
           @Override
           public void write(JsonWriter out, StorageDomainProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageDomainProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageDomainProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageDomainProperties
   * @throws IOException if the JSON string is invalid with respect to StorageDomainProperties
   */
  public static StorageDomainProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageDomainProperties.class);
  }

  /**
   * Convert an instance of StorageDomainProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

