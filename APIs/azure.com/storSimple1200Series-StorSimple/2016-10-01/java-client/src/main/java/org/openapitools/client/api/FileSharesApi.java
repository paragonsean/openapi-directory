/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.FileShare;
import org.openapitools.client.model.FileShareList;
import org.openapitools.client.model.MetricDefinitionList;
import org.openapitools.client.model.MetricList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FileSharesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FileSharesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FileSharesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fileSharesCreateOrUpdate
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param fileShare The file share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the file share. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the file share. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesCreateOrUpdateCall(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, FileShare fileShare, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileShare;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "fileServerName" + "}", localVarApiClient.escapeString(fileServerName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileSharesCreateOrUpdateValidateBeforeCall(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, FileShare fileShare, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling fileSharesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'fileServerName' is set
        if (fileServerName == null) {
            throw new ApiException("Missing the required parameter 'fileServerName' when calling fileSharesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling fileSharesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling fileSharesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling fileSharesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling fileSharesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileSharesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'fileShare' is set
        if (fileShare == null) {
            throw new ApiException("Missing the required parameter 'fileShare' when calling fileSharesCreateOrUpdate(Async)");
        }

        return fileSharesCreateOrUpdateCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, fileShare, _callback);

    }

    /**
     * 
     * Creates or updates the file share.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param fileShare The file share. (required)
     * @return FileShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the file share. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the file share. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public FileShare fileSharesCreateOrUpdate(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, FileShare fileShare) throws ApiException {
        ApiResponse<FileShare> localVarResp = fileSharesCreateOrUpdateWithHttpInfo(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, fileShare);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the file share.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param fileShare The file share. (required)
     * @return ApiResponse&lt;FileShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the file share. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the file share. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileShare> fileSharesCreateOrUpdateWithHttpInfo(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, FileShare fileShare) throws ApiException {
        okhttp3.Call localVarCall = fileSharesCreateOrUpdateValidateBeforeCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, fileShare, null);
        Type localVarReturnType = new TypeToken<FileShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the file share.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param fileShare The file share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the file share. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the file share. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesCreateOrUpdateAsync(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, FileShare fileShare, final ApiCallback<FileShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileSharesCreateOrUpdateValidateBeforeCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, fileShare, _callback);
        Type localVarReturnType = new TypeToken<FileShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileSharesDelete
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share Name (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the file share. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the file share. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesDeleteCall(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "fileServerName" + "}", localVarApiClient.escapeString(fileServerName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileSharesDeleteValidateBeforeCall(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling fileSharesDelete(Async)");
        }

        // verify the required parameter 'fileServerName' is set
        if (fileServerName == null) {
            throw new ApiException("Missing the required parameter 'fileServerName' when calling fileSharesDelete(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling fileSharesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling fileSharesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling fileSharesDelete(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling fileSharesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileSharesDelete(Async)");
        }

        return fileSharesDeleteCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the file share.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share Name (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the file share. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the file share. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public void fileSharesDelete(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        fileSharesDeleteWithHttpInfo(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion);
    }

    /**
     * 
     * Deletes the file share.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share Name (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the file share. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the file share. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fileSharesDeleteWithHttpInfo(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = fileSharesDeleteValidateBeforeCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the file share.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share Name (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the file share. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the file share. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesDeleteAsync(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileSharesDeleteValidateBeforeCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileSharesGet
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file share. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesGetCall(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "fileServerName" + "}", localVarApiClient.escapeString(fileServerName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileSharesGetValidateBeforeCall(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling fileSharesGet(Async)");
        }

        // verify the required parameter 'fileServerName' is set
        if (fileServerName == null) {
            throw new ApiException("Missing the required parameter 'fileServerName' when calling fileSharesGet(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling fileSharesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling fileSharesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling fileSharesGet(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling fileSharesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileSharesGet(Async)");
        }

        return fileSharesGetCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Returns the properties of the specified file share name.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return FileShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file share. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public FileShare fileSharesGet(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        ApiResponse<FileShare> localVarResp = fileSharesGetWithHttpInfo(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the properties of the specified file share name.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;FileShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file share. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileShare> fileSharesGetWithHttpInfo(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = fileSharesGetValidateBeforeCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<FileShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the properties of the specified file share name.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file share. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesGetAsync(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<FileShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileSharesGetValidateBeforeCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FileShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileSharesListByDevice
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of file shares. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesListByDeviceCall(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/shares"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileSharesListByDeviceValidateBeforeCall(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling fileSharesListByDevice(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling fileSharesListByDevice(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling fileSharesListByDevice(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling fileSharesListByDevice(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileSharesListByDevice(Async)");
        }

        return fileSharesListByDeviceCall(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves all the file shares in a device.
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return FileShareList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of file shares. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public FileShareList fileSharesListByDevice(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        ApiResponse<FileShareList> localVarResp = fileSharesListByDeviceWithHttpInfo(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves all the file shares in a device.
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;FileShareList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of file shares. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileShareList> fileSharesListByDeviceWithHttpInfo(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = fileSharesListByDeviceValidateBeforeCall(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<FileShareList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves all the file shares in a device.
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of file shares. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesListByDeviceAsync(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<FileShareList> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileSharesListByDeviceValidateBeforeCall(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FileShareList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileSharesListByFileServer
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of file shares. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesListByFileServerCall(String deviceName, String fileServerName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "fileServerName" + "}", localVarApiClient.escapeString(fileServerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileSharesListByFileServerValidateBeforeCall(String deviceName, String fileServerName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling fileSharesListByFileServer(Async)");
        }

        // verify the required parameter 'fileServerName' is set
        if (fileServerName == null) {
            throw new ApiException("Missing the required parameter 'fileServerName' when calling fileSharesListByFileServer(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling fileSharesListByFileServer(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling fileSharesListByFileServer(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling fileSharesListByFileServer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileSharesListByFileServer(Async)");
        }

        return fileSharesListByFileServerCall(deviceName, fileServerName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves all the file shares in a file server.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return FileShareList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of file shares. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public FileShareList fileSharesListByFileServer(String deviceName, String fileServerName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        ApiResponse<FileShareList> localVarResp = fileSharesListByFileServerWithHttpInfo(deviceName, fileServerName, subscriptionId, resourceGroupName, managerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves all the file shares in a file server.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;FileShareList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of file shares. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileShareList> fileSharesListByFileServerWithHttpInfo(String deviceName, String fileServerName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = fileSharesListByFileServerValidateBeforeCall(deviceName, fileServerName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<FileShareList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves all the file shares in a file server.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of file shares. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesListByFileServerAsync(String deviceName, String fileServerName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<FileShareList> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileSharesListByFileServerValidateBeforeCall(deviceName, fileServerName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FileShareList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileSharesListMetricDefinition
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metric definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesListMetricDefinitionCall(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}/metricsDefinitions"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "fileServerName" + "}", localVarApiClient.escapeString(fileServerName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileSharesListMetricDefinitionValidateBeforeCall(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling fileSharesListMetricDefinition(Async)");
        }

        // verify the required parameter 'fileServerName' is set
        if (fileServerName == null) {
            throw new ApiException("Missing the required parameter 'fileServerName' when calling fileSharesListMetricDefinition(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling fileSharesListMetricDefinition(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling fileSharesListMetricDefinition(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling fileSharesListMetricDefinition(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling fileSharesListMetricDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileSharesListMetricDefinition(Async)");
        }

        return fileSharesListMetricDefinitionCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves metric definitions of all metrics aggregated at the file share.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return MetricDefinitionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metric definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinitionList fileSharesListMetricDefinition(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinitionList> localVarResp = fileSharesListMetricDefinitionWithHttpInfo(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves metric definitions of all metrics aggregated at the file share.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;MetricDefinitionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metric definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinitionList> fileSharesListMetricDefinitionWithHttpInfo(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = fileSharesListMetricDefinitionValidateBeforeCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinitionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves metric definitions of all metrics aggregated at the file share.
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metric definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesListMetricDefinitionAsync(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<MetricDefinitionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileSharesListMetricDefinitionValidateBeforeCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinitionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileSharesListMetrics
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metrics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesListMetricsCall(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}/metrics"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "fileServerName" + "}", localVarApiClient.escapeString(fileServerName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileSharesListMetricsValidateBeforeCall(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling fileSharesListMetrics(Async)");
        }

        // verify the required parameter 'fileServerName' is set
        if (fileServerName == null) {
            throw new ApiException("Missing the required parameter 'fileServerName' when calling fileSharesListMetrics(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling fileSharesListMetrics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling fileSharesListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling fileSharesListMetrics(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling fileSharesListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileSharesListMetrics(Async)");
        }

        return fileSharesListMetricsCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Gets the file share metrics
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param $filter OData Filter options (optional)
     * @return MetricList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metrics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public MetricList fileSharesListMetrics(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<MetricList> localVarResp = fileSharesListMetricsWithHttpInfo(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the file share metrics
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param $filter OData Filter options (optional)
     * @return ApiResponse&lt;MetricList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metrics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricList> fileSharesListMetricsWithHttpInfo(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = fileSharesListMetricsValidateBeforeCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<MetricList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the file share metrics
     * @param deviceName The device name. (required)
     * @param fileServerName The file server name. (required)
     * @param shareName The file share name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metrics. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileSharesListMetricsAsync(String deviceName, String fileServerName, String shareName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter, final ApiCallback<MetricList> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileSharesListMetricsValidateBeforeCall(deviceName, fileServerName, shareName, subscriptionId, resourceGroupName, managerName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<MetricList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
