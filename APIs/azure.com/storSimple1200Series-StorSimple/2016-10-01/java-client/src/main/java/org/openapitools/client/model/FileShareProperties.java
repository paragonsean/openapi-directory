/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The File Share.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileShareProperties {
  public static final String SERIALIZED_NAME_ADMIN_USER = "adminUser";
  @SerializedName(SERIALIZED_NAME_ADMIN_USER)
  private String adminUser;

  /**
   * The data policy
   */
  @JsonAdapter(DataPolicyEnum.Adapter.class)
  public enum DataPolicyEnum {
    INVALID("Invalid"),
    
    LOCAL("Local"),
    
    TIERED("Tiered"),
    
    CLOUD("Cloud");

    private String value;

    DataPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataPolicyEnum fromValue(String value) {
      for (DataPolicyEnum b : DataPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_POLICY = "dataPolicy";
  @SerializedName(SERIALIZED_NAME_DATA_POLICY)
  private DataPolicyEnum dataPolicy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LOCAL_USED_CAPACITY_IN_BYTES = "localUsedCapacityInBytes";
  @SerializedName(SERIALIZED_NAME_LOCAL_USED_CAPACITY_IN_BYTES)
  private Long localUsedCapacityInBytes;

  /**
   * The monitoring status
   */
  @JsonAdapter(MonitoringStatusEnum.Adapter.class)
  public enum MonitoringStatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    MonitoringStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonitoringStatusEnum fromValue(String value) {
      for (MonitoringStatusEnum b : MonitoringStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MonitoringStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonitoringStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonitoringStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MonitoringStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MonitoringStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MONITORING_STATUS = "monitoringStatus";
  @SerializedName(SERIALIZED_NAME_MONITORING_STATUS)
  private MonitoringStatusEnum monitoringStatus;

  public static final String SERIALIZED_NAME_PROVISIONED_CAPACITY_IN_BYTES = "provisionedCapacityInBytes";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_CAPACITY_IN_BYTES)
  private Long provisionedCapacityInBytes;

  /**
   * The Share Status
   */
  @JsonAdapter(ShareStatusEnum.Adapter.class)
  public enum ShareStatusEnum {
    ONLINE("Online"),
    
    OFFLINE("Offline");

    private String value;

    ShareStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShareStatusEnum fromValue(String value) {
      for (ShareStatusEnum b : ShareStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShareStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShareStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShareStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShareStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShareStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHARE_STATUS = "shareStatus";
  @SerializedName(SERIALIZED_NAME_SHARE_STATUS)
  private ShareStatusEnum shareStatus;

  public static final String SERIALIZED_NAME_USED_CAPACITY_IN_BYTES = "usedCapacityInBytes";
  @SerializedName(SERIALIZED_NAME_USED_CAPACITY_IN_BYTES)
  private Long usedCapacityInBytes;

  public FileShareProperties() {
  }

  public FileShareProperties(
     Long localUsedCapacityInBytes, 
     Long usedCapacityInBytes
  ) {
    this();
    this.localUsedCapacityInBytes = localUsedCapacityInBytes;
    this.usedCapacityInBytes = usedCapacityInBytes;
  }

  public FileShareProperties adminUser(String adminUser) {
    this.adminUser = adminUser;
    return this;
  }

  /**
   * The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\\xyz.
   * @return adminUser
   */
  @javax.annotation.Nonnull
  public String getAdminUser() {
    return adminUser;
  }

  public void setAdminUser(String adminUser) {
    this.adminUser = adminUser;
  }


  public FileShareProperties dataPolicy(DataPolicyEnum dataPolicy) {
    this.dataPolicy = dataPolicy;
    return this;
  }

  /**
   * The data policy
   * @return dataPolicy
   */
  @javax.annotation.Nonnull
  public DataPolicyEnum getDataPolicy() {
    return dataPolicy;
  }

  public void setDataPolicy(DataPolicyEnum dataPolicy) {
    this.dataPolicy = dataPolicy;
  }


  public FileShareProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description for file share
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * The local used capacity in Bytes.
   * @return localUsedCapacityInBytes
   */
  @javax.annotation.Nullable
  public Long getLocalUsedCapacityInBytes() {
    return localUsedCapacityInBytes;
  }



  public FileShareProperties monitoringStatus(MonitoringStatusEnum monitoringStatus) {
    this.monitoringStatus = monitoringStatus;
    return this;
  }

  /**
   * The monitoring status
   * @return monitoringStatus
   */
  @javax.annotation.Nonnull
  public MonitoringStatusEnum getMonitoringStatus() {
    return monitoringStatus;
  }

  public void setMonitoringStatus(MonitoringStatusEnum monitoringStatus) {
    this.monitoringStatus = monitoringStatus;
  }


  public FileShareProperties provisionedCapacityInBytes(Long provisionedCapacityInBytes) {
    this.provisionedCapacityInBytes = provisionedCapacityInBytes;
    return this;
  }

  /**
   * The total provisioned capacity in Bytes
   * @return provisionedCapacityInBytes
   */
  @javax.annotation.Nonnull
  public Long getProvisionedCapacityInBytes() {
    return provisionedCapacityInBytes;
  }

  public void setProvisionedCapacityInBytes(Long provisionedCapacityInBytes) {
    this.provisionedCapacityInBytes = provisionedCapacityInBytes;
  }


  public FileShareProperties shareStatus(ShareStatusEnum shareStatus) {
    this.shareStatus = shareStatus;
    return this;
  }

  /**
   * The Share Status
   * @return shareStatus
   */
  @javax.annotation.Nonnull
  public ShareStatusEnum getShareStatus() {
    return shareStatus;
  }

  public void setShareStatus(ShareStatusEnum shareStatus) {
    this.shareStatus = shareStatus;
  }


  /**
   * The used capacity in Bytes.
   * @return usedCapacityInBytes
   */
  @javax.annotation.Nullable
  public Long getUsedCapacityInBytes() {
    return usedCapacityInBytes;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileShareProperties fileShareProperties = (FileShareProperties) o;
    return Objects.equals(this.adminUser, fileShareProperties.adminUser) &&
        Objects.equals(this.dataPolicy, fileShareProperties.dataPolicy) &&
        Objects.equals(this.description, fileShareProperties.description) &&
        Objects.equals(this.localUsedCapacityInBytes, fileShareProperties.localUsedCapacityInBytes) &&
        Objects.equals(this.monitoringStatus, fileShareProperties.monitoringStatus) &&
        Objects.equals(this.provisionedCapacityInBytes, fileShareProperties.provisionedCapacityInBytes) &&
        Objects.equals(this.shareStatus, fileShareProperties.shareStatus) &&
        Objects.equals(this.usedCapacityInBytes, fileShareProperties.usedCapacityInBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminUser, dataPolicy, description, localUsedCapacityInBytes, monitoringStatus, provisionedCapacityInBytes, shareStatus, usedCapacityInBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileShareProperties {\n");
    sb.append("    adminUser: ").append(toIndentedString(adminUser)).append("\n");
    sb.append("    dataPolicy: ").append(toIndentedString(dataPolicy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    localUsedCapacityInBytes: ").append(toIndentedString(localUsedCapacityInBytes)).append("\n");
    sb.append("    monitoringStatus: ").append(toIndentedString(monitoringStatus)).append("\n");
    sb.append("    provisionedCapacityInBytes: ").append(toIndentedString(provisionedCapacityInBytes)).append("\n");
    sb.append("    shareStatus: ").append(toIndentedString(shareStatus)).append("\n");
    sb.append("    usedCapacityInBytes: ").append(toIndentedString(usedCapacityInBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminUser");
    openapiFields.add("dataPolicy");
    openapiFields.add("description");
    openapiFields.add("localUsedCapacityInBytes");
    openapiFields.add("monitoringStatus");
    openapiFields.add("provisionedCapacityInBytes");
    openapiFields.add("shareStatus");
    openapiFields.add("usedCapacityInBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("adminUser");
    openapiRequiredFields.add("dataPolicy");
    openapiRequiredFields.add("monitoringStatus");
    openapiRequiredFields.add("provisionedCapacityInBytes");
    openapiRequiredFields.add("shareStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileShareProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileShareProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileShareProperties is not found in the empty JSON string", FileShareProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileShareProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileShareProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FileShareProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("adminUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminUser").toString()));
      }
      if (!jsonObj.get("dataPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPolicy").toString()));
      }
      // validate the required field `dataPolicy`
      DataPolicyEnum.validateJsonElement(jsonObj.get("dataPolicy"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("monitoringStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitoringStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitoringStatus").toString()));
      }
      // validate the required field `monitoringStatus`
      MonitoringStatusEnum.validateJsonElement(jsonObj.get("monitoringStatus"));
      if (!jsonObj.get("shareStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareStatus").toString()));
      }
      // validate the required field `shareStatus`
      ShareStatusEnum.validateJsonElement(jsonObj.get("shareStatus"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileShareProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileShareProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileShareProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileShareProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<FileShareProperties>() {
           @Override
           public void write(JsonWriter out, FileShareProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileShareProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileShareProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileShareProperties
   * @throws IOException if the JSON string is invalid with respect to FileShareProperties
   */
  public static FileShareProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileShareProperties.class);
  }

  /**
   * Convert an instance of FileShareProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

