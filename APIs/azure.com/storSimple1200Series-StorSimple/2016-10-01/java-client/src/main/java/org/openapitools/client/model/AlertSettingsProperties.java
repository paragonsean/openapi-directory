/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class containing the properties of AlertSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertSettingsProperties {
  public static final String SERIALIZED_NAME_ADDITIONAL_RECIPIENT_EMAIL_LIST = "additionalRecipientEmailList";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_RECIPIENT_EMAIL_LIST)
  private List<String> additionalRecipientEmailList = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALERT_NOTIFICATION_CULTURE = "alertNotificationCulture";
  @SerializedName(SERIALIZED_NAME_ALERT_NOTIFICATION_CULTURE)
  private String alertNotificationCulture;

  /**
   * Value indicating whether user/admins will receive emails when an alert condition occurs on the system
   */
  @JsonAdapter(EmailNotificationEnum.Adapter.class)
  public enum EmailNotificationEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    EmailNotificationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmailNotificationEnum fromValue(String value) {
      for (EmailNotificationEnum b : EmailNotificationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmailNotificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmailNotificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmailNotificationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmailNotificationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EmailNotificationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EMAIL_NOTIFICATION = "emailNotification";
  @SerializedName(SERIALIZED_NAME_EMAIL_NOTIFICATION)
  private EmailNotificationEnum emailNotification;

  /**
   * Value indicating whether service owners will receive emails when an alert condition occurs on the system. Applicable only if emailNotification flag is Enabled.
   */
  @JsonAdapter(NotificationToServiceOwnersEnum.Adapter.class)
  public enum NotificationToServiceOwnersEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    NotificationToServiceOwnersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NotificationToServiceOwnersEnum fromValue(String value) {
      for (NotificationToServiceOwnersEnum b : NotificationToServiceOwnersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NotificationToServiceOwnersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotificationToServiceOwnersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NotificationToServiceOwnersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NotificationToServiceOwnersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NotificationToServiceOwnersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NOTIFICATION_TO_SERVICE_OWNERS = "notificationToServiceOwners";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TO_SERVICE_OWNERS)
  private NotificationToServiceOwnersEnum notificationToServiceOwners;

  public AlertSettingsProperties() {
  }

  public AlertSettingsProperties additionalRecipientEmailList(List<String> additionalRecipientEmailList) {
    this.additionalRecipientEmailList = additionalRecipientEmailList;
    return this;
  }

  public AlertSettingsProperties addAdditionalRecipientEmailListItem(String additionalRecipientEmailListItem) {
    if (this.additionalRecipientEmailList == null) {
      this.additionalRecipientEmailList = new ArrayList<>();
    }
    this.additionalRecipientEmailList.add(additionalRecipientEmailListItem);
    return this;
  }

  /**
   * List of email addresses (apart from admin/co-admin of subscription) to whom the alert emails need to be sent
   * @return additionalRecipientEmailList
   */
  @javax.annotation.Nullable
  public List<String> getAdditionalRecipientEmailList() {
    return additionalRecipientEmailList;
  }

  public void setAdditionalRecipientEmailList(List<String> additionalRecipientEmailList) {
    this.additionalRecipientEmailList = additionalRecipientEmailList;
  }


  public AlertSettingsProperties alertNotificationCulture(String alertNotificationCulture) {
    this.alertNotificationCulture = alertNotificationCulture;
    return this;
  }

  /**
   * Culture setting to be used while building alert emails. For eg: \&quot;en-US\&quot;
   * @return alertNotificationCulture
   */
  @javax.annotation.Nonnull
  public String getAlertNotificationCulture() {
    return alertNotificationCulture;
  }

  public void setAlertNotificationCulture(String alertNotificationCulture) {
    this.alertNotificationCulture = alertNotificationCulture;
  }


  public AlertSettingsProperties emailNotification(EmailNotificationEnum emailNotification) {
    this.emailNotification = emailNotification;
    return this;
  }

  /**
   * Value indicating whether user/admins will receive emails when an alert condition occurs on the system
   * @return emailNotification
   */
  @javax.annotation.Nonnull
  public EmailNotificationEnum getEmailNotification() {
    return emailNotification;
  }

  public void setEmailNotification(EmailNotificationEnum emailNotification) {
    this.emailNotification = emailNotification;
  }


  public AlertSettingsProperties notificationToServiceOwners(NotificationToServiceOwnersEnum notificationToServiceOwners) {
    this.notificationToServiceOwners = notificationToServiceOwners;
    return this;
  }

  /**
   * Value indicating whether service owners will receive emails when an alert condition occurs on the system. Applicable only if emailNotification flag is Enabled.
   * @return notificationToServiceOwners
   */
  @javax.annotation.Nonnull
  public NotificationToServiceOwnersEnum getNotificationToServiceOwners() {
    return notificationToServiceOwners;
  }

  public void setNotificationToServiceOwners(NotificationToServiceOwnersEnum notificationToServiceOwners) {
    this.notificationToServiceOwners = notificationToServiceOwners;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertSettingsProperties alertSettingsProperties = (AlertSettingsProperties) o;
    return Objects.equals(this.additionalRecipientEmailList, alertSettingsProperties.additionalRecipientEmailList) &&
        Objects.equals(this.alertNotificationCulture, alertSettingsProperties.alertNotificationCulture) &&
        Objects.equals(this.emailNotification, alertSettingsProperties.emailNotification) &&
        Objects.equals(this.notificationToServiceOwners, alertSettingsProperties.notificationToServiceOwners);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalRecipientEmailList, alertNotificationCulture, emailNotification, notificationToServiceOwners);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertSettingsProperties {\n");
    sb.append("    additionalRecipientEmailList: ").append(toIndentedString(additionalRecipientEmailList)).append("\n");
    sb.append("    alertNotificationCulture: ").append(toIndentedString(alertNotificationCulture)).append("\n");
    sb.append("    emailNotification: ").append(toIndentedString(emailNotification)).append("\n");
    sb.append("    notificationToServiceOwners: ").append(toIndentedString(notificationToServiceOwners)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalRecipientEmailList");
    openapiFields.add("alertNotificationCulture");
    openapiFields.add("emailNotification");
    openapiFields.add("notificationToServiceOwners");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("alertNotificationCulture");
    openapiRequiredFields.add("emailNotification");
    openapiRequiredFields.add("notificationToServiceOwners");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertSettingsProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertSettingsProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertSettingsProperties is not found in the empty JSON string", AlertSettingsProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertSettingsProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertSettingsProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AlertSettingsProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("additionalRecipientEmailList") != null && !jsonObj.get("additionalRecipientEmailList").isJsonNull() && !jsonObj.get("additionalRecipientEmailList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalRecipientEmailList` to be an array in the JSON string but got `%s`", jsonObj.get("additionalRecipientEmailList").toString()));
      }
      if (!jsonObj.get("alertNotificationCulture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertNotificationCulture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertNotificationCulture").toString()));
      }
      if (!jsonObj.get("emailNotification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailNotification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailNotification").toString()));
      }
      // validate the required field `emailNotification`
      EmailNotificationEnum.validateJsonElement(jsonObj.get("emailNotification"));
      if (!jsonObj.get("notificationToServiceOwners").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationToServiceOwners` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationToServiceOwners").toString()));
      }
      // validate the required field `notificationToServiceOwners`
      NotificationToServiceOwnersEnum.validateJsonElement(jsonObj.get("notificationToServiceOwners"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertSettingsProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertSettingsProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertSettingsProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertSettingsProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertSettingsProperties>() {
           @Override
           public void write(JsonWriter out, AlertSettingsProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertSettingsProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertSettingsProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertSettingsProperties
   * @throws IOException if the JSON string is invalid with respect to AlertSettingsProperties
   */
  public static AlertSettingsProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertSettingsProperties.class);
  }

  /**
   * Convert an instance of AlertSettingsProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

