/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the ManagerExtendedInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:49.197978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagerExtendedInfoProperties {
  public static final String SERIALIZED_NAME_ALGORITHM = "algorithm";
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  private String algorithm;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private String encryptionKey;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY_THUMBPRINT = "encryptionKeyThumbprint";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY_THUMBPRINT)
  private String encryptionKeyThumbprint;

  public static final String SERIALIZED_NAME_INTEGRITY_KEY = "integrityKey";
  @SerializedName(SERIALIZED_NAME_INTEGRITY_KEY)
  private String integrityKey;

  public static final String SERIALIZED_NAME_PORTAL_CERTIFICATE_THUMBPRINT = "portalCertificateThumbprint";
  @SerializedName(SERIALIZED_NAME_PORTAL_CERTIFICATE_THUMBPRINT)
  private String portalCertificateThumbprint;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ManagerExtendedInfoProperties() {
  }

  public ManagerExtendedInfoProperties algorithm(String algorithm) {
    this.algorithm = algorithm;
    return this;
  }

  /**
   * Represents the encryption algorithm used to encrypt the other keys. None - if EncryptionKey is saved in plain text format. AlgorithmName - if encryption is used
   * @return algorithm
   */
  @javax.annotation.Nonnull
  public String getAlgorithm() {
    return algorithm;
  }

  public void setAlgorithm(String algorithm) {
    this.algorithm = algorithm;
  }


  public ManagerExtendedInfoProperties encryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * Represents the CEK of the resource
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public String getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public ManagerExtendedInfoProperties encryptionKeyThumbprint(String encryptionKeyThumbprint) {
    this.encryptionKeyThumbprint = encryptionKeyThumbprint;
    return this;
  }

  /**
   * Represents the Cert thumbprint that was used to encrypt the CEK
   * @return encryptionKeyThumbprint
   */
  @javax.annotation.Nullable
  public String getEncryptionKeyThumbprint() {
    return encryptionKeyThumbprint;
  }

  public void setEncryptionKeyThumbprint(String encryptionKeyThumbprint) {
    this.encryptionKeyThumbprint = encryptionKeyThumbprint;
  }


  public ManagerExtendedInfoProperties integrityKey(String integrityKey) {
    this.integrityKey = integrityKey;
    return this;
  }

  /**
   * Represents the CIK of the resource
   * @return integrityKey
   */
  @javax.annotation.Nonnull
  public String getIntegrityKey() {
    return integrityKey;
  }

  public void setIntegrityKey(String integrityKey) {
    this.integrityKey = integrityKey;
  }


  public ManagerExtendedInfoProperties portalCertificateThumbprint(String portalCertificateThumbprint) {
    this.portalCertificateThumbprint = portalCertificateThumbprint;
    return this;
  }

  /**
   * Represents the portal thumbprint which can be used optionally to encrypt the entire data before storing it.
   * @return portalCertificateThumbprint
   */
  @javax.annotation.Nullable
  public String getPortalCertificateThumbprint() {
    return portalCertificateThumbprint;
  }

  public void setPortalCertificateThumbprint(String portalCertificateThumbprint) {
    this.portalCertificateThumbprint = portalCertificateThumbprint;
  }


  public ManagerExtendedInfoProperties version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Represents the version of the ExtendedInfo object being persisted
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagerExtendedInfoProperties managerExtendedInfoProperties = (ManagerExtendedInfoProperties) o;
    return Objects.equals(this.algorithm, managerExtendedInfoProperties.algorithm) &&
        Objects.equals(this.encryptionKey, managerExtendedInfoProperties.encryptionKey) &&
        Objects.equals(this.encryptionKeyThumbprint, managerExtendedInfoProperties.encryptionKeyThumbprint) &&
        Objects.equals(this.integrityKey, managerExtendedInfoProperties.integrityKey) &&
        Objects.equals(this.portalCertificateThumbprint, managerExtendedInfoProperties.portalCertificateThumbprint) &&
        Objects.equals(this.version, managerExtendedInfoProperties.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithm, encryptionKey, encryptionKeyThumbprint, integrityKey, portalCertificateThumbprint, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagerExtendedInfoProperties {\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    encryptionKeyThumbprint: ").append(toIndentedString(encryptionKeyThumbprint)).append("\n");
    sb.append("    integrityKey: ").append(toIndentedString(integrityKey)).append("\n");
    sb.append("    portalCertificateThumbprint: ").append(toIndentedString(portalCertificateThumbprint)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algorithm");
    openapiFields.add("encryptionKey");
    openapiFields.add("encryptionKeyThumbprint");
    openapiFields.add("integrityKey");
    openapiFields.add("portalCertificateThumbprint");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("algorithm");
    openapiRequiredFields.add("integrityKey");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagerExtendedInfoProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagerExtendedInfoProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagerExtendedInfoProperties is not found in the empty JSON string", ManagerExtendedInfoProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagerExtendedInfoProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagerExtendedInfoProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ManagerExtendedInfoProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algorithm").toString()));
      }
      if ((jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) && !jsonObj.get("encryptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionKey").toString()));
      }
      if ((jsonObj.get("encryptionKeyThumbprint") != null && !jsonObj.get("encryptionKeyThumbprint").isJsonNull()) && !jsonObj.get("encryptionKeyThumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionKeyThumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionKeyThumbprint").toString()));
      }
      if (!jsonObj.get("integrityKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrityKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrityKey").toString()));
      }
      if ((jsonObj.get("portalCertificateThumbprint") != null && !jsonObj.get("portalCertificateThumbprint").isJsonNull()) && !jsonObj.get("portalCertificateThumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portalCertificateThumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portalCertificateThumbprint").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagerExtendedInfoProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagerExtendedInfoProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagerExtendedInfoProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagerExtendedInfoProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagerExtendedInfoProperties>() {
           @Override
           public void write(JsonWriter out, ManagerExtendedInfoProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagerExtendedInfoProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagerExtendedInfoProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagerExtendedInfoProperties
   * @throws IOException if the JSON string is invalid with respect to ManagerExtendedInfoProperties
   */
  public static ManagerExtendedInfoProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagerExtendedInfoProperties.class);
  }

  /**
   * Convert an instance of ManagerExtendedInfoProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

