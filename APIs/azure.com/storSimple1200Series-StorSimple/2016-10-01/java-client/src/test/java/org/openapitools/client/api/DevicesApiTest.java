/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AlertSettings;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceList;
import org.openapitools.client.model.DevicePatch;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FailoverRequest;
import org.openapitools.client.model.MetricDefinitionList;
import org.openapitools.client.model.MetricList;
import org.openapitools.client.model.NetworkSettings;
import org.openapitools.client.model.SecuritySettings;
import org.openapitools.client.model.TimeSettings;
import org.openapitools.client.model.Updates;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Disabled
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    /**
     * Creates or updates the alert settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesCreateOrUpdateAlertSettingsTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        AlertSettings alertSettings = null;
        AlertSettings response = api.devicesCreateOrUpdateAlertSettings(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, alertSettings);
        // TODO: test validations
    }

    /**
     * Creates or updates the security settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesCreateOrUpdateSecuritySettingsTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        SecuritySettings securitySettings = null;
        api.devicesCreateOrUpdateSecuritySettings(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, securitySettings);
        // TODO: test validations
    }

    /**
     * Deactivates the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesDeactivateTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.devicesDeactivate(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesDeleteTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.devicesDelete(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Downloads updates on the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesDownloadUpdatesTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.devicesDownloadUpdates(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Fails over the device to another device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesFailoverTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        FailoverRequest failoverRequest = null;
        api.devicesFailover(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, failoverRequest);
        // TODO: test validations
    }

    /**
     * Returns the properties of the specified device name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        String $expand = null;
        Device response = api.devicesGet(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, $expand);
        // TODO: test validations
    }

    /**
     * Returns the alert settings of the specified device name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetAlertSettingsTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        AlertSettings response = api.devicesGetAlertSettings(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns the network settings of the specified device name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetNetworkSettingsTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        NetworkSettings response = api.devicesGetNetworkSettings(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns the time settings of the specified device name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetTimeSettingsTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        TimeSettings response = api.devicesGetTimeSettings(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns the update summary of the specified device name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetUpdateSummaryTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        Updates response = api.devicesGetUpdateSummary(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Installs the updates on the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesInstallUpdatesTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.devicesInstallUpdates(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves all the devices in a manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListByManagerTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        String $expand = null;
        DeviceList response = api.devicesListByManager(subscriptionId, resourceGroupName, managerName, apiVersion, $expand);
        // TODO: test validations
    }

    /**
     * Retrieves all the devices which can be used as failover targets for the given device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListFailoverTargetTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        String $expand = null;
        DeviceList response = api.devicesListFailoverTarget(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, $expand);
        // TODO: test validations
    }

    /**
     * Retrieves metric definition of all metrics aggregated at device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListMetricDefinitionTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        MetricDefinitionList response = api.devicesListMetricDefinition(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the device metrics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListMetricsTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        String $filter = null;
        MetricList response = api.devicesListMetrics(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Patches the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesPatchTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        DevicePatch devicePatch = null;
        Device response = api.devicesPatch(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, devicePatch);
        // TODO: test validations
    }

    /**
     * Scans for updates on the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesScanForUpdatesTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.devicesScanForUpdates(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

}
