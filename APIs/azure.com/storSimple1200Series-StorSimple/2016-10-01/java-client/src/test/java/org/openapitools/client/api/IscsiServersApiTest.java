/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ISCSIServer;
import org.openapitools.client.model.ISCSIServerList;
import org.openapitools.client.model.MetricDefinitionList;
import org.openapitools.client.model.MetricList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IscsiServersApi
 */
@Disabled
public class IscsiServersApiTest {

    private final IscsiServersApi api = new IscsiServersApi();

    /**
     * Backup the iSCSI server now.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iscsiServersBackupNowTest() throws ApiException {
        String deviceName = null;
        String iscsiServerName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.iscsiServersBackupNow(deviceName, iscsiServerName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates or updates the iSCSI server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iscsiServersCreateOrUpdateTest() throws ApiException {
        String deviceName = null;
        String iscsiServerName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        ISCSIServer iscsiServer = null;
        ISCSIServer response = api.iscsiServersCreateOrUpdate(deviceName, iscsiServerName, subscriptionId, resourceGroupName, managerName, apiVersion, iscsiServer);
        // TODO: test validations
    }

    /**
     * Deletes the iSCSI server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iscsiServersDeleteTest() throws ApiException {
        String deviceName = null;
        String iscsiServerName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.iscsiServersDelete(deviceName, iscsiServerName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns the properties of the specified iSCSI server name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iscsiServersGetTest() throws ApiException {
        String deviceName = null;
        String iscsiServerName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        ISCSIServer response = api.iscsiServersGet(deviceName, iscsiServerName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves all the iSCSI in a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iscsiServersListByDeviceTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        ISCSIServerList response = api.iscsiServersListByDevice(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves all the iSCSI servers in a manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iscsiServersListByManagerTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        ISCSIServerList response = api.iscsiServersListByManager(subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves metric definitions for all metrics aggregated at iSCSI server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iscsiServersListMetricDefinitionTest() throws ApiException {
        String deviceName = null;
        String iscsiServerName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        MetricDefinitionList response = api.iscsiServersListMetricDefinition(deviceName, iscsiServerName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the iSCSI server metrics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iscsiServersListMetricsTest() throws ApiException {
        String deviceName = null;
        String iscsiServerName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        String $filter = null;
        MetricList response = api.iscsiServersListMetrics(deviceName, iscsiServerName, subscriptionId, resourceGroupName, managerName, apiVersion, $filter);
        // TODO: test validations
    }

}
