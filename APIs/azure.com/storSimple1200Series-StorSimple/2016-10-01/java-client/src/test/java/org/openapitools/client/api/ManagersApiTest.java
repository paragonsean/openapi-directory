/*
 * StorSimpleManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EncryptionSettings;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Manager;
import org.openapitools.client.model.ManagerExtendedInfo;
import org.openapitools.client.model.ManagerList;
import org.openapitools.client.model.ManagerPatch;
import org.openapitools.client.model.MetricDefinitionList;
import org.openapitools.client.model.MetricList;
import org.openapitools.client.model.SymmetricEncryptedSecret;
import org.openapitools.client.model.UploadCertificateRequest;
import org.openapitools.client.model.UploadCertificateResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagersApi
 */
@Disabled
public class ManagersApiTest {

    private final ManagersApi api = new ManagersApi();

    /**
     * Creates the extended info of the manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersCreateExtendedInfoTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        ManagerExtendedInfo managerExtendedInfo = null;
        ManagerExtendedInfo response = api.managersCreateExtendedInfo(subscriptionId, resourceGroupName, managerName, apiVersion, managerExtendedInfo);
        // TODO: test validations
    }

    /**
     * Creates or updates the manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        Manager manager = null;
        Manager response = api.managersCreateOrUpdate(subscriptionId, resourceGroupName, managerName, apiVersion, manager);
        // TODO: test validations
    }

    /**
     * Deletes the manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.managersDelete(subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes the extended info of the manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersDeleteExtendedInfoTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.managersDeleteExtendedInfo(subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns the properties of the specified manager name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        Manager response = api.managersGet(subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns the symmetric encryption key of the manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersGetEncryptionKeyTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        SymmetricEncryptedSecret response = api.managersGetEncryptionKey(subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns the encryption settings of the manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersGetEncryptionSettingsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        EncryptionSettings response = api.managersGetEncryptionSettings(subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns the extended information of the specified manager name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersGetExtendedInfoTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        ManagerExtendedInfo response = api.managersGetExtendedInfo(subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves all the managers in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ManagerList response = api.managersList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves all the managers in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        ManagerList response = api.managersListByResourceGroup(subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves metric definition of all metrics aggregated at manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersListMetricDefinitionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        MetricDefinitionList response = api.managersListMetricDefinition(subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the  manager metrics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersListMetricsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        String $filter = null;
        MetricList response = api.managersListMetrics(subscriptionId, resourceGroupName, managerName, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Updates the StorSimple Manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        ManagerPatch parameters = null;
        Manager response = api.managersUpdate(subscriptionId, resourceGroupName, managerName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Updates the extended info of the manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersUpdateExtendedInfoTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        String ifMatch = null;
        ManagerExtendedInfo managerExtendedInfo = null;
        ManagerExtendedInfo response = api.managersUpdateExtendedInfo(subscriptionId, resourceGroupName, managerName, apiVersion, ifMatch, managerExtendedInfo);
        // TODO: test validations
    }

    /**
     * Upload Vault Cred Certificate.  Returns UploadCertificateResponse
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managersUploadRegistrationCertificateTest() throws ApiException {
        String certificateName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        UploadCertificateRequest uploadCertificateRequestrequest = null;
        UploadCertificateResponse response = api.managersUploadRegistrationCertificate(certificateName, subscriptionId, resourceGroupName, managerName, apiVersion, uploadCertificateRequestrequest);
        // TODO: test validations
    }

}
