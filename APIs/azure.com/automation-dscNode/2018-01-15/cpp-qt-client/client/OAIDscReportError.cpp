/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDscReportError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDscReportError::OAIDscReportError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDscReportError::OAIDscReportError() {
    this->initializeModel();
}

OAIDscReportError::~OAIDscReportError() {}

void OAIDscReportError::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_details_isSet = false;
    m_error_details_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_source_isSet = false;
    m_error_source_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;
}

void OAIDscReportError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDscReportError::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_details_isValid = ::OpenAPI::fromJsonValue(m_error_details, json[QString("errorDetails")]);
    m_error_details_isSet = !json[QString("errorDetails")].isNull() && m_error_details_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_error_source_isValid = ::OpenAPI::fromJsonValue(m_error_source, json[QString("errorSource")]);
    m_error_source_isSet = !json[QString("errorSource")].isNull() && m_error_source_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;
}

QString OAIDscReportError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDscReportError::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_details_isSet) {
        obj.insert(QString("errorDetails"), ::OpenAPI::toJsonValue(m_error_details));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_source_isSet) {
        obj.insert(QString("errorSource"), ::OpenAPI::toJsonValue(m_error_source));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    return obj;
}

QString OAIDscReportError::getErrorCode() const {
    return m_error_code;
}
void OAIDscReportError::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIDscReportError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIDscReportError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIDscReportError::getErrorDetails() const {
    return m_error_details;
}
void OAIDscReportError::setErrorDetails(const QString &error_details) {
    m_error_details = error_details;
    m_error_details_isSet = true;
}

bool OAIDscReportError::is_error_details_Set() const{
    return m_error_details_isSet;
}

bool OAIDscReportError::is_error_details_Valid() const{
    return m_error_details_isValid;
}

QString OAIDscReportError::getErrorMessage() const {
    return m_error_message;
}
void OAIDscReportError::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIDscReportError::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIDscReportError::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIDscReportError::getErrorSource() const {
    return m_error_source;
}
void OAIDscReportError::setErrorSource(const QString &error_source) {
    m_error_source = error_source;
    m_error_source_isSet = true;
}

bool OAIDscReportError::is_error_source_Set() const{
    return m_error_source_isSet;
}

bool OAIDscReportError::is_error_source_Valid() const{
    return m_error_source_isValid;
}

QString OAIDscReportError::getLocale() const {
    return m_locale;
}
void OAIDscReportError::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIDscReportError::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIDscReportError::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIDscReportError::getResourceId() const {
    return m_resource_id;
}
void OAIDscReportError::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIDscReportError::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIDscReportError::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

bool OAIDscReportError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDscReportError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
