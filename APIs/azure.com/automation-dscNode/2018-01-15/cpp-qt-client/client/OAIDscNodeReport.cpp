/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDscNodeReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDscNodeReport::OAIDscNodeReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDscNodeReport::OAIDscNodeReport() {
    this->initializeModel();
}

OAIDscNodeReport::~OAIDscNodeReport() {}

void OAIDscNodeReport::initializeModel() {

    m_configuration_version_isSet = false;
    m_configuration_version_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_i_pv4_addresses_isSet = false;
    m_i_pv4_addresses_isValid = false;

    m_i_pv6_addresses_isSet = false;
    m_i_pv6_addresses_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_meta_configuration_isSet = false;
    m_meta_configuration_isValid = false;

    m_number_of_resources_isSet = false;
    m_number_of_resources_isValid = false;

    m_raw_errors_isSet = false;
    m_raw_errors_isValid = false;

    m_reboot_requested_isSet = false;
    m_reboot_requested_isValid = false;

    m_refresh_mode_isSet = false;
    m_refresh_mode_isValid = false;

    m_report_format_version_isSet = false;
    m_report_format_version_isValid = false;

    m_report_id_isSet = false;
    m_report_id_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDscNodeReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDscNodeReport::fromJsonObject(QJsonObject json) {

    m_configuration_version_isValid = ::OpenAPI::fromJsonValue(m_configuration_version, json[QString("configurationVersion")]);
    m_configuration_version_isSet = !json[QString("configurationVersion")].isNull() && m_configuration_version_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_i_pv4_addresses_isValid = ::OpenAPI::fromJsonValue(m_i_pv4_addresses, json[QString("iPV4Addresses")]);
    m_i_pv4_addresses_isSet = !json[QString("iPV4Addresses")].isNull() && m_i_pv4_addresses_isValid;

    m_i_pv6_addresses_isValid = ::OpenAPI::fromJsonValue(m_i_pv6_addresses, json[QString("iPV6Addresses")]);
    m_i_pv6_addresses_isSet = !json[QString("iPV6Addresses")].isNull() && m_i_pv6_addresses_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_meta_configuration_isValid = ::OpenAPI::fromJsonValue(m_meta_configuration, json[QString("metaConfiguration")]);
    m_meta_configuration_isSet = !json[QString("metaConfiguration")].isNull() && m_meta_configuration_isValid;

    m_number_of_resources_isValid = ::OpenAPI::fromJsonValue(m_number_of_resources, json[QString("numberOfResources")]);
    m_number_of_resources_isSet = !json[QString("numberOfResources")].isNull() && m_number_of_resources_isValid;

    m_raw_errors_isValid = ::OpenAPI::fromJsonValue(m_raw_errors, json[QString("rawErrors")]);
    m_raw_errors_isSet = !json[QString("rawErrors")].isNull() && m_raw_errors_isValid;

    m_reboot_requested_isValid = ::OpenAPI::fromJsonValue(m_reboot_requested, json[QString("rebootRequested")]);
    m_reboot_requested_isSet = !json[QString("rebootRequested")].isNull() && m_reboot_requested_isValid;

    m_refresh_mode_isValid = ::OpenAPI::fromJsonValue(m_refresh_mode, json[QString("refreshMode")]);
    m_refresh_mode_isSet = !json[QString("refreshMode")].isNull() && m_refresh_mode_isValid;

    m_report_format_version_isValid = ::OpenAPI::fromJsonValue(m_report_format_version, json[QString("reportFormatVersion")]);
    m_report_format_version_isSet = !json[QString("reportFormatVersion")].isNull() && m_report_format_version_isValid;

    m_report_id_isValid = ::OpenAPI::fromJsonValue(m_report_id, json[QString("reportId")]);
    m_report_id_isSet = !json[QString("reportId")].isNull() && m_report_id_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDscNodeReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDscNodeReport::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_version_isSet) {
        obj.insert(QString("configurationVersion"), ::OpenAPI::toJsonValue(m_configuration_version));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_i_pv4_addresses.size() > 0) {
        obj.insert(QString("iPV4Addresses"), ::OpenAPI::toJsonValue(m_i_pv4_addresses));
    }
    if (m_i_pv6_addresses.size() > 0) {
        obj.insert(QString("iPV6Addresses"), ::OpenAPI::toJsonValue(m_i_pv6_addresses));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_meta_configuration.isSet()) {
        obj.insert(QString("metaConfiguration"), ::OpenAPI::toJsonValue(m_meta_configuration));
    }
    if (m_number_of_resources_isSet) {
        obj.insert(QString("numberOfResources"), ::OpenAPI::toJsonValue(m_number_of_resources));
    }
    if (m_raw_errors_isSet) {
        obj.insert(QString("rawErrors"), ::OpenAPI::toJsonValue(m_raw_errors));
    }
    if (m_reboot_requested_isSet) {
        obj.insert(QString("rebootRequested"), ::OpenAPI::toJsonValue(m_reboot_requested));
    }
    if (m_refresh_mode_isSet) {
        obj.insert(QString("refreshMode"), ::OpenAPI::toJsonValue(m_refresh_mode));
    }
    if (m_report_format_version_isSet) {
        obj.insert(QString("reportFormatVersion"), ::OpenAPI::toJsonValue(m_report_format_version));
    }
    if (m_report_id_isSet) {
        obj.insert(QString("reportId"), ::OpenAPI::toJsonValue(m_report_id));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDscNodeReport::getConfigurationVersion() const {
    return m_configuration_version;
}
void OAIDscNodeReport::setConfigurationVersion(const QString &configuration_version) {
    m_configuration_version = configuration_version;
    m_configuration_version_isSet = true;
}

bool OAIDscNodeReport::is_configuration_version_Set() const{
    return m_configuration_version_isSet;
}

bool OAIDscNodeReport::is_configuration_version_Valid() const{
    return m_configuration_version_isValid;
}

QDateTime OAIDscNodeReport::getEndTime() const {
    return m_end_time;
}
void OAIDscNodeReport::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDscNodeReport::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDscNodeReport::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<OAIDscReportError> OAIDscNodeReport::getErrors() const {
    return m_errors;
}
void OAIDscNodeReport::setErrors(const QList<OAIDscReportError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIDscNodeReport::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIDscNodeReport::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIDscNodeReport::getHostName() const {
    return m_host_name;
}
void OAIDscNodeReport::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIDscNodeReport::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIDscNodeReport::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QList<QString> OAIDscNodeReport::getIPv4Addresses() const {
    return m_i_pv4_addresses;
}
void OAIDscNodeReport::setIPv4Addresses(const QList<QString> &i_pv4_addresses) {
    m_i_pv4_addresses = i_pv4_addresses;
    m_i_pv4_addresses_isSet = true;
}

bool OAIDscNodeReport::is_i_pv4_addresses_Set() const{
    return m_i_pv4_addresses_isSet;
}

bool OAIDscNodeReport::is_i_pv4_addresses_Valid() const{
    return m_i_pv4_addresses_isValid;
}

QList<QString> OAIDscNodeReport::getIPv6Addresses() const {
    return m_i_pv6_addresses;
}
void OAIDscNodeReport::setIPv6Addresses(const QList<QString> &i_pv6_addresses) {
    m_i_pv6_addresses = i_pv6_addresses;
    m_i_pv6_addresses_isSet = true;
}

bool OAIDscNodeReport::is_i_pv6_addresses_Set() const{
    return m_i_pv6_addresses_isSet;
}

bool OAIDscNodeReport::is_i_pv6_addresses_Valid() const{
    return m_i_pv6_addresses_isValid;
}

QString OAIDscNodeReport::getId() const {
    return m_id;
}
void OAIDscNodeReport::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDscNodeReport::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDscNodeReport::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIDscNodeReport::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDscNodeReport::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDscNodeReport::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDscNodeReport::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAIDscMetaConfiguration OAIDscNodeReport::getMetaConfiguration() const {
    return m_meta_configuration;
}
void OAIDscNodeReport::setMetaConfiguration(const OAIDscMetaConfiguration &meta_configuration) {
    m_meta_configuration = meta_configuration;
    m_meta_configuration_isSet = true;
}

bool OAIDscNodeReport::is_meta_configuration_Set() const{
    return m_meta_configuration_isSet;
}

bool OAIDscNodeReport::is_meta_configuration_Valid() const{
    return m_meta_configuration_isValid;
}

qint32 OAIDscNodeReport::getNumberOfResources() const {
    return m_number_of_resources;
}
void OAIDscNodeReport::setNumberOfResources(const qint32 &number_of_resources) {
    m_number_of_resources = number_of_resources;
    m_number_of_resources_isSet = true;
}

bool OAIDscNodeReport::is_number_of_resources_Set() const{
    return m_number_of_resources_isSet;
}

bool OAIDscNodeReport::is_number_of_resources_Valid() const{
    return m_number_of_resources_isValid;
}

QString OAIDscNodeReport::getRawErrors() const {
    return m_raw_errors;
}
void OAIDscNodeReport::setRawErrors(const QString &raw_errors) {
    m_raw_errors = raw_errors;
    m_raw_errors_isSet = true;
}

bool OAIDscNodeReport::is_raw_errors_Set() const{
    return m_raw_errors_isSet;
}

bool OAIDscNodeReport::is_raw_errors_Valid() const{
    return m_raw_errors_isValid;
}

QString OAIDscNodeReport::getRebootRequested() const {
    return m_reboot_requested;
}
void OAIDscNodeReport::setRebootRequested(const QString &reboot_requested) {
    m_reboot_requested = reboot_requested;
    m_reboot_requested_isSet = true;
}

bool OAIDscNodeReport::is_reboot_requested_Set() const{
    return m_reboot_requested_isSet;
}

bool OAIDscNodeReport::is_reboot_requested_Valid() const{
    return m_reboot_requested_isValid;
}

QString OAIDscNodeReport::getRefreshMode() const {
    return m_refresh_mode;
}
void OAIDscNodeReport::setRefreshMode(const QString &refresh_mode) {
    m_refresh_mode = refresh_mode;
    m_refresh_mode_isSet = true;
}

bool OAIDscNodeReport::is_refresh_mode_Set() const{
    return m_refresh_mode_isSet;
}

bool OAIDscNodeReport::is_refresh_mode_Valid() const{
    return m_refresh_mode_isValid;
}

QString OAIDscNodeReport::getReportFormatVersion() const {
    return m_report_format_version;
}
void OAIDscNodeReport::setReportFormatVersion(const QString &report_format_version) {
    m_report_format_version = report_format_version;
    m_report_format_version_isSet = true;
}

bool OAIDscNodeReport::is_report_format_version_Set() const{
    return m_report_format_version_isSet;
}

bool OAIDscNodeReport::is_report_format_version_Valid() const{
    return m_report_format_version_isValid;
}

QString OAIDscNodeReport::getReportId() const {
    return m_report_id;
}
void OAIDscNodeReport::setReportId(const QString &report_id) {
    m_report_id = report_id;
    m_report_id_isSet = true;
}

bool OAIDscNodeReport::is_report_id_Set() const{
    return m_report_id_isSet;
}

bool OAIDscNodeReport::is_report_id_Valid() const{
    return m_report_id_isValid;
}

QList<OAIDscReportResource> OAIDscNodeReport::getResources() const {
    return m_resources;
}
void OAIDscNodeReport::setResources(const QList<OAIDscReportResource> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIDscNodeReport::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIDscNodeReport::is_resources_Valid() const{
    return m_resources_isValid;
}

QDateTime OAIDscNodeReport::getStartTime() const {
    return m_start_time;
}
void OAIDscNodeReport::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDscNodeReport::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDscNodeReport::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIDscNodeReport::getStatus() const {
    return m_status;
}
void OAIDscNodeReport::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDscNodeReport::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDscNodeReport::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDscNodeReport::getType() const {
    return m_type;
}
void OAIDscNodeReport::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDscNodeReport::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDscNodeReport::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDscNodeReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_pv4_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_pv6_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_resources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reboot_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_format_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDscNodeReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
