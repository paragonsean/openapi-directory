/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDscReportResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDscReportResource::OAIDscReportResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDscReportResource::OAIDscReportResource() {
    this->initializeModel();
}

OAIDscReportResource::~OAIDscReportResource() {}

void OAIDscReportResource::initializeModel() {

    m_depends_on_isSet = false;
    m_depends_on_isValid = false;

    m_duration_in_seconds_isSet = false;
    m_duration_in_seconds_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_module_name_isSet = false;
    m_module_name_isValid = false;

    m_module_version_isSet = false;
    m_module_version_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_source_info_isSet = false;
    m_source_info_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDscReportResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDscReportResource::fromJsonObject(QJsonObject json) {

    m_depends_on_isValid = ::OpenAPI::fromJsonValue(m_depends_on, json[QString("dependsOn")]);
    m_depends_on_isSet = !json[QString("dependsOn")].isNull() && m_depends_on_isValid;

    m_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_in_seconds, json[QString("durationInSeconds")]);
    m_duration_in_seconds_isSet = !json[QString("durationInSeconds")].isNull() && m_duration_in_seconds_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_module_name_isValid = ::OpenAPI::fromJsonValue(m_module_name, json[QString("moduleName")]);
    m_module_name_isSet = !json[QString("moduleName")].isNull() && m_module_name_isValid;

    m_module_version_isValid = ::OpenAPI::fromJsonValue(m_module_version, json[QString("moduleVersion")]);
    m_module_version_isSet = !json[QString("moduleVersion")].isNull() && m_module_version_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_source_info_isValid = ::OpenAPI::fromJsonValue(m_source_info, json[QString("sourceInfo")]);
    m_source_info_isSet = !json[QString("sourceInfo")].isNull() && m_source_info_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDscReportResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDscReportResource::asJsonObject() const {
    QJsonObject obj;
    if (m_depends_on.size() > 0) {
        obj.insert(QString("dependsOn"), ::OpenAPI::toJsonValue(m_depends_on));
    }
    if (m_duration_in_seconds_isSet) {
        obj.insert(QString("durationInSeconds"), ::OpenAPI::toJsonValue(m_duration_in_seconds));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_module_name_isSet) {
        obj.insert(QString("moduleName"), ::OpenAPI::toJsonValue(m_module_name));
    }
    if (m_module_version_isSet) {
        obj.insert(QString("moduleVersion"), ::OpenAPI::toJsonValue(m_module_version));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_source_info_isSet) {
        obj.insert(QString("sourceInfo"), ::OpenAPI::toJsonValue(m_source_info));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAIDscReportResourceNavigation> OAIDscReportResource::getDependsOn() const {
    return m_depends_on;
}
void OAIDscReportResource::setDependsOn(const QList<OAIDscReportResourceNavigation> &depends_on) {
    m_depends_on = depends_on;
    m_depends_on_isSet = true;
}

bool OAIDscReportResource::is_depends_on_Set() const{
    return m_depends_on_isSet;
}

bool OAIDscReportResource::is_depends_on_Valid() const{
    return m_depends_on_isValid;
}

double OAIDscReportResource::getDurationInSeconds() const {
    return m_duration_in_seconds;
}
void OAIDscReportResource::setDurationInSeconds(const double &duration_in_seconds) {
    m_duration_in_seconds = duration_in_seconds;
    m_duration_in_seconds_isSet = true;
}

bool OAIDscReportResource::is_duration_in_seconds_Set() const{
    return m_duration_in_seconds_isSet;
}

bool OAIDscReportResource::is_duration_in_seconds_Valid() const{
    return m_duration_in_seconds_isValid;
}

QString OAIDscReportResource::getError() const {
    return m_error;
}
void OAIDscReportResource::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIDscReportResource::is_error_Set() const{
    return m_error_isSet;
}

bool OAIDscReportResource::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIDscReportResource::getModuleName() const {
    return m_module_name;
}
void OAIDscReportResource::setModuleName(const QString &module_name) {
    m_module_name = module_name;
    m_module_name_isSet = true;
}

bool OAIDscReportResource::is_module_name_Set() const{
    return m_module_name_isSet;
}

bool OAIDscReportResource::is_module_name_Valid() const{
    return m_module_name_isValid;
}

QString OAIDscReportResource::getModuleVersion() const {
    return m_module_version;
}
void OAIDscReportResource::setModuleVersion(const QString &module_version) {
    m_module_version = module_version;
    m_module_version_isSet = true;
}

bool OAIDscReportResource::is_module_version_Set() const{
    return m_module_version_isSet;
}

bool OAIDscReportResource::is_module_version_Valid() const{
    return m_module_version_isValid;
}

QString OAIDscReportResource::getResourceId() const {
    return m_resource_id;
}
void OAIDscReportResource::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIDscReportResource::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIDscReportResource::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIDscReportResource::getResourceName() const {
    return m_resource_name;
}
void OAIDscReportResource::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIDscReportResource::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIDscReportResource::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIDscReportResource::getSourceInfo() const {
    return m_source_info;
}
void OAIDscReportResource::setSourceInfo(const QString &source_info) {
    m_source_info = source_info;
    m_source_info_isSet = true;
}

bool OAIDscReportResource::is_source_info_Set() const{
    return m_source_info_isSet;
}

bool OAIDscReportResource::is_source_info_Valid() const{
    return m_source_info_isValid;
}

QDateTime OAIDscReportResource::getStartDate() const {
    return m_start_date;
}
void OAIDscReportResource::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIDscReportResource::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIDscReportResource::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIDscReportResource::getStatus() const {
    return m_status;
}
void OAIDscReportResource::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDscReportResource::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDscReportResource::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDscReportResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_depends_on.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDscReportResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
