/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DscReportResourceNavigation from './DscReportResourceNavigation';

/**
 * The DscReportResource model module.
 * @module model/DscReportResource
 * @version 2018-01-15
 */
class DscReportResource {
    /**
     * Constructs a new <code>DscReportResource</code>.
     * Definition of the DSC Report Resource.
     * @alias module:model/DscReportResource
     */
    constructor() { 
        
        DscReportResource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DscReportResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DscReportResource} obj Optional instance to populate.
     * @return {module:model/DscReportResource} The populated <code>DscReportResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DscReportResource();

            if (data.hasOwnProperty('dependsOn')) {
                obj['dependsOn'] = ApiClient.convertToType(data['dependsOn'], [DscReportResourceNavigation]);
            }
            if (data.hasOwnProperty('durationInSeconds')) {
                obj['durationInSeconds'] = ApiClient.convertToType(data['durationInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('moduleName')) {
                obj['moduleName'] = ApiClient.convertToType(data['moduleName'], 'String');
            }
            if (data.hasOwnProperty('moduleVersion')) {
                obj['moduleVersion'] = ApiClient.convertToType(data['moduleVersion'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('resourceName')) {
                obj['resourceName'] = ApiClient.convertToType(data['resourceName'], 'String');
            }
            if (data.hasOwnProperty('sourceInfo')) {
                obj['sourceInfo'] = ApiClient.convertToType(data['sourceInfo'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DscReportResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DscReportResource</code>.
     */
    static validateJSON(data) {
        if (data['dependsOn']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dependsOn'])) {
                throw new Error("Expected the field `dependsOn` to be an array in the JSON data but got " + data['dependsOn']);
            }
            // validate the optional field `dependsOn` (array)
            for (const item of data['dependsOn']) {
                DscReportResourceNavigation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['moduleName'] && !(typeof data['moduleName'] === 'string' || data['moduleName'] instanceof String)) {
            throw new Error("Expected the field `moduleName` to be a primitive type in the JSON string but got " + data['moduleName']);
        }
        // ensure the json data is a string
        if (data['moduleVersion'] && !(typeof data['moduleVersion'] === 'string' || data['moduleVersion'] instanceof String)) {
            throw new Error("Expected the field `moduleVersion` to be a primitive type in the JSON string but got " + data['moduleVersion']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['resourceName'] && !(typeof data['resourceName'] === 'string' || data['resourceName'] instanceof String)) {
            throw new Error("Expected the field `resourceName` to be a primitive type in the JSON string but got " + data['resourceName']);
        }
        // ensure the json data is a string
        if (data['sourceInfo'] && !(typeof data['sourceInfo'] === 'string' || data['sourceInfo'] instanceof String)) {
            throw new Error("Expected the field `sourceInfo` to be a primitive type in the JSON string but got " + data['sourceInfo']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Gets or sets the Resource Navigation values for resources the resource depends on.
 * @member {Array.<module:model/DscReportResourceNavigation>} dependsOn
 */
DscReportResource.prototype['dependsOn'] = undefined;

/**
 * Gets or sets the duration in seconds for the resource.
 * @member {Number} durationInSeconds
 */
DscReportResource.prototype['durationInSeconds'] = undefined;

/**
 * Gets or sets the error of the resource.
 * @member {String} error
 */
DscReportResource.prototype['error'] = undefined;

/**
 * Gets or sets the module name of the resource.
 * @member {String} moduleName
 */
DscReportResource.prototype['moduleName'] = undefined;

/**
 * Gets or sets the module version of the resource.
 * @member {String} moduleVersion
 */
DscReportResource.prototype['moduleVersion'] = undefined;

/**
 * Gets or sets the ID of the resource.
 * @member {String} resourceId
 */
DscReportResource.prototype['resourceId'] = undefined;

/**
 * Gets or sets the name of the resource.
 * @member {String} resourceName
 */
DscReportResource.prototype['resourceName'] = undefined;

/**
 * Gets or sets the source info of the resource.
 * @member {String} sourceInfo
 */
DscReportResource.prototype['sourceInfo'] = undefined;

/**
 * Gets or sets the start date of the resource.
 * @member {Date} startDate
 */
DscReportResource.prototype['startDate'] = undefined;

/**
 * Gets or sets the status of the resource.
 * @member {String} status
 */
DscReportResource.prototype['status'] = undefined;






export default DscReportResource;

