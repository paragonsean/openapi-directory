/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DscMetaConfiguration model module.
 * @module model/DscMetaConfiguration
 * @version 2018-01-15
 */
class DscMetaConfiguration {
    /**
     * Constructs a new <code>DscMetaConfiguration</code>.
     * Definition of the DSC Meta Configuration.
     * @alias module:model/DscMetaConfiguration
     */
    constructor() { 
        
        DscMetaConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DscMetaConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DscMetaConfiguration} obj Optional instance to populate.
     * @return {module:model/DscMetaConfiguration} The populated <code>DscMetaConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DscMetaConfiguration();

            if (data.hasOwnProperty('actionAfterReboot')) {
                obj['actionAfterReboot'] = ApiClient.convertToType(data['actionAfterReboot'], 'String');
            }
            if (data.hasOwnProperty('allowModuleOverwrite')) {
                obj['allowModuleOverwrite'] = ApiClient.convertToType(data['allowModuleOverwrite'], 'Boolean');
            }
            if (data.hasOwnProperty('certificateId')) {
                obj['certificateId'] = ApiClient.convertToType(data['certificateId'], 'String');
            }
            if (data.hasOwnProperty('configurationMode')) {
                obj['configurationMode'] = ApiClient.convertToType(data['configurationMode'], 'String');
            }
            if (data.hasOwnProperty('configurationModeFrequencyMins')) {
                obj['configurationModeFrequencyMins'] = ApiClient.convertToType(data['configurationModeFrequencyMins'], 'Number');
            }
            if (data.hasOwnProperty('rebootNodeIfNeeded')) {
                obj['rebootNodeIfNeeded'] = ApiClient.convertToType(data['rebootNodeIfNeeded'], 'Boolean');
            }
            if (data.hasOwnProperty('refreshFrequencyMins')) {
                obj['refreshFrequencyMins'] = ApiClient.convertToType(data['refreshFrequencyMins'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DscMetaConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DscMetaConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actionAfterReboot'] && !(typeof data['actionAfterReboot'] === 'string' || data['actionAfterReboot'] instanceof String)) {
            throw new Error("Expected the field `actionAfterReboot` to be a primitive type in the JSON string but got " + data['actionAfterReboot']);
        }
        // ensure the json data is a string
        if (data['certificateId'] && !(typeof data['certificateId'] === 'string' || data['certificateId'] instanceof String)) {
            throw new Error("Expected the field `certificateId` to be a primitive type in the JSON string but got " + data['certificateId']);
        }
        // ensure the json data is a string
        if (data['configurationMode'] && !(typeof data['configurationMode'] === 'string' || data['configurationMode'] instanceof String)) {
            throw new Error("Expected the field `configurationMode` to be a primitive type in the JSON string but got " + data['configurationMode']);
        }

        return true;
    }


}



/**
 * Gets or sets the ActionAfterReboot value of the meta configuration.
 * @member {String} actionAfterReboot
 */
DscMetaConfiguration.prototype['actionAfterReboot'] = undefined;

/**
 * Gets or sets the AllowModuleOverwrite value of the meta configuration.
 * @member {Boolean} allowModuleOverwrite
 */
DscMetaConfiguration.prototype['allowModuleOverwrite'] = undefined;

/**
 * Gets or sets the CertificateId value of the meta configuration.
 * @member {String} certificateId
 */
DscMetaConfiguration.prototype['certificateId'] = undefined;

/**
 * Gets or sets the ConfigurationMode value of the meta configuration.
 * @member {String} configurationMode
 */
DscMetaConfiguration.prototype['configurationMode'] = undefined;

/**
 * Gets or sets the ConfigurationModeFrequencyMins value of the meta configuration.
 * @member {Number} configurationModeFrequencyMins
 */
DscMetaConfiguration.prototype['configurationModeFrequencyMins'] = undefined;

/**
 * Gets or sets the RebootNodeIfNeeded value of the meta configuration.
 * @member {Boolean} rebootNodeIfNeeded
 */
DscMetaConfiguration.prototype['rebootNodeIfNeeded'] = undefined;

/**
 * Gets or sets the RefreshFrequencyMins value of the meta configuration.
 * @member {Number} refreshFrequencyMins
 */
DscMetaConfiguration.prototype['refreshFrequencyMins'] = undefined;






export default DscMetaConfiguration;

