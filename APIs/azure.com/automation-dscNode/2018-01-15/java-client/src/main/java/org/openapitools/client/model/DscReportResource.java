/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DscReportResourceNavigation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of the DSC Report Resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:04.312720-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DscReportResource {
  public static final String SERIALIZED_NAME_DEPENDS_ON = "dependsOn";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON)
  private List<DscReportResourceNavigation> dependsOn = new ArrayList<>();

  public static final String SERIALIZED_NAME_DURATION_IN_SECONDS = "durationInSeconds";
  @SerializedName(SERIALIZED_NAME_DURATION_IN_SECONDS)
  private Double durationInSeconds;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_MODULE_NAME = "moduleName";
  @SerializedName(SERIALIZED_NAME_MODULE_NAME)
  private String moduleName;

  public static final String SERIALIZED_NAME_MODULE_VERSION = "moduleVersion";
  @SerializedName(SERIALIZED_NAME_MODULE_VERSION)
  private String moduleVersion;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public static final String SERIALIZED_NAME_SOURCE_INFO = "sourceInfo";
  @SerializedName(SERIALIZED_NAME_SOURCE_INFO)
  private String sourceInfo;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public DscReportResource() {
  }

  public DscReportResource dependsOn(List<DscReportResourceNavigation> dependsOn) {
    this.dependsOn = dependsOn;
    return this;
  }

  public DscReportResource addDependsOnItem(DscReportResourceNavigation dependsOnItem) {
    if (this.dependsOn == null) {
      this.dependsOn = new ArrayList<>();
    }
    this.dependsOn.add(dependsOnItem);
    return this;
  }

  /**
   * Gets or sets the Resource Navigation values for resources the resource depends on.
   * @return dependsOn
   */
  @javax.annotation.Nullable
  public List<DscReportResourceNavigation> getDependsOn() {
    return dependsOn;
  }

  public void setDependsOn(List<DscReportResourceNavigation> dependsOn) {
    this.dependsOn = dependsOn;
  }


  public DscReportResource durationInSeconds(Double durationInSeconds) {
    this.durationInSeconds = durationInSeconds;
    return this;
  }

  /**
   * Gets or sets the duration in seconds for the resource.
   * @return durationInSeconds
   */
  @javax.annotation.Nullable
  public Double getDurationInSeconds() {
    return durationInSeconds;
  }

  public void setDurationInSeconds(Double durationInSeconds) {
    this.durationInSeconds = durationInSeconds;
  }


  public DscReportResource error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Gets or sets the error of the resource.
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public DscReportResource moduleName(String moduleName) {
    this.moduleName = moduleName;
    return this;
  }

  /**
   * Gets or sets the module name of the resource.
   * @return moduleName
   */
  @javax.annotation.Nullable
  public String getModuleName() {
    return moduleName;
  }

  public void setModuleName(String moduleName) {
    this.moduleName = moduleName;
  }


  public DscReportResource moduleVersion(String moduleVersion) {
    this.moduleVersion = moduleVersion;
    return this;
  }

  /**
   * Gets or sets the module version of the resource.
   * @return moduleVersion
   */
  @javax.annotation.Nullable
  public String getModuleVersion() {
    return moduleVersion;
  }

  public void setModuleVersion(String moduleVersion) {
    this.moduleVersion = moduleVersion;
  }


  public DscReportResource resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Gets or sets the ID of the resource.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public DscReportResource resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Gets or sets the name of the resource.
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public DscReportResource sourceInfo(String sourceInfo) {
    this.sourceInfo = sourceInfo;
    return this;
  }

  /**
   * Gets or sets the source info of the resource.
   * @return sourceInfo
   */
  @javax.annotation.Nullable
  public String getSourceInfo() {
    return sourceInfo;
  }

  public void setSourceInfo(String sourceInfo) {
    this.sourceInfo = sourceInfo;
  }


  public DscReportResource startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Gets or sets the start date of the resource.
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public DscReportResource status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Gets or sets the status of the resource.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DscReportResource dscReportResource = (DscReportResource) o;
    return Objects.equals(this.dependsOn, dscReportResource.dependsOn) &&
        Objects.equals(this.durationInSeconds, dscReportResource.durationInSeconds) &&
        Objects.equals(this.error, dscReportResource.error) &&
        Objects.equals(this.moduleName, dscReportResource.moduleName) &&
        Objects.equals(this.moduleVersion, dscReportResource.moduleVersion) &&
        Objects.equals(this.resourceId, dscReportResource.resourceId) &&
        Objects.equals(this.resourceName, dscReportResource.resourceName) &&
        Objects.equals(this.sourceInfo, dscReportResource.sourceInfo) &&
        Objects.equals(this.startDate, dscReportResource.startDate) &&
        Objects.equals(this.status, dscReportResource.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependsOn, durationInSeconds, error, moduleName, moduleVersion, resourceId, resourceName, sourceInfo, startDate, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DscReportResource {\n");
    sb.append("    dependsOn: ").append(toIndentedString(dependsOn)).append("\n");
    sb.append("    durationInSeconds: ").append(toIndentedString(durationInSeconds)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    moduleName: ").append(toIndentedString(moduleName)).append("\n");
    sb.append("    moduleVersion: ").append(toIndentedString(moduleVersion)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    sourceInfo: ").append(toIndentedString(sourceInfo)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dependsOn");
    openapiFields.add("durationInSeconds");
    openapiFields.add("error");
    openapiFields.add("moduleName");
    openapiFields.add("moduleVersion");
    openapiFields.add("resourceId");
    openapiFields.add("resourceName");
    openapiFields.add("sourceInfo");
    openapiFields.add("startDate");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DscReportResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DscReportResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DscReportResource is not found in the empty JSON string", DscReportResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DscReportResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DscReportResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dependsOn") != null && !jsonObj.get("dependsOn").isJsonNull()) {
        JsonArray jsonArraydependsOn = jsonObj.getAsJsonArray("dependsOn");
        if (jsonArraydependsOn != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependsOn").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependsOn` to be an array in the JSON string but got `%s`", jsonObj.get("dependsOn").toString()));
          }

          // validate the optional field `dependsOn` (array)
          for (int i = 0; i < jsonArraydependsOn.size(); i++) {
            DscReportResourceNavigation.validateJsonElement(jsonArraydependsOn.get(i));
          };
        }
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("moduleName") != null && !jsonObj.get("moduleName").isJsonNull()) && !jsonObj.get("moduleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moduleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moduleName").toString()));
      }
      if ((jsonObj.get("moduleVersion") != null && !jsonObj.get("moduleVersion").isJsonNull()) && !jsonObj.get("moduleVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moduleVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moduleVersion").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
      if ((jsonObj.get("sourceInfo") != null && !jsonObj.get("sourceInfo").isJsonNull()) && !jsonObj.get("sourceInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceInfo").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DscReportResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DscReportResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DscReportResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DscReportResource.class));

       return (TypeAdapter<T>) new TypeAdapter<DscReportResource>() {
           @Override
           public void write(JsonWriter out, DscReportResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DscReportResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DscReportResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DscReportResource
   * @throws IOException if the JSON string is invalid with respect to DscReportResource
   */
  public static DscReportResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DscReportResource.class);
  }

  /**
   * Convert an instance of DscReportResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

