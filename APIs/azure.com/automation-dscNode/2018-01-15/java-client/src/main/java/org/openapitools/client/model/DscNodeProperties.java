/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DscNodeConfigurationAssociationProperty;
import org.openapitools.client.model.DscNodeExtensionHandlerAssociationProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a DscNode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:04.312720-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DscNodeProperties {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_EXTENSION_HANDLER = "extensionHandler";
  @SerializedName(SERIALIZED_NAME_EXTENSION_HANDLER)
  private List<DscNodeExtensionHandlerAssociationProperty> extensionHandler = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_LAST_SEEN = "lastSeen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private OffsetDateTime lastSeen;

  public static final String SERIALIZED_NAME_NODE_CONFIGURATION = "nodeConfiguration";
  @SerializedName(SERIALIZED_NAME_NODE_CONFIGURATION)
  private DscNodeConfigurationAssociationProperty nodeConfiguration;

  public static final String SERIALIZED_NAME_NODE_ID = "nodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_REGISTRATION_TIME = "registrationTime";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_TIME)
  private OffsetDateTime registrationTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "totalCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Integer totalCount;

  public DscNodeProperties() {
  }

  public DscNodeProperties accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Gets or sets the account id of the node.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public DscNodeProperties etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Gets or sets the etag of the resource.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public DscNodeProperties extensionHandler(List<DscNodeExtensionHandlerAssociationProperty> extensionHandler) {
    this.extensionHandler = extensionHandler;
    return this;
  }

  public DscNodeProperties addExtensionHandlerItem(DscNodeExtensionHandlerAssociationProperty extensionHandlerItem) {
    if (this.extensionHandler == null) {
      this.extensionHandler = new ArrayList<>();
    }
    this.extensionHandler.add(extensionHandlerItem);
    return this;
  }

  /**
   * Gets or sets the list of extensionHandler properties for a Node.
   * @return extensionHandler
   */
  @javax.annotation.Nullable
  public List<DscNodeExtensionHandlerAssociationProperty> getExtensionHandler() {
    return extensionHandler;
  }

  public void setExtensionHandler(List<DscNodeExtensionHandlerAssociationProperty> extensionHandler) {
    this.extensionHandler = extensionHandler;
  }


  public DscNodeProperties ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Gets or sets the ip of the node.
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public DscNodeProperties lastSeen(OffsetDateTime lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

  /**
   * Gets or sets the last seen time of the node.
   * @return lastSeen
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(OffsetDateTime lastSeen) {
    this.lastSeen = lastSeen;
  }


  public DscNodeProperties nodeConfiguration(DscNodeConfigurationAssociationProperty nodeConfiguration) {
    this.nodeConfiguration = nodeConfiguration;
    return this;
  }

  /**
   * Get nodeConfiguration
   * @return nodeConfiguration
   */
  @javax.annotation.Nullable
  public DscNodeConfigurationAssociationProperty getNodeConfiguration() {
    return nodeConfiguration;
  }

  public void setNodeConfiguration(DscNodeConfigurationAssociationProperty nodeConfiguration) {
    this.nodeConfiguration = nodeConfiguration;
  }


  public DscNodeProperties nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Gets or sets the node id.
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public DscNodeProperties registrationTime(OffsetDateTime registrationTime) {
    this.registrationTime = registrationTime;
    return this;
  }

  /**
   * Gets or sets the registration time of the node.
   * @return registrationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRegistrationTime() {
    return registrationTime;
  }

  public void setRegistrationTime(OffsetDateTime registrationTime) {
    this.registrationTime = registrationTime;
  }


  public DscNodeProperties status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Gets or sets the status of the node.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DscNodeProperties totalCount(Integer totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  /**
   * Gets the total number of records matching filter criteria.
   * @return totalCount
   */
  @javax.annotation.Nullable
  public Integer getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DscNodeProperties dscNodeProperties = (DscNodeProperties) o;
    return Objects.equals(this.accountId, dscNodeProperties.accountId) &&
        Objects.equals(this.etag, dscNodeProperties.etag) &&
        Objects.equals(this.extensionHandler, dscNodeProperties.extensionHandler) &&
        Objects.equals(this.ip, dscNodeProperties.ip) &&
        Objects.equals(this.lastSeen, dscNodeProperties.lastSeen) &&
        Objects.equals(this.nodeConfiguration, dscNodeProperties.nodeConfiguration) &&
        Objects.equals(this.nodeId, dscNodeProperties.nodeId) &&
        Objects.equals(this.registrationTime, dscNodeProperties.registrationTime) &&
        Objects.equals(this.status, dscNodeProperties.status) &&
        Objects.equals(this.totalCount, dscNodeProperties.totalCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, etag, extensionHandler, ip, lastSeen, nodeConfiguration, nodeId, registrationTime, status, totalCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DscNodeProperties {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    extensionHandler: ").append(toIndentedString(extensionHandler)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    nodeConfiguration: ").append(toIndentedString(nodeConfiguration)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    registrationTime: ").append(toIndentedString(registrationTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("etag");
    openapiFields.add("extensionHandler");
    openapiFields.add("ip");
    openapiFields.add("lastSeen");
    openapiFields.add("nodeConfiguration");
    openapiFields.add("nodeId");
    openapiFields.add("registrationTime");
    openapiFields.add("status");
    openapiFields.add("totalCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DscNodeProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DscNodeProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DscNodeProperties is not found in the empty JSON string", DscNodeProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DscNodeProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DscNodeProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if (jsonObj.get("extensionHandler") != null && !jsonObj.get("extensionHandler").isJsonNull()) {
        JsonArray jsonArrayextensionHandler = jsonObj.getAsJsonArray("extensionHandler");
        if (jsonArrayextensionHandler != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extensionHandler").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extensionHandler` to be an array in the JSON string but got `%s`", jsonObj.get("extensionHandler").toString()));
          }

          // validate the optional field `extensionHandler` (array)
          for (int i = 0; i < jsonArrayextensionHandler.size(); i++) {
            DscNodeExtensionHandlerAssociationProperty.validateJsonElement(jsonArrayextensionHandler.get(i));
          };
        }
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      // validate the optional field `nodeConfiguration`
      if (jsonObj.get("nodeConfiguration") != null && !jsonObj.get("nodeConfiguration").isJsonNull()) {
        DscNodeConfigurationAssociationProperty.validateJsonElement(jsonObj.get("nodeConfiguration"));
      }
      if ((jsonObj.get("nodeId") != null && !jsonObj.get("nodeId").isJsonNull()) && !jsonObj.get("nodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DscNodeProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DscNodeProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DscNodeProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DscNodeProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DscNodeProperties>() {
           @Override
           public void write(JsonWriter out, DscNodeProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DscNodeProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DscNodeProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DscNodeProperties
   * @throws IOException if the JSON string is invalid with respect to DscNodeProperties
   */
  public static DscNodeProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DscNodeProperties.class);
  }

  /**
   * Convert an instance of DscNodeProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

