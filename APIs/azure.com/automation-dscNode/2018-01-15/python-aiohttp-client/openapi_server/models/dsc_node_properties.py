# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dsc_node_configuration_association_property import DscNodeConfigurationAssociationProperty
from openapi_server.models.dsc_node_extension_handler_association_property import DscNodeExtensionHandlerAssociationProperty
from openapi_server import util


class DscNodeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, etag: str=None, extension_handler: List[DscNodeExtensionHandlerAssociationProperty]=None, ip: str=None, last_seen: datetime=None, node_configuration: DscNodeConfigurationAssociationProperty=None, node_id: str=None, registration_time: datetime=None, status: str=None, total_count: int=None):
        """DscNodeProperties - a model defined in OpenAPI

        :param account_id: The account_id of this DscNodeProperties.
        :param etag: The etag of this DscNodeProperties.
        :param extension_handler: The extension_handler of this DscNodeProperties.
        :param ip: The ip of this DscNodeProperties.
        :param last_seen: The last_seen of this DscNodeProperties.
        :param node_configuration: The node_configuration of this DscNodeProperties.
        :param node_id: The node_id of this DscNodeProperties.
        :param registration_time: The registration_time of this DscNodeProperties.
        :param status: The status of this DscNodeProperties.
        :param total_count: The total_count of this DscNodeProperties.
        """
        self.openapi_types = {
            'account_id': str,
            'etag': str,
            'extension_handler': List[DscNodeExtensionHandlerAssociationProperty],
            'ip': str,
            'last_seen': datetime,
            'node_configuration': DscNodeConfigurationAssociationProperty,
            'node_id': str,
            'registration_time': datetime,
            'status': str,
            'total_count': int
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'etag': 'etag',
            'extension_handler': 'extensionHandler',
            'ip': 'ip',
            'last_seen': 'lastSeen',
            'node_configuration': 'nodeConfiguration',
            'node_id': 'nodeId',
            'registration_time': 'registrationTime',
            'status': 'status',
            'total_count': 'totalCount'
        }

        self._account_id = account_id
        self._etag = etag
        self._extension_handler = extension_handler
        self._ip = ip
        self._last_seen = last_seen
        self._node_configuration = node_configuration
        self._node_id = node_id
        self._registration_time = registration_time
        self._status = status
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DscNodeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DscNodeProperties of this DscNodeProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this DscNodeProperties.

        Gets or sets the account id of the node.

        :return: The account_id of this DscNodeProperties.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DscNodeProperties.

        Gets or sets the account id of the node.

        :param account_id: The account_id of this DscNodeProperties.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def etag(self):
        """Gets the etag of this DscNodeProperties.

        Gets or sets the etag of the resource.

        :return: The etag of this DscNodeProperties.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this DscNodeProperties.

        Gets or sets the etag of the resource.

        :param etag: The etag of this DscNodeProperties.
        :type etag: str
        """

        self._etag = etag

    @property
    def extension_handler(self):
        """Gets the extension_handler of this DscNodeProperties.

        Gets or sets the list of extensionHandler properties for a Node.

        :return: The extension_handler of this DscNodeProperties.
        :rtype: List[DscNodeExtensionHandlerAssociationProperty]
        """
        return self._extension_handler

    @extension_handler.setter
    def extension_handler(self, extension_handler):
        """Sets the extension_handler of this DscNodeProperties.

        Gets or sets the list of extensionHandler properties for a Node.

        :param extension_handler: The extension_handler of this DscNodeProperties.
        :type extension_handler: List[DscNodeExtensionHandlerAssociationProperty]
        """

        self._extension_handler = extension_handler

    @property
    def ip(self):
        """Gets the ip of this DscNodeProperties.

        Gets or sets the ip of the node.

        :return: The ip of this DscNodeProperties.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this DscNodeProperties.

        Gets or sets the ip of the node.

        :param ip: The ip of this DscNodeProperties.
        :type ip: str
        """

        self._ip = ip

    @property
    def last_seen(self):
        """Gets the last_seen of this DscNodeProperties.

        Gets or sets the last seen time of the node.

        :return: The last_seen of this DscNodeProperties.
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this DscNodeProperties.

        Gets or sets the last seen time of the node.

        :param last_seen: The last_seen of this DscNodeProperties.
        :type last_seen: datetime
        """

        self._last_seen = last_seen

    @property
    def node_configuration(self):
        """Gets the node_configuration of this DscNodeProperties.


        :return: The node_configuration of this DscNodeProperties.
        :rtype: DscNodeConfigurationAssociationProperty
        """
        return self._node_configuration

    @node_configuration.setter
    def node_configuration(self, node_configuration):
        """Sets the node_configuration of this DscNodeProperties.


        :param node_configuration: The node_configuration of this DscNodeProperties.
        :type node_configuration: DscNodeConfigurationAssociationProperty
        """

        self._node_configuration = node_configuration

    @property
    def node_id(self):
        """Gets the node_id of this DscNodeProperties.

        Gets or sets the node id.

        :return: The node_id of this DscNodeProperties.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this DscNodeProperties.

        Gets or sets the node id.

        :param node_id: The node_id of this DscNodeProperties.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def registration_time(self):
        """Gets the registration_time of this DscNodeProperties.

        Gets or sets the registration time of the node.

        :return: The registration_time of this DscNodeProperties.
        :rtype: datetime
        """
        return self._registration_time

    @registration_time.setter
    def registration_time(self, registration_time):
        """Sets the registration_time of this DscNodeProperties.

        Gets or sets the registration time of the node.

        :param registration_time: The registration_time of this DscNodeProperties.
        :type registration_time: datetime
        """

        self._registration_time = registration_time

    @property
    def status(self):
        """Gets the status of this DscNodeProperties.

        Gets or sets the status of the node.

        :return: The status of this DscNodeProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DscNodeProperties.

        Gets or sets the status of the node.

        :param status: The status of this DscNodeProperties.
        :type status: str
        """

        self._status = status

    @property
    def total_count(self):
        """Gets the total_count of this DscNodeProperties.

        Gets the total number of records matching filter criteria.

        :return: The total_count of this DscNodeProperties.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this DscNodeProperties.

        Gets the total number of records matching filter criteria.

        :param total_count: The total_count of this DscNodeProperties.
        :type total_count: int
        """

        self._total_count = total_count
