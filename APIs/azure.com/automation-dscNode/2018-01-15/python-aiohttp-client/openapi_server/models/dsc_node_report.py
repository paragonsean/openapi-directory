# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dsc_meta_configuration import DscMetaConfiguration
from openapi_server.models.dsc_report_error import DscReportError
from openapi_server.models.dsc_report_resource import DscReportResource
from openapi_server import util


class DscNodeReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_version: str=None, end_time: datetime=None, errors: List[DscReportError]=None, host_name: str=None, i_pv4_addresses: List[str]=None, i_pv6_addresses: List[str]=None, id: str=None, last_modified_time: datetime=None, meta_configuration: DscMetaConfiguration=None, number_of_resources: int=None, raw_errors: str=None, reboot_requested: str=None, refresh_mode: str=None, report_format_version: str=None, report_id: str=None, resources: List[DscReportResource]=None, start_time: datetime=None, status: str=None, type: str=None):
        """DscNodeReport - a model defined in OpenAPI

        :param configuration_version: The configuration_version of this DscNodeReport.
        :param end_time: The end_time of this DscNodeReport.
        :param errors: The errors of this DscNodeReport.
        :param host_name: The host_name of this DscNodeReport.
        :param i_pv4_addresses: The i_pv4_addresses of this DscNodeReport.
        :param i_pv6_addresses: The i_pv6_addresses of this DscNodeReport.
        :param id: The id of this DscNodeReport.
        :param last_modified_time: The last_modified_time of this DscNodeReport.
        :param meta_configuration: The meta_configuration of this DscNodeReport.
        :param number_of_resources: The number_of_resources of this DscNodeReport.
        :param raw_errors: The raw_errors of this DscNodeReport.
        :param reboot_requested: The reboot_requested of this DscNodeReport.
        :param refresh_mode: The refresh_mode of this DscNodeReport.
        :param report_format_version: The report_format_version of this DscNodeReport.
        :param report_id: The report_id of this DscNodeReport.
        :param resources: The resources of this DscNodeReport.
        :param start_time: The start_time of this DscNodeReport.
        :param status: The status of this DscNodeReport.
        :param type: The type of this DscNodeReport.
        """
        self.openapi_types = {
            'configuration_version': str,
            'end_time': datetime,
            'errors': List[DscReportError],
            'host_name': str,
            'i_pv4_addresses': List[str],
            'i_pv6_addresses': List[str],
            'id': str,
            'last_modified_time': datetime,
            'meta_configuration': DscMetaConfiguration,
            'number_of_resources': int,
            'raw_errors': str,
            'reboot_requested': str,
            'refresh_mode': str,
            'report_format_version': str,
            'report_id': str,
            'resources': List[DscReportResource],
            'start_time': datetime,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'configuration_version': 'configurationVersion',
            'end_time': 'endTime',
            'errors': 'errors',
            'host_name': 'hostName',
            'i_pv4_addresses': 'iPV4Addresses',
            'i_pv6_addresses': 'iPV6Addresses',
            'id': 'id',
            'last_modified_time': 'lastModifiedTime',
            'meta_configuration': 'metaConfiguration',
            'number_of_resources': 'numberOfResources',
            'raw_errors': 'rawErrors',
            'reboot_requested': 'rebootRequested',
            'refresh_mode': 'refreshMode',
            'report_format_version': 'reportFormatVersion',
            'report_id': 'reportId',
            'resources': 'resources',
            'start_time': 'startTime',
            'status': 'status',
            'type': 'type'
        }

        self._configuration_version = configuration_version
        self._end_time = end_time
        self._errors = errors
        self._host_name = host_name
        self._i_pv4_addresses = i_pv4_addresses
        self._i_pv6_addresses = i_pv6_addresses
        self._id = id
        self._last_modified_time = last_modified_time
        self._meta_configuration = meta_configuration
        self._number_of_resources = number_of_resources
        self._raw_errors = raw_errors
        self._reboot_requested = reboot_requested
        self._refresh_mode = refresh_mode
        self._report_format_version = report_format_version
        self._report_id = report_id
        self._resources = resources
        self._start_time = start_time
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DscNodeReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DscNodeReport of this DscNodeReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_version(self):
        """Gets the configuration_version of this DscNodeReport.

        Gets or sets the configurationVersion of the node report.

        :return: The configuration_version of this DscNodeReport.
        :rtype: str
        """
        return self._configuration_version

    @configuration_version.setter
    def configuration_version(self, configuration_version):
        """Sets the configuration_version of this DscNodeReport.

        Gets or sets the configurationVersion of the node report.

        :param configuration_version: The configuration_version of this DscNodeReport.
        :type configuration_version: str
        """

        self._configuration_version = configuration_version

    @property
    def end_time(self):
        """Gets the end_time of this DscNodeReport.

        Gets or sets the end time of the node report.

        :return: The end_time of this DscNodeReport.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DscNodeReport.

        Gets or sets the end time of the node report.

        :param end_time: The end_time of this DscNodeReport.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def errors(self):
        """Gets the errors of this DscNodeReport.

        Gets or sets the errors for the node report.

        :return: The errors of this DscNodeReport.
        :rtype: List[DscReportError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this DscNodeReport.

        Gets or sets the errors for the node report.

        :param errors: The errors of this DscNodeReport.
        :type errors: List[DscReportError]
        """

        self._errors = errors

    @property
    def host_name(self):
        """Gets the host_name of this DscNodeReport.

        Gets or sets the hostname of the node that sent the report.

        :return: The host_name of this DscNodeReport.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this DscNodeReport.

        Gets or sets the hostname of the node that sent the report.

        :param host_name: The host_name of this DscNodeReport.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def i_pv4_addresses(self):
        """Gets the i_pv4_addresses of this DscNodeReport.

        Gets or sets the IPv4 address of the node that sent the report.

        :return: The i_pv4_addresses of this DscNodeReport.
        :rtype: List[str]
        """
        return self._i_pv4_addresses

    @i_pv4_addresses.setter
    def i_pv4_addresses(self, i_pv4_addresses):
        """Sets the i_pv4_addresses of this DscNodeReport.

        Gets or sets the IPv4 address of the node that sent the report.

        :param i_pv4_addresses: The i_pv4_addresses of this DscNodeReport.
        :type i_pv4_addresses: List[str]
        """

        self._i_pv4_addresses = i_pv4_addresses

    @property
    def i_pv6_addresses(self):
        """Gets the i_pv6_addresses of this DscNodeReport.

        Gets or sets the IPv6 address of the node that sent the report.

        :return: The i_pv6_addresses of this DscNodeReport.
        :rtype: List[str]
        """
        return self._i_pv6_addresses

    @i_pv6_addresses.setter
    def i_pv6_addresses(self, i_pv6_addresses):
        """Sets the i_pv6_addresses of this DscNodeReport.

        Gets or sets the IPv6 address of the node that sent the report.

        :param i_pv6_addresses: The i_pv6_addresses of this DscNodeReport.
        :type i_pv6_addresses: List[str]
        """

        self._i_pv6_addresses = i_pv6_addresses

    @property
    def id(self):
        """Gets the id of this DscNodeReport.

        Gets or sets the id.

        :return: The id of this DscNodeReport.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DscNodeReport.

        Gets or sets the id.

        :param id: The id of this DscNodeReport.
        :type id: str
        """

        self._id = id

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DscNodeReport.

        Gets or sets the lastModifiedTime of the node report.

        :return: The last_modified_time of this DscNodeReport.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DscNodeReport.

        Gets or sets the lastModifiedTime of the node report.

        :param last_modified_time: The last_modified_time of this DscNodeReport.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def meta_configuration(self):
        """Gets the meta_configuration of this DscNodeReport.


        :return: The meta_configuration of this DscNodeReport.
        :rtype: DscMetaConfiguration
        """
        return self._meta_configuration

    @meta_configuration.setter
    def meta_configuration(self, meta_configuration):
        """Sets the meta_configuration of this DscNodeReport.


        :param meta_configuration: The meta_configuration of this DscNodeReport.
        :type meta_configuration: DscMetaConfiguration
        """

        self._meta_configuration = meta_configuration

    @property
    def number_of_resources(self):
        """Gets the number_of_resources of this DscNodeReport.

        Gets or sets the number of resource in the node report.

        :return: The number_of_resources of this DscNodeReport.
        :rtype: int
        """
        return self._number_of_resources

    @number_of_resources.setter
    def number_of_resources(self, number_of_resources):
        """Sets the number_of_resources of this DscNodeReport.

        Gets or sets the number of resource in the node report.

        :param number_of_resources: The number_of_resources of this DscNodeReport.
        :type number_of_resources: int
        """

        self._number_of_resources = number_of_resources

    @property
    def raw_errors(self):
        """Gets the raw_errors of this DscNodeReport.

        Gets or sets the unparsed errors for the node report.

        :return: The raw_errors of this DscNodeReport.
        :rtype: str
        """
        return self._raw_errors

    @raw_errors.setter
    def raw_errors(self, raw_errors):
        """Sets the raw_errors of this DscNodeReport.

        Gets or sets the unparsed errors for the node report.

        :param raw_errors: The raw_errors of this DscNodeReport.
        :type raw_errors: str
        """

        self._raw_errors = raw_errors

    @property
    def reboot_requested(self):
        """Gets the reboot_requested of this DscNodeReport.

        Gets or sets the rebootRequested of the node report.

        :return: The reboot_requested of this DscNodeReport.
        :rtype: str
        """
        return self._reboot_requested

    @reboot_requested.setter
    def reboot_requested(self, reboot_requested):
        """Sets the reboot_requested of this DscNodeReport.

        Gets or sets the rebootRequested of the node report.

        :param reboot_requested: The reboot_requested of this DscNodeReport.
        :type reboot_requested: str
        """

        self._reboot_requested = reboot_requested

    @property
    def refresh_mode(self):
        """Gets the refresh_mode of this DscNodeReport.

        Gets or sets the refreshMode of the node report.

        :return: The refresh_mode of this DscNodeReport.
        :rtype: str
        """
        return self._refresh_mode

    @refresh_mode.setter
    def refresh_mode(self, refresh_mode):
        """Sets the refresh_mode of this DscNodeReport.

        Gets or sets the refreshMode of the node report.

        :param refresh_mode: The refresh_mode of this DscNodeReport.
        :type refresh_mode: str
        """

        self._refresh_mode = refresh_mode

    @property
    def report_format_version(self):
        """Gets the report_format_version of this DscNodeReport.

        Gets or sets the reportFormatVersion of the node report.

        :return: The report_format_version of this DscNodeReport.
        :rtype: str
        """
        return self._report_format_version

    @report_format_version.setter
    def report_format_version(self, report_format_version):
        """Sets the report_format_version of this DscNodeReport.

        Gets or sets the reportFormatVersion of the node report.

        :param report_format_version: The report_format_version of this DscNodeReport.
        :type report_format_version: str
        """

        self._report_format_version = report_format_version

    @property
    def report_id(self):
        """Gets the report_id of this DscNodeReport.

        Gets or sets the id of the node report.

        :return: The report_id of this DscNodeReport.
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this DscNodeReport.

        Gets or sets the id of the node report.

        :param report_id: The report_id of this DscNodeReport.
        :type report_id: str
        """

        self._report_id = report_id

    @property
    def resources(self):
        """Gets the resources of this DscNodeReport.

        Gets or sets the resource for the node report.

        :return: The resources of this DscNodeReport.
        :rtype: List[DscReportResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this DscNodeReport.

        Gets or sets the resource for the node report.

        :param resources: The resources of this DscNodeReport.
        :type resources: List[DscReportResource]
        """

        self._resources = resources

    @property
    def start_time(self):
        """Gets the start_time of this DscNodeReport.

        Gets or sets the start time of the node report.

        :return: The start_time of this DscNodeReport.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DscNodeReport.

        Gets or sets the start time of the node report.

        :param start_time: The start_time of this DscNodeReport.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this DscNodeReport.

        Gets or sets the status of the node report.

        :return: The status of this DscNodeReport.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DscNodeReport.

        Gets or sets the status of the node report.

        :param status: The status of this DscNodeReport.
        :type status: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this DscNodeReport.

        Gets or sets the type of the node report.

        :return: The type of this DscNodeReport.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DscNodeReport.

        Gets or sets the type of the node report.

        :param type: The type of this DscNodeReport.
        :type type: str
        """

        self._type = type
