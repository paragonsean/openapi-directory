# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DscMetaConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_after_reboot: str=None, allow_module_overwrite: bool=None, certificate_id: str=None, configuration_mode: str=None, configuration_mode_frequency_mins: int=None, reboot_node_if_needed: bool=None, refresh_frequency_mins: int=None):
        """DscMetaConfiguration - a model defined in OpenAPI

        :param action_after_reboot: The action_after_reboot of this DscMetaConfiguration.
        :param allow_module_overwrite: The allow_module_overwrite of this DscMetaConfiguration.
        :param certificate_id: The certificate_id of this DscMetaConfiguration.
        :param configuration_mode: The configuration_mode of this DscMetaConfiguration.
        :param configuration_mode_frequency_mins: The configuration_mode_frequency_mins of this DscMetaConfiguration.
        :param reboot_node_if_needed: The reboot_node_if_needed of this DscMetaConfiguration.
        :param refresh_frequency_mins: The refresh_frequency_mins of this DscMetaConfiguration.
        """
        self.openapi_types = {
            'action_after_reboot': str,
            'allow_module_overwrite': bool,
            'certificate_id': str,
            'configuration_mode': str,
            'configuration_mode_frequency_mins': int,
            'reboot_node_if_needed': bool,
            'refresh_frequency_mins': int
        }

        self.attribute_map = {
            'action_after_reboot': 'actionAfterReboot',
            'allow_module_overwrite': 'allowModuleOverwrite',
            'certificate_id': 'certificateId',
            'configuration_mode': 'configurationMode',
            'configuration_mode_frequency_mins': 'configurationModeFrequencyMins',
            'reboot_node_if_needed': 'rebootNodeIfNeeded',
            'refresh_frequency_mins': 'refreshFrequencyMins'
        }

        self._action_after_reboot = action_after_reboot
        self._allow_module_overwrite = allow_module_overwrite
        self._certificate_id = certificate_id
        self._configuration_mode = configuration_mode
        self._configuration_mode_frequency_mins = configuration_mode_frequency_mins
        self._reboot_node_if_needed = reboot_node_if_needed
        self._refresh_frequency_mins = refresh_frequency_mins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DscMetaConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DscMetaConfiguration of this DscMetaConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_after_reboot(self):
        """Gets the action_after_reboot of this DscMetaConfiguration.

        Gets or sets the ActionAfterReboot value of the meta configuration.

        :return: The action_after_reboot of this DscMetaConfiguration.
        :rtype: str
        """
        return self._action_after_reboot

    @action_after_reboot.setter
    def action_after_reboot(self, action_after_reboot):
        """Sets the action_after_reboot of this DscMetaConfiguration.

        Gets or sets the ActionAfterReboot value of the meta configuration.

        :param action_after_reboot: The action_after_reboot of this DscMetaConfiguration.
        :type action_after_reboot: str
        """

        self._action_after_reboot = action_after_reboot

    @property
    def allow_module_overwrite(self):
        """Gets the allow_module_overwrite of this DscMetaConfiguration.

        Gets or sets the AllowModuleOverwrite value of the meta configuration.

        :return: The allow_module_overwrite of this DscMetaConfiguration.
        :rtype: bool
        """
        return self._allow_module_overwrite

    @allow_module_overwrite.setter
    def allow_module_overwrite(self, allow_module_overwrite):
        """Sets the allow_module_overwrite of this DscMetaConfiguration.

        Gets or sets the AllowModuleOverwrite value of the meta configuration.

        :param allow_module_overwrite: The allow_module_overwrite of this DscMetaConfiguration.
        :type allow_module_overwrite: bool
        """

        self._allow_module_overwrite = allow_module_overwrite

    @property
    def certificate_id(self):
        """Gets the certificate_id of this DscMetaConfiguration.

        Gets or sets the CertificateId value of the meta configuration.

        :return: The certificate_id of this DscMetaConfiguration.
        :rtype: str
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this DscMetaConfiguration.

        Gets or sets the CertificateId value of the meta configuration.

        :param certificate_id: The certificate_id of this DscMetaConfiguration.
        :type certificate_id: str
        """

        self._certificate_id = certificate_id

    @property
    def configuration_mode(self):
        """Gets the configuration_mode of this DscMetaConfiguration.

        Gets or sets the ConfigurationMode value of the meta configuration.

        :return: The configuration_mode of this DscMetaConfiguration.
        :rtype: str
        """
        return self._configuration_mode

    @configuration_mode.setter
    def configuration_mode(self, configuration_mode):
        """Sets the configuration_mode of this DscMetaConfiguration.

        Gets or sets the ConfigurationMode value of the meta configuration.

        :param configuration_mode: The configuration_mode of this DscMetaConfiguration.
        :type configuration_mode: str
        """

        self._configuration_mode = configuration_mode

    @property
    def configuration_mode_frequency_mins(self):
        """Gets the configuration_mode_frequency_mins of this DscMetaConfiguration.

        Gets or sets the ConfigurationModeFrequencyMins value of the meta configuration.

        :return: The configuration_mode_frequency_mins of this DscMetaConfiguration.
        :rtype: int
        """
        return self._configuration_mode_frequency_mins

    @configuration_mode_frequency_mins.setter
    def configuration_mode_frequency_mins(self, configuration_mode_frequency_mins):
        """Sets the configuration_mode_frequency_mins of this DscMetaConfiguration.

        Gets or sets the ConfigurationModeFrequencyMins value of the meta configuration.

        :param configuration_mode_frequency_mins: The configuration_mode_frequency_mins of this DscMetaConfiguration.
        :type configuration_mode_frequency_mins: int
        """

        self._configuration_mode_frequency_mins = configuration_mode_frequency_mins

    @property
    def reboot_node_if_needed(self):
        """Gets the reboot_node_if_needed of this DscMetaConfiguration.

        Gets or sets the RebootNodeIfNeeded value of the meta configuration.

        :return: The reboot_node_if_needed of this DscMetaConfiguration.
        :rtype: bool
        """
        return self._reboot_node_if_needed

    @reboot_node_if_needed.setter
    def reboot_node_if_needed(self, reboot_node_if_needed):
        """Sets the reboot_node_if_needed of this DscMetaConfiguration.

        Gets or sets the RebootNodeIfNeeded value of the meta configuration.

        :param reboot_node_if_needed: The reboot_node_if_needed of this DscMetaConfiguration.
        :type reboot_node_if_needed: bool
        """

        self._reboot_node_if_needed = reboot_node_if_needed

    @property
    def refresh_frequency_mins(self):
        """Gets the refresh_frequency_mins of this DscMetaConfiguration.

        Gets or sets the RefreshFrequencyMins value of the meta configuration.

        :return: The refresh_frequency_mins of this DscMetaConfiguration.
        :rtype: int
        """
        return self._refresh_frequency_mins

    @refresh_frequency_mins.setter
    def refresh_frequency_mins(self, refresh_frequency_mins):
        """Sets the refresh_frequency_mins of this DscMetaConfiguration.

        Gets or sets the RefreshFrequencyMins value of the meta configuration.

        :param refresh_frequency_mins: The refresh_frequency_mins of this DscMetaConfiguration.
        :type refresh_frequency_mins: int
        """

        self._refresh_frequency_mins = refresh_frequency_mins
