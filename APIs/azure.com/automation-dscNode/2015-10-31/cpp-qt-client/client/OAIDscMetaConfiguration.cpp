/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDscMetaConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDscMetaConfiguration::OAIDscMetaConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDscMetaConfiguration::OAIDscMetaConfiguration() {
    this->initializeModel();
}

OAIDscMetaConfiguration::~OAIDscMetaConfiguration() {}

void OAIDscMetaConfiguration::initializeModel() {

    m_action_after_reboot_isSet = false;
    m_action_after_reboot_isValid = false;

    m_allow_module_overwrite_isSet = false;
    m_allow_module_overwrite_isValid = false;

    m_certificate_id_isSet = false;
    m_certificate_id_isValid = false;

    m_configuration_mode_isSet = false;
    m_configuration_mode_isValid = false;

    m_configuration_mode_frequency_mins_isSet = false;
    m_configuration_mode_frequency_mins_isValid = false;

    m_reboot_node_if_needed_isSet = false;
    m_reboot_node_if_needed_isValid = false;

    m_refresh_frequency_mins_isSet = false;
    m_refresh_frequency_mins_isValid = false;
}

void OAIDscMetaConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDscMetaConfiguration::fromJsonObject(QJsonObject json) {

    m_action_after_reboot_isValid = ::OpenAPI::fromJsonValue(m_action_after_reboot, json[QString("actionAfterReboot")]);
    m_action_after_reboot_isSet = !json[QString("actionAfterReboot")].isNull() && m_action_after_reboot_isValid;

    m_allow_module_overwrite_isValid = ::OpenAPI::fromJsonValue(m_allow_module_overwrite, json[QString("allowModuleOverwrite")]);
    m_allow_module_overwrite_isSet = !json[QString("allowModuleOverwrite")].isNull() && m_allow_module_overwrite_isValid;

    m_certificate_id_isValid = ::OpenAPI::fromJsonValue(m_certificate_id, json[QString("certificateId")]);
    m_certificate_id_isSet = !json[QString("certificateId")].isNull() && m_certificate_id_isValid;

    m_configuration_mode_isValid = ::OpenAPI::fromJsonValue(m_configuration_mode, json[QString("configurationMode")]);
    m_configuration_mode_isSet = !json[QString("configurationMode")].isNull() && m_configuration_mode_isValid;

    m_configuration_mode_frequency_mins_isValid = ::OpenAPI::fromJsonValue(m_configuration_mode_frequency_mins, json[QString("configurationModeFrequencyMins")]);
    m_configuration_mode_frequency_mins_isSet = !json[QString("configurationModeFrequencyMins")].isNull() && m_configuration_mode_frequency_mins_isValid;

    m_reboot_node_if_needed_isValid = ::OpenAPI::fromJsonValue(m_reboot_node_if_needed, json[QString("rebootNodeIfNeeded")]);
    m_reboot_node_if_needed_isSet = !json[QString("rebootNodeIfNeeded")].isNull() && m_reboot_node_if_needed_isValid;

    m_refresh_frequency_mins_isValid = ::OpenAPI::fromJsonValue(m_refresh_frequency_mins, json[QString("refreshFrequencyMins")]);
    m_refresh_frequency_mins_isSet = !json[QString("refreshFrequencyMins")].isNull() && m_refresh_frequency_mins_isValid;
}

QString OAIDscMetaConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDscMetaConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_action_after_reboot_isSet) {
        obj.insert(QString("actionAfterReboot"), ::OpenAPI::toJsonValue(m_action_after_reboot));
    }
    if (m_allow_module_overwrite_isSet) {
        obj.insert(QString("allowModuleOverwrite"), ::OpenAPI::toJsonValue(m_allow_module_overwrite));
    }
    if (m_certificate_id_isSet) {
        obj.insert(QString("certificateId"), ::OpenAPI::toJsonValue(m_certificate_id));
    }
    if (m_configuration_mode_isSet) {
        obj.insert(QString("configurationMode"), ::OpenAPI::toJsonValue(m_configuration_mode));
    }
    if (m_configuration_mode_frequency_mins_isSet) {
        obj.insert(QString("configurationModeFrequencyMins"), ::OpenAPI::toJsonValue(m_configuration_mode_frequency_mins));
    }
    if (m_reboot_node_if_needed_isSet) {
        obj.insert(QString("rebootNodeIfNeeded"), ::OpenAPI::toJsonValue(m_reboot_node_if_needed));
    }
    if (m_refresh_frequency_mins_isSet) {
        obj.insert(QString("refreshFrequencyMins"), ::OpenAPI::toJsonValue(m_refresh_frequency_mins));
    }
    return obj;
}

QString OAIDscMetaConfiguration::getActionAfterReboot() const {
    return m_action_after_reboot;
}
void OAIDscMetaConfiguration::setActionAfterReboot(const QString &action_after_reboot) {
    m_action_after_reboot = action_after_reboot;
    m_action_after_reboot_isSet = true;
}

bool OAIDscMetaConfiguration::is_action_after_reboot_Set() const{
    return m_action_after_reboot_isSet;
}

bool OAIDscMetaConfiguration::is_action_after_reboot_Valid() const{
    return m_action_after_reboot_isValid;
}

bool OAIDscMetaConfiguration::isAllowModuleOverwrite() const {
    return m_allow_module_overwrite;
}
void OAIDscMetaConfiguration::setAllowModuleOverwrite(const bool &allow_module_overwrite) {
    m_allow_module_overwrite = allow_module_overwrite;
    m_allow_module_overwrite_isSet = true;
}

bool OAIDscMetaConfiguration::is_allow_module_overwrite_Set() const{
    return m_allow_module_overwrite_isSet;
}

bool OAIDscMetaConfiguration::is_allow_module_overwrite_Valid() const{
    return m_allow_module_overwrite_isValid;
}

QString OAIDscMetaConfiguration::getCertificateId() const {
    return m_certificate_id;
}
void OAIDscMetaConfiguration::setCertificateId(const QString &certificate_id) {
    m_certificate_id = certificate_id;
    m_certificate_id_isSet = true;
}

bool OAIDscMetaConfiguration::is_certificate_id_Set() const{
    return m_certificate_id_isSet;
}

bool OAIDscMetaConfiguration::is_certificate_id_Valid() const{
    return m_certificate_id_isValid;
}

QString OAIDscMetaConfiguration::getConfigurationMode() const {
    return m_configuration_mode;
}
void OAIDscMetaConfiguration::setConfigurationMode(const QString &configuration_mode) {
    m_configuration_mode = configuration_mode;
    m_configuration_mode_isSet = true;
}

bool OAIDscMetaConfiguration::is_configuration_mode_Set() const{
    return m_configuration_mode_isSet;
}

bool OAIDscMetaConfiguration::is_configuration_mode_Valid() const{
    return m_configuration_mode_isValid;
}

qint32 OAIDscMetaConfiguration::getConfigurationModeFrequencyMins() const {
    return m_configuration_mode_frequency_mins;
}
void OAIDscMetaConfiguration::setConfigurationModeFrequencyMins(const qint32 &configuration_mode_frequency_mins) {
    m_configuration_mode_frequency_mins = configuration_mode_frequency_mins;
    m_configuration_mode_frequency_mins_isSet = true;
}

bool OAIDscMetaConfiguration::is_configuration_mode_frequency_mins_Set() const{
    return m_configuration_mode_frequency_mins_isSet;
}

bool OAIDscMetaConfiguration::is_configuration_mode_frequency_mins_Valid() const{
    return m_configuration_mode_frequency_mins_isValid;
}

bool OAIDscMetaConfiguration::isRebootNodeIfNeeded() const {
    return m_reboot_node_if_needed;
}
void OAIDscMetaConfiguration::setRebootNodeIfNeeded(const bool &reboot_node_if_needed) {
    m_reboot_node_if_needed = reboot_node_if_needed;
    m_reboot_node_if_needed_isSet = true;
}

bool OAIDscMetaConfiguration::is_reboot_node_if_needed_Set() const{
    return m_reboot_node_if_needed_isSet;
}

bool OAIDscMetaConfiguration::is_reboot_node_if_needed_Valid() const{
    return m_reboot_node_if_needed_isValid;
}

qint32 OAIDscMetaConfiguration::getRefreshFrequencyMins() const {
    return m_refresh_frequency_mins;
}
void OAIDscMetaConfiguration::setRefreshFrequencyMins(const qint32 &refresh_frequency_mins) {
    m_refresh_frequency_mins = refresh_frequency_mins;
    m_refresh_frequency_mins_isSet = true;
}

bool OAIDscMetaConfiguration::is_refresh_frequency_mins_Set() const{
    return m_refresh_frequency_mins_isSet;
}

bool OAIDscMetaConfiguration::is_refresh_frequency_mins_Valid() const{
    return m_refresh_frequency_mins_isValid;
}

bool OAIDscMetaConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_after_reboot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_module_overwrite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_mode_frequency_mins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reboot_node_if_needed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_frequency_mins_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDscMetaConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
