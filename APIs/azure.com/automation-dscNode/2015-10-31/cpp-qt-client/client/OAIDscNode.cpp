/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDscNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDscNode::OAIDscNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDscNode::OAIDscNode() {
    this->initializeModel();
}

OAIDscNode::~OAIDscNode() {}

void OAIDscNode::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_extension_handler_isSet = false;
    m_extension_handler_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_last_seen_isSet = false;
    m_last_seen_isValid = false;

    m_node_configuration_isSet = false;
    m_node_configuration_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_registration_time_isSet = false;
    m_registration_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDscNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDscNode::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_extension_handler_isValid = ::OpenAPI::fromJsonValue(m_extension_handler, json[QString("extensionHandler")]);
    m_extension_handler_isSet = !json[QString("extensionHandler")].isNull() && m_extension_handler_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_last_seen_isValid = ::OpenAPI::fromJsonValue(m_last_seen, json[QString("lastSeen")]);
    m_last_seen_isSet = !json[QString("lastSeen")].isNull() && m_last_seen_isValid;

    m_node_configuration_isValid = ::OpenAPI::fromJsonValue(m_node_configuration, json[QString("nodeConfiguration")]);
    m_node_configuration_isSet = !json[QString("nodeConfiguration")].isNull() && m_node_configuration_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("nodeId")]);
    m_node_id_isSet = !json[QString("nodeId")].isNull() && m_node_id_isValid;

    m_registration_time_isValid = ::OpenAPI::fromJsonValue(m_registration_time, json[QString("registrationTime")]);
    m_registration_time_isSet = !json[QString("registrationTime")].isNull() && m_registration_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDscNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDscNode::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_extension_handler.size() > 0) {
        obj.insert(QString("extensionHandler"), ::OpenAPI::toJsonValue(m_extension_handler));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_last_seen_isSet) {
        obj.insert(QString("lastSeen"), ::OpenAPI::toJsonValue(m_last_seen));
    }
    if (m_node_configuration.isSet()) {
        obj.insert(QString("nodeConfiguration"), ::OpenAPI::toJsonValue(m_node_configuration));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("nodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_registration_time_isSet) {
        obj.insert(QString("registrationTime"), ::OpenAPI::toJsonValue(m_registration_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDscNode::getAccountId() const {
    return m_account_id;
}
void OAIDscNode::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDscNode::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDscNode::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIDscNode::getEtag() const {
    return m_etag;
}
void OAIDscNode::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIDscNode::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIDscNode::is_etag_Valid() const{
    return m_etag_isValid;
}

QList<OAIDscNodeExtensionHandlerAssociationProperty> OAIDscNode::getExtensionHandler() const {
    return m_extension_handler;
}
void OAIDscNode::setExtensionHandler(const QList<OAIDscNodeExtensionHandlerAssociationProperty> &extension_handler) {
    m_extension_handler = extension_handler;
    m_extension_handler_isSet = true;
}

bool OAIDscNode::is_extension_handler_Set() const{
    return m_extension_handler_isSet;
}

bool OAIDscNode::is_extension_handler_Valid() const{
    return m_extension_handler_isValid;
}

QString OAIDscNode::getIp() const {
    return m_ip;
}
void OAIDscNode::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIDscNode::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIDscNode::is_ip_Valid() const{
    return m_ip_isValid;
}

QDateTime OAIDscNode::getLastSeen() const {
    return m_last_seen;
}
void OAIDscNode::setLastSeen(const QDateTime &last_seen) {
    m_last_seen = last_seen;
    m_last_seen_isSet = true;
}

bool OAIDscNode::is_last_seen_Set() const{
    return m_last_seen_isSet;
}

bool OAIDscNode::is_last_seen_Valid() const{
    return m_last_seen_isValid;
}

OAIDscNodeConfigurationAssociationProperty OAIDscNode::getNodeConfiguration() const {
    return m_node_configuration;
}
void OAIDscNode::setNodeConfiguration(const OAIDscNodeConfigurationAssociationProperty &node_configuration) {
    m_node_configuration = node_configuration;
    m_node_configuration_isSet = true;
}

bool OAIDscNode::is_node_configuration_Set() const{
    return m_node_configuration_isSet;
}

bool OAIDscNode::is_node_configuration_Valid() const{
    return m_node_configuration_isValid;
}

QString OAIDscNode::getNodeId() const {
    return m_node_id;
}
void OAIDscNode::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIDscNode::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIDscNode::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QDateTime OAIDscNode::getRegistrationTime() const {
    return m_registration_time;
}
void OAIDscNode::setRegistrationTime(const QDateTime &registration_time) {
    m_registration_time = registration_time;
    m_registration_time_isSet = true;
}

bool OAIDscNode::is_registration_time_Set() const{
    return m_registration_time_isSet;
}

bool OAIDscNode::is_registration_time_Valid() const{
    return m_registration_time_isValid;
}

QString OAIDscNode::getStatus() const {
    return m_status;
}
void OAIDscNode::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDscNode::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDscNode::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDscNode::getId() const {
    return m_id;
}
void OAIDscNode::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDscNode::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDscNode::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDscNode::getName() const {
    return m_name;
}
void OAIDscNode::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDscNode::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDscNode::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDscNode::getType() const {
    return m_type;
}
void OAIDscNode::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDscNode::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDscNode::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDscNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_handler.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDscNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
