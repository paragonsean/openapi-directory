/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgentRegistration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgentRegistration::OAIAgentRegistration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgentRegistration::OAIAgentRegistration() {
    this->initializeModel();
}

OAIAgentRegistration::~OAIAgentRegistration() {}

void OAIAgentRegistration::initializeModel() {

    m_dsc_meta_configuration_isSet = false;
    m_dsc_meta_configuration_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;
}

void OAIAgentRegistration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgentRegistration::fromJsonObject(QJsonObject json) {

    m_dsc_meta_configuration_isValid = ::OpenAPI::fromJsonValue(m_dsc_meta_configuration, json[QString("dscMetaConfiguration")]);
    m_dsc_meta_configuration_isSet = !json[QString("dscMetaConfiguration")].isNull() && m_dsc_meta_configuration_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("keys")]);
    m_keys_isSet = !json[QString("keys")].isNull() && m_keys_isValid;
}

QString OAIAgentRegistration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgentRegistration::asJsonObject() const {
    QJsonObject obj;
    if (m_dsc_meta_configuration_isSet) {
        obj.insert(QString("dscMetaConfiguration"), ::OpenAPI::toJsonValue(m_dsc_meta_configuration));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_keys.isSet()) {
        obj.insert(QString("keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    return obj;
}

QString OAIAgentRegistration::getDscMetaConfiguration() const {
    return m_dsc_meta_configuration;
}
void OAIAgentRegistration::setDscMetaConfiguration(const QString &dsc_meta_configuration) {
    m_dsc_meta_configuration = dsc_meta_configuration;
    m_dsc_meta_configuration_isSet = true;
}

bool OAIAgentRegistration::is_dsc_meta_configuration_Set() const{
    return m_dsc_meta_configuration_isSet;
}

bool OAIAgentRegistration::is_dsc_meta_configuration_Valid() const{
    return m_dsc_meta_configuration_isValid;
}

QString OAIAgentRegistration::getEndpoint() const {
    return m_endpoint;
}
void OAIAgentRegistration::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIAgentRegistration::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIAgentRegistration::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIAgentRegistration::getId() const {
    return m_id;
}
void OAIAgentRegistration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAgentRegistration::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAgentRegistration::is_id_Valid() const{
    return m_id_isValid;
}

OAIAgentRegistrationKeys OAIAgentRegistration::getKeys() const {
    return m_keys;
}
void OAIAgentRegistration::setKeys(const OAIAgentRegistrationKeys &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIAgentRegistration::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIAgentRegistration::is_keys_Valid() const{
    return m_keys_isValid;
}

bool OAIAgentRegistration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dsc_meta_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgentRegistration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
