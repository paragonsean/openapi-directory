/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DscReportError model module.
 * @module model/DscReportError
 * @version 2015-10-31
 */
class DscReportError {
    /**
     * Constructs a new <code>DscReportError</code>.
     * Definition of the dsc node report error type.
     * @alias module:model/DscReportError
     */
    constructor() { 
        
        DscReportError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DscReportError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DscReportError} obj Optional instance to populate.
     * @return {module:model/DscReportError} The populated <code>DscReportError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DscReportError();

            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('errorDetails')) {
                obj['errorDetails'] = ApiClient.convertToType(data['errorDetails'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('errorSource')) {
                obj['errorSource'] = ApiClient.convertToType(data['errorSource'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DscReportError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DscReportError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['errorCode'] && !(typeof data['errorCode'] === 'string' || data['errorCode'] instanceof String)) {
            throw new Error("Expected the field `errorCode` to be a primitive type in the JSON string but got " + data['errorCode']);
        }
        // ensure the json data is a string
        if (data['errorDetails'] && !(typeof data['errorDetails'] === 'string' || data['errorDetails'] instanceof String)) {
            throw new Error("Expected the field `errorDetails` to be a primitive type in the JSON string but got " + data['errorDetails']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['errorSource'] && !(typeof data['errorSource'] === 'string' || data['errorSource'] instanceof String)) {
            throw new Error("Expected the field `errorSource` to be a primitive type in the JSON string but got " + data['errorSource']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }

        return true;
    }


}



/**
 * Gets or sets the error code.
 * @member {String} errorCode
 */
DscReportError.prototype['errorCode'] = undefined;

/**
 * Gets or sets the error details.
 * @member {String} errorDetails
 */
DscReportError.prototype['errorDetails'] = undefined;

/**
 * Gets or sets the error message.
 * @member {String} errorMessage
 */
DscReportError.prototype['errorMessage'] = undefined;

/**
 * Gets or sets the source of the error.
 * @member {String} errorSource
 */
DscReportError.prototype['errorSource'] = undefined;

/**
 * Gets or sets the locale of the error.
 * @member {String} locale
 */
DscReportError.prototype['locale'] = undefined;

/**
 * Gets or sets the resource ID which generated the error.
 * @member {String} resourceId
 */
DscReportError.prototype['resourceId'] = undefined;






export default DscReportError;

