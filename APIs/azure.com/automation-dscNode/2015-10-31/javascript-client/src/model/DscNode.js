/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DscNodeConfigurationAssociationProperty from './DscNodeConfigurationAssociationProperty';
import DscNodeExtensionHandlerAssociationProperty from './DscNodeExtensionHandlerAssociationProperty';

/**
 * The DscNode model module.
 * @module model/DscNode
 * @version 2015-10-31
 */
class DscNode {
    /**
     * Constructs a new <code>DscNode</code>.
     * Definition of the dsc node type.
     * @alias module:model/DscNode
     */
    constructor() { 
        
        DscNode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DscNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DscNode} obj Optional instance to populate.
     * @return {module:model/DscNode} The populated <code>DscNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DscNode();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('extensionHandler')) {
                obj['extensionHandler'] = ApiClient.convertToType(data['extensionHandler'], [DscNodeExtensionHandlerAssociationProperty]);
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('lastSeen')) {
                obj['lastSeen'] = ApiClient.convertToType(data['lastSeen'], 'Date');
            }
            if (data.hasOwnProperty('nodeConfiguration')) {
                obj['nodeConfiguration'] = DscNodeConfigurationAssociationProperty.constructFromObject(data['nodeConfiguration']);
            }
            if (data.hasOwnProperty('nodeId')) {
                obj['nodeId'] = ApiClient.convertToType(data['nodeId'], 'String');
            }
            if (data.hasOwnProperty('registrationTime')) {
                obj['registrationTime'] = ApiClient.convertToType(data['registrationTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DscNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DscNode</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        if (data['extensionHandler']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['extensionHandler'])) {
                throw new Error("Expected the field `extensionHandler` to be an array in the JSON data but got " + data['extensionHandler']);
            }
            // validate the optional field `extensionHandler` (array)
            for (const item of data['extensionHandler']) {
                DscNodeExtensionHandlerAssociationProperty.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // validate the optional field `nodeConfiguration`
        if (data['nodeConfiguration']) { // data not null
          DscNodeConfigurationAssociationProperty.validateJSON(data['nodeConfiguration']);
        }
        // ensure the json data is a string
        if (data['nodeId'] && !(typeof data['nodeId'] === 'string' || data['nodeId'] instanceof String)) {
            throw new Error("Expected the field `nodeId` to be a primitive type in the JSON string but got " + data['nodeId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Gets or sets the account id of the node.
 * @member {String} accountId
 */
DscNode.prototype['accountId'] = undefined;

/**
 * Gets or sets the etag of the resource.
 * @member {String} etag
 */
DscNode.prototype['etag'] = undefined;

/**
 * Gets or sets the list of extensionHandler properties for a Node.
 * @member {Array.<module:model/DscNodeExtensionHandlerAssociationProperty>} extensionHandler
 */
DscNode.prototype['extensionHandler'] = undefined;

/**
 * Gets or sets the ip of the node.
 * @member {String} ip
 */
DscNode.prototype['ip'] = undefined;

/**
 * Gets or sets the last seen time of the node.
 * @member {Date} lastSeen
 */
DscNode.prototype['lastSeen'] = undefined;

/**
 * @member {module:model/DscNodeConfigurationAssociationProperty} nodeConfiguration
 */
DscNode.prototype['nodeConfiguration'] = undefined;

/**
 * Gets or sets the node id.
 * @member {String} nodeId
 */
DscNode.prototype['nodeId'] = undefined;

/**
 * Gets or sets the registration time of the node.
 * @member {Date} registrationTime
 */
DscNode.prototype['registrationTime'] = undefined;

/**
 * Gets or sets the status of the node.
 * @member {String} status
 */
DscNode.prototype['status'] = undefined;

/**
 * Fully qualified resource Id for the resource
 * @member {String} id
 */
DscNode.prototype['id'] = undefined;

/**
 * The name of the resource
 * @member {String} name
 */
DscNode.prototype['name'] = undefined;

/**
 * The type of the resource.
 * @member {String} type
 */
DscNode.prototype['type'] = undefined;






export default DscNode;

