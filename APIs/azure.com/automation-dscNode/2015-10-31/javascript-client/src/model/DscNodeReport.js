/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DscMetaConfiguration from './DscMetaConfiguration';
import DscReportError from './DscReportError';
import DscReportResource from './DscReportResource';

/**
 * The DscNodeReport model module.
 * @module model/DscNodeReport
 * @version 2015-10-31
 */
class DscNodeReport {
    /**
     * Constructs a new <code>DscNodeReport</code>.
     * Definition of the dsc node report type.
     * @alias module:model/DscNodeReport
     */
    constructor() { 
        
        DscNodeReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DscNodeReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DscNodeReport} obj Optional instance to populate.
     * @return {module:model/DscNodeReport} The populated <code>DscNodeReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DscNodeReport();

            if (data.hasOwnProperty('configurationVersion')) {
                obj['configurationVersion'] = ApiClient.convertToType(data['configurationVersion'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [DscReportError]);
            }
            if (data.hasOwnProperty('hostName')) {
                obj['hostName'] = ApiClient.convertToType(data['hostName'], 'String');
            }
            if (data.hasOwnProperty('iPV4Addresses')) {
                obj['iPV4Addresses'] = ApiClient.convertToType(data['iPV4Addresses'], ['String']);
            }
            if (data.hasOwnProperty('iPV6Addresses')) {
                obj['iPV6Addresses'] = ApiClient.convertToType(data['iPV6Addresses'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('metaConfiguration')) {
                obj['metaConfiguration'] = DscMetaConfiguration.constructFromObject(data['metaConfiguration']);
            }
            if (data.hasOwnProperty('numberOfResources')) {
                obj['numberOfResources'] = ApiClient.convertToType(data['numberOfResources'], 'Number');
            }
            if (data.hasOwnProperty('rawErrors')) {
                obj['rawErrors'] = ApiClient.convertToType(data['rawErrors'], 'String');
            }
            if (data.hasOwnProperty('rebootRequested')) {
                obj['rebootRequested'] = ApiClient.convertToType(data['rebootRequested'], 'String');
            }
            if (data.hasOwnProperty('refreshMode')) {
                obj['refreshMode'] = ApiClient.convertToType(data['refreshMode'], 'String');
            }
            if (data.hasOwnProperty('reportFormatVersion')) {
                obj['reportFormatVersion'] = ApiClient.convertToType(data['reportFormatVersion'], 'String');
            }
            if (data.hasOwnProperty('reportId')) {
                obj['reportId'] = ApiClient.convertToType(data['reportId'], 'String');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], [DscReportResource]);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DscNodeReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DscNodeReport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['configurationVersion'] && !(typeof data['configurationVersion'] === 'string' || data['configurationVersion'] instanceof String)) {
            throw new Error("Expected the field `configurationVersion` to be a primitive type in the JSON string but got " + data['configurationVersion']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                DscReportError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['hostName'] && !(typeof data['hostName'] === 'string' || data['hostName'] instanceof String)) {
            throw new Error("Expected the field `hostName` to be a primitive type in the JSON string but got " + data['hostName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['iPV4Addresses'])) {
            throw new Error("Expected the field `iPV4Addresses` to be an array in the JSON data but got " + data['iPV4Addresses']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['iPV6Addresses'])) {
            throw new Error("Expected the field `iPV6Addresses` to be an array in the JSON data but got " + data['iPV6Addresses']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `metaConfiguration`
        if (data['metaConfiguration']) { // data not null
          DscMetaConfiguration.validateJSON(data['metaConfiguration']);
        }
        // ensure the json data is a string
        if (data['rawErrors'] && !(typeof data['rawErrors'] === 'string' || data['rawErrors'] instanceof String)) {
            throw new Error("Expected the field `rawErrors` to be a primitive type in the JSON string but got " + data['rawErrors']);
        }
        // ensure the json data is a string
        if (data['rebootRequested'] && !(typeof data['rebootRequested'] === 'string' || data['rebootRequested'] instanceof String)) {
            throw new Error("Expected the field `rebootRequested` to be a primitive type in the JSON string but got " + data['rebootRequested']);
        }
        // ensure the json data is a string
        if (data['refreshMode'] && !(typeof data['refreshMode'] === 'string' || data['refreshMode'] instanceof String)) {
            throw new Error("Expected the field `refreshMode` to be a primitive type in the JSON string but got " + data['refreshMode']);
        }
        // ensure the json data is a string
        if (data['reportFormatVersion'] && !(typeof data['reportFormatVersion'] === 'string' || data['reportFormatVersion'] instanceof String)) {
            throw new Error("Expected the field `reportFormatVersion` to be a primitive type in the JSON string but got " + data['reportFormatVersion']);
        }
        // ensure the json data is a string
        if (data['reportId'] && !(typeof data['reportId'] === 'string' || data['reportId'] instanceof String)) {
            throw new Error("Expected the field `reportId` to be a primitive type in the JSON string but got " + data['reportId']);
        }
        if (data['resources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resources'])) {
                throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
            }
            // validate the optional field `resources` (array)
            for (const item of data['resources']) {
                DscReportResource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Gets or sets the configurationVersion of the node report.
 * @member {String} configurationVersion
 */
DscNodeReport.prototype['configurationVersion'] = undefined;

/**
 * Gets or sets the end time of the node report.
 * @member {Date} endTime
 */
DscNodeReport.prototype['endTime'] = undefined;

/**
 * Gets or sets the errors for the node report.
 * @member {Array.<module:model/DscReportError>} errors
 */
DscNodeReport.prototype['errors'] = undefined;

/**
 * Gets or sets the hostname of the node that sent the report.
 * @member {String} hostName
 */
DscNodeReport.prototype['hostName'] = undefined;

/**
 * Gets or sets the IPv4 address of the node that sent the report.
 * @member {Array.<String>} iPV4Addresses
 */
DscNodeReport.prototype['iPV4Addresses'] = undefined;

/**
 * Gets or sets the IPv6 address of the node that sent the report.
 * @member {Array.<String>} iPV6Addresses
 */
DscNodeReport.prototype['iPV6Addresses'] = undefined;

/**
 * Gets or sets the id.
 * @member {String} id
 */
DscNodeReport.prototype['id'] = undefined;

/**
 * Gets or sets the lastModifiedTime of the node report.
 * @member {Date} lastModifiedTime
 */
DscNodeReport.prototype['lastModifiedTime'] = undefined;

/**
 * @member {module:model/DscMetaConfiguration} metaConfiguration
 */
DscNodeReport.prototype['metaConfiguration'] = undefined;

/**
 * Gets or sets the number of resource in the node report.
 * @member {Number} numberOfResources
 */
DscNodeReport.prototype['numberOfResources'] = undefined;

/**
 * Gets or sets the unparsed errors for the node report.
 * @member {String} rawErrors
 */
DscNodeReport.prototype['rawErrors'] = undefined;

/**
 * Gets or sets the rebootRequested of the node report.
 * @member {String} rebootRequested
 */
DscNodeReport.prototype['rebootRequested'] = undefined;

/**
 * Gets or sets the refreshMode of the node report.
 * @member {String} refreshMode
 */
DscNodeReport.prototype['refreshMode'] = undefined;

/**
 * Gets or sets the reportFormatVersion of the node report.
 * @member {String} reportFormatVersion
 */
DscNodeReport.prototype['reportFormatVersion'] = undefined;

/**
 * Gets or sets the id of the node report.
 * @member {String} reportId
 */
DscNodeReport.prototype['reportId'] = undefined;

/**
 * Gets or sets the resource for the node report.
 * @member {Array.<module:model/DscReportResource>} resources
 */
DscNodeReport.prototype['resources'] = undefined;

/**
 * Gets or sets the start time of the node report.
 * @member {Date} startTime
 */
DscNodeReport.prototype['startTime'] = undefined;

/**
 * Gets or sets the status of the node report.
 * @member {String} status
 */
DscNodeReport.prototype['status'] = undefined;

/**
 * Gets or sets the type of the node report.
 * @member {String} type
 */
DscNodeReport.prototype['type'] = undefined;






export default DscNodeReport;

